dev.badline  badline:SymbolID_byval  expr:".*const SymbolID ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:VenueID_byval  expr:".*const VenueID ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:assign_tempstr  expr:".*<<\\s*tempstr\\(\\).*"  targsrc_regx:%  comment:"extra tempstr can be eliminated. See txt/string-readme.txt for more info"
dev.badline  badline:bool_byval  expr:".*const bool ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:double_byval  expr:".*const double ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:float_byval  expr:".*const float ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:i32_byval  expr:".*const (i|u)(8|16|32|64) ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:include_dots  expr:"#include .*\\.\\./.*"  targsrc_regx:%  comment:"../ in #includes are not allowed"
dev.badline  badline:int_byval  expr:".*const int ?&.*"  targsrc_regx:%  comment:"built-in type by reference"
dev.badline  badline:prlog_tempstr  expr:".*(err_?|(pr|verb|dbg)log_?)\\(\\s*tempstr.*"  targsrc_regx:%  comment:"print macros do not require tempstr(). See txt/string-readme.txt for more info"
dev.badline  badline:useless_tempstr  expr:".*strptr .*=.*(tempstr|cstring|SysEval).*"  targsrc_regx:%  comment:"strptr is being assigned a temporary. See txt/string-readme.txt for more info"
dev.badline  badline:using_namespace  expr:"using namespace .*"  targsrc_regx:%.h  comment:"'using namespace' is not allowed in headers"
