amcdb.tfunc  tfunc:Atree.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete all elements in the tree."
amcdb.tfunc  tfunc:Atree.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Atree.FirstImpl  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.First  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return pointer to the first(smallest) element in the tree"
amcdb.tfunc  tfunc:Atree.InTreeQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if row is in the tree, false otherwise"
amcdb.tfunc  tfunc:Atree.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Atree.InsertImpl  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Insert row into the tree. If row is already in the tree, do nothing."
amcdb.tfunc  tfunc:Atree.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Insert row into the tree. If row is already in the tree, do nothing."
amcdb.tfunc  tfunc:Atree.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove element from index. If element is not in index, do nothing."
amcdb.tfunc  tfunc:Atree.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Empty the index. (The rows are not deleted)"
amcdb.tfunc  tfunc:Atree.RemoveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"If the tree is empty, return NULL. Otherwise unlink and return pointer to first element."
amcdb.tfunc  tfunc:Atree.Balance  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.Propagate  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Recalculate depth and keep rebalancing if needed"
amcdb.tfunc  tfunc:Atree.TallerChild  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Returns the child that has greater height."
amcdb.tfunc  tfunc:Atree.Disconnect  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Disconnects the subtree(branch) from the parent"
amcdb.tfunc  tfunc:Atree.Rebalance  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Rebalances the node if needed."
amcdb.tfunc  tfunc:Atree.Next  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.Prev  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.LastImpl  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.Last  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return pointer to the last(largest) element in tree"
amcdb.tfunc  tfunc:Atree.ElemLt  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.UpdateDepth  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.Turn  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"rotates the tree in from->to direction"
amcdb.tfunc  tfunc:Atree.Connect  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.curs  hasthrow:N  leaf:N  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Atree.RemoveAllImpl  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Empty the index. (rows may be deleted if cascdel)"
amcdb.tfunc  tfunc:Atree.Reinsert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Reinsert a row with modified key(Reheap semantics)"
amcdb.tfunc  tfunc:Atree.FirstGe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Find the first element that is greater or equal to a sortfld value"
amcdb.tfunc  tfunc:Atree.LastLt  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Find the last element that is smaller or equal to a sortfld value"
amcdb.tfunc  tfunc:Base.CopyOut  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy fields out of row"
amcdb.tfunc  tfunc:Base.Castdown  hasthrow:N  leaf:N  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Base.Castbase  hasthrow:N  leaf:N  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Base.CopyIn  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy fields in to row"
amcdb.tfunc  tfunc:Bheap.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Compact  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Return unneeded memory to allocator"
amcdb.tfunc  tfunc:Bheap.Dealloc  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Downheap  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.First  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"If index empty, return NULL. Otherwise return pointer to first element in index"
amcdb.tfunc  tfunc:Bheap.InBheapQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if row is in index, false otherwise"
amcdb.tfunc  tfunc:Bheap.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Bheap.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Reheap  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.ReheapFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove element from index. If element is not in index, do nothing."
amcdb.tfunc  tfunc:Bheap.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.RemoveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Reserve  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Reserve space in index for N more elements"
amcdb.tfunc  tfunc:Bheap.Set  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.SetIfBetter  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Bheap.Upheap  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.ElemLt  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.ElemLtval  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bheap.unordcurs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitfld.Get  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitfld.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Bitfld.Set  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.qFind  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.NBits  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Get max # of bits in the bitset"
amcdb.tfunc  tfunc:Bitset.qGetBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.GetBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.BitsEmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Check if all the bits in the bitset are equal to zero"
amcdb.tfunc  tfunc:Bitset.Sum1s  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.qClearBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.ClearBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.qSetBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Set bit # BIT_IDX in bit set. No bounds checking"
amcdb.tfunc  tfunc:Bitset.SetBit  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Set bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing."
amcdb.tfunc  tfunc:Bitset.qSetBitVal  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Set bit # BIT_IDX in bit set. No bounds checking"
amcdb.tfunc  tfunc:Bitset.qOrBitVal  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Or bit # BIT_IDX in bit set. No bounds checking"
amcdb.tfunc  tfunc:Bitset.ClearBitsAll  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.ClearBits  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Zero in PARENT any bits that are set in RHS."
amcdb.tfunc  tfunc:Bitset.OrBits  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.ExpandBits  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.AllocBit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Bitset.Sup  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return smallest number N such that indexes of all 1 bits are below N"
amcdb.tfunc  tfunc:Blkpool.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Blkpool.SetBufferSize  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Blkpool.ReserveBuffers  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Reserve NBUF buffers of specified size"
amcdb.tfunc  tfunc:Blkpool.FreeMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Deallocate memory previously allocated from pool"
amcdb.tfunc  tfunc:Blkpool.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Charset.Match  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cmp.Nextchar  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cmp.Lt  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cmp.Cmp  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Count.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Count.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Count.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cppfunc.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cppfunc.Get  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Cppfunc.Set  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Hash  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.XrefMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Unref  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.ReadFieldMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.ReadStrptrMaybe  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.ReadTupleMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Lt  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.GetMsgLength  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Message length (uses length field)"
amcdb.tfunc  tfunc:Ctype.GetMsgMemptr  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Memptr encompassing the message (uses length field)"
amcdb.tfunc  tfunc:Ctype.Cmp  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.UpdateMax  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Attempt to make LHS bigger. Return true if it was changed"
amcdb.tfunc  tfunc:Ctype.Min  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return the lesser of two values"
amcdb.tfunc  tfunc:Ctype.UpdateMin  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Attempt to make LHS smaller. Return true if it was changed"
amcdb.tfunc  tfunc:Ctype.Max  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return the greater of two values"
amcdb.tfunc  tfunc:Ctype.Eq  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Update  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Set value. Return true if new value is different from old value."
amcdb.tfunc  tfunc:Ctype.EqStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.PrintArgv  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.ToCmdline  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.FmtJson  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.EqEnum  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ctype.GetAnon  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.qSetDouble  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.GetDouble  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.GetInt  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.GetScale  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.SetDoubleMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Dec.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Delptr.Access  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Get or Create"
amcdb.tfunc  tfunc:Delptr.Delete  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Delptr.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Delptr.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Exec.Start  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Start subprocess"
amcdb.tfunc  tfunc:Exec.StartRead  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Start subprocess & Read output"
amcdb.tfunc  tfunc:Exec.Kill  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Kill subprocess and wait"
amcdb.tfunc  tfunc:Exec.Wait  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Wait for subprocess to return"
amcdb.tfunc  tfunc:Exec.Exec  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Start + Wait"
amcdb.tfunc  tfunc:Exec.ExecX  hasthrow:Y  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Start + Wait, throw exception on error"
amcdb.tfunc  tfunc:Exec.Execv  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Call execv()"
amcdb.tfunc  tfunc:Exec.ToCmdline  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Exec.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Exec.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Fbuf.BeginRead  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Attach fbuf to Iohook for reading"
amcdb.tfunc  tfunc:Fbuf.EndRead  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Set EOF flag"
amcdb.tfunc  tfunc:Fbuf.EndWrite  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Send zero-byte write"
amcdb.tfunc  tfunc:Fbuf.BeginWrite  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Attach fbuf to Iohook for writing"
amcdb.tfunc  tfunc:Fbuf.GetMsg  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Detect incoming message in buffer and return it"
amcdb.tfunc  tfunc:Fbuf.Realloc  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Set buffer size."
amcdb.tfunc  tfunc:Fbuf.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Fbuf.Max  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return max. number of bytes in the buffer."
amcdb.tfunc  tfunc:Fbuf.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of bytes in the buffer."
amcdb.tfunc  tfunc:Fbuf.Outflow  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Transfer bytes from buffer to fd using write()"
amcdb.tfunc  tfunc:Fbuf.Refill  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Refill buffer. Return false if no further refill possible (input buffer exhausted)"
amcdb.tfunc  tfunc:Fbuf.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Empty bfufer"
amcdb.tfunc  tfunc:Fbuf.Scanmsg  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Internal function to scan for a message"
amcdb.tfunc  tfunc:Fbuf.Shift  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Internal function to shift data left"
amcdb.tfunc  tfunc:Fbuf.SkipBytes  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Skip N bytes when reading"
amcdb.tfunc  tfunc:Fbuf.SkipMsg  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Skip current message, if any"
amcdb.tfunc  tfunc:Fbuf.WriteAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Attempt to write buffer contents to fd"
amcdb.tfunc  tfunc:Fbuf.WriteMsg  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Write message to buffer. If the entire message is written, return true, otherwise false."
amcdb.tfunc  tfunc:Fbuf.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:"Free memory"
amcdb.tfunc  tfunc:Fcast.Cast  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.GetEnum  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.SetEnum  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.ToCstr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.SetStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.SetStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Fconst.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Field.Cleanup  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Field.Userinit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Field.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Field.Concat  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Generate Concat functin if the field is a sourcefield"
amcdb.tfunc  tfunc:Field2.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.ReadArgv  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.MainArgs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Main function"
amcdb.tfunc  tfunc:Global.main  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.WinMain  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"WinMain for Win GUI executables"
amcdb.tfunc  tfunc:Global.MainLoop  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Main loop."
amcdb.tfunc  tfunc:Global.Step  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Main step"
amcdb.tfunc  tfunc:Global.Main  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Main function"
amcdb.tfunc  tfunc:Global.InitReflection  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Load statically available data into tables, register tables and database."
amcdb.tfunc  tfunc:Global.StaticCheck  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.InsertStrptrMaybe  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.LoadTuplesMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Load all finputs from given directory."
amcdb.tfunc  tfunc:Global.SaveTuples  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Save ssim data to given directory."
amcdb.tfunc  tfunc:Global.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Global.LoadSsimfileMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Load specified ssimfile."
amcdb.tfunc  tfunc:Global.Steps  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Calls Step function of dependencies"
amcdb.tfunc  tfunc:Hook.Call  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Invoke function by pointer"
amcdb.tfunc  tfunc:Hook.Set0  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Assign 0-argument hook with no context pointer"
amcdb.tfunc  tfunc:Hook.Set1  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Assign 1-argument hook with context pointer"
amcdb.tfunc  tfunc:Hook.Set2  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Assign 2-argument hook with context pointer"
amcdb.tfunc  tfunc:Inlary.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate space for one element. If no memory available, return NULL."
amcdb.tfunc  tfunc:Inlary.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Inlary.Fill  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Set all elements of fixed array to value RHS"
amcdb.tfunc  tfunc:Inlary.Find  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Look up row by row id. Return NULL if out of range"
amcdb.tfunc  tfunc:Inlary.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Inlary.Max  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the array"
amcdb.tfunc  tfunc:Inlary.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Destroy all elements of Inlary"
amcdb.tfunc  tfunc:Inlary.RemoveLast  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete last element of array. Do nothing if array is empty."
amcdb.tfunc  tfunc:Inlary.RowidFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"find row by row id"
amcdb.tfunc  tfunc:Inlary.Setary  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Set contents of fixed array to RHS; Input length is trimmed as necessary"
amcdb.tfunc  tfunc:Inlary.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Inlary.qFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"'quick' Access row by row id. No bounds checking in release."
amcdb.tfunc  tfunc:Inlary.rowid_Get  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Compute row id of element given element's address"
amcdb.tfunc  tfunc:Inlary.Eq  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.Cmp  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Inlary.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Read array from string"
amcdb.tfunc  tfunc:Io.SaveSsimfile  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Io.Input  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Io.InputMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Io.LoadStatic  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Lary.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate space for one element. If no memory available, return NULL."
amcdb.tfunc  tfunc:Lary.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Lary.Find  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Look up row by row id. Return NULL if out of range"
amcdb.tfunc  tfunc:Lary.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Lary.Last  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:Y  ismacro:N  comment:"Return pointer to last element of array, or NULL if array is empty"
amcdb.tfunc  tfunc:Lary.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the pool"
amcdb.tfunc  tfunc:Lary.RemoveAll  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove all elements from Lary"
amcdb.tfunc  tfunc:Lary.RemoveLast  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete last element of array. Do nothing if array is empty."
amcdb.tfunc  tfunc:Lary.RowidFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"find row by row id"
amcdb.tfunc  tfunc:Lary.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Lary.qFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"'quick' Access row by row id. No bounds checking."
amcdb.tfunc  tfunc:Lary.qLast  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return reference to last element of array. No bounds checking"
amcdb.tfunc  tfunc:Lary.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Llist.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete all elements in the linked list."
amcdb.tfunc  tfunc:Llist.DestructiveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"If index empty, return NULL. Otherwise return pointer to first element in index"
amcdb.tfunc  tfunc:Llist.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Llist.First  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"If index empty, return NULL. Otherwise return pointer to first element in index"
amcdb.tfunc  tfunc:Llist.InLlistQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if row is in the linked list, false otherwise"
amcdb.tfunc  tfunc:Llist.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Llist.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Insert row into linked list. If row is already in linked list, do nothing."
amcdb.tfunc  tfunc:Llist.Last  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"If index empty, return NULL. Otherwise return pointer to last element in index"
amcdb.tfunc  tfunc:Llist.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the linked list"
amcdb.tfunc  tfunc:Llist.Next  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return pointer to next element in the list"
amcdb.tfunc  tfunc:Llist.Prev  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return pointer to previous element in the list"
amcdb.tfunc  tfunc:Llist.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove element from index. If element is not in index, do nothing."
amcdb.tfunc  tfunc:Llist.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Empty the index. (The rows are not deleted)"
amcdb.tfunc  tfunc:Llist.RemoveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"If linked list is empty, return NULL. Otherwise unlink and return pointer to first element."
amcdb.tfunc  tfunc:Llist.RotateFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"If linked list is empty, return NULL.\nOtherwise return head item and advance head to the next item."
amcdb.tfunc  tfunc:Llist.qLast  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return reference to last element in the index. No bounds checking."
amcdb.tfunc  tfunc:Llist.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Llist.delcurs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Lpool.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Lpool.FreeMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Free block of memory previously returned by Lpool."
amcdb.tfunc  tfunc:Lpool.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Lpool.ReserveBuffers  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Add N buffers of some size to the free store"
amcdb.tfunc  tfunc:Lpool.ReallocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Lpool.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the pool"
amcdb.tfunc  tfunc:Malloc.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Malloc.FreeMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Malloc.ReallocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Numstr.qGetnum  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Numstr.GetnumDflt  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Numstr.Geti64  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Numstr.SetnumMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Numstr.ForAllStrings  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Opt.Get  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Opt.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Access optional portion as an array of bytes"
amcdb.tfunc  tfunc:Opt.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Opt.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pmask.PresentQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pmask.SetPresent  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pool.Alloc  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pool.AllocMaybe  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate memory for new element. If out of memory, return NULL."
amcdb.tfunc  tfunc:Pool.AllocExtra  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pool.AllocExtraMaybe  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate memory for new element. If out of memory, return NULL."
amcdb.tfunc  tfunc:Pool.AllocVarlenMaybe  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate element & copy memory from input parameter. If out of memory, return NULL."
amcdb.tfunc  tfunc:Pool.AllocVarlen  hasthrow:N  leaf:N  poolfunc:Y  inl:N  wur:Y  pure:N  ismacro:N  comment:"Allocate element & copy memory from input parameter. If out of memory, terminate process."
amcdb.tfunc  tfunc:Pool.InsertMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Pool.UpdateMaybe  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Insert new value or update existing value"
amcdb.tfunc  tfunc:Pool.Delete  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Protocol.StaticCheck  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptr.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptr.InsertMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptr.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Ptr.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Remove element from index. If element is not in index, do nothing."
amcdb.tfunc  tfunc:Ptr.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Ptrary.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete all elements pointed to by the index."
amcdb.tfunc  tfunc:Ptrary.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Ptrary.Find  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Look up row by row id. Return NULL if out of range"
amcdb.tfunc  tfunc:Ptrary.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return array of pointers"
amcdb.tfunc  tfunc:Ptrary.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Ptrary.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptrary.InsertMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptrary.ScanInsertMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptrary.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the pointer array"
amcdb.tfunc  tfunc:Ptrary.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Find element using linear scan. If element is in array, remove, otherwise do nothing"
amcdb.tfunc  tfunc:Ptrary.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Empty the index. (The rows are not deleted)"
amcdb.tfunc  tfunc:Ptrary.Reserve  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Reserve space in index for N more elements;"
amcdb.tfunc  tfunc:Ptrary.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Ptrary.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Ptrary.oncecurs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:RegxSql.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:RegxSql.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Print back to string"
amcdb.tfunc  tfunc:RegxSql.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Read Regx from string"
amcdb.tfunc  tfunc:Sbrk.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sbrk.FreeMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sbrk.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Smallstr.Add  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.AddStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.HashStrptr  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.Max  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.Print  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Smallstr.SetStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy from strptr, clipping length"
amcdb.tfunc  tfunc:Smallstr.AssignStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy from strptr (operator=)"
amcdb.tfunc  tfunc:Smallstr.Set  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy from same type"
amcdb.tfunc  tfunc:Smallstr.Ctor  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Construct from same type"
amcdb.tfunc  tfunc:Smallstr.CtorStrptr  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Construct from stptr"
amcdb.tfunc  tfunc:Sort.Swap  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.Rotleft  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.Lt  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.SortedQ  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.IntInsertionSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.IntHeapSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.IntQuickSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.InsertionSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.HeapSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Sort.QuickSort  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Step.FirstChanged  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Step.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Step.UpdateCycles  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Step.Step  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Step.Call  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Step.SetDelay  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Substr.Get  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Substr.Get2  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.Eq  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.Cmp  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.Addary  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.Alloc  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.AllocAt  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.AllocN  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Reserve space. Insert N elements at the end of the array, return pointer to array"
amcdb.tfunc  tfunc:Tary.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return true if index is empty"
amcdb.tfunc  tfunc:Tary.Find  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Look up row by row id. Return NULL if out of range"
amcdb.tfunc  tfunc:Tary.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return array pointer by value"
amcdb.tfunc  tfunc:Tary.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Tary.Last  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:Y  ismacro:N  comment:"Return pointer to last element of array, or NULL if array is empty"
amcdb.tfunc  tfunc:Tary.Max  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return max. number of items in the array"
amcdb.tfunc  tfunc:Tary.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the array"
amcdb.tfunc  tfunc:Tary.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove item by index. If index outside of range, do nothing."
amcdb.tfunc  tfunc:Tary.RemoveAll  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.RemoveLast  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete last element of array. Do nothing if array is empty."
amcdb.tfunc  tfunc:Tary.Reserve  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Make sure N *more* elements will fit in array. Process dies if out of memory"
amcdb.tfunc  tfunc:Tary.AbsReserve  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Make sure N elements fit in array. Process dies if out of memory"
amcdb.tfunc  tfunc:Tary.RowidFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"find row by row id"
amcdb.tfunc  tfunc:Tary.Setary  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Copy contents of RHS to PARENT."
amcdb.tfunc  tfunc:Tary.Setary2  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Tary.qFind  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"'quick' Access row by row id. No bounds checking."
amcdb.tfunc  tfunc:Tary.qLast  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return reference to last element of array. No bounds checking"
amcdb.tfunc  tfunc:Tary.rowid_Get  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return row id of specified element"
amcdb.tfunc  tfunc:Tary.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tary.AllocNVal  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Reserve space. Insert N elements at the end of the array, return pointer to array"
amcdb.tfunc  tfunc:Thash.Cascdel  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Delete all rows reachable through the hash index"
amcdb.tfunc  tfunc:Thash.EmptyQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:N  pure:N  ismacro:N  comment:"Return true if hash is empty"
amcdb.tfunc  tfunc:Thash.Find  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:"Find row by key. Return NULL if not found."
amcdb.tfunc  tfunc:Thash.FindX  hasthrow:Y  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Look up row by key and return reference. Throw exception if not found"
amcdb.tfunc  tfunc:Thash.GetOrCreate  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Find row by key. If not found, create and x-reference a new row with with this key."
amcdb.tfunc  tfunc:Thash.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Thash.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of items in the hash"
amcdb.tfunc  tfunc:Thash.InsertMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Thash.Remove  hasthrow:N  leaf:Y  poolfunc:Y  inl:N  wur:N  pure:N  ismacro:N  comment:"Remove reference to element from hash index. If element is not in hash, do nothing"
amcdb.tfunc  tfunc:Thash.Reserve  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Reserve enough room in the hash for N more elements. Return success code."
amcdb.tfunc  tfunc:Thash.FindRemove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Thash.Uninit  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Thash.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tpool.AllocMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tpool.FreeMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tpool.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Tpool.Reserve  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Tpool.ReserveMem  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Upptr.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Val.Get  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Val.Set  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Val.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:Val.RowidFind  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Val.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:""
amcdb.tfunc  tfunc:Varlen.Getary  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Access var-length portion as an aryptr. Length is determined from one of the fields."
amcdb.tfunc  tfunc:Varlen.Addr  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Varlen.N  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:Y  ismacro:N  comment:"Return number of elements in varlen field"
amcdb.tfunc  tfunc:Varlen.ReadStrptrMaybe  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:Varlen.curs  hasthrow:N  leaf:N  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:ZSListMT.DestructiveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:ZSListMT.InLlistQ  hasthrow:N  leaf:Y  poolfunc:N  inl:Y  wur:Y  pure:N  ismacro:N  comment:"Return true if row is in index, false otherwise. Row must be non-NULL."
amcdb.tfunc  tfunc:ZSListMT.Init  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:Y  comment:""
amcdb.tfunc  tfunc:ZSListMT.Insert  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"Insert row. Row must not already be in index. If row is already in index, the behavior is undefined."
amcdb.tfunc  tfunc:ZSListMT.Remove  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:""
amcdb.tfunc  tfunc:ZSListMT.RemoveFirst  hasthrow:N  leaf:Y  poolfunc:N  inl:N  wur:N  pure:N  ismacro:N  comment:"If index is empty, return NULL. Otherwise remove and return first key in index."
