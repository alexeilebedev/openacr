//
// include/gen/ams_cat_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//


#pragma once
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline ams_cat::trace::trace() {
}

inline ams_cat::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline ams_cat::FieldId::FieldId(ams_cat_FieldIdEnum arg) { this->value = i32(arg); }
inline ams_cat::FieldId::FieldId() {
    ams_cat::FieldId_Init(*this);
}


// --- ams_cat.FieldId.value.GetEnum
// Get value of field as enum type
inline ams_cat_FieldIdEnum ams_cat::value_GetEnum(const ams_cat::FieldId& parent) {
    return ams_cat_FieldIdEnum(parent.value);
}

// --- ams_cat.FieldId.value.SetEnum
// Set value of field from enum type.
inline void ams_cat::value_SetEnum(ams_cat::FieldId& parent, ams_cat_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ams_cat.FieldId.value.Cast
inline ams_cat::FieldId::operator ams_cat_FieldIdEnum () const {
    return ams_cat_FieldIdEnum((*this).value);
}

// --- ams_cat.FieldId..Init
// Set all fields to initial values.
inline void ams_cat::FieldId_Init(ams_cat::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ams_cat::trace &row) {// cfmt:ams_cat.trace.String
    ams_cat::trace_Print(const_cast<ams_cat::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ams_cat::FieldId &row) {// cfmt:ams_cat.FieldId.String
    ams_cat::FieldId_Print(const_cast<ams_cat::FieldId&>(row), str);
    return str;
}
