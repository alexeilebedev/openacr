//
// include/gen/bash2html_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline bash2html::trace::trace() {
}

inline bash2html::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline bash2html::FieldId::FieldId(bash2html_FieldIdEnum arg) { this->value = i32(arg); }
inline bash2html::FieldId::FieldId() {
    bash2html::FieldId_Init(*this);
}


// --- bash2html.FieldId.value.GetEnum
// Get value of field as enum type
inline bash2html_FieldIdEnum bash2html::value_GetEnum(const bash2html::FieldId& parent) {
    return bash2html_FieldIdEnum(parent.value);
}

// --- bash2html.FieldId.value.SetEnum
// Set value of field from enum type.
inline void bash2html::value_SetEnum(bash2html::FieldId& parent, bash2html_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- bash2html.FieldId.value.Cast
inline bash2html::FieldId::operator bash2html_FieldIdEnum () const {
    return bash2html_FieldIdEnum((*this).value);
}

// --- bash2html.FieldId..Init
// Set all fields to initial values.
inline void bash2html::FieldId_Init(bash2html::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bash2html::trace &row) {// cfmt:bash2html.trace.String
    bash2html::trace_Print(const_cast<bash2html::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bash2html::FieldId &row) {// cfmt:bash2html.FieldId.String
    bash2html::FieldId_Print(const_cast<bash2html::FieldId&>(row), str);
    return str;
}
