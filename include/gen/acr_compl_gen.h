//
// include/gen/acr_compl_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/algo_gen.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/command_gen.h"
//#pragma endinclude

// --- acr_compl_BadnessEnum

enum acr_compl_BadnessEnum {             // acr_compl.Badness.badness
     acr_compl_Badness_first       = 0   // prefix match
    ,acr_compl_Badness_last_word   = 1   // last word prefix match
    ,acr_compl_Badness_substring   = 2   // substrgng match
};

enum { acr_compl_BadnessEnum_N = 3 };


// --- acr_compl_FieldIdEnum

enum acr_compl_FieldIdEnum {          // acr_compl.FieldId.value
     acr_compl_FieldId_badness   = 0
    ,acr_compl_FieldId_value     = 1
    ,acr_compl_FieldId_nospace   = 2
    ,acr_compl_FieldId_msghdr    = 3
    ,acr_compl_FieldId_type      = 4
};

enum { acr_compl_FieldIdEnum_N = 5 };


// --- acr_compl_ShellqtypeEnum

enum acr_compl_ShellqtypeEnum {          // acr_compl.Shellqtype.type
     acr_compl_Shellqtype_none     = 0   // no quoting
    ,acr_compl_Shellqtype_squote   = 1   // strong quoting
    ,acr_compl_Shellqtype_dquote   = 2   // weak quoting
    ,acr_compl_Shellqtype_error    = 3   // unrecognized
};

enum { acr_compl_ShellqtypeEnum_N = 4 };


// --- acr_compl_TableIdEnum

enum acr_compl_TableIdEnum {                   // acr_compl.TableId.value
     acr_compl_TableId_dmmeta_Anonfld    = 0   // dmmeta.Anonfld -> acr_compl.FAnonfld
    ,acr_compl_TableId_dmmeta_anonfld    = 0   // dmmeta.anonfld -> acr_compl.FAnonfld
    ,acr_compl_TableId_dmmeta_Ctype      = 1   // dmmeta.Ctype -> acr_compl.FCtype
    ,acr_compl_TableId_dmmeta_ctype      = 1   // dmmeta.ctype -> acr_compl.FCtype
    ,acr_compl_TableId_dmmeta_Field      = 2   // dmmeta.Field -> acr_compl.FField
    ,acr_compl_TableId_dmmeta_field      = 2   // dmmeta.field -> acr_compl.FField
    ,acr_compl_TableId_dmmeta_Ns         = 3   // dmmeta.Ns -> acr_compl.FNs
    ,acr_compl_TableId_dmmeta_ns         = 3   // dmmeta.ns -> acr_compl.FNs
    ,acr_compl_TableId_dmmeta_Ssimfile   = 4   // dmmeta.Ssimfile -> acr_compl.FSsimfile
    ,acr_compl_TableId_dmmeta_ssimfile   = 4   // dmmeta.ssimfile -> acr_compl.FSsimfile
};

enum { acr_compl_TableIdEnum_N = 10 };

namespace dmmeta { struct Anonfld; }
namespace acr_compl { struct Completion; }
namespace dmmeta { struct Ctype; }
namespace dmmeta { struct Field; }
namespace acr_compl { struct FCtype; }
namespace dmmeta { struct Ns; }
namespace dmmeta { struct Ssimfile; }
namespace acr_compl { struct Badness; }
namespace acr_compl { struct FAnonfld; }
namespace acr_compl { struct FCompletion; }
namespace acr_compl { struct trace; }
namespace acr_compl { struct FDb; }
namespace acr_compl { struct FField; }
namespace acr_compl { struct FNs; }
namespace acr_compl { struct FSsimfile; }
namespace acr_compl { struct FieldId; }
namespace acr_compl { struct Shellqtype; }
namespace acr_compl { struct TableId; }
namespace acr_compl { struct ctype_c_field_curs; }
namespace acr_compl { struct _db_word_curs; }
namespace acr_compl { struct _db_ctype_curs; }
namespace acr_compl { struct _db_ind_ctype_curs; }
namespace acr_compl { struct _db_field_curs; }
namespace acr_compl { struct _db_ind_field_curs; }
namespace acr_compl { struct _db_ssimfile_curs; }
namespace acr_compl { struct _db_ind_ssimfile_curs; }
namespace acr_compl { struct _db_completion_curs; }
namespace acr_compl { struct _db_anonfld_curs; }
namespace acr_compl { struct _db_bh_completion_curs; }
namespace acr_compl { struct _db_bh_completion_unordcurs; }
namespace acr_compl { struct _db_ns_curs; }
namespace acr_compl {
}//pkey typedefs
namespace acr_compl {
extern const char *acr_compl_help;
extern const char *acr_compl_syntax;
extern FDb _db;

// --- acr_compl.Badness
struct Badness { // acr_compl.Badness: Trading Session
    u8   badness;   //   0
    inline operator acr_compl_BadnessEnum() const;
    explicit Badness(u8                             in_badness);
    Badness(acr_compl_BadnessEnum arg);
    bool operator ==(const acr_compl::Badness &rhs) const;
    bool operator !=(const acr_compl::Badness &rhs) const;
    bool operator <(const acr_compl::Badness &rhs) const;
    bool operator ==(acr_compl_BadnessEnum rhs) const;
    Badness();
};

// Get value of field as enum type
acr_compl_BadnessEnum badness_GetEnum(const acr_compl::Badness& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 badness_SetEnum(acr_compl::Badness& parent, acr_compl_BadnessEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          badness_ToCstr(const acr_compl::Badness& parent) __attribute__((nothrow));
// Convert badness to a string. First, attempt conversion to a known string.
// If no string matches, print badness as a numeric value.
void                 badness_Print(const acr_compl::Badness& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 badness_SetStrptrMaybe(acr_compl::Badness& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 badness_SetStrptr(acr_compl::Badness& parent, algo::strptr rhs, acr_compl_BadnessEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 badness_ReadStrptrMaybe(acr_compl::Badness& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_compl::Badness from an ascii string.
// The format of the string is the format of the acr_compl::Badness's only field
bool                 Badness_ReadStrptrMaybe(acr_compl::Badness &parent, algo::strptr in_str);
bool                 Badness_Lt(acr_compl::Badness lhs, acr_compl::Badness rhs) __attribute__((nothrow));
i32                  Badness_Cmp(acr_compl::Badness lhs, acr_compl::Badness rhs) __attribute__((nothrow));
// Set all fields to initial values.
void                 Badness_Init(acr_compl::Badness& parent);
bool                 Badness_Eq(acr_compl::Badness lhs, acr_compl::Badness rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
bool                 Badness_Update(acr_compl::Badness &lhs, acr_compl::Badness rhs) __attribute__((nothrow));
// define enum comparison operator to avoid ambiguity
bool                 Badness_EqEnum(acr_compl::Badness lhs, acr_compl_BadnessEnum rhs) __attribute__((nothrow));

// --- acr_compl.Completion
// access: acr_compl.FCompletion.msghdr (Base)
struct Completion { // acr_compl.Completion
    algo::cstring   value;     //
    bool            nospace;   //   false  do not add space after the value
    Completion();
};

bool                 Completion_ReadFieldMaybe(acr_compl::Completion &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of acr_compl::Completion from an ascii string.
// The format of the string is an ssim Tuple
bool                 Completion_ReadStrptrMaybe(acr_compl::Completion &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 Completion_Init(acr_compl::Completion& parent);
// print string representation of acr_compl::Completion to string LHS, no header -- cprint:acr_compl.Completion.String
void                 Completion_Print(acr_compl::Completion & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FAnonfld
// create: acr_compl.FDb.anonfld (Lary)
// access: acr_compl.FField.c_anonfld (Ptr)
struct FAnonfld { // acr_compl.FAnonfld
    algo::Smallstr100   field;     //
    algo::Comment       comment;   //
private:
    friend acr_compl::FAnonfld& anonfld_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FAnonfld* anonfld_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 anonfld_RemoveLast() __attribute__((nothrow));
    FAnonfld();
    ~FAnonfld();
    FAnonfld(const FAnonfld&){ /*disallow copy constructor */}
    void operator =(const FAnonfld&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 anonfld_CopyOut(acr_compl::FAnonfld &row, dmmeta::Anonfld &out) __attribute__((nothrow));
// Copy fields in to row
void                 anonfld_CopyIn(acr_compl::FAnonfld &row, dmmeta::Anonfld &in) __attribute__((nothrow));

void                 FAnonfld_Uninit(acr_compl::FAnonfld& anonfld) __attribute__((nothrow));
// print string representation of acr_compl::FAnonfld to string LHS, no header -- cprint:acr_compl.FAnonfld.String
void                 FAnonfld_Print(acr_compl::FAnonfld & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FCompletion
// create: acr_compl.FDb.completion (Lary)
// global access: bh_completion (Bheap)
struct FCompletion { // acr_compl.FCompletion
    algo::cstring        value;               //
    bool                 nospace;             //   false  do not add space after the value
    acr_compl::Badness   badness;             //
    i32                  bh_completion_idx;   // index in heap; -1 means not-in-heap
private:
    friend acr_compl::FCompletion& completion_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FCompletion* completion_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 completion_RemoveAll() __attribute__((nothrow));
    friend void                 completion_RemoveLast() __attribute__((nothrow));
    FCompletion();
    ~FCompletion();
    FCompletion(const FCompletion&){ /*disallow copy constructor */}
    void operator =(const FCompletion&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 completion_CopyOut(acr_compl::FCompletion &row, acr_compl::Completion &out) __attribute__((nothrow));
// Copy fields in to row
void                 completion_CopyIn(acr_compl::FCompletion &row, acr_compl::Completion &in) __attribute__((nothrow));

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
bool                 badness_Lt(acr_compl::FCompletion& completion, acr_compl::FCompletion &rhs) __attribute__((nothrow));
// Compare two fields.
i32                  badness_Cmp(acr_compl::FCompletion& completion, acr_compl::FCompletion &rhs) __attribute__((nothrow));

// Set all fields to initial values.
void                 FCompletion_Init(acr_compl::FCompletion& completion);
bool                 FCompletion_ReadFieldMaybe(acr_compl::FCompletion &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of acr_compl::FCompletion from an ascii string.
// The format of the string is an ssim Tuple
bool                 FCompletion_ReadStrptrMaybe(acr_compl::FCompletion &parent, algo::strptr in_str);
void                 FCompletion_Uninit(acr_compl::FCompletion& completion) __attribute__((nothrow));
// print string representation of acr_compl::FCompletion to string LHS, no header -- cprint:acr_compl.FCompletion.String
void                 FCompletion_Print(acr_compl::FCompletion & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FCtype
// create: acr_compl.FDb.ctype (Lary)
// global access: ind_ctype (Thash)
// access: acr_compl.FField.p_arg (Upptr)
// access: acr_compl.FSsimfile.p_ctype (Upptr)
struct FCtype { // acr_compl.FCtype
    algo::Smallstr50        ctype;            // Identifier. must be ns.typename
    algo::Comment           comment;          //
    acr_compl::FField**     c_field_elems;    // array of pointers
    u32                     c_field_n;        // array of pointers
    u32                     c_field_max;      // capacity of allocated array
    acr_compl::FSsimfile*   c_ssimfile;       // optional pointer
    acr_compl::FCtype*      ind_ctype_next;   // hash next
private:
    friend acr_compl::FCtype&   ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FCtype*   ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctype_RemoveLast() __attribute__((nothrow));
    FCtype();
    ~FCtype();
    FCtype(const FCtype&){ /*disallow copy constructor */}
    void operator =(const FCtype&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ctype_CopyOut(acr_compl::FCtype &row, dmmeta::Ctype &out) __attribute__((nothrow));
// Copy fields in to row
void                 ctype_CopyIn(acr_compl::FCtype &row, dmmeta::Ctype &in) __attribute__((nothrow));

algo::Smallstr16     ns_Get(acr_compl::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(acr_compl::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
bool                 c_field_EmptyQ(acr_compl::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FField*   c_field_Find(acr_compl::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
algo::aryptr<acr_compl::FField*> c_field_Getary(acr_compl::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void                 c_field_Insert(acr_compl::FCtype& ctype, acr_compl::FField& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool                 c_field_InsertMaybe(acr_compl::FCtype& ctype, acr_compl::FField& row) __attribute__((nothrow));
// Return number of items in the pointer array
i32                  c_field_N(const acr_compl::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void                 c_field_Remove(acr_compl::FCtype& ctype, acr_compl::FField& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 c_field_RemoveAll(acr_compl::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
void                 c_field_Reserve(acr_compl::FCtype& ctype, u32 n) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_ssimfile_InsertMaybe(acr_compl::FCtype& ctype, acr_compl::FSsimfile& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_ssimfile_Remove(acr_compl::FCtype& ctype, acr_compl::FSsimfile& row) __attribute__((nothrow));

void                 ctype_c_field_curs_Reset(ctype_c_field_curs &curs, acr_compl::FCtype &parent);
// cursor points to valid item
bool                 ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs);
// proceed to next item
void                 ctype_c_field_curs_Next(ctype_c_field_curs &curs);
// item access
acr_compl::FField&   ctype_c_field_curs_Access(ctype_c_field_curs &curs);
// Set all fields to initial values.
void                 FCtype_Init(acr_compl::FCtype& ctype);
void                 FCtype_Uninit(acr_compl::FCtype& ctype) __attribute__((nothrow));
// print string representation of acr_compl::FCtype to string LHS, no header -- cprint:acr_compl.FCtype.String
void                 FCtype_Print(acr_compl::FCtype & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.trace
#pragma pack(push,1)
struct trace { // acr_compl.trace
    trace();
};
#pragma pack(pop)

// print string representation of acr_compl::trace to string LHS, no header -- cprint:acr_compl.trace.String
void                 trace_Print(acr_compl::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FDb
// create: acr_compl.FDb._db (Global)
struct FDb { // acr_compl.FDb
    command::acr_compl         cmdline;                      //
    i32                        point;                        //   0
    algo::cstring              line;                         //
    algo::cstring*             word_elems;                   // pointer to elements
    u32                        word_n;                       // number of elements in array
    u32                        word_max;                     // max. capacity of array before realloc
    acr_compl::FCtype*         ctype_lary[32];               // level array
    i32                        ctype_n;                      // number of elements in array
    acr_compl::FCtype**        ind_ctype_buckets_elems;      // pointer to bucket array
    i32                        ind_ctype_buckets_n;          // number of elements in bucket array
    i32                        ind_ctype_n;                  // number of elements in the hash table
    acr_compl::FField*         field_lary[32];               // level array
    i32                        field_n;                      // number of elements in array
    acr_compl::FField**        ind_field_buckets_elems;      // pointer to bucket array
    i32                        ind_field_buckets_n;          // number of elements in bucket array
    i32                        ind_field_n;                  // number of elements in the hash table
    acr_compl::FSsimfile*      ssimfile_lary[32];            // level array
    i32                        ssimfile_n;                   // number of elements in array
    acr_compl::FSsimfile**     ind_ssimfile_buckets_elems;   // pointer to bucket array
    i32                        ind_ssimfile_buckets_n;       // number of elements in bucket array
    i32                        ind_ssimfile_n;               // number of elements in the hash table
    acr_compl::FCompletion*    completion_lary[32];          // level array
    i32                        completion_n;                 // number of elements in array
    acr_compl::FAnonfld*       anonfld_lary[32];             // level array
    i32                        anonfld_n;                    // number of elements in array
    acr_compl::FCompletion**   bh_completion_elems;          // binary heap by badness
    i32                        bh_completion_n;              // number of elements in the heap
    i32                        bh_completion_max;            // max elements in bh_completion_elems
    acr_compl::FNs*            ns_lary[32];                  // level array
    i32                        ns_n;                         // number of elements in array
    acr_compl::trace           trace;                        //
};

// Main function
void                 MainArgs(int argc, char **argv);
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Reserve space. Insert element at the end
// The new element is initialized to a default value
algo::cstring&       word_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
algo::cstring&       word_AllocAt(int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> word_AllocN(int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 word_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
algo::cstring*       word_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<algo::cstring> word_Getary() __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
algo::cstring*       word_Last() __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  word_Max() __attribute__((nothrow));
// Return number of items in the array
i32                  word_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 word_Remove(u32 i) __attribute__((nothrow));
void                 word_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 word_RemoveLast() __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 word_Reserve(int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 word_AbsReserve(int n) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
algo::cstring&       word_qFind(u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
algo::cstring&       word_qLast() __attribute__((nothrow));
// Return row id of specified element
u64                  word_rowid_Get(algo::cstring &elem) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FCtype&   ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FCtype*   ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FCtype*   ctype_InsertMaybe(const dmmeta::Ctype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ctype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ctype_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FCtype*   ctype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FCtype*   ctype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ctype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FCtype&   ctype_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ctype_XrefMaybe(acr_compl::FCtype &row);

// Return true if hash is empty
bool                 ind_ctype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
acr_compl::FCtype*   ind_ctype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_compl::FCtype&   ind_ctype_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ctype_InsertMaybe(acr_compl::FCtype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ctype_Remove(acr_compl::FCtype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ctype_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FField&   field_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FField*   field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FField*   field_InsertMaybe(const dmmeta::Field &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                field_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 field_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FField*   field_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FField*   field_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 field_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FField&   field_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 field_XrefMaybe(acr_compl::FField &row);

// Return true if hash is empty
bool                 ind_field_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
acr_compl::FField*   ind_field_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Return number of items in the hash
i32                  ind_field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_field_InsertMaybe(acr_compl::FField& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_field_Remove(acr_compl::FField& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_field_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FSsimfile& ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FSsimfile* ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FSsimfile* ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ssimfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ssimfile_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FSsimfile* ssimfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FSsimfile* ssimfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ssimfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FSsimfile& ssimfile_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ssimfile_XrefMaybe(acr_compl::FSsimfile &row);

// Return true if hash is empty
bool                 ind_ssimfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
acr_compl::FSsimfile* ind_ssimfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Return number of items in the hash
i32                  ind_ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ssimfile_InsertMaybe(acr_compl::FSsimfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ssimfile_Remove(acr_compl::FSsimfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ssimfile_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FCompletion& completion_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FCompletion* completion_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FCompletion* completion_InsertMaybe(const acr_compl::Completion &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                completion_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 completion_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FCompletion* completion_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FCompletion* completion_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  completion_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 completion_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 completion_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FCompletion& completion_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 completion_XrefMaybe(acr_compl::FCompletion &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FAnonfld& anonfld_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FAnonfld* anonfld_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FAnonfld* anonfld_InsertMaybe(const dmmeta::Anonfld &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                anonfld_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 anonfld_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FAnonfld* anonfld_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FAnonfld* anonfld_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  anonfld_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 anonfld_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FAnonfld& anonfld_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 anonfld_XrefMaybe(acr_compl::FAnonfld &row);

// Remove all elements from heap and free memory used by the array.
void                 bh_completion_Dealloc() __attribute__((nothrow));
// Return true if index is empty
bool                 bh_completion_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
acr_compl::FCompletion* bh_completion_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
bool                 bh_completion_InBheapQ(acr_compl::FCompletion& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void                 bh_completion_Insert(acr_compl::FCompletion& row) __attribute__((nothrow));
// Return number of items in the heap
i32                  bh_completion_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32                  bh_completion_Reheap(acr_compl::FCompletion& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32                  bh_completion_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 bh_completion_Remove(acr_compl::FCompletion& row) __attribute__((nothrow));
// Remove all elements from binary heap
void                 bh_completion_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
acr_compl::FCompletion* bh_completion_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
void                 bh_completion_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FNs&      ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FNs*      ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FNs*      ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ns_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
acr_compl::FNs*      ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
acr_compl::FNs*      ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 ns_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_compl::FNs&      ns_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ns_XrefMaybe(acr_compl::FNs &row);

// proceed to next item
void                 _db_word_curs_Next(_db_word_curs &curs);
void                 _db_word_curs_Reset(_db_word_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_word_curs_ValidQ(_db_word_curs &curs);
// item access
algo::cstring&       _db_word_curs_Access(_db_word_curs &curs);
// cursor points to valid item
void                 _db_ctype_curs_Reset(_db_ctype_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_ctype_curs_ValidQ(_db_ctype_curs &curs);
// proceed to next item
void                 _db_ctype_curs_Next(_db_ctype_curs &curs);
// item access
acr_compl::FCtype&   _db_ctype_curs_Access(_db_ctype_curs &curs);
// cursor points to valid item
void                 _db_field_curs_Reset(_db_field_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_field_curs_ValidQ(_db_field_curs &curs);
// proceed to next item
void                 _db_field_curs_Next(_db_field_curs &curs);
// item access
acr_compl::FField&   _db_field_curs_Access(_db_field_curs &curs);
// cursor points to valid item
void                 _db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs);
// proceed to next item
void                 _db_ssimfile_curs_Next(_db_ssimfile_curs &curs);
// item access
acr_compl::FSsimfile& _db_ssimfile_curs_Access(_db_ssimfile_curs &curs);
// cursor points to valid item
void                 _db_completion_curs_Reset(_db_completion_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_completion_curs_ValidQ(_db_completion_curs &curs);
// proceed to next item
void                 _db_completion_curs_Next(_db_completion_curs &curs);
// item access
acr_compl::FCompletion& _db_completion_curs_Access(_db_completion_curs &curs);
// cursor points to valid item
void                 _db_anonfld_curs_Reset(_db_anonfld_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_anonfld_curs_ValidQ(_db_anonfld_curs &curs);
// proceed to next item
void                 _db_anonfld_curs_Next(_db_anonfld_curs &curs);
// item access
acr_compl::FAnonfld& _db_anonfld_curs_Access(_db_anonfld_curs &curs);
void                 _db_bh_completion_curs_Reserve(_db_bh_completion_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void                 _db_bh_completion_curs_Reset(_db_bh_completion_curs &curs, acr_compl::FDb &parent);
// Advance cursor.
void                 _db_bh_completion_curs_Next(_db_bh_completion_curs &curs);
// Access current element. If not more elements, return NULL
acr_compl::FCompletion& _db_bh_completion_curs_Access(_db_bh_completion_curs &curs);
// Return true if Access() will return non-NULL.
bool                 _db_bh_completion_curs_ValidQ(_db_bh_completion_curs &curs);
// cursor points to valid item
void                 _db_ns_curs_Reset(_db_ns_curs &curs, acr_compl::FDb &parent);
// cursor points to valid item
bool                 _db_ns_curs_ValidQ(_db_ns_curs &curs);
// proceed to next item
void                 _db_ns_curs_Next(_db_ns_curs &curs);
// item access
acr_compl::FNs&      _db_ns_curs_Access(_db_ns_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- acr_compl.FField
// create: acr_compl.FDb.field (Lary)
// global access: ind_field (Thash)
// access: acr_compl.FCtype.c_field (Ptrary)
struct FField { // acr_compl.FField
    acr_compl::FField*     ind_field_next;         // hash next
    algo::Smallstr100      field;                  //
    algo::Smallstr50       arg;                    // type of field
    algo::Smallstr50       reftype;                //   "Val"
    dmmeta::CppExpr        dflt;                   // default value (c++ expression)
    algo::Comment          comment;                //
    acr_compl::FCtype*     p_arg;                  // reference to parent row
    acr_compl::FAnonfld*   c_anonfld;              // optional pointer
    bool                   ctype_c_field_in_ary;   //   false  membership flag
private:
    friend acr_compl::FField&   field_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FField*   field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 field_RemoveLast() __attribute__((nothrow));
    FField();
    ~FField();
    FField(const FField&){ /*disallow copy constructor */}
    void operator =(const FField&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 field_CopyOut(acr_compl::FField &row, dmmeta::Field &out) __attribute__((nothrow));
// Copy fields in to row
void                 field_CopyIn(acr_compl::FField &row, dmmeta::Field &in) __attribute__((nothrow));

algo::Smallstr50     ctype_Get(acr_compl::FField& field) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr16     ns_Get(acr_compl::FField& field) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(acr_compl::FField& field) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_anonfld_InsertMaybe(acr_compl::FField& field, acr_compl::FAnonfld& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_anonfld_Remove(acr_compl::FField& field, acr_compl::FAnonfld& row) __attribute__((nothrow));

// Set all fields to initial values.
void                 FField_Init(acr_compl::FField& field);
void                 FField_Uninit(acr_compl::FField& field) __attribute__((nothrow));
// print string representation of acr_compl::FField to string LHS, no header -- cprint:acr_compl.FField.String
void                 FField_Print(acr_compl::FField & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FNs
// create: acr_compl.FDb.ns (Lary)
struct FNs { // acr_compl.FNs
    algo::Smallstr16   ns;        // Namespace name (primary key)
    algo::Smallstr50   nstype;    //
    algo::Comment      comment;   //
private:
    friend acr_compl::FNs&      ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FNs*      ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveAll() __attribute__((nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
    FNs();
};

// Copy fields out of row
void                 ns_CopyOut(acr_compl::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
void                 ns_CopyIn(acr_compl::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));


// --- acr_compl.FSsimfile
// create: acr_compl.FDb.ssimfile (Lary)
// global access: ind_ssimfile (Thash)
// access: acr_compl.FCtype.c_ssimfile (Ptr)
struct FSsimfile { // acr_compl.FSsimfile
    acr_compl::FSsimfile*   ind_ssimfile_next;   // hash next
    algo::Smallstr50        ssimfile;            //
    algo::Smallstr50        ctype;               //
    acr_compl::FCtype*      p_ctype;             // reference to parent row
private:
    friend acr_compl::FSsimfile& ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_compl::FSsimfile* ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ssimfile_RemoveLast() __attribute__((nothrow));
    FSsimfile();
    ~FSsimfile();
    FSsimfile(const FSsimfile&){ /*disallow copy constructor */}
    void operator =(const FSsimfile&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ssimfile_CopyOut(acr_compl::FSsimfile &row, dmmeta::Ssimfile &out) __attribute__((nothrow));
// Copy fields in to row
void                 ssimfile_CopyIn(acr_compl::FSsimfile &row, dmmeta::Ssimfile &in) __attribute__((nothrow));

algo::Smallstr16     ssimns_Get(acr_compl::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr16     ns_Get(acr_compl::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(acr_compl::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FSsimfile_Init(acr_compl::FSsimfile& ssimfile);
void                 FSsimfile_Uninit(acr_compl::FSsimfile& ssimfile) __attribute__((nothrow));
// print string representation of acr_compl::FSsimfile to string LHS, no header -- cprint:acr_compl.FSsimfile.String
void                 FSsimfile_Print(acr_compl::FSsimfile & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.FieldId
#pragma pack(push,1)
struct FieldId { // acr_compl.FieldId: Field read helper
    i32   value;   //   -1
    inline operator acr_compl_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(acr_compl_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
acr_compl_FieldIdEnum value_GetEnum(const acr_compl::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(acr_compl::FieldId& parent, acr_compl_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const acr_compl::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const acr_compl::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(acr_compl::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(acr_compl::FieldId& parent, algo::strptr rhs, acr_compl_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(acr_compl::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_compl::FieldId from an ascii string.
// The format of the string is the format of the acr_compl::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(acr_compl::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(acr_compl::FieldId& parent);
// print string representation of acr_compl::FieldId to string LHS, no header -- cprint:acr_compl.FieldId.String
void                 FieldId_Print(acr_compl::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.Shellqtype
struct Shellqtype { // acr_compl.Shellqtype
    u8   type;   //   0
    explicit Shellqtype(u8                             in_type);
    Shellqtype(acr_compl_ShellqtypeEnum arg);
    Shellqtype();
};

// Get value of field as enum type
acr_compl_ShellqtypeEnum type_GetEnum(const acr_compl::Shellqtype& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 type_SetEnum(acr_compl::Shellqtype& parent, acr_compl_ShellqtypeEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          type_ToCstr(const acr_compl::Shellqtype& parent) __attribute__((nothrow));
// Convert type to a string. First, attempt conversion to a known string.
// If no string matches, print type as a numeric value.
void                 type_Print(const acr_compl::Shellqtype& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 type_SetStrptrMaybe(acr_compl::Shellqtype& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 type_SetStrptr(acr_compl::Shellqtype& parent, algo::strptr rhs, acr_compl_ShellqtypeEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 type_ReadStrptrMaybe(acr_compl::Shellqtype& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_compl::Shellqtype from an ascii string.
// The format of the string is the format of the acr_compl::Shellqtype's only field
bool                 Shellqtype_ReadStrptrMaybe(acr_compl::Shellqtype &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 Shellqtype_Init(acr_compl::Shellqtype& parent);
// print string representation of acr_compl::Shellqtype to string LHS, no header -- cprint:acr_compl.Shellqtype.String
void                 Shellqtype_Print(acr_compl::Shellqtype row, algo::cstring &str) __attribute__((nothrow));

// --- acr_compl.TableId
struct TableId { // acr_compl.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator acr_compl_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(acr_compl_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
acr_compl_TableIdEnum value_GetEnum(const acr_compl::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(acr_compl::TableId& parent, acr_compl_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const acr_compl::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const acr_compl::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(acr_compl::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(acr_compl::TableId& parent, algo::strptr rhs, acr_compl_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(acr_compl::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_compl::TableId from an ascii string.
// The format of the string is the format of the acr_compl::TableId's only field
bool                 TableId_ReadStrptrMaybe(acr_compl::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(acr_compl::TableId& parent);
// print string representation of acr_compl::TableId to string LHS, no header -- cprint:acr_compl.TableId.String
void                 TableId_Print(acr_compl::TableId & row, algo::cstring &str) __attribute__((nothrow));

struct ctype_c_field_curs {// cursor
    typedef acr_compl::FField ChildType;
    acr_compl::FField** elems;
    u32 n_elems;
    u32 index;
    ctype_c_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_word_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    _db_word_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_ctype_curs {// cursor
    typedef acr_compl::FCtype ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_ctype_curs(){ parent=NULL; index=0; }
};


struct _db_field_curs {// cursor
    typedef acr_compl::FField ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_field_curs(){ parent=NULL; index=0; }
};


struct _db_ssimfile_curs {// cursor
    typedef acr_compl::FSsimfile ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_ssimfile_curs(){ parent=NULL; index=0; }
};


struct _db_completion_curs {// cursor
    typedef acr_compl::FCompletion ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_completion_curs(){ parent=NULL; index=0; }
};


struct _db_anonfld_curs {// cursor
    typedef acr_compl::FAnonfld ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_anonfld_curs(){ parent=NULL; index=0; }
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_completion_curs {
    typedef acr_compl::FCompletion ChildType;
    acr_compl::FDb      *parent;        // parent
    acr_compl::FCompletion*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_completion_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_completion_curs();
};


struct _db_ns_curs {// cursor
    typedef acr_compl::FNs ChildType;
    acr_compl::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};

int                  main(int argc, char **argv);
} // end namespace acr_compl
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const acr_compl::trace &row);// cfmt:acr_compl.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const acr_compl::FieldId &row);// cfmt:acr_compl.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const acr_compl::TableId &row);// cfmt:acr_compl.TableId.String
}
