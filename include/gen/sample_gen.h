//
// include/gen/sample_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- sample_FieldIdEnum

enum sample_FieldIdEnum {        // sample.FieldId.value
     sample_FieldId_value   = 0
};

enum { sample_FieldIdEnum_N = 1 };

namespace sample { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace sample { // gen:ns_tclass_field
extern const char *sample_help;
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace sample { struct _db_zd_rec_curs; }
namespace sample { struct _db_bh_rec_curs; }
namespace sample { struct _db_zd_sel_rec_curs; }
namespace sample { struct trace; }
namespace sample { struct FDb; }
namespace sample { struct FRec; }
namespace sample { struct FieldId; }
namespace sample { extern struct sample::FDb _db; }
namespace sample { // gen:ns_print_struct

// --- sample.trace
#pragma pack(push,1)
struct trace { // sample.trace
    // func:sample.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:sample.trace.String  printfmt:Tuple
// func:sample.trace..Print
void                 trace_Print(sample::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- sample.FDb
// create: sample.FDb._db (Global)
struct FDb { // sample.FDb
    command::sample   cmdline;                 //
    u64               rec_blocksize;           // # bytes per block
    sample::FRec*     rec_free;                //
    sample::FRec*     zd_rec_head;             // zero-terminated doubly linked list
    sample::FRec*     zd_rec_tail;             // pointer to last element
    sample::FRec**    ind_rec_buckets_elems;   // pointer to bucket array
    i32               ind_rec_buckets_n;       // number of elements in bucket array
    i32               ind_rec_n;               // number of elements in the hash table
    sample::FRec**    bh_rec_elems;            // binary heap by rec
    i32               bh_rec_n;                // number of elements in the heap
    i32               bh_rec_max;              // max elements in bh_rec_elems
    sample::FRec*     zd_sel_rec_head;         // zero-terminated doubly linked list
    i32               zd_sel_rec_n;            // zero-terminated doubly linked list
    sample::FRec*     zd_sel_rec_tail;         // pointer to last element
    sample::trace     trace;                   //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     sample.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:sample.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:sample.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:sample.FDb._db.Step
void                 Step();
// Main function
// func:sample.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:sample.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:sample.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:sample.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:sample.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:sample.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:sample.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:sample.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:sample.FDb.rec.Alloc
sample::FRec&        rec_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:sample.FDb.rec.AllocMaybe
sample::FRec*        rec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:sample.FDb.rec.Delete
void                 rec_Delete(sample::FRec &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:sample.FDb.rec.AllocMem
void*                rec_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:sample.FDb.rec.FreeMem
void                 rec_FreeMem(sample::FRec &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:sample.FDb.rec.Reserve
u64                  rec_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:sample.FDb.rec.ReserveMem
u64                  rec_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:sample.FDb.rec.XrefMaybe
bool                 rec_XrefMaybe(sample::FRec &row);

// Return true if index is empty
// func:sample.FDb.zd_rec.EmptyQ
inline bool          zd_rec_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:sample.FDb.zd_rec.First
inline sample::FRec* zd_rec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:sample.FDb.zd_rec.InLlistQ
inline bool          zd_rec_InLlistQ(sample::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:sample.FDb.zd_rec.Insert
void                 zd_rec_Insert(sample::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:sample.FDb.zd_rec.Last
inline sample::FRec* zd_rec_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:sample.FDb.zd_rec.Next
inline sample::FRec* zd_rec_Next(sample::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:sample.FDb.zd_rec.Prev
inline sample::FRec* zd_rec_Prev(sample::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:sample.FDb.zd_rec.Remove
void                 zd_rec_Remove(sample::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:sample.FDb.zd_rec.RemoveAll
void                 zd_rec_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:sample.FDb.zd_rec.RemoveFirst
sample::FRec*        zd_rec_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:sample.FDb.zd_rec.qLast
inline sample::FRec& zd_rec_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if hash is empty
// func:sample.FDb.ind_rec.EmptyQ
inline bool          ind_rec_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:sample.FDb.ind_rec.Find
sample::FRec*        ind_rec_Find(i32 key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:sample.FDb.ind_rec.FindX
sample::FRec&        ind_rec_FindX(i32 key);
// Return number of items in the hash
// func:sample.FDb.ind_rec.N
inline i32           ind_rec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:sample.FDb.ind_rec.InsertMaybe
bool                 ind_rec_InsertMaybe(sample::FRec& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:sample.FDb.ind_rec.Remove
void                 ind_rec_Remove(sample::FRec& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:sample.FDb.ind_rec.Reserve
void                 ind_rec_Reserve(int n) __attribute__((nothrow));

// Remove all elements from heap and free memory used by the array.
// func:sample.FDb.bh_rec.Dealloc
void                 bh_rec_Dealloc() __attribute__((nothrow));
// Return true if index is empty
// func:sample.FDb.bh_rec.EmptyQ
inline bool          bh_rec_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:sample.FDb.bh_rec.First
inline sample::FRec* bh_rec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
// func:sample.FDb.bh_rec.InBheapQ
inline bool          bh_rec_InBheapQ(sample::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
// func:sample.FDb.bh_rec.Insert
void                 bh_rec_Insert(sample::FRec& row) __attribute__((nothrow));
// Return number of items in the heap
// func:sample.FDb.bh_rec.N
inline i32           bh_rec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
// func:sample.FDb.bh_rec.Reheap
i32                  bh_rec_Reheap(sample::FRec& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
// func:sample.FDb.bh_rec.ReheapFirst
i32                  bh_rec_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:sample.FDb.bh_rec.Remove
void                 bh_rec_Remove(sample::FRec& row) __attribute__((nothrow));
// Remove all elements from binary heap
// func:sample.FDb.bh_rec.RemoveAll
void                 bh_rec_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
// func:sample.FDb.bh_rec.RemoveFirst
sample::FRec*        bh_rec_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
// func:sample.FDb.bh_rec.Reserve
void                 bh_rec_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
// func:sample.FDb.zd_sel_rec.EmptyQ
inline bool          zd_sel_rec_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:sample.FDb.zd_sel_rec.First
inline sample::FRec* zd_sel_rec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:sample.FDb.zd_sel_rec.InLlistQ
inline bool          zd_sel_rec_InLlistQ(sample::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:sample.FDb.zd_sel_rec.Insert
void                 zd_sel_rec_Insert(sample::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:sample.FDb.zd_sel_rec.Last
inline sample::FRec* zd_sel_rec_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:sample.FDb.zd_sel_rec.N
inline i32           zd_sel_rec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:sample.FDb.zd_sel_rec.Next
inline sample::FRec* zd_sel_rec_Next(sample::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:sample.FDb.zd_sel_rec.Prev
inline sample::FRec* zd_sel_rec_Prev(sample::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:sample.FDb.zd_sel_rec.Remove
void                 zd_sel_rec_Remove(sample::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:sample.FDb.zd_sel_rec.RemoveAll
void                 zd_sel_rec_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:sample.FDb.zd_sel_rec.RemoveFirst
sample::FRec*        zd_sel_rec_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:sample.FDb.zd_sel_rec.qLast
inline sample::FRec& zd_sel_rec_qLast() __attribute__((__warn_unused_result__, nothrow));

// cursor points to valid item
// func:sample.FDb.zd_rec_curs.Reset
inline void          _db_zd_rec_curs_Reset(_db_zd_rec_curs &curs, sample::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:sample.FDb.zd_rec_curs.ValidQ
inline bool          _db_zd_rec_curs_ValidQ(_db_zd_rec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:sample.FDb.zd_rec_curs.Next
inline void          _db_zd_rec_curs_Next(_db_zd_rec_curs &curs) __attribute__((nothrow));
// item access
// func:sample.FDb.zd_rec_curs.Access
inline sample::FRec& _db_zd_rec_curs_Access(_db_zd_rec_curs &curs) __attribute__((nothrow));
// func:sample.FDb.bh_rec_curs.Reserve
void                 _db_bh_rec_curs_Reserve(_db_bh_rec_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
// func:sample.FDb.bh_rec_curs.Reset
void                 _db_bh_rec_curs_Reset(_db_bh_rec_curs &curs, sample::FDb &parent);
// Advance cursor.
// func:sample.FDb.bh_rec_curs.Next
void                 _db_bh_rec_curs_Next(_db_bh_rec_curs &curs);
// Access current element. If not more elements, return NULL
// func:sample.FDb.bh_rec_curs.Access
inline sample::FRec& _db_bh_rec_curs_Access(_db_bh_rec_curs &curs) __attribute__((nothrow));
// Return true if Access() will return non-NULL.
// func:sample.FDb.bh_rec_curs.ValidQ
inline bool          _db_bh_rec_curs_ValidQ(_db_bh_rec_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:sample.FDb.zd_sel_rec_curs.Reset
inline void          _db_zd_sel_rec_curs_Reset(_db_zd_sel_rec_curs &curs, sample::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:sample.FDb.zd_sel_rec_curs.ValidQ
inline bool          _db_zd_sel_rec_curs_ValidQ(_db_zd_sel_rec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:sample.FDb.zd_sel_rec_curs.Next
inline void          _db_zd_sel_rec_curs_Next(_db_zd_sel_rec_curs &curs) __attribute__((nothrow));
// item access
// func:sample.FDb.zd_sel_rec_curs.Access
inline sample::FRec& _db_zd_sel_rec_curs_Access(_db_zd_sel_rec_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:sample.FDb..Init
void                 FDb_Init();
// func:sample.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- sample.FRec
// create: sample.FDb.rec (Tpool)
// global access: zd_rec (Llist)
// global access: ind_rec (Thash, hash field rec)
// global access: bh_rec (Bheap, sort field rec)
// global access: zd_sel_rec (Llist)
struct FRec { // sample.FRec
    sample::FRec*   rec_next;          // Pointer to next free element int tpool
    sample::FRec*   zd_rec_next;       // zslist link; -1 means not-in-list
    sample::FRec*   zd_rec_prev;       // previous element
    sample::FRec*   ind_rec_next;      // hash next
    i32             bh_rec_idx;        // index in heap; -1 means not-in-heap
    sample::FRec*   zd_sel_rec_next;   // zslist link; -1 means not-in-list
    sample::FRec*   zd_sel_rec_prev;   // previous element
    i32             rec;               //   0
    u32             rec2;              //   0
    u8              field3;            //   0
    // func:sample.FRec..AssignOp
    inline sample::FRec& operator =(const sample::FRec &rhs) = delete;
    // func:sample.FRec..CopyCtor
    inline               FRec(const sample::FRec &rhs) = delete;
private:
    // func:sample.FRec..Ctor
    inline               FRec() __attribute__((nothrow));
    // func:sample.FRec..Dtor
    inline               ~FRec() __attribute__((nothrow));
    friend sample::FRec&        rec_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend sample::FRec*        rec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 rec_Delete(sample::FRec &row) __attribute__((nothrow));
};

// Set all fields to initial values.
// func:sample.FRec..Init
inline void          FRec_Init(sample::FRec& rec);
// func:sample.FRec..Uninit
void                 FRec_Uninit(sample::FRec& rec) __attribute__((nothrow));

// --- sample.FieldId
#pragma pack(push,1)
struct FieldId { // sample.FieldId: Field read helper
    i32   value;   //   -1
    // func:sample.FieldId.value.Cast
    inline               operator sample_FieldIdEnum() const __attribute__((nothrow));
    // func:sample.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:sample.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:sample.FieldId..EnumCtor
    inline               FieldId(sample_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:sample.FieldId.value.GetEnum
inline sample_FieldIdEnum value_GetEnum(const sample::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:sample.FieldId.value.SetEnum
inline void          value_SetEnum(sample::FieldId& parent, sample_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:sample.FieldId.value.ToCstr
const char*          value_ToCstr(const sample::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:sample.FieldId.value.Print
void                 value_Print(const sample::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:sample.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(sample::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:sample.FieldId.value.SetStrptr
void                 value_SetStrptr(sample::FieldId& parent, algo::strptr rhs, sample_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:sample.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(sample::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of sample::FieldId from an ascii string.
// The format of the string is the format of the sample::FieldId's only field
// func:sample.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(sample::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:sample.FieldId..Init
inline void          FieldId_Init(sample::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:sample.FieldId.String  printfmt:Raw
// func:sample.FieldId..Print
void                 FieldId_Print(sample::FieldId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace sample { // gen:ns_curstext

struct _db_zd_rec_curs {// fcurs:sample.FDb.zd_rec/curs
    typedef sample::FRec ChildType;
    sample::FRec* row;
    _db_zd_rec_curs() {
        row = NULL;
    }
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_rec_curs {
    typedef sample::FRec ChildType;
    sample::FDb      *parent;        // parent
    sample::FRec*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_rec_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_rec_curs();
};


struct _db_zd_sel_rec_curs {// fcurs:sample.FDb.zd_sel_rec/curs
    typedef sample::FRec ChildType;
    sample::FRec* row;
    _db_zd_sel_rec_curs() {
        row = NULL;
    }
};

} // gen:ns_curstext
namespace sample { // gen:ns_func
// func:sample...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// func:sample...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:sample...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const sample::trace &row);// cfmt:sample.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const sample::FieldId &row);// cfmt:sample.FieldId.String
}
