//
// include/gen/lib_sql_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- lib_sql_FieldIdEnum

enum lib_sql_FieldIdEnum {        // lib_sql.FieldId.value
     lib_sql_FieldId_value   = 0
};

enum { lib_sql_FieldIdEnum_N = 1 };

namespace lib_sql { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace lib_sql { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace lib_sql { struct _db_attr_curs; }
namespace lib_sql { struct FAttr; }
namespace lib_sql { struct trace; }
namespace lib_sql { struct FDb; }
namespace lib_sql { struct FieldId; }
namespace lib_sql { extern struct lib_sql::FDb _db; }
namespace lib_sql { // gen:ns_print_struct

// --- lib_sql.FAttr
// create: lib_sql.FDb.attr (Lary)
// global access: ind_attr (Thash)
struct FAttr { // lib_sql.FAttr
    algo::cstring     attr;            //
    bool              isbool;          //   false
    lib_sql::FAttr*   ind_attr_next;   // hash next
private:
    friend lib_sql::FAttr&      attr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_sql::FAttr*      attr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 attr_RemoveAll() __attribute__((nothrow));
    friend void                 attr_RemoveLast() __attribute__((nothrow));
    FAttr();
    ~FAttr();
    FAttr(const FAttr&){ /*disallow copy constructor */}
    void operator =(const FAttr&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
// func:lib_sql.FAttr..Init
void                 FAttr_Init(lib_sql::FAttr& attr);
// func:lib_sql.FAttr..Uninit
void                 FAttr_Uninit(lib_sql::FAttr& attr) __attribute__((nothrow));

// --- lib_sql.trace
#pragma pack(push,1)
struct trace { // lib_sql.trace
    trace();
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:lib_sql.trace.String  printfmt:Tuple
// func:lib_sql.trace..Print
void                 trace_Print(lib_sql::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_sql.FDb
// create: lib_sql.FDb._db (Global)
struct FDb { // lib_sql.FDb: In-memory database for lib_sql
    lib_sql::FAttr*    attr_lary[32];            // level array
    i32                attr_n;                   // number of elements in array
    lib_sql::FAttr**   ind_attr_buckets_elems;   // pointer to bucket array
    i32                ind_attr_buckets_n;       // number of elements in bucket array
    i32                ind_attr_n;               // number of elements in the hash table
    lib_sql::trace     trace;                    //
};

// func:lib_sql.FDb._db.StaticCheck
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:lib_sql.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:lib_sql.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:lib_sql.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:lib_sql.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:lib_sql.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:lib_sql.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_sql.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:lib_sql.FDb.attr.Alloc
lib_sql::FAttr&      attr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:lib_sql.FDb.attr.AllocMaybe
lib_sql::FAttr*      attr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:lib_sql.FDb.attr.AllocMem
void*                attr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:lib_sql.FDb.attr.EmptyQ
bool                 attr_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:lib_sql.FDb.attr.Find
lib_sql::FAttr*      attr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:lib_sql.FDb.attr.Last
lib_sql::FAttr*      attr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:lib_sql.FDb.attr.N
i32                  attr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:lib_sql.FDb.attr.RemoveAll
void                 attr_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:lib_sql.FDb.attr.RemoveLast
void                 attr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:lib_sql.FDb.attr.qFind
lib_sql::FAttr&      attr_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_sql.FDb.attr.XrefMaybe
bool                 attr_XrefMaybe(lib_sql::FAttr &row);

// Return true if hash is empty
// func:lib_sql.FDb.ind_attr.EmptyQ
bool                 ind_attr_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:lib_sql.FDb.ind_attr.Find
lib_sql::FAttr*      ind_attr_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:lib_sql.FDb.ind_attr.FindX
lib_sql::FAttr&      ind_attr_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:lib_sql.FDb.ind_attr.GetOrCreate
lib_sql::FAttr&      ind_attr_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:lib_sql.FDb.ind_attr.N
i32                  ind_attr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:lib_sql.FDb.ind_attr.InsertMaybe
bool                 ind_attr_InsertMaybe(lib_sql::FAttr& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:lib_sql.FDb.ind_attr.Remove
void                 ind_attr_Remove(lib_sql::FAttr& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:lib_sql.FDb.ind_attr.Reserve
void                 ind_attr_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
// func:lib_sql.FDb.attr_curs.Reset
void                 _db_attr_curs_Reset(_db_attr_curs &curs, lib_sql::FDb &parent);
// cursor points to valid item
// func:lib_sql.FDb.attr_curs.ValidQ
bool                 _db_attr_curs_ValidQ(_db_attr_curs &curs);
// proceed to next item
// func:lib_sql.FDb.attr_curs.Next
void                 _db_attr_curs_Next(_db_attr_curs &curs);
// item access
// func:lib_sql.FDb.attr_curs.Access
lib_sql::FAttr&      _db_attr_curs_Access(_db_attr_curs &curs);
// Set all fields to initial values.
// func:lib_sql.FDb..Init
void                 FDb_Init();
// func:lib_sql.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- lib_sql.FieldId
#pragma pack(push,1)
struct FieldId { // lib_sql.FieldId: Field read helper
    i32   value;   //   -1
    inline operator lib_sql_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(lib_sql_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:lib_sql.FieldId.value.GetEnum
lib_sql_FieldIdEnum  value_GetEnum(const lib_sql::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_sql.FieldId.value.SetEnum
void                 value_SetEnum(lib_sql::FieldId& parent, lib_sql_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_sql.FieldId.value.ToCstr
const char*          value_ToCstr(const lib_sql::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:lib_sql.FieldId.value.Print
void                 value_Print(const lib_sql::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_sql.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(lib_sql::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_sql.FieldId.value.SetStrptr
void                 value_SetStrptr(lib_sql::FieldId& parent, algo::strptr rhs, lib_sql_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:lib_sql.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(lib_sql::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_sql::FieldId from an ascii string.
// The format of the string is the format of the lib_sql::FieldId's only field
// func:lib_sql.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(lib_sql::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:lib_sql.FieldId..Init
void                 FieldId_Init(lib_sql::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:lib_sql.FieldId.String  printfmt:Raw
// func:lib_sql.FieldId..Print
void                 FieldId_Print(lib_sql::FieldId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace lib_sql { // gen:ns_curstext

struct _db_attr_curs {// cursor
    typedef lib_sql::FAttr ChildType;
    lib_sql::FDb *parent;
    i64 index;
    _db_attr_curs(){ parent=NULL; index=0; }
};

} // gen:ns_curstext
namespace lib_sql { // gen:ns_func
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const lib_sql::trace &row);// cfmt:lib_sql.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_sql::FieldId &row);// cfmt:lib_sql.FieldId.String
}
