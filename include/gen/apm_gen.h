//
// include/gen/apm_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/dmmeta_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/command_gen.h"
#include "include/gen/dev_gen.h"
#include "include/gen/algo_lib_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- apm_FieldIdEnum

enum apm_FieldIdEnum {        // apm.FieldId.value
     apm_FieldId_value   = 0
};

enum { apm_FieldIdEnum_N = 1 };


// --- apm_TableIdEnum

enum apm_TableIdEnum {                   // apm.TableId.value
     apm_TableId_dmmeta_Ctype      = 0   // dmmeta.Ctype -> apm.FCtype
    ,apm_TableId_dmmeta_ctype      = 0   // dmmeta.ctype -> apm.FCtype
    ,apm_TableId_dmmeta_Field      = 1   // dmmeta.Field -> apm.FField
    ,apm_TableId_dmmeta_field      = 1   // dmmeta.field -> apm.FField
    ,apm_TableId_dmmeta_Ns         = 2   // dmmeta.Ns -> apm.FNs
    ,apm_TableId_dmmeta_ns         = 2   // dmmeta.ns -> apm.FNs
    ,apm_TableId_dev_Package       = 3   // dev.Package -> apm.FPackage
    ,apm_TableId_dev_package       = 3   // dev.package -> apm.FPackage
    ,apm_TableId_dev_Pkgdep        = 4   // dev.Pkgdep -> apm.FPkgdep
    ,apm_TableId_dev_pkgdep        = 4   // dev.pkgdep -> apm.FPkgdep
    ,apm_TableId_dev_Pkgkey        = 5   // dev.Pkgkey -> apm.FPkgkey
    ,apm_TableId_dev_pkgkey        = 5   // dev.pkgkey -> apm.FPkgkey
    ,apm_TableId_dmmeta_Ssimfile   = 6   // dmmeta.Ssimfile -> apm.FSsimfile
    ,apm_TableId_dmmeta_ssimfile   = 6   // dmmeta.ssimfile -> apm.FSsimfile
    ,apm_TableId_dmmeta_Ssimreq    = 7   // dmmeta.Ssimreq -> apm.FSsimreq
    ,apm_TableId_dmmeta_ssimreq    = 7   // dmmeta.ssimreq -> apm.FSsimreq
    ,apm_TableId_dmmeta_Substr     = 8   // dmmeta.Substr -> apm.FSubstr
    ,apm_TableId_dmmeta_substr     = 8   // dmmeta.substr -> apm.FSubstr
};

enum { apm_TableIdEnum_N = 18 };

namespace apm { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace apm { // gen:ns_field
extern const char *apm_help;
} // gen:ns_field
// gen:ns_fwddecl2
namespace dmmeta { struct Ctype; }
namespace dmmeta { struct Field; }
namespace apm { struct FCtype; }
namespace dmmeta { struct Ns; }
namespace dev { struct Package; }
namespace dev { struct Pkgdep; }
namespace apm { struct FPackage; }
namespace dev { struct Pkgkey; }
namespace apm { struct FRec; }
namespace apm { struct FPkgkey; }
namespace apm { struct FSsimfile; }
namespace dmmeta { struct Ssimfile; }
namespace dmmeta { struct Ssimreq; }
namespace apm { struct FField; }
namespace dmmeta { struct Substr; }
namespace apm { struct ctype_c_field_curs; }
namespace apm { struct ctype_c_ssimreq_curs; }
namespace apm { struct _db_package_curs; }
namespace apm { struct _db_zd_sel_package_curs; }
namespace apm { struct _db_pkgkey_curs; }
namespace apm { struct _db_pkgdep_curs; }
namespace apm { struct _db_mergefile_curs; }
namespace apm { struct _db_ctype_curs; }
namespace apm { struct _db_field_curs; }
namespace apm { struct _db_ssimfile_curs; }
namespace apm { struct _db_zd_rec_curs; }
namespace apm { struct _db_zd_selrec_curs; }
namespace apm { struct _db_zd_chooserec_curs; }
namespace apm { struct _db_zd_chooserec_delcurs; }
namespace apm { struct _db_substr_curs; }
namespace apm { struct _db_zd_topo_package_curs; }
namespace apm { struct _db_ssimreq_curs; }
namespace apm { struct _db_mkdir_curs; }
namespace apm { struct _db_ns_curs; }
namespace apm { struct package_zd_pkgkey_curs; }
namespace apm { struct package_c_pkgdep_curs; }
namespace apm { struct package_c_pkgdep_parent_curs; }
namespace apm { struct package_zd_pkgrec_curs; }
namespace apm { struct pkgkey_c_pkgrec_curs; }
namespace apm { struct rec_c_child_curs; }
namespace apm { struct rec_zd_rec_pkgrec_curs; }
namespace apm { struct ssimfile_zd_ssimfile_rec_curs; }
namespace apm { struct trace; }
namespace apm { struct FDb; }
namespace apm { struct FMergefile; }
namespace apm { struct FMkdir; }
namespace apm { struct FNs; }
namespace apm { struct FPkgdep; }
namespace apm { struct FPkgrec; }
namespace apm { struct FSsimreq; }
namespace apm { struct FSubstr; }
namespace apm { struct FieldId; }
namespace apm { struct TableId; }
namespace apm { extern struct apm::FDb _db; }
namespace apm { // gen:ns_gsymbol
    extern const algo::strptr dev_package_amc; // "amc"
    extern const algo::strptr dev_package_apm; // "apm"
    extern const algo::strptr dev_package_openacr; // "openacr"
} // gen:ns_gsymbol
namespace apm { // gen:ns_print_struct

// --- apm.FCtype
// create: apm.FDb.ctype (Lary)
// global access: ind_ctype (Thash)
// access: apm.FField.p_ctype (Upptr)
// access: apm.FField.p_arg (Upptr)
// access: apm.FSsimfile.p_ctype (Upptr)
// access: apm.FSsimreq.p_ctype (Upptr)
struct FCtype { // apm.FCtype
    algo::Smallstr100   ctype;             // Identifier. must be ns.typename
    algo::Comment       comment;           //
    apm::FSsimfile*     c_ssimfile;        // optional pointer
    apm::FField**       c_field_elems;     // array of pointers
    u32                 c_field_n;         // array of pointers
    u32                 c_field_max;       // capacity of allocated array
    apm::FSsimreq**     c_ssimreq_elems;   // array of pointers
    u32                 c_ssimreq_n;       // array of pointers
    u32                 c_ssimreq_max;     // capacity of allocated array
    apm::FCtype*        ind_ctype_next;    // hash next
private:
    friend apm::FCtype&         ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FCtype*         ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctype_RemoveAll() __attribute__((nothrow));
    friend void                 ctype_RemoveLast() __attribute__((nothrow));
    FCtype();
    ~FCtype();
    FCtype(const FCtype&){ /*disallow copy constructor */}
    void operator =(const FCtype&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FCtype.base.CopyOut
void                 ctype_CopyOut(apm::FCtype &row, dmmeta::Ctype &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FCtype.base.CopyIn
void                 ctype_CopyIn(apm::FCtype &row, dmmeta::Ctype &in) __attribute__((nothrow));

// func:apm.FCtype.ns.Get
algo::Smallstr16     ns_Get(apm::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FCtype.name.Get
algo::Smallstr100    name_Get(apm::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:apm.FCtype.c_ssimfile.InsertMaybe
bool                 c_ssimfile_InsertMaybe(apm::FCtype& ctype, apm::FSsimfile& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FCtype.c_ssimfile.Remove
void                 c_ssimfile_Remove(apm::FCtype& ctype, apm::FSsimfile& row) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FCtype.c_field.EmptyQ
bool                 c_field_EmptyQ(apm::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FCtype.c_field.Find
apm::FField*         c_field_Find(apm::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FCtype.c_field.Getary
algo::aryptr<apm::FField*> c_field_Getary(apm::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FCtype.c_field.Insert
void                 c_field_Insert(apm::FCtype& ctype, apm::FField& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:apm.FCtype.c_field.InsertMaybe
bool                 c_field_InsertMaybe(apm::FCtype& ctype, apm::FField& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FCtype.c_field.N
i32                  c_field_N(const apm::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FCtype.c_field.Remove
void                 c_field_Remove(apm::FCtype& ctype, apm::FField& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FCtype.c_field.RemoveAll
void                 c_field_RemoveAll(apm::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FCtype.c_field.Reserve
void                 c_field_Reserve(apm::FCtype& ctype, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FCtype.c_field.qFind
apm::FField&         c_field_qFind(apm::FCtype& ctype, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:apm.FCtype.c_field.InAryQ
bool                 ctype_c_field_InAryQ(apm::FField& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FCtype.c_field.qLast
apm::FField&         c_field_qLast(apm::FCtype& ctype) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FCtype.c_ssimreq.EmptyQ
bool                 c_ssimreq_EmptyQ(apm::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FCtype.c_ssimreq.Find
apm::FSsimreq*       c_ssimreq_Find(apm::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FCtype.c_ssimreq.Getary
algo::aryptr<apm::FSsimreq*> c_ssimreq_Getary(apm::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FCtype.c_ssimreq.Insert
void                 c_ssimreq_Insert(apm::FCtype& ctype, apm::FSsimreq& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:apm.FCtype.c_ssimreq.InsertMaybe
bool                 c_ssimreq_InsertMaybe(apm::FCtype& ctype, apm::FSsimreq& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FCtype.c_ssimreq.N
i32                  c_ssimreq_N(const apm::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FCtype.c_ssimreq.Remove
void                 c_ssimreq_Remove(apm::FCtype& ctype, apm::FSsimreq& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FCtype.c_ssimreq.RemoveAll
void                 c_ssimreq_RemoveAll(apm::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FCtype.c_ssimreq.Reserve
void                 c_ssimreq_Reserve(apm::FCtype& ctype, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FCtype.c_ssimreq.qFind
apm::FSsimreq&       c_ssimreq_qFind(apm::FCtype& ctype, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:apm.FCtype.c_ssimreq.InAryQ
bool                 ctype_c_ssimreq_InAryQ(apm::FSsimreq& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FCtype.c_ssimreq.qLast
apm::FSsimreq&       c_ssimreq_qLast(apm::FCtype& ctype) __attribute__((nothrow));

// func:apm.FCtype.c_field_curs.Reset
void                 ctype_c_field_curs_Reset(ctype_c_field_curs &curs, apm::FCtype &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FCtype.c_field_curs.ValidQ
bool                 ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FCtype.c_field_curs.Next
void                 ctype_c_field_curs_Next(ctype_c_field_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FCtype.c_field_curs.Access
apm::FField&         ctype_c_field_curs_Access(ctype_c_field_curs &curs) __attribute__((nothrow));
// func:apm.FCtype.c_ssimreq_curs.Reset
void                 ctype_c_ssimreq_curs_Reset(ctype_c_ssimreq_curs &curs, apm::FCtype &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FCtype.c_ssimreq_curs.ValidQ
bool                 ctype_c_ssimreq_curs_ValidQ(ctype_c_ssimreq_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FCtype.c_ssimreq_curs.Next
void                 ctype_c_ssimreq_curs_Next(ctype_c_ssimreq_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FCtype.c_ssimreq_curs.Access
apm::FSsimreq&       ctype_c_ssimreq_curs_Access(ctype_c_ssimreq_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:apm.FCtype..Init
void                 FCtype_Init(apm::FCtype& ctype);
// func:apm.FCtype..Uninit
void                 FCtype_Uninit(apm::FCtype& ctype) __attribute__((nothrow));

// --- apm.trace
#pragma pack(push,1)
struct trace { // apm.trace
    trace();
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:apm.trace.String  printfmt:Tuple
// func:apm.trace..Print
void                 trace_Print(apm::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- apm.FDb
// create: apm.FDb._db (Global)
struct FDb { // apm.FDb: In-memory database for apm
    command::apm        cmdline;                       //
    apm::FPackage*      package_lary[32];              // level array
    i32                 package_n;                     // number of elements in array
    apm::FPackage*      zd_sel_package_head;           // zero-terminated doubly linked list
    i32                 zd_sel_package_n;              // zero-terminated doubly linked list
    apm::FPackage*      zd_sel_package_tail;           // pointer to last element
    algo::cstring       script;                        //
    algo::cstring       scriptfile;                    //
    apm::FPackage**     ind_package_buckets_elems;     // pointer to bucket array
    i32                 ind_package_buckets_n;         // number of elements in bucket array
    i32                 ind_package_n;                 // number of elements in the hash table
    apm::FPkgkey*       pkgkey_lary[32];               // level array
    i32                 pkgkey_n;                      // number of elements in array
    apm::FPkgdep*       pkgdep_lary[32];               // level array
    i32                 pkgdep_n;                      // number of elements in array
    apm::FMergefile*    mergefile_lary[32];            // level array
    i32                 mergefile_n;                   // number of elements in array
    apm::FMergefile**   ind_mergefile_buckets_elems;   // pointer to bucket array
    i32                 ind_mergefile_buckets_n;       // number of elements in bucket array
    i32                 ind_mergefile_n;               // number of elements in the hash table
    apm::FPkgkey**      ind_pkgkey_buckets_elems;      // pointer to bucket array
    i32                 ind_pkgkey_buckets_n;          // number of elements in bucket array
    i32                 ind_pkgkey_n;                  // number of elements in the hash table
    algo::cstring       base_sandbox;                  // Sandbox name for 'base' files
    algo::cstring       theirs_sandbox;                // Sandbox name for 'theirs' files
    algo::cstring       ours_recfile;                  //
    algo::cstring       theirs_recfile;                //
    algo::cstring       base_recfile;                  //
    apm::FCtype*        ctype_lary[32];                // level array
    i32                 ctype_n;                       // number of elements in array
    apm::FCtype**       ind_ctype_buckets_elems;       // pointer to bucket array
    i32                 ind_ctype_buckets_n;           // number of elements in bucket array
    i32                 ind_ctype_n;                   // number of elements in the hash table
    apm::FField*        field_lary[32];                // level array
    i32                 field_n;                       // number of elements in array
    apm::FField**       ind_field_buckets_elems;       // pointer to bucket array
    i32                 ind_field_buckets_n;           // number of elements in bucket array
    i32                 ind_field_n;                   // number of elements in the hash table
    apm::FSsimfile*     ssimfile_lary[32];             // level array
    i32                 ssimfile_n;                    // number of elements in array
    apm::FSsimfile**    ind_ssimfile_buckets_elems;    // pointer to bucket array
    i32                 ind_ssimfile_buckets_n;        // number of elements in bucket array
    i32                 ind_ssimfile_n;                // number of elements in the hash table
    u64                 rec_blocksize;                 // # bytes per block
    apm::FRec*          rec_free;                      //
    apm::FRec**         ind_rec_buckets_elems;         // pointer to bucket array
    i32                 ind_rec_buckets_n;             // number of elements in bucket array
    i32                 ind_rec_n;                     // number of elements in the hash table
    apm::FRec*          zd_rec_head;                   // zero-terminated doubly linked list
    i32                 zd_rec_n;                      // zero-terminated doubly linked list
    apm::FRec*          zd_rec_tail;                   // pointer to last element
    apm::FRec*          zd_selrec_head;                // zero-terminated doubly linked list
    i32                 zd_selrec_n;                   // zero-terminated doubly linked list
    apm::FRec*          zd_selrec_tail;                // pointer to last element
    apm::FRec*          zd_chooserec_head;             // zero-terminated doubly linked list
    i32                 zd_chooserec_n;                // zero-terminated doubly linked list
    apm::FRec*          zd_chooserec_tail;             // pointer to last element
    apm::FSubstr*       substr_lary[32];               // level array
    i32                 substr_n;                      // number of elements in array
    u64                 pkgrec_blocksize;              // # bytes per block
    apm::FPkgrec*       pkgrec_free;                   //
    apm::FPackage*      zd_topo_package_head;          // zero-terminated doubly linked list
    i32                 zd_topo_package_n;             // zero-terminated doubly linked list
    apm::FPackage*      zd_topo_package_tail;          // pointer to last element
    apm::FSsimreq*      ssimreq_lary[32];              // level array
    i32                 ssimreq_n;                     // number of elements in array
    algo::cstring       merged_recfile;                //
    apm::FMkdir*        mkdir_lary[32];                // level array
    i32                 mkdir_n;                       // number of elements in array
    apm::FMkdir**       ind_mkdir_buckets_elems;       // pointer to bucket array
    i32                 ind_mkdir_buckets_n;           // number of elements in bucket array
    i32                 ind_mkdir_n;                   // number of elements in the hash table
    apm::FNs*           ns_lary[32];                   // level array
    i32                 ns_n;                          // number of elements in array
    algo::cstring       pkgdata_recfile;               // File containing new package definitions
    apm::trace          trace;                         //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     apm.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:apm.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:apm.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:apm.FDb._db.Step
void                 Step();
// Main function
// func:apm.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// func:apm.FDb._db.StaticCheck
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:apm.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:apm.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:apm.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:apm.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:apm.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:apm.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.package.Alloc
apm::FPackage&       package_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.package.AllocMaybe
apm::FPackage*       package_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.package.InsertMaybe
apm::FPackage*       package_InsertMaybe(const dev::Package &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.package.AllocMem
void*                package_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.package.EmptyQ
bool                 package_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.package.Find
apm::FPackage*       package_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.package.Last
apm::FPackage*       package_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.package.N
i32                  package_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.package.RemoveAll
void                 package_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.package.RemoveLast
void                 package_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.package.qFind
apm::FPackage&       package_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.package.XrefMaybe
bool                 package_XrefMaybe(apm::FPackage &row);

// Return true if index is empty
// func:apm.FDb.zd_sel_package.EmptyQ
bool                 zd_sel_package_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FDb.zd_sel_package.First
apm::FPackage*       zd_sel_package_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FDb.zd_sel_package.InLlistQ
bool                 zd_sel_package_InLlistQ(apm::FPackage& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FDb.zd_sel_package.Insert
void                 zd_sel_package_Insert(apm::FPackage& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FDb.zd_sel_package.Last
apm::FPackage*       zd_sel_package_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FDb.zd_sel_package.N
i32                  zd_sel_package_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FDb.zd_sel_package.Next
apm::FPackage*       zd_sel_package_Next(apm::FPackage &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FDb.zd_sel_package.Prev
apm::FPackage*       zd_sel_package_Prev(apm::FPackage &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FDb.zd_sel_package.Remove
void                 zd_sel_package_Remove(apm::FPackage& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FDb.zd_sel_package.RemoveAll
void                 zd_sel_package_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FDb.zd_sel_package.RemoveFirst
apm::FPackage*       zd_sel_package_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FDb.zd_sel_package.qLast
apm::FPackage&       zd_sel_package_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if hash is empty
// func:apm.FDb.ind_package.EmptyQ
bool                 ind_package_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_package.Find
apm::FPackage*       ind_package_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_package.FindX
apm::FPackage&       ind_package_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:apm.FDb.ind_package.GetOrCreate
apm::FPackage&       ind_package_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:apm.FDb.ind_package.N
i32                  ind_package_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_package.InsertMaybe
bool                 ind_package_InsertMaybe(apm::FPackage& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_package.Remove
void                 ind_package_Remove(apm::FPackage& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_package.Reserve
void                 ind_package_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.pkgkey.Alloc
apm::FPkgkey&        pkgkey_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.pkgkey.AllocMaybe
apm::FPkgkey*        pkgkey_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.pkgkey.InsertMaybe
apm::FPkgkey*        pkgkey_InsertMaybe(const dev::Pkgkey &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.pkgkey.AllocMem
void*                pkgkey_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.pkgkey.EmptyQ
bool                 pkgkey_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.pkgkey.Find
apm::FPkgkey*        pkgkey_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.pkgkey.Last
apm::FPkgkey*        pkgkey_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.pkgkey.N
i32                  pkgkey_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.pkgkey.RemoveAll
void                 pkgkey_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.pkgkey.RemoveLast
void                 pkgkey_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.pkgkey.qFind
apm::FPkgkey&        pkgkey_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.pkgkey.XrefMaybe
bool                 pkgkey_XrefMaybe(apm::FPkgkey &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.pkgdep.Alloc
apm::FPkgdep&        pkgdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.pkgdep.AllocMaybe
apm::FPkgdep*        pkgdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.pkgdep.InsertMaybe
apm::FPkgdep*        pkgdep_InsertMaybe(const dev::Pkgdep &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.pkgdep.AllocMem
void*                pkgdep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.pkgdep.EmptyQ
bool                 pkgdep_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.pkgdep.Find
apm::FPkgdep*        pkgdep_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.pkgdep.Last
apm::FPkgdep*        pkgdep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.pkgdep.N
i32                  pkgdep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.pkgdep.RemoveAll
void                 pkgdep_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.pkgdep.RemoveLast
void                 pkgdep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.pkgdep.qFind
apm::FPkgdep&        pkgdep_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.pkgdep.XrefMaybe
bool                 pkgdep_XrefMaybe(apm::FPkgdep &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.mergefile.Alloc
apm::FMergefile&     mergefile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.mergefile.AllocMaybe
apm::FMergefile*     mergefile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.mergefile.AllocMem
void*                mergefile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.mergefile.EmptyQ
bool                 mergefile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.mergefile.Find
apm::FMergefile*     mergefile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.mergefile.Last
apm::FMergefile*     mergefile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.mergefile.N
i32                  mergefile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.mergefile.RemoveAll
void                 mergefile_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.mergefile.RemoveLast
void                 mergefile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.mergefile.qFind
apm::FMergefile&     mergefile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.mergefile.XrefMaybe
bool                 mergefile_XrefMaybe(apm::FMergefile &row);

// Return true if hash is empty
// func:apm.FDb.ind_mergefile.EmptyQ
bool                 ind_mergefile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_mergefile.Find
apm::FMergefile*     ind_mergefile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_mergefile.FindX
apm::FMergefile&     ind_mergefile_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:apm.FDb.ind_mergefile.GetOrCreate
apm::FMergefile&     ind_mergefile_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:apm.FDb.ind_mergefile.N
i32                  ind_mergefile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_mergefile.InsertMaybe
bool                 ind_mergefile_InsertMaybe(apm::FMergefile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_mergefile.Remove
void                 ind_mergefile_Remove(apm::FMergefile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_mergefile.Reserve
void                 ind_mergefile_Reserve(int n) __attribute__((nothrow));

// Return true if hash is empty
// func:apm.FDb.ind_pkgkey.EmptyQ
bool                 ind_pkgkey_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_pkgkey.Find
apm::FPkgkey*        ind_pkgkey_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_pkgkey.FindX
apm::FPkgkey&        ind_pkgkey_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:apm.FDb.ind_pkgkey.N
i32                  ind_pkgkey_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_pkgkey.InsertMaybe
bool                 ind_pkgkey_InsertMaybe(apm::FPkgkey& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_pkgkey.Remove
void                 ind_pkgkey_Remove(apm::FPkgkey& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_pkgkey.Reserve
void                 ind_pkgkey_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.ctype.Alloc
apm::FCtype&         ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.ctype.AllocMaybe
apm::FCtype*         ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.ctype.InsertMaybe
apm::FCtype*         ctype_InsertMaybe(const dmmeta::Ctype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.ctype.AllocMem
void*                ctype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.ctype.EmptyQ
bool                 ctype_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.ctype.Find
apm::FCtype*         ctype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.ctype.Last
apm::FCtype*         ctype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.ctype.N
i32                  ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.ctype.RemoveAll
void                 ctype_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.ctype.RemoveLast
void                 ctype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.ctype.qFind
apm::FCtype&         ctype_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.ctype.XrefMaybe
bool                 ctype_XrefMaybe(apm::FCtype &row);

// Return true if hash is empty
// func:apm.FDb.ind_ctype.EmptyQ
bool                 ind_ctype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_ctype.Find
apm::FCtype*         ind_ctype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_ctype.FindX
apm::FCtype&         ind_ctype_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:apm.FDb.ind_ctype.GetOrCreate
apm::FCtype&         ind_ctype_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:apm.FDb.ind_ctype.N
i32                  ind_ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_ctype.InsertMaybe
bool                 ind_ctype_InsertMaybe(apm::FCtype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_ctype.Remove
void                 ind_ctype_Remove(apm::FCtype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_ctype.Reserve
void                 ind_ctype_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.field.Alloc
apm::FField&         field_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.field.AllocMaybe
apm::FField*         field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.field.InsertMaybe
apm::FField*         field_InsertMaybe(const dmmeta::Field &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.field.AllocMem
void*                field_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.field.EmptyQ
bool                 field_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.field.Find
apm::FField*         field_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.field.Last
apm::FField*         field_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.field.N
i32                  field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.field.RemoveAll
void                 field_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.field.RemoveLast
void                 field_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.field.qFind
apm::FField&         field_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.field.XrefMaybe
bool                 field_XrefMaybe(apm::FField &row);

// Return true if hash is empty
// func:apm.FDb.ind_field.EmptyQ
bool                 ind_field_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_field.Find
apm::FField*         ind_field_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_field.FindX
apm::FField&         ind_field_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:apm.FDb.ind_field.N
i32                  ind_field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_field.InsertMaybe
bool                 ind_field_InsertMaybe(apm::FField& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_field.Remove
void                 ind_field_Remove(apm::FField& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_field.Reserve
void                 ind_field_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.ssimfile.Alloc
apm::FSsimfile&      ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.ssimfile.AllocMaybe
apm::FSsimfile*      ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.ssimfile.InsertMaybe
apm::FSsimfile*      ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.ssimfile.AllocMem
void*                ssimfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.ssimfile.EmptyQ
bool                 ssimfile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.ssimfile.Find
apm::FSsimfile*      ssimfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.ssimfile.Last
apm::FSsimfile*      ssimfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.ssimfile.N
i32                  ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.ssimfile.RemoveAll
void                 ssimfile_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.ssimfile.RemoveLast
void                 ssimfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.ssimfile.qFind
apm::FSsimfile&      ssimfile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.ssimfile.XrefMaybe
bool                 ssimfile_XrefMaybe(apm::FSsimfile &row);

// Return true if hash is empty
// func:apm.FDb.ind_ssimfile.EmptyQ
bool                 ind_ssimfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_ssimfile.Find
apm::FSsimfile*      ind_ssimfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_ssimfile.FindX
apm::FSsimfile&      ind_ssimfile_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:apm.FDb.ind_ssimfile.N
i32                  ind_ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_ssimfile.InsertMaybe
bool                 ind_ssimfile_InsertMaybe(apm::FSsimfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_ssimfile.Remove
void                 ind_ssimfile_Remove(apm::FSsimfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_ssimfile.Reserve
void                 ind_ssimfile_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.rec.Alloc
apm::FRec&           rec_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.rec.AllocMaybe
apm::FRec*           rec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:apm.FDb.rec.Delete
void                 rec_Delete(apm::FRec &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:apm.FDb.rec.AllocMem
void*                rec_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:apm.FDb.rec.FreeMem
void                 rec_FreeMem(apm::FRec &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:apm.FDb.rec.Reserve
u64                  rec_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:apm.FDb.rec.ReserveMem
u64                  rec_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.rec.XrefMaybe
bool                 rec_XrefMaybe(apm::FRec &row);

// Return true if hash is empty
// func:apm.FDb.ind_rec.EmptyQ
bool                 ind_rec_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_rec.Find
apm::FRec*           ind_rec_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_rec.FindX
apm::FRec&           ind_rec_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:apm.FDb.ind_rec.N
i32                  ind_rec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_rec.InsertMaybe
bool                 ind_rec_InsertMaybe(apm::FRec& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_rec.Remove
void                 ind_rec_Remove(apm::FRec& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_rec.Reserve
void                 ind_rec_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FDb.zd_rec.EmptyQ
bool                 zd_rec_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FDb.zd_rec.First
apm::FRec*           zd_rec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FDb.zd_rec.InLlistQ
bool                 zd_rec_InLlistQ(apm::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FDb.zd_rec.Insert
void                 zd_rec_Insert(apm::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FDb.zd_rec.Last
apm::FRec*           zd_rec_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FDb.zd_rec.N
i32                  zd_rec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FDb.zd_rec.Next
apm::FRec*           zd_rec_Next(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FDb.zd_rec.Prev
apm::FRec*           zd_rec_Prev(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FDb.zd_rec.Remove
void                 zd_rec_Remove(apm::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FDb.zd_rec.RemoveAll
void                 zd_rec_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FDb.zd_rec.RemoveFirst
apm::FRec*           zd_rec_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FDb.zd_rec.qLast
apm::FRec&           zd_rec_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:apm.FDb.zd_selrec.EmptyQ
bool                 zd_selrec_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FDb.zd_selrec.First
apm::FRec*           zd_selrec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FDb.zd_selrec.InLlistQ
bool                 zd_selrec_InLlistQ(apm::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FDb.zd_selrec.Insert
void                 zd_selrec_Insert(apm::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FDb.zd_selrec.Last
apm::FRec*           zd_selrec_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FDb.zd_selrec.N
i32                  zd_selrec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FDb.zd_selrec.Next
apm::FRec*           zd_selrec_Next(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FDb.zd_selrec.Prev
apm::FRec*           zd_selrec_Prev(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FDb.zd_selrec.Remove
void                 zd_selrec_Remove(apm::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FDb.zd_selrec.RemoveAll
void                 zd_selrec_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FDb.zd_selrec.RemoveFirst
apm::FRec*           zd_selrec_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FDb.zd_selrec.qLast
apm::FRec&           zd_selrec_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:apm.FDb.zd_chooserec.EmptyQ
bool                 zd_chooserec_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FDb.zd_chooserec.First
apm::FRec*           zd_chooserec_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FDb.zd_chooserec.InLlistQ
bool                 zd_chooserec_InLlistQ(apm::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FDb.zd_chooserec.Insert
void                 zd_chooserec_Insert(apm::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FDb.zd_chooserec.Last
apm::FRec*           zd_chooserec_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FDb.zd_chooserec.N
i32                  zd_chooserec_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FDb.zd_chooserec.Next
apm::FRec*           zd_chooserec_Next(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FDb.zd_chooserec.Prev
apm::FRec*           zd_chooserec_Prev(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FDb.zd_chooserec.Remove
void                 zd_chooserec_Remove(apm::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FDb.zd_chooserec.RemoveAll
void                 zd_chooserec_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FDb.zd_chooserec.RemoveFirst
apm::FRec*           zd_chooserec_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FDb.zd_chooserec.qLast
apm::FRec&           zd_chooserec_qLast() __attribute__((__warn_unused_result__, nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.substr.Alloc
apm::FSubstr&        substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.substr.AllocMaybe
apm::FSubstr*        substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.substr.InsertMaybe
apm::FSubstr*        substr_InsertMaybe(const dmmeta::Substr &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.substr.AllocMem
void*                substr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.substr.EmptyQ
bool                 substr_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.substr.Find
apm::FSubstr*        substr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.substr.Last
apm::FSubstr*        substr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.substr.N
i32                  substr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.substr.RemoveAll
void                 substr_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.substr.RemoveLast
void                 substr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.substr.qFind
apm::FSubstr&        substr_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.substr.XrefMaybe
bool                 substr_XrefMaybe(apm::FSubstr &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.pkgrec.Alloc
apm::FPkgrec&        pkgrec_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.pkgrec.AllocMaybe
apm::FPkgrec*        pkgrec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:apm.FDb.pkgrec.Delete
void                 pkgrec_Delete(apm::FPkgrec &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:apm.FDb.pkgrec.AllocMem
void*                pkgrec_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:apm.FDb.pkgrec.FreeMem
void                 pkgrec_FreeMem(apm::FPkgrec &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:apm.FDb.pkgrec.Reserve
u64                  pkgrec_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:apm.FDb.pkgrec.ReserveMem
u64                  pkgrec_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.pkgrec.XrefMaybe
bool                 pkgrec_XrefMaybe(apm::FPkgrec &row);

// Return true if index is empty
// func:apm.FDb.zd_topo_package.EmptyQ
bool                 zd_topo_package_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FDb.zd_topo_package.First
apm::FPackage*       zd_topo_package_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FDb.zd_topo_package.InLlistQ
bool                 zd_topo_package_InLlistQ(apm::FPackage& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FDb.zd_topo_package.Insert
void                 zd_topo_package_Insert(apm::FPackage& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FDb.zd_topo_package.Last
apm::FPackage*       zd_topo_package_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FDb.zd_topo_package.N
i32                  zd_topo_package_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FDb.zd_topo_package.Next
apm::FPackage*       zd_topo_package_Next(apm::FPackage &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FDb.zd_topo_package.Prev
apm::FPackage*       zd_topo_package_Prev(apm::FPackage &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FDb.zd_topo_package.Remove
void                 zd_topo_package_Remove(apm::FPackage& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FDb.zd_topo_package.RemoveAll
void                 zd_topo_package_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FDb.zd_topo_package.RemoveFirst
apm::FPackage*       zd_topo_package_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FDb.zd_topo_package.qLast
apm::FPackage&       zd_topo_package_qLast() __attribute__((__warn_unused_result__, nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.ssimreq.Alloc
apm::FSsimreq&       ssimreq_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.ssimreq.AllocMaybe
apm::FSsimreq*       ssimreq_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.ssimreq.InsertMaybe
apm::FSsimreq*       ssimreq_InsertMaybe(const dmmeta::Ssimreq &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.ssimreq.AllocMem
void*                ssimreq_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.ssimreq.EmptyQ
bool                 ssimreq_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.ssimreq.Find
apm::FSsimreq*       ssimreq_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.ssimreq.Last
apm::FSsimreq*       ssimreq_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.ssimreq.N
i32                  ssimreq_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.ssimreq.RemoveAll
void                 ssimreq_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.ssimreq.RemoveLast
void                 ssimreq_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.ssimreq.qFind
apm::FSsimreq&       ssimreq_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.ssimreq.XrefMaybe
bool                 ssimreq_XrefMaybe(apm::FSsimreq &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.mkdir.Alloc
apm::FMkdir&         mkdir_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.mkdir.AllocMaybe
apm::FMkdir*         mkdir_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.mkdir.AllocMem
void*                mkdir_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.mkdir.EmptyQ
bool                 mkdir_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.mkdir.Find
apm::FMkdir*         mkdir_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.mkdir.Last
apm::FMkdir*         mkdir_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.mkdir.N
i32                  mkdir_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.mkdir.RemoveAll
void                 mkdir_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.mkdir.RemoveLast
void                 mkdir_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.mkdir.qFind
apm::FMkdir&         mkdir_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.mkdir.XrefMaybe
bool                 mkdir_XrefMaybe(apm::FMkdir &row);

// Return true if hash is empty
// func:apm.FDb.ind_mkdir.EmptyQ
bool                 ind_mkdir_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:apm.FDb.ind_mkdir.Find
apm::FMkdir*         ind_mkdir_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:apm.FDb.ind_mkdir.FindX
apm::FMkdir&         ind_mkdir_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:apm.FDb.ind_mkdir.GetOrCreate
apm::FMkdir&         ind_mkdir_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:apm.FDb.ind_mkdir.N
i32                  ind_mkdir_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:apm.FDb.ind_mkdir.InsertMaybe
bool                 ind_mkdir_InsertMaybe(apm::FMkdir& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:apm.FDb.ind_mkdir.Remove
void                 ind_mkdir_Remove(apm::FMkdir& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:apm.FDb.ind_mkdir.Reserve
void                 ind_mkdir_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:apm.FDb.ns.Alloc
apm::FNs&            ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:apm.FDb.ns.AllocMaybe
apm::FNs*            ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:apm.FDb.ns.InsertMaybe
apm::FNs*            ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:apm.FDb.ns.AllocMem
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:apm.FDb.ns.EmptyQ
bool                 ns_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:apm.FDb.ns.Find
apm::FNs*            ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:apm.FDb.ns.Last
apm::FNs*            ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:apm.FDb.ns.N
i32                  ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:apm.FDb.ns.RemoveAll
void                 ns_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:apm.FDb.ns.RemoveLast
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:apm.FDb.ns.qFind
apm::FNs&            ns_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:apm.FDb.ns.XrefMaybe
bool                 ns_XrefMaybe(apm::FNs &row);

// cursor points to valid item
// func:apm.FDb.package_curs.Reset
void                 _db_package_curs_Reset(_db_package_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.package_curs.ValidQ
bool                 _db_package_curs_ValidQ(_db_package_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.package_curs.Next
void                 _db_package_curs_Next(_db_package_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.package_curs.Access
apm::FPackage&       _db_package_curs_Access(_db_package_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_sel_package_curs.Reset
void                 _db_zd_sel_package_curs_Reset(_db_zd_sel_package_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_sel_package_curs.ValidQ
bool                 _db_zd_sel_package_curs_ValidQ(_db_zd_sel_package_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_sel_package_curs.Next
void                 _db_zd_sel_package_curs_Next(_db_zd_sel_package_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_sel_package_curs.Access
apm::FPackage&       _db_zd_sel_package_curs_Access(_db_zd_sel_package_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.pkgkey_curs.Reset
void                 _db_pkgkey_curs_Reset(_db_pkgkey_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.pkgkey_curs.ValidQ
bool                 _db_pkgkey_curs_ValidQ(_db_pkgkey_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.pkgkey_curs.Next
void                 _db_pkgkey_curs_Next(_db_pkgkey_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.pkgkey_curs.Access
apm::FPkgkey&        _db_pkgkey_curs_Access(_db_pkgkey_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.pkgdep_curs.Reset
void                 _db_pkgdep_curs_Reset(_db_pkgdep_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.pkgdep_curs.ValidQ
bool                 _db_pkgdep_curs_ValidQ(_db_pkgdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.pkgdep_curs.Next
void                 _db_pkgdep_curs_Next(_db_pkgdep_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.pkgdep_curs.Access
apm::FPkgdep&        _db_pkgdep_curs_Access(_db_pkgdep_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.mergefile_curs.Reset
void                 _db_mergefile_curs_Reset(_db_mergefile_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.mergefile_curs.ValidQ
bool                 _db_mergefile_curs_ValidQ(_db_mergefile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.mergefile_curs.Next
void                 _db_mergefile_curs_Next(_db_mergefile_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.mergefile_curs.Access
apm::FMergefile&     _db_mergefile_curs_Access(_db_mergefile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ctype_curs.Reset
void                 _db_ctype_curs_Reset(_db_ctype_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ctype_curs.ValidQ
bool                 _db_ctype_curs_ValidQ(_db_ctype_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.ctype_curs.Next
void                 _db_ctype_curs_Next(_db_ctype_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.ctype_curs.Access
apm::FCtype&         _db_ctype_curs_Access(_db_ctype_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.field_curs.Reset
void                 _db_field_curs_Reset(_db_field_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.field_curs.ValidQ
bool                 _db_field_curs_ValidQ(_db_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.field_curs.Next
void                 _db_field_curs_Next(_db_field_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.field_curs.Access
apm::FField&         _db_field_curs_Access(_db_field_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ssimfile_curs.Reset
void                 _db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ssimfile_curs.ValidQ
bool                 _db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.ssimfile_curs.Next
void                 _db_ssimfile_curs_Next(_db_ssimfile_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.ssimfile_curs.Access
apm::FSsimfile&      _db_ssimfile_curs_Access(_db_ssimfile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_rec_curs.Reset
void                 _db_zd_rec_curs_Reset(_db_zd_rec_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_rec_curs.ValidQ
bool                 _db_zd_rec_curs_ValidQ(_db_zd_rec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_rec_curs.Next
void                 _db_zd_rec_curs_Next(_db_zd_rec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_rec_curs.Access
apm::FRec&           _db_zd_rec_curs_Access(_db_zd_rec_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_selrec_curs.Reset
void                 _db_zd_selrec_curs_Reset(_db_zd_selrec_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_selrec_curs.ValidQ
bool                 _db_zd_selrec_curs_ValidQ(_db_zd_selrec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_selrec_curs.Next
void                 _db_zd_selrec_curs_Next(_db_zd_selrec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_selrec_curs.Access
apm::FRec&           _db_zd_selrec_curs_Access(_db_zd_selrec_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_chooserec_curs.Reset
void                 _db_zd_chooserec_curs_Reset(_db_zd_chooserec_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_chooserec_curs.ValidQ
bool                 _db_zd_chooserec_curs_ValidQ(_db_zd_chooserec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_chooserec_curs.Next
void                 _db_zd_chooserec_curs_Next(_db_zd_chooserec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_chooserec_curs.Access
apm::FRec&           _db_zd_chooserec_curs_Access(_db_zd_chooserec_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_chooserec_delcurs.Reset
void                 _db_zd_chooserec_delcurs_Reset(_db_zd_chooserec_delcurs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_chooserec_delcurs.ValidQ
bool                 _db_zd_chooserec_delcurs_ValidQ(_db_zd_chooserec_delcurs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_chooserec_delcurs.Next
void                 _db_zd_chooserec_delcurs_Next(_db_zd_chooserec_delcurs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_chooserec_delcurs.Access
apm::FRec&           _db_zd_chooserec_delcurs_Access(_db_zd_chooserec_delcurs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.substr_curs.Reset
void                 _db_substr_curs_Reset(_db_substr_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.substr_curs.ValidQ
bool                 _db_substr_curs_ValidQ(_db_substr_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.substr_curs.Next
void                 _db_substr_curs_Next(_db_substr_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.substr_curs.Access
apm::FSubstr&        _db_substr_curs_Access(_db_substr_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_topo_package_curs.Reset
void                 _db_zd_topo_package_curs_Reset(_db_zd_topo_package_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.zd_topo_package_curs.ValidQ
bool                 _db_zd_topo_package_curs_ValidQ(_db_zd_topo_package_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.zd_topo_package_curs.Next
void                 _db_zd_topo_package_curs_Next(_db_zd_topo_package_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.zd_topo_package_curs.Access
apm::FPackage&       _db_zd_topo_package_curs_Access(_db_zd_topo_package_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ssimreq_curs.Reset
void                 _db_ssimreq_curs_Reset(_db_ssimreq_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ssimreq_curs.ValidQ
bool                 _db_ssimreq_curs_ValidQ(_db_ssimreq_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.ssimreq_curs.Next
void                 _db_ssimreq_curs_Next(_db_ssimreq_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.ssimreq_curs.Access
apm::FSsimreq&       _db_ssimreq_curs_Access(_db_ssimreq_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.mkdir_curs.Reset
void                 _db_mkdir_curs_Reset(_db_mkdir_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.mkdir_curs.ValidQ
bool                 _db_mkdir_curs_ValidQ(_db_mkdir_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.mkdir_curs.Next
void                 _db_mkdir_curs_Next(_db_mkdir_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.mkdir_curs.Access
apm::FMkdir&         _db_mkdir_curs_Access(_db_mkdir_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ns_curs.Reset
void                 _db_ns_curs_Reset(_db_ns_curs &curs, apm::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FDb.ns_curs.ValidQ
bool                 _db_ns_curs_ValidQ(_db_ns_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FDb.ns_curs.Next
void                 _db_ns_curs_Next(_db_ns_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FDb.ns_curs.Access
apm::FNs&            _db_ns_curs_Access(_db_ns_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:apm.FDb..Init
void                 FDb_Init();
// func:apm.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- apm.FField
// create: apm.FDb.field (Lary)
// global access: ind_field (Thash)
// access: apm.FCtype.c_field (Ptrary)
// access: apm.FSsimreq.p_field (Upptr)
// access: apm.FSubstr.p_srcfield (Upptr)
struct FField { // apm.FField
    apm::FField*        ind_field_next;         // hash next
    algo::Smallstr100   field;                  // Primary key, as ctype.name
    algo::Smallstr100   arg;                    // Type of field
    algo::Smallstr50    reftype;                //   "Val"  Type constructor
    algo::CppExpr       dflt;                   // Default value (c++ expression)
    algo::Comment       comment;                //
    apm::FCtype*        p_ctype;                // reference to parent row
    apm::FSubstr*       c_substr;               // optional pointer
    apm::FCtype*        p_arg;                  // reference to parent row
    bool                ctype_c_field_in_ary;   //   false  membership flag
private:
    friend apm::FField&         field_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FField*         field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 field_RemoveAll() __attribute__((nothrow));
    friend void                 field_RemoveLast() __attribute__((nothrow));
    FField();
    ~FField();
    FField(const FField&){ /*disallow copy constructor */}
    void operator =(const FField&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FField.base.CopyOut
void                 field_CopyOut(apm::FField &row, dmmeta::Field &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FField.base.CopyIn
void                 field_CopyIn(apm::FField &row, dmmeta::Field &in) __attribute__((nothrow));

// func:apm.FField.ctype.Get
algo::Smallstr100    ctype_Get(apm::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FField.ns.Get
algo::Smallstr16     ns_Get(apm::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FField.name.Get
algo::Smallstr50     name_Get(apm::FField& field) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:apm.FField.c_substr.InsertMaybe
bool                 c_substr_InsertMaybe(apm::FField& field, apm::FSubstr& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FField.c_substr.Remove
void                 c_substr_Remove(apm::FField& field, apm::FSubstr& row) __attribute__((nothrow));

// Set all fields to initial values.
// func:apm.FField..Init
void                 FField_Init(apm::FField& field);
// func:apm.FField..Uninit
void                 FField_Uninit(apm::FField& field) __attribute__((nothrow));

// --- apm.FMergefile
// create: apm.FDb.mergefile (Lary)
// global access: ind_mergefile (Thash)
struct FMergefile { // apm.FMergefile
    apm::FMergefile*   ind_mergefile_next;   // hash next
    algo::cstring      mergefile;            //
    algo::cstring      base_file;            //
    i32                base_mode;            //   0
    algo::cstring      ours_file;            //
    i32                ours_mode;            //   0
    algo::cstring      theirs_file;          //
    i32                theirs_mode;          //   0
private:
    friend apm::FMergefile&     mergefile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FMergefile*     mergefile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 mergefile_RemoveAll() __attribute__((nothrow));
    friend void                 mergefile_RemoveLast() __attribute__((nothrow));
    FMergefile();
    ~FMergefile();
    FMergefile(const FMergefile&){ /*disallow copy constructor */}
    void operator =(const FMergefile&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
// func:apm.FMergefile..Init
void                 FMergefile_Init(apm::FMergefile& mergefile);
// func:apm.FMergefile..Uninit
void                 FMergefile_Uninit(apm::FMergefile& mergefile) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:apm.FMergefile.String  printfmt:Tuple
// func:apm.FMergefile..Print
void                 FMergefile_Print(apm::FMergefile& row, algo::cstring& str) __attribute__((nothrow));

// --- apm.FMkdir
// create: apm.FDb.mkdir (Lary)
// global access: ind_mkdir (Thash)
struct FMkdir { // apm.FMkdir
    apm::FMkdir*    ind_mkdir_next;   // hash next
    algo::cstring   mkdir;            //
private:
    friend apm::FMkdir&         mkdir_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FMkdir*         mkdir_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 mkdir_RemoveAll() __attribute__((nothrow));
    friend void                 mkdir_RemoveLast() __attribute__((nothrow));
    FMkdir();
    ~FMkdir();
    FMkdir(const FMkdir&){ /*disallow copy constructor */}
    void operator =(const FMkdir&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
// func:apm.FMkdir..Init
void                 FMkdir_Init(apm::FMkdir& mkdir);
// func:apm.FMkdir..Uninit
void                 FMkdir_Uninit(apm::FMkdir& mkdir) __attribute__((nothrow));

// --- apm.FNs
// create: apm.FDb.ns (Lary)
struct FNs { // apm.FNs
    algo::Smallstr16   ns;        // Namespace name (primary key)
    algo::Smallstr50   nstype;    // Namespace type
    algo::Smallstr50   license;   // Associated license
    algo::Comment      comment;   //
private:
    friend apm::FNs&            ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FNs*            ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveAll() __attribute__((nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
    FNs();
};

// Copy fields out of row
// func:apm.FNs.base.CopyOut
void                 ns_CopyOut(apm::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FNs.base.CopyIn
void                 ns_CopyIn(apm::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));


// --- apm.FPackage
// create: apm.FDb.package (Lary)
// global access: zd_sel_package (Llist)
// global access: ind_package (Thash)
// global access: zd_topo_package (Llist)
// access: apm.FPkgdep.p_parent (Upptr)
// access: apm.FPkgdep.p_package (Upptr)
// access: apm.FPkgrec.p_package (Upptr)
struct FPackage { // apm.FPackage
    apm::FPackage*      zd_sel_package_next;     // zslist link; -1 means not-in-list
    apm::FPackage*      zd_sel_package_prev;     // previous element
    apm::FPackage*      ind_package_next;        // hash next
    apm::FPackage*      zd_topo_package_next;    // zslist link; -1 means not-in-list
    apm::FPackage*      zd_topo_package_prev;    // previous element
    algo::Smallstr50    package;                 // Package name
    algo::Smallstr50    baseref;                 // Base gitref of installed package
    algo::Smallstr200   origin;                  // Source URL for published package
    algo::Comment       comment;                 //
    apm::FPkgkey*       zd_pkgkey_head;          // zero-terminated doubly linked list
    i32                 zd_pkgkey_n;             // zero-terminated doubly linked list
    apm::FPkgkey*       zd_pkgkey_tail;          // pointer to last element
    apm::FPkgdep**      c_pkgdep_elems;          // array of pointers
    u32                 c_pkgdep_n;              // array of pointers
    u32                 c_pkgdep_max;            // capacity of allocated array
    apm::FPkgdep**      c_pkgdep_parent_elems;   // array of pointers
    u32                 c_pkgdep_parent_n;       // array of pointers
    u32                 c_pkgdep_parent_max;     // capacity of allocated array
    apm::FPkgrec*       zd_pkgrec_head;          // zero-terminated doubly linked list
    i32                 zd_pkgrec_n;             // zero-terminated doubly linked list
    apm::FPkgrec*       zd_pkgrec_tail;          // pointer to last element
    bool                visited;                 //   false
private:
    friend apm::FPackage&       package_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FPackage*       package_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 package_RemoveAll() __attribute__((nothrow));
    friend void                 package_RemoveLast() __attribute__((nothrow));
    FPackage();
    ~FPackage();
    FPackage(const FPackage&){ /*disallow copy constructor */}
    void operator =(const FPackage&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FPackage.base.CopyOut
void                 package_CopyOut(apm::FPackage &row, dev::Package &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FPackage.base.CopyIn
void                 package_CopyIn(apm::FPackage &row, dev::Package &in) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FPackage.zd_pkgkey.EmptyQ
bool                 zd_pkgkey_EmptyQ(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FPackage.zd_pkgkey.First
apm::FPkgkey*        zd_pkgkey_First(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FPackage.zd_pkgkey.InLlistQ
bool                 zd_pkgkey_InLlistQ(apm::FPkgkey& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FPackage.zd_pkgkey.Insert
void                 zd_pkgkey_Insert(apm::FPackage& package, apm::FPkgkey& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FPackage.zd_pkgkey.Last
apm::FPkgkey*        zd_pkgkey_Last(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FPackage.zd_pkgkey.N
i32                  zd_pkgkey_N(const apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FPackage.zd_pkgkey.Next
apm::FPkgkey*        zd_pkgkey_Next(apm::FPkgkey &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FPackage.zd_pkgkey.Prev
apm::FPkgkey*        zd_pkgkey_Prev(apm::FPkgkey &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FPackage.zd_pkgkey.Remove
void                 zd_pkgkey_Remove(apm::FPackage& package, apm::FPkgkey& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FPackage.zd_pkgkey.RemoveAll
void                 zd_pkgkey_RemoveAll(apm::FPackage& package) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FPackage.zd_pkgkey.RemoveFirst
apm::FPkgkey*        zd_pkgkey_RemoveFirst(apm::FPackage& package) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FPackage.zd_pkgkey.qLast
apm::FPkgkey&        zd_pkgkey_qLast(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:apm.FPackage.c_pkgdep.EmptyQ
bool                 c_pkgdep_EmptyQ(apm::FPackage& package) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FPackage.c_pkgdep.Find
apm::FPkgdep*        c_pkgdep_Find(apm::FPackage& package, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FPackage.c_pkgdep.Getary
algo::aryptr<apm::FPkgdep*> c_pkgdep_Getary(apm::FPackage& package) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FPackage.c_pkgdep.Insert
void                 c_pkgdep_Insert(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:apm.FPackage.c_pkgdep.InsertMaybe
bool                 c_pkgdep_InsertMaybe(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FPackage.c_pkgdep.N
i32                  c_pkgdep_N(const apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FPackage.c_pkgdep.Remove
void                 c_pkgdep_Remove(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FPackage.c_pkgdep.RemoveAll
void                 c_pkgdep_RemoveAll(apm::FPackage& package) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FPackage.c_pkgdep.Reserve
void                 c_pkgdep_Reserve(apm::FPackage& package, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FPackage.c_pkgdep.qFind
apm::FPkgdep&        c_pkgdep_qFind(apm::FPackage& package, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:apm.FPackage.c_pkgdep.InAryQ
bool                 package_c_pkgdep_InAryQ(apm::FPkgdep& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FPackage.c_pkgdep.qLast
apm::FPkgdep&        c_pkgdep_qLast(apm::FPackage& package) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FPackage.c_pkgdep_parent.EmptyQ
bool                 c_pkgdep_parent_EmptyQ(apm::FPackage& package) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FPackage.c_pkgdep_parent.Find
apm::FPkgdep*        c_pkgdep_parent_Find(apm::FPackage& package, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FPackage.c_pkgdep_parent.Getary
algo::aryptr<apm::FPkgdep*> c_pkgdep_parent_Getary(apm::FPackage& package) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FPackage.c_pkgdep_parent.Insert
void                 c_pkgdep_parent_Insert(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:apm.FPackage.c_pkgdep_parent.InsertMaybe
bool                 c_pkgdep_parent_InsertMaybe(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FPackage.c_pkgdep_parent.N
i32                  c_pkgdep_parent_N(const apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FPackage.c_pkgdep_parent.Remove
void                 c_pkgdep_parent_Remove(apm::FPackage& package, apm::FPkgdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FPackage.c_pkgdep_parent.RemoveAll
void                 c_pkgdep_parent_RemoveAll(apm::FPackage& package) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FPackage.c_pkgdep_parent.Reserve
void                 c_pkgdep_parent_Reserve(apm::FPackage& package, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FPackage.c_pkgdep_parent.qFind
apm::FPkgdep&        c_pkgdep_parent_qFind(apm::FPackage& package, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:apm.FPackage.c_pkgdep_parent.InAryQ
bool                 package_c_pkgdep_parent_InAryQ(apm::FPkgdep& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FPackage.c_pkgdep_parent.qLast
apm::FPkgdep&        c_pkgdep_parent_qLast(apm::FPackage& package) __attribute__((nothrow));

// Return true if index is empty
// func:apm.FPackage.zd_pkgrec.EmptyQ
bool                 zd_pkgrec_EmptyQ(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FPackage.zd_pkgrec.First
apm::FPkgrec*        zd_pkgrec_First(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FPackage.zd_pkgrec.InLlistQ
bool                 zd_pkgrec_InLlistQ(apm::FPkgrec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FPackage.zd_pkgrec.Insert
void                 zd_pkgrec_Insert(apm::FPackage& package, apm::FPkgrec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FPackage.zd_pkgrec.Last
apm::FPkgrec*        zd_pkgrec_Last(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FPackage.zd_pkgrec.N
i32                  zd_pkgrec_N(const apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FPackage.zd_pkgrec.Next
apm::FPkgrec*        zd_pkgrec_Next(apm::FPkgrec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FPackage.zd_pkgrec.Prev
apm::FPkgrec*        zd_pkgrec_Prev(apm::FPkgrec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FPackage.zd_pkgrec.Remove
void                 zd_pkgrec_Remove(apm::FPackage& package, apm::FPkgrec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FPackage.zd_pkgrec.RemoveAll
void                 zd_pkgrec_RemoveAll(apm::FPackage& package) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FPackage.zd_pkgrec.RemoveFirst
apm::FPkgrec*        zd_pkgrec_RemoveFirst(apm::FPackage& package) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FPackage.zd_pkgrec.qLast
apm::FPkgrec&        zd_pkgrec_qLast(apm::FPackage& package) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:apm.FPackage..Init
void                 FPackage_Init(apm::FPackage& package);
// cursor points to valid item
// func:apm.FPackage.zd_pkgkey_curs.Reset
void                 package_zd_pkgkey_curs_Reset(package_zd_pkgkey_curs &curs, apm::FPackage &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPackage.zd_pkgkey_curs.ValidQ
bool                 package_zd_pkgkey_curs_ValidQ(package_zd_pkgkey_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FPackage.zd_pkgkey_curs.Next
void                 package_zd_pkgkey_curs_Next(package_zd_pkgkey_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FPackage.zd_pkgkey_curs.Access
apm::FPkgkey&        package_zd_pkgkey_curs_Access(package_zd_pkgkey_curs &curs) __attribute__((nothrow));
// func:apm.FPackage.c_pkgdep_curs.Reset
void                 package_c_pkgdep_curs_Reset(package_c_pkgdep_curs &curs, apm::FPackage &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPackage.c_pkgdep_curs.ValidQ
bool                 package_c_pkgdep_curs_ValidQ(package_c_pkgdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FPackage.c_pkgdep_curs.Next
void                 package_c_pkgdep_curs_Next(package_c_pkgdep_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FPackage.c_pkgdep_curs.Access
apm::FPkgdep&        package_c_pkgdep_curs_Access(package_c_pkgdep_curs &curs) __attribute__((nothrow));
// func:apm.FPackage.c_pkgdep_parent_curs.Reset
void                 package_c_pkgdep_parent_curs_Reset(package_c_pkgdep_parent_curs &curs, apm::FPackage &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPackage.c_pkgdep_parent_curs.ValidQ
bool                 package_c_pkgdep_parent_curs_ValidQ(package_c_pkgdep_parent_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FPackage.c_pkgdep_parent_curs.Next
void                 package_c_pkgdep_parent_curs_Next(package_c_pkgdep_parent_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FPackage.c_pkgdep_parent_curs.Access
apm::FPkgdep&        package_c_pkgdep_parent_curs_Access(package_c_pkgdep_parent_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPackage.zd_pkgrec_curs.Reset
void                 package_zd_pkgrec_curs_Reset(package_zd_pkgrec_curs &curs, apm::FPackage &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPackage.zd_pkgrec_curs.ValidQ
bool                 package_zd_pkgrec_curs_ValidQ(package_zd_pkgrec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FPackage.zd_pkgrec_curs.Next
void                 package_zd_pkgrec_curs_Next(package_zd_pkgrec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FPackage.zd_pkgrec_curs.Access
apm::FPkgrec&        package_zd_pkgrec_curs_Access(package_zd_pkgrec_curs &curs) __attribute__((nothrow));
// func:apm.FPackage..Uninit
void                 FPackage_Uninit(apm::FPackage& package) __attribute__((nothrow));

// --- apm.FPkgdep
// create: apm.FDb.pkgdep (Lary)
// access: apm.FPackage.c_pkgdep (Ptrary)
// access: apm.FPackage.c_pkgdep_parent (Ptrary)
struct FPkgdep { // apm.FPkgdep
    algo::Smallstr100   pkgdep;                           //
    bool                soft;                             //   false  Soft dependency: affects package ordering but not forced update
    algo::Comment       comment;                          //
    apm::FPackage*      p_parent;                         // reference to parent row
    apm::FPackage*      p_package;                        // reference to parent row
    bool                package_c_pkgdep_in_ary;          //   false  membership flag
    bool                package_c_pkgdep_parent_in_ary;   //   false  membership flag
private:
    friend apm::FPkgdep&        pkgdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FPkgdep*        pkgdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 pkgdep_RemoveAll() __attribute__((nothrow));
    friend void                 pkgdep_RemoveLast() __attribute__((nothrow));
    FPkgdep();
    ~FPkgdep();
    FPkgdep(const FPkgdep&){ /*disallow copy constructor */}
    void operator =(const FPkgdep&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FPkgdep.base.CopyOut
void                 pkgdep_CopyOut(apm::FPkgdep &row, dev::Pkgdep &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FPkgdep.base.CopyIn
void                 pkgdep_CopyIn(apm::FPkgdep &row, dev::Pkgdep &in) __attribute__((nothrow));

// func:apm.FPkgdep.package.Get
algo::Smallstr50     package_Get(apm::FPkgdep& pkgdep) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FPkgdep.parent.Get
algo::Smallstr50     parent_Get(apm::FPkgdep& pkgdep) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:apm.FPkgdep..Init
void                 FPkgdep_Init(apm::FPkgdep& pkgdep);
// func:apm.FPkgdep..Uninit
void                 FPkgdep_Uninit(apm::FPkgdep& pkgdep) __attribute__((nothrow));

// --- apm.FPkgkey
// create: apm.FDb.pkgkey (Lary)
// global access: ind_pkgkey (Thash)
// access: apm.FPackage.zd_pkgkey (Llist)
// access: apm.FPkgrec.p_pkgkey (Upptr)
struct FPkgkey { // apm.FPkgkey
    apm::FPkgkey*       ind_pkgkey_next;   // hash next
    apm::FPkgkey*       zd_pkgkey_next;    // zslist link; -1 means not-in-list
    apm::FPkgkey*       zd_pkgkey_prev;    // previous element
    algo::Smallstr150   pkgkey;            //
    algo::Comment       comment;           //
    apm::FPkgrec**      c_pkgrec_elems;    // array of pointers
    u32                 c_pkgrec_n;        // array of pointers
    u32                 c_pkgrec_max;      // capacity of allocated array
private:
    friend apm::FPkgkey&        pkgkey_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FPkgkey*        pkgkey_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 pkgkey_RemoveAll() __attribute__((nothrow));
    friend void                 pkgkey_RemoveLast() __attribute__((nothrow));
    FPkgkey();
    ~FPkgkey();
    FPkgkey(const FPkgkey&){ /*disallow copy constructor */}
    void operator =(const FPkgkey&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FPkgkey.base.CopyOut
void                 pkgkey_CopyOut(apm::FPkgkey &row, dev::Pkgkey &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FPkgkey.base.CopyIn
void                 pkgkey_CopyIn(apm::FPkgkey &row, dev::Pkgkey &in) __attribute__((nothrow));

// func:apm.FPkgkey.package.Get
algo::Smallstr50     package_Get(apm::FPkgkey& pkgkey) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FPkgkey.key.Get
algo::Smallstr150    key_Get(apm::FPkgkey& pkgkey) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:apm.FPkgkey.c_pkgrec.EmptyQ
bool                 c_pkgrec_EmptyQ(apm::FPkgkey& pkgkey) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FPkgkey.c_pkgrec.Find
apm::FPkgrec*        c_pkgrec_Find(apm::FPkgkey& pkgkey, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FPkgkey.c_pkgrec.Getary
algo::aryptr<apm::FPkgrec*> c_pkgrec_Getary(apm::FPkgkey& pkgkey) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FPkgkey.c_pkgrec.Insert
void                 c_pkgrec_Insert(apm::FPkgkey& pkgkey, apm::FPkgrec& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:apm.FPkgkey.c_pkgrec.InsertMaybe
bool                 c_pkgrec_InsertMaybe(apm::FPkgkey& pkgkey, apm::FPkgrec& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FPkgkey.c_pkgrec.N
i32                  c_pkgrec_N(const apm::FPkgkey& pkgkey) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FPkgkey.c_pkgrec.Remove
void                 c_pkgrec_Remove(apm::FPkgkey& pkgkey, apm::FPkgrec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FPkgkey.c_pkgrec.RemoveAll
void                 c_pkgrec_RemoveAll(apm::FPkgkey& pkgkey) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FPkgkey.c_pkgrec.Reserve
void                 c_pkgrec_Reserve(apm::FPkgkey& pkgkey, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FPkgkey.c_pkgrec.qFind
apm::FPkgrec&        c_pkgrec_qFind(apm::FPkgkey& pkgkey, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:apm.FPkgkey.c_pkgrec.InAryQ
bool                 pkgkey_c_pkgrec_InAryQ(apm::FPkgrec& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FPkgkey.c_pkgrec.qLast
apm::FPkgrec&        c_pkgrec_qLast(apm::FPkgkey& pkgkey) __attribute__((nothrow));

// Set all fields to initial values.
// func:apm.FPkgkey..Init
void                 FPkgkey_Init(apm::FPkgkey& pkgkey);
// func:apm.FPkgkey.c_pkgrec_curs.Reset
void                 pkgkey_c_pkgrec_curs_Reset(pkgkey_c_pkgrec_curs &curs, apm::FPkgkey &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FPkgkey.c_pkgrec_curs.ValidQ
bool                 pkgkey_c_pkgrec_curs_ValidQ(pkgkey_c_pkgrec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FPkgkey.c_pkgrec_curs.Next
void                 pkgkey_c_pkgrec_curs_Next(pkgkey_c_pkgrec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FPkgkey.c_pkgrec_curs.Access
apm::FPkgrec&        pkgkey_c_pkgrec_curs_Access(pkgkey_c_pkgrec_curs &curs) __attribute__((nothrow));
// func:apm.FPkgkey..Uninit
void                 FPkgkey_Uninit(apm::FPkgkey& pkgkey) __attribute__((nothrow));

// --- apm.FPkgrec
// create: apm.FDb.pkgrec (Tpool)
// access: apm.FPackage.zd_pkgrec (Llist)
// access: apm.FPkgkey.c_pkgrec (Ptrary)
// access: apm.FRec.zd_rec_pkgrec (Llist)
struct FPkgrec { // apm.FPkgrec
    apm::FPkgrec*    pkgrec_next;              // Pointer to next free element int tpool
    apm::FPkgrec*    zd_pkgrec_next;           // zslist link; -1 means not-in-list
    apm::FPkgrec*    zd_pkgrec_prev;           // previous element
    apm::FPackage*   p_package;                // reference to parent row
    apm::FRec*       p_rec;                    // reference to parent row
    apm::FPkgkey*    p_pkgkey;                 // reference to parent row
    bool             pkgkey_c_pkgrec_in_ary;   //   false  membership flag
    apm::FPkgrec*    zd_rec_pkgrec_next;       // zslist link; -1 means not-in-list
    apm::FPkgrec*    zd_rec_pkgrec_prev;       // previous element
private:
    friend apm::FPkgrec&        pkgrec_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FPkgrec*        pkgrec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 pkgrec_Delete(apm::FPkgrec &row) __attribute__((nothrow));
    FPkgrec();
    ~FPkgrec();
    FPkgrec(const FPkgrec&){ /*disallow copy constructor */}
    void operator =(const FPkgrec&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
// func:apm.FPkgrec..Init
void                 FPkgrec_Init(apm::FPkgrec& pkgrec);
// func:apm.FPkgrec..Uninit
void                 FPkgrec_Uninit(apm::FPkgrec& pkgrec) __attribute__((nothrow));

// --- apm.FRec
// create: apm.FDb.rec (Tpool)
// global access: ind_rec (Thash)
// global access: zd_rec (Llist)
// global access: zd_selrec (Llist)
// global access: zd_chooserec (Llist)
// access: apm.FPkgrec.p_rec (Upptr)
// access: apm.FRec.c_child (Ptrary)
// access: apm.FSsimfile.zd_ssimfile_rec (Llist)
struct FRec { // apm.FRec
    apm::FRec*        rec_next;               // Pointer to next free element int tpool
    apm::FRec*        ind_rec_next;           // hash next
    apm::FRec*        zd_rec_next;            // zslist link; -1 means not-in-list
    apm::FRec*        zd_rec_prev;            // previous element
    apm::FRec*        zd_selrec_next;         // zslist link; -1 means not-in-list
    apm::FRec*        zd_selrec_prev;         // previous element
    apm::FRec*        zd_chooserec_next;      // zslist link; -1 means not-in-list
    apm::FRec*        zd_chooserec_prev;      // previous element
    algo::cstring     rec;                    // Primary key: ssimfile:pkey
    apm::FSsimfile*   p_ssimfile;             // reference to parent row
    algo::Tuple       tuple;                  // Original record from file
    apm::FRec**       c_child_elems;          // array of pointers
    u32               c_child_n;              // array of pointers
    u32               c_child_max;            // capacity of allocated array
    i32               level;                  //   0
    apm::FPkgrec*     zd_rec_pkgrec_head;     // zero-terminated doubly linked list
    i32               zd_rec_pkgrec_n;        // zero-terminated doubly linked list
    apm::FPkgrec*     zd_rec_pkgrec_tail;     // pointer to last element
    apm::FRec*        zd_ssimfile_rec_next;   // zslist link; -1 means not-in-list
    apm::FRec*        zd_ssimfile_rec_prev;   // previous element
private:
    friend apm::FRec&           rec_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FRec*           rec_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 rec_Delete(apm::FRec &row) __attribute__((nothrow));
    FRec();
    ~FRec();
    FRec(const FRec&){ /*disallow copy constructor */}
    void operator =(const FRec&){ /*disallow direct assignment */}
};

// Return true if index is empty
// func:apm.FRec.c_child.EmptyQ
bool                 c_child_EmptyQ(apm::FRec& rec) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:apm.FRec.c_child.Find
apm::FRec*           c_child_Find(apm::FRec& rec, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:apm.FRec.c_child.Getary
algo::aryptr<apm::FRec*> c_child_Getary(apm::FRec& rec) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:apm.FRec.c_child.Insert
void                 c_child_Insert(apm::FRec& rec, apm::FRec& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
// func:apm.FRec.c_child.ScanInsertMaybe
bool                 c_child_ScanInsertMaybe(apm::FRec& rec, apm::FRec& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:apm.FRec.c_child.N
i32                  c_child_N(const apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:apm.FRec.c_child.Remove
void                 c_child_Remove(apm::FRec& rec, apm::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FRec.c_child.RemoveAll
void                 c_child_RemoveAll(apm::FRec& rec) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:apm.FRec.c_child.Reserve
void                 c_child_Reserve(apm::FRec& rec, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:apm.FRec.c_child.qFind
apm::FRec&           c_child_qFind(apm::FRec& rec, u32 idx) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:apm.FRec.c_child.qLast
apm::FRec&           c_child_qLast(apm::FRec& rec) __attribute__((nothrow));

// Delete all elements in the linked list.
// func:apm.FRec.zd_rec_pkgrec.Cascdel
void                 zd_rec_pkgrec_Cascdel(apm::FRec& rec) __attribute__((nothrow));
// Return true if index is empty
// func:apm.FRec.zd_rec_pkgrec.EmptyQ
bool                 zd_rec_pkgrec_EmptyQ(apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FRec.zd_rec_pkgrec.First
apm::FPkgrec*        zd_rec_pkgrec_First(apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FRec.zd_rec_pkgrec.InLlistQ
bool                 zd_rec_pkgrec_InLlistQ(apm::FPkgrec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FRec.zd_rec_pkgrec.Insert
void                 zd_rec_pkgrec_Insert(apm::FRec& rec, apm::FPkgrec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FRec.zd_rec_pkgrec.Last
apm::FPkgrec*        zd_rec_pkgrec_Last(apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FRec.zd_rec_pkgrec.N
i32                  zd_rec_pkgrec_N(const apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FRec.zd_rec_pkgrec.Next
apm::FPkgrec*        zd_rec_pkgrec_Next(apm::FPkgrec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FRec.zd_rec_pkgrec.Prev
apm::FPkgrec*        zd_rec_pkgrec_Prev(apm::FPkgrec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FRec.zd_rec_pkgrec.Remove
void                 zd_rec_pkgrec_Remove(apm::FRec& rec, apm::FPkgrec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FRec.zd_rec_pkgrec.RemoveAll
void                 zd_rec_pkgrec_RemoveAll(apm::FRec& rec) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FRec.zd_rec_pkgrec.RemoveFirst
apm::FPkgrec*        zd_rec_pkgrec_RemoveFirst(apm::FRec& rec) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FRec.zd_rec_pkgrec.qLast
apm::FPkgrec&        zd_rec_pkgrec_qLast(apm::FRec& rec) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:apm.FRec..Init
void                 FRec_Init(apm::FRec& rec);
// func:apm.FRec.c_child_curs.Reset
void                 rec_c_child_curs_Reset(rec_c_child_curs &curs, apm::FRec &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FRec.c_child_curs.ValidQ
bool                 rec_c_child_curs_ValidQ(rec_c_child_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FRec.c_child_curs.Next
void                 rec_c_child_curs_Next(rec_c_child_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FRec.c_child_curs.Access
apm::FRec&           rec_c_child_curs_Access(rec_c_child_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FRec.zd_rec_pkgrec_curs.Reset
void                 rec_zd_rec_pkgrec_curs_Reset(rec_zd_rec_pkgrec_curs &curs, apm::FRec &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FRec.zd_rec_pkgrec_curs.ValidQ
bool                 rec_zd_rec_pkgrec_curs_ValidQ(rec_zd_rec_pkgrec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FRec.zd_rec_pkgrec_curs.Next
void                 rec_zd_rec_pkgrec_curs_Next(rec_zd_rec_pkgrec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FRec.zd_rec_pkgrec_curs.Access
apm::FPkgrec&        rec_zd_rec_pkgrec_curs_Access(rec_zd_rec_pkgrec_curs &curs) __attribute__((nothrow));
// func:apm.FRec..Uninit
void                 FRec_Uninit(apm::FRec& rec) __attribute__((nothrow));

// --- apm.FSsimfile
// create: apm.FDb.ssimfile (Lary)
// global access: ind_ssimfile (Thash)
// access: apm.FCtype.c_ssimfile (Ptr)
// access: apm.FRec.p_ssimfile (Upptr)
// access: apm.FSsimreq.p_child_ssimfile (Upptr)
struct FSsimfile { // apm.FSsimfile
    apm::FSsimfile*     ind_ssimfile_next;      // hash next
    algo::Smallstr50    ssimfile;               //
    algo::Smallstr100   ctype;                  //
    apm::FCtype*        p_ctype;                // reference to parent row
    apm::FRec*          zd_ssimfile_rec_head;   // zero-terminated doubly linked list
    i32                 zd_ssimfile_rec_n;      // zero-terminated doubly linked list
    apm::FRec*          zd_ssimfile_rec_tail;   // pointer to last element
private:
    friend apm::FSsimfile&      ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FSsimfile*      ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ssimfile_RemoveAll() __attribute__((nothrow));
    friend void                 ssimfile_RemoveLast() __attribute__((nothrow));
    FSsimfile();
    ~FSsimfile();
    FSsimfile(const FSsimfile&){ /*disallow copy constructor */}
    void operator =(const FSsimfile&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FSsimfile.base.CopyOut
void                 ssimfile_CopyOut(apm::FSsimfile &row, dmmeta::Ssimfile &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FSsimfile.base.CopyIn
void                 ssimfile_CopyIn(apm::FSsimfile &row, dmmeta::Ssimfile &in) __attribute__((nothrow));

// func:apm.FSsimfile.ssimns.Get
algo::Smallstr16     ssimns_Get(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimfile.ns.Get
algo::Smallstr16     ns_Get(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimfile.name.Get
algo::Smallstr50     name_Get(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:apm.FSsimfile.zd_ssimfile_rec.EmptyQ
bool                 zd_ssimfile_rec_EmptyQ(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:apm.FSsimfile.zd_ssimfile_rec.First
apm::FRec*           zd_ssimfile_rec_First(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:apm.FSsimfile.zd_ssimfile_rec.InLlistQ
bool                 zd_ssimfile_rec_InLlistQ(apm::FRec& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:apm.FSsimfile.zd_ssimfile_rec.Insert
void                 zd_ssimfile_rec_Insert(apm::FSsimfile& ssimfile, apm::FRec& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:apm.FSsimfile.zd_ssimfile_rec.Last
apm::FRec*           zd_ssimfile_rec_Last(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:apm.FSsimfile.zd_ssimfile_rec.N
i32                  zd_ssimfile_rec_N(const apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:apm.FSsimfile.zd_ssimfile_rec.Next
apm::FRec*           zd_ssimfile_rec_Next(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:apm.FSsimfile.zd_ssimfile_rec.Prev
apm::FRec*           zd_ssimfile_rec_Prev(apm::FRec &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:apm.FSsimfile.zd_ssimfile_rec.Remove
void                 zd_ssimfile_rec_Remove(apm::FSsimfile& ssimfile, apm::FRec& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:apm.FSsimfile.zd_ssimfile_rec.RemoveAll
void                 zd_ssimfile_rec_RemoveAll(apm::FSsimfile& ssimfile) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:apm.FSsimfile.zd_ssimfile_rec.RemoveFirst
apm::FRec*           zd_ssimfile_rec_RemoveFirst(apm::FSsimfile& ssimfile) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:apm.FSsimfile.zd_ssimfile_rec.qLast
apm::FRec&           zd_ssimfile_rec_qLast(apm::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:apm.FSsimfile..Init
void                 FSsimfile_Init(apm::FSsimfile& ssimfile);
// cursor points to valid item
// func:apm.FSsimfile.zd_ssimfile_rec_curs.Reset
void                 ssimfile_zd_ssimfile_rec_curs_Reset(ssimfile_zd_ssimfile_rec_curs &curs, apm::FSsimfile &parent) __attribute__((nothrow));
// cursor points to valid item
// func:apm.FSsimfile.zd_ssimfile_rec_curs.ValidQ
bool                 ssimfile_zd_ssimfile_rec_curs_ValidQ(ssimfile_zd_ssimfile_rec_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:apm.FSsimfile.zd_ssimfile_rec_curs.Next
void                 ssimfile_zd_ssimfile_rec_curs_Next(ssimfile_zd_ssimfile_rec_curs &curs) __attribute__((nothrow));
// item access
// func:apm.FSsimfile.zd_ssimfile_rec_curs.Access
apm::FRec&           ssimfile_zd_ssimfile_rec_curs_Access(ssimfile_zd_ssimfile_rec_curs &curs) __attribute__((nothrow));
// func:apm.FSsimfile..Uninit
void                 FSsimfile_Uninit(apm::FSsimfile& ssimfile) __attribute__((nothrow));

// --- apm.FSsimreq
// create: apm.FDb.ssimreq (Lary)
// access: apm.FCtype.c_ssimreq (Ptrary)
struct FSsimreq { // apm.FSsimreq
    algo::Smallstr100   ssimreq;                  //
    algo::Smallstr100   parent;                   //
    bool                reqchild;                 //   false
    bool                bidir;                    //   false
    algo::Comment       comment;                  //
    apm::FSsimfile*     p_child_ssimfile;         // reference to parent row
    apm::FCtype*        p_ctype;                  // reference to parent row
    apm::FField*        p_field;                  // reference to parent row
    algo_lib::Regx      regx_value;               //
    bool                exclude;                  //   false
    bool                ctype_c_ssimreq_in_ary;   //   false  membership flag
private:
    friend apm::FSsimreq&       ssimreq_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FSsimreq*       ssimreq_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ssimreq_RemoveAll() __attribute__((nothrow));
    friend void                 ssimreq_RemoveLast() __attribute__((nothrow));
    FSsimreq();
    ~FSsimreq();
    FSsimreq(const FSsimreq&){ /*disallow copy constructor */}
    void operator =(const FSsimreq&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FSsimreq.base.CopyOut
void                 ssimreq_CopyOut(apm::FSsimreq &row, dmmeta::Ssimreq &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FSsimreq.base.CopyIn
void                 ssimreq_CopyIn(apm::FSsimreq &row, dmmeta::Ssimreq &in) __attribute__((nothrow));

// func:apm.FSsimreq.parent_field.Get
algo::Smallstr100    parent_field_Get(apm::FSsimreq& ssimreq) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimreq.parent_ctype.Get
algo::Smallstr100    parent_ctype_Get(apm::FSsimreq& ssimreq) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimreq.value.Get
algo::Smallstr100    value_Get(apm::FSsimreq& ssimreq) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimreq.child_ssimfile.Get
algo::Smallstr50     child_ssimfile_Get(apm::FSsimreq& ssimreq) __attribute__((__warn_unused_result__, nothrow));

// func:apm.FSsimreq.child_key.Get
algo::Smallstr100    child_key_Get(apm::FSsimreq& ssimreq) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:apm.FSsimreq..Init
void                 FSsimreq_Init(apm::FSsimreq& ssimreq);
// func:apm.FSsimreq..Uninit
void                 FSsimreq_Uninit(apm::FSsimreq& ssimreq) __attribute__((nothrow));

// --- apm.FSubstr
// create: apm.FDb.substr (Lary)
// access: apm.FField.c_substr (Ptr)
struct FSubstr { // apm.FSubstr
    algo::Smallstr100   field;        //
    algo::CppExpr       expr;         //
    algo::Smallstr100   srcfield;     //
    apm::FField*        p_srcfield;   // reference to parent row
private:
    friend apm::FSubstr&        substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend apm::FSubstr*        substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 substr_RemoveAll() __attribute__((nothrow));
    friend void                 substr_RemoveLast() __attribute__((nothrow));
    FSubstr();
    ~FSubstr();
    FSubstr(const FSubstr&){ /*disallow copy constructor */}
    void operator =(const FSubstr&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:apm.FSubstr.base.CopyOut
void                 substr_CopyOut(apm::FSubstr &row, dmmeta::Substr &out) __attribute__((nothrow));
// Copy fields in to row
// func:apm.FSubstr.base.CopyIn
void                 substr_CopyIn(apm::FSubstr &row, dmmeta::Substr &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:apm.FSubstr..Init
void                 FSubstr_Init(apm::FSubstr& substr);
// func:apm.FSubstr..Uninit
void                 FSubstr_Uninit(apm::FSubstr& substr) __attribute__((nothrow));

// --- apm.FieldId
#pragma pack(push,1)
struct FieldId { // apm.FieldId: Field read helper
    i32   value;   //   -1
    inline operator apm_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(apm_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:apm.FieldId.value.GetEnum
apm_FieldIdEnum      value_GetEnum(const apm::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:apm.FieldId.value.SetEnum
void                 value_SetEnum(apm::FieldId& parent, apm_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:apm.FieldId.value.ToCstr
const char*          value_ToCstr(const apm::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:apm.FieldId.value.Print
void                 value_Print(const apm::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:apm.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(apm::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:apm.FieldId.value.SetStrptr
void                 value_SetStrptr(apm::FieldId& parent, algo::strptr rhs, apm_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:apm.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(apm::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of apm::FieldId from an ascii string.
// The format of the string is the format of the apm::FieldId's only field
// func:apm.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(apm::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:apm.FieldId..Init
void                 FieldId_Init(apm::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:apm.FieldId.String  printfmt:Raw
// func:apm.FieldId..Print
void                 FieldId_Print(apm::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- apm.TableId
struct TableId { // apm.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator apm_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(apm_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
// func:apm.TableId.value.GetEnum
apm_TableIdEnum      value_GetEnum(const apm::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:apm.TableId.value.SetEnum
void                 value_SetEnum(apm::TableId& parent, apm_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:apm.TableId.value.ToCstr
const char*          value_ToCstr(const apm::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:apm.TableId.value.Print
void                 value_Print(const apm::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:apm.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(apm::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:apm.TableId.value.SetStrptr
void                 value_SetStrptr(apm::TableId& parent, algo::strptr rhs, apm_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:apm.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(apm::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of apm::TableId from an ascii string.
// The format of the string is the format of the apm::TableId's only field
// func:apm.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(apm::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:apm.TableId..Init
void                 TableId_Init(apm::TableId& parent);
// print string representation of ROW to string STR
// cfmt:apm.TableId.String  printfmt:Raw
// func:apm.TableId..Print
void                 TableId_Print(apm::TableId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace apm { // gen:ns_curstext

struct ctype_c_field_curs {// fcurs:apm.FCtype.c_field/curs
    typedef apm::FField ChildType;
    apm::FField** elems;
    u32 n_elems;
    u32 index;
    ctype_c_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ctype_c_ssimreq_curs {// fcurs:apm.FCtype.c_ssimreq/curs
    typedef apm::FSsimreq ChildType;
    apm::FSsimreq** elems;
    u32 n_elems;
    u32 index;
    ctype_c_ssimreq_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_package_curs {// cursor
    typedef apm::FPackage ChildType;
    apm::FDb *parent;
    i64 index;
    _db_package_curs(){ parent=NULL; index=0; }
};


struct _db_zd_sel_package_curs {// fcurs:apm.FDb.zd_sel_package/curs
    typedef apm::FPackage ChildType;
    apm::FPackage* row;
    _db_zd_sel_package_curs() {
        row = NULL;
    }
};


struct _db_pkgkey_curs {// cursor
    typedef apm::FPkgkey ChildType;
    apm::FDb *parent;
    i64 index;
    _db_pkgkey_curs(){ parent=NULL; index=0; }
};


struct _db_pkgdep_curs {// cursor
    typedef apm::FPkgdep ChildType;
    apm::FDb *parent;
    i64 index;
    _db_pkgdep_curs(){ parent=NULL; index=0; }
};


struct _db_mergefile_curs {// cursor
    typedef apm::FMergefile ChildType;
    apm::FDb *parent;
    i64 index;
    _db_mergefile_curs(){ parent=NULL; index=0; }
};


struct _db_ctype_curs {// cursor
    typedef apm::FCtype ChildType;
    apm::FDb *parent;
    i64 index;
    _db_ctype_curs(){ parent=NULL; index=0; }
};


struct _db_field_curs {// cursor
    typedef apm::FField ChildType;
    apm::FDb *parent;
    i64 index;
    _db_field_curs(){ parent=NULL; index=0; }
};


struct _db_ssimfile_curs {// cursor
    typedef apm::FSsimfile ChildType;
    apm::FDb *parent;
    i64 index;
    _db_ssimfile_curs(){ parent=NULL; index=0; }
};


struct _db_zd_rec_curs {// fcurs:apm.FDb.zd_rec/curs
    typedef apm::FRec ChildType;
    apm::FRec* row;
    _db_zd_rec_curs() {
        row = NULL;
    }
};


struct _db_zd_selrec_curs {// fcurs:apm.FDb.zd_selrec/curs
    typedef apm::FRec ChildType;
    apm::FRec* row;
    _db_zd_selrec_curs() {
        row = NULL;
    }
};


struct _db_zd_chooserec_curs {// fcurs:apm.FDb.zd_chooserec/curs
    typedef apm::FRec ChildType;
    apm::FRec* row;
    _db_zd_chooserec_curs() {
        row = NULL;
    }
};


struct _db_zd_chooserec_delcurs {// fcurs:apm.FDb.zd_chooserec/delcurs
    typedef apm::FRec ChildType;
    apm::FRec* row;
    apm::FRec *next;
    _db_zd_chooserec_delcurs() {
        row = NULL;
        next = NULL;
    }
};


struct _db_substr_curs {// cursor
    typedef apm::FSubstr ChildType;
    apm::FDb *parent;
    i64 index;
    _db_substr_curs(){ parent=NULL; index=0; }
};


struct _db_zd_topo_package_curs {// fcurs:apm.FDb.zd_topo_package/curs
    typedef apm::FPackage ChildType;
    apm::FPackage* row;
    _db_zd_topo_package_curs() {
        row = NULL;
    }
};


struct _db_ssimreq_curs {// cursor
    typedef apm::FSsimreq ChildType;
    apm::FDb *parent;
    i64 index;
    _db_ssimreq_curs(){ parent=NULL; index=0; }
};


struct _db_mkdir_curs {// cursor
    typedef apm::FMkdir ChildType;
    apm::FDb *parent;
    i64 index;
    _db_mkdir_curs(){ parent=NULL; index=0; }
};


struct _db_ns_curs {// cursor
    typedef apm::FNs ChildType;
    apm::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};


struct package_zd_pkgkey_curs {// fcurs:apm.FPackage.zd_pkgkey/curs
    typedef apm::FPkgkey ChildType;
    apm::FPkgkey* row;
    package_zd_pkgkey_curs() {
        row = NULL;
    }
};


struct package_c_pkgdep_curs {// fcurs:apm.FPackage.c_pkgdep/curs
    typedef apm::FPkgdep ChildType;
    apm::FPkgdep** elems;
    u32 n_elems;
    u32 index;
    package_c_pkgdep_curs() { elems=NULL; n_elems=0; index=0; }
};


struct package_c_pkgdep_parent_curs {// fcurs:apm.FPackage.c_pkgdep_parent/curs
    typedef apm::FPkgdep ChildType;
    apm::FPkgdep** elems;
    u32 n_elems;
    u32 index;
    package_c_pkgdep_parent_curs() { elems=NULL; n_elems=0; index=0; }
};


struct package_zd_pkgrec_curs {// fcurs:apm.FPackage.zd_pkgrec/curs
    typedef apm::FPkgrec ChildType;
    apm::FPkgrec* row;
    package_zd_pkgrec_curs() {
        row = NULL;
    }
};


struct pkgkey_c_pkgrec_curs {// fcurs:apm.FPkgkey.c_pkgrec/curs
    typedef apm::FPkgrec ChildType;
    apm::FPkgrec** elems;
    u32 n_elems;
    u32 index;
    pkgkey_c_pkgrec_curs() { elems=NULL; n_elems=0; index=0; }
};


struct rec_c_child_curs {// fcurs:apm.FRec.c_child/curs
    typedef apm::FRec ChildType;
    apm::FRec** elems;
    u32 n_elems;
    u32 index;
    rec_c_child_curs() { elems=NULL; n_elems=0; index=0; }
};


struct rec_zd_rec_pkgrec_curs {// fcurs:apm.FRec.zd_rec_pkgrec/curs
    typedef apm::FPkgrec ChildType;
    apm::FPkgrec* row;
    rec_zd_rec_pkgrec_curs() {
        row = NULL;
    }
};


struct ssimfile_zd_ssimfile_rec_curs {// fcurs:apm.FSsimfile.zd_ssimfile_rec/curs
    typedef apm::FRec ChildType;
    apm::FRec* row;
    ssimfile_zd_ssimfile_rec_curs() {
        row = NULL;
    }
};

} // gen:ns_curstext
namespace apm { // gen:ns_func
} // gen:ns_func
// func:apm...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:apm...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const apm::trace &row);// cfmt:apm.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const apm::FMergefile &row);// cfmt:apm.FMergefile.String
inline algo::cstring &operator <<(algo::cstring &str, const apm::FieldId &row);// cfmt:apm.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const apm::TableId &row);// cfmt:apm.TableId.String
}
