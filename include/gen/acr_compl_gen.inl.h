//
// include/gen/acr_compl_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline acr_compl::Badness::Badness(u8                             in_badness
        ,const algo::strptr&            in_strkey)
    : badness(in_badness)
    , strkey(in_strkey)
{
}

inline bool acr_compl::Badness::operator ==(const acr_compl::Badness &rhs) const {
    return acr_compl::Badness_Eq(const_cast<acr_compl::Badness&>(*this),const_cast<acr_compl::Badness&>(rhs));
}

inline bool acr_compl::Badness::operator !=(const acr_compl::Badness &rhs) const {
    return !acr_compl::Badness_Eq(const_cast<acr_compl::Badness&>(*this),const_cast<acr_compl::Badness&>(rhs));
}

inline bool acr_compl::Badness::operator <(const acr_compl::Badness &rhs) const {
    return acr_compl::Badness_Lt(const_cast<acr_compl::Badness&>(*this),const_cast<acr_compl::Badness&>(rhs));
}

inline bool acr_compl::Badness::operator >(const acr_compl::Badness &rhs) const {
    return rhs < *this;
}

inline bool acr_compl::Badness::operator <=(const acr_compl::Badness &rhs) const {
    return !(rhs < *this);
}

inline bool acr_compl::Badness::operator >=(const acr_compl::Badness &rhs) const {
    return !(*this < rhs);
}
inline acr_compl::Badness::Badness() {
    acr_compl::Badness_Init(*this);
}


// --- acr_compl.Badness.badness.GetEnum
// Get value of field as enum type
inline acr_compl_BadnessEnum acr_compl::badness_GetEnum(const acr_compl::Badness& parent) {
    return acr_compl_BadnessEnum(parent.badness);
}

// --- acr_compl.Badness.badness.SetEnum
// Set value of field from enum type.
inline void acr_compl::badness_SetEnum(acr_compl::Badness& parent, acr_compl_BadnessEnum rhs) {
    parent.badness = u8(rhs);
}

// --- acr_compl.Badness.badness.Cast
inline acr_compl::Badness::operator acr_compl_BadnessEnum () const {
    return acr_compl_BadnessEnum((*this).badness);
}

// --- acr_compl.Badness..Lt
inline bool acr_compl::Badness_Lt(acr_compl::Badness & lhs, acr_compl::Badness & rhs) {
    return Badness_Cmp(lhs,rhs) < 0;
}

// --- acr_compl.Badness..Cmp
inline i32 acr_compl::Badness_Cmp(acr_compl::Badness & lhs, acr_compl::Badness & rhs) {
    i32 retval = 0;
    retval = u8_Cmp(lhs.badness, rhs.badness);
    if (retval != 0) {
        return retval;
    }
    retval = algo::cstring_Cmp(lhs.strkey, rhs.strkey);
    return retval;
}

// --- acr_compl.Badness..Init
// Set all fields to initial values.
inline void acr_compl::Badness_Init(acr_compl::Badness& parent) {
    parent.badness = u8(0);
}

// --- acr_compl.Badness..Eq
inline bool acr_compl::Badness_Eq(const acr_compl::Badness & lhs,const acr_compl::Badness & rhs) {
    bool retval = true;
    retval = u8_Eq(lhs.badness, rhs.badness);
    if (!retval) {
        return false;
    }
    retval = algo::cstring_Eq(lhs.strkey, rhs.strkey);
    return retval;
}

// --- acr_compl.Badness..Update
// Set value. Return true if new value is different from old value.
inline bool acr_compl::Badness_Update(acr_compl::Badness &lhs, acr_compl::Badness & rhs) {
    bool ret = !Badness_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}
inline acr_compl::Completion::Completion() {
    acr_compl::Completion_Init(*this);
}


// --- acr_compl.Completion..Init
// Set all fields to initial values.
inline void acr_compl::Completion_Init(acr_compl::Completion& parent) {
    parent.nospace = bool(false);
}
inline acr_compl::FAnonfld::FAnonfld() {
}

inline acr_compl::FAnonfld::~FAnonfld() {
    acr_compl::FAnonfld_Uninit(*this);
}

inline acr_compl::FArgvtype::FArgvtype() {
}

inline acr_compl::FArgvtype::~FArgvtype() {
    acr_compl::FArgvtype_Uninit(*this);
}

inline acr_compl::FCompletion::FCompletion() {
    acr_compl::FCompletion_Init(*this);
}

inline acr_compl::FCompletion::~FCompletion() {
    acr_compl::FCompletion_Uninit(*this);
}


// --- acr_compl.FCompletion.badness.Lt
// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
inline bool acr_compl::badness_Lt(acr_compl::FCompletion& completion, acr_compl::FCompletion &rhs) {
    return acr_compl::Badness_Lt(completion.badness,rhs.badness);
}

// --- acr_compl.FCompletion.badness.Cmp
// Compare two fields.
inline i32 acr_compl::badness_Cmp(acr_compl::FCompletion& completion, acr_compl::FCompletion &rhs) {
    i32 retval = 0;
    retval = acr_compl::Badness_Cmp(completion.badness, rhs.badness);
    return retval;
}

// --- acr_compl.FCompletion..Init
// Set all fields to initial values.
inline void acr_compl::FCompletion_Init(acr_compl::FCompletion& completion) {
    completion.nospace = bool(false);
    completion.field = NULL;
    completion.bh_completion_idx = -1; // (acr_compl.FDb.bh_completion) not-in-heap
}
inline acr_compl::FComplsource::FComplsource() {
}

inline acr_compl::FCtype::FCtype() {
    acr_compl::FCtype_Init(*this);
}

inline acr_compl::FCtype::~FCtype() {
    acr_compl::FCtype_Uninit(*this);
}


// --- acr_compl.FCtype.c_field.EmptyQ
// Return true if index is empty
inline bool acr_compl::c_field_EmptyQ(acr_compl::FCtype& ctype) {
    return ctype.c_field_n == 0;
}

// --- acr_compl.FCtype.c_field.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FField* acr_compl::c_field_Find(acr_compl::FCtype& ctype, u32 t) {
    acr_compl::FField *retval = NULL;
    u64 idx = t;
    u64 lim = ctype.c_field_n;
    if (idx < lim) {
        retval = ctype.c_field_elems[idx];
    }
    return retval;
}

// --- acr_compl.FCtype.c_field.Getary
// Return array of pointers
inline algo::aryptr<acr_compl::FField*> acr_compl::c_field_Getary(acr_compl::FCtype& ctype) {
    return algo::aryptr<acr_compl::FField*>(ctype.c_field_elems, ctype.c_field_n);
}

// --- acr_compl.FCtype.c_field.N
// Return number of items in the pointer array
inline i32 acr_compl::c_field_N(const acr_compl::FCtype& ctype) {
    return ctype.c_field_n;
}

// --- acr_compl.FCtype.c_field.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_compl::c_field_RemoveAll(acr_compl::FCtype& ctype) {
    for (u32 i = 0; i < ctype.c_field_n; i++) {
        // mark all elements as not-in-array
        ctype.c_field_elems[i]->ctype_c_field_in_ary = false;
    }
    ctype.c_field_n = 0;
}

// --- acr_compl.FCtype.c_ssimfile.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_ssimfile_InsertMaybe(acr_compl::FCtype& ctype, acr_compl::FSsimfile& row) {
    acr_compl::FSsimfile* ptr = ctype.c_ssimfile;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ctype.c_ssimfile = &row;
    }
    return retval;
}

// --- acr_compl.FCtype.c_ssimfile.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_ssimfile_Remove(acr_compl::FCtype& ctype, acr_compl::FSsimfile& row) {
    acr_compl::FSsimfile *ptr = ctype.c_ssimfile;
    if (LIKELY(ptr == &row)) {
        ctype.c_ssimfile = NULL;
    }
}

// --- acr_compl.FCtype.c_argvtype.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_argvtype_InsertMaybe(acr_compl::FCtype& ctype, acr_compl::FArgvtype& row) {
    acr_compl::FArgvtype* ptr = ctype.c_argvtype;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ctype.c_argvtype = &row;
    }
    return retval;
}

// --- acr_compl.FCtype.c_argvtype.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_argvtype_Remove(acr_compl::FCtype& ctype, acr_compl::FArgvtype& row) {
    acr_compl::FArgvtype *ptr = ctype.c_argvtype;
    if (LIKELY(ptr == &row)) {
        ctype.c_argvtype = NULL;
    }
}

// --- acr_compl.FCtype.c_field_curs.Reset
inline void acr_compl::ctype_c_field_curs_Reset(ctype_c_field_curs &curs, acr_compl::FCtype &parent) {
    curs.elems = parent.c_field_elems;
    curs.n_elems = parent.c_field_n;
    curs.index = 0;
}

// --- acr_compl.FCtype.c_field_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_compl.FCtype.c_field_curs.Next
// proceed to next item
inline void acr_compl::ctype_c_field_curs_Next(ctype_c_field_curs &curs) {
    curs.index++;
}

// --- acr_compl.FCtype.c_field_curs.Access
// item access
inline acr_compl::FField& acr_compl::ctype_c_field_curs_Access(ctype_c_field_curs &curs) {
    return *curs.elems[curs.index];
}

// --- acr_compl.FCtype..Init
// Set all fields to initial values.
inline void acr_compl::FCtype_Init(acr_compl::FCtype& ctype) {
    ctype.c_field_elems = NULL; // (acr_compl.FCtype.c_field)
    ctype.c_field_n = 0; // (acr_compl.FCtype.c_field)
    ctype.c_field_max = 0; // (acr_compl.FCtype.c_field)
    ctype.c_ssimfile = NULL;
    ctype.c_argvtype = NULL;
    ctype.ind_ctype_next = (acr_compl::FCtype*)-1; // (acr_compl.FDb.ind_ctype) not-in-hash
}
inline acr_compl::trace::trace() {
}


// --- acr_compl.FDb.word.EmptyQ
// Return true if index is empty
inline bool acr_compl::word_EmptyQ() {
    return _db.word_n == 0;
}

// --- acr_compl.FDb.word.Find
// Look up row by row id. Return NULL if out of range
inline algo::cstring* acr_compl::word_Find(u64 t) {
    u64 idx = t;
    u64 lim = _db.word_n;
    if (idx >= lim) return NULL;
    return _db.word_elems + idx;
}

// --- acr_compl.FDb.word.Getary
// Return array pointer by value
inline algo::aryptr<algo::cstring> acr_compl::word_Getary() {
    return algo::aryptr<algo::cstring>(_db.word_elems, _db.word_n);
}

// --- acr_compl.FDb.word.Last
// Return pointer to last element of array, or NULL if array is empty
inline algo::cstring* acr_compl::word_Last() {
    return word_Find(u64(_db.word_n-1));
}

// --- acr_compl.FDb.word.Max
// Return max. number of items in the array
inline i32 acr_compl::word_Max() {
    return _db.word_max;
}

// --- acr_compl.FDb.word.N
// Return number of items in the array
inline i32 acr_compl::word_N() {
    return _db.word_n;
}

// --- acr_compl.FDb.word.Reserve
// Make sure N *more* elements will fit in array. Process dies if out of memory
inline void acr_compl::word_Reserve(int n) {
    u32 new_n = _db.word_n + n;
    if (UNLIKELY(new_n > _db.word_max)) {
        word_AbsReserve(new_n);
    }
}

// --- acr_compl.FDb.word.qFind
// 'quick' Access row by row id. No bounds checking.
inline algo::cstring& acr_compl::word_qFind(u64 t) {
    return _db.word_elems[t];
}

// --- acr_compl.FDb.word.qLast
// Return reference to last element of array. No bounds checking
inline algo::cstring& acr_compl::word_qLast() {
    return word_qFind(u64(_db.word_n-1));
}

// --- acr_compl.FDb.word.rowid_Get
// Return row id of specified element
inline u64 acr_compl::word_rowid_Get(algo::cstring &elem) {
    u64 id = &elem - _db.word_elems;
    return u64(id);
}

// --- acr_compl.FDb.ctype.EmptyQ
// Return true if index is empty
inline bool acr_compl::ctype_EmptyQ() {
    return _db.ctype_n == 0;
}

// --- acr_compl.FDb.ctype.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FCtype* acr_compl::ctype_Find(u64 t) {
    acr_compl::FCtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ctype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ctype_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.ctype.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FCtype* acr_compl::ctype_Last() {
    return ctype_Find(u64(_db.ctype_n-1));
}

// --- acr_compl.FDb.ctype.N
// Return number of items in the pool
inline i32 acr_compl::ctype_N() {
    return _db.ctype_n;
}

// --- acr_compl.FDb.ctype.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FCtype& acr_compl::ctype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ctype_lary[bsr][index];
}

// --- acr_compl.FDb.ind_ctype.EmptyQ
// Return true if hash is empty
inline bool acr_compl::ind_ctype_EmptyQ() {
    return _db.ind_ctype_n == 0;
}

// --- acr_compl.FDb.ind_ctype.N
// Return number of items in the hash
inline i32 acr_compl::ind_ctype_N() {
    return _db.ind_ctype_n;
}

// --- acr_compl.FDb.field.EmptyQ
// Return true if index is empty
inline bool acr_compl::field_EmptyQ() {
    return _db.field_n == 0;
}

// --- acr_compl.FDb.field.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FField* acr_compl::field_Find(u64 t) {
    acr_compl::FField *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.field_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.field_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.field.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FField* acr_compl::field_Last() {
    return field_Find(u64(_db.field_n-1));
}

// --- acr_compl.FDb.field.N
// Return number of items in the pool
inline i32 acr_compl::field_N() {
    return _db.field_n;
}

// --- acr_compl.FDb.field.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FField& acr_compl::field_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.field_lary[bsr][index];
}

// --- acr_compl.FDb.ind_field.EmptyQ
// Return true if hash is empty
inline bool acr_compl::ind_field_EmptyQ() {
    return _db.ind_field_n == 0;
}

// --- acr_compl.FDb.ind_field.N
// Return number of items in the hash
inline i32 acr_compl::ind_field_N() {
    return _db.ind_field_n;
}

// --- acr_compl.FDb.ssimfile.EmptyQ
// Return true if index is empty
inline bool acr_compl::ssimfile_EmptyQ() {
    return _db.ssimfile_n == 0;
}

// --- acr_compl.FDb.ssimfile.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FSsimfile* acr_compl::ssimfile_Find(u64 t) {
    acr_compl::FSsimfile *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ssimfile_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ssimfile_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.ssimfile.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FSsimfile* acr_compl::ssimfile_Last() {
    return ssimfile_Find(u64(_db.ssimfile_n-1));
}

// --- acr_compl.FDb.ssimfile.N
// Return number of items in the pool
inline i32 acr_compl::ssimfile_N() {
    return _db.ssimfile_n;
}

// --- acr_compl.FDb.ssimfile.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FSsimfile& acr_compl::ssimfile_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ssimfile_lary[bsr][index];
}

// --- acr_compl.FDb.ind_ssimfile.EmptyQ
// Return true if hash is empty
inline bool acr_compl::ind_ssimfile_EmptyQ() {
    return _db.ind_ssimfile_n == 0;
}

// --- acr_compl.FDb.ind_ssimfile.N
// Return number of items in the hash
inline i32 acr_compl::ind_ssimfile_N() {
    return _db.ind_ssimfile_n;
}

// --- acr_compl.FDb.completion.EmptyQ
// Return true if index is empty
inline bool acr_compl::completion_EmptyQ() {
    return _db.completion_n == 0;
}

// --- acr_compl.FDb.completion.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FCompletion* acr_compl::completion_Find(u64 t) {
    acr_compl::FCompletion *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.completion_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.completion_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.completion.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FCompletion* acr_compl::completion_Last() {
    return completion_Find(u64(_db.completion_n-1));
}

// --- acr_compl.FDb.completion.N
// Return number of items in the pool
inline i32 acr_compl::completion_N() {
    return _db.completion_n;
}

// --- acr_compl.FDb.completion.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FCompletion& acr_compl::completion_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.completion_lary[bsr][index];
}

// --- acr_compl.FDb.anonfld.EmptyQ
// Return true if index is empty
inline bool acr_compl::anonfld_EmptyQ() {
    return _db.anonfld_n == 0;
}

// --- acr_compl.FDb.anonfld.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FAnonfld* acr_compl::anonfld_Find(u64 t) {
    acr_compl::FAnonfld *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.anonfld_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.anonfld_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.anonfld.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FAnonfld* acr_compl::anonfld_Last() {
    return anonfld_Find(u64(_db.anonfld_n-1));
}

// --- acr_compl.FDb.anonfld.N
// Return number of items in the pool
inline i32 acr_compl::anonfld_N() {
    return _db.anonfld_n;
}

// --- acr_compl.FDb.anonfld.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FAnonfld& acr_compl::anonfld_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.anonfld_lary[bsr][index];
}

// --- acr_compl.FDb.bh_completion.EmptyQ
// Return true if index is empty
inline bool acr_compl::bh_completion_EmptyQ() {
    return _db.bh_completion_n == 0;
}

// --- acr_compl.FDb.bh_completion.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_compl::FCompletion* acr_compl::bh_completion_First() {
    acr_compl::FCompletion *row = NULL;
    if (_db.bh_completion_n > 0) {
        row = _db.bh_completion_elems[0];
    }
    return row;
}

// --- acr_compl.FDb.bh_completion.InBheapQ
// Return true if row is in index, false otherwise
inline bool acr_compl::bh_completion_InBheapQ(acr_compl::FCompletion& row) {
    bool result = false;
    result = row.bh_completion_idx != -1;
    return result;
}

// --- acr_compl.FDb.bh_completion.N
// Return number of items in the heap
inline i32 acr_compl::bh_completion_N() {
    return _db.bh_completion_n;
}

// --- acr_compl.FDb.ns.EmptyQ
// Return true if index is empty
inline bool acr_compl::ns_EmptyQ() {
    return _db.ns_n == 0;
}

// --- acr_compl.FDb.ns.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FNs* acr_compl::ns_Find(u64 t) {
    acr_compl::FNs *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ns_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ns_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.ns.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FNs* acr_compl::ns_Last() {
    return ns_Find(u64(_db.ns_n-1));
}

// --- acr_compl.FDb.ns.N
// Return number of items in the pool
inline i32 acr_compl::ns_N() {
    return _db.ns_n;
}

// --- acr_compl.FDb.ns.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FNs& acr_compl::ns_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ns_lary[bsr][index];
}

// --- acr_compl.FDb.fconst.EmptyQ
// Return true if index is empty
inline bool acr_compl::fconst_EmptyQ() {
    return _db.fconst_n == 0;
}

// --- acr_compl.FDb.fconst.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFconst* acr_compl::fconst_Find(u64 t) {
    acr_compl::FFconst *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.fconst_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.fconst_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.fconst.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FFconst* acr_compl::fconst_Last() {
    return fconst_Find(u64(_db.fconst_n-1));
}

// --- acr_compl.FDb.fconst.N
// Return number of items in the pool
inline i32 acr_compl::fconst_N() {
    return _db.fconst_n;
}

// --- acr_compl.FDb.fconst.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FFconst& acr_compl::fconst_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.fconst_lary[bsr][index];
}

// --- acr_compl.FDb.fcmdline.EmptyQ
// Return true if index is empty
inline bool acr_compl::fcmdline_EmptyQ() {
    return _db.fcmdline_n == 0;
}

// --- acr_compl.FDb.fcmdline.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFcmdline* acr_compl::fcmdline_Find(u64 t) {
    acr_compl::FFcmdline *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.fcmdline_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.fcmdline_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.fcmdline.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FFcmdline* acr_compl::fcmdline_Last() {
    return fcmdline_Find(u64(_db.fcmdline_n-1));
}

// --- acr_compl.FDb.fcmdline.N
// Return number of items in the pool
inline i32 acr_compl::fcmdline_N() {
    return _db.fcmdline_n;
}

// --- acr_compl.FDb.fcmdline.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FFcmdline& acr_compl::fcmdline_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.fcmdline_lary[bsr][index];
}

// --- acr_compl.FDb.fflag.EmptyQ
// Return true if index is empty
inline bool acr_compl::fflag_EmptyQ() {
    return _db.fflag_n == 0;
}

// --- acr_compl.FDb.fflag.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFflag* acr_compl::fflag_Find(u64 t) {
    acr_compl::FFflag *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.fflag_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.fflag_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.fflag.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FFflag* acr_compl::fflag_Last() {
    return fflag_Find(u64(_db.fflag_n-1));
}

// --- acr_compl.FDb.fflag.N
// Return number of items in the pool
inline i32 acr_compl::fflag_N() {
    return _db.fflag_n;
}

// --- acr_compl.FDb.fflag.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FFflag& acr_compl::fflag_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.fflag_lary[bsr][index];
}

// --- acr_compl.FDb.zd_cmd_field.EmptyQ
// Return true if index is empty
inline bool acr_compl::zd_cmd_field_EmptyQ() {
    return _db.zd_cmd_field_head == NULL;
}

// --- acr_compl.FDb.zd_cmd_field.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_compl::FField* acr_compl::zd_cmd_field_First() {
    acr_compl::FField *row = NULL;
    row = _db.zd_cmd_field_head;
    return row;
}

// --- acr_compl.FDb.zd_cmd_field.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_compl::zd_cmd_field_InLlistQ(acr_compl::FField& row) {
    bool result = false;
    result = !(row.zd_cmd_field_next == (acr_compl::FField*)-1);
    return result;
}

// --- acr_compl.FDb.zd_cmd_field.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_compl::FField* acr_compl::zd_cmd_field_Last() {
    acr_compl::FField *row = NULL;
    row = _db.zd_cmd_field_tail;
    return row;
}

// --- acr_compl.FDb.zd_cmd_field.N
// Return number of items in the linked list
inline i32 acr_compl::zd_cmd_field_N() {
    return _db.zd_cmd_field_n;
}

// --- acr_compl.FDb.zd_cmd_field.Next
// Return pointer to next element in the list
inline acr_compl::FField* acr_compl::zd_cmd_field_Next(acr_compl::FField &row) {
    return row.zd_cmd_field_next;
}

// --- acr_compl.FDb.zd_cmd_field.Prev
// Return pointer to previous element in the list
inline acr_compl::FField* acr_compl::zd_cmd_field_Prev(acr_compl::FField &row) {
    return row.zd_cmd_field_prev;
}

// --- acr_compl.FDb.zd_cmd_field.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_compl::FField& acr_compl::zd_cmd_field_qLast() {
    acr_compl::FField *row = NULL;
    row = _db.zd_cmd_field_tail;
    return *row;
}

// --- acr_compl.FDb.ind_ns.EmptyQ
// Return true if hash is empty
inline bool acr_compl::ind_ns_EmptyQ() {
    return _db.ind_ns_n == 0;
}

// --- acr_compl.FDb.ind_ns.N
// Return number of items in the hash
inline i32 acr_compl::ind_ns_N() {
    return _db.ind_ns_n;
}

// --- acr_compl.FDb.ind_cmd_field_name.EmptyQ
// Return true if hash is empty
inline bool acr_compl::ind_cmd_field_name_EmptyQ() {
    return _db.ind_cmd_field_name_n == 0;
}

// --- acr_compl.FDb.ind_cmd_field_name.N
// Return number of items in the hash
inline i32 acr_compl::ind_cmd_field_name_N() {
    return _db.ind_cmd_field_name_n;
}

// --- acr_compl.FDb.argvtype.EmptyQ
// Return true if index is empty
inline bool acr_compl::argvtype_EmptyQ() {
    return _db.argvtype_n == 0;
}

// --- acr_compl.FDb.argvtype.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FArgvtype* acr_compl::argvtype_Find(u64 t) {
    acr_compl::FArgvtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.argvtype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.argvtype_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.argvtype.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FArgvtype* acr_compl::argvtype_Last() {
    return argvtype_Find(u64(_db.argvtype_n-1));
}

// --- acr_compl.FDb.argvtype.N
// Return number of items in the pool
inline i32 acr_compl::argvtype_N() {
    return _db.argvtype_n;
}

// --- acr_compl.FDb.argvtype.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FArgvtype& acr_compl::argvtype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.argvtype_lary[bsr][index];
}

// --- acr_compl.FDb.falias.EmptyQ
// Return true if index is empty
inline bool acr_compl::falias_EmptyQ() {
    return _db.falias_n == 0;
}

// --- acr_compl.FDb.falias.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFalias* acr_compl::falias_Find(u64 t) {
    acr_compl::FFalias *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.falias_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.falias_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.falias.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FFalias* acr_compl::falias_Last() {
    return falias_Find(u64(_db.falias_n-1));
}

// --- acr_compl.FDb.falias.N
// Return number of items in the pool
inline i32 acr_compl::falias_N() {
    return _db.falias_n;
}

// --- acr_compl.FDb.falias.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FFalias& acr_compl::falias_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.falias_lary[bsr][index];
}

// --- acr_compl.FDb.complsource.EmptyQ
// Return true if index is empty
inline bool acr_compl::complsource_EmptyQ() {
    return _db.complsource_n == 0;
}

// --- acr_compl.FDb.complsource.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FComplsource* acr_compl::complsource_Find(u64 t) {
    acr_compl::FComplsource *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.complsource_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.complsource_lary[bsr][index];
    }
    return retval;
}

// --- acr_compl.FDb.complsource.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_compl::FComplsource* acr_compl::complsource_Last() {
    return complsource_Find(u64(_db.complsource_n-1));
}

// --- acr_compl.FDb.complsource.N
// Return number of items in the pool
inline i32 acr_compl::complsource_N() {
    return _db.complsource_n;
}

// --- acr_compl.FDb.complsource.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_compl::FComplsource& acr_compl::complsource_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.complsource_lary[bsr][index];
}

// --- acr_compl.FDb.word_curs.Next
// proceed to next item
inline void acr_compl::_db_word_curs_Next(_db_word_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.word_curs.Reset
inline void acr_compl::_db_word_curs_Reset(_db_word_curs &curs, acr_compl::FDb &parent) {
    curs.elems = parent.word_elems;
    curs.n_elems = parent.word_n;
    curs.index = 0;
}

// --- acr_compl.FDb.word_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_word_curs_ValidQ(_db_word_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_compl.FDb.word_curs.Access
// item access
inline algo::cstring& acr_compl::_db_word_curs_Access(_db_word_curs &curs) {
    return curs.elems[curs.index];
}

// --- acr_compl.FDb.ctype_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_ctype_curs_Reset(_db_ctype_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.ctype_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_ctype_curs_ValidQ(_db_ctype_curs &curs) {
    return curs.index < _db.ctype_n;
}

// --- acr_compl.FDb.ctype_curs.Next
// proceed to next item
inline void acr_compl::_db_ctype_curs_Next(_db_ctype_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.ctype_curs.Access
// item access
inline acr_compl::FCtype& acr_compl::_db_ctype_curs_Access(_db_ctype_curs &curs) {
    return ctype_qFind(u64(curs.index));
}

// --- acr_compl.FDb.field_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_field_curs_Reset(_db_field_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.field_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_field_curs_ValidQ(_db_field_curs &curs) {
    return curs.index < _db.field_n;
}

// --- acr_compl.FDb.field_curs.Next
// proceed to next item
inline void acr_compl::_db_field_curs_Next(_db_field_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.field_curs.Access
// item access
inline acr_compl::FField& acr_compl::_db_field_curs_Access(_db_field_curs &curs) {
    return field_qFind(u64(curs.index));
}

// --- acr_compl.FDb.ssimfile_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.ssimfile_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs) {
    return curs.index < _db.ssimfile_n;
}

// --- acr_compl.FDb.ssimfile_curs.Next
// proceed to next item
inline void acr_compl::_db_ssimfile_curs_Next(_db_ssimfile_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.ssimfile_curs.Access
// item access
inline acr_compl::FSsimfile& acr_compl::_db_ssimfile_curs_Access(_db_ssimfile_curs &curs) {
    return ssimfile_qFind(u64(curs.index));
}

// --- acr_compl.FDb.completion_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_completion_curs_Reset(_db_completion_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.completion_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_completion_curs_ValidQ(_db_completion_curs &curs) {
    return curs.index < _db.completion_n;
}

// --- acr_compl.FDb.completion_curs.Next
// proceed to next item
inline void acr_compl::_db_completion_curs_Next(_db_completion_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.completion_curs.Access
// item access
inline acr_compl::FCompletion& acr_compl::_db_completion_curs_Access(_db_completion_curs &curs) {
    return completion_qFind(u64(curs.index));
}

// --- acr_compl.FDb.anonfld_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_anonfld_curs_Reset(_db_anonfld_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.anonfld_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_anonfld_curs_ValidQ(_db_anonfld_curs &curs) {
    return curs.index < _db.anonfld_n;
}

// --- acr_compl.FDb.anonfld_curs.Next
// proceed to next item
inline void acr_compl::_db_anonfld_curs_Next(_db_anonfld_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.anonfld_curs.Access
// item access
inline acr_compl::FAnonfld& acr_compl::_db_anonfld_curs_Access(_db_anonfld_curs &curs) {
    return anonfld_qFind(u64(curs.index));
}

// --- acr_compl.FDb.bh_completion_curs.Access
// Access current element. If not more elements, return NULL
inline acr_compl::FCompletion& acr_compl::_db_bh_completion_curs_Access(_db_bh_completion_curs &curs) {
    return *curs.temp_elems[0];
}

// --- acr_compl.FDb.bh_completion_curs.ValidQ
// Return true if Access() will return non-NULL.
inline bool acr_compl::_db_bh_completion_curs_ValidQ(_db_bh_completion_curs &curs) {
    return curs.temp_n > 0;
}

// --- acr_compl.FDb.ns_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_ns_curs_Reset(_db_ns_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.ns_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_ns_curs_ValidQ(_db_ns_curs &curs) {
    return curs.index < _db.ns_n;
}

// --- acr_compl.FDb.ns_curs.Next
// proceed to next item
inline void acr_compl::_db_ns_curs_Next(_db_ns_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.ns_curs.Access
// item access
inline acr_compl::FNs& acr_compl::_db_ns_curs_Access(_db_ns_curs &curs) {
    return ns_qFind(u64(curs.index));
}

// --- acr_compl.FDb.fconst_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_fconst_curs_Reset(_db_fconst_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.fconst_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_fconst_curs_ValidQ(_db_fconst_curs &curs) {
    return curs.index < _db.fconst_n;
}

// --- acr_compl.FDb.fconst_curs.Next
// proceed to next item
inline void acr_compl::_db_fconst_curs_Next(_db_fconst_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.fconst_curs.Access
// item access
inline acr_compl::FFconst& acr_compl::_db_fconst_curs_Access(_db_fconst_curs &curs) {
    return fconst_qFind(u64(curs.index));
}

// --- acr_compl.FDb.fcmdline_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_fcmdline_curs_Reset(_db_fcmdline_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.fcmdline_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_fcmdline_curs_ValidQ(_db_fcmdline_curs &curs) {
    return curs.index < _db.fcmdline_n;
}

// --- acr_compl.FDb.fcmdline_curs.Next
// proceed to next item
inline void acr_compl::_db_fcmdline_curs_Next(_db_fcmdline_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.fcmdline_curs.Access
// item access
inline acr_compl::FFcmdline& acr_compl::_db_fcmdline_curs_Access(_db_fcmdline_curs &curs) {
    return fcmdline_qFind(u64(curs.index));
}

// --- acr_compl.FDb.fflag_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_fflag_curs_Reset(_db_fflag_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.fflag_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_fflag_curs_ValidQ(_db_fflag_curs &curs) {
    return curs.index < _db.fflag_n;
}

// --- acr_compl.FDb.fflag_curs.Next
// proceed to next item
inline void acr_compl::_db_fflag_curs_Next(_db_fflag_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.fflag_curs.Access
// item access
inline acr_compl::FFflag& acr_compl::_db_fflag_curs_Access(_db_fflag_curs &curs) {
    return fflag_qFind(u64(curs.index));
}

// --- acr_compl.FDb.zd_cmd_field_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_zd_cmd_field_curs_Reset(_db_zd_cmd_field_curs &curs, acr_compl::FDb &parent) {
    curs.row = parent.zd_cmd_field_head;
}

// --- acr_compl.FDb.zd_cmd_field_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_zd_cmd_field_curs_ValidQ(_db_zd_cmd_field_curs &curs) {
    return curs.row != NULL;
}

// --- acr_compl.FDb.zd_cmd_field_curs.Next
// proceed to next item
inline void acr_compl::_db_zd_cmd_field_curs_Next(_db_zd_cmd_field_curs &curs) {
    acr_compl::FField *next = (*curs.row).zd_cmd_field_next;
    curs.row = next;
}

// --- acr_compl.FDb.zd_cmd_field_curs.Access
// item access
inline acr_compl::FField& acr_compl::_db_zd_cmd_field_curs_Access(_db_zd_cmd_field_curs &curs) {
    return *curs.row;
}

// --- acr_compl.FDb.argvtype_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_argvtype_curs_Reset(_db_argvtype_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.argvtype_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_argvtype_curs_ValidQ(_db_argvtype_curs &curs) {
    return curs.index < _db.argvtype_n;
}

// --- acr_compl.FDb.argvtype_curs.Next
// proceed to next item
inline void acr_compl::_db_argvtype_curs_Next(_db_argvtype_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.argvtype_curs.Access
// item access
inline acr_compl::FArgvtype& acr_compl::_db_argvtype_curs_Access(_db_argvtype_curs &curs) {
    return argvtype_qFind(u64(curs.index));
}

// --- acr_compl.FDb.falias_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_falias_curs_Reset(_db_falias_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.falias_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_falias_curs_ValidQ(_db_falias_curs &curs) {
    return curs.index < _db.falias_n;
}

// --- acr_compl.FDb.falias_curs.Next
// proceed to next item
inline void acr_compl::_db_falias_curs_Next(_db_falias_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.falias_curs.Access
// item access
inline acr_compl::FFalias& acr_compl::_db_falias_curs_Access(_db_falias_curs &curs) {
    return falias_qFind(u64(curs.index));
}

// --- acr_compl.FDb.complsource_curs.Reset
// cursor points to valid item
inline void acr_compl::_db_complsource_curs_Reset(_db_complsource_curs &curs, acr_compl::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_compl.FDb.complsource_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::_db_complsource_curs_ValidQ(_db_complsource_curs &curs) {
    return curs.index < _db.complsource_n;
}

// --- acr_compl.FDb.complsource_curs.Next
// proceed to next item
inline void acr_compl::_db_complsource_curs_Next(_db_complsource_curs &curs) {
    curs.index++;
}

// --- acr_compl.FDb.complsource_curs.Access
// item access
inline acr_compl::FComplsource& acr_compl::_db_complsource_curs_Access(_db_complsource_curs &curs) {
    return complsource_qFind(u64(curs.index));
}
inline acr_compl::FFalias::FFalias() {
    acr_compl::FFalias_Init(*this);
}

inline acr_compl::FFalias::~FFalias() {
    acr_compl::FFalias_Uninit(*this);
}


// --- acr_compl.FFalias..Init
// Set all fields to initial values.
inline void acr_compl::FFalias_Init(acr_compl::FFalias& falias) {
    falias.p_srcfield = NULL;
    falias.p_field = NULL;
}
inline acr_compl::FFcmdline::FFcmdline() {
    acr_compl::FFcmdline_Init(*this);
}

inline acr_compl::FFcmdline::~FFcmdline() {
    acr_compl::FFcmdline_Uninit(*this);
}


// --- acr_compl.FFcmdline..Init
// Set all fields to initial values.
inline void acr_compl::FFcmdline_Init(acr_compl::FFcmdline& fcmdline) {
    fcmdline.read = bool(true);
    fcmdline.p_field = NULL;
    fcmdline.p_basecmdline = NULL;
}
inline acr_compl::FFconst::FFconst() {
    acr_compl::FFconst_Init(*this);
}

inline acr_compl::FFconst::~FFconst() {
    acr_compl::FFconst_Uninit(*this);
}


// --- acr_compl.FFconst..Init
// Set all fields to initial values.
inline void acr_compl::FFconst_Init(acr_compl::FFconst& fconst) {
    fconst.field_c_fconst_in_ary = bool(false);
}
inline acr_compl::FFflag::FFflag() {
    acr_compl::FFflag_Init(*this);
}

inline acr_compl::FFflag::~FFflag() {
    acr_compl::FFflag_Uninit(*this);
}


// --- acr_compl.FFflag..Init
// Set all fields to initial values.
inline void acr_compl::FFflag_Init(acr_compl::FFflag& fflag) {
    fflag.cumulative = bool(false);
    fflag.emptyval = algo::strptr("");
}
inline acr_compl::FField::FField() {
    acr_compl::FField_Init(*this);
}

inline acr_compl::FField::~FField() {
    acr_compl::FField_Uninit(*this);
}


// --- acr_compl.FField.c_anonfld.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_anonfld_InsertMaybe(acr_compl::FField& field, acr_compl::FAnonfld& row) {
    acr_compl::FAnonfld* ptr = field.c_anonfld;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        field.c_anonfld = &row;
    }
    return retval;
}

// --- acr_compl.FField.c_anonfld.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_anonfld_Remove(acr_compl::FField& field, acr_compl::FAnonfld& row) {
    acr_compl::FAnonfld *ptr = field.c_anonfld;
    if (LIKELY(ptr == &row)) {
        field.c_anonfld = NULL;
    }
}

// --- acr_compl.FField.c_fconst.EmptyQ
// Return true if index is empty
inline bool acr_compl::c_fconst_EmptyQ(acr_compl::FField& field) {
    return field.c_fconst_n == 0;
}

// --- acr_compl.FField.c_fconst.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFconst* acr_compl::c_fconst_Find(acr_compl::FField& field, u32 t) {
    acr_compl::FFconst *retval = NULL;
    u64 idx = t;
    u64 lim = field.c_fconst_n;
    if (idx < lim) {
        retval = field.c_fconst_elems[idx];
    }
    return retval;
}

// --- acr_compl.FField.c_fconst.Getary
// Return array of pointers
inline algo::aryptr<acr_compl::FFconst*> acr_compl::c_fconst_Getary(acr_compl::FField& field) {
    return algo::aryptr<acr_compl::FFconst*>(field.c_fconst_elems, field.c_fconst_n);
}

// --- acr_compl.FField.c_fconst.N
// Return number of items in the pointer array
inline i32 acr_compl::c_fconst_N(const acr_compl::FField& field) {
    return field.c_fconst_n;
}

// --- acr_compl.FField.c_fconst.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_compl::c_fconst_RemoveAll(acr_compl::FField& field) {
    for (u32 i = 0; i < field.c_fconst_n; i++) {
        // mark all elements as not-in-array
        field.c_fconst_elems[i]->field_c_fconst_in_ary = false;
    }
    field.c_fconst_n = 0;
}

// --- acr_compl.FField.c_fflag.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_fflag_InsertMaybe(acr_compl::FField& field, acr_compl::FFflag& row) {
    acr_compl::FFflag* ptr = field.c_fflag;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        field.c_fflag = &row;
    }
    return retval;
}

// --- acr_compl.FField.c_fflag.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_fflag_Remove(acr_compl::FField& field, acr_compl::FFflag& row) {
    acr_compl::FFflag *ptr = field.c_fflag;
    if (LIKELY(ptr == &row)) {
        field.c_fflag = NULL;
    }
}

// --- acr_compl.FField.c_falias.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_falias_InsertMaybe(acr_compl::FField& field, acr_compl::FFalias& row) {
    acr_compl::FFalias* ptr = field.c_falias;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        field.c_falias = &row;
    }
    return retval;
}

// --- acr_compl.FField.c_falias.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_falias_Remove(acr_compl::FField& field, acr_compl::FFalias& row) {
    acr_compl::FFalias *ptr = field.c_falias;
    if (LIKELY(ptr == &row)) {
        field.c_falias = NULL;
    }
}

// --- acr_compl.FField.c_falias_srcfield.EmptyQ
// Return true if index is empty
inline bool acr_compl::c_falias_srcfield_EmptyQ(acr_compl::FField& field) {
    return field.c_falias_srcfield_n == 0;
}

// --- acr_compl.FField.c_falias_srcfield.Find
// Look up row by row id. Return NULL if out of range
inline acr_compl::FFalias* acr_compl::c_falias_srcfield_Find(acr_compl::FField& field, u32 t) {
    acr_compl::FFalias *retval = NULL;
    u64 idx = t;
    u64 lim = field.c_falias_srcfield_n;
    if (idx < lim) {
        retval = field.c_falias_srcfield_elems[idx];
    }
    return retval;
}

// --- acr_compl.FField.c_falias_srcfield.Getary
// Return array of pointers
inline algo::aryptr<acr_compl::FFalias*> acr_compl::c_falias_srcfield_Getary(acr_compl::FField& field) {
    return algo::aryptr<acr_compl::FFalias*>(field.c_falias_srcfield_elems, field.c_falias_srcfield_n);
}

// --- acr_compl.FField.c_falias_srcfield.N
// Return number of items in the pointer array
inline i32 acr_compl::c_falias_srcfield_N(const acr_compl::FField& field) {
    return field.c_falias_srcfield_n;
}

// --- acr_compl.FField.c_falias_srcfield.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_compl::c_falias_srcfield_RemoveAll(acr_compl::FField& field) {
    field.c_falias_srcfield_n = 0;
}

// --- acr_compl.FField.c_fconst_curs.Reset
inline void acr_compl::field_c_fconst_curs_Reset(field_c_fconst_curs &curs, acr_compl::FField &parent) {
    curs.elems = parent.c_fconst_elems;
    curs.n_elems = parent.c_fconst_n;
    curs.index = 0;
}

// --- acr_compl.FField.c_fconst_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::field_c_fconst_curs_ValidQ(field_c_fconst_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_compl.FField.c_fconst_curs.Next
// proceed to next item
inline void acr_compl::field_c_fconst_curs_Next(field_c_fconst_curs &curs) {
    curs.index++;
}

// --- acr_compl.FField.c_fconst_curs.Access
// item access
inline acr_compl::FFconst& acr_compl::field_c_fconst_curs_Access(field_c_fconst_curs &curs) {
    return *curs.elems[curs.index];
}

// --- acr_compl.FField.c_falias_srcfield_curs.Reset
inline void acr_compl::field_c_falias_srcfield_curs_Reset(field_c_falias_srcfield_curs &curs, acr_compl::FField &parent) {
    curs.elems = parent.c_falias_srcfield_elems;
    curs.n_elems = parent.c_falias_srcfield_n;
    curs.index = 0;
}

// --- acr_compl.FField.c_falias_srcfield_curs.ValidQ
// cursor points to valid item
inline bool acr_compl::field_c_falias_srcfield_curs_ValidQ(field_c_falias_srcfield_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_compl.FField.c_falias_srcfield_curs.Next
// proceed to next item
inline void acr_compl::field_c_falias_srcfield_curs_Next(field_c_falias_srcfield_curs &curs) {
    curs.index++;
}

// --- acr_compl.FField.c_falias_srcfield_curs.Access
// item access
inline acr_compl::FFalias& acr_compl::field_c_falias_srcfield_curs_Access(field_c_falias_srcfield_curs &curs) {
    return *curs.elems[curs.index];
}
inline acr_compl::FNs::FNs() {
    acr_compl::FNs_Init(*this);
}

inline acr_compl::FNs::~FNs() {
    acr_compl::FNs_Uninit(*this);
}


// --- acr_compl.FNs.c_fcmdline.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_compl::c_fcmdline_InsertMaybe(acr_compl::FNs& ns, acr_compl::FFcmdline& row) {
    acr_compl::FFcmdline* ptr = ns.c_fcmdline;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ns.c_fcmdline = &row;
    }
    return retval;
}

// --- acr_compl.FNs.c_fcmdline.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_compl::c_fcmdline_Remove(acr_compl::FNs& ns, acr_compl::FFcmdline& row) {
    acr_compl::FFcmdline *ptr = ns.c_fcmdline;
    if (LIKELY(ptr == &row)) {
        ns.c_fcmdline = NULL;
    }
}

// --- acr_compl.FNs..Init
// Set all fields to initial values.
inline void acr_compl::FNs_Init(acr_compl::FNs& ns) {
    ns.c_fcmdline = NULL;
    ns.ind_ns_next = (acr_compl::FNs*)-1; // (acr_compl.FDb.ind_ns) not-in-hash
}
inline acr_compl::FSsimfile::FSsimfile() {
    acr_compl::FSsimfile_Init(*this);
}

inline acr_compl::FSsimfile::~FSsimfile() {
    acr_compl::FSsimfile_Uninit(*this);
}


// --- acr_compl.FSsimfile..Init
// Set all fields to initial values.
inline void acr_compl::FSsimfile_Init(acr_compl::FSsimfile& ssimfile) {
    ssimfile.p_ctype = NULL;
    ssimfile.ind_ssimfile_next = (acr_compl::FSsimfile*)-1; // (acr_compl.FDb.ind_ssimfile) not-in-hash
}
inline acr_compl::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline acr_compl::FieldId::FieldId(acr_compl_FieldIdEnum arg) { this->value = i32(arg); }
inline acr_compl::FieldId::FieldId() {
    acr_compl::FieldId_Init(*this);
}


// --- acr_compl.FieldId.value.GetEnum
// Get value of field as enum type
inline acr_compl_FieldIdEnum acr_compl::value_GetEnum(const acr_compl::FieldId& parent) {
    return acr_compl_FieldIdEnum(parent.value);
}

// --- acr_compl.FieldId.value.SetEnum
// Set value of field from enum type.
inline void acr_compl::value_SetEnum(acr_compl::FieldId& parent, acr_compl_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- acr_compl.FieldId.value.Cast
inline acr_compl::FieldId::operator acr_compl_FieldIdEnum () const {
    return acr_compl_FieldIdEnum((*this).value);
}

// --- acr_compl.FieldId..Init
// Set all fields to initial values.
inline void acr_compl::FieldId_Init(acr_compl::FieldId& parent) {
    parent.value = i32(-1);
}
inline acr_compl::Shellqtype::Shellqtype(u8                             in_type)
    : type(in_type)
{
}
inline acr_compl::Shellqtype::Shellqtype(acr_compl_ShellqtypeEnum arg) { this->type = u8(arg); }
inline acr_compl::Shellqtype::Shellqtype() {
    acr_compl::Shellqtype_Init(*this);
}


// --- acr_compl.Shellqtype.type.GetEnum
// Get value of field as enum type
inline acr_compl_ShellqtypeEnum acr_compl::type_GetEnum(const acr_compl::Shellqtype& parent) {
    return acr_compl_ShellqtypeEnum(parent.type);
}

// --- acr_compl.Shellqtype.type.SetEnum
// Set value of field from enum type.
inline void acr_compl::type_SetEnum(acr_compl::Shellqtype& parent, acr_compl_ShellqtypeEnum rhs) {
    parent.type = u8(rhs);
}

// --- acr_compl.Shellqtype..Init
// Set all fields to initial values.
inline void acr_compl::Shellqtype_Init(acr_compl::Shellqtype& parent) {
    parent.type = u8(0);
}
inline acr_compl::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline acr_compl::TableId::TableId(acr_compl_TableIdEnum arg) { this->value = i32(arg); }
inline acr_compl::TableId::TableId() {
    acr_compl::TableId_Init(*this);
}


// --- acr_compl.TableId.value.GetEnum
// Get value of field as enum type
inline acr_compl_TableIdEnum acr_compl::value_GetEnum(const acr_compl::TableId& parent) {
    return acr_compl_TableIdEnum(parent.value);
}

// --- acr_compl.TableId.value.SetEnum
// Set value of field from enum type.
inline void acr_compl::value_SetEnum(acr_compl::TableId& parent, acr_compl_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- acr_compl.TableId.value.Cast
inline acr_compl::TableId::operator acr_compl_TableIdEnum () const {
    return acr_compl_TableIdEnum((*this).value);
}

// --- acr_compl.TableId..Init
// Set all fields to initial values.
inline void acr_compl::TableId_Init(acr_compl::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_compl::trace &row) {// cfmt:acr_compl.trace.String
    acr_compl::trace_Print(const_cast<acr_compl::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_compl::FField &row) {// cfmt:acr_compl.FField.String
    acr_compl::FField_Print(const_cast<acr_compl::FField&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_compl::FieldId &row) {// cfmt:acr_compl.FieldId.String
    acr_compl::FieldId_Print(const_cast<acr_compl::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_compl::TableId &row) {// cfmt:acr_compl.TableId.String
    acr_compl::TableId_Print(const_cast<acr_compl::TableId&>(row), str);
    return str;
}
