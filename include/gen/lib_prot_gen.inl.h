//
// include/gen/lib_prot_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
//#pragma endinclude

// --- lib_prot.FieldId.value.GetEnum
// Get value of field as enum type
inline lib_prot_FieldIdEnum lib_prot::value_GetEnum(const lib_prot::FieldId& parent) throw() {
    return lib_prot_FieldIdEnum(parent.value);
}

// --- lib_prot.FieldId.value.SetEnum
// Set value of field from enum type.
inline void lib_prot::value_SetEnum(lib_prot::FieldId& parent, lib_prot_FieldIdEnum rhs) throw() {
    parent.value = i32(rhs);
}

// --- lib_prot.FieldId.value.Cast
inline  lib_prot::FieldId::operator lib_prot_FieldIdEnum() const throw() {
    return lib_prot_FieldIdEnum((*this).value);
}

// --- lib_prot.FieldId..Init
// Set all fields to initial values.
inline void lib_prot::FieldId_Init(lib_prot::FieldId& parent) {
    parent.value = i32(-1);
}

// --- lib_prot.FieldId..Ctor
inline  lib_prot::FieldId::FieldId() throw() {
    lib_prot::FieldId_Init(*this);
}

// --- lib_prot.FieldId..FieldwiseCtor
inline  lib_prot::FieldId::FieldId(i32 in_value) throw()
    : value(in_value)
 {
}

// --- lib_prot.FieldId..EnumCtor
inline  lib_prot::FieldId::FieldId(lib_prot_FieldIdEnum arg) throw() {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_prot::FieldId &row) {// cfmt:lib_prot.FieldId.String
    lib_prot::FieldId_Print(const_cast<lib_prot::FieldId&>(row), str);
    return str;
}
