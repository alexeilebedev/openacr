//
// include/gen/gclidb_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude

// --- gclidb.FieldId.value.GetEnum
// Get value of field as enum type
inline gclidb_FieldIdEnum gclidb::value_GetEnum(const gclidb::FieldId& parent) {
    return gclidb_FieldIdEnum(parent.value);
}

// --- gclidb.FieldId.value.SetEnum
// Set value of field from enum type.
inline void gclidb::value_SetEnum(gclidb::FieldId& parent, gclidb_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- gclidb.FieldId.value.Cast
inline  gclidb::FieldId::operator gclidb_FieldIdEnum() const {
    return gclidb_FieldIdEnum((*this).value);
}

// --- gclidb.FieldId..Init
// Set all fields to initial values.
inline void gclidb::FieldId_Init(gclidb::FieldId& parent) {
    parent.value = i32(-1);
}

// --- gclidb.FieldId..Ctor
inline  gclidb::FieldId::FieldId() {
    gclidb::FieldId_Init(*this);
}

// --- gclidb.FieldId..FieldwiseCtor
inline  gclidb::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- gclidb.FieldId..EnumCtor
inline  gclidb::FieldId::FieldId(gclidb_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- gclidb.Gact..Ctor
inline  gclidb::Gact::Gact() {
}

// --- gclidb.Gatv..Ctor
inline  gclidb::Gatv::Gatv() {
}

// --- gclidb.Gclicmd..Ctor
inline  gclidb::Gclicmd::Gclicmd() {
}

// --- gclidb.Gclicmdf2j..Init
// Set all fields to initial values.
inline void gclidb::Gclicmdf2j_Init(gclidb::Gclicmdf2j& parent) {
    parent.dup = bool(false);
}

// --- gclidb.Gclicmdf2j..Ctor
inline  gclidb::Gclicmdf2j::Gclicmdf2j() {
    gclidb::Gclicmdf2j_Init(*this);
}

// --- gclidb.Gclicmdt..Init
// Set all fields to initial values.
inline void gclidb::Gclicmdt_Init(gclidb::Gclicmdt& parent) {
    parent.gmethod = algo::strptr("GET");
}

// --- gclidb.Gclicmdt..Ctor
inline  gclidb::Gclicmdt::Gclicmdt() {
    gclidb::Gclicmdt_Init(*this);
}

// --- gclidb.Gclienv..Ctor
inline  gclidb::Gclienv::Gclienv() {
}

// --- gclidb.Gclienvsub..Init
// Set all fields to initial values.
inline void gclidb::Gclienvsub_Init(gclidb::Gclienvsub& parent) {
    parent.fwd = bool(false);
    parent.rev = bool(false);
}

// --- gclidb.Gclienvsub..Ctor
inline  gclidb::Gclienvsub::Gclienvsub() {
    gclidb::Gclienvsub_Init(*this);
}

// --- gclidb.Gclisub..Ctor
inline  gclidb::Gclisub::Gclisub() {
}

// --- gclidb.Gfld..Ctor
inline  gclidb::Gfld::Gfld() {
}

// --- gclidb.Githost..Ctor
inline  gclidb::Githost::Githost() {
}

// --- gclidb.Gmethod..Init
// Set all fields to initial values.
inline void gclidb::Gmethod_Init(gclidb::Gmethod& parent) {
    parent.val = u32(0);
}

// --- gclidb.Gmethod..Ctor
inline  gclidb::Gmethod::Gmethod() {
    gclidb::Gmethod_Init(*this);
}

// --- gclidb.Grepo..Ctor
inline  gclidb::Grepo::Grepo() {
    gclidb::Grepo_Init(*this);
}

// --- gclidb.Grepogitport..Ctor
inline  gclidb::Grepogitport::Grepogitport() {
}

// --- gclidb.Grepossh..Ctor
inline  gclidb::Grepossh::Grepossh() {
}

// --- gclidb.Gstate..Ctor
inline  gclidb::Gstate::Gstate() {
}

// --- gclidb.Gstatet..Ctor
inline  gclidb::Gstatet::Gstatet() {
}

// --- gclidb.Gtbl..Ctor
inline  gclidb::Gtbl::Gtbl() {
}

// --- gclidb.Gtblact..Init
// Set all fields to initial values.
inline void gclidb::Gtblact_Init(gclidb::Gtblact& parent) {
    parent.t = bool(false);
    parent.e = bool(false);
    parent.auth = bool(false);
}

// --- gclidb.Gtblact..Ctor
inline  gclidb::Gtblact::Gtblact() {
    gclidb::Gtblact_Init(*this);
}

// --- gclidb.Gtblactfld..Init
// Set all fields to initial values.
inline void gclidb::Gtblactfld_Init(gclidb::Gtblactfld& parent) {
    parent.field_name_dflt = bool(false);
    parent.optional = bool(false);
    parent.regx = bool(false);
}

// --- gclidb.Gtblactfld..Ctor
inline  gclidb::Gtblactfld::Gtblactfld() {
    gclidb::Gtblactfld_Init(*this);
}

// --- gclidb.Gtblacttst..Init
// Set all fields to initial values.
inline void gclidb::Gtblacttst_Init(gclidb::Gtblacttst& parent) {
    parent.working = bool(true);
}

// --- gclidb.Gtblacttst..Ctor
inline  gclidb::Gtblacttst::Gtblacttst() {
    gclidb::Gtblacttst_Init(*this);
}

// --- gclidb.Gtblacttstout..Ctor
inline  gclidb::Gtblacttstout::Gtblacttstout() {
}

// --- gclidb.Gtype..Ctor
inline  gclidb::Gtype::Gtype() {
}

// --- gclidb.Gtypeh..Ctor
inline  gclidb::Gtypeh::Gtypeh() {
}

// --- gclidb.Gtypeprefix..Ctor
inline  gclidb::Gtypeprefix::Gtypeprefix() {
}

// --- gclidb.Issue..Ctor
inline  gclidb::Issue::Issue() {
}

// --- gclidb.Issuenote..Ctor
inline  gclidb::Issuenote::Issuenote() {
}

// --- gclidb.Issuepipeline..Ctor
inline  gclidb::Issuepipeline::Issuepipeline() {
}

// --- gclidb.Label..Ctor
inline  gclidb::Label::Label() {
}

// --- gclidb.Milestone..Ctor
inline  gclidb::Milestone::Milestone() {
}

// --- gclidb.Mr..Ctor
inline  gclidb::Mr::Mr() {
}

// --- gclidb.Mrjob..Ctor
inline  gclidb::Mrjob::Mrjob() {
}

// --- gclidb.Mrnote..Ctor
inline  gclidb::Mrnote::Mrnote() {
}

// --- gclidb.Project..Ctor
inline  gclidb::Project::Project() {
}

// --- gclidb.User..Init
// Set all fields to initial values.
inline void gclidb::User_Init(gclidb::User& parent) {
    parent.id = u32(0);
}

// --- gclidb.User..Ctor
inline  gclidb::User::User() {
    gclidb::User_Init(*this);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::FieldId &row) {// cfmt:gclidb.FieldId.String
    gclidb::FieldId_Print(const_cast<gclidb::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gact &row) {// cfmt:gclidb.Gact.String
    gclidb::Gact_Print(const_cast<gclidb::Gact&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gatv &row) {// cfmt:gclidb.Gatv.String
    gclidb::Gatv_Print(const_cast<gclidb::Gatv&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclicmd &row) {// cfmt:gclidb.Gclicmd.String
    gclidb::Gclicmd_Print(const_cast<gclidb::Gclicmd&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclicmdf2j &row) {// cfmt:gclidb.Gclicmdf2j.String
    gclidb::Gclicmdf2j_Print(const_cast<gclidb::Gclicmdf2j&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclicmdt &row) {// cfmt:gclidb.Gclicmdt.String
    gclidb::Gclicmdt_Print(const_cast<gclidb::Gclicmdt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclienv &row) {// cfmt:gclidb.Gclienv.String
    gclidb::Gclienv_Print(const_cast<gclidb::Gclienv&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclienvsub &row) {// cfmt:gclidb.Gclienvsub.String
    gclidb::Gclienvsub_Print(const_cast<gclidb::Gclienvsub&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gclisub &row) {// cfmt:gclidb.Gclisub.String
    gclidb::Gclisub_Print(const_cast<gclidb::Gclisub&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gfld &row) {// cfmt:gclidb.Gfld.String
    gclidb::Gfld_Print(const_cast<gclidb::Gfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gmethod &row) {// cfmt:gclidb.Gmethod.String
    gclidb::Gmethod_Print(const_cast<gclidb::Gmethod&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Grepo &row) {// cfmt:gclidb.Grepo.String
    gclidb::Grepo_Print(const_cast<gclidb::Grepo&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Grepogitport &row) {// cfmt:gclidb.Grepogitport.String
    gclidb::Grepogitport_Print(const_cast<gclidb::Grepogitport&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Grepossh &row) {// cfmt:gclidb.Grepossh.String
    gclidb::Grepossh_Print(const_cast<gclidb::Grepossh&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gstate &row) {// cfmt:gclidb.Gstate.String
    gclidb::Gstate_Print(const_cast<gclidb::Gstate&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gstatet &row) {// cfmt:gclidb.Gstatet.String
    gclidb::Gstatet_Print(const_cast<gclidb::Gstatet&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtbl &row) {// cfmt:gclidb.Gtbl.String
    gclidb::Gtbl_Print(const_cast<gclidb::Gtbl&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtblact &row) {// cfmt:gclidb.Gtblact.String
    gclidb::Gtblact_Print(const_cast<gclidb::Gtblact&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtblactfld &row) {// cfmt:gclidb.Gtblactfld.String
    gclidb::Gtblactfld_Print(const_cast<gclidb::Gtblactfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtblacttst &row) {// cfmt:gclidb.Gtblacttst.String
    gclidb::Gtblacttst_Print(const_cast<gclidb::Gtblacttst&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtblacttstout &row) {// cfmt:gclidb.Gtblacttstout.String
    gclidb::Gtblacttstout_Print(const_cast<gclidb::Gtblacttstout&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtype &row) {// cfmt:gclidb.Gtype.String
    gclidb::Gtype_Print(const_cast<gclidb::Gtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtypeh &row) {// cfmt:gclidb.Gtypeh.String
    gclidb::Gtypeh_Print(const_cast<gclidb::Gtypeh&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Gtypeprefix &row) {// cfmt:gclidb.Gtypeprefix.String
    gclidb::Gtypeprefix_Print(const_cast<gclidb::Gtypeprefix&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Issue &row) {// cfmt:gclidb.Issue.String
    gclidb::Issue_Print(const_cast<gclidb::Issue&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Issuenote &row) {// cfmt:gclidb.Issuenote.String
    gclidb::Issuenote_Print(const_cast<gclidb::Issuenote&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Issuepipeline &row) {// cfmt:gclidb.Issuepipeline.String
    gclidb::Issuepipeline_Print(const_cast<gclidb::Issuepipeline&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Label &row) {// cfmt:gclidb.Label.String
    gclidb::Label_Print(const_cast<gclidb::Label&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Milestone &row) {// cfmt:gclidb.Milestone.String
    gclidb::Milestone_Print(const_cast<gclidb::Milestone&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Mr &row) {// cfmt:gclidb.Mr.String
    gclidb::Mr_Print(const_cast<gclidb::Mr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Mrjob &row) {// cfmt:gclidb.Mrjob.String
    gclidb::Mrjob_Print(const_cast<gclidb::Mrjob&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::Mrnote &row) {// cfmt:gclidb.Mrnote.String
    gclidb::Mrnote_Print(const_cast<gclidb::Mrnote&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const gclidb::User &row) {// cfmt:gclidb.User.String
    gclidb::User_Print(const_cast<gclidb::User&>(row), str);
    return str;
}
