//
// include/gen/atf_comp_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/atfdb_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/report_gen.inl.h"
//#pragma endinclude
inline atf_comp::FComptest::FComptest() {
    atf_comp::FComptest_Init(*this);
}

inline atf_comp::FComptest::~FComptest() {
    atf_comp::FComptest_Uninit(*this);
}


// --- atf_comp.FComptest.c_targs.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool atf_comp::c_targs_InsertMaybe(atf_comp::FComptest& comptest, atf_comp::FTargs& row) {
    atf_comp::FTargs* ptr = comptest.c_targs;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        comptest.c_targs = &row;
    }
    return retval;
}

// --- atf_comp.FComptest.c_targs.Remove
// Remove element from index. If element is not in index, do nothing.
inline void atf_comp::c_targs_Remove(atf_comp::FComptest& comptest, atf_comp::FTargs& row) {
    atf_comp::FTargs *ptr = comptest.c_targs;
    if (LIKELY(ptr == &row)) {
        comptest.c_targs = NULL;
    }
}

// --- atf_comp.FComptest.c_tfilt.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool atf_comp::c_tfilt_InsertMaybe(atf_comp::FComptest& comptest, atf_comp::FTfilt& row) {
    atf_comp::FTfilt* ptr = comptest.c_tfilt;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        comptest.c_tfilt = &row;
    }
    return retval;
}

// --- atf_comp.FComptest.c_tfilt.Remove
// Remove element from index. If element is not in index, do nothing.
inline void atf_comp::c_tfilt_Remove(atf_comp::FComptest& comptest, atf_comp::FTfilt& row) {
    atf_comp::FTfilt *ptr = comptest.c_tfilt;
    if (LIKELY(ptr == &row)) {
        comptest.c_tfilt = NULL;
    }
}

// --- atf_comp.FComptest.zd_tmsg.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_tmsg_EmptyQ(atf_comp::FComptest& comptest) {
    return comptest.zd_tmsg_head == NULL;
}

// --- atf_comp.FComptest.zd_tmsg.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FTmsg* atf_comp::zd_tmsg_First(atf_comp::FComptest& comptest) {
    atf_comp::FTmsg *row = NULL;
    row = comptest.zd_tmsg_head;
    return row;
}

// --- atf_comp.FComptest.zd_tmsg.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_tmsg_InLlistQ(atf_comp::FTmsg& row) {
    bool result = false;
    result = !(row.zd_tmsg_next == (atf_comp::FTmsg*)-1);
    return result;
}

// --- atf_comp.FComptest.zd_tmsg.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FTmsg* atf_comp::zd_tmsg_Last(atf_comp::FComptest& comptest) {
    atf_comp::FTmsg *row = NULL;
    row = comptest.zd_tmsg_tail;
    return row;
}

// --- atf_comp.FComptest.zd_tmsg.N
// Return number of items in the linked list
inline i32 atf_comp::zd_tmsg_N(const atf_comp::FComptest& comptest) {
    return comptest.zd_tmsg_n;
}

// --- atf_comp.FComptest.zd_tmsg.Next
// Return pointer to next element in the list
inline atf_comp::FTmsg* atf_comp::zd_tmsg_Next(atf_comp::FTmsg &row) {
    return row.zd_tmsg_next;
}

// --- atf_comp.FComptest.zd_tmsg.Prev
// Return pointer to previous element in the list
inline atf_comp::FTmsg* atf_comp::zd_tmsg_Prev(atf_comp::FTmsg &row) {
    return row.zd_tmsg_prev;
}

// --- atf_comp.FComptest.zd_tmsg.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FTmsg& atf_comp::zd_tmsg_qLast(atf_comp::FComptest& comptest) {
    atf_comp::FTmsg *row = NULL;
    row = comptest.zd_tmsg_tail;
    return *row;
}

// --- atf_comp.FComptest.zd_tmsg_curs.Reset
// cursor points to valid item
inline void atf_comp::comptest_zd_tmsg_curs_Reset(comptest_zd_tmsg_curs &curs, atf_comp::FComptest &parent) {
    curs.row = parent.zd_tmsg_head;
}

// --- atf_comp.FComptest.zd_tmsg_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::comptest_zd_tmsg_curs_ValidQ(comptest_zd_tmsg_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FComptest.zd_tmsg_curs.Next
// proceed to next item
inline void atf_comp::comptest_zd_tmsg_curs_Next(comptest_zd_tmsg_curs &curs) {
    atf_comp::FTmsg *next = (*curs.row).zd_tmsg_next;
    curs.row = next;
}

// --- atf_comp.FComptest.zd_tmsg_curs.Access
// item access
inline atf_comp::FTmsg& atf_comp::comptest_zd_tmsg_curs_Access(comptest_zd_tmsg_curs &curs) {
    return *curs.row;
}
inline atf_comp::trace::trace() {
}


// --- atf_comp.FDb.comptest.EmptyQ
// Return true if index is empty
inline bool atf_comp::comptest_EmptyQ() {
    return _db.comptest_n == 0;
}

// --- atf_comp.FDb.comptest.Find
// Look up row by row id. Return NULL if out of range
inline atf_comp::FComptest* atf_comp::comptest_Find(u64 t) {
    atf_comp::FComptest *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.comptest_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.comptest_lary[bsr][index];
    }
    return retval;
}

// --- atf_comp.FDb.comptest.Last
// Return pointer to last element of array, or NULL if array is empty
inline atf_comp::FComptest* atf_comp::comptest_Last() {
    return comptest_Find(u64(_db.comptest_n-1));
}

// --- atf_comp.FDb.comptest.N
// Return number of items in the pool
inline i32 atf_comp::comptest_N() {
    return _db.comptest_n;
}

// --- atf_comp.FDb.comptest.qFind
// 'quick' Access row by row id. No bounds checking.
inline atf_comp::FComptest& atf_comp::comptest_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.comptest_lary[bsr][index];
}

// --- atf_comp.FDb.ind_comptest.EmptyQ
// Return true if hash is empty
inline bool atf_comp::ind_comptest_EmptyQ() {
    return _db.ind_comptest_n == 0;
}

// --- atf_comp.FDb.ind_comptest.N
// Return number of items in the hash
inline i32 atf_comp::ind_comptest_N() {
    return _db.ind_comptest_n;
}

// --- atf_comp.FDb.zd_sel_comptest.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_sel_comptest_EmptyQ() {
    return _db.zd_sel_comptest_head == NULL;
}

// --- atf_comp.FDb.zd_sel_comptest.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FComptest* atf_comp::zd_sel_comptest_First() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_sel_comptest_head;
    return row;
}

// --- atf_comp.FDb.zd_sel_comptest.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_sel_comptest_InLlistQ(atf_comp::FComptest& row) {
    bool result = false;
    result = !(row.zd_sel_comptest_next == (atf_comp::FComptest*)-1);
    return result;
}

// --- atf_comp.FDb.zd_sel_comptest.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FComptest* atf_comp::zd_sel_comptest_Last() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_sel_comptest_tail;
    return row;
}

// --- atf_comp.FDb.zd_sel_comptest.N
// Return number of items in the linked list
inline i32 atf_comp::zd_sel_comptest_N() {
    return _db.zd_sel_comptest_n;
}

// --- atf_comp.FDb.zd_sel_comptest.Next
// Return pointer to next element in the list
inline atf_comp::FComptest* atf_comp::zd_sel_comptest_Next(atf_comp::FComptest &row) {
    return row.zd_sel_comptest_next;
}

// --- atf_comp.FDb.zd_sel_comptest.Prev
// Return pointer to previous element in the list
inline atf_comp::FComptest* atf_comp::zd_sel_comptest_Prev(atf_comp::FComptest &row) {
    return row.zd_sel_comptest_prev;
}

// --- atf_comp.FDb.zd_sel_comptest.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FComptest& atf_comp::zd_sel_comptest_qLast() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_sel_comptest_tail;
    return *row;
}

// --- atf_comp.FDb.targs.EmptyQ
// Return true if index is empty
inline bool atf_comp::targs_EmptyQ() {
    return _db.targs_n == 0;
}

// --- atf_comp.FDb.targs.Find
// Look up row by row id. Return NULL if out of range
inline atf_comp::FTargs* atf_comp::targs_Find(u64 t) {
    atf_comp::FTargs *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.targs_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.targs_lary[bsr][index];
    }
    return retval;
}

// --- atf_comp.FDb.targs.Last
// Return pointer to last element of array, or NULL if array is empty
inline atf_comp::FTargs* atf_comp::targs_Last() {
    return targs_Find(u64(_db.targs_n-1));
}

// --- atf_comp.FDb.targs.N
// Return number of items in the pool
inline i32 atf_comp::targs_N() {
    return _db.targs_n;
}

// --- atf_comp.FDb.targs.qFind
// 'quick' Access row by row id. No bounds checking.
inline atf_comp::FTargs& atf_comp::targs_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.targs_lary[bsr][index];
}

// --- atf_comp.FDb.tfilt.EmptyQ
// Return true if index is empty
inline bool atf_comp::tfilt_EmptyQ() {
    return _db.tfilt_n == 0;
}

// --- atf_comp.FDb.tfilt.Find
// Look up row by row id. Return NULL if out of range
inline atf_comp::FTfilt* atf_comp::tfilt_Find(u64 t) {
    atf_comp::FTfilt *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.tfilt_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.tfilt_lary[bsr][index];
    }
    return retval;
}

// --- atf_comp.FDb.tfilt.Last
// Return pointer to last element of array, or NULL if array is empty
inline atf_comp::FTfilt* atf_comp::tfilt_Last() {
    return tfilt_Find(u64(_db.tfilt_n-1));
}

// --- atf_comp.FDb.tfilt.N
// Return number of items in the pool
inline i32 atf_comp::tfilt_N() {
    return _db.tfilt_n;
}

// --- atf_comp.FDb.tfilt.qFind
// 'quick' Access row by row id. No bounds checking.
inline atf_comp::FTfilt& atf_comp::tfilt_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.tfilt_lary[bsr][index];
}

// --- atf_comp.FDb.zd_run_comptest.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_run_comptest_EmptyQ() {
    return _db.zd_run_comptest_head == NULL;
}

// --- atf_comp.FDb.zd_run_comptest.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FComptest* atf_comp::zd_run_comptest_First() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_run_comptest_head;
    return row;
}

// --- atf_comp.FDb.zd_run_comptest.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_run_comptest_InLlistQ(atf_comp::FComptest& row) {
    bool result = false;
    result = !(row.zd_run_comptest_next == (atf_comp::FComptest*)-1);
    return result;
}

// --- atf_comp.FDb.zd_run_comptest.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FComptest* atf_comp::zd_run_comptest_Last() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_run_comptest_tail;
    return row;
}

// --- atf_comp.FDb.zd_run_comptest.N
// Return number of items in the linked list
inline i32 atf_comp::zd_run_comptest_N() {
    return _db.zd_run_comptest_n;
}

// --- atf_comp.FDb.zd_run_comptest.Next
// Return pointer to next element in the list
inline atf_comp::FComptest* atf_comp::zd_run_comptest_Next(atf_comp::FComptest &row) {
    return row.zd_run_comptest_next;
}

// --- atf_comp.FDb.zd_run_comptest.Prev
// Return pointer to previous element in the list
inline atf_comp::FComptest* atf_comp::zd_run_comptest_Prev(atf_comp::FComptest &row) {
    return row.zd_run_comptest_prev;
}

// --- atf_comp.FDb.zd_run_comptest.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FComptest& atf_comp::zd_run_comptest_qLast() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_run_comptest_tail;
    return *row;
}

// --- atf_comp.FDb.zd_out_tmsg.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_out_tmsg_EmptyQ() {
    return _db.zd_out_tmsg_head == NULL;
}

// --- atf_comp.FDb.zd_out_tmsg.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FTmsg* atf_comp::zd_out_tmsg_First() {
    atf_comp::FTmsg *row = NULL;
    row = _db.zd_out_tmsg_head;
    return row;
}

// --- atf_comp.FDb.zd_out_tmsg.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_out_tmsg_InLlistQ(atf_comp::FTmsg& row) {
    bool result = false;
    result = !(row.zd_out_tmsg_next == (atf_comp::FTmsg*)-1);
    return result;
}

// --- atf_comp.FDb.zd_out_tmsg.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FTmsg* atf_comp::zd_out_tmsg_Last() {
    atf_comp::FTmsg *row = NULL;
    row = _db.zd_out_tmsg_tail;
    return row;
}

// --- atf_comp.FDb.zd_out_tmsg.N
// Return number of items in the linked list
inline i32 atf_comp::zd_out_tmsg_N() {
    return _db.zd_out_tmsg_n;
}

// --- atf_comp.FDb.zd_out_tmsg.Next
// Return pointer to next element in the list
inline atf_comp::FTmsg* atf_comp::zd_out_tmsg_Next(atf_comp::FTmsg &row) {
    return row.zd_out_tmsg_next;
}

// --- atf_comp.FDb.zd_out_tmsg.Prev
// Return pointer to previous element in the list
inline atf_comp::FTmsg* atf_comp::zd_out_tmsg_Prev(atf_comp::FTmsg &row) {
    return row.zd_out_tmsg_prev;
}

// --- atf_comp.FDb.zd_out_tmsg.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FTmsg& atf_comp::zd_out_tmsg_qLast() {
    atf_comp::FTmsg *row = NULL;
    row = _db.zd_out_tmsg_tail;
    return *row;
}

// --- atf_comp.FDb.zd_out_comptest.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_out_comptest_EmptyQ() {
    return _db.zd_out_comptest_head == NULL;
}

// --- atf_comp.FDb.zd_out_comptest.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FComptest* atf_comp::zd_out_comptest_First() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_out_comptest_head;
    return row;
}

// --- atf_comp.FDb.zd_out_comptest.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_out_comptest_InLlistQ(atf_comp::FComptest& row) {
    bool result = false;
    result = !(row.zd_out_comptest_next == (atf_comp::FComptest*)-1);
    return result;
}

// --- atf_comp.FDb.zd_out_comptest.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FComptest* atf_comp::zd_out_comptest_Last() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_out_comptest_tail;
    return row;
}

// --- atf_comp.FDb.zd_out_comptest.N
// Return number of items in the linked list
inline i32 atf_comp::zd_out_comptest_N() {
    return _db.zd_out_comptest_n;
}

// --- atf_comp.FDb.zd_out_comptest.Next
// Return pointer to next element in the list
inline atf_comp::FComptest* atf_comp::zd_out_comptest_Next(atf_comp::FComptest &row) {
    return row.zd_out_comptest_next;
}

// --- atf_comp.FDb.zd_out_comptest.Prev
// Return pointer to previous element in the list
inline atf_comp::FComptest* atf_comp::zd_out_comptest_Prev(atf_comp::FComptest &row) {
    return row.zd_out_comptest_prev;
}

// --- atf_comp.FDb.zd_out_comptest.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FComptest& atf_comp::zd_out_comptest_qLast() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_out_comptest_tail;
    return *row;
}

// --- atf_comp.FDb.zd_out_tfilt.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_out_tfilt_EmptyQ() {
    return _db.zd_out_tfilt_head == NULL;
}

// --- atf_comp.FDb.zd_out_tfilt.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FTfilt* atf_comp::zd_out_tfilt_First() {
    atf_comp::FTfilt *row = NULL;
    row = _db.zd_out_tfilt_head;
    return row;
}

// --- atf_comp.FDb.zd_out_tfilt.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_out_tfilt_InLlistQ(atf_comp::FTfilt& row) {
    bool result = false;
    result = !(row.zd_out_tfilt_next == (atf_comp::FTfilt*)-1);
    return result;
}

// --- atf_comp.FDb.zd_out_tfilt.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FTfilt* atf_comp::zd_out_tfilt_Last() {
    atf_comp::FTfilt *row = NULL;
    row = _db.zd_out_tfilt_tail;
    return row;
}

// --- atf_comp.FDb.zd_out_tfilt.N
// Return number of items in the linked list
inline i32 atf_comp::zd_out_tfilt_N() {
    return _db.zd_out_tfilt_n;
}

// --- atf_comp.FDb.zd_out_tfilt.Next
// Return pointer to next element in the list
inline atf_comp::FTfilt* atf_comp::zd_out_tfilt_Next(atf_comp::FTfilt &row) {
    return row.zd_out_tfilt_next;
}

// --- atf_comp.FDb.zd_out_tfilt.Prev
// Return pointer to previous element in the list
inline atf_comp::FTfilt* atf_comp::zd_out_tfilt_Prev(atf_comp::FTfilt &row) {
    return row.zd_out_tfilt_prev;
}

// --- atf_comp.FDb.zd_out_tfilt.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FTfilt& atf_comp::zd_out_tfilt_qLast() {
    atf_comp::FTfilt *row = NULL;
    row = _db.zd_out_tfilt_tail;
    return *row;
}

// --- atf_comp.FDb.zd_out_targs.EmptyQ
// Return true if index is empty
inline bool atf_comp::zd_out_targs_EmptyQ() {
    return _db.zd_out_targs_head == NULL;
}

// --- atf_comp.FDb.zd_out_targs.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline atf_comp::FTargs* atf_comp::zd_out_targs_First() {
    atf_comp::FTargs *row = NULL;
    row = _db.zd_out_targs_head;
    return row;
}

// --- atf_comp.FDb.zd_out_targs.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool atf_comp::zd_out_targs_InLlistQ(atf_comp::FTargs& row) {
    bool result = false;
    result = !(row.zd_out_targs_next == (atf_comp::FTargs*)-1);
    return result;
}

// --- atf_comp.FDb.zd_out_targs.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline atf_comp::FTargs* atf_comp::zd_out_targs_Last() {
    atf_comp::FTargs *row = NULL;
    row = _db.zd_out_targs_tail;
    return row;
}

// --- atf_comp.FDb.zd_out_targs.N
// Return number of items in the linked list
inline i32 atf_comp::zd_out_targs_N() {
    return _db.zd_out_targs_n;
}

// --- atf_comp.FDb.zd_out_targs.Next
// Return pointer to next element in the list
inline atf_comp::FTargs* atf_comp::zd_out_targs_Next(atf_comp::FTargs &row) {
    return row.zd_out_targs_next;
}

// --- atf_comp.FDb.zd_out_targs.Prev
// Return pointer to previous element in the list
inline atf_comp::FTargs* atf_comp::zd_out_targs_Prev(atf_comp::FTargs &row) {
    return row.zd_out_targs_prev;
}

// --- atf_comp.FDb.zd_out_targs.qLast
// Return reference to last element in the index. No bounds checking.
inline atf_comp::FTargs& atf_comp::zd_out_targs_qLast() {
    atf_comp::FTargs *row = NULL;
    row = _db.zd_out_targs_tail;
    return *row;
}

// --- atf_comp.FDb.comptest_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_comptest_curs_Reset(_db_comptest_curs &curs, atf_comp::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- atf_comp.FDb.comptest_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_comptest_curs_ValidQ(_db_comptest_curs &curs) {
    return curs.index < _db.comptest_n;
}

// --- atf_comp.FDb.comptest_curs.Next
// proceed to next item
inline void atf_comp::_db_comptest_curs_Next(_db_comptest_curs &curs) {
    curs.index++;
}

// --- atf_comp.FDb.comptest_curs.Access
// item access
inline atf_comp::FComptest& atf_comp::_db_comptest_curs_Access(_db_comptest_curs &curs) {
    return comptest_qFind(u64(curs.index));
}

// --- atf_comp.FDb.zd_sel_comptest_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_sel_comptest_curs_Reset(_db_zd_sel_comptest_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_sel_comptest_head;
}

// --- atf_comp.FDb.zd_sel_comptest_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_sel_comptest_curs_ValidQ(_db_zd_sel_comptest_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_sel_comptest_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_sel_comptest_curs_Next(_db_zd_sel_comptest_curs &curs) {
    atf_comp::FComptest *next = (*curs.row).zd_sel_comptest_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_sel_comptest_curs.Access
// item access
inline atf_comp::FComptest& atf_comp::_db_zd_sel_comptest_curs_Access(_db_zd_sel_comptest_curs &curs) {
    return *curs.row;
}

// --- atf_comp.FDb.targs_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_targs_curs_Reset(_db_targs_curs &curs, atf_comp::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- atf_comp.FDb.targs_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_targs_curs_ValidQ(_db_targs_curs &curs) {
    return curs.index < _db.targs_n;
}

// --- atf_comp.FDb.targs_curs.Next
// proceed to next item
inline void atf_comp::_db_targs_curs_Next(_db_targs_curs &curs) {
    curs.index++;
}

// --- atf_comp.FDb.targs_curs.Access
// item access
inline atf_comp::FTargs& atf_comp::_db_targs_curs_Access(_db_targs_curs &curs) {
    return targs_qFind(u64(curs.index));
}

// --- atf_comp.FDb.tfilt_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_tfilt_curs_Reset(_db_tfilt_curs &curs, atf_comp::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- atf_comp.FDb.tfilt_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_tfilt_curs_ValidQ(_db_tfilt_curs &curs) {
    return curs.index < _db.tfilt_n;
}

// --- atf_comp.FDb.tfilt_curs.Next
// proceed to next item
inline void atf_comp::_db_tfilt_curs_Next(_db_tfilt_curs &curs) {
    curs.index++;
}

// --- atf_comp.FDb.tfilt_curs.Access
// item access
inline atf_comp::FTfilt& atf_comp::_db_tfilt_curs_Access(_db_tfilt_curs &curs) {
    return tfilt_qFind(u64(curs.index));
}

// --- atf_comp.FDb.zd_run_comptest_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_run_comptest_curs_Reset(_db_zd_run_comptest_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_run_comptest_head;
}

// --- atf_comp.FDb.zd_run_comptest_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_run_comptest_curs_ValidQ(_db_zd_run_comptest_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_run_comptest_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_run_comptest_curs_Next(_db_zd_run_comptest_curs &curs) {
    atf_comp::FComptest *next = (*curs.row).zd_run_comptest_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_run_comptest_curs.Access
// item access
inline atf_comp::FComptest& atf_comp::_db_zd_run_comptest_curs_Access(_db_zd_run_comptest_curs &curs) {
    return *curs.row;
}

// --- atf_comp.FDb.zd_out_tmsg_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_out_tmsg_curs_Reset(_db_zd_out_tmsg_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_out_tmsg_head;
}

// --- atf_comp.FDb.zd_out_tmsg_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_out_tmsg_curs_ValidQ(_db_zd_out_tmsg_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_out_tmsg_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_out_tmsg_curs_Next(_db_zd_out_tmsg_curs &curs) {
    atf_comp::FTmsg *next = (*curs.row).zd_out_tmsg_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_out_tmsg_curs.Access
// item access
inline atf_comp::FTmsg& atf_comp::_db_zd_out_tmsg_curs_Access(_db_zd_out_tmsg_curs &curs) {
    return *curs.row;
}

// --- atf_comp.FDb.zd_out_comptest_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_out_comptest_curs_Reset(_db_zd_out_comptest_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_out_comptest_head;
}

// --- atf_comp.FDb.zd_out_comptest_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_out_comptest_curs_ValidQ(_db_zd_out_comptest_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_out_comptest_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_out_comptest_curs_Next(_db_zd_out_comptest_curs &curs) {
    atf_comp::FComptest *next = (*curs.row).zd_out_comptest_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_out_comptest_curs.Access
// item access
inline atf_comp::FComptest& atf_comp::_db_zd_out_comptest_curs_Access(_db_zd_out_comptest_curs &curs) {
    return *curs.row;
}

// --- atf_comp.FDb.zd_out_tfilt_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_out_tfilt_curs_Reset(_db_zd_out_tfilt_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_out_tfilt_head;
}

// --- atf_comp.FDb.zd_out_tfilt_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_out_tfilt_curs_ValidQ(_db_zd_out_tfilt_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_out_tfilt_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_out_tfilt_curs_Next(_db_zd_out_tfilt_curs &curs) {
    atf_comp::FTfilt *next = (*curs.row).zd_out_tfilt_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_out_tfilt_curs.Access
// item access
inline atf_comp::FTfilt& atf_comp::_db_zd_out_tfilt_curs_Access(_db_zd_out_tfilt_curs &curs) {
    return *curs.row;
}

// --- atf_comp.FDb.zd_out_targs_curs.Reset
// cursor points to valid item
inline void atf_comp::_db_zd_out_targs_curs_Reset(_db_zd_out_targs_curs &curs, atf_comp::FDb &parent) {
    curs.row = parent.zd_out_targs_head;
}

// --- atf_comp.FDb.zd_out_targs_curs.ValidQ
// cursor points to valid item
inline bool atf_comp::_db_zd_out_targs_curs_ValidQ(_db_zd_out_targs_curs &curs) {
    return curs.row != NULL;
}

// --- atf_comp.FDb.zd_out_targs_curs.Next
// proceed to next item
inline void atf_comp::_db_zd_out_targs_curs_Next(_db_zd_out_targs_curs &curs) {
    atf_comp::FTargs *next = (*curs.row).zd_out_targs_next;
    curs.row = next;
}

// --- atf_comp.FDb.zd_out_targs_curs.Access
// item access
inline atf_comp::FTargs& atf_comp::_db_zd_out_targs_curs_Access(_db_zd_out_targs_curs &curs) {
    return *curs.row;
}
inline atf_comp::FTargs::FTargs() {
    atf_comp::FTargs_Init(*this);
}

inline atf_comp::FTargs::~FTargs() {
    atf_comp::FTargs_Uninit(*this);
}


// --- atf_comp.FTargs..Init
// Set all fields to initial values.
inline void atf_comp::FTargs_Init(atf_comp::FTargs& targs) {
    targs.zd_out_targs_next = (atf_comp::FTargs*)-1; // (atf_comp.FDb.zd_out_targs) not-in-list
    targs.zd_out_targs_prev = NULL; // (atf_comp.FDb.zd_out_targs)
}
inline atf_comp::FTfilt::FTfilt() {
    atf_comp::FTfilt_Init(*this);
}

inline atf_comp::FTfilt::~FTfilt() {
    atf_comp::FTfilt_Uninit(*this);
}


// --- atf_comp.FTfilt..Init
// Set all fields to initial values.
inline void atf_comp::FTfilt_Init(atf_comp::FTfilt& tfilt) {
    tfilt.zd_out_tfilt_next = (atf_comp::FTfilt*)-1; // (atf_comp.FDb.zd_out_tfilt) not-in-list
    tfilt.zd_out_tfilt_prev = NULL; // (atf_comp.FDb.zd_out_tfilt)
}
inline atf_comp::FTmsg::FTmsg() {
    atf_comp::FTmsg_Init(*this);
}

inline atf_comp::FTmsg::~FTmsg() {
    atf_comp::FTmsg_Uninit(*this);
}


// --- atf_comp.FTmsg..Init
// Set all fields to initial values.
inline void atf_comp::FTmsg_Init(atf_comp::FTmsg& tmsg) {
    tmsg.istuple = bool(false);
    tmsg.zd_tmsg_next = (atf_comp::FTmsg*)-1; // (atf_comp.FComptest.zd_tmsg) not-in-list
    tmsg.zd_tmsg_prev = NULL; // (atf_comp.FComptest.zd_tmsg)
    tmsg.tmsg_next = (atf_comp::FTmsg*)-1; // (atf_comp.FDb.tmsg) not-in-tpool's freelist
    tmsg.zd_out_tmsg_next = (atf_comp::FTmsg*)-1; // (atf_comp.FDb.zd_out_tmsg) not-in-list
    tmsg.zd_out_tmsg_prev = NULL; // (atf_comp.FDb.zd_out_tmsg)
}
inline atf_comp::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline atf_comp::FieldId::FieldId(atf_comp_FieldIdEnum arg) { this->value = i32(arg); }
inline atf_comp::FieldId::FieldId() {
    atf_comp::FieldId_Init(*this);
}


// --- atf_comp.FieldId.value.GetEnum
// Get value of field as enum type
inline atf_comp_FieldIdEnum atf_comp::value_GetEnum(const atf_comp::FieldId& parent) {
    return atf_comp_FieldIdEnum(parent.value);
}

// --- atf_comp.FieldId.value.SetEnum
// Set value of field from enum type.
inline void atf_comp::value_SetEnum(atf_comp::FieldId& parent, atf_comp_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- atf_comp.FieldId.value.Cast
inline atf_comp::FieldId::operator atf_comp_FieldIdEnum () const {
    return atf_comp_FieldIdEnum((*this).value);
}

// --- atf_comp.FieldId..Init
// Set all fields to initial values.
inline void atf_comp::FieldId_Init(atf_comp::FieldId& parent) {
    parent.value = i32(-1);
}
inline atf_comp::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline atf_comp::TableId::TableId(atf_comp_TableIdEnum arg) { this->value = i32(arg); }
inline atf_comp::TableId::TableId() {
    atf_comp::TableId_Init(*this);
}


// --- atf_comp.TableId.value.GetEnum
// Get value of field as enum type
inline atf_comp_TableIdEnum atf_comp::value_GetEnum(const atf_comp::TableId& parent) {
    return atf_comp_TableIdEnum(parent.value);
}

// --- atf_comp.TableId.value.SetEnum
// Set value of field from enum type.
inline void atf_comp::value_SetEnum(atf_comp::TableId& parent, atf_comp_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- atf_comp.TableId.value.Cast
inline atf_comp::TableId::operator atf_comp_TableIdEnum () const {
    return atf_comp_TableIdEnum((*this).value);
}

// --- atf_comp.TableId..Init
// Set all fields to initial values.
inline void atf_comp::TableId_Init(atf_comp::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_comp::trace &row) {// cfmt:atf_comp.trace.String
    atf_comp::trace_Print(const_cast<atf_comp::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_comp::FieldId &row) {// cfmt:atf_comp.FieldId.String
    atf_comp::FieldId_Print(const_cast<atf_comp::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_comp::TableId &row) {// cfmt:atf_comp.TableId.String
    atf_comp::TableId_Print(const_cast<atf_comp::TableId&>(row), str);
    return str;
}
