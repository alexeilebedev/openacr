//
// include/gen/atf_fuzz_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/atfdb_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.inl.h"
//#pragma endinclude

// --- atf_fuzz.trace..Ctor
inline  atf_fuzz::trace::trace() {
}

// --- atf_fuzz.FDb.fuzzstrat.EmptyQ
// Return true if index is empty
inline bool atf_fuzz::fuzzstrat_EmptyQ() {
    return _db.fuzzstrat_n == 0;
}

// --- atf_fuzz.FDb.fuzzstrat.Find
// Look up row by row id. Return NULL if out of range
inline atf_fuzz::FFuzzstrat* atf_fuzz::fuzzstrat_Find(u64 t) {
    atf_fuzz::FFuzzstrat *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.fuzzstrat_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.fuzzstrat_lary[bsr][index];
    }
    return retval;
}

// --- atf_fuzz.FDb.fuzzstrat.Last
// Return pointer to last element of array, or NULL if array is empty
inline atf_fuzz::FFuzzstrat* atf_fuzz::fuzzstrat_Last() {
    return fuzzstrat_Find(u64(_db.fuzzstrat_n-1));
}

// --- atf_fuzz.FDb.fuzzstrat.N
// Return number of items in the pool
inline i32 atf_fuzz::fuzzstrat_N() {
    return _db.fuzzstrat_n;
}

// --- atf_fuzz.FDb.fuzzstrat.qFind
// 'quick' Access row by row id. No bounds checking.
inline atf_fuzz::FFuzzstrat& atf_fuzz::fuzzstrat_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.fuzzstrat_lary[bsr][index];
}

// --- atf_fuzz.FDb.target.EmptyQ
// Return true if index is empty
inline bool atf_fuzz::target_EmptyQ() {
    return _db.target_n == 0;
}

// --- atf_fuzz.FDb.target.Find
// Look up row by row id. Return NULL if out of range
inline atf_fuzz::FTarget* atf_fuzz::target_Find(u64 t) {
    atf_fuzz::FTarget *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.target_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.target_lary[bsr][index];
    }
    return retval;
}

// --- atf_fuzz.FDb.target.Last
// Return pointer to last element of array, or NULL if array is empty
inline atf_fuzz::FTarget* atf_fuzz::target_Last() {
    return target_Find(u64(_db.target_n-1));
}

// --- atf_fuzz.FDb.target.N
// Return number of items in the pool
inline i32 atf_fuzz::target_N() {
    return _db.target_n;
}

// --- atf_fuzz.FDb.target.qFind
// 'quick' Access row by row id. No bounds checking.
inline atf_fuzz::FTarget& atf_fuzz::target_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.target_lary[bsr][index];
}

// --- atf_fuzz.FDb.ind_target.EmptyQ
// Return true if hash is empty
inline bool atf_fuzz::ind_target_EmptyQ() {
    return _db.ind_target_n == 0;
}

// --- atf_fuzz.FDb.ind_target.N
// Return number of items in the hash
inline i32 atf_fuzz::ind_target_N() {
    return _db.ind_target_n;
}

// --- atf_fuzz.FDb.fuzzstrat_curs.Reset
// cursor points to valid item
inline void atf_fuzz::_db_fuzzstrat_curs_Reset(_db_fuzzstrat_curs &curs, atf_fuzz::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- atf_fuzz.FDb.fuzzstrat_curs.ValidQ
// cursor points to valid item
inline bool atf_fuzz::_db_fuzzstrat_curs_ValidQ(_db_fuzzstrat_curs &curs) {
    return curs.index < _db.fuzzstrat_n;
}

// --- atf_fuzz.FDb.fuzzstrat_curs.Next
// proceed to next item
inline void atf_fuzz::_db_fuzzstrat_curs_Next(_db_fuzzstrat_curs &curs) {
    curs.index++;
}

// --- atf_fuzz.FDb.fuzzstrat_curs.Access
// item access
inline atf_fuzz::FFuzzstrat& atf_fuzz::_db_fuzzstrat_curs_Access(_db_fuzzstrat_curs &curs) {
    return fuzzstrat_qFind(u64(curs.index));
}

// --- atf_fuzz.FDb.target_curs.Reset
// cursor points to valid item
inline void atf_fuzz::_db_target_curs_Reset(_db_target_curs &curs, atf_fuzz::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- atf_fuzz.FDb.target_curs.ValidQ
// cursor points to valid item
inline bool atf_fuzz::_db_target_curs_ValidQ(_db_target_curs &curs) {
    return curs.index < _db.target_n;
}

// --- atf_fuzz.FDb.target_curs.Next
// proceed to next item
inline void atf_fuzz::_db_target_curs_Next(_db_target_curs &curs) {
    curs.index++;
}

// --- atf_fuzz.FDb.target_curs.Access
// item access
inline atf_fuzz::FTarget& atf_fuzz::_db_target_curs_Access(_db_target_curs &curs) {
    return target_qFind(u64(curs.index));
}

// --- atf_fuzz.FFuzzstrat.step.Call
// Invoke function by pointer
inline void atf_fuzz::step_Call(atf_fuzz::FFuzzstrat& fuzzstrat) {
    if (fuzzstrat.step) {
        fuzzstrat.step();
    }
}

// --- atf_fuzz.FFuzzstrat..Init
// Set all fields to initial values.
inline void atf_fuzz::FFuzzstrat_Init(atf_fuzz::FFuzzstrat& fuzzstrat) {
    fuzzstrat.step = NULL;
}

// --- atf_fuzz.FFuzzstrat..Ctor
inline  atf_fuzz::FFuzzstrat::FFuzzstrat() {
    atf_fuzz::FFuzzstrat_Init(*this);
}

// --- atf_fuzz.FTarget..Init
// Set all fields to initial values.
inline void atf_fuzz::FTarget_Init(atf_fuzz::FTarget& target) {
    target.ind_target_next = (atf_fuzz::FTarget*)-1; // (atf_fuzz.FDb.ind_target) not-in-hash
}

// --- atf_fuzz.FTarget..Ctor
inline  atf_fuzz::FTarget::FTarget() {
    atf_fuzz::FTarget_Init(*this);
}

// --- atf_fuzz.FTarget..Dtor
inline  atf_fuzz::FTarget::~FTarget() {
    atf_fuzz::FTarget_Uninit(*this);
}

// --- atf_fuzz.FieldId.value.GetEnum
// Get value of field as enum type
inline atf_fuzz_FieldIdEnum atf_fuzz::value_GetEnum(const atf_fuzz::FieldId& parent) {
    return atf_fuzz_FieldIdEnum(parent.value);
}

// --- atf_fuzz.FieldId.value.SetEnum
// Set value of field from enum type.
inline void atf_fuzz::value_SetEnum(atf_fuzz::FieldId& parent, atf_fuzz_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- atf_fuzz.FieldId.value.Cast
inline  atf_fuzz::FieldId::operator atf_fuzz_FieldIdEnum() const {
    return atf_fuzz_FieldIdEnum((*this).value);
}

// --- atf_fuzz.FieldId..Init
// Set all fields to initial values.
inline void atf_fuzz::FieldId_Init(atf_fuzz::FieldId& parent) {
    parent.value = i32(-1);
}

// --- atf_fuzz.FieldId..Ctor
inline  atf_fuzz::FieldId::FieldId() {
    atf_fuzz::FieldId_Init(*this);
}

// --- atf_fuzz.FieldId..FieldwiseCtor
inline  atf_fuzz::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- atf_fuzz.FieldId..EnumCtor
inline  atf_fuzz::FieldId::FieldId(atf_fuzz_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- atf_fuzz.TableId.value.GetEnum
// Get value of field as enum type
inline atf_fuzz_TableIdEnum atf_fuzz::value_GetEnum(const atf_fuzz::TableId& parent) {
    return atf_fuzz_TableIdEnum(parent.value);
}

// --- atf_fuzz.TableId.value.SetEnum
// Set value of field from enum type.
inline void atf_fuzz::value_SetEnum(atf_fuzz::TableId& parent, atf_fuzz_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- atf_fuzz.TableId.value.Cast
inline  atf_fuzz::TableId::operator atf_fuzz_TableIdEnum() const {
    return atf_fuzz_TableIdEnum((*this).value);
}

// --- atf_fuzz.TableId..Init
// Set all fields to initial values.
inline void atf_fuzz::TableId_Init(atf_fuzz::TableId& parent) {
    parent.value = i32(-1);
}

// --- atf_fuzz.TableId..Ctor
inline  atf_fuzz::TableId::TableId() {
    atf_fuzz::TableId_Init(*this);
}

// --- atf_fuzz.TableId..FieldwiseCtor
inline  atf_fuzz::TableId::TableId(i32 in_value)
    : value(in_value)
 {
}

// --- atf_fuzz.TableId..EnumCtor
inline  atf_fuzz::TableId::TableId(atf_fuzz_TableIdEnum arg) {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_fuzz::trace &row) {// cfmt:atf_fuzz.trace.String
    atf_fuzz::trace_Print(const_cast<atf_fuzz::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_fuzz::FieldId &row) {// cfmt:atf_fuzz.FieldId.String
    atf_fuzz::FieldId_Print(const_cast<atf_fuzz::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf_fuzz::TableId &row) {// cfmt:atf_fuzz.TableId.String
    atf_fuzz::TableId_Print(const_cast<atf_fuzz::TableId&>(row), str);
    return str;
}
