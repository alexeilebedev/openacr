//
// include/gen/atf_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline atf::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline atf::FieldId::FieldId(atf_FieldIdEnum arg) { this->value = i32(arg); }
inline atf::FieldId::FieldId() {
    atf::FieldId_Init(*this);
}


// --- atf.FieldId.value.GetEnum
// Get value of field as enum type
inline atf_FieldIdEnum atf::value_GetEnum(const atf::FieldId& parent) {
    return atf_FieldIdEnum(parent.value);
}

// --- atf.FieldId.value.SetEnum
// Set value of field from enum type.
inline void atf::value_SetEnum(atf::FieldId& parent, atf_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- atf.FieldId.value.Cast
inline atf::FieldId::operator atf_FieldIdEnum () const {
    return atf_FieldIdEnum((*this).value);
}

// --- atf.FieldId..Init
// Set all fields to initial values.
inline void atf::FieldId_Init(atf::FieldId& parent) {
    parent.value = i32(-1);
}
inline atf::Protocol::Protocol() {
}

inline atf::Testresult::Testresult(u32                            in_value)
    : value(in_value)
{
}
inline atf::Testresult::Testresult(atf_TestresultEnum arg) { this->value = u32(arg); }
inline atf::Testresult::Testresult() {
    atf::Testresult_Init(*this);
}


// --- atf.Testresult.value.GetEnum
// Get value of field as enum type
inline atf_TestresultEnum atf::value_GetEnum(const atf::Testresult& parent) {
    return atf_TestresultEnum(parent.value);
}

// --- atf.Testresult.value.SetEnum
// Set value of field from enum type.
inline void atf::value_SetEnum(atf::Testresult& parent, atf_TestresultEnum rhs) {
    parent.value = u32(rhs);
}

// --- atf.Testresult.value.Cast
inline atf::Testresult::operator atf_TestresultEnum () const {
    return atf_TestresultEnum((*this).value);
}

// --- atf.Testresult..Init
// Set all fields to initial values.
inline void atf::Testresult_Init(atf::Testresult& parent) {
    parent.value = u32(0);
}
inline atf::Testrun::Testrun(const algo::strptr&            in_testrun
        ,const atf::Testresult&         in_testresult
        ,u64                            in_n_step
        ,u64                            in_n_cmp
        ,const algo::strptr&            in_comment)
    : testrun(in_testrun)
    , testresult(in_testresult)
    , n_step(in_n_step)
    , n_cmp(in_n_cmp)
    , comment(in_comment)
{
}
inline atf::Testrun::Testrun() {
    atf::Testrun_Init(*this);
}


// --- atf.Testrun..Init
// Set all fields to initial values.
inline void atf::Testrun_Init(atf::Testrun& parent) {
    parent.testresult = atf_TestresultEnum(0);
    parent.n_step = u64(0);
    parent.n_cmp = u64(0);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf::FieldId &row) {// cfmt:atf.FieldId.String
    atf::FieldId_Print(const_cast<atf::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf::Testresult &row) {// cfmt:atf.Testresult.String
    atf::Testresult_Print(const_cast<atf::Testresult&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atf::Testrun &row) {// cfmt:atf.Testrun.String
    atf::Testrun_Print(const_cast<atf::Testrun&>(row), str);
    return str;
}
