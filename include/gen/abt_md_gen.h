//
// include/gen/abt_md_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.h"
#include "include/gen/dev_gen.h"
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- abt_md_FieldIdEnum

enum abt_md_FieldIdEnum {        // abt_md.FieldId.value
     abt_md_FieldId_value   = 0
};

enum { abt_md_FieldIdEnum_N = 1 };


// --- abt_md_TableIdEnum

enum abt_md_TableIdEnum {              // abt_md.TableId.value
     abt_md_TableId_dev_Readme   = 0   // dev.Readme -> abt_md.FReadme
    ,abt_md_TableId_dev_readme   = 0   // dev.readme -> abt_md.FReadme
};

enum { abt_md_TableIdEnum_N = 2 };

namespace abt_md { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace abt_md { // gen:ns_field
extern const char *abt_md_help;
} // gen:ns_field
// gen:ns_fwddecl2
namespace dev { struct Readme; }
namespace abt_md { struct _db_readme_curs; }
namespace abt_md { struct trace; }
namespace abt_md { struct FDb; }
namespace abt_md { struct FReadme; }
namespace abt_md { struct FieldId; }
namespace abt_md { struct TableId; }
namespace abt_md { extern struct abt_md::FDb _db; }
namespace abt_md { // gen:ns_print_struct

// --- abt_md.trace
#pragma pack(push,1)
struct trace { // abt_md.trace
    trace();
};
#pragma pack(pop)

// print string representation of abt_md::trace to string LHS, no header -- cprint:abt_md.trace.String
void                 trace_Print(abt_md::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- abt_md.FDb
// create: abt_md.FDb._db (Global)
struct FDb { // abt_md.FDb
    command::abt_md     cmdline;                    //
    abt_md::FReadme*    readme_lary[32];            // level array
    i32                 readme_n;                   // number of elements in array
    abt_md::FReadme**   ind_readme_buckets_elems;   // pointer to bucket array
    i32                 ind_readme_buckets_n;       // number of elements in bucket array
    i32                 ind_readme_n;               // number of elements in the hash table
    abt_md::trace       trace;                      //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     abt_md.FDb.cmdline
//     algo_lib.FDb.cmdline
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
abt_md::FReadme&     readme_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
abt_md::FReadme*     readme_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
abt_md::FReadme*     readme_InsertMaybe(const dev::Readme &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                readme_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 readme_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
abt_md::FReadme*     readme_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
abt_md::FReadme*     readme_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  readme_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 readme_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 readme_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
abt_md::FReadme&     readme_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 readme_XrefMaybe(abt_md::FReadme &row);

// Return true if hash is empty
bool                 ind_readme_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
abt_md::FReadme*     ind_readme_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
abt_md::FReadme&     ind_readme_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
abt_md::FReadme&     ind_readme_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_readme_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_readme_InsertMaybe(abt_md::FReadme& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_readme_Remove(abt_md::FReadme& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_readme_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
void                 _db_readme_curs_Reset(_db_readme_curs &curs, abt_md::FDb &parent);
// cursor points to valid item
bool                 _db_readme_curs_ValidQ(_db_readme_curs &curs);
// proceed to next item
void                 _db_readme_curs_Next(_db_readme_curs &curs);
// item access
abt_md::FReadme&     _db_readme_curs_Access(_db_readme_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- abt_md.FReadme
// create: abt_md.FDb.readme (Lary)
// global access: ind_readme (Thash)
struct FReadme { // abt_md.FReadme
    abt_md::FReadme*    ind_readme_next;   // hash next
    algo::Smallstr200   gitfile;           //
    bool                inl;               //   false
    bool                sandbox;           //   false
    algo::Smallstr100   filter;            //
    algo::Comment       comment;           //
private:
    friend abt_md::FReadme&     readme_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend abt_md::FReadme*     readme_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 readme_RemoveAll() __attribute__((nothrow));
    friend void                 readme_RemoveLast() __attribute__((nothrow));
    FReadme();
    ~FReadme();
    FReadme(const FReadme&){ /*disallow copy constructor */}
    void operator =(const FReadme&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 readme_CopyOut(abt_md::FReadme &row, dev::Readme &out) __attribute__((nothrow));
// Copy fields in to row
void                 readme_CopyIn(abt_md::FReadme &row, dev::Readme &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FReadme_Init(abt_md::FReadme& readme);
void                 FReadme_Uninit(abt_md::FReadme& readme) __attribute__((nothrow));

// --- abt_md.FieldId
#pragma pack(push,1)
struct FieldId { // abt_md.FieldId: Field read helper
    i32   value;   //   -1
    inline operator abt_md_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(abt_md_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
abt_md_FieldIdEnum   value_GetEnum(const abt_md::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(abt_md::FieldId& parent, abt_md_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const abt_md::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const abt_md::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(abt_md::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(abt_md::FieldId& parent, algo::strptr rhs, abt_md_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(abt_md::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of abt_md::FieldId from an ascii string.
// The format of the string is the format of the abt_md::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(abt_md::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(abt_md::FieldId& parent);
// print string representation of abt_md::FieldId to string LHS, no header -- cprint:abt_md.FieldId.String
void                 FieldId_Print(abt_md::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- abt_md.TableId
struct TableId { // abt_md.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator abt_md_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(abt_md_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
abt_md_TableIdEnum   value_GetEnum(const abt_md::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(abt_md::TableId& parent, abt_md_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const abt_md::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const abt_md::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(abt_md::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(abt_md::TableId& parent, algo::strptr rhs, abt_md_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(abt_md::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of abt_md::TableId from an ascii string.
// The format of the string is the format of the abt_md::TableId's only field
bool                 TableId_ReadStrptrMaybe(abt_md::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(abt_md::TableId& parent);
// print string representation of abt_md::TableId to string LHS, no header -- cprint:abt_md.TableId.String
void                 TableId_Print(abt_md::TableId & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace abt_md { // gen:ns_curstext

struct _db_readme_curs {// cursor
    typedef abt_md::FReadme ChildType;
    abt_md::FDb *parent;
    i64 index;
    _db_readme_curs(){ parent=NULL; index=0; }
};

} // gen:ns_curstext
namespace abt_md { // gen:ns_func
} // gen:ns_func
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const abt_md::trace &row);// cfmt:abt_md.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const abt_md::FieldId &row);// cfmt:abt_md.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const abt_md::TableId &row);// cfmt:abt_md.TableId.String
}
