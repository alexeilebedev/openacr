//
// include/gen/ntup_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline ntup::trace::trace() {
}

inline ntup::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline ntup::FieldId::FieldId(ntup_FieldIdEnum arg) { this->value = i32(arg); }
inline ntup::FieldId::FieldId() {
    ntup::FieldId_Init(*this);
}


// --- ntup.FieldId.value.GetEnum
// Get value of field as enum type
inline ntup_FieldIdEnum ntup::value_GetEnum(const ntup::FieldId& parent) {
    return ntup_FieldIdEnum(parent.value);
}

// --- ntup.FieldId.value.SetEnum
// Set value of field from enum type.
inline void ntup::value_SetEnum(ntup::FieldId& parent, ntup_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ntup.FieldId.value.Cast
inline ntup::FieldId::operator ntup_FieldIdEnum () const {
    return ntup_FieldIdEnum((*this).value);
}

// --- ntup.FieldId..Init
// Set all fields to initial values.
inline void ntup::FieldId_Init(ntup::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ntup::trace &row) {// cfmt:ntup.trace.String
    ntup::trace_Print(const_cast<ntup::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ntup::FieldId &row) {// cfmt:ntup.FieldId.String
    ntup::FieldId_Print(const_cast<ntup::FieldId&>(row), str);
    return str;
}
