//
// include/gen/src_func_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/dmmeta_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/report_gen.h"
#include "include/gen/command_gen.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/dev_gen.h"
//#pragma endinclude

// --- src_func_FieldIdEnum

enum src_func_FieldIdEnum {        // src_func.FieldId.value
     src_func_FieldId_value   = 0
};

enum { src_func_FieldIdEnum_N = 1 };


// --- src_func_TableIdEnum

enum src_func_TableIdEnum {                   // src_func.TableId.value
     src_func_TableId_dmmeta_Ctypelen   = 0   // dmmeta.Ctypelen -> src_func.FCtypelen
    ,src_func_TableId_dmmeta_ctypelen   = 0   // dmmeta.ctypelen -> src_func.FCtypelen
    ,src_func_TableId_dmmeta_Dispatch   = 1   // dmmeta.Dispatch -> src_func.FDispatch
    ,src_func_TableId_dmmeta_dispatch   = 1   // dmmeta.dispatch -> src_func.FDispatch
    ,src_func_TableId_dmmeta_Fstep      = 2   // dmmeta.Fstep -> src_func.FFstep
    ,src_func_TableId_dmmeta_fstep      = 2   // dmmeta.fstep -> src_func.FFstep
    ,src_func_TableId_dmmeta_Gstatic    = 3   // dmmeta.Gstatic -> src_func.FGstatic
    ,src_func_TableId_dmmeta_gstatic    = 3   // dmmeta.gstatic -> src_func.FGstatic
    ,src_func_TableId_dev_Target        = 4   // dev.Target -> src_func.FTarget
    ,src_func_TableId_dev_target        = 4   // dev.target -> src_func.FTarget
    ,src_func_TableId_dev_Targsrc       = 5   // dev.Targsrc -> src_func.FTargsrc
    ,src_func_TableId_dev_targsrc       = 5   // dev.targsrc -> src_func.FTargsrc
};

enum { src_func_TableIdEnum_N = 12 };

namespace src_func { struct FTargsrc; }
namespace src_func { struct FTarget; }
namespace src_func { struct FCtypelen; }
namespace src_func { struct trace; }
namespace src_func { struct FDb; }
namespace src_func { struct FDispatch; }
namespace src_func { struct FFstep; }
namespace src_func { struct FFunc; }
namespace src_func { struct FGenprefix; }
namespace src_func { struct FGstatic; }
namespace src_func { struct FieldId; }
namespace src_func { struct TableId; }
namespace src_func { struct _db_genprefix_curs; }
namespace src_func { struct _db_targsrc_curs; }
namespace src_func { struct _db_target_curs; }
namespace src_func { struct _db_ind_target_curs; }
namespace src_func { struct _db_func_curs; }
namespace src_func { struct _db_ind_func_curs; }
namespace src_func { struct _db_bh_func_curs; }
namespace src_func { struct _db_bh_func_unordcurs; }
namespace src_func { struct _db_dispatch_curs; }
namespace src_func { struct _db_fstep_curs; }
namespace src_func { struct _db_gstatic_curs; }
namespace src_func { struct _db_ind_genprefix_curs; }
namespace src_func { struct _db_ctypelen_curs; }
namespace src_func { struct _db_ind_ctypelen_curs; }
namespace src_func { struct target_cd_targsrc_curs; }
namespace src_func { struct targsrc_zd_func_curs; }
namespace src_func {
}//pkey typedefs
namespace src_func {
extern const char *src_func_help;
extern const char *src_func_syntax;
extern FDb _db;

// --- src_func.FCtypelen
// create: src_func.FDb.ctypelen (Lary)
// global access: ind_ctypelen (Thash)
struct FCtypelen { // src_func.FCtypelen
    algo::Smallstr50       ctype;               // Identifies the Ctype
    u32                    len;                 //   0
    i32                    alignment;           //   0
    i32                    padbytes;            //   0
    src_func::FCtypelen*   ind_ctypelen_next;   // hash next
private:
    friend src_func::FCtypelen& ctypelen_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FCtypelen* ctypelen_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctypelen_RemoveAll() __attribute__((nothrow));
    friend void                 ctypelen_RemoveLast() __attribute__((nothrow));
    FCtypelen();
    ~FCtypelen();
    FCtypelen(const FCtypelen&){ /*disallow copy constructor */}
    void operator =(const FCtypelen&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ctypelen_CopyOut(src_func::FCtypelen &row, dmmeta::Ctypelen &out) __attribute__((nothrow));
// Copy fields in to row
void                 ctypelen_CopyIn(src_func::FCtypelen &row, dmmeta::Ctypelen &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FCtypelen_Init(src_func::FCtypelen& ctypelen);
void                 FCtypelen_Uninit(src_func::FCtypelen& ctypelen) __attribute__((nothrow));

// --- src_func.trace
#pragma pack(push,1)
struct trace { // src_func.trace
    trace();
};
#pragma pack(pop)

// print string representation of src_func::trace to string LHS, no header -- cprint:src_func.trace.String
void                 trace_Print(src_func::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- src_func.FDb
// create: src_func.FDb._db (Global)
struct FDb { // src_func.FDb
    report::src_func         report;                        //
    src_func::FGenprefix*    genprefix_lary[32];            // level array
    i32                      genprefix_n;                   // number of elements in array
    command::src_func        cmdline;                       //
    src_func::FTargsrc*      targsrc_lary[32];              // level array
    i32                      targsrc_n;                     // number of elements in array
    src_func::FTarget*       target_lary[32];               // level array
    i32                      target_n;                      // number of elements in array
    src_func::FTarget**      ind_target_buckets_elems;      // pointer to bucket array
    i32                      ind_target_buckets_n;          // number of elements in bucket array
    i32                      ind_target_n;                  // number of elements in the hash table
    src_func::FFunc*         func_lary[32];                 // level array
    i32                      func_n;                        // number of elements in array
    src_func::FFunc**        ind_func_buckets_elems;        // pointer to bucket array
    i32                      ind_func_buckets_n;            // number of elements in bucket array
    i32                      ind_func_n;                    // number of elements in the hash table
    src_func::FFunc**        bh_func_elems;                 // binary heap by sortkey
    i32                      bh_func_n;                     // number of elements in the heap
    i32                      bh_func_max;                   // max elements in bh_func_elems
    src_func::FDispatch*     dispatch_lary[32];             // level array
    i32                      dispatch_n;                    // number of elements in array
    src_func::FTargsrc*      c_cur_targsrc;                 // optional pointer
    i32                      cur_line;                      //   0
    algo_lib::Regx           ignore_funcstart;              //
    src_func::FFstep*        fstep_lary[32];                // level array
    i32                      fstep_n;                       // number of elements in array
    src_func::FGstatic*      gstatic_lary[32];              // level array
    i32                      gstatic_n;                     // number of elements in array
    src_func::FGenprefix**   ind_genprefix_buckets_elems;   // pointer to bucket array
    i32                      ind_genprefix_buckets_n;       // number of elements in bucket array
    i32                      ind_genprefix_n;               // number of elements in the hash table
    src_func::FCtypelen*     ctypelen_lary[32];             // level array
    i32                      ctypelen_n;                    // number of elements in array
    src_func::FCtypelen**    ind_ctypelen_buckets_elems;    // pointer to bucket array
    i32                      ind_ctypelen_buckets_n;        // number of elements in bucket array
    i32                      ind_ctypelen_n;                // number of elements in the hash table
    bool                     printed_user_impl_notice;      //   false
    src_func::trace          trace;                         //
};

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FGenprefix& genprefix_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FGenprefix* genprefix_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                genprefix_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 genprefix_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FGenprefix* genprefix_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FGenprefix* genprefix_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  genprefix_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 genprefix_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 genprefix_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FGenprefix& genprefix_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 genprefix_XrefMaybe(src_func::FGenprefix &row);

// Main function
void                 MainArgs(int argc, char **argv);
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FTargsrc&  targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FTargsrc*  targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FTargsrc*  targsrc_InsertMaybe(const dev::Targsrc &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                targsrc_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 targsrc_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FTargsrc*  targsrc_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FTargsrc*  targsrc_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  targsrc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 targsrc_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FTargsrc&  targsrc_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 targsrc_XrefMaybe(src_func::FTargsrc &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FTarget&   target_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FTarget*   target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FTarget*   target_InsertMaybe(const dev::Target &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                target_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 target_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FTarget*   target_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FTarget*   target_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 target_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FTarget&   target_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 target_XrefMaybe(src_func::FTarget &row);

// Return true if hash is empty
bool                 ind_target_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_func::FTarget*   ind_target_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_func::FTarget&   ind_target_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FTarget&   ind_target_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_target_InsertMaybe(src_func::FTarget& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_target_Remove(src_func::FTarget& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_target_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FFunc&     func_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FFunc*     func_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                func_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 func_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FFunc*     func_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FFunc*     func_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  func_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 func_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 func_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FFunc&     func_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 func_XrefMaybe(src_func::FFunc &row);

// Return true if hash is empty
bool                 ind_func_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_func::FFunc*     ind_func_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_func::FFunc&     ind_func_FindX(const algo::strptr& key);
// Return number of items in the hash
i32                  ind_func_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_func_InsertMaybe(src_func::FFunc& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_func_Remove(src_func::FFunc& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_func_Reserve(int n) __attribute__((nothrow));

// Remove all elements from heap and free memory used by the array.
void                 bh_func_Dealloc() __attribute__((nothrow));
// Return true if index is empty
bool                 bh_func_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
src_func::FFunc*     bh_func_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
bool                 bh_func_InBheapQ(src_func::FFunc& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void                 bh_func_Insert(src_func::FFunc& row) __attribute__((nothrow));
// Return number of items in the heap
i32                  bh_func_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32                  bh_func_Reheap(src_func::FFunc& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32                  bh_func_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 bh_func_Remove(src_func::FFunc& row) __attribute__((nothrow));
// Remove all elements from binary heap
void                 bh_func_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
src_func::FFunc*     bh_func_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
void                 bh_func_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FDispatch& dispatch_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FDispatch* dispatch_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FDispatch* dispatch_InsertMaybe(const dmmeta::Dispatch &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                dispatch_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 dispatch_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FDispatch* dispatch_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FDispatch* dispatch_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  dispatch_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 dispatch_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 dispatch_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FDispatch& dispatch_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 dispatch_XrefMaybe(src_func::FDispatch &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FFstep&    fstep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FFstep*    fstep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FFstep*    fstep_InsertMaybe(const dmmeta::Fstep &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                fstep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 fstep_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FFstep*    fstep_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FFstep*    fstep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  fstep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 fstep_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 fstep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FFstep&    fstep_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 fstep_XrefMaybe(src_func::FFstep &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FGstatic&  gstatic_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FGstatic*  gstatic_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FGstatic*  gstatic_InsertMaybe(const dmmeta::Gstatic &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                gstatic_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 gstatic_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FGstatic*  gstatic_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FGstatic*  gstatic_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  gstatic_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 gstatic_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 gstatic_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FGstatic&  gstatic_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 gstatic_XrefMaybe(src_func::FGstatic &row);

// Return true if hash is empty
bool                 ind_genprefix_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_func::FGenprefix* ind_genprefix_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_func::FGenprefix& ind_genprefix_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FGenprefix& ind_genprefix_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_genprefix_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_genprefix_InsertMaybe(src_func::FGenprefix& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_genprefix_Remove(src_func::FGenprefix& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_genprefix_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FCtypelen& ctypelen_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_func::FCtypelen* ctypelen_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FCtypelen* ctypelen_InsertMaybe(const dmmeta::Ctypelen &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ctypelen_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ctypelen_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_func::FCtypelen* ctypelen_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_func::FCtypelen* ctypelen_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ctypelen_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 ctypelen_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 ctypelen_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_func::FCtypelen& ctypelen_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ctypelen_XrefMaybe(src_func::FCtypelen &row);

// Return true if hash is empty
bool                 ind_ctypelen_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_func::FCtypelen* ind_ctypelen_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_func::FCtypelen& ind_ctypelen_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FCtypelen& ind_ctypelen_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ctypelen_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ctypelen_InsertMaybe(src_func::FCtypelen& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ctypelen_Remove(src_func::FCtypelen& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ctypelen_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
void                 _db_genprefix_curs_Reset(_db_genprefix_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_genprefix_curs_ValidQ(_db_genprefix_curs &curs);
// proceed to next item
void                 _db_genprefix_curs_Next(_db_genprefix_curs &curs);
// item access
src_func::FGenprefix& _db_genprefix_curs_Access(_db_genprefix_curs &curs);
// cursor points to valid item
void                 _db_targsrc_curs_Reset(_db_targsrc_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_targsrc_curs_ValidQ(_db_targsrc_curs &curs);
// proceed to next item
void                 _db_targsrc_curs_Next(_db_targsrc_curs &curs);
// item access
src_func::FTargsrc&  _db_targsrc_curs_Access(_db_targsrc_curs &curs);
// cursor points to valid item
void                 _db_target_curs_Reset(_db_target_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_target_curs_ValidQ(_db_target_curs &curs);
// proceed to next item
void                 _db_target_curs_Next(_db_target_curs &curs);
// item access
src_func::FTarget&   _db_target_curs_Access(_db_target_curs &curs);
// cursor points to valid item
void                 _db_func_curs_Reset(_db_func_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_func_curs_ValidQ(_db_func_curs &curs);
// proceed to next item
void                 _db_func_curs_Next(_db_func_curs &curs);
// item access
src_func::FFunc&     _db_func_curs_Access(_db_func_curs &curs);
void                 _db_bh_func_curs_Reserve(_db_bh_func_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void                 _db_bh_func_curs_Reset(_db_bh_func_curs &curs, src_func::FDb &parent);
// Advance cursor.
void                 _db_bh_func_curs_Next(_db_bh_func_curs &curs);
// Access current element. If not more elements, return NULL
src_func::FFunc&     _db_bh_func_curs_Access(_db_bh_func_curs &curs);
// Return true if Access() will return non-NULL.
bool                 _db_bh_func_curs_ValidQ(_db_bh_func_curs &curs);
// cursor points to valid item
void                 _db_dispatch_curs_Reset(_db_dispatch_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_dispatch_curs_ValidQ(_db_dispatch_curs &curs);
// proceed to next item
void                 _db_dispatch_curs_Next(_db_dispatch_curs &curs);
// item access
src_func::FDispatch& _db_dispatch_curs_Access(_db_dispatch_curs &curs);
// cursor points to valid item
void                 _db_fstep_curs_Reset(_db_fstep_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_fstep_curs_ValidQ(_db_fstep_curs &curs);
// proceed to next item
void                 _db_fstep_curs_Next(_db_fstep_curs &curs);
// item access
src_func::FFstep&    _db_fstep_curs_Access(_db_fstep_curs &curs);
// cursor points to valid item
void                 _db_gstatic_curs_Reset(_db_gstatic_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_gstatic_curs_ValidQ(_db_gstatic_curs &curs);
// proceed to next item
void                 _db_gstatic_curs_Next(_db_gstatic_curs &curs);
// item access
src_func::FGstatic&  _db_gstatic_curs_Access(_db_gstatic_curs &curs);
// cursor points to valid item
void                 _db_ctypelen_curs_Reset(_db_ctypelen_curs &curs, src_func::FDb &parent);
// cursor points to valid item
bool                 _db_ctypelen_curs_ValidQ(_db_ctypelen_curs &curs);
// proceed to next item
void                 _db_ctypelen_curs_Next(_db_ctypelen_curs &curs);
// item access
src_func::FCtypelen& _db_ctypelen_curs_Access(_db_ctypelen_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- src_func.FDispatch
// create: src_func.FDb.dispatch (Lary)
struct FDispatch { // src_func.FDispatch
    algo::Smallstr50   dispatch;   //
    bool               unk;        //   false  Want default case?
    bool               read;       //   false
    bool               print;      //   false
    bool               haslen;     //   false
    bool               call;       //   false
    bool               strict;     //   false  Only dispatch if length matches exactly
    algo::Comment      comment;    //
private:
    friend src_func::FDispatch& dispatch_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FDispatch* dispatch_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 dispatch_RemoveAll() __attribute__((nothrow));
    friend void                 dispatch_RemoveLast() __attribute__((nothrow));
    FDispatch();
};

// Copy fields out of row
void                 dispatch_CopyOut(src_func::FDispatch &row, dmmeta::Dispatch &out) __attribute__((nothrow));
// Copy fields in to row
void                 dispatch_CopyIn(src_func::FDispatch &row, dmmeta::Dispatch &in) __attribute__((nothrow));

algo::Smallstr16     ns_Get(src_func::FDispatch& dispatch) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(src_func::FDispatch& dispatch) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FDispatch_Init(src_func::FDispatch& dispatch);

// --- src_func.FFstep
// create: src_func.FDb.fstep (Lary)
struct FFstep { // src_func.FFstep
    algo::Smallstr100   fstep;      //
    algo::Smallstr50    steptype;   //
    algo::Comment       comment;    //
private:
    friend src_func::FFstep&    fstep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FFstep*    fstep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 fstep_RemoveAll() __attribute__((nothrow));
    friend void                 fstep_RemoveLast() __attribute__((nothrow));
    FFstep();
};

// Copy fields out of row
void                 fstep_CopyOut(src_func::FFstep &row, dmmeta::Fstep &out) __attribute__((nothrow));
// Copy fields in to row
void                 fstep_CopyIn(src_func::FFstep &row, dmmeta::Fstep &in) __attribute__((nothrow));

algo::Smallstr100    field_Get(src_func::FFstep& fstep) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr16     ns_Get(src_func::FFstep& fstep) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(src_func::FFstep& fstep) __attribute__((__warn_unused_result__, nothrow));


// --- src_func.FFunc
// create: src_func.FDb.func (Lary)
// global access: ind_func (Thash)
// global access: bh_func (Bheap)
// access: src_func.FTargsrc.zd_func (Llist)
struct FFunc { // src_func.FFunc
    src_func::FFunc*      ind_func_next;   // hash next
    i32                   bh_func_idx;     // index in heap; -1 means not-in-heap
    algo::cstring         func;            // First line of function -- primary key
    algo::cstring         args;            // Argument list -- everything beyond first open parenthesis
    algo::cstring         sortkey;         //
    algo::cstring         body;            // Function body
    src_func::FTargsrc*   p_targsrc;       // reference to parent row
    i32                   line;            //   0  Line where function started
    algo::cstring         precomment;      // Comments that appeare before function body
    bool                  isstatic;        //   false  Static?
    bool                  isinline;        //   false  Inline?
    bool                  amcprot;         //   false  Looks like a function where amc has already provided prototype?
    bool                  select;          //   false  Select for further processing
    bool                  iffy;            //   false
    bool                  mystery;         //   false
    src_func::FTargsrc*   p_written_to;    // reference to parent row
    src_func::FFunc*      zd_func_next;    // zslist link; -1 means not-in-list
    src_func::FFunc*      zd_func_prev;    // previous element
private:
    friend src_func::FFunc&     func_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FFunc*     func_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 func_RemoveAll() __attribute__((nothrow));
    friend void                 func_RemoveLast() __attribute__((nothrow));
    FFunc();
    ~FFunc();
    FFunc(const FFunc&){ /*disallow copy constructor */}
    void operator =(const FFunc&){ /*disallow direct assignment */}
};

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
bool                 sortkey_Lt(src_func::FFunc& func, src_func::FFunc &rhs) __attribute__((nothrow));
// Compare two fields.
// Comparison uses version sort (detect embedded integers).
// Comparison is case-insensitive.
i32                  sortkey_Cmp(src_func::FFunc& func, src_func::FFunc &rhs) __attribute__((nothrow));

// Set all fields to initial values.
void                 FFunc_Init(src_func::FFunc& func);
void                 FFunc_Uninit(src_func::FFunc& func) __attribute__((nothrow));

// --- src_func.FGenprefix
// create: src_func.FDb.genprefix (Lary)
// global access: ind_genprefix (Thash)
struct FGenprefix { // src_func.FGenprefix: Prefixes of generated functions, skip generating prototypes for those
    src_func::FGenprefix*   ind_genprefix_next;   // hash next
    algo::Smallstr100       genprefix;            //
private:
    friend src_func::FGenprefix& genprefix_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FGenprefix* genprefix_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 genprefix_RemoveAll() __attribute__((nothrow));
    friend void                 genprefix_RemoveLast() __attribute__((nothrow));
    FGenprefix();
    ~FGenprefix();
    FGenprefix(const FGenprefix&){ /*disallow copy constructor */}
    void operator =(const FGenprefix&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
void                 FGenprefix_Init(src_func::FGenprefix& genprefix);
void                 FGenprefix_Uninit(src_func::FGenprefix& genprefix) __attribute__((nothrow));

// --- src_func.FGstatic
// create: src_func.FDb.gstatic (Lary)
struct FGstatic { // src_func.FGstatic
    algo::Smallstr100   field;     //
    algo::Comment       comment;   //
private:
    friend src_func::FGstatic&  gstatic_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FGstatic*  gstatic_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 gstatic_RemoveAll() __attribute__((nothrow));
    friend void                 gstatic_RemoveLast() __attribute__((nothrow));
    FGstatic();
};

// Copy fields out of row
void                 gstatic_CopyOut(src_func::FGstatic &row, dmmeta::Gstatic &out) __attribute__((nothrow));
// Copy fields in to row
void                 gstatic_CopyIn(src_func::FGstatic &row, dmmeta::Gstatic &in) __attribute__((nothrow));

algo::Smallstr16     ns_Get(src_func::FGstatic& gstatic) __attribute__((__warn_unused_result__, nothrow));


// --- src_func.FTarget
// create: src_func.FDb.target (Lary)
// global access: ind_target (Thash)
// access: src_func.FTargsrc.p_target (Upptr)
struct FTarget { // src_func.FTarget
    src_func::FTarget*    ind_target_next;   // hash next
    algo::Smallstr16      target;            //
    algo::Smallstr50      license;           //
    algo::Smallstr50      compat;            //   "Linux-%.%-%"
    src_func::FTargsrc*   cd_targsrc_head;   // zero-terminated doubly linked list
    i32                   cd_targsrc_n;      // zero-terminated doubly linked list
    bool                  select;            //   false
private:
    friend src_func::FTarget&   target_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FTarget*   target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 target_RemoveLast() __attribute__((nothrow));
    FTarget();
    ~FTarget();
    FTarget(const FTarget&){ /*disallow copy constructor */}
    void operator =(const FTarget&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 target_CopyOut(src_func::FTarget &row, dev::Target &out) __attribute__((nothrow));
// Copy fields in to row
void                 target_CopyIn(src_func::FTarget &row, dev::Target &in) __attribute__((nothrow));

// Return true if index is empty
bool                 cd_targsrc_EmptyQ(src_func::FTarget& target) __attribute__((__warn_unused_result__, nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
src_func::FTargsrc*  cd_targsrc_First(src_func::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_targsrc_InLlistQ(src_func::FTargsrc& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_targsrc_Insert(src_func::FTarget& target, src_func::FTargsrc& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
src_func::FTargsrc*  cd_targsrc_Last(src_func::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  cd_targsrc_N(const src_func::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
src_func::FTargsrc*  cd_targsrc_Next(src_func::FTargsrc &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
src_func::FTargsrc*  cd_targsrc_Prev(src_func::FTargsrc &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_targsrc_Remove(src_func::FTarget& target, src_func::FTargsrc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_targsrc_RemoveAll(src_func::FTarget& target) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
src_func::FTargsrc*  cd_targsrc_RemoveFirst(src_func::FTarget& target) __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
src_func::FTargsrc*  cd_targsrc_RotateFirst(src_func::FTarget& target) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
src_func::FTargsrc&  cd_targsrc_qLast(src_func::FTarget& target) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FTarget_Init(src_func::FTarget& target);
// cursor points to valid item
void                 target_cd_targsrc_curs_Reset(target_cd_targsrc_curs &curs, src_func::FTarget &parent);
// cursor points to valid item
bool                 target_cd_targsrc_curs_ValidQ(target_cd_targsrc_curs &curs);
// proceed to next item
void                 target_cd_targsrc_curs_Next(target_cd_targsrc_curs &curs);
// item access
src_func::FTargsrc&  target_cd_targsrc_curs_Access(target_cd_targsrc_curs &curs);
void                 FTarget_Uninit(src_func::FTarget& target) __attribute__((nothrow));

// --- src_func.FTargsrc
// create: src_func.FDb.targsrc (Lary)
// global access: c_cur_targsrc (Ptr)
// access: src_func.FFunc.p_targsrc (Upptr)
// access: src_func.FFunc.p_written_to (Upptr)
// access: src_func.FTarget.cd_targsrc (Llist)
struct FTargsrc { // src_func.FTargsrc
    src_func::FTargsrc*   cd_targsrc_next;   // zslist link; -1 means not-in-list
    src_func::FTargsrc*   cd_targsrc_prev;   // previous element
    algo::Smallstr100     targsrc;           //
    algo::Comment         comment;           //
    src_func::FFunc*      zd_func_head;      // zero-terminated doubly linked list
    i32                   zd_func_n;         // zero-terminated doubly linked list
    src_func::FFunc*      zd_func_tail;      // pointer to last element
    src_func::FTarget*    p_target;          // reference to parent row
private:
    friend src_func::FTargsrc&  targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_func::FTargsrc*  targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targsrc_RemoveLast() __attribute__((nothrow));
    FTargsrc();
    ~FTargsrc();
    FTargsrc(const FTargsrc&){ /*disallow copy constructor */}
    void operator =(const FTargsrc&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 targsrc_CopyOut(src_func::FTargsrc &row, dev::Targsrc &out) __attribute__((nothrow));
// Copy fields in to row
void                 targsrc_CopyIn(src_func::FTargsrc &row, dev::Targsrc &in) __attribute__((nothrow));

algo::Smallstr16     target_Get(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr200    src_Get(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr10     ext_Get(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
bool                 zd_func_EmptyQ(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
src_func::FFunc*     zd_func_First(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_func_InLlistQ(src_func::FFunc& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_func_Insert(src_func::FTargsrc& targsrc, src_func::FFunc& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
src_func::FFunc*     zd_func_Last(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_func_N(const src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
src_func::FFunc*     zd_func_Next(src_func::FFunc &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
src_func::FFunc*     zd_func_Prev(src_func::FFunc &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_func_Remove(src_func::FTargsrc& targsrc, src_func::FFunc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_func_RemoveAll(src_func::FTargsrc& targsrc) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
src_func::FFunc*     zd_func_RemoveFirst(src_func::FTargsrc& targsrc) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
src_func::FFunc&     zd_func_qLast(src_func::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FTargsrc_Init(src_func::FTargsrc& targsrc);
// cursor points to valid item
void                 targsrc_zd_func_curs_Reset(targsrc_zd_func_curs &curs, src_func::FTargsrc &parent);
// cursor points to valid item
bool                 targsrc_zd_func_curs_ValidQ(targsrc_zd_func_curs &curs);
// proceed to next item
void                 targsrc_zd_func_curs_Next(targsrc_zd_func_curs &curs);
// item access
src_func::FFunc&     targsrc_zd_func_curs_Access(targsrc_zd_func_curs &curs);
void                 FTargsrc_Uninit(src_func::FTargsrc& targsrc) __attribute__((nothrow));

// --- src_func.FieldId
#pragma pack(push,1)
struct FieldId { // src_func.FieldId: Field read helper
    i32   value;   //   -1
    inline operator src_func_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(src_func_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
src_func_FieldIdEnum value_GetEnum(const src_func::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(src_func::FieldId& parent, src_func_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const src_func::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const src_func::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(src_func::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(src_func::FieldId& parent, algo::strptr rhs, src_func_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(src_func::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of src_func::FieldId from an ascii string.
// The format of the string is the format of the src_func::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(src_func::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(src_func::FieldId& parent);
// print string representation of src_func::FieldId to string LHS, no header -- cprint:src_func.FieldId.String
void                 FieldId_Print(src_func::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- src_func.TableId
struct TableId { // src_func.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator src_func_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(src_func_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
src_func_TableIdEnum value_GetEnum(const src_func::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(src_func::TableId& parent, src_func_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const src_func::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const src_func::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(src_func::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(src_func::TableId& parent, algo::strptr rhs, src_func_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(src_func::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of src_func::TableId from an ascii string.
// The format of the string is the format of the src_func::TableId's only field
bool                 TableId_ReadStrptrMaybe(src_func::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(src_func::TableId& parent);
// print string representation of src_func::TableId to string LHS, no header -- cprint:src_func.TableId.String
void                 TableId_Print(src_func::TableId & row, algo::cstring &str) __attribute__((nothrow));

struct _db_genprefix_curs {// cursor
    typedef src_func::FGenprefix ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_genprefix_curs(){ parent=NULL; index=0; }
};


struct _db_targsrc_curs {// cursor
    typedef src_func::FTargsrc ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_targsrc_curs(){ parent=NULL; index=0; }
};


struct _db_target_curs {// cursor
    typedef src_func::FTarget ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_target_curs(){ parent=NULL; index=0; }
};


struct _db_func_curs {// cursor
    typedef src_func::FFunc ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_func_curs(){ parent=NULL; index=0; }
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_func_curs {
    typedef src_func::FFunc ChildType;
    src_func::FDb      *parent;        // parent
    src_func::FFunc*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_func_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_func_curs();
};


struct _db_dispatch_curs {// cursor
    typedef src_func::FDispatch ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_dispatch_curs(){ parent=NULL; index=0; }
};


struct _db_fstep_curs {// cursor
    typedef src_func::FFstep ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_fstep_curs(){ parent=NULL; index=0; }
};


struct _db_gstatic_curs {// cursor
    typedef src_func::FGstatic ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_gstatic_curs(){ parent=NULL; index=0; }
};


struct _db_ctypelen_curs {// cursor
    typedef src_func::FCtypelen ChildType;
    src_func::FDb *parent;
    i64 index;
    _db_ctypelen_curs(){ parent=NULL; index=0; }
};


struct target_cd_targsrc_curs {// cursor
    typedef src_func::FTargsrc ChildType;
    src_func::FTargsrc* row;
    src_func::FTargsrc* head;
    target_cd_targsrc_curs() {
        row = NULL;
        head = NULL;
    }
};


struct targsrc_zd_func_curs {// cursor
    typedef src_func::FFunc ChildType;
    src_func::FFunc* row;
    targsrc_zd_func_curs() {
        row = NULL;
    }
};

} // end namespace src_func
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const src_func::trace &row);// cfmt:src_func.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const src_func::FieldId &row);// cfmt:src_func.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const src_func::TableId &row);// cfmt:src_func.TableId.String
}
