//
// include/gen/acr_dm_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
#include "include/gen/command_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- acr_dm_FieldIdEnum

enum acr_dm_FieldIdEnum {        // acr_dm.FieldId.value
     acr_dm_FieldId_value   = 0
};

enum { acr_dm_FieldIdEnum_N = 1 };

namespace acr_dm { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace acr_dm { // gen:ns_field
extern const char *acr_dm_help;
} // gen:ns_field
// gen:ns_fwddecl2
namespace acr_dm { struct FTuple; }
namespace acr_dm { struct FAttr; }
namespace acr_dm { struct attr_zs_value_curs; }
namespace acr_dm { struct _db_tuple_curs; }
namespace acr_dm { struct _db_attr_curs; }
namespace acr_dm { struct _db_value_curs; }
namespace acr_dm { struct Source_source_bitcurs; }
namespace acr_dm { struct tuple_zs_attr_curs; }
namespace acr_dm { struct trace; }
namespace acr_dm { struct FDb; }
namespace acr_dm { struct Source; }
namespace acr_dm { struct FValue; }
namespace acr_dm { struct FieldId; }
namespace acr_dm { extern struct acr_dm::FDb _db; }
namespace acr_dm { // gen:ns_print_struct

// --- acr_dm.FAttr
// create: acr_dm.FDb.attr (Lary)
// access: acr_dm.FTuple.zs_attr (Llist)
// access: acr_dm.FValue.p_attr (Upptr)
struct FAttr { // acr_dm.FAttr
    algo::cstring     name;            //
    acr_dm::FTuple*   p_tuple;         // reference to parent row
    acr_dm::FValue*   zs_value_head;   // zero-terminated singly linked list
    i32               zs_value_n;      // zero-terminated singly linked list
    acr_dm::FValue*   zs_value_tail;   // pointer to last element
    acr_dm::FAttr*    zs_attr_next;    // zslist link; -1 means not-in-list
private:
    friend acr_dm::FAttr&       attr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_dm::FAttr*       attr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 attr_RemoveAll() __attribute__((nothrow));
    friend void                 attr_RemoveLast() __attribute__((nothrow));
    FAttr();
    ~FAttr();
    FAttr(const FAttr&){ /*disallow copy constructor */}
    void operator =(const FAttr&){ /*disallow direct assignment */}
};

// Return true if index is empty
bool                 zs_value_EmptyQ(acr_dm::FAttr& attr) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
acr_dm::FValue*      zs_value_First(acr_dm::FAttr& attr) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zs_value_InLlistQ(acr_dm::FValue& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zs_value_Insert(acr_dm::FAttr& attr, acr_dm::FValue& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
acr_dm::FValue*      zs_value_Last(acr_dm::FAttr& attr) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zs_value_N(const acr_dm::FAttr& attr) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
acr_dm::FValue*      zs_value_Next(acr_dm::FValue &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// Since the list is singly-linked, use linear search to locate the element.
void                 zs_value_Remove(acr_dm::FAttr& attr, acr_dm::FValue& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zs_value_RemoveAll(acr_dm::FAttr& attr) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_dm::FValue*      zs_value_RemoveFirst(acr_dm::FAttr& attr) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
acr_dm::FValue&      zs_value_qLast(acr_dm::FAttr& attr) __attribute__((__warn_unused_result__, nothrow));

// cursor points to valid item
void                 attr_zs_value_curs_Reset(attr_zs_value_curs &curs, acr_dm::FAttr &parent);
// cursor points to valid item
bool                 attr_zs_value_curs_ValidQ(attr_zs_value_curs &curs);
// proceed to next item
void                 attr_zs_value_curs_Next(attr_zs_value_curs &curs);
// item access
acr_dm::FValue&      attr_zs_value_curs_Access(attr_zs_value_curs &curs);
// Set all fields to initial values.
void                 FAttr_Init(acr_dm::FAttr& attr);
void                 FAttr_Uninit(acr_dm::FAttr& attr) __attribute__((nothrow));

// --- acr_dm.trace
#pragma pack(push,1)
struct trace { // acr_dm.trace
    trace();
};
#pragma pack(pop)

// print string representation of acr_dm::trace to string LHS, no header -- cprint:acr_dm.trace.String
void                 trace_Print(acr_dm::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- acr_dm.FDb
// create: acr_dm.FDb._db (Global)
struct FDb { // acr_dm.FDb
    command::acr_dm    cmdline;                   //
    acr_dm::FTuple*    tuple_lary[32];            // level array
    i32                tuple_n;                   // number of elements in array
    acr_dm::FTuple**   ind_tuple_buckets_elems;   // pointer to bucket array
    i32                ind_tuple_buckets_n;       // number of elements in bucket array
    i32                ind_tuple_n;               // number of elements in the hash table
    acr_dm::FAttr*     attr_lary[32];             // level array
    i32                attr_n;                    // number of elements in array
    acr_dm::FValue*    value_lary[32];            // level array
    i32                value_n;                   // number of elements in array
    acr_dm::trace      trace;                     //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     acr_dm.FDb.cmdline
//     algo_lib.FDb.cmdline
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FTuple&      tuple_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FTuple*      tuple_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                tuple_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 tuple_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
acr_dm::FTuple*      tuple_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
acr_dm::FTuple*      tuple_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  tuple_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 tuple_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 tuple_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_dm::FTuple&      tuple_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 tuple_XrefMaybe(acr_dm::FTuple &row);

// Return true if hash is empty
bool                 ind_tuple_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
acr_dm::FTuple*      ind_tuple_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
acr_dm::FTuple&      ind_tuple_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_dm::FTuple&      ind_tuple_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_tuple_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_tuple_InsertMaybe(acr_dm::FTuple& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_tuple_Remove(acr_dm::FTuple& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_tuple_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FAttr&       attr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FAttr*       attr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                attr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 attr_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
acr_dm::FAttr*       attr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
acr_dm::FAttr*       attr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  attr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 attr_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 attr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_dm::FAttr&       attr_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 attr_XrefMaybe(acr_dm::FAttr &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FValue&      value_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FValue*      value_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                value_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 value_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
acr_dm::FValue*      value_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
acr_dm::FValue*      value_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  value_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 value_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 value_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
acr_dm::FValue&      value_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 value_XrefMaybe(acr_dm::FValue &row);

// cursor points to valid item
void                 _db_tuple_curs_Reset(_db_tuple_curs &curs, acr_dm::FDb &parent);
// cursor points to valid item
bool                 _db_tuple_curs_ValidQ(_db_tuple_curs &curs);
// proceed to next item
void                 _db_tuple_curs_Next(_db_tuple_curs &curs);
// item access
acr_dm::FTuple&      _db_tuple_curs_Access(_db_tuple_curs &curs);
// cursor points to valid item
void                 _db_attr_curs_Reset(_db_attr_curs &curs, acr_dm::FDb &parent);
// cursor points to valid item
bool                 _db_attr_curs_ValidQ(_db_attr_curs &curs);
// proceed to next item
void                 _db_attr_curs_Next(_db_attr_curs &curs);
// item access
acr_dm::FAttr&       _db_attr_curs_Access(_db_attr_curs &curs);
// cursor points to valid item
void                 _db_value_curs_Reset(_db_value_curs &curs, acr_dm::FDb &parent);
// cursor points to valid item
bool                 _db_value_curs_ValidQ(_db_value_curs &curs);
// proceed to next item
void                 _db_value_curs_Next(_db_value_curs &curs);
// item access
acr_dm::FValue&      _db_value_curs_Access(_db_value_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- acr_dm.Source
struct Source { // acr_dm.Source
    u8   source;   //   0
    Source();
};

// Return constant 1
int                  source_N(acr_dm::Source& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Access value
u8&                  source_qFind(acr_dm::Source& parent, int) __attribute__((__warn_unused_result__, nothrow));
// Get max # of bits in the bitset
// Return max. number of bits supported by array
int                  source_Nbits(acr_dm::Source& parent) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. No bounds checking
bool                 source_qGetBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. If bit index is out of bounds, return 0.
bool                 source_GetBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Check if all the bits in the bitset are equal to zero
bool                 source_BitsEmptyQ(acr_dm::Source& parent) __attribute__((__warn_unused_result__, nothrow));
u64                  source_Sum1s(acr_dm::Source& parent) __attribute__((__warn_unused_result__, nothrow));
// Clear bit # BIT_IDX in bit set. No bounds checking
void                 source_qClearBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((nothrow));
// Clear bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing
void                 source_ClearBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
void                 source_qSetBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing.
void                 source_SetBit(acr_dm::Source& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
void                 source_qSetBitVal(acr_dm::Source& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Or bit # BIT_IDX in bit set. No bounds checking
void                 source_qOrBitVal(acr_dm::Source& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Set all bits of array to zero.
// Note: this does not change what NBits will return.
void                 source_ClearBitsAll(acr_dm::Source& parent) __attribute__((nothrow));
// Zero in PARENT any bits that are set in RHS.
void                 source_ClearBits(acr_dm::Source& parent, acr_dm::Source &rhs) __attribute__((nothrow));
// Set PARENT to union of two bitsets.
// (This function is not named Set.. to avoid triple entendre).
void                 source_OrBits(acr_dm::Source& parent, acr_dm::Source &rhs) __attribute__((nothrow));
// Return smallest number N such that indexes of all 1 bits are below N
i32                  source_Sup(acr_dm::Source& parent) __attribute__((__warn_unused_result__, nothrow));

// proceed to next item
void                 Source_source_bitcurs_Next(Source_source_bitcurs &curs);
void                 Source_source_bitcurs_Reset(Source_source_bitcurs &curs, acr_dm::Source &parent);
// cursor points to valid item
bool                 Source_source_bitcurs_ValidQ(Source_source_bitcurs &curs);
// item access
int&                 Source_source_bitcurs_Access(Source_source_bitcurs &curs);
// Set all fields to initial values.
void                 Source_Init(acr_dm::Source& parent);

// --- acr_dm.FTuple
// create: acr_dm.FDb.tuple (Lary)
// global access: ind_tuple (Thash)
// access: acr_dm.FAttr.p_tuple (Upptr)
struct FTuple { // acr_dm.FTuple
    acr_dm::FTuple*   ind_tuple_next;   // hash next
    algo::cstring     key;              //
    acr_dm::FAttr*    zs_attr_head;     // zero-terminated singly linked list
    i32               zs_attr_n;        // zero-terminated singly linked list
    acr_dm::FAttr*    zs_attr_tail;     // pointer to last element
    acr_dm::Source    source;           //
private:
    friend acr_dm::FTuple&      tuple_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_dm::FTuple*      tuple_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 tuple_RemoveAll() __attribute__((nothrow));
    friend void                 tuple_RemoveLast() __attribute__((nothrow));
    FTuple();
    ~FTuple();
    FTuple(const FTuple&){ /*disallow copy constructor */}
    void operator =(const FTuple&){ /*disallow direct assignment */}
};

// Return true if index is empty
bool                 zs_attr_EmptyQ(acr_dm::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
acr_dm::FAttr*       zs_attr_First(acr_dm::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zs_attr_InLlistQ(acr_dm::FAttr& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zs_attr_Insert(acr_dm::FTuple& tuple, acr_dm::FAttr& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
acr_dm::FAttr*       zs_attr_Last(acr_dm::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zs_attr_N(const acr_dm::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
acr_dm::FAttr*       zs_attr_Next(acr_dm::FAttr &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// Since the list is singly-linked, use linear search to locate the element.
void                 zs_attr_Remove(acr_dm::FTuple& tuple, acr_dm::FAttr& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zs_attr_RemoveAll(acr_dm::FTuple& tuple) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_dm::FAttr*       zs_attr_RemoveFirst(acr_dm::FTuple& tuple) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
acr_dm::FAttr&       zs_attr_qLast(acr_dm::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FTuple_Init(acr_dm::FTuple& tuple);
// cursor points to valid item
void                 tuple_zs_attr_curs_Reset(tuple_zs_attr_curs &curs, acr_dm::FTuple &parent);
// cursor points to valid item
bool                 tuple_zs_attr_curs_ValidQ(tuple_zs_attr_curs &curs);
// proceed to next item
void                 tuple_zs_attr_curs_Next(tuple_zs_attr_curs &curs);
// item access
acr_dm::FAttr&       tuple_zs_attr_curs_Access(tuple_zs_attr_curs &curs);
void                 FTuple_Uninit(acr_dm::FTuple& tuple) __attribute__((nothrow));

// --- acr_dm.FValue
// create: acr_dm.FDb.value (Lary)
// access: acr_dm.FAttr.zs_value (Llist)
struct FValue { // acr_dm.FValue
    acr_dm::FValue*   zs_value_next;   // zslist link; -1 means not-in-list
    algo::cstring     value;           //
    acr_dm::FAttr*    p_attr;          // reference to parent row
    acr_dm::Source    source;          //
private:
    friend acr_dm::FValue&      value_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_dm::FValue*      value_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 value_RemoveAll() __attribute__((nothrow));
    friend void                 value_RemoveLast() __attribute__((nothrow));
    FValue();
    ~FValue();
    FValue(const FValue&){ /*disallow copy constructor */}
    void operator =(const FValue&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
void                 FValue_Init(acr_dm::FValue& value);
void                 FValue_Uninit(acr_dm::FValue& value) __attribute__((nothrow));

// --- acr_dm.FieldId
#pragma pack(push,1)
struct FieldId { // acr_dm.FieldId: Field read helper
    i32   value;   //   -1
    inline operator acr_dm_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(acr_dm_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
acr_dm_FieldIdEnum   value_GetEnum(const acr_dm::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(acr_dm::FieldId& parent, acr_dm_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const acr_dm::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const acr_dm::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(acr_dm::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(acr_dm::FieldId& parent, algo::strptr rhs, acr_dm_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(acr_dm::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_dm::FieldId from an ascii string.
// The format of the string is the format of the acr_dm::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(acr_dm::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(acr_dm::FieldId& parent);
// print string representation of acr_dm::FieldId to string LHS, no header -- cprint:acr_dm.FieldId.String
void                 FieldId_Print(acr_dm::FieldId & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace acr_dm { // gen:ns_curstext

struct attr_zs_value_curs {// fcurs:acr_dm.FAttr.zs_value/curs
    typedef acr_dm::FValue ChildType;
    acr_dm::FValue* row;
    attr_zs_value_curs() {
        row = NULL;
    }
};


struct _db_tuple_curs {// cursor
    typedef acr_dm::FTuple ChildType;
    acr_dm::FDb *parent;
    i64 index;
    _db_tuple_curs(){ parent=NULL; index=0; }
};


struct _db_attr_curs {// cursor
    typedef acr_dm::FAttr ChildType;
    acr_dm::FDb *parent;
    i64 index;
    _db_attr_curs(){ parent=NULL; index=0; }
};


struct _db_value_curs {// cursor
    typedef acr_dm::FValue ChildType;
    acr_dm::FDb *parent;
    i64 index;
    _db_value_curs(){ parent=NULL; index=0; }
};


struct Source_source_bitcurs {// cursor
    typedef int& ChildType;
    u8* elems;
    int n_elems;
    int bit;
    Source_source_bitcurs() : elems(0), n_elems(0), bit(0) {}
};


struct tuple_zs_attr_curs {// fcurs:acr_dm.FTuple.zs_attr/curs
    typedef acr_dm::FAttr ChildType;
    acr_dm::FAttr* row;
    tuple_zs_attr_curs() {
        row = NULL;
    }
};

} // gen:ns_curstext
namespace acr_dm { // gen:ns_func
} // gen:ns_func
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const acr_dm::trace &row);// cfmt:acr_dm.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const acr_dm::FieldId &row);// cfmt:acr_dm.FieldId.String
}
