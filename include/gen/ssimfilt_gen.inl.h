//
// include/gen/ssimfilt_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.inl.h"
//#pragma endinclude

// --- ssimfilt.trace..Ctor
inline  ssimfilt::trace::trace() {
}

// --- ssimfilt.FDb.tuple.EmptyQ
// Return true if index is empty
inline bool ssimfilt::tuple_EmptyQ() {
    return _db.tuple_n == 0;
}

// --- ssimfilt.FDb.tuple.Find
// Look up row by row id. Return NULL if out of range
inline algo::Tuple* ssimfilt::tuple_Find(u64 t) {
    algo::Tuple *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.tuple_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.tuple_lary[bsr][index];
    }
    return retval;
}

// --- ssimfilt.FDb.tuple.Last
// Return pointer to last element of array, or NULL if array is empty
inline algo::Tuple* ssimfilt::tuple_Last() {
    return tuple_Find(u64(_db.tuple_n-1));
}

// --- ssimfilt.FDb.tuple.N
// Return number of items in the pool
inline i32 ssimfilt::tuple_N() {
    return _db.tuple_n;
}

// --- ssimfilt.FDb.tuple.qFind
// 'quick' Access row by row id. No bounds checking.
inline algo::Tuple& ssimfilt::tuple_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.tuple_lary[bsr][index];
}

// --- ssimfilt.FDb.matchfield.EmptyQ
// Return true if index is empty
inline bool ssimfilt::matchfield_EmptyQ() {
    return _db.matchfield_n == 0;
}

// --- ssimfilt.FDb.matchfield.Find
// Look up row by row id. Return NULL if out of range
inline ssimfilt::KVRegx* ssimfilt::matchfield_Find(u64 t) {
    ssimfilt::KVRegx *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.matchfield_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.matchfield_lary[bsr][index];
    }
    return retval;
}

// --- ssimfilt.FDb.matchfield.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssimfilt::KVRegx* ssimfilt::matchfield_Last() {
    return matchfield_Find(u64(_db.matchfield_n-1));
}

// --- ssimfilt.FDb.matchfield.N
// Return number of items in the pool
inline i32 ssimfilt::matchfield_N() {
    return _db.matchfield_n;
}

// --- ssimfilt.FDb.matchfield.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssimfilt::KVRegx& ssimfilt::matchfield_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.matchfield_lary[bsr][index];
}

// --- ssimfilt.FDb.selfield.EmptyQ
// Return true if index is empty
inline bool ssimfilt::selfield_EmptyQ() {
    return _db.selfield_n == 0;
}

// --- ssimfilt.FDb.selfield.Find
// Look up row by row id. Return NULL if out of range
inline ssimfilt::KVRegx* ssimfilt::selfield_Find(u64 t) {
    ssimfilt::KVRegx *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.selfield_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.selfield_lary[bsr][index];
    }
    return retval;
}

// --- ssimfilt.FDb.selfield.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssimfilt::KVRegx* ssimfilt::selfield_Last() {
    return selfield_Find(u64(_db.selfield_n-1));
}

// --- ssimfilt.FDb.selfield.N
// Return number of items in the pool
inline i32 ssimfilt::selfield_N() {
    return _db.selfield_n;
}

// --- ssimfilt.FDb.selfield.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssimfilt::KVRegx& ssimfilt::selfield_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.selfield_lary[bsr][index];
}

// --- ssimfilt.FDb.unstablefld.EmptyQ
// Return true if index is empty
inline bool ssimfilt::unstablefld_EmptyQ() {
    return _db.unstablefld_n == 0;
}

// --- ssimfilt.FDb.unstablefld.Find
// Look up row by row id. Return NULL if out of range
inline ssimfilt::FUnstablefld* ssimfilt::unstablefld_Find(u64 t) {
    ssimfilt::FUnstablefld *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.unstablefld_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.unstablefld_lary[bsr][index];
    }
    return retval;
}

// --- ssimfilt.FDb.unstablefld.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssimfilt::FUnstablefld* ssimfilt::unstablefld_Last() {
    return unstablefld_Find(u64(_db.unstablefld_n-1));
}

// --- ssimfilt.FDb.unstablefld.N
// Return number of items in the pool
inline i32 ssimfilt::unstablefld_N() {
    return _db.unstablefld_n;
}

// --- ssimfilt.FDb.unstablefld.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssimfilt::FUnstablefld& ssimfilt::unstablefld_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.unstablefld_lary[bsr][index];
}

// --- ssimfilt.FDb.ind_unstablefld.EmptyQ
// Return true if hash is empty
inline bool ssimfilt::ind_unstablefld_EmptyQ() {
    return _db.ind_unstablefld_n == 0;
}

// --- ssimfilt.FDb.ind_unstablefld.N
// Return number of items in the hash
inline i32 ssimfilt::ind_unstablefld_N() {
    return _db.ind_unstablefld_n;
}

// --- ssimfilt.FDb.tuple_curs.Reset
// cursor points to valid item
inline void ssimfilt::_db_tuple_curs_Reset(_db_tuple_curs &curs, ssimfilt::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssimfilt.FDb.tuple_curs.ValidQ
// cursor points to valid item
inline bool ssimfilt::_db_tuple_curs_ValidQ(_db_tuple_curs &curs) {
    return curs.index < _db.tuple_n;
}

// --- ssimfilt.FDb.tuple_curs.Next
// proceed to next item
inline void ssimfilt::_db_tuple_curs_Next(_db_tuple_curs &curs) {
    curs.index++;
}

// --- ssimfilt.FDb.tuple_curs.Access
// item access
inline algo::Tuple& ssimfilt::_db_tuple_curs_Access(_db_tuple_curs &curs) {
    return tuple_qFind(u64(curs.index));
}

// --- ssimfilt.FDb.matchfield_curs.Reset
// cursor points to valid item
inline void ssimfilt::_db_matchfield_curs_Reset(_db_matchfield_curs &curs, ssimfilt::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssimfilt.FDb.matchfield_curs.ValidQ
// cursor points to valid item
inline bool ssimfilt::_db_matchfield_curs_ValidQ(_db_matchfield_curs &curs) {
    return curs.index < _db.matchfield_n;
}

// --- ssimfilt.FDb.matchfield_curs.Next
// proceed to next item
inline void ssimfilt::_db_matchfield_curs_Next(_db_matchfield_curs &curs) {
    curs.index++;
}

// --- ssimfilt.FDb.matchfield_curs.Access
// item access
inline ssimfilt::KVRegx& ssimfilt::_db_matchfield_curs_Access(_db_matchfield_curs &curs) {
    return matchfield_qFind(u64(curs.index));
}

// --- ssimfilt.FDb.selfield_curs.Reset
// cursor points to valid item
inline void ssimfilt::_db_selfield_curs_Reset(_db_selfield_curs &curs, ssimfilt::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssimfilt.FDb.selfield_curs.ValidQ
// cursor points to valid item
inline bool ssimfilt::_db_selfield_curs_ValidQ(_db_selfield_curs &curs) {
    return curs.index < _db.selfield_n;
}

// --- ssimfilt.FDb.selfield_curs.Next
// proceed to next item
inline void ssimfilt::_db_selfield_curs_Next(_db_selfield_curs &curs) {
    curs.index++;
}

// --- ssimfilt.FDb.selfield_curs.Access
// item access
inline ssimfilt::KVRegx& ssimfilt::_db_selfield_curs_Access(_db_selfield_curs &curs) {
    return selfield_qFind(u64(curs.index));
}

// --- ssimfilt.FDb.unstablefld_curs.Reset
// cursor points to valid item
inline void ssimfilt::_db_unstablefld_curs_Reset(_db_unstablefld_curs &curs, ssimfilt::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssimfilt.FDb.unstablefld_curs.ValidQ
// cursor points to valid item
inline bool ssimfilt::_db_unstablefld_curs_ValidQ(_db_unstablefld_curs &curs) {
    return curs.index < _db.unstablefld_n;
}

// --- ssimfilt.FDb.unstablefld_curs.Next
// proceed to next item
inline void ssimfilt::_db_unstablefld_curs_Next(_db_unstablefld_curs &curs) {
    curs.index++;
}

// --- ssimfilt.FDb.unstablefld_curs.Access
// item access
inline ssimfilt::FUnstablefld& ssimfilt::_db_unstablefld_curs_Access(_db_unstablefld_curs &curs) {
    return unstablefld_qFind(u64(curs.index));
}

// --- ssimfilt.FUnstablefld..Init
// Set all fields to initial values.
inline void ssimfilt::FUnstablefld_Init(ssimfilt::FUnstablefld& unstablefld) {
    unstablefld.ind_unstablefld_next = (ssimfilt::FUnstablefld*)-1; // (ssimfilt.FDb.ind_unstablefld) not-in-hash
}

// --- ssimfilt.FUnstablefld..Ctor
inline  ssimfilt::FUnstablefld::FUnstablefld() {
    ssimfilt::FUnstablefld_Init(*this);
}

// --- ssimfilt.FUnstablefld..Dtor
inline  ssimfilt::FUnstablefld::~FUnstablefld() {
    ssimfilt::FUnstablefld_Uninit(*this);
}

// --- ssimfilt.FieldId.value.GetEnum
// Get value of field as enum type
inline ssimfilt_FieldIdEnum ssimfilt::value_GetEnum(const ssimfilt::FieldId& parent) {
    return ssimfilt_FieldIdEnum(parent.value);
}

// --- ssimfilt.FieldId.value.SetEnum
// Set value of field from enum type.
inline void ssimfilt::value_SetEnum(ssimfilt::FieldId& parent, ssimfilt_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ssimfilt.FieldId.value.Cast
inline  ssimfilt::FieldId::operator ssimfilt_FieldIdEnum() const {
    return ssimfilt_FieldIdEnum((*this).value);
}

// --- ssimfilt.FieldId..Init
// Set all fields to initial values.
inline void ssimfilt::FieldId_Init(ssimfilt::FieldId& parent) {
    parent.value = i32(-1);
}

// --- ssimfilt.FieldId..Ctor
inline  ssimfilt::FieldId::FieldId() {
    ssimfilt::FieldId_Init(*this);
}

// --- ssimfilt.FieldId..FieldwiseCtor
inline  ssimfilt::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- ssimfilt.FieldId..EnumCtor
inline  ssimfilt::FieldId::FieldId(ssimfilt_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- ssimfilt.KVRegx..Ctor
inline  ssimfilt::KVRegx::KVRegx() {
}

// --- ssimfilt.TableId.value.GetEnum
// Get value of field as enum type
inline ssimfilt_TableIdEnum ssimfilt::value_GetEnum(const ssimfilt::TableId& parent) {
    return ssimfilt_TableIdEnum(parent.value);
}

// --- ssimfilt.TableId.value.SetEnum
// Set value of field from enum type.
inline void ssimfilt::value_SetEnum(ssimfilt::TableId& parent, ssimfilt_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ssimfilt.TableId.value.Cast
inline  ssimfilt::TableId::operator ssimfilt_TableIdEnum() const {
    return ssimfilt_TableIdEnum((*this).value);
}

// --- ssimfilt.TableId..Init
// Set all fields to initial values.
inline void ssimfilt::TableId_Init(ssimfilt::TableId& parent) {
    parent.value = i32(-1);
}

// --- ssimfilt.TableId..Ctor
inline  ssimfilt::TableId::TableId() {
    ssimfilt::TableId_Init(*this);
}

// --- ssimfilt.TableId..FieldwiseCtor
inline  ssimfilt::TableId::TableId(i32 in_value)
    : value(in_value)
 {
}

// --- ssimfilt.TableId..EnumCtor
inline  ssimfilt::TableId::TableId(ssimfilt_TableIdEnum arg) {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssimfilt::trace &row) {// cfmt:ssimfilt.trace.String
    ssimfilt::trace_Print(const_cast<ssimfilt::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssimfilt::FieldId &row) {// cfmt:ssimfilt.FieldId.String
    ssimfilt::FieldId_Print(const_cast<ssimfilt::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssimfilt::TableId &row) {// cfmt:ssimfilt.TableId.String
    ssimfilt::TableId_Print(const_cast<ssimfilt::TableId&>(row), str);
    return str;
}
