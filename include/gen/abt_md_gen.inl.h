//
// include/gen/abt_md_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline abt_md::trace::trace() {
}


// --- abt_md.FDb.readme.EmptyQ
// Return true if index is empty
inline bool abt_md::readme_EmptyQ() {
    return _db.readme_n == 0;
}

// --- abt_md.FDb.readme.Find
// Look up row by row id. Return NULL if out of range
inline abt_md::FReadme* abt_md::readme_Find(u64 t) {
    abt_md::FReadme *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.readme_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.readme_lary[bsr][index];
    }
    return retval;
}

// --- abt_md.FDb.readme.Last
// Return pointer to last element of array, or NULL if array is empty
inline abt_md::FReadme* abt_md::readme_Last() {
    return readme_Find(u64(_db.readme_n-1));
}

// --- abt_md.FDb.readme.N
// Return number of items in the pool
inline i32 abt_md::readme_N() {
    return _db.readme_n;
}

// --- abt_md.FDb.readme.qFind
// 'quick' Access row by row id. No bounds checking.
inline abt_md::FReadme& abt_md::readme_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.readme_lary[bsr][index];
}

// --- abt_md.FDb.ind_readme.EmptyQ
// Return true if hash is empty
inline bool abt_md::ind_readme_EmptyQ() {
    return _db.ind_readme_n == 0;
}

// --- abt_md.FDb.ind_readme.N
// Return number of items in the hash
inline i32 abt_md::ind_readme_N() {
    return _db.ind_readme_n;
}

// --- abt_md.FDb.readme_curs.Reset
// cursor points to valid item
inline void abt_md::_db_readme_curs_Reset(_db_readme_curs &curs, abt_md::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- abt_md.FDb.readme_curs.ValidQ
// cursor points to valid item
inline bool abt_md::_db_readme_curs_ValidQ(_db_readme_curs &curs) {
    return curs.index < _db.readme_n;
}

// --- abt_md.FDb.readme_curs.Next
// proceed to next item
inline void abt_md::_db_readme_curs_Next(_db_readme_curs &curs) {
    curs.index++;
}

// --- abt_md.FDb.readme_curs.Access
// item access
inline abt_md::FReadme& abt_md::_db_readme_curs_Access(_db_readme_curs &curs) {
    return readme_qFind(u64(curs.index));
}
inline abt_md::FReadme::FReadme() {
    abt_md::FReadme_Init(*this);
}

inline abt_md::FReadme::~FReadme() {
    abt_md::FReadme_Uninit(*this);
}


// --- abt_md.FReadme..Init
// Set all fields to initial values.
inline void abt_md::FReadme_Init(abt_md::FReadme& readme) {
    readme.inl = bool(false);
    readme.sandbox = bool(false);
    readme.ind_readme_next = (abt_md::FReadme*)-1; // (abt_md.FDb.ind_readme) not-in-hash
}
inline abt_md::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline abt_md::FieldId::FieldId(abt_md_FieldIdEnum arg) { this->value = i32(arg); }
inline abt_md::FieldId::FieldId() {
    abt_md::FieldId_Init(*this);
}


// --- abt_md.FieldId.value.GetEnum
// Get value of field as enum type
inline abt_md_FieldIdEnum abt_md::value_GetEnum(const abt_md::FieldId& parent) {
    return abt_md_FieldIdEnum(parent.value);
}

// --- abt_md.FieldId.value.SetEnum
// Set value of field from enum type.
inline void abt_md::value_SetEnum(abt_md::FieldId& parent, abt_md_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- abt_md.FieldId.value.Cast
inline abt_md::FieldId::operator abt_md_FieldIdEnum () const {
    return abt_md_FieldIdEnum((*this).value);
}

// --- abt_md.FieldId..Init
// Set all fields to initial values.
inline void abt_md::FieldId_Init(abt_md::FieldId& parent) {
    parent.value = i32(-1);
}
inline abt_md::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline abt_md::TableId::TableId(abt_md_TableIdEnum arg) { this->value = i32(arg); }
inline abt_md::TableId::TableId() {
    abt_md::TableId_Init(*this);
}


// --- abt_md.TableId.value.GetEnum
// Get value of field as enum type
inline abt_md_TableIdEnum abt_md::value_GetEnum(const abt_md::TableId& parent) {
    return abt_md_TableIdEnum(parent.value);
}

// --- abt_md.TableId.value.SetEnum
// Set value of field from enum type.
inline void abt_md::value_SetEnum(abt_md::TableId& parent, abt_md_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- abt_md.TableId.value.Cast
inline abt_md::TableId::operator abt_md_TableIdEnum () const {
    return abt_md_TableIdEnum((*this).value);
}

// --- abt_md.TableId..Init
// Set all fields to initial values.
inline void abt_md::TableId_Init(abt_md::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const abt_md::trace &row) {// cfmt:abt_md.trace.String
    abt_md::trace_Print(const_cast<abt_md::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const abt_md::FieldId &row) {// cfmt:abt_md.FieldId.String
    abt_md::FieldId_Print(const_cast<abt_md::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const abt_md::TableId &row) {// cfmt:abt_md.TableId.String
    abt_md::TableId_Print(const_cast<abt_md::TableId&>(row), str);
    return str;
}
