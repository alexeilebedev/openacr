//
// include/gen/lib_ams_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//


#pragma once
#include "include/gen/ams_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/amsdb_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- lib_ams_CtlConnCaseEnum

enum lib_ams_CtlConnCaseEnum {                    // lib_ams.CtlConnCase.value
     lib_ams_CtlConnCase_ams_AlarmSyncMsg   = 18
    ,lib_ams_CtlConnCase_ams_HeartbeatMsg   = 16
    ,lib_ams_CtlConnCase_fm_AlarmMsg        = 17
};

enum { lib_ams_CtlConnCaseEnum_N = 3 };


// --- lib_ams_CtlMsgCaseEnum

enum lib_ams_CtlMsgCaseEnum {                          // lib_ams.CtlMsgCase.value
     lib_ams_CtlMsgCase_ams_DumpStreamTableMsg   = 12
    ,lib_ams_CtlMsgCase_ams_ProcAddMsg           = 4
    ,lib_ams_CtlMsgCase_ams_ProcRemoveMsg        = 5
    ,lib_ams_CtlMsgCase_ams_StreamHbMsg          = 3
};

enum { lib_ams_CtlMsgCaseEnum_N = 4 };


// --- lib_ams_FieldIdEnum

enum lib_ams_FieldIdEnum {        // lib_ams.FieldId.value
     lib_ams_FieldId_value   = 0
};

enum { lib_ams_FieldIdEnum_N = 1 };

namespace lib_ams { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace lib_ams { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace lib_ams { struct FStream; }
namespace lib_ams { struct FProc; }
namespace lib_ams { struct FStreamType; }
namespace lib_ams { struct _db_fdin_curs; }
namespace lib_ams { struct _db_cd_fdin_eof_curs; }
namespace lib_ams { struct _db_cd_fdin_read_curs; }
namespace lib_ams { struct _db_zd_flush_curs; }
namespace lib_ams { struct _db_stream_curs; }
namespace lib_ams { struct _db_cd_stream_hb_curs; }
namespace lib_ams { struct _db_cd_poll_read_curs; }
namespace lib_ams { struct _db_streamtype_curs; }
namespace lib_ams { struct _db_zd_ctlin_curs; }
namespace lib_ams { struct _db_zd_proc_curs; }
namespace lib_ams { struct proc_zd_member_byproc_curs; }
namespace lib_ams { struct FReadfile_buf_curs; }
namespace lib_ams { struct FReadfile_cbuf_curs; }
namespace lib_ams { struct FReadfile_offset_curs; }
namespace lib_ams { struct stream_zd_member_bystream_curs; }
namespace lib_ams { struct writefile_buf_curs; }
namespace lib_ams { struct writefile_cbuf_curs; }
namespace lib_ams { struct CtlConnCase; }
namespace lib_ams { struct CtlMsgCase; }
namespace lib_ams { struct trace; }
namespace lib_ams { struct FDb; }
namespace lib_ams { struct FFdin; }
namespace lib_ams { struct FMember; }
namespace lib_ams { struct FReadfile; }
namespace lib_ams { struct FWritefile; }
namespace lib_ams { struct FieldId; }
namespace lib_ams { extern struct lib_ams::FDb _db; }
namespace lib_ams { // hook_fcn_typedef
    typedef void (*stream_h_msg_hook)(void* userctx, ams::MsgHeader& arg); // hook:lib_ams.FStream.h_msg
    typedef void (*stream_h_msg_orig_hook)(void* userctx, ams::MsgHeader& arg); // hook:lib_ams.FStream.h_msg_orig
} // hook_decl
namespace lib_ams { // gen:ns_gsymbol
    extern const char* amsdb_proctype__0; // "0"
    extern const char* amsdb_proctype_amstest; // "amstest"
} // gen:ns_gsymbol
namespace lib_ams { // gen:ns_gsymbol
    extern const char* amsdb_streamtype__0; // "0"
    extern const char* amsdb_streamtype_ctl; // "ctl"
    extern const char* amsdb_streamtype_io; // "io"
    extern const char* amsdb_streamtype_out; // "out"
    extern const char* amsdb_streamtype_trace; // "trace"
} // gen:ns_gsymbol
namespace lib_ams {
struct FStream;
void *BeginWrite(lib_ams::FStream &stream, int len);
void EndWrite(lib_ams::FStream &stream, void *msg, int len);
} // namespace lib_ams
namespace lib_ams { // gen:ns_print_struct

// --- lib_ams.CtlConnCase
#pragma pack(push,1)
struct CtlConnCase { // lib_ams.CtlConnCase: Enum for dispatch lib_ams.CtlConn
    u32   value;   //   0
    inline operator lib_ams_CtlConnCaseEnum() const;
    explicit CtlConnCase(u32                            in_value);
    CtlConnCase(lib_ams_CtlConnCaseEnum arg);
    CtlConnCase();
};
#pragma pack(pop)

// Get value of field as enum type
lib_ams_CtlConnCaseEnum value_GetEnum(const lib_ams::CtlConnCase& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(lib_ams::CtlConnCase& parent, lib_ams_CtlConnCaseEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const lib_ams::CtlConnCase& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const lib_ams::CtlConnCase& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(lib_ams::CtlConnCase& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(lib_ams::CtlConnCase& parent, algo::strptr rhs, lib_ams_CtlConnCaseEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(lib_ams::CtlConnCase& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_ams::CtlConnCase from an ascii string.
// The format of the string is the format of the lib_ams::CtlConnCase's only field
bool                 CtlConnCase_ReadStrptrMaybe(lib_ams::CtlConnCase &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 CtlConnCase_Init(lib_ams::CtlConnCase& parent);

// --- lib_ams.CtlMsgCase
#pragma pack(push,1)
struct CtlMsgCase { // lib_ams.CtlMsgCase: Enum for dispatch lib_ams.CtlMsg
    u32   value;   //   0
    inline operator lib_ams_CtlMsgCaseEnum() const;
    explicit CtlMsgCase(u32                            in_value);
    CtlMsgCase(lib_ams_CtlMsgCaseEnum arg);
    CtlMsgCase();
};
#pragma pack(pop)

// Get value of field as enum type
lib_ams_CtlMsgCaseEnum value_GetEnum(const lib_ams::CtlMsgCase& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(lib_ams::CtlMsgCase& parent, lib_ams_CtlMsgCaseEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const lib_ams::CtlMsgCase& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const lib_ams::CtlMsgCase& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(lib_ams::CtlMsgCase& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(lib_ams::CtlMsgCase& parent, algo::strptr rhs, lib_ams_CtlMsgCaseEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(lib_ams::CtlMsgCase& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_ams::CtlMsgCase from an ascii string.
// The format of the string is the format of the lib_ams::CtlMsgCase's only field
bool                 CtlMsgCase_ReadStrptrMaybe(lib_ams::CtlMsgCase &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 CtlMsgCase_Init(lib_ams::CtlMsgCase& parent);

// --- lib_ams.trace
#pragma pack(push,1)
struct trace { // lib_ams.trace
    u64   n_fdin_drop_notgt;    //   0  # of fdin messages dropped because no target stream found
    u64   n_fdin_posted;        //   0  # of fdin messages posted to target stream
    u64   n_fdin_pushback;      //   0  # of fdin messages paused because target stream blocked
    u64   n_write_block_spin;   //   0  # Spin cycles spent waiting for write budget
    trace();
};
#pragma pack(pop)

// Set all fields to initial values.
void                 trace_Init(lib_ams::trace& parent);
// print string representation of lib_ams::trace to string LHS, no header -- cprint:lib_ams.trace.String
void                 trace_Print(lib_ams::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- lib_ams.FDb
// create: lib_ams.FDb._db (Global)
struct FDb { // lib_ams.FDb
    lib_ams::FFdin*          fdin_lary[32];                  // level array
    i32                      fdin_n;                         // number of elements in array
    lib_ams::FFdin*          cd_fdin_eof_head;               // zero-terminated doubly linked list
    i32                      cd_fdin_eof_n;                  // zero-terminated doubly linked list
    lib_ams::FFdin*          cd_fdin_read_head;              // zero-terminated doubly linked list
    i32                      cd_fdin_read_n;                 // zero-terminated doubly linked list
    lib_ams::FWritefile*     zd_flush_head;                  // zero-terminated doubly linked list
    i32                      zd_flush_n;                     // zero-terminated doubly linked list
    lib_ams::FWritefile*     zd_flush_tail;                  // pointer to last element
    algo::SchedTime          zd_flush_next;                  // lib_ams.FDb.zd_flush                                               Next invocation time
    algo::SchedTime          zd_flush_delay;                 // lib_ams.FDb.zd_flush                                               Delay between invocations
    lib_ams::FStream*        stream_lary[32];                // level array
    i32                      stream_n;                       // number of elements in array
    lib_ams::FStream**       ind_stream_buckets_elems;       // pointer to bucket array
    i32                      ind_stream_buckets_n;           // number of elements in bucket array
    i32                      ind_stream_n;                   // number of elements in the hash table
    lib_ams::FStream*        cd_stream_hb_head;              // zero-terminated doubly linked list
    i32                      cd_stream_hb_n;                 // zero-terminated doubly linked list
    algo::SchedTime          cd_stream_hb_next;              // lib_ams.FDb.cd_stream_hb                                           Next invocation time
    algo::SchedTime          cd_stream_hb_delay;             // lib_ams.FDb.cd_stream_hb                                           Delay between invocations
    ams::ProcId              proc_id;                        // Process id, e.g. amstest-0
    i32                      shmem_size;                     //   32768  Default stream shared memory size
    i32                      max_msg_size;                   //   4096  Maximum message size
    lib_ams::FStream*        cd_poll_read_head;              // zero-terminated doubly linked list
    i32                      cd_poll_read_n;                 // zero-terminated doubly linked list
    algo::cstring            file_prefix;                    //   ""  File prefix for all streams
    u64                      proc_blocksize;                 // # bytes per block
    lib_ams::FProc*          proc_free;                      //
    lib_ams::FProc**         ind_proc_buckets_elems;         // pointer to bucket array
    i32                      ind_proc_buckets_n;             // number of elements in bucket array
    i32                      ind_proc_n;                     // number of elements in the hash table
    u64                      member_blocksize;               // # bytes per block
    lib_ams::FMember*        member_free;                    //
    lib_ams::FMember**       ind_member_buckets_elems;       // pointer to bucket array
    i32                      ind_member_buckets_n;           // number of elements in bucket array
    i32                      ind_member_n;                   // number of elements in the hash table
    lib_ams::FStreamType*    streamtype_lary[32];            // level array
    i32                      streamtype_n;                   // number of elements in array
    lib_ams::FStreamType**   ind_streamtype_buckets_elems;   // pointer to bucket array
    i32                      ind_streamtype_buckets_n;       // number of elements in bucket array
    i32                      ind_streamtype_n;               // number of elements in the hash table
    lib_ams::FStream*        zd_ctlin_head;                  // zero-terminated doubly linked list
    i32                      zd_ctlin_n;                     // zero-terminated doubly linked list
    lib_ams::FStream*        zd_ctlin_tail;                  // pointer to last element
    bool                     stream_files_cleaned;           //   false
    bool                     shmem_mode;                     //   false
    algo::ByteAry            fdin_buf;                       //
    ams::StreamId            dflt_stream_id;                 //
    lib_ams::FProc*          zd_proc_head;                   // zero-terminated doubly linked list
    i32                      zd_proc_n;                      // zero-terminated doubly linked list
    lib_ams::FProc*          zd_proc_tail;                   // pointer to last element
    lib_ams::FStream*        c_stream_ctl;                   // Ctl output stream (process events). optional pointer
    algo::cstring            expect_buf;                     // Buffer containing outputs produced since last input
    algo::cstring            expect_str;                     // If non-empty, pause reading inputs until this string is non-empty
    algo_lib::FTimehook      th_expect;                      // Timeout for expect message
    i32                      expect_pos;                     //   0  Match position within expect buf
    double                   expect_timeout;                 //   10.0  Default expect timeout
    algo::ByteAry            fmt_buf;                        //
    algo_lib::Regx           regx_trace;                     // Sql Regx
    lib_ams::FStream*        c_stream_out;                   // Output stream. optional pointer
    lib_ams::trace           trace;                          //
};

// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ams::FFdin&      fdin_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
lib_ams::FFdin*      fdin_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                fdin_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 fdin_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
lib_ams::FFdin*      fdin_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
lib_ams::FFdin*      fdin_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  fdin_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 fdin_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 fdin_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
lib_ams::FFdin&      fdin_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 fdin_XrefMaybe(lib_ams::FFdin &row);

// Return true if index is empty
bool                 cd_fdin_eof_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FFdin*      cd_fdin_eof_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_fdin_eof_InLlistQ(lib_ams::FFdin& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_fdin_eof_Insert(lib_ams::FFdin& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FFdin*      cd_fdin_eof_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  cd_fdin_eof_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FFdin*      cd_fdin_eof_Next(lib_ams::FFdin &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FFdin*      cd_fdin_eof_Prev(lib_ams::FFdin &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_fdin_eof_Remove(lib_ams::FFdin& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_fdin_eof_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
lib_ams::FFdin*      cd_fdin_eof_RemoveFirst() __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
lib_ams::FFdin*      cd_fdin_eof_RotateFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FFdin&      cd_fdin_eof_qLast() __attribute__((__warn_unused_result__, nothrow));
void                 cd_fdin_eof_Step() __attribute__((nothrow));

// Return true if index is empty
bool                 cd_fdin_read_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FFdin*      cd_fdin_read_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_fdin_read_InLlistQ(lib_ams::FFdin& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_fdin_read_Insert(lib_ams::FFdin& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FFdin*      cd_fdin_read_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  cd_fdin_read_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FFdin*      cd_fdin_read_Next(lib_ams::FFdin &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FFdin*      cd_fdin_read_Prev(lib_ams::FFdin &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_fdin_read_Remove(lib_ams::FFdin& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_fdin_read_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
lib_ams::FFdin*      cd_fdin_read_RemoveFirst() __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
lib_ams::FFdin*      cd_fdin_read_RotateFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FFdin&      cd_fdin_read_qLast() __attribute__((__warn_unused_result__, nothrow));
void                 cd_fdin_read_Step() __attribute__((nothrow));

// Main step
void                 Step();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 writefile_XrefMaybe(lib_ams::FWritefile &row);

// Return true if index is empty
bool                 zd_flush_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FWritefile* zd_flush_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_flush_InLlistQ(lib_ams::FWritefile& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_flush_Insert(lib_ams::FWritefile& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FWritefile* zd_flush_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_flush_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FWritefile* zd_flush_Next(lib_ams::FWritefile &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FWritefile* zd_flush_Prev(lib_ams::FWritefile &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_flush_Remove(lib_ams::FWritefile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_flush_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
lib_ams::FWritefile* zd_flush_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FWritefile& zd_flush_qLast() __attribute__((__warn_unused_result__, nothrow));
// First element of index changed.
void                 zd_flush_FirstChanged() __attribute__((nothrow));
void                 zd_flush_Step() __attribute__((nothrow));
// Set inter-step delay to specified value.
// The difference between new delay and current delay is added to the next scheduled time.
void                 zd_flush_SetDelay(algo::SchedTime delay) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ams::FStream&    stream_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
lib_ams::FStream*    stream_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                stream_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 stream_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
lib_ams::FStream*    stream_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
lib_ams::FStream*    stream_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  stream_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 stream_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 stream_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
lib_ams::FStream&    stream_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 stream_XrefMaybe(lib_ams::FStream &row);

// Return true if hash is empty
bool                 ind_stream_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
lib_ams::FStream*    ind_stream_Find(ams::StreamId key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
lib_ams::FStream&    ind_stream_FindX(ams::StreamId key);
// Return number of items in the hash
i32                  ind_stream_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_stream_InsertMaybe(lib_ams::FStream& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_stream_Remove(lib_ams::FStream& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_stream_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
bool                 cd_stream_hb_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FStream*    cd_stream_hb_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_stream_hb_InLlistQ(lib_ams::FStream& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_stream_hb_Insert(lib_ams::FStream& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FStream*    cd_stream_hb_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  cd_stream_hb_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FStream*    cd_stream_hb_Next(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FStream*    cd_stream_hb_Prev(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_stream_hb_Remove(lib_ams::FStream& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_stream_hb_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
lib_ams::FStream*    cd_stream_hb_RemoveFirst() __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
lib_ams::FStream*    cd_stream_hb_RotateFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FStream&    cd_stream_hb_qLast() __attribute__((__warn_unused_result__, nothrow));
// First element of index changed.
void                 cd_stream_hb_FirstChanged() __attribute__((nothrow));
void                 cd_stream_hb_Step() __attribute__((nothrow));
// Set inter-step delay to specified value.
// The difference between new delay and current delay is added to the next scheduled time.
void                 cd_stream_hb_SetDelay(algo::SchedTime delay) __attribute__((nothrow));

// Return true if index is empty
bool                 cd_poll_read_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FStream*    cd_poll_read_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_poll_read_InLlistQ(lib_ams::FStream& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_poll_read_Insert(lib_ams::FStream& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FStream*    cd_poll_read_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  cd_poll_read_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FStream*    cd_poll_read_Next(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FStream*    cd_poll_read_Prev(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_poll_read_Remove(lib_ams::FStream& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_poll_read_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
lib_ams::FStream*    cd_poll_read_RemoveFirst() __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
lib_ams::FStream*    cd_poll_read_RotateFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FStream&    cd_poll_read_qLast() __attribute__((__warn_unused_result__, nothrow));
void                 cd_poll_read_Step() __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ams::FProc&      proc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
lib_ams::FProc*      proc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
void                 proc_Delete(lib_ams::FProc &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
void*                proc_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
void                 proc_FreeMem(lib_ams::FProc &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64                  proc_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64                  proc_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 proc_XrefMaybe(lib_ams::FProc &row);

// Return true if hash is empty
bool                 ind_proc_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
lib_ams::FProc*      ind_proc_Find(ams::ProcId key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
lib_ams::FProc&      ind_proc_FindX(ams::ProcId key);
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_ams::FProc&      ind_proc_GetOrCreate(ams::ProcId key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_proc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_proc_InsertMaybe(lib_ams::FProc& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_proc_Remove(lib_ams::FProc& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_proc_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ams::FMember&    member_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
lib_ams::FMember*    member_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
void                 member_Delete(lib_ams::FMember &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
void*                member_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
void                 member_FreeMem(lib_ams::FMember &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64                  member_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64                  member_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 member_XrefMaybe(lib_ams::FMember &row);

// Return true if hash is empty
bool                 ind_member_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
lib_ams::FMember*    ind_member_Find(ams::Member key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
lib_ams::FMember&    ind_member_FindX(ams::Member key);
// Return number of items in the hash
i32                  ind_member_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_member_InsertMaybe(lib_ams::FMember& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_member_Remove(lib_ams::FMember& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_member_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ams::FStreamType& streamtype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
lib_ams::FStreamType* streamtype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ams::FStreamType* streamtype_InsertMaybe(const amsdb::StreamType &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                streamtype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 streamtype_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
lib_ams::FStreamType* streamtype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
lib_ams::FStreamType* streamtype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  streamtype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 streamtype_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 streamtype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
lib_ams::FStreamType& streamtype_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 streamtype_XrefMaybe(lib_ams::FStreamType &row);

// Return true if hash is empty
bool                 ind_streamtype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
lib_ams::FStreamType* ind_streamtype_Find(ams::StreamType key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
lib_ams::FStreamType& ind_streamtype_FindX(ams::StreamType key);
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_ams::FStreamType& ind_streamtype_GetOrCreate(ams::StreamType key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_streamtype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_streamtype_InsertMaybe(lib_ams::FStreamType& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_streamtype_Remove(lib_ams::FStreamType& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_streamtype_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
bool                 zd_ctlin_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FStream*    zd_ctlin_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_ctlin_InLlistQ(lib_ams::FStream& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_ctlin_Insert(lib_ams::FStream& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FStream*    zd_ctlin_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_ctlin_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FStream*    zd_ctlin_Next(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FStream*    zd_ctlin_Prev(lib_ams::FStream &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_ctlin_Remove(lib_ams::FStream& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_ctlin_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_ams::FStream*    zd_ctlin_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FStream&    zd_ctlin_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
bool                 zd_proc_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FProc*      zd_proc_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_proc_InLlistQ(lib_ams::FProc& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_proc_Insert(lib_ams::FProc& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FProc*      zd_proc_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_proc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FProc*      zd_proc_Next(lib_ams::FProc &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FProc*      zd_proc_Prev(lib_ams::FProc &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_proc_Remove(lib_ams::FProc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_proc_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_ams::FProc*      zd_proc_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FProc&      zd_proc_qLast() __attribute__((__warn_unused_result__, nothrow));

// Print back to string
void                 regx_trace_Print(algo::cstring &out) __attribute__((nothrow));

// cursor points to valid item
void                 _db_fdin_curs_Reset(_db_fdin_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_fdin_curs_ValidQ(_db_fdin_curs &curs);
// proceed to next item
void                 _db_fdin_curs_Next(_db_fdin_curs &curs);
// item access
lib_ams::FFdin&      _db_fdin_curs_Access(_db_fdin_curs &curs);
// cursor points to valid item
void                 _db_cd_fdin_eof_curs_Reset(_db_cd_fdin_eof_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_cd_fdin_eof_curs_ValidQ(_db_cd_fdin_eof_curs &curs);
// proceed to next item
void                 _db_cd_fdin_eof_curs_Next(_db_cd_fdin_eof_curs &curs);
// item access
lib_ams::FFdin&      _db_cd_fdin_eof_curs_Access(_db_cd_fdin_eof_curs &curs);
// cursor points to valid item
void                 _db_cd_fdin_read_curs_Reset(_db_cd_fdin_read_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_cd_fdin_read_curs_ValidQ(_db_cd_fdin_read_curs &curs);
// proceed to next item
void                 _db_cd_fdin_read_curs_Next(_db_cd_fdin_read_curs &curs);
// item access
lib_ams::FFdin&      _db_cd_fdin_read_curs_Access(_db_cd_fdin_read_curs &curs);
// cursor points to valid item
void                 _db_zd_flush_curs_Reset(_db_zd_flush_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_zd_flush_curs_ValidQ(_db_zd_flush_curs &curs);
// proceed to next item
void                 _db_zd_flush_curs_Next(_db_zd_flush_curs &curs);
// item access
lib_ams::FWritefile& _db_zd_flush_curs_Access(_db_zd_flush_curs &curs);
// cursor points to valid item
void                 _db_stream_curs_Reset(_db_stream_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_stream_curs_ValidQ(_db_stream_curs &curs);
// proceed to next item
void                 _db_stream_curs_Next(_db_stream_curs &curs);
// item access
lib_ams::FStream&    _db_stream_curs_Access(_db_stream_curs &curs);
// cursor points to valid item
void                 _db_cd_stream_hb_curs_Reset(_db_cd_stream_hb_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_cd_stream_hb_curs_ValidQ(_db_cd_stream_hb_curs &curs);
// proceed to next item
void                 _db_cd_stream_hb_curs_Next(_db_cd_stream_hb_curs &curs);
// item access
lib_ams::FStream&    _db_cd_stream_hb_curs_Access(_db_cd_stream_hb_curs &curs);
// cursor points to valid item
void                 _db_cd_poll_read_curs_Reset(_db_cd_poll_read_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_cd_poll_read_curs_ValidQ(_db_cd_poll_read_curs &curs);
// proceed to next item
void                 _db_cd_poll_read_curs_Next(_db_cd_poll_read_curs &curs);
// item access
lib_ams::FStream&    _db_cd_poll_read_curs_Access(_db_cd_poll_read_curs &curs);
// cursor points to valid item
void                 _db_streamtype_curs_Reset(_db_streamtype_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_streamtype_curs_ValidQ(_db_streamtype_curs &curs);
// proceed to next item
void                 _db_streamtype_curs_Next(_db_streamtype_curs &curs);
// item access
lib_ams::FStreamType& _db_streamtype_curs_Access(_db_streamtype_curs &curs);
// cursor points to valid item
void                 _db_zd_ctlin_curs_Reset(_db_zd_ctlin_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_zd_ctlin_curs_ValidQ(_db_zd_ctlin_curs &curs);
// proceed to next item
void                 _db_zd_ctlin_curs_Next(_db_zd_ctlin_curs &curs);
// item access
lib_ams::FStream&    _db_zd_ctlin_curs_Access(_db_zd_ctlin_curs &curs);
// cursor points to valid item
void                 _db_zd_proc_curs_Reset(_db_zd_proc_curs &curs, lib_ams::FDb &parent);
// cursor points to valid item
bool                 _db_zd_proc_curs_ValidQ(_db_zd_proc_curs &curs);
// proceed to next item
void                 _db_zd_proc_curs_Next(_db_zd_proc_curs &curs);
// item access
lib_ams::FProc&      _db_zd_proc_curs_Access(_db_zd_proc_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- lib_ams.FFdin
// create: lib_ams.FDb.fdin (Lary)
// global access: cd_fdin_eof (Llist)
// global access: cd_fdin_read (Llist)
struct FFdin { // lib_ams.FFdin: FD input (normally stdin)
    lib_ams::FFdin*     cd_fdin_eof_next;    // zslist link; -1 means not-in-list
    lib_ams::FFdin*     cd_fdin_eof_prev;    // previous element
    lib_ams::FFdin*     cd_fdin_read_next;   // zslist link; -1 means not-in-list
    lib_ams::FFdin*     cd_fdin_read_prev;   // previous element
    algo_lib::FIohook   iohook;              //
    u8                  in_elems[8192];      // pointer to elements of inline array
    i32                 in_start;            // beginning of valid bytes (in bytes)
    i32                 in_end;              // end of valid bytes (in bytes)
    bool                in_eof;              // no more data will be written to buffer
    algo::Errcode       in_err;              // system error code
    bool                in_msgvalid;         // current message is valid
    i32                 in_msglen;           // current message length
    algo_lib::FIohook   in_iohook;           // edge-triggered hook for refilling buffer
    bool                in_epoll_enable;     // use epoll?
    enum { in_max = 8192 };
private:
    friend lib_ams::FFdin&      fdin_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_ams::FFdin*      fdin_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 fdin_RemoveAll() __attribute__((nothrow));
    friend void                 fdin_RemoveLast() __attribute__((nothrow));
    FFdin();
    ~FFdin();
    FFdin(const FFdin&){ /*disallow copy constructor */}
    void operator =(const FFdin&){ /*disallow direct assignment */}
};

// Attach fbuf to Iohook for reading
// Attach file descriptor and begin reading using edge-triggered epoll.
// File descriptor becomes owned by lib_ams::FFdin.in via FIohook field.
// Whenever the file descriptor becomes readable, insert fdin into cd_fdin_read.
void                 in_BeginRead(lib_ams::FFdin& fdin, algo::Fildes fd) __attribute__((nothrow));
// Set EOF flag
void                 in_EndRead(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Detect incoming message in buffer and return it
// Look for valid message at current position in the buffer.
// If message is already there, return a pointer to it. Do not skip message (call SkipMsg to do that).
// If there is no message, read once from underlying file descriptor and try again.
// The message is found by looking for delimiter '\n'.
// The return value is an aryptr. If ret.elems is non-NULL, the message is valid (possibly empty).
// If ret.elems is NULL, no message can be extracted from buffer.
// The returned aryptr excludes the trailing deliminter.
// SkipMsg will skip both the line and the deliminter.
// A partial line at the end of input is NOT returned (TODO?)
//
algo::aryptr<char>   in_GetMsg(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Return max. number of bytes in the buffer.
i32                  in_Max(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Return number of bytes in the buffer.
i32                  in_N(lib_ams::FFdin& fdin) __attribute__((__warn_unused_result__, nothrow, pure));
// Refill buffer. Return false if no further refill possible (input buffer exhausted)
bool                 in_Refill(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Empty bfufer
// Discard contents of the buffer.
void                 in_RemoveAll(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Skip N bytes when reading
// Mark some buffer contents as read.
//
void                 in_SkipBytes(lib_ams::FFdin& fdin, int n) __attribute__((nothrow));
// Skip current message, if any
// Skip current message, if any.
void                 in_SkipMsg(lib_ams::FFdin& fdin) __attribute__((nothrow));
// Attempt to write buffer contents to fd
// Write bytes to the buffer. If the entire block is written, return true,
// Otherwise return false.
// Bytes in the buffer are potentially shifted left to make room for the message.
//
bool                 in_WriteAll(lib_ams::FFdin& fdin, u8 *in, i32 in_n) __attribute__((nothrow));

// Set all fields to initial values.
void                 FFdin_Init(lib_ams::FFdin& fdin);
void                 FFdin_Uninit(lib_ams::FFdin& fdin) __attribute__((nothrow));

// --- lib_ams.FMember
// create: lib_ams.FDb.member (Tpool)
// global access: ind_member (Thash)
// access: lib_ams.FProc.zd_member_byproc (Llist)
// access: lib_ams.FStream.zd_member_bystream (Llist)
struct FMember { // lib_ams.FMember
    lib_ams::FMember*   member_next;               // Pointer to next free element int tpool
    lib_ams::FMember*   ind_member_next;           // hash next
    ams::Member         member;                    //
    ams::StreamPos      pos;                       //
    algo::UnTime        last_hb;                   // Time last heartbeat received
    u32                 budget;                    //   0
    lib_ams::FStream*   p_stream;                  // reference to parent row
    lib_ams::FProc*     p_proc;                    // reference to parent row
    lib_ams::FMember*   zd_member_byproc_next;     // zslist link; -1 means not-in-list
    lib_ams::FMember*   zd_member_byproc_prev;     // previous element
    lib_ams::FMember*   zd_member_bystream_next;   // zslist link; -1 means not-in-list
    lib_ams::FMember*   zd_member_bystream_prev;   // previous element
private:
    friend lib_ams::FMember&    member_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_ams::FMember*    member_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 member_Delete(lib_ams::FMember &row) __attribute__((nothrow));
    FMember();
    ~FMember();
    FMember(const FMember&){ /*disallow copy constructor */}
    void operator =(const FMember&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
void                 FMember_Init(lib_ams::FMember& member);
void                 FMember_Uninit(lib_ams::FMember& member) __attribute__((nothrow));

// --- lib_ams.FProc
// create: lib_ams.FDb.proc (Tpool)
// global access: ind_proc (Thash)
// global access: zd_proc (Llist)
// access: lib_ams.FMember.p_proc (Upptr)
struct FProc { // lib_ams.FProc
    lib_ams::FProc*     proc_next;               // Pointer to next free element int tpool
    lib_ams::FProc*     ind_proc_next;           // hash next
    lib_ams::FProc*     zd_proc_next;            // zslist link; -1 means not-in-list
    lib_ams::FProc*     zd_proc_prev;            // previous element
    ams::ProcId         proc_id;                 //
    lib_ams::FMember*   zd_member_byproc_head;   // zero-terminated doubly linked list
    i32                 zd_member_byproc_n;      // zero-terminated doubly linked list
    lib_ams::FMember*   zd_member_byproc_tail;   // pointer to last element
    i32                 pid;                     //   0
    i32                 status;                  //   0
    algo::cstring       logbuf;                  //
    u32                 hbtimeout;               //   0
    bool                critical;                //   false
    bool                realtime;                //   false
private:
    friend lib_ams::FProc&      proc_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_ams::FProc*      proc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 proc_Delete(lib_ams::FProc &row) __attribute__((nothrow));
    FProc();
    ~FProc();
    FProc(const FProc&){ /*disallow copy constructor */}
    void operator =(const FProc&){ /*disallow direct assignment */}
};

// Delete all elements in the linked list.
void                 zd_member_byproc_Cascdel(lib_ams::FProc& proc) __attribute__((nothrow));
// Return true if index is empty
bool                 zd_member_byproc_EmptyQ(lib_ams::FProc& proc) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FMember*    zd_member_byproc_First(lib_ams::FProc& proc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_member_byproc_InLlistQ(lib_ams::FMember& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_member_byproc_Insert(lib_ams::FProc& proc, lib_ams::FMember& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FMember*    zd_member_byproc_Last(lib_ams::FProc& proc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_member_byproc_N(const lib_ams::FProc& proc) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FMember*    zd_member_byproc_Next(lib_ams::FMember &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FMember*    zd_member_byproc_Prev(lib_ams::FMember &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_member_byproc_Remove(lib_ams::FProc& proc, lib_ams::FMember& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_member_byproc_RemoveAll(lib_ams::FProc& proc) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_ams::FMember*    zd_member_byproc_RemoveFirst(lib_ams::FProc& proc) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FMember&    zd_member_byproc_qLast(lib_ams::FProc& proc) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FProc_Init(lib_ams::FProc& proc);
// cursor points to valid item
void                 proc_zd_member_byproc_curs_Reset(proc_zd_member_byproc_curs &curs, lib_ams::FProc &parent);
// cursor points to valid item
bool                 proc_zd_member_byproc_curs_ValidQ(proc_zd_member_byproc_curs &curs);
// proceed to next item
void                 proc_zd_member_byproc_curs_Next(proc_zd_member_byproc_curs &curs);
// item access
lib_ams::FMember&    proc_zd_member_byproc_curs_Access(proc_zd_member_byproc_curs &curs);
void                 FProc_Uninit(lib_ams::FProc& proc) __attribute__((nothrow));

// --- lib_ams.FReadfile
struct FReadfile { // lib_ams.FReadfile
    algo::cstring   filename;       //
    algo::Fildes    fd;             //
    bool            eof;            //   false  EOF flag
    bool            fail;           //   false  Failure flag
    u8*             buf_elems;      // pointer to elements
    u32             buf_n;          // number of elements in array
    u32             buf_max;        // max. capacity of array before realloc
    u8*             cbuf_elems;     // pointer to elements
    u32             cbuf_n;         // number of elements in array
    u32             cbuf_max;       // max. capacity of array before realloc
    ams::MsgBlock   block;          //
    u32*            offset_elems;   // pointer to elements
    u32             offset_n;       // number of elements in array
    u32             offset_max;     // max. capacity of array before realloc
    FReadfile();
    ~FReadfile();
private:
    // user-defined fcleanup on lib_ams.FReadfile.fd prevents copy
    // reftype Tary of lib_ams.FReadfile.buf prohibits copy
    // reftype Tary of lib_ams.FReadfile.cbuf prohibits copy
    // ... and several other reasons
    FReadfile(const FReadfile&){ /*disallow copy constructor */}
    void operator =(const FReadfile&){ /*disallow direct assignment */}
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fd of lib_ams::FReadfile
void                 fd_Cleanup(lib_ams::FReadfile& parent) __attribute__((nothrow));

// Reserve space. Insert element at the end
// The new element is initialized to a default value
u8&                  buf_Alloc(lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u8&                  buf_AllocAt(lib_ams::FReadfile& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     buf_AllocN(lib_ams::FReadfile& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 buf_EmptyQ(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
u8*                  buf_Find(lib_ams::FReadfile& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<u8>     buf_Getary(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
u8*                  buf_Last(lib_ams::FReadfile& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  buf_Max(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return number of items in the array
i32                  buf_N(const lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 buf_Remove(lib_ams::FReadfile& parent, u32 i) __attribute__((nothrow));
void                 buf_RemoveAll(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 buf_RemoveLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 buf_Reserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 buf_AbsReserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
void                 buf_Setary(lib_ams::FReadfile& parent, lib_ams::FReadfile &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
u8&                  buf_qFind(lib_ams::FReadfile& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
u8&                  buf_qLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return row id of specified element
u64                  buf_rowid_Get(lib_ams::FReadfile& parent, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     buf_AllocNVal(lib_ams::FReadfile& parent, int n_elems, const u8& val) __attribute__((__warn_unused_result__, nothrow));

// Reserve space. Insert element at the end
// The new element is initialized to a default value
u8&                  cbuf_Alloc(lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u8&                  cbuf_AllocAt(lib_ams::FReadfile& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     cbuf_AllocN(lib_ams::FReadfile& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 cbuf_EmptyQ(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
u8*                  cbuf_Find(lib_ams::FReadfile& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<u8>     cbuf_Getary(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
u8*                  cbuf_Last(lib_ams::FReadfile& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  cbuf_Max(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return number of items in the array
i32                  cbuf_N(const lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 cbuf_Remove(lib_ams::FReadfile& parent, u32 i) __attribute__((nothrow));
void                 cbuf_RemoveAll(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 cbuf_RemoveLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 cbuf_Reserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 cbuf_AbsReserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
void                 cbuf_Setary(lib_ams::FReadfile& parent, lib_ams::FReadfile &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
u8&                  cbuf_qFind(lib_ams::FReadfile& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
u8&                  cbuf_qLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return row id of specified element
u64                  cbuf_rowid_Get(lib_ams::FReadfile& parent, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     cbuf_AllocNVal(lib_ams::FReadfile& parent, int n_elems, const u8& val) __attribute__((__warn_unused_result__, nothrow));

// Reserve space. Insert element at the end
// The new element is initialized to a default value
u32&                 offset_Alloc(lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u32&                 offset_AllocAt(lib_ams::FReadfile& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u32>    offset_AllocN(lib_ams::FReadfile& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 offset_EmptyQ(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
u32*                 offset_Find(lib_ams::FReadfile& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<u32>    offset_Getary(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
u32*                 offset_Last(lib_ams::FReadfile& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  offset_Max(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return number of items in the array
i32                  offset_N(const lib_ams::FReadfile& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 offset_Remove(lib_ams::FReadfile& parent, u32 i) __attribute__((nothrow));
void                 offset_RemoveAll(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 offset_RemoveLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 offset_Reserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 offset_AbsReserve(lib_ams::FReadfile& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
void                 offset_Setary(lib_ams::FReadfile& parent, lib_ams::FReadfile &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
u32&                 offset_qFind(lib_ams::FReadfile& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
u32&                 offset_qLast(lib_ams::FReadfile& parent) __attribute__((nothrow));
// Return row id of specified element
u64                  offset_rowid_Get(lib_ams::FReadfile& parent, u32 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u32>    offset_AllocNVal(lib_ams::FReadfile& parent, int n_elems, const u32& val) __attribute__((__warn_unused_result__, nothrow));

// proceed to next item
void                 FReadfile_buf_curs_Next(FReadfile_buf_curs &curs);
void                 FReadfile_buf_curs_Reset(FReadfile_buf_curs &curs, lib_ams::FReadfile &parent);
// cursor points to valid item
bool                 FReadfile_buf_curs_ValidQ(FReadfile_buf_curs &curs);
// item access
u8&                  FReadfile_buf_curs_Access(FReadfile_buf_curs &curs);
// proceed to next item
void                 FReadfile_cbuf_curs_Next(FReadfile_cbuf_curs &curs);
void                 FReadfile_cbuf_curs_Reset(FReadfile_cbuf_curs &curs, lib_ams::FReadfile &parent);
// cursor points to valid item
bool                 FReadfile_cbuf_curs_ValidQ(FReadfile_cbuf_curs &curs);
// item access
u8&                  FReadfile_cbuf_curs_Access(FReadfile_cbuf_curs &curs);
// proceed to next item
void                 FReadfile_offset_curs_Next(FReadfile_offset_curs &curs);
void                 FReadfile_offset_curs_Reset(FReadfile_offset_curs &curs, lib_ams::FReadfile &parent);
// cursor points to valid item
bool                 FReadfile_offset_curs_ValidQ(FReadfile_offset_curs &curs);
// item access
u32&                 FReadfile_offset_curs_Access(FReadfile_offset_curs &curs);
// Set all fields to initial values.
void                 FReadfile_Init(lib_ams::FReadfile& parent);
void                 FReadfile_Uninit(lib_ams::FReadfile& parent) __attribute__((nothrow));
// print string representation of lib_ams::FReadfile to string LHS, no header -- cprint:lib_ams.FReadfile.String
void                 FReadfile_Print(lib_ams::FReadfile & row, algo::cstring &str) __attribute__((nothrow));

// --- lib_ams.FStream
// create: lib_ams.FDb.stream (Lary)
// global access: ind_stream (Thash)
// global access: cd_stream_hb (Llist)
// global access: cd_poll_read (Llist)
// global access: zd_ctlin (Llist)
// global access: c_stream_ctl (Ptr)
// global access: c_stream_out (Ptr)
// access: lib_ams.FMember.p_stream (Upptr)
struct FStream { // lib_ams.FStream: Stream record
    lib_ams::FStream*                 ind_stream_next;           // hash next
    lib_ams::FStream*                 cd_stream_hb_next;         // zslist link; -1 means not-in-list
    lib_ams::FStream*                 cd_stream_hb_prev;         // previous element
    lib_ams::FStream*                 cd_poll_read_next;         // zslist link; -1 means not-in-list
    lib_ams::FStream*                 cd_poll_read_prev;         // previous element
    lib_ams::FStream*                 zd_ctlin_next;             // zslist link; -1 means not-in-list
    lib_ams::FStream*                 zd_ctlin_prev;             // previous element
    ams::StreamId                     stream_id;                 // Stream ID (primary key)
    algo::cstring                     filename;                  // Name of the file (if opened)
    algo_lib::FFildes                 shm_file;                  // Associated file
    ams::StreamFlags                  flags;                     // Is stream open for writing
    algo::ByteAry                     byteary;                   // Substitute for shm_region
    u8*                               shm_handle;                // Associated memory segment handle (windows only). optional pointer
    ams::StreamPos                    rpos;                      // Read position
    ams::StreamPos                    wpos;                      // Write position
    algo::memptr                      shm_region;                // Shared memory region
    u64                               limit;                     //   0  Updated with ackoff, limit for nextoff
    u64                               offset_mask;               //   0  Mask for byte eof
    ams::Seqmsg*                      cur_msg;                   // Current message. optional pointer
    lib_ams::stream_h_msg_hook        h_msg;                     //   NULL  Pointer to a function
    u64                               h_msg_ctx;                 //   0  Callback context
    lib_ams::stream_h_msg_orig_hook   h_msg_orig;                //   NULL  Pointer to a function
    u64                               h_msg_orig_ctx;            //   0  Callback context
    lib_ams::FMember*                 zd_member_bystream_head;   // zero-terminated doubly linked list
    i32                               zd_member_bystream_n;      // zero-terminated doubly linked list
    lib_ams::FMember*                 zd_member_bystream_tail;   // pointer to last element
    u64                               next_ackoff;               //   1023  Force StreamHb after reaching this offset
    lib_ams::FStreamType*             p_streamtype;              // reference to parent row
    u32                               n_write_block;             //   0
    i32                               burst;                     //   20  Max number of messages processed at once
    bool                              writer_error;              //   false  Writer error was detected
private:
    friend lib_ams::FStream&    stream_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_ams::FStream*    stream_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 stream_RemoveAll() __attribute__((nothrow));
    friend void                 stream_RemoveLast() __attribute__((nothrow));
    FStream();
    ~FStream();
    FStream(const FStream&){ /*disallow copy constructor */}
    void operator =(const FStream&){ /*disallow direct assignment */}
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field shm_file of lib_ams::FStream
void                 shm_file_Cleanup(lib_ams::FStream& stream) __attribute__((nothrow));

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field shm_handle of lib_ams::FStream
void                 shm_handle_Cleanup(lib_ams::FStream& stream) __attribute__((nothrow));

// Invoke function by pointer
void                 h_msg_Call(lib_ams::FStream& stream, ams::MsgHeader& arg) __attribute__((nothrow));
// Assign 0-argument hook with no context pointer
void                 h_msg_Set0(lib_ams::FStream& stream, void (*fcn)() ) __attribute__((nothrow));
// Assign 1-argument hook with context pointer
template<class T> void h_msg_Set1(lib_ams::FStream& stream, T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));
// Assign 2-argument hook with context pointer
template<class T> void h_msg_Set2(lib_ams::FStream& stream, T& ctx, void (*fcn)(T&, ams::MsgHeader& arg) ) __attribute__((nothrow));

// Invoke function by pointer
void                 h_msg_orig_Call(lib_ams::FStream& stream, ams::MsgHeader& arg) __attribute__((nothrow));
// Assign 0-argument hook with no context pointer
void                 h_msg_orig_Set0(lib_ams::FStream& stream, void (*fcn)() ) __attribute__((nothrow));
// Assign 1-argument hook with context pointer
template<class T> void h_msg_orig_Set1(lib_ams::FStream& stream, T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));
// Assign 2-argument hook with context pointer
template<class T> void h_msg_orig_Set2(lib_ams::FStream& stream, T& ctx, void (*fcn)(T&, ams::MsgHeader& arg) ) __attribute__((nothrow));

// Return true if index is empty
bool                 zd_member_bystream_EmptyQ(lib_ams::FStream& stream) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
lib_ams::FMember*    zd_member_bystream_First(lib_ams::FStream& stream) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_member_bystream_InLlistQ(lib_ams::FMember& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_member_bystream_Insert(lib_ams::FStream& stream, lib_ams::FMember& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
lib_ams::FMember*    zd_member_bystream_Last(lib_ams::FStream& stream) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
i32                  zd_member_bystream_N(const lib_ams::FStream& stream) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
lib_ams::FMember*    zd_member_bystream_Next(lib_ams::FMember &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
lib_ams::FMember*    zd_member_bystream_Prev(lib_ams::FMember &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_member_bystream_Remove(lib_ams::FStream& stream, lib_ams::FMember& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_member_bystream_RemoveAll(lib_ams::FStream& stream) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_ams::FMember*    zd_member_bystream_RemoveFirst(lib_ams::FStream& stream) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
lib_ams::FMember&    zd_member_bystream_qLast(lib_ams::FStream& stream) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FStream_Init(lib_ams::FStream& stream);
// cursor points to valid item
void                 stream_zd_member_bystream_curs_Reset(stream_zd_member_bystream_curs &curs, lib_ams::FStream &parent);
// cursor points to valid item
bool                 stream_zd_member_bystream_curs_ValidQ(stream_zd_member_bystream_curs &curs);
// proceed to next item
void                 stream_zd_member_bystream_curs_Next(stream_zd_member_bystream_curs &curs);
// item access
lib_ams::FMember&    stream_zd_member_bystream_curs_Access(stream_zd_member_bystream_curs &curs);
void                 FStream_Uninit(lib_ams::FStream& stream) __attribute__((nothrow));

// --- lib_ams.FStreamType
// create: lib_ams.FDb.streamtype (Lary)
// global access: ind_streamtype (Thash)
// access: lib_ams.FStream.p_streamtype (Upptr)
struct FStreamType { // lib_ams.FStreamType
    lib_ams::FStreamType*   ind_streamtype_next;   // hash next
    algo::Smallstr50        streamtype;            //
    ams::StreamType         id;                    //
    algo::Comment           comment;               //
private:
    friend lib_ams::FStreamType& streamtype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_ams::FStreamType* streamtype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 streamtype_RemoveAll() __attribute__((nothrow));
    friend void                 streamtype_RemoveLast() __attribute__((nothrow));
    FStreamType();
    ~FStreamType();
    FStreamType(const FStreamType&){ /*disallow copy constructor */}
    void operator =(const FStreamType&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 streamtype_CopyOut(lib_ams::FStreamType &row, amsdb::StreamType &out) __attribute__((nothrow));
// Copy fields in to row
void                 streamtype_CopyIn(lib_ams::FStreamType &row, amsdb::StreamType &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FStreamType_Init(lib_ams::FStreamType& streamtype);
void                 FStreamType_Uninit(lib_ams::FStreamType& streamtype) __attribute__((nothrow));

// --- lib_ams.FWritefile
// create: lib_ams.FDb.writefile (Cppstack)
// global access: zd_flush (Llist)
struct FWritefile { // lib_ams.FWritefile
    lib_ams::FWritefile*   zd_flush_next;   // zslist link; -1 means not-in-list
    lib_ams::FWritefile*   zd_flush_prev;   // previous element
    algo::cstring          filename;        //
    algo::Fildes           fd;              //
    bool                   fail;            //   false  Failure flag
    u8*                    buf_elems;       // pointer to elements
    u32                    buf_n;           // number of elements in array
    u32                    buf_max;         // max. capacity of array before realloc
    u8*                    cbuf_elems;      // pointer to elements
    u32                    cbuf_n;          // number of elements in array
    u32                    cbuf_max;        // max. capacity of array before realloc
    u32                    buf_thr;         //   1024*64  Buffer write threshold
    ams::MsgBlock          block;           //
    FWritefile();
    ~FWritefile();
private:
    FWritefile(const FWritefile&){ /*disallow copy constructor */}
    void operator =(const FWritefile&){ /*disallow direct assignment */}
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fd of lib_ams::FWritefile
void                 fd_Cleanup(lib_ams::FWritefile& writefile) __attribute__((nothrow));

// Reserve space. Insert element at the end
// The new element is initialized to a default value
u8&                  buf_Alloc(lib_ams::FWritefile& writefile) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u8&                  buf_AllocAt(lib_ams::FWritefile& writefile, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     buf_AllocN(lib_ams::FWritefile& writefile, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 buf_EmptyQ(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
u8*                  buf_Find(lib_ams::FWritefile& writefile, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<u8>     buf_Getary(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
u8*                  buf_Last(lib_ams::FWritefile& writefile) __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  buf_Max(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return number of items in the array
i32                  buf_N(const lib_ams::FWritefile& writefile) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 buf_Remove(lib_ams::FWritefile& writefile, u32 i) __attribute__((nothrow));
void                 buf_RemoveAll(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 buf_RemoveLast(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 buf_Reserve(lib_ams::FWritefile& writefile, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 buf_AbsReserve(lib_ams::FWritefile& writefile, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
void                 buf_Setary(lib_ams::FWritefile& writefile, lib_ams::FWritefile &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
u8&                  buf_qFind(lib_ams::FWritefile& writefile, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
u8&                  buf_qLast(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return row id of specified element
u64                  buf_rowid_Get(lib_ams::FWritefile& writefile, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     buf_AllocNVal(lib_ams::FWritefile& writefile, int n_elems, const u8& val) __attribute__((__warn_unused_result__, nothrow));

// Reserve space. Insert element at the end
// The new element is initialized to a default value
u8&                  cbuf_Alloc(lib_ams::FWritefile& writefile) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u8&                  cbuf_AllocAt(lib_ams::FWritefile& writefile, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     cbuf_AllocN(lib_ams::FWritefile& writefile, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 cbuf_EmptyQ(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
u8*                  cbuf_Find(lib_ams::FWritefile& writefile, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
algo::aryptr<u8>     cbuf_Getary(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
u8*                  cbuf_Last(lib_ams::FWritefile& writefile) __attribute__((nothrow, pure));
// Return max. number of items in the array
i32                  cbuf_Max(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return number of items in the array
i32                  cbuf_N(const lib_ams::FWritefile& writefile) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
void                 cbuf_Remove(lib_ams::FWritefile& writefile, u32 i) __attribute__((nothrow));
void                 cbuf_RemoveAll(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 cbuf_RemoveLast(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
void                 cbuf_Reserve(lib_ams::FWritefile& writefile, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
void                 cbuf_AbsReserve(lib_ams::FWritefile& writefile, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
void                 cbuf_Setary(lib_ams::FWritefile& writefile, lib_ams::FWritefile &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
u8&                  cbuf_qFind(lib_ams::FWritefile& writefile, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
u8&                  cbuf_qLast(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// Return row id of specified element
u64                  cbuf_rowid_Get(lib_ams::FWritefile& writefile, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8>     cbuf_AllocNVal(lib_ams::FWritefile& writefile, int n_elems, const u8& val) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FWritefile_Init(lib_ams::FWritefile& writefile);
// proceed to next item
void                 writefile_buf_curs_Next(writefile_buf_curs &curs);
void                 writefile_buf_curs_Reset(writefile_buf_curs &curs, lib_ams::FWritefile &parent);
// cursor points to valid item
bool                 writefile_buf_curs_ValidQ(writefile_buf_curs &curs);
// item access
u8&                  writefile_buf_curs_Access(writefile_buf_curs &curs);
// proceed to next item
void                 writefile_cbuf_curs_Next(writefile_cbuf_curs &curs);
void                 writefile_cbuf_curs_Reset(writefile_cbuf_curs &curs, lib_ams::FWritefile &parent);
// cursor points to valid item
bool                 writefile_cbuf_curs_ValidQ(writefile_cbuf_curs &curs);
// item access
u8&                  writefile_cbuf_curs_Access(writefile_cbuf_curs &curs);
void                 FWritefile_Uninit(lib_ams::FWritefile& writefile) __attribute__((nothrow));
// print string representation of lib_ams::FWritefile to string LHS, no header -- cprint:lib_ams.FWritefile.String
void                 FWritefile_Print(lib_ams::FWritefile & row, algo::cstring &str) __attribute__((nothrow));

// --- lib_ams.FieldId
#pragma pack(push,1)
struct FieldId { // lib_ams.FieldId: Field read helper
    i32   value;   //   -1
    inline operator lib_ams_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(lib_ams_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
lib_ams_FieldIdEnum  value_GetEnum(const lib_ams::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(lib_ams::FieldId& parent, lib_ams_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const lib_ams::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const lib_ams::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(lib_ams::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(lib_ams::FieldId& parent, algo::strptr rhs, lib_ams_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(lib_ams::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_ams::FieldId from an ascii string.
// The format of the string is the format of the lib_ams::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(lib_ams::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(lib_ams::FieldId& parent);
// print string representation of lib_ams::FieldId to string LHS, no header -- cprint:lib_ams.FieldId.String
void                 FieldId_Print(lib_ams::FieldId & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace lib_ams { // gen:ns_curstext

struct _db_fdin_curs {// cursor
    typedef lib_ams::FFdin ChildType;
    lib_ams::FDb *parent;
    i64 index;
    _db_fdin_curs(){ parent=NULL; index=0; }
};


struct _db_cd_fdin_eof_curs {// fcurs:lib_ams.FDb.cd_fdin_eof/curs
    typedef lib_ams::FFdin ChildType;
    lib_ams::FFdin* row;
    lib_ams::FFdin** head; // address of head element
    _db_cd_fdin_eof_curs() {
        row = NULL;
        head = NULL;
    }
};


struct _db_cd_fdin_read_curs {// fcurs:lib_ams.FDb.cd_fdin_read/curs
    typedef lib_ams::FFdin ChildType;
    lib_ams::FFdin* row;
    lib_ams::FFdin** head; // address of head element
    _db_cd_fdin_read_curs() {
        row = NULL;
        head = NULL;
    }
};


struct _db_zd_flush_curs {// fcurs:lib_ams.FDb.zd_flush/curs
    typedef lib_ams::FWritefile ChildType;
    lib_ams::FWritefile* row;
    _db_zd_flush_curs() {
        row = NULL;
    }
};


struct _db_stream_curs {// cursor
    typedef lib_ams::FStream ChildType;
    lib_ams::FDb *parent;
    i64 index;
    _db_stream_curs(){ parent=NULL; index=0; }
};


struct _db_cd_stream_hb_curs {// fcurs:lib_ams.FDb.cd_stream_hb/curs
    typedef lib_ams::FStream ChildType;
    lib_ams::FStream* row;
    lib_ams::FStream** head; // address of head element
    _db_cd_stream_hb_curs() {
        row = NULL;
        head = NULL;
    }
};


struct _db_cd_poll_read_curs {// fcurs:lib_ams.FDb.cd_poll_read/curs
    typedef lib_ams::FStream ChildType;
    lib_ams::FStream* row;
    lib_ams::FStream** head; // address of head element
    _db_cd_poll_read_curs() {
        row = NULL;
        head = NULL;
    }
};


struct _db_streamtype_curs {// cursor
    typedef lib_ams::FStreamType ChildType;
    lib_ams::FDb *parent;
    i64 index;
    _db_streamtype_curs(){ parent=NULL; index=0; }
};


struct _db_zd_ctlin_curs {// fcurs:lib_ams.FDb.zd_ctlin/curs
    typedef lib_ams::FStream ChildType;
    lib_ams::FStream* row;
    _db_zd_ctlin_curs() {
        row = NULL;
    }
};


struct _db_zd_proc_curs {// fcurs:lib_ams.FDb.zd_proc/curs
    typedef lib_ams::FProc ChildType;
    lib_ams::FProc* row;
    _db_zd_proc_curs() {
        row = NULL;
    }
};


struct proc_zd_member_byproc_curs {// fcurs:lib_ams.FProc.zd_member_byproc/curs
    typedef lib_ams::FMember ChildType;
    lib_ams::FMember* row;
    proc_zd_member_byproc_curs() {
        row = NULL;
    }
};


struct FReadfile_buf_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    FReadfile_buf_curs() { elems=NULL; n_elems=0; index=0; }
};


struct FReadfile_cbuf_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    FReadfile_cbuf_curs() { elems=NULL; n_elems=0; index=0; }
};


struct FReadfile_offset_curs {// cursor
    typedef u32 ChildType;
    u32* elems;
    int n_elems;
    int index;
    FReadfile_offset_curs() { elems=NULL; n_elems=0; index=0; }
};


struct stream_zd_member_bystream_curs {// fcurs:lib_ams.FStream.zd_member_bystream/curs
    typedef lib_ams::FMember ChildType;
    lib_ams::FMember* row;
    stream_zd_member_bystream_curs() {
        row = NULL;
    }
};


struct writefile_buf_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    writefile_buf_curs() { elems=NULL; n_elems=0; index=0; }
};


struct writefile_cbuf_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    writefile_cbuf_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace lib_ams { // gen:ns_func
// User-implemented callback function for dispatch CtlMsg
void                 CtlMsg_DumpStreamTableMsg(ams::DumpStreamTableMsg &msg);
// User-implemented callback function for dispatch CtlMsg
void                 CtlMsg_ProcAddMsg(ams::ProcAddMsg &msg);
// User-implemented callback function for dispatch CtlMsg
void                 CtlMsg_ProcRemoveMsg(ams::ProcRemoveMsg &msg);
// User-implemented callback function for dispatch CtlMsg
void                 CtlMsg_StreamHbMsg(ams::StreamHbMsg &msg);
int                  CtlMsgDispatchRaw(lib_ams::CtlMsgCase type, u8 *msg, u32 len);
int                  CtlMsgDispatch(ams::MsgHeader& msg);
// void rettype useful for hooks
void                 vCtlMsgDispatch(ams::MsgHeader& msg);
// Construct a new ams::InputLineMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::InputLineMsg *  InputLineMsg_FmtByteAry(algo::ByteAry &buf, algo::aryptr<char > payload);
// Construct a new ams::LogMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::LogMsg *        LogMsg_FmtAmsStream(lib_ams::FStream &stream, const algo::strptr& logcat, algo::SchedTime tstamp, algo::aryptr<char > text);
// Construct a new ams::MsgBlock in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::MsgBlock *      MsgBlock_FmtAmsStream(lib_ams::FStream &stream, u64 first_seqno, u32 n_messages, u32 original_length, algo::aryptr<u8 > messages);
// Construct a new ams::OpenMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::OpenMsg *       OpenMsg_FmtAmsStream(lib_ams::FStream &stream, ams::Member member, ams::StreamPos pos);
// Construct a new ams::PrlogMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::PrlogMsg *      PrlogMsg_FmtAmsStream(lib_ams::FStream &stream, const algo::strptr& logcat, algo::SchedTime tstamp, ams::MsgHeader* data);
// Construct a new ams::ProcAddMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::ProcAddMsg *    ProcAddMsg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc_id);
// Construct a new ams::ProcRemoveMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::ProcRemoveMsg * ProcRemoveMsg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc_id);
// Construct a new ams::StreamHbMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::StreamHbMsg *   StreamHbMsg_FmtAmsStream(lib_ams::FStream &stream, ams::Member member, ams::StreamPos pos, u32 wbudget);
// Construct a new ams::Trace2Msg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::Trace2Msg *     Trace2Msg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc, u8 trace, algo::UnTime tstamp, algo::aryptr<u64 > data);
// Construct a new ams::TraceInfo2Msg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::TraceInfo2Msg * TraceInfo2Msg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc, u8 trace, algo::UnTime tstamp, u8 part, algo::aryptr<char > data);
// Construct a new ams::TraceInfoMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::TraceInfoMsg *  TraceInfoMsg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc, algo::UnTime tstamp, u8 part, algo::aryptr<char > data);
// Construct a new ams::TraceMsg in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::TraceMsg *      TraceMsg_FmtAmsStream(lib_ams::FStream &stream, ams::ProcId proc, algo::UnTime tstamp, algo::aryptr<u64 > data);
// Construct a new ams::UdpFrame in the space provided by BUF.
// If BUF doesn't have enough space available, throw exception.
ams::UdpFrame *      UdpFrame_FmtAmsStream(lib_ams::FStream &stream, algo::UnTime timestamp, ietf::Ipv4 src_ip, ietf::Ipv4 dst_ip, u16 src_port, u16 dst_port, algo::aryptr<u8 > payload);
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const lib_ams::trace &row);// cfmt:lib_ams.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_ams::FReadfile &row);// cfmt:lib_ams.FReadfile.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_ams::FWritefile &row);// cfmt:lib_ams.FWritefile.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_ams::FieldId &row);// cfmt:lib_ams.FieldId.String
}
