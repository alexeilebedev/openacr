//
// include/gen/fm_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/ams_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude

// --- fm.Code.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Code& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Code.ch.HashStrptr
inline u32 fm::Code_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Code.ch.Init
inline void fm::ch_Init(fm::Code &parent) throw() {
    memset(parent.ch, ' ', 32);
}

// --- fm.Code.ch.Max
// always return constant 32
inline int fm::ch_Max(fm::Code& parent) throw() {
    (void)parent;
    return 32;
}

// --- fm.Code.ch.N
inline int fm::ch_N(const fm::Code& parent) throw() {
    u64 ret;
    ret = 32;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Code.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Code::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Code.ch.CtorStrptr
inline  fm::Code::Code(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Code.ch.Cast
inline  fm::Code::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Code..EqOp
inline bool fm::Code::operator ==(const fm::Code &rhs) const throw() {
    return fm::Code_Eq(const_cast<fm::Code&>(*this),const_cast<fm::Code&>(rhs));
}

// --- fm.Code..NeOp
inline bool fm::Code::operator !=(const fm::Code &rhs) const throw() {
    return !fm::Code_Eq(const_cast<fm::Code&>(*this),const_cast<fm::Code&>(rhs));
}

// --- fm.Code..Cmp
inline i32 fm::Code_Cmp(fm::Code& lhs, fm::Code& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Code..Init
// Set all fields to initial values.
inline void fm::Code_Init(fm::Code& parent) {
    memset(parent.ch, ' ', 32);
}

// --- fm.Code..Eq
inline bool fm::Code_Eq(fm::Code& lhs, fm::Code& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u64*)(lhs.ch+8) == *(u64*)(rhs.ch+8)
    &&*(u64*)(lhs.ch+16) == *(u64*)(rhs.ch+16)
    &&*(u64*)(lhs.ch+24) == *(u64*)(rhs.ch+24);
    return retval;
}

// --- fm.Code..EqOpAryptr
inline bool fm::Code::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Code..AssignOp
inline fm::Code& fm::Code::operator =(const fm::Code &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Code));
    return *this;
}

// --- fm.Code..Ctor
inline  fm::Code::Code() throw() {
    fm::Code_Init(*this);
}

// --- fm.Code..CopyCtor
inline  fm::Code::Code(const fm::Code &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Code));
}

// --- fm.Objtype.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Objtype& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Objtype.ch.HashStrptr
inline u32 fm::Objtype_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Objtype.ch.Init
inline void fm::ch_Init(fm::Objtype &parent) throw() {
    memset(parent.ch, ' ', 15);
}

// --- fm.Objtype.ch.Max
// always return constant 15
inline int fm::ch_Max(fm::Objtype& parent) throw() {
    (void)parent;
    return 15;
}

// --- fm.Objtype.ch.N
inline int fm::ch_N(const fm::Objtype& parent) throw() {
    u64 ret;
    ret = 15;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Objtype.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Objtype::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Objtype.ch.CtorStrptr
inline  fm::Objtype::Objtype(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Objtype.ch.Cast
inline  fm::Objtype::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Objtype..EqOp
inline bool fm::Objtype::operator ==(const fm::Objtype &rhs) const throw() {
    return fm::Objtype_Eq(const_cast<fm::Objtype&>(*this),const_cast<fm::Objtype&>(rhs));
}

// --- fm.Objtype..NeOp
inline bool fm::Objtype::operator !=(const fm::Objtype &rhs) const throw() {
    return !fm::Objtype_Eq(const_cast<fm::Objtype&>(*this),const_cast<fm::Objtype&>(rhs));
}

// --- fm.Objtype..Cmp
inline i32 fm::Objtype_Cmp(fm::Objtype& lhs, fm::Objtype& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Objtype..Init
// Set all fields to initial values.
inline void fm::Objtype_Init(fm::Objtype& parent) {
    memset(parent.ch, ' ', 15);
}

// --- fm.Objtype..Eq
inline bool fm::Objtype_Eq(fm::Objtype& lhs, fm::Objtype& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u32*)(lhs.ch+8) == *(u32*)(rhs.ch+8)
    &&*(u16*)(lhs.ch+12) == *(u16*)(rhs.ch+12)
    &&*(u8*)(lhs.ch+14) == *(u8*)(rhs.ch+14);
    return retval;
}

// --- fm.Objtype..EqOpAryptr
inline bool fm::Objtype::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Objtype..AssignOp
inline fm::Objtype& fm::Objtype::operator =(const fm::Objtype &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Objtype));
    return *this;
}

// --- fm.Objtype..Ctor
inline  fm::Objtype::Objtype() throw() {
    fm::Objtype_Init(*this);
}

// --- fm.Objtype..CopyCtor
inline  fm::Objtype::Objtype(const fm::Objtype &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Objtype));
}

// --- fm.Objinst.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Objinst& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Objinst.ch.HashStrptr
inline u32 fm::Objinst_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Objinst.ch.Init
inline void fm::ch_Init(fm::Objinst &parent) throw() {
    memset(parent.ch, ' ', 79);
}

// --- fm.Objinst.ch.Max
// always return constant 79
inline int fm::ch_Max(fm::Objinst& parent) throw() {
    (void)parent;
    return 79;
}

// --- fm.Objinst.ch.N
inline int fm::ch_N(const fm::Objinst& parent) throw() {
    u64 ret;
    ret = 79;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Objinst.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Objinst::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Objinst.ch.CtorStrptr
inline  fm::Objinst::Objinst(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Objinst.ch.Cast
inline  fm::Objinst::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Objinst..EqOp
inline bool fm::Objinst::operator ==(const fm::Objinst &rhs) const throw() {
    return fm::Objinst_Eq(const_cast<fm::Objinst&>(*this),const_cast<fm::Objinst&>(rhs));
}

// --- fm.Objinst..NeOp
inline bool fm::Objinst::operator !=(const fm::Objinst &rhs) const throw() {
    return !fm::Objinst_Eq(const_cast<fm::Objinst&>(*this),const_cast<fm::Objinst&>(rhs));
}

// --- fm.Objinst..Cmp
inline i32 fm::Objinst_Cmp(fm::Objinst& lhs, fm::Objinst& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Objinst..Init
// Set all fields to initial values.
inline void fm::Objinst_Init(fm::Objinst& parent) {
    memset(parent.ch, ' ', 79);
}

// --- fm.Objinst..Eq
inline bool fm::Objinst_Eq(fm::Objinst& lhs, fm::Objinst& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u64*)(lhs.ch+8) == *(u64*)(rhs.ch+8)
    &&*(u64*)(lhs.ch+16) == *(u64*)(rhs.ch+16)
    &&*(u64*)(lhs.ch+24) == *(u64*)(rhs.ch+24)
    &&*(u64*)(lhs.ch+32) == *(u64*)(rhs.ch+32)
    &&*(u64*)(lhs.ch+40) == *(u64*)(rhs.ch+40)
    &&*(u64*)(lhs.ch+48) == *(u64*)(rhs.ch+48)
    &&*(u64*)(lhs.ch+56) == *(u64*)(rhs.ch+56)
    &&*(u64*)(lhs.ch+64) == *(u64*)(rhs.ch+64)
    &&*(u32*)(lhs.ch+72) == *(u32*)(rhs.ch+72)
    &&*(u16*)(lhs.ch+76) == *(u16*)(rhs.ch+76)
    &&*(u8*)(lhs.ch+78) == *(u8*)(rhs.ch+78);
    return retval;
}

// --- fm.Objinst..EqOpAryptr
inline bool fm::Objinst::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Objinst..AssignOp
inline fm::Objinst& fm::Objinst::operator =(const fm::Objinst &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Objinst));
    return *this;
}

// --- fm.Objinst..Ctor
inline  fm::Objinst::Objinst() throw() {
    fm::Objinst_Init(*this);
}

// --- fm.Objinst..CopyCtor
inline  fm::Objinst::Objinst(const fm::Objinst &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Objinst));
}

// --- fm.Flag.value.GetEnum
// Get value of field as enum type
inline fm_Flag_value_Enum fm::value_GetEnum(const fm::Flag& parent) throw() {
    return fm_Flag_value_Enum(parent.value);
}

// --- fm.Flag.value.SetEnum
// Set value of field from enum type.
inline void fm::value_SetEnum(fm::Flag& parent, fm_Flag_value_Enum rhs) throw() {
    parent.value = char(rhs);
}

// --- fm.Flag..Init
// Set all fields to initial values.
inline void fm::Flag_Init(fm::Flag& parent) {
    parent.value = char('C');
}

// --- fm.Flag..Ctor
inline  fm::Flag::Flag() throw() {
    fm::Flag_Init(*this);
}

// --- fm.Flag..EnumCtor
inline  fm::Flag::Flag(fm_Flag_value_Enum arg) throw() {
    this->value = char(arg);
}

// --- fm.Severity.value.GetEnum
// Get value of field as enum type
inline fm_Severity_value_Enum fm::value_GetEnum(const fm::Severity& parent) throw() {
    return fm_Severity_value_Enum(parent.value);
}

// --- fm.Severity.value.SetEnum
// Set value of field from enum type.
inline void fm::value_SetEnum(fm::Severity& parent, fm_Severity_value_Enum rhs) throw() {
    parent.value = char(rhs);
}

// --- fm.Severity..EqOp
inline bool fm::Severity::operator ==(const fm::Severity &rhs) const throw() {
    return fm::Severity_Eq(const_cast<fm::Severity&>(*this),const_cast<fm::Severity&>(rhs));
}

// --- fm.Severity..NeOp
inline bool fm::Severity::operator !=(const fm::Severity &rhs) const throw() {
    return !fm::Severity_Eq(const_cast<fm::Severity&>(*this),const_cast<fm::Severity&>(rhs));
}

// --- fm.Severity..LtOp
inline bool fm::Severity::operator <(const fm::Severity &rhs) const throw() {
    return fm::Severity_Lt(const_cast<fm::Severity&>(*this),const_cast<fm::Severity&>(rhs));
}

// --- fm.Severity..GtOp
inline bool fm::Severity::operator >(const fm::Severity &rhs) const throw() {
    return fm::Severity_Lt(const_cast<fm::Severity&>(rhs),const_cast<fm::Severity&>(*this));
}

// --- fm.Severity..LeOp
inline bool fm::Severity::operator <=(const fm::Severity &rhs) const throw() {
    return !fm::Severity_Lt(const_cast<fm::Severity&>(rhs),const_cast<fm::Severity&>(*this));
}

// --- fm.Severity..GeOp
inline bool fm::Severity::operator >=(const fm::Severity &rhs) const throw() {
    return !fm::Severity_Lt(const_cast<fm::Severity&>(*this),const_cast<fm::Severity&>(rhs));
}

// --- fm.Severity..Lt
inline bool fm::Severity_Lt(fm::Severity lhs, fm::Severity rhs) throw() {
    return char_Lt(lhs.value, rhs.value);
}

// --- fm.Severity..Cmp
inline i32 fm::Severity_Cmp(fm::Severity lhs, fm::Severity rhs) throw() {
    i32 retval = 0;
    retval = char_Cmp(lhs.value, rhs.value);
    return retval;
}

// --- fm.Severity..Init
// Set all fields to initial values.
inline void fm::Severity_Init(fm::Severity& parent) {
    parent.value = char('1');
}

// --- fm.Severity..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool fm::Severity_UpdateMax(fm::Severity &lhs, fm::Severity rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- fm.Severity..Min
// Return the lesser of two values
inline fm::Severity fm::Severity_Min(fm::Severity lhs, fm::Severity rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- fm.Severity..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool fm::Severity_UpdateMin(fm::Severity &lhs, fm::Severity rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- fm.Severity..Max
// Return the greater of two values
inline fm::Severity fm::Severity_Max(fm::Severity lhs, fm::Severity rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- fm.Severity..Eq
inline bool fm::Severity_Eq(fm::Severity lhs, fm::Severity rhs) throw() {
    bool retval = true;
    retval = char_Eq(lhs.value, rhs.value);
    return retval;
}

// --- fm.Severity..Update
// Set value. Return true if new value is different from old value.
inline bool fm::Severity_Update(fm::Severity &lhs, fm::Severity rhs) throw() {
    bool ret = !Severity_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- fm.Severity..EqEnum
// define enum comparison operator to avoid ambiguity
inline bool fm::Severity::operator ==(fm_Severity_value_Enum rhs) const throw() {
    return fm_Severity_value_Enum(value) == rhs;
}

// --- fm.Severity..Ctor
inline  fm::Severity::Severity() throw() {
    fm::Severity_Init(*this);
}

// --- fm.Severity..EnumCtor
inline  fm::Severity::Severity(fm_Severity_value_Enum arg) throw() {
    this->value = char(arg);
}

// --- fm.Summary.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Summary& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Summary.ch.HashStrptr
inline u32 fm::Summary_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Summary.ch.Init
inline void fm::ch_Init(fm::Summary &parent) throw() {
    memset(parent.ch, ' ', 64);
}

// --- fm.Summary.ch.Max
// always return constant 64
inline int fm::ch_Max(fm::Summary& parent) throw() {
    (void)parent;
    return 64;
}

// --- fm.Summary.ch.N
inline int fm::ch_N(const fm::Summary& parent) throw() {
    u64 ret;
    ret = 64;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Summary.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Summary::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Summary.ch.CtorStrptr
inline  fm::Summary::Summary(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Summary.ch.Cast
inline  fm::Summary::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Summary..EqOp
inline bool fm::Summary::operator ==(const fm::Summary &rhs) const throw() {
    return fm::Summary_Eq(const_cast<fm::Summary&>(*this),const_cast<fm::Summary&>(rhs));
}

// --- fm.Summary..NeOp
inline bool fm::Summary::operator !=(const fm::Summary &rhs) const throw() {
    return !fm::Summary_Eq(const_cast<fm::Summary&>(*this),const_cast<fm::Summary&>(rhs));
}

// --- fm.Summary..Cmp
inline i32 fm::Summary_Cmp(fm::Summary& lhs, fm::Summary& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Summary..Init
// Set all fields to initial values.
inline void fm::Summary_Init(fm::Summary& parent) {
    memset(parent.ch, ' ', 64);
}

// --- fm.Summary..Eq
inline bool fm::Summary_Eq(fm::Summary& lhs, fm::Summary& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u64*)(lhs.ch+8) == *(u64*)(rhs.ch+8)
    &&*(u64*)(lhs.ch+16) == *(u64*)(rhs.ch+16)
    &&*(u64*)(lhs.ch+24) == *(u64*)(rhs.ch+24)
    &&*(u64*)(lhs.ch+32) == *(u64*)(rhs.ch+32)
    &&*(u64*)(lhs.ch+40) == *(u64*)(rhs.ch+40)
    &&*(u64*)(lhs.ch+48) == *(u64*)(rhs.ch+48)
    &&*(u64*)(lhs.ch+56) == *(u64*)(rhs.ch+56);
    return retval;
}

// --- fm.Summary..EqOpAryptr
inline bool fm::Summary::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Summary..AssignOp
inline fm::Summary& fm::Summary::operator =(const fm::Summary &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Summary));
    return *this;
}

// --- fm.Summary..Ctor
inline  fm::Summary::Summary() throw() {
    fm::Summary_Init(*this);
}

// --- fm.Summary..CopyCtor
inline  fm::Summary::Summary(const fm::Summary &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Summary));
}

// --- fm.Description.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Description& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Description.ch.HashStrptr
inline u32 fm::Description_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Description.ch.Init
inline void fm::ch_Init(fm::Description &parent) throw() {
    memset(parent.ch, ' ', 128);
}

// --- fm.Description.ch.Max
// always return constant 128
inline int fm::ch_Max(fm::Description& parent) throw() {
    (void)parent;
    return 128;
}

// --- fm.Description.ch.N
inline int fm::ch_N(const fm::Description& parent) throw() {
    u64 ret;
    ret = 128;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Description.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Description::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Description.ch.CtorStrptr
inline  fm::Description::Description(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Description.ch.Cast
inline  fm::Description::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Description..EqOp
inline bool fm::Description::operator ==(const fm::Description &rhs) const throw() {
    return fm::Description_Eq(const_cast<fm::Description&>(*this),const_cast<fm::Description&>(rhs));
}

// --- fm.Description..NeOp
inline bool fm::Description::operator !=(const fm::Description &rhs) const throw() {
    return !fm::Description_Eq(const_cast<fm::Description&>(*this),const_cast<fm::Description&>(rhs));
}

// --- fm.Description..Cmp
inline i32 fm::Description_Cmp(fm::Description& lhs, fm::Description& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Description..Init
// Set all fields to initial values.
inline void fm::Description_Init(fm::Description& parent) {
    memset(parent.ch, ' ', 128);
}

// --- fm.Description..Eq
inline bool fm::Description_Eq(fm::Description& lhs, fm::Description& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u64*)(lhs.ch+8) == *(u64*)(rhs.ch+8)
    &&*(u64*)(lhs.ch+16) == *(u64*)(rhs.ch+16)
    &&*(u64*)(lhs.ch+24) == *(u64*)(rhs.ch+24)
    &&*(u64*)(lhs.ch+32) == *(u64*)(rhs.ch+32)
    &&*(u64*)(lhs.ch+40) == *(u64*)(rhs.ch+40)
    &&*(u64*)(lhs.ch+48) == *(u64*)(rhs.ch+48)
    &&*(u64*)(lhs.ch+56) == *(u64*)(rhs.ch+56)
    &&*(u64*)(lhs.ch+64) == *(u64*)(rhs.ch+64)
    &&*(u64*)(lhs.ch+72) == *(u64*)(rhs.ch+72)
    &&*(u64*)(lhs.ch+80) == *(u64*)(rhs.ch+80)
    &&*(u64*)(lhs.ch+88) == *(u64*)(rhs.ch+88)
    &&*(u64*)(lhs.ch+96) == *(u64*)(rhs.ch+96)
    &&*(u64*)(lhs.ch+104) == *(u64*)(rhs.ch+104)
    &&*(u64*)(lhs.ch+112) == *(u64*)(rhs.ch+112)
    &&*(u64*)(lhs.ch+120) == *(u64*)(rhs.ch+120);
    return retval;
}

// --- fm.Description..EqOpAryptr
inline bool fm::Description::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Description..AssignOp
inline fm::Description& fm::Description::operator =(const fm::Description &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Description));
    return *this;
}

// --- fm.Description..Ctor
inline  fm::Description::Description() throw() {
    fm::Description_Init(*this);
}

// --- fm.Description..CopyCtor
inline  fm::Description::Description(const fm::Description &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Description));
}

// --- fm.Source.ch.Getary
// Access string as array of chars
inline algo::aryptr<char> fm::ch_Getary(const fm::Source& parent) throw() {
    int len = ch_N(parent);
    algo::aryptr<char> ret((char*)parent.ch, len);
    return ret;
}

// --- fm.Source.ch.HashStrptr
inline u32 fm::Source_Hash(u32 prev, const algo::strptr &str) {
    return algo::CRC32Step(prev, (u8*)str.elems, str.n_elems);
}

// --- fm.Source.ch.Init
inline void fm::ch_Init(fm::Source &parent) throw() {
    memset(parent.ch, ' ', 32);
}

// --- fm.Source.ch.Max
// always return constant 32
inline int fm::ch_Max(fm::Source& parent) throw() {
    (void)parent;
    return 32;
}

// --- fm.Source.ch.N
inline int fm::ch_N(const fm::Source& parent) throw() {
    u64 ret;
    ret = 32;
    while (ret>0 && parent.ch[ret-1]==u8(' ')) {
        ret--;
    }
    return int(ret);
}

// --- fm.Source.ch.AssignStrptr
// Copy from strptr (operator=)
inline void fm::Source::operator =(const algo::strptr &str) throw() {
    ch_SetStrptr(*this, str);
}

// --- fm.Source.ch.CtorStrptr
inline  fm::Source::Source(const algo::strptr &rhs) throw() {
    ch_SetStrptr(*this, rhs);
}

// --- fm.Source.ch.Cast
inline  fm::Source::operator algo::strptr() const throw() {
    return ch_Getary(*this);
}

// --- fm.Source..EqOp
inline bool fm::Source::operator ==(const fm::Source &rhs) const throw() {
    return fm::Source_Eq(const_cast<fm::Source&>(*this),const_cast<fm::Source&>(rhs));
}

// --- fm.Source..NeOp
inline bool fm::Source::operator !=(const fm::Source &rhs) const throw() {
    return !fm::Source_Eq(const_cast<fm::Source&>(*this),const_cast<fm::Source&>(rhs));
}

// --- fm.Source..Cmp
inline i32 fm::Source_Cmp(fm::Source& lhs, fm::Source& rhs) throw() {
    i32 retval = 0;
    retval = algo::strptr_Cmp(ch_Getary(lhs), ch_Getary(rhs));
    return retval;
}

// --- fm.Source..Init
// Set all fields to initial values.
inline void fm::Source_Init(fm::Source& parent) {
    memset(parent.ch, ' ', 32);
}

// --- fm.Source..Eq
inline bool fm::Source_Eq(fm::Source& lhs, fm::Source& rhs) throw() {
    bool retval = true;
    retval = retval
    &&*(u64*)(lhs.ch+0) == *(u64*)(rhs.ch+0)
    &&*(u64*)(lhs.ch+8) == *(u64*)(rhs.ch+8)
    &&*(u64*)(lhs.ch+16) == *(u64*)(rhs.ch+16)
    &&*(u64*)(lhs.ch+24) == *(u64*)(rhs.ch+24);
    return retval;
}

// --- fm.Source..EqOpAryptr
inline bool fm::Source::operator ==(const algo::aryptr<char> &rhs) const throw() {
    return algo::strptr_Eq(ch_Getary(*this), rhs);
}

// --- fm.Source..AssignOp
inline fm::Source& fm::Source::operator =(const fm::Source &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Source));
    return *this;
}

// --- fm.Source..Ctor
inline  fm::Source::Source() throw() {
    fm::Source_Init(*this);
}

// --- fm.Source..CopyCtor
inline  fm::Source::Source(const fm::Source &rhs) throw() {
    // type is plaindata, with no holes, copying as memory
    memcpy(this,&rhs,sizeof(fm::Source));
}

// --- fm.AlarmMsg.base.Castdown
// Check if ams::MsgHeader is an instance of AlarmMsg by checking the type field
// If it is, return the pointer of target type.
// Additionally, check if the length field permits valid instance of AlarmMsg.
// If not successful, quietly return NULL.
inline fm::AlarmMsg* fm::AlarmMsg_Castdown(ams::MsgHeader &hdr) {
    bool cond = hdr.type == (17);
    cond &= i32(hdr.length) >= ssizeof(fm::AlarmMsg);
    return cond ? reinterpret_cast<fm::AlarmMsg*>(&hdr) : NULL;
}

// --- fm.AlarmMsg.base.Castbase
inline ams::MsgHeader& fm::Castbase(fm::AlarmMsg& parent) {
    return reinterpret_cast<ams::MsgHeader&>(parent);
}

// --- fm.AlarmMsg..GetMsgLength
// Message length (uses length field)
inline i32 fm::GetMsgLength(const fm::AlarmMsg& parent) throw() {
    return i32(const_cast<fm::AlarmMsg&>(parent).length);
}

// --- fm.AlarmMsg..GetMsgMemptr
// Memptr encompassing the message (uses length field)
inline algo::memptr fm::GetMsgMemptr(const fm::AlarmMsg& row) throw() {
    return algo::memptr((u8*)&row, i32(const_cast<fm::AlarmMsg&>(row).length));
}

// --- fm.AlarmMsg..Ctor
inline  fm::AlarmMsg::AlarmMsg() throw() {
    fm::AlarmMsg_Init(*this);
}

// --- fm.FieldId.value.GetEnum
// Get value of field as enum type
inline fm_FieldIdEnum fm::value_GetEnum(const fm::FieldId& parent) throw() {
    return fm_FieldIdEnum(parent.value);
}

// --- fm.FieldId.value.SetEnum
// Set value of field from enum type.
inline void fm::value_SetEnum(fm::FieldId& parent, fm_FieldIdEnum rhs) throw() {
    parent.value = i32(rhs);
}

// --- fm.FieldId.value.Cast
inline  fm::FieldId::operator fm_FieldIdEnum() const throw() {
    return fm_FieldIdEnum((*this).value);
}

// --- fm.FieldId..Init
// Set all fields to initial values.
inline void fm::FieldId_Init(fm::FieldId& parent) {
    parent.value = i32(-1);
}

// --- fm.FieldId..Ctor
inline  fm::FieldId::FieldId() throw() {
    fm::FieldId_Init(*this);
}

// --- fm.FieldId..FieldwiseCtor
inline  fm::FieldId::FieldId(i32 in_value) throw()
    : value(in_value)
 {
}

// --- fm.FieldId..EnumCtor
inline  fm::FieldId::FieldId(fm_FieldIdEnum arg) throw() {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fm::Flag &row) {// cfmt:fm.Flag.String
    fm::Flag_Print(const_cast<fm::Flag&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fm::Severity &row) {// cfmt:fm.Severity.String
    fm::Severity_Print(const_cast<fm::Severity&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fm::AlarmMsg &row) {// cfmt:fm.AlarmMsg.String
    fm::AlarmMsg_Print(const_cast<fm::AlarmMsg&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fm::FieldId &row) {// cfmt:fm.FieldId.String
    fm::FieldId_Print(const_cast<fm::FieldId&>(row), str);
    return str;
}
