//
// include/gen/acr_in_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.inl.h"
//#pragma endinclude
inline acr_in::FCtype::FCtype() {
    acr_in::FCtype_Init(*this);
}

inline acr_in::FCtype::~FCtype() {
    acr_in::FCtype_Uninit(*this);
}


// --- acr_in.FCtype.c_ssimfile.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_in::c_ssimfile_InsertMaybe(acr_in::FCtype& ctype, acr_in::FSsimfile& row) {
    acr_in::FSsimfile* ptr = ctype.c_ssimfile;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ctype.c_ssimfile = &row;
    }
    return retval;
}

// --- acr_in.FCtype.c_ssimfile.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_in::c_ssimfile_Remove(acr_in::FCtype& ctype, acr_in::FSsimfile& row) {
    acr_in::FSsimfile *ptr = ctype.c_ssimfile;
    if (LIKELY(ptr == &row)) {
        ctype.c_ssimfile = NULL;
    }
}

// --- acr_in.FCtype.c_field.EmptyQ
// Return true if index is empty
inline bool acr_in::c_field_EmptyQ(acr_in::FCtype& ctype) {
    return ctype.c_field_n == 0;
}

// --- acr_in.FCtype.c_field.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FField* acr_in::c_field_Find(acr_in::FCtype& ctype, u32 t) {
    acr_in::FField *retval = NULL;
    u64 idx = t;
    u64 lim = ctype.c_field_n;
    if (idx < lim) {
        retval = ctype.c_field_elems[idx];
    }
    return retval;
}

// --- acr_in.FCtype.c_field.Getary
// Return array of pointers
inline algo::aryptr<acr_in::FField*> acr_in::c_field_Getary(acr_in::FCtype& ctype) {
    return algo::aryptr<acr_in::FField*>(ctype.c_field_elems, ctype.c_field_n);
}

// --- acr_in.FCtype.c_field.N
// Return number of items in the pointer array
inline i32 acr_in::c_field_N(const acr_in::FCtype& ctype) {
    return ctype.c_field_n;
}

// --- acr_in.FCtype.c_field.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_in::c_field_RemoveAll(acr_in::FCtype& ctype) {
    for (u32 i = 0; i < ctype.c_field_n; i++) {
        // mark all elements as not-in-array
        ctype.c_field_elems[i]->ctype_c_field_in_ary = false;
    }
    ctype.c_field_n = 0;
}

// --- acr_in.FCtype.c_ctype.EmptyQ
// Return true if index is empty
inline bool acr_in::c_ctype_EmptyQ(acr_in::FCtype& ctype) {
    return ctype.c_ctype_n == 0;
}

// --- acr_in.FCtype.c_ctype.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FCtype* acr_in::c_ctype_Find(acr_in::FCtype& ctype, u32 t) {
    acr_in::FCtype *retval = NULL;
    u64 idx = t;
    u64 lim = ctype.c_ctype_n;
    if (idx < lim) {
        retval = ctype.c_ctype_elems[idx];
    }
    return retval;
}

// --- acr_in.FCtype.c_ctype.Getary
// Return array of pointers
inline algo::aryptr<acr_in::FCtype*> acr_in::c_ctype_Getary(acr_in::FCtype& ctype) {
    return algo::aryptr<acr_in::FCtype*>(ctype.c_ctype_elems, ctype.c_ctype_n);
}

// --- acr_in.FCtype.c_ctype.N
// Return number of items in the pointer array
inline i32 acr_in::c_ctype_N(const acr_in::FCtype& ctype) {
    return ctype.c_ctype_n;
}

// --- acr_in.FCtype.c_ctype.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_in::c_ctype_RemoveAll(acr_in::FCtype& ctype) {
    ctype.c_ctype_n = 0;
}

// --- acr_in.FCtype.c_field_curs.Reset
inline void acr_in::ctype_c_field_curs_Reset(ctype_c_field_curs &curs, acr_in::FCtype &parent) {
    curs.elems = parent.c_field_elems;
    curs.n_elems = parent.c_field_n;
    curs.index = 0;
}

// --- acr_in.FCtype.c_field_curs.ValidQ
// cursor points to valid item
inline bool acr_in::ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_in.FCtype.c_field_curs.Next
// proceed to next item
inline void acr_in::ctype_c_field_curs_Next(ctype_c_field_curs &curs) {
    curs.index++;
}

// --- acr_in.FCtype.c_field_curs.Access
// item access
inline acr_in::FField& acr_in::ctype_c_field_curs_Access(ctype_c_field_curs &curs) {
    return *curs.elems[curs.index];
}

// --- acr_in.FCtype.c_ctype_curs.Reset
inline void acr_in::ctype_c_ctype_curs_Reset(ctype_c_ctype_curs &curs, acr_in::FCtype &parent) {
    curs.elems = parent.c_ctype_elems;
    curs.n_elems = parent.c_ctype_n;
    curs.index = 0;
}

// --- acr_in.FCtype.c_ctype_curs.ValidQ
// cursor points to valid item
inline bool acr_in::ctype_c_ctype_curs_ValidQ(ctype_c_ctype_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_in.FCtype.c_ctype_curs.Next
// proceed to next item
inline void acr_in::ctype_c_ctype_curs_Next(ctype_c_ctype_curs &curs) {
    curs.index++;
}

// --- acr_in.FCtype.c_ctype_curs.Access
// item access
inline acr_in::FCtype& acr_in::ctype_c_ctype_curs_Access(ctype_c_ctype_curs &curs) {
    return *curs.elems[curs.index];
}
inline acr_in::trace::trace() {
}


// --- acr_in.FDb.tuple.EmptyQ
// Return true if index is empty
inline bool acr_in::tuple_EmptyQ() {
    return _db.tuple_n == 0;
}

// --- acr_in.FDb.tuple.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTuple* acr_in::tuple_Find(u64 t) {
    acr_in::FTuple *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.tuple_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.tuple_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.tuple.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FTuple* acr_in::tuple_Last() {
    return tuple_Find(u64(_db.tuple_n-1));
}

// --- acr_in.FDb.tuple.N
// Return number of items in the pool
inline i32 acr_in::tuple_N() {
    return _db.tuple_n;
}

// --- acr_in.FDb.tuple.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FTuple& acr_in::tuple_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.tuple_lary[bsr][index];
}

// --- acr_in.FDb.ind_tuple.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_tuple_EmptyQ() {
    return _db.ind_tuple_n == 0;
}

// --- acr_in.FDb.ind_tuple.N
// Return number of items in the hash
inline i32 acr_in::ind_tuple_N() {
    return _db.ind_tuple_n;
}

// --- acr_in.FDb.finput.EmptyQ
// Return true if index is empty
inline bool acr_in::finput_EmptyQ() {
    return _db.finput_n == 0;
}

// --- acr_in.FDb.finput.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FFinput* acr_in::finput_Find(u64 t) {
    acr_in::FFinput *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.finput_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.finput_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.finput.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FFinput* acr_in::finput_Last() {
    return finput_Find(u64(_db.finput_n-1));
}

// --- acr_in.FDb.finput.N
// Return number of items in the pool
inline i32 acr_in::finput_N() {
    return _db.finput_n;
}

// --- acr_in.FDb.finput.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FFinput& acr_in::finput_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.finput_lary[bsr][index];
}

// --- acr_in.FDb.field.EmptyQ
// Return true if index is empty
inline bool acr_in::field_EmptyQ() {
    return _db.field_n == 0;
}

// --- acr_in.FDb.field.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FField* acr_in::field_Find(u64 t) {
    acr_in::FField *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.field_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.field_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.field.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FField* acr_in::field_Last() {
    return field_Find(u64(_db.field_n-1));
}

// --- acr_in.FDb.field.N
// Return number of items in the pool
inline i32 acr_in::field_N() {
    return _db.field_n;
}

// --- acr_in.FDb.field.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FField& acr_in::field_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.field_lary[bsr][index];
}

// --- acr_in.FDb.ind_field.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_field_EmptyQ() {
    return _db.ind_field_n == 0;
}

// --- acr_in.FDb.ind_field.N
// Return number of items in the hash
inline i32 acr_in::ind_field_N() {
    return _db.ind_field_n;
}

// --- acr_in.FDb.ctype.EmptyQ
// Return true if index is empty
inline bool acr_in::ctype_EmptyQ() {
    return _db.ctype_n == 0;
}

// --- acr_in.FDb.ctype.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FCtype* acr_in::ctype_Find(u64 t) {
    acr_in::FCtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ctype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ctype_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.ctype.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FCtype* acr_in::ctype_Last() {
    return ctype_Find(u64(_db.ctype_n-1));
}

// --- acr_in.FDb.ctype.N
// Return number of items in the pool
inline i32 acr_in::ctype_N() {
    return _db.ctype_n;
}

// --- acr_in.FDb.ctype.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FCtype& acr_in::ctype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ctype_lary[bsr][index];
}

// --- acr_in.FDb.ind_ctype.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_ctype_EmptyQ() {
    return _db.ind_ctype_n == 0;
}

// --- acr_in.FDb.ind_ctype.N
// Return number of items in the hash
inline i32 acr_in::ind_ctype_N() {
    return _db.ind_ctype_n;
}

// --- acr_in.FDb.ssimfile.EmptyQ
// Return true if index is empty
inline bool acr_in::ssimfile_EmptyQ() {
    return _db.ssimfile_n == 0;
}

// --- acr_in.FDb.ssimfile.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FSsimfile* acr_in::ssimfile_Find(u64 t) {
    acr_in::FSsimfile *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ssimfile_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ssimfile_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.ssimfile.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FSsimfile* acr_in::ssimfile_Last() {
    return ssimfile_Find(u64(_db.ssimfile_n-1));
}

// --- acr_in.FDb.ssimfile.N
// Return number of items in the pool
inline i32 acr_in::ssimfile_N() {
    return _db.ssimfile_n;
}

// --- acr_in.FDb.ssimfile.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FSsimfile& acr_in::ssimfile_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ssimfile_lary[bsr][index];
}

// --- acr_in.FDb.ns.EmptyQ
// Return true if index is empty
inline bool acr_in::ns_EmptyQ() {
    return _db.ns_n == 0;
}

// --- acr_in.FDb.ns.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FNs* acr_in::ns_Find(u64 t) {
    acr_in::FNs *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ns_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ns_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.ns.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FNs* acr_in::ns_Last() {
    return ns_Find(u64(_db.ns_n-1));
}

// --- acr_in.FDb.ns.N
// Return number of items in the pool
inline i32 acr_in::ns_N() {
    return _db.ns_n;
}

// --- acr_in.FDb.ns.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FNs& acr_in::ns_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ns_lary[bsr][index];
}

// --- acr_in.FDb.ind_ns.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_ns_EmptyQ() {
    return _db.ind_ns_n == 0;
}

// --- acr_in.FDb.ind_ns.N
// Return number of items in the hash
inline i32 acr_in::ind_ns_N() {
    return _db.ind_ns_n;
}

// --- acr_in.FDb.zd_todo.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_todo_EmptyQ() {
    return _db.zd_todo_head == NULL;
}

// --- acr_in.FDb.zd_todo.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FCtype* acr_in::zd_todo_First() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_todo_head;
    return row;
}

// --- acr_in.FDb.zd_todo.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_todo_InLlistQ(acr_in::FCtype& row) {
    bool result = false;
    result = !(row.zd_todo_next == (acr_in::FCtype*)-1);
    return result;
}

// --- acr_in.FDb.zd_todo.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FCtype* acr_in::zd_todo_Last() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_todo_tail;
    return row;
}

// --- acr_in.FDb.zd_todo.N
// Return number of items in the linked list
inline i32 acr_in::zd_todo_N() {
    return _db.zd_todo_n;
}

// --- acr_in.FDb.zd_todo.Next
// Return pointer to next element in the list
inline acr_in::FCtype* acr_in::zd_todo_Next(acr_in::FCtype &row) {
    return row.zd_todo_next;
}

// --- acr_in.FDb.zd_todo.Prev
// Return pointer to previous element in the list
inline acr_in::FCtype* acr_in::zd_todo_Prev(acr_in::FCtype &row) {
    return row.zd_todo_prev;
}

// --- acr_in.FDb.zd_todo.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FCtype& acr_in::zd_todo_qLast() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_todo_tail;
    return *row;
}

// --- acr_in.FDb.zd_ssimfile.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_ssimfile_EmptyQ() {
    return _db.zd_ssimfile_head == NULL;
}

// --- acr_in.FDb.zd_ssimfile.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FSsimfile* acr_in::zd_ssimfile_First() {
    acr_in::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_head;
    return row;
}

// --- acr_in.FDb.zd_ssimfile.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_ssimfile_InLlistQ(acr_in::FSsimfile& row) {
    bool result = false;
    result = !(row.zd_ssimfile_next == (acr_in::FSsimfile*)-1);
    return result;
}

// --- acr_in.FDb.zd_ssimfile.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FSsimfile* acr_in::zd_ssimfile_Last() {
    acr_in::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_tail;
    return row;
}

// --- acr_in.FDb.zd_ssimfile.N
// Return number of items in the linked list
inline i32 acr_in::zd_ssimfile_N() {
    return _db.zd_ssimfile_n;
}

// --- acr_in.FDb.zd_ssimfile.Next
// Return pointer to next element in the list
inline acr_in::FSsimfile* acr_in::zd_ssimfile_Next(acr_in::FSsimfile &row) {
    return row.zd_ssimfile_next;
}

// --- acr_in.FDb.zd_ssimfile.Prev
// Return pointer to previous element in the list
inline acr_in::FSsimfile* acr_in::zd_ssimfile_Prev(acr_in::FSsimfile &row) {
    return row.zd_ssimfile_prev;
}

// --- acr_in.FDb.zd_ssimfile.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FSsimfile& acr_in::zd_ssimfile_qLast() {
    acr_in::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_tail;
    return *row;
}

// --- acr_in.FDb.substr.EmptyQ
// Return true if index is empty
inline bool acr_in::substr_EmptyQ() {
    return _db.substr_n == 0;
}

// --- acr_in.FDb.substr.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FSubstr* acr_in::substr_Find(u64 t) {
    acr_in::FSubstr *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.substr_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.substr_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.substr.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FSubstr* acr_in::substr_Last() {
    return substr_Find(u64(_db.substr_n-1));
}

// --- acr_in.FDb.substr.N
// Return number of items in the pool
inline i32 acr_in::substr_N() {
    return _db.substr_n;
}

// --- acr_in.FDb.substr.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FSubstr& acr_in::substr_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.substr_lary[bsr][index];
}

// --- acr_in.FDb.dispsig.EmptyQ
// Return true if index is empty
inline bool acr_in::dispsig_EmptyQ() {
    return _db.dispsig_n == 0;
}

// --- acr_in.FDb.dispsig.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FDispsig* acr_in::dispsig_Find(u64 t) {
    acr_in::FDispsig *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.dispsig_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.dispsig_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.dispsig.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FDispsig* acr_in::dispsig_Last() {
    return dispsig_Find(u64(_db.dispsig_n-1));
}

// --- acr_in.FDb.dispsig.N
// Return number of items in the pool
inline i32 acr_in::dispsig_N() {
    return _db.dispsig_n;
}

// --- acr_in.FDb.dispsig.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FDispsig& acr_in::dispsig_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.dispsig_lary[bsr][index];
}

// --- acr_in.FDb.ind_dispsig.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_dispsig_EmptyQ() {
    return _db.ind_dispsig_n == 0;
}

// --- acr_in.FDb.ind_dispsig.N
// Return number of items in the hash
inline i32 acr_in::ind_dispsig_N() {
    return _db.ind_dispsig_n;
}

// --- acr_in.FDb.zd_select.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_select_EmptyQ() {
    return _db.zd_select_head == NULL;
}

// --- acr_in.FDb.zd_select.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FTuple* acr_in::zd_select_First() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_select_head;
    return row;
}

// --- acr_in.FDb.zd_select.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_select_InLlistQ(acr_in::FTuple& row) {
    bool result = false;
    result = !(row.zd_select_next == (acr_in::FTuple*)-1);
    return result;
}

// --- acr_in.FDb.zd_select.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FTuple* acr_in::zd_select_Last() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_select_tail;
    return row;
}

// --- acr_in.FDb.zd_select.N
// Return number of items in the linked list
inline i32 acr_in::zd_select_N() {
    return _db.zd_select_n;
}

// --- acr_in.FDb.zd_select.Next
// Return pointer to next element in the list
inline acr_in::FTuple* acr_in::zd_select_Next(acr_in::FTuple &row) {
    return row.zd_select_next;
}

// --- acr_in.FDb.zd_select.Prev
// Return pointer to previous element in the list
inline acr_in::FTuple* acr_in::zd_select_Prev(acr_in::FTuple &row) {
    return row.zd_select_prev;
}

// --- acr_in.FDb.zd_select.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FTuple& acr_in::zd_select_qLast() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_select_tail;
    return *row;
}

// --- acr_in.FDb.zd_deselect.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_deselect_EmptyQ() {
    return _db.zd_deselect_head == NULL;
}

// --- acr_in.FDb.zd_deselect.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FTuple* acr_in::zd_deselect_First() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_deselect_head;
    return row;
}

// --- acr_in.FDb.zd_deselect.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_deselect_InLlistQ(acr_in::FTuple& row) {
    bool result = false;
    result = !(row.zd_deselect_next == (acr_in::FTuple*)-1);
    return result;
}

// --- acr_in.FDb.zd_deselect.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FTuple* acr_in::zd_deselect_Last() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_deselect_tail;
    return row;
}

// --- acr_in.FDb.zd_deselect.N
// Return number of items in the linked list
inline i32 acr_in::zd_deselect_N() {
    return _db.zd_deselect_n;
}

// --- acr_in.FDb.zd_deselect.Next
// Return pointer to next element in the list
inline acr_in::FTuple* acr_in::zd_deselect_Next(acr_in::FTuple &row) {
    return row.zd_deselect_next;
}

// --- acr_in.FDb.zd_deselect.Prev
// Return pointer to previous element in the list
inline acr_in::FTuple* acr_in::zd_deselect_Prev(acr_in::FTuple &row) {
    return row.zd_deselect_prev;
}

// --- acr_in.FDb.zd_deselect.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FTuple& acr_in::zd_deselect_qLast() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_deselect_tail;
    return *row;
}

// --- acr_in.FDb.zd_related.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_related_EmptyQ() {
    return _db.zd_related_head == NULL;
}

// --- acr_in.FDb.zd_related.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FCtype* acr_in::zd_related_First() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_related_head;
    return row;
}

// --- acr_in.FDb.zd_related.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_related_InLlistQ(acr_in::FCtype& row) {
    bool result = false;
    result = !(row.zd_related_next == (acr_in::FCtype*)-1);
    return result;
}

// --- acr_in.FDb.zd_related.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FCtype* acr_in::zd_related_Last() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_related_tail;
    return row;
}

// --- acr_in.FDb.zd_related.N
// Return number of items in the linked list
inline i32 acr_in::zd_related_N() {
    return _db.zd_related_n;
}

// --- acr_in.FDb.zd_related.Next
// Return pointer to next element in the list
inline acr_in::FCtype* acr_in::zd_related_Next(acr_in::FCtype &row) {
    return row.zd_related_next;
}

// --- acr_in.FDb.zd_related.Prev
// Return pointer to previous element in the list
inline acr_in::FCtype* acr_in::zd_related_Prev(acr_in::FCtype &row) {
    return row.zd_related_prev;
}

// --- acr_in.FDb.zd_related.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FCtype& acr_in::zd_related_qLast() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_related_tail;
    return *row;
}

// --- acr_in.FDb.ind_finput.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_finput_EmptyQ() {
    return _db.ind_finput_n == 0;
}

// --- acr_in.FDb.ind_finput.N
// Return number of items in the hash
inline i32 acr_in::ind_finput_N() {
    return _db.ind_finput_n;
}

// --- acr_in.FDb.target.EmptyQ
// Return true if index is empty
inline bool acr_in::target_EmptyQ() {
    return _db.target_n == 0;
}

// --- acr_in.FDb.target.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTarget* acr_in::target_Find(u64 t) {
    acr_in::FTarget *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.target_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.target_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.target.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FTarget* acr_in::target_Last() {
    return target_Find(u64(_db.target_n-1));
}

// --- acr_in.FDb.target.N
// Return number of items in the pool
inline i32 acr_in::target_N() {
    return _db.target_n;
}

// --- acr_in.FDb.target.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FTarget& acr_in::target_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.target_lary[bsr][index];
}

// --- acr_in.FDb.ind_target.EmptyQ
// Return true if hash is empty
inline bool acr_in::ind_target_EmptyQ() {
    return _db.ind_target_n == 0;
}

// --- acr_in.FDb.ind_target.N
// Return number of items in the hash
inline i32 acr_in::ind_target_N() {
    return _db.ind_target_n;
}

// --- acr_in.FDb.targdep.EmptyQ
// Return true if index is empty
inline bool acr_in::targdep_EmptyQ() {
    return _db.targdep_n == 0;
}

// --- acr_in.FDb.targdep.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTargdep* acr_in::targdep_Find(u64 t) {
    acr_in::FTargdep *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.targdep_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.targdep_lary[bsr][index];
    }
    return retval;
}

// --- acr_in.FDb.targdep.Last
// Return pointer to last element of array, or NULL if array is empty
inline acr_in::FTargdep* acr_in::targdep_Last() {
    return targdep_Find(u64(_db.targdep_n-1));
}

// --- acr_in.FDb.targdep.N
// Return number of items in the pool
inline i32 acr_in::targdep_N() {
    return _db.targdep_n;
}

// --- acr_in.FDb.targdep.qFind
// 'quick' Access row by row id. No bounds checking.
inline acr_in::FTargdep& acr_in::targdep_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.targdep_lary[bsr][index];
}

// --- acr_in.FDb.zd_targ_visit.EmptyQ
// Return true if index is empty
inline bool acr_in::zd_targ_visit_EmptyQ() {
    return _db.zd_targ_visit_head == NULL;
}

// --- acr_in.FDb.zd_targ_visit.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline acr_in::FTarget* acr_in::zd_targ_visit_First() {
    acr_in::FTarget *row = NULL;
    row = _db.zd_targ_visit_head;
    return row;
}

// --- acr_in.FDb.zd_targ_visit.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool acr_in::zd_targ_visit_InLlistQ(acr_in::FTarget& row) {
    bool result = false;
    result = !(row.zd_targ_visit_next == (acr_in::FTarget*)-1);
    return result;
}

// --- acr_in.FDb.zd_targ_visit.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline acr_in::FTarget* acr_in::zd_targ_visit_Last() {
    acr_in::FTarget *row = NULL;
    row = _db.zd_targ_visit_tail;
    return row;
}

// --- acr_in.FDb.zd_targ_visit.N
// Return number of items in the linked list
inline i32 acr_in::zd_targ_visit_N() {
    return _db.zd_targ_visit_n;
}

// --- acr_in.FDb.zd_targ_visit.Next
// Return pointer to next element in the list
inline acr_in::FTarget* acr_in::zd_targ_visit_Next(acr_in::FTarget &row) {
    return row.zd_targ_visit_next;
}

// --- acr_in.FDb.zd_targ_visit.Prev
// Return pointer to previous element in the list
inline acr_in::FTarget* acr_in::zd_targ_visit_Prev(acr_in::FTarget &row) {
    return row.zd_targ_visit_prev;
}

// --- acr_in.FDb.zd_targ_visit.qLast
// Return reference to last element in the index. No bounds checking.
inline acr_in::FTarget& acr_in::zd_targ_visit_qLast() {
    acr_in::FTarget *row = NULL;
    row = _db.zd_targ_visit_tail;
    return *row;
}

// --- acr_in.FDb.tuple_curs.Reset
// cursor points to valid item
inline void acr_in::_db_tuple_curs_Reset(_db_tuple_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.tuple_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_tuple_curs_ValidQ(_db_tuple_curs &curs) {
    return curs.index < _db.tuple_n;
}

// --- acr_in.FDb.tuple_curs.Next
// proceed to next item
inline void acr_in::_db_tuple_curs_Next(_db_tuple_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.tuple_curs.Access
// item access
inline acr_in::FTuple& acr_in::_db_tuple_curs_Access(_db_tuple_curs &curs) {
    return tuple_qFind(u64(curs.index));
}

// --- acr_in.FDb.finput_curs.Reset
// cursor points to valid item
inline void acr_in::_db_finput_curs_Reset(_db_finput_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.finput_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_finput_curs_ValidQ(_db_finput_curs &curs) {
    return curs.index < _db.finput_n;
}

// --- acr_in.FDb.finput_curs.Next
// proceed to next item
inline void acr_in::_db_finput_curs_Next(_db_finput_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.finput_curs.Access
// item access
inline acr_in::FFinput& acr_in::_db_finput_curs_Access(_db_finput_curs &curs) {
    return finput_qFind(u64(curs.index));
}

// --- acr_in.FDb.field_curs.Reset
// cursor points to valid item
inline void acr_in::_db_field_curs_Reset(_db_field_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.field_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_field_curs_ValidQ(_db_field_curs &curs) {
    return curs.index < _db.field_n;
}

// --- acr_in.FDb.field_curs.Next
// proceed to next item
inline void acr_in::_db_field_curs_Next(_db_field_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.field_curs.Access
// item access
inline acr_in::FField& acr_in::_db_field_curs_Access(_db_field_curs &curs) {
    return field_qFind(u64(curs.index));
}

// --- acr_in.FDb.ctype_curs.Reset
// cursor points to valid item
inline void acr_in::_db_ctype_curs_Reset(_db_ctype_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.ctype_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_ctype_curs_ValidQ(_db_ctype_curs &curs) {
    return curs.index < _db.ctype_n;
}

// --- acr_in.FDb.ctype_curs.Next
// proceed to next item
inline void acr_in::_db_ctype_curs_Next(_db_ctype_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.ctype_curs.Access
// item access
inline acr_in::FCtype& acr_in::_db_ctype_curs_Access(_db_ctype_curs &curs) {
    return ctype_qFind(u64(curs.index));
}

// --- acr_in.FDb.ssimfile_curs.Reset
// cursor points to valid item
inline void acr_in::_db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.ssimfile_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs) {
    return curs.index < _db.ssimfile_n;
}

// --- acr_in.FDb.ssimfile_curs.Next
// proceed to next item
inline void acr_in::_db_ssimfile_curs_Next(_db_ssimfile_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.ssimfile_curs.Access
// item access
inline acr_in::FSsimfile& acr_in::_db_ssimfile_curs_Access(_db_ssimfile_curs &curs) {
    return ssimfile_qFind(u64(curs.index));
}

// --- acr_in.FDb.ns_curs.Reset
// cursor points to valid item
inline void acr_in::_db_ns_curs_Reset(_db_ns_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.ns_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_ns_curs_ValidQ(_db_ns_curs &curs) {
    return curs.index < _db.ns_n;
}

// --- acr_in.FDb.ns_curs.Next
// proceed to next item
inline void acr_in::_db_ns_curs_Next(_db_ns_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.ns_curs.Access
// item access
inline acr_in::FNs& acr_in::_db_ns_curs_Access(_db_ns_curs &curs) {
    return ns_qFind(u64(curs.index));
}

// --- acr_in.FDb.zd_todo_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_todo_curs_Reset(_db_zd_todo_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_todo_head;
}

// --- acr_in.FDb.zd_todo_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_todo_curs_ValidQ(_db_zd_todo_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_todo_curs.Next
// proceed to next item
inline void acr_in::_db_zd_todo_curs_Next(_db_zd_todo_curs &curs) {
    curs.row = (*curs.row).zd_todo_next;
}

// --- acr_in.FDb.zd_todo_curs.Access
// item access
inline acr_in::FCtype& acr_in::_db_zd_todo_curs_Access(_db_zd_todo_curs &curs) {
    return *curs.row;
}

// --- acr_in.FDb.zd_ssimfile_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_ssimfile_curs_Reset(_db_zd_ssimfile_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_ssimfile_head;
}

// --- acr_in.FDb.zd_ssimfile_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_ssimfile_curs_ValidQ(_db_zd_ssimfile_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_ssimfile_curs.Next
// proceed to next item
inline void acr_in::_db_zd_ssimfile_curs_Next(_db_zd_ssimfile_curs &curs) {
    curs.row = (*curs.row).zd_ssimfile_next;
}

// --- acr_in.FDb.zd_ssimfile_curs.Access
// item access
inline acr_in::FSsimfile& acr_in::_db_zd_ssimfile_curs_Access(_db_zd_ssimfile_curs &curs) {
    return *curs.row;
}

// --- acr_in.FDb.substr_curs.Reset
// cursor points to valid item
inline void acr_in::_db_substr_curs_Reset(_db_substr_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.substr_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_substr_curs_ValidQ(_db_substr_curs &curs) {
    return curs.index < _db.substr_n;
}

// --- acr_in.FDb.substr_curs.Next
// proceed to next item
inline void acr_in::_db_substr_curs_Next(_db_substr_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.substr_curs.Access
// item access
inline acr_in::FSubstr& acr_in::_db_substr_curs_Access(_db_substr_curs &curs) {
    return substr_qFind(u64(curs.index));
}

// --- acr_in.FDb.dispsig_curs.Reset
// cursor points to valid item
inline void acr_in::_db_dispsig_curs_Reset(_db_dispsig_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.dispsig_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_dispsig_curs_ValidQ(_db_dispsig_curs &curs) {
    return curs.index < _db.dispsig_n;
}

// --- acr_in.FDb.dispsig_curs.Next
// proceed to next item
inline void acr_in::_db_dispsig_curs_Next(_db_dispsig_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.dispsig_curs.Access
// item access
inline acr_in::FDispsig& acr_in::_db_dispsig_curs_Access(_db_dispsig_curs &curs) {
    return dispsig_qFind(u64(curs.index));
}

// --- acr_in.FDb.zd_select_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_select_curs_Reset(_db_zd_select_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_select_head;
}

// --- acr_in.FDb.zd_select_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_select_curs_ValidQ(_db_zd_select_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_select_curs.Next
// proceed to next item
inline void acr_in::_db_zd_select_curs_Next(_db_zd_select_curs &curs) {
    curs.row = (*curs.row).zd_select_next;
}

// --- acr_in.FDb.zd_select_curs.Access
// item access
inline acr_in::FTuple& acr_in::_db_zd_select_curs_Access(_db_zd_select_curs &curs) {
    return *curs.row;
}

// --- acr_in.FDb.zd_deselect_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_deselect_curs_Reset(_db_zd_deselect_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_deselect_head;
}

// --- acr_in.FDb.zd_deselect_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_deselect_curs_ValidQ(_db_zd_deselect_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_deselect_curs.Next
// proceed to next item
inline void acr_in::_db_zd_deselect_curs_Next(_db_zd_deselect_curs &curs) {
    curs.row = (*curs.row).zd_deselect_next;
}

// --- acr_in.FDb.zd_deselect_curs.Access
// item access
inline acr_in::FTuple& acr_in::_db_zd_deselect_curs_Access(_db_zd_deselect_curs &curs) {
    return *curs.row;
}

// --- acr_in.FDb.zd_related_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_related_curs_Reset(_db_zd_related_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_related_head;
}

// --- acr_in.FDb.zd_related_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_related_curs_ValidQ(_db_zd_related_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_related_curs.Next
// proceed to next item
inline void acr_in::_db_zd_related_curs_Next(_db_zd_related_curs &curs) {
    curs.row = (*curs.row).zd_related_next;
}

// --- acr_in.FDb.zd_related_curs.Access
// item access
inline acr_in::FCtype& acr_in::_db_zd_related_curs_Access(_db_zd_related_curs &curs) {
    return *curs.row;
}

// --- acr_in.FDb.target_curs.Reset
// cursor points to valid item
inline void acr_in::_db_target_curs_Reset(_db_target_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.target_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_target_curs_ValidQ(_db_target_curs &curs) {
    return curs.index < _db.target_n;
}

// --- acr_in.FDb.target_curs.Next
// proceed to next item
inline void acr_in::_db_target_curs_Next(_db_target_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.target_curs.Access
// item access
inline acr_in::FTarget& acr_in::_db_target_curs_Access(_db_target_curs &curs) {
    return target_qFind(u64(curs.index));
}

// --- acr_in.FDb.targdep_curs.Reset
// cursor points to valid item
inline void acr_in::_db_targdep_curs_Reset(_db_targdep_curs &curs, acr_in::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- acr_in.FDb.targdep_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_targdep_curs_ValidQ(_db_targdep_curs &curs) {
    return curs.index < _db.targdep_n;
}

// --- acr_in.FDb.targdep_curs.Next
// proceed to next item
inline void acr_in::_db_targdep_curs_Next(_db_targdep_curs &curs) {
    curs.index++;
}

// --- acr_in.FDb.targdep_curs.Access
// item access
inline acr_in::FTargdep& acr_in::_db_targdep_curs_Access(_db_targdep_curs &curs) {
    return targdep_qFind(u64(curs.index));
}

// --- acr_in.FDb.zd_targ_visit_curs.Reset
// cursor points to valid item
inline void acr_in::_db_zd_targ_visit_curs_Reset(_db_zd_targ_visit_curs &curs, acr_in::FDb &parent) {
    curs.row = parent.zd_targ_visit_head;
}

// --- acr_in.FDb.zd_targ_visit_curs.ValidQ
// cursor points to valid item
inline bool acr_in::_db_zd_targ_visit_curs_ValidQ(_db_zd_targ_visit_curs &curs) {
    return curs.row != NULL;
}

// --- acr_in.FDb.zd_targ_visit_curs.Next
// proceed to next item
inline void acr_in::_db_zd_targ_visit_curs_Next(_db_zd_targ_visit_curs &curs) {
    curs.row = (*curs.row).zd_targ_visit_next;
}

// --- acr_in.FDb.zd_targ_visit_curs.Access
// item access
inline acr_in::FTarget& acr_in::_db_zd_targ_visit_curs_Access(_db_zd_targ_visit_curs &curs) {
    return *curs.row;
}
inline acr_in::FDispsig::FDispsig() {
    acr_in::FDispsig_Init(*this);
}

inline acr_in::FDispsig::~FDispsig() {
    acr_in::FDispsig_Uninit(*this);
}


// --- acr_in.FDispsig..Init
// Set all fields to initial values.
inline void acr_in::FDispsig_Init(acr_in::FDispsig& dispsig) {
    dispsig.p_ns = NULL;
    dispsig.ind_dispsig_next = (acr_in::FDispsig*)-1; // (acr_in.FDb.ind_dispsig) not-in-hash
}
inline acr_in::FField::FField() {
    acr_in::FField_Init(*this);
}

inline acr_in::FField::~FField() {
    acr_in::FField_Uninit(*this);
}


// --- acr_in.FField.c_substr.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_in::c_substr_InsertMaybe(acr_in::FField& field, acr_in::FSubstr& row) {
    acr_in::FSubstr* ptr = field.c_substr;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        field.c_substr = &row;
    }
    return retval;
}

// --- acr_in.FField.c_substr.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_in::c_substr_Remove(acr_in::FField& field, acr_in::FSubstr& row) {
    acr_in::FSubstr *ptr = field.c_substr;
    if (LIKELY(ptr == &row)) {
        field.c_substr = NULL;
    }
}
inline acr_in::FFinput::FFinput() {
    acr_in::FFinput_Init(*this);
}

inline acr_in::FFinput::~FFinput() {
    acr_in::FFinput_Uninit(*this);
}


// --- acr_in.FFinput..Init
// Set all fields to initial values.
inline void acr_in::FFinput_Init(acr_in::FFinput& finput) {
    finput.extrn = bool(false);
    finput.update = bool(false);
    finput.strict = bool(true);
    finput.p_ns = NULL;
    finput.p_field = NULL;
    finput.ind_finput_next = (acr_in::FFinput*)-1; // (acr_in.FDb.ind_finput) not-in-hash
}
inline acr_in::FNs::FNs() {
    acr_in::FNs_Init(*this);
}

inline acr_in::FNs::~FNs() {
    acr_in::FNs_Uninit(*this);
}


// --- acr_in.FNs.c_target.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool acr_in::c_target_InsertMaybe(acr_in::FNs& ns, acr_in::FTarget& row) {
    acr_in::FTarget* ptr = ns.c_target;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ns.c_target = &row;
    }
    return retval;
}

// --- acr_in.FNs.c_target.Remove
// Remove element from index. If element is not in index, do nothing.
inline void acr_in::c_target_Remove(acr_in::FNs& ns, acr_in::FTarget& row) {
    acr_in::FTarget *ptr = ns.c_target;
    if (LIKELY(ptr == &row)) {
        ns.c_target = NULL;
    }
}

// --- acr_in.FNs..Init
// Set all fields to initial values.
inline void acr_in::FNs_Init(acr_in::FNs& ns) {
    ns.select = bool(false);
    ns.c_target = NULL;
    ns.ind_ns_next = (acr_in::FNs*)-1; // (acr_in.FDb.ind_ns) not-in-hash
}
inline acr_in::FSsimfile::FSsimfile() {
    acr_in::FSsimfile_Init(*this);
}

inline acr_in::FSsimfile::~FSsimfile() {
    acr_in::FSsimfile_Uninit(*this);
}


// --- acr_in.FSsimfile..Init
// Set all fields to initial values.
inline void acr_in::FSsimfile_Init(acr_in::FSsimfile& ssimfile) {
    ssimfile.p_ctype = NULL;
    ssimfile.is_finput = bool(false);
    ssimfile.zd_ssimfile_next = (acr_in::FSsimfile*)-1; // (acr_in.FDb.zd_ssimfile) not-in-list
    ssimfile.zd_ssimfile_prev = NULL; // (acr_in.FDb.zd_ssimfile)
}
inline acr_in::FSubstr::FSubstr() {
}

inline acr_in::FSubstr::~FSubstr() {
    acr_in::FSubstr_Uninit(*this);
}

inline acr_in::FTargdep::FTargdep() {
    acr_in::FTargdep_Init(*this);
}

inline acr_in::FTargdep::~FTargdep() {
    acr_in::FTargdep_Uninit(*this);
}


// --- acr_in.FTargdep..Init
// Set all fields to initial values.
inline void acr_in::FTargdep_Init(acr_in::FTargdep& targdep) {
    targdep.p_parent = NULL;
    targdep.target_c_targdep_in_ary = bool(false);
}
inline acr_in::FTarget::FTarget() {
    acr_in::FTarget_Init(*this);
}

inline acr_in::FTarget::~FTarget() {
    acr_in::FTarget_Uninit(*this);
}


// --- acr_in.FTarget.c_targdep.EmptyQ
// Return true if index is empty
inline bool acr_in::c_targdep_EmptyQ(acr_in::FTarget& target) {
    return target.c_targdep_n == 0;
}

// --- acr_in.FTarget.c_targdep.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTargdep* acr_in::c_targdep_Find(acr_in::FTarget& target, u32 t) {
    acr_in::FTargdep *retval = NULL;
    u64 idx = t;
    u64 lim = target.c_targdep_n;
    if (idx < lim) {
        retval = target.c_targdep_elems[idx];
    }
    return retval;
}

// --- acr_in.FTarget.c_targdep.Getary
// Return array of pointers
inline algo::aryptr<acr_in::FTargdep*> acr_in::c_targdep_Getary(acr_in::FTarget& target) {
    return algo::aryptr<acr_in::FTargdep*>(target.c_targdep_elems, target.c_targdep_n);
}

// --- acr_in.FTarget.c_targdep.N
// Return number of items in the pointer array
inline i32 acr_in::c_targdep_N(const acr_in::FTarget& target) {
    return target.c_targdep_n;
}

// --- acr_in.FTarget.c_targdep.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_in::c_targdep_RemoveAll(acr_in::FTarget& target) {
    for (u32 i = 0; i < target.c_targdep_n; i++) {
        // mark all elements as not-in-array
        target.c_targdep_elems[i]->target_c_targdep_in_ary = false;
    }
    target.c_targdep_n = 0;
}

// --- acr_in.FTarget..Init
// Set all fields to initial values.
inline void acr_in::FTarget_Init(acr_in::FTarget& target) {
    target.compat = algo::strptr("Linux-%.%-%");
    target.c_targdep_elems = NULL; // (acr_in.FTarget.c_targdep)
    target.c_targdep_n = 0; // (acr_in.FTarget.c_targdep)
    target.c_targdep_max = 0; // (acr_in.FTarget.c_targdep)
    target.p_ns = NULL;
    target.ind_target_next = (acr_in::FTarget*)-1; // (acr_in.FDb.ind_target) not-in-hash
    target.zd_targ_visit_next = (acr_in::FTarget*)-1; // (acr_in.FDb.zd_targ_visit) not-in-list
    target.zd_targ_visit_prev = NULL; // (acr_in.FDb.zd_targ_visit)
}

// --- acr_in.FTarget.c_targdep_curs.Reset
inline void acr_in::target_c_targdep_curs_Reset(target_c_targdep_curs &curs, acr_in::FTarget &parent) {
    curs.elems = parent.c_targdep_elems;
    curs.n_elems = parent.c_targdep_n;
    curs.index = 0;
}

// --- acr_in.FTarget.c_targdep_curs.ValidQ
// cursor points to valid item
inline bool acr_in::target_c_targdep_curs_ValidQ(target_c_targdep_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_in.FTarget.c_targdep_curs.Next
// proceed to next item
inline void acr_in::target_c_targdep_curs_Next(target_c_targdep_curs &curs) {
    curs.index++;
}

// --- acr_in.FTarget.c_targdep_curs.Access
// item access
inline acr_in::FTargdep& acr_in::target_c_targdep_curs_Access(target_c_targdep_curs &curs) {
    return *curs.elems[curs.index];
}
inline acr_in::FTuple::FTuple() {
    acr_in::FTuple_Init(*this);
}

inline acr_in::FTuple::~FTuple() {
    acr_in::FTuple_Uninit(*this);
}


// --- acr_in.FTuple.c_child.EmptyQ
// Return true if index is empty
inline bool acr_in::c_child_EmptyQ(acr_in::FTuple& tuple) {
    return tuple.c_child_n == 0;
}

// --- acr_in.FTuple.c_child.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTuple* acr_in::c_child_Find(acr_in::FTuple& tuple, u32 t) {
    acr_in::FTuple *retval = NULL;
    u64 idx = t;
    u64 lim = tuple.c_child_n;
    if (idx < lim) {
        retval = tuple.c_child_elems[idx];
    }
    return retval;
}

// --- acr_in.FTuple.c_child.Getary
// Return array of pointers
inline algo::aryptr<acr_in::FTuple*> acr_in::c_child_Getary(acr_in::FTuple& tuple) {
    return algo::aryptr<acr_in::FTuple*>(tuple.c_child_elems, tuple.c_child_n);
}

// --- acr_in.FTuple.c_child.N
// Return number of items in the pointer array
inline i32 acr_in::c_child_N(const acr_in::FTuple& tuple) {
    return tuple.c_child_n;
}

// --- acr_in.FTuple.c_child.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_in::c_child_RemoveAll(acr_in::FTuple& tuple) {
    tuple.c_child_n = 0;
}

// --- acr_in.FTuple.c_parent.EmptyQ
// Return true if index is empty
inline bool acr_in::c_parent_EmptyQ(acr_in::FTuple& tuple) {
    return tuple.c_parent_n == 0;
}

// --- acr_in.FTuple.c_parent.Find
// Look up row by row id. Return NULL if out of range
inline acr_in::FTuple* acr_in::c_parent_Find(acr_in::FTuple& tuple, u32 t) {
    acr_in::FTuple *retval = NULL;
    u64 idx = t;
    u64 lim = tuple.c_parent_n;
    if (idx < lim) {
        retval = tuple.c_parent_elems[idx];
    }
    return retval;
}

// --- acr_in.FTuple.c_parent.Getary
// Return array of pointers
inline algo::aryptr<acr_in::FTuple*> acr_in::c_parent_Getary(acr_in::FTuple& tuple) {
    return algo::aryptr<acr_in::FTuple*>(tuple.c_parent_elems, tuple.c_parent_n);
}

// --- acr_in.FTuple.c_parent.N
// Return number of items in the pointer array
inline i32 acr_in::c_parent_N(const acr_in::FTuple& tuple) {
    return tuple.c_parent_n;
}

// --- acr_in.FTuple.c_parent.RemoveAll
// Empty the index. (The rows are not deleted)
inline void acr_in::c_parent_RemoveAll(acr_in::FTuple& tuple) {
    tuple.c_parent_n = 0;
}

// --- acr_in.FTuple..Init
// Set all fields to initial values.
inline void acr_in::FTuple_Init(acr_in::FTuple& tuple) {
    tuple.c_child_elems = NULL; // (acr_in.FTuple.c_child)
    tuple.c_child_n = 0; // (acr_in.FTuple.c_child)
    tuple.c_child_max = 0; // (acr_in.FTuple.c_child)
    tuple.p_ctype = NULL;
    tuple.c_parent_elems = NULL; // (acr_in.FTuple.c_parent)
    tuple.c_parent_n = 0; // (acr_in.FTuple.c_parent)
    tuple.c_parent_max = 0; // (acr_in.FTuple.c_parent)
    tuple.deselect_visited = bool(false);
    tuple.ind_tuple_next = (acr_in::FTuple*)-1; // (acr_in.FDb.ind_tuple) not-in-hash
    tuple.zd_select_next = (acr_in::FTuple*)-1; // (acr_in.FDb.zd_select) not-in-list
    tuple.zd_select_prev = NULL; // (acr_in.FDb.zd_select)
    tuple.zd_deselect_next = (acr_in::FTuple*)-1; // (acr_in.FDb.zd_deselect) not-in-list
    tuple.zd_deselect_prev = NULL; // (acr_in.FDb.zd_deselect)
}

// --- acr_in.FTuple.c_child_curs.Reset
inline void acr_in::tuple_c_child_curs_Reset(tuple_c_child_curs &curs, acr_in::FTuple &parent) {
    curs.elems = parent.c_child_elems;
    curs.n_elems = parent.c_child_n;
    curs.index = 0;
}

// --- acr_in.FTuple.c_child_curs.ValidQ
// cursor points to valid item
inline bool acr_in::tuple_c_child_curs_ValidQ(tuple_c_child_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_in.FTuple.c_child_curs.Next
// proceed to next item
inline void acr_in::tuple_c_child_curs_Next(tuple_c_child_curs &curs) {
    curs.index++;
}

// --- acr_in.FTuple.c_child_curs.Access
// item access
inline acr_in::FTuple& acr_in::tuple_c_child_curs_Access(tuple_c_child_curs &curs) {
    return *curs.elems[curs.index];
}

// --- acr_in.FTuple.c_parent_curs.Reset
inline void acr_in::tuple_c_parent_curs_Reset(tuple_c_parent_curs &curs, acr_in::FTuple &parent) {
    curs.elems = parent.c_parent_elems;
    curs.n_elems = parent.c_parent_n;
    curs.index = 0;
}

// --- acr_in.FTuple.c_parent_curs.ValidQ
// cursor points to valid item
inline bool acr_in::tuple_c_parent_curs_ValidQ(tuple_c_parent_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- acr_in.FTuple.c_parent_curs.Next
// proceed to next item
inline void acr_in::tuple_c_parent_curs_Next(tuple_c_parent_curs &curs) {
    curs.index++;
}

// --- acr_in.FTuple.c_parent_curs.Access
// item access
inline acr_in::FTuple& acr_in::tuple_c_parent_curs_Access(tuple_c_parent_curs &curs) {
    return *curs.elems[curs.index];
}
inline acr_in::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline acr_in::FieldId::FieldId(acr_in_FieldIdEnum arg) { this->value = i32(arg); }
inline acr_in::FieldId::FieldId() {
    acr_in::FieldId_Init(*this);
}


// --- acr_in.FieldId.value.GetEnum
// Get value of field as enum type
inline acr_in_FieldIdEnum acr_in::value_GetEnum(const acr_in::FieldId& parent) {
    return acr_in_FieldIdEnum(parent.value);
}

// --- acr_in.FieldId.value.SetEnum
// Set value of field from enum type.
inline void acr_in::value_SetEnum(acr_in::FieldId& parent, acr_in_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- acr_in.FieldId.value.Cast
inline acr_in::FieldId::operator acr_in_FieldIdEnum () const {
    return acr_in_FieldIdEnum((*this).value);
}

// --- acr_in.FieldId..Init
// Set all fields to initial values.
inline void acr_in::FieldId_Init(acr_in::FieldId& parent) {
    parent.value = i32(-1);
}
inline acr_in::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline acr_in::TableId::TableId(acr_in_TableIdEnum arg) { this->value = i32(arg); }
inline acr_in::TableId::TableId() {
    acr_in::TableId_Init(*this);
}


// --- acr_in.TableId.value.GetEnum
// Get value of field as enum type
inline acr_in_TableIdEnum acr_in::value_GetEnum(const acr_in::TableId& parent) {
    return acr_in_TableIdEnum(parent.value);
}

// --- acr_in.TableId.value.SetEnum
// Set value of field from enum type.
inline void acr_in::value_SetEnum(acr_in::TableId& parent, acr_in_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- acr_in.TableId.value.Cast
inline acr_in::TableId::operator acr_in_TableIdEnum () const {
    return acr_in_TableIdEnum((*this).value);
}

// --- acr_in.TableId..Init
// Set all fields to initial values.
inline void acr_in::TableId_Init(acr_in::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_in::trace &row) {// cfmt:acr_in.trace.String
    acr_in::trace_Print(const_cast<acr_in::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_in::FieldId &row) {// cfmt:acr_in.FieldId.String
    acr_in::FieldId_Print(const_cast<acr_in::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const acr_in::TableId &row) {// cfmt:acr_in.TableId.String
    acr_in::TableId_Print(const_cast<acr_in::TableId&>(row), str);
    return str;
}
