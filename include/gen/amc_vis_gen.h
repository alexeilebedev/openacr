//
// include/gen/amc_vis_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/dmmeta_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/command_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- amc_vis_FieldIdEnum

enum amc_vis_FieldIdEnum {        // amc_vis.FieldId.value
     amc_vis_FieldId_value   = 0
};

enum { amc_vis_FieldIdEnum_N = 1 };


// --- amc_vis_TableIdEnum

enum amc_vis_TableIdEnum {                  // amc_vis.TableId.value
     amc_vis_TableId_dmmeta_Ctype     = 0   // dmmeta.Ctype -> amc_vis.FCtype
    ,amc_vis_TableId_dmmeta_ctype     = 0   // dmmeta.ctype -> amc_vis.FCtype
    ,amc_vis_TableId_dmmeta_Field     = 1   // dmmeta.Field -> amc_vis.FField
    ,amc_vis_TableId_dmmeta_field     = 1   // dmmeta.field -> amc_vis.FField
    ,amc_vis_TableId_dmmeta_Finput    = 2   // dmmeta.Finput -> amc_vis.FFinput
    ,amc_vis_TableId_dmmeta_finput    = 2   // dmmeta.finput -> amc_vis.FFinput
    ,amc_vis_TableId_dmmeta_Reftype   = 3   // dmmeta.Reftype -> amc_vis.FReftype
    ,amc_vis_TableId_dmmeta_reftype   = 3   // dmmeta.reftype -> amc_vis.FReftype
};

enum { amc_vis_TableIdEnum_N = 8 };

namespace amc_vis { // gen:ns_pkeytypedef
    typedef i32 OutrowPkey;
} // gen:ns_pkeytypedef
namespace amc_vis { // gen:ns_tclass_field
struct lpool_Lpblock {
    lpool_Lpblock* next;
};
extern const char *amc_vis_help;
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace dmmeta { struct Ctype; }
namespace amc_vis { struct FCtype; }
namespace dmmeta { struct Field; }
namespace amc_vis { struct FReftype; }
namespace dmmeta { struct Finput; }
namespace amc_vis { struct FNode; }
namespace dmmeta { struct Reftype; }
namespace amc_vis { struct Link; }
namespace amc_vis { struct ctype_c_field_curs; }
namespace amc_vis { struct _db_ctype_curs; }
namespace amc_vis { struct _db_field_curs; }
namespace amc_vis { struct _db_node_curs; }
namespace amc_vis { struct _db_link_curs; }
namespace amc_vis { struct _db_linkdep_curs; }
namespace amc_vis { struct _db_c_linklist_curs; }
namespace amc_vis { struct _db_bh_node_curs; }
namespace amc_vis { struct _db_bh_link_curs; }
namespace amc_vis { struct _db_reftype_curs; }
namespace amc_vis { struct _db_nodedep_curs; }
namespace amc_vis { struct _db_outrow_curs; }
namespace amc_vis { struct _db_zd_select_curs; }
namespace amc_vis { struct _db_finput_curs; }
namespace amc_vis { struct node_zd_nodedep_out_curs; }
namespace amc_vis { struct node_zd_nodedep_in_curs; }
namespace amc_vis { struct node_zd_link_out_curs; }
namespace amc_vis { struct node_zd_link_in_curs; }
namespace amc_vis { struct link_zd_linkdep_out_curs; }
namespace amc_vis { struct link_zd_linkdep_in_curs; }
namespace amc_vis { struct outrow_text_curs; }
namespace amc_vis { struct trace; }
namespace amc_vis { struct FDb; }
namespace amc_vis { struct FField; }
namespace amc_vis { struct FFinput; }
namespace amc_vis { struct Nodekey; }
namespace amc_vis { struct FNodedep; }
namespace amc_vis { struct FieldId; }
namespace amc_vis { struct Linkkey; }
namespace amc_vis { struct Linkdep; }
namespace amc_vis { struct Outrow; }
namespace amc_vis { struct TableId; }
namespace amc_vis { extern struct amc_vis::FDb _db; }
namespace amc_vis { // gen:ns_print_struct

// --- amc_vis.FCtype
// create: amc_vis.FDb.ctype (Lary)
// global access: ctype (Lary, by rowid)
// global access: ind_ctype (Thash, hash field ctype)
// global access: zd_select (Llist)
// access: amc_vis.FCtype.p_base (Upptr)
// access: amc_vis.FField.p_ctype (Upptr)
// access: amc_vis.FField.p_arg (Upptr)
// access: amc_vis.FNode.p_ctype (Upptr)
struct FCtype { // amc_vis.FCtype
    algo::Smallstr100   ctype;            // Identifier. must be ns.typename
    algo::Comment       comment;          //
    algo::cstring       cpp_type;         // type name to use in c++
    amc_vis::FCtype*    p_base;           // reference to parent row
    amc_vis::FField**   c_field_elems;    // array of pointers
    u32                 c_field_n;        // array of pointers
    u32                 c_field_max;      // capacity of allocated array
    i32                 mm_id;            //   0  Model matrix ID
    bool                isinput;          //   false
    amc_vis::FCtype*    ind_ctype_next;   // hash next
    amc_vis::FCtype*    zd_select_next;   // zslist link; -1 means not-in-list
    amc_vis::FCtype*    zd_select_prev;   // previous element
    // reftype Ptrary of amc_vis.FCtype.c_field prohibits copy
    // func:amc_vis.FCtype..AssignOp
    amc_vis::FCtype&     operator =(const amc_vis::FCtype &rhs) = delete;
    // reftype Ptrary of amc_vis.FCtype.c_field prohibits copy
    // func:amc_vis.FCtype..CopyCtor
    FCtype(const amc_vis::FCtype &rhs) = delete;
private:
    // func:amc_vis.FCtype..Ctor
    inline               FCtype() __attribute__((nothrow));
    // func:amc_vis.FCtype..Dtor
    inline               ~FCtype() __attribute__((nothrow));
    friend amc_vis::FCtype&     ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FCtype*     ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctype_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:amc_vis.FCtype.msghdr.CopyOut
void                 ctype_CopyOut(amc_vis::FCtype &row, dmmeta::Ctype &out) __attribute__((nothrow));
// Copy fields in to row
// func:amc_vis.FCtype.msghdr.CopyIn
void                 ctype_CopyIn(amc_vis::FCtype &row, dmmeta::Ctype &in) __attribute__((nothrow));

// func:amc_vis.FCtype.ns.Get
algo::Smallstr16     ns_Get(amc_vis::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// func:amc_vis.FCtype.name.Get
algo::Smallstr100    name_Get(amc_vis::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:amc_vis.FCtype.c_field.EmptyQ
inline bool          c_field_EmptyQ(amc_vis::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FCtype.c_field.Find
inline amc_vis::FField* c_field_Find(amc_vis::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:amc_vis.FCtype.c_field.Getary
inline algo::aryptr<amc_vis::FField*> c_field_Getary(amc_vis::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:amc_vis.FCtype.c_field.Insert
void                 c_field_Insert(amc_vis::FCtype& ctype, amc_vis::FField& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:amc_vis.FCtype.c_field.InsertMaybe
bool                 c_field_InsertMaybe(amc_vis::FCtype& ctype, amc_vis::FField& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:amc_vis.FCtype.c_field.N
inline i32           c_field_N(const amc_vis::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:amc_vis.FCtype.c_field.Remove
void                 c_field_Remove(amc_vis::FCtype& ctype, amc_vis::FField& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FCtype.c_field.RemoveAll
inline void          c_field_RemoveAll(amc_vis::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:amc_vis.FCtype.c_field.Reserve
void                 c_field_Reserve(amc_vis::FCtype& ctype, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:amc_vis.FCtype.c_field.qFind
inline amc_vis::FField& c_field_qFind(amc_vis::FCtype& ctype, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:amc_vis.FCtype.c_field.InAryQ
inline bool          ctype_c_field_InAryQ(amc_vis::FField& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:amc_vis.FCtype.c_field.qLast
inline amc_vis::FField& c_field_qLast(amc_vis::FCtype& ctype) __attribute__((nothrow));

// func:amc_vis.FCtype.c_field_curs.Reset
inline void          ctype_c_field_curs_Reset(ctype_c_field_curs &curs, amc_vis::FCtype &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FCtype.c_field_curs.ValidQ
inline bool          ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FCtype.c_field_curs.Next
inline void          ctype_c_field_curs_Next(ctype_c_field_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FCtype.c_field_curs.Access
inline amc_vis::FField& ctype_c_field_curs_Access(ctype_c_field_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.FCtype..Init
inline void          FCtype_Init(amc_vis::FCtype& ctype);
// func:amc_vis.FCtype..Uninit
void                 FCtype_Uninit(amc_vis::FCtype& ctype) __attribute__((nothrow));

// --- amc_vis.trace
#pragma pack(push,1)
struct trace { // amc_vis.trace
    // func:amc_vis.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:amc_vis.trace.String  printfmt:Tuple
// func:amc_vis.trace..Print
void                 trace_Print(amc_vis::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.FDb
// create: amc_vis.FDb._db (Global)
struct FDb { // amc_vis.FDb: In-memory database for amc_vis
    lpool_Lpblock*        lpool_free[36];              // Lpool levels
    command::amc_vis      cmdline;                     //
    amc_vis::FCtype*      ctype_lary[32];              // level array
    i32                   ctype_n;                     // number of elements in array
    amc_vis::FField*      field_lary[32];              // level array
    i32                   field_n;                     // number of elements in array
    amc_vis::FCtype**     ind_ctype_buckets_elems;     // pointer to bucket array
    i32                   ind_ctype_buckets_n;         // number of elements in bucket array
    i32                   ind_ctype_n;                 // number of elements in the hash table
    amc_vis::FField**     ind_field_buckets_elems;     // pointer to bucket array
    i32                   ind_field_buckets_n;         // number of elements in bucket array
    i32                   ind_field_n;                 // number of elements in the hash table
    amc_vis::FNode*       node_lary[32];               // level array
    i32                   node_n;                      // number of elements in array
    amc_vis::FNode**      ind_node_buckets_elems;      // pointer to bucket array
    i32                   ind_node_buckets_n;          // number of elements in bucket array
    i32                   ind_node_n;                  // number of elements in the hash table
    amc_vis::Link*        link_lary[32];               // level array
    i32                   link_n;                      // number of elements in array
    amc_vis::Link**       ind_link_buckets_elems;      // pointer to bucket array
    i32                   ind_link_buckets_n;          // number of elements in bucket array
    i32                   ind_link_n;                  // number of elements in the hash table
    amc_vis::Linkdep*     linkdep_lary[32];            // level array
    i32                   linkdep_n;                   // number of elements in array
    amc_vis::Link**       c_linklist_elems;            // array of pointers
    u32                   c_linklist_n;                // array of pointers
    u32                   c_linklist_max;              // capacity of allocated array
    amc_vis::FNode**      bh_node_elems;               // binary heap by nodekey
    i32                   bh_node_n;                   // number of elements in the heap
    i32                   bh_node_max;                 // max elements in bh_node_elems
    amc_vis::Link**       bh_link_elems;               // binary heap by linkkey
    i32                   bh_link_n;                   // number of elements in the heap
    i32                   bh_link_max;                 // max elements in bh_link_elems
    amc_vis::FReftype*    reftype_lary[32];            // level array
    i32                   reftype_n;                   // number of elements in array
    amc_vis::FReftype**   ind_reftype_buckets_elems;   // pointer to bucket array
    i32                   ind_reftype_buckets_n;       // number of elements in bucket array
    i32                   ind_reftype_n;               // number of elements in the hash table
    amc_vis::FNodedep*    nodedep_lary[32];            // level array
    i32                   nodedep_n;                   // number of elements in array
    amc_vis::Outrow*      outrow_lary[32];             // level array
    i32                   outrow_n;                    // number of elements in array
    amc_vis::FCtype*      zd_select_head;              // zero-terminated doubly linked list
    i32                   zd_select_n;                 // zero-terminated doubly linked list
    amc_vis::FCtype*      zd_select_tail;              // pointer to last element
    amc_vis::FFinput*     finput_lary[32];             // level array
    i32                   finput_n;                    // number of elements in array
    amc_vis::trace        trace;                       //
};

// Free block of memory previously returned by Lpool.
// func:amc_vis.FDb.lpool.FreeMem
void                 lpool_FreeMem(void* mem, u64 size) __attribute__((nothrow));
// Allocate new piece of memory at least SIZE bytes long.
// If not successful, return NULL
// The allocated block is at least 1<<4
// The maximum allocation size is at most 1<<(36+4)
// func:amc_vis.FDb.lpool.AllocMem
void*                lpool_AllocMem(u64 size) __attribute__((__warn_unused_result__, nothrow));
// Add N buffers of some size to the free store
// Reserve NBUF buffers of size BUFSIZE from the base pool (algo_lib::sbrk)
// func:amc_vis.FDb.lpool.ReserveBuffers
bool                 lpool_ReserveBuffers(u64 nbuf, u64 bufsize) __attribute__((nothrow));
// Allocate new block, copy old to new, delete old.
// If the new size is same as old size, do nothing.
// In all other cases, new memory is allocated (i.e. size reduction is not a no-op)
// If no memory, return NULL; old memory remains untouched
// func:amc_vis.FDb.lpool.ReallocMem
void*                lpool_ReallocMem(void* oldmem, u64 old_size, u64 new_size) __attribute__((nothrow));
// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.lpool.Alloc
u8&                  lpool_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.lpool.AllocMaybe
u8*                  lpool_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:amc_vis.FDb.lpool.Delete
void                 lpool_Delete(u8 &row) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.ctype.Alloc
amc_vis::FCtype&     ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.ctype.AllocMaybe
amc_vis::FCtype*     ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:amc_vis.FDb.ctype.InsertMaybe
amc_vis::FCtype*     ctype_InsertMaybe(const dmmeta::Ctype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.ctype.AllocMem
void*                ctype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.ctype.EmptyQ
inline bool          ctype_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.ctype.Find
inline amc_vis::FCtype* ctype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.ctype.Last
inline amc_vis::FCtype* ctype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.ctype.N
inline i32           ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.ctype.RemoveLast
void                 ctype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.ctype.qFind
inline amc_vis::FCtype& ctype_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.ctype.XrefMaybe
bool                 ctype_XrefMaybe(amc_vis::FCtype &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.field.Alloc
amc_vis::FField&     field_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.field.AllocMaybe
amc_vis::FField*     field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:amc_vis.FDb.field.InsertMaybe
amc_vis::FField*     field_InsertMaybe(const dmmeta::Field &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.field.AllocMem
void*                field_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.field.EmptyQ
inline bool          field_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.field.Find
inline amc_vis::FField* field_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.field.Last
inline amc_vis::FField* field_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.field.N
inline i32           field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.field.RemoveLast
void                 field_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.field.qFind
inline amc_vis::FField& field_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.field.XrefMaybe
bool                 field_XrefMaybe(amc_vis::FField &row);

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     amc_vis.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:amc_vis.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:amc_vis.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:amc_vis.FDb._db.Step
void                 Step();
// Main function
// func:amc_vis.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:amc_vis.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:amc_vis.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:amc_vis.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:amc_vis.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:amc_vis.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:amc_vis.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Return true if hash is empty
// func:amc_vis.FDb.ind_ctype.EmptyQ
inline bool          ind_ctype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:amc_vis.FDb.ind_ctype.Find
amc_vis::FCtype*     ind_ctype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:amc_vis.FDb.ind_ctype.FindX
amc_vis::FCtype&     ind_ctype_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:amc_vis.FDb.ind_ctype.GetOrCreate
amc_vis::FCtype&     ind_ctype_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:amc_vis.FDb.ind_ctype.N
inline i32           ind_ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:amc_vis.FDb.ind_ctype.InsertMaybe
bool                 ind_ctype_InsertMaybe(amc_vis::FCtype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:amc_vis.FDb.ind_ctype.Remove
void                 ind_ctype_Remove(amc_vis::FCtype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:amc_vis.FDb.ind_ctype.Reserve
void                 ind_ctype_Reserve(int n) __attribute__((nothrow));

// Return true if hash is empty
// func:amc_vis.FDb.ind_field.EmptyQ
inline bool          ind_field_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:amc_vis.FDb.ind_field.Find
amc_vis::FField*     ind_field_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:amc_vis.FDb.ind_field.FindX
amc_vis::FField&     ind_field_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:amc_vis.FDb.ind_field.N
inline i32           ind_field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:amc_vis.FDb.ind_field.InsertMaybe
bool                 ind_field_InsertMaybe(amc_vis::FField& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:amc_vis.FDb.ind_field.Remove
void                 ind_field_Remove(amc_vis::FField& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:amc_vis.FDb.ind_field.Reserve
void                 ind_field_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.node.Alloc
amc_vis::FNode&      node_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.node.AllocMaybe
amc_vis::FNode*      node_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.node.AllocMem
void*                node_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.node.EmptyQ
inline bool          node_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.node.Find
inline amc_vis::FNode* node_Find(i32 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.node.Last
inline amc_vis::FNode* node_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.node.N
inline i32           node_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:amc_vis.FDb.node.RemoveAll
void                 node_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.node.RemoveLast
void                 node_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.node.qFind
inline amc_vis::FNode& node_qFind(i32 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.node.XrefMaybe
bool                 node_XrefMaybe(amc_vis::FNode &row);

// Return true if hash is empty
// func:amc_vis.FDb.ind_node.EmptyQ
inline bool          ind_node_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:amc_vis.FDb.ind_node.Find
amc_vis::FNode*      ind_node_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:amc_vis.FDb.ind_node.FindX
amc_vis::FNode&      ind_node_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:amc_vis.FDb.ind_node.GetOrCreate
amc_vis::FNode&      ind_node_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:amc_vis.FDb.ind_node.N
inline i32           ind_node_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:amc_vis.FDb.ind_node.InsertMaybe
bool                 ind_node_InsertMaybe(amc_vis::FNode& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:amc_vis.FDb.ind_node.Remove
void                 ind_node_Remove(amc_vis::FNode& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:amc_vis.FDb.ind_node.Reserve
void                 ind_node_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.link.Alloc
amc_vis::Link&       link_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.link.AllocMaybe
amc_vis::Link*       link_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.link.AllocMem
void*                link_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.link.EmptyQ
inline bool          link_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.link.Find
inline amc_vis::Link* link_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.link.Last
inline amc_vis::Link* link_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.link.N
inline i32           link_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:amc_vis.FDb.link.RemoveAll
void                 link_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.link.RemoveLast
void                 link_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.link.qFind
inline amc_vis::Link& link_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.link.XrefMaybe
bool                 link_XrefMaybe(amc_vis::Link &row);

// Return true if hash is empty
// func:amc_vis.FDb.ind_link.EmptyQ
inline bool          ind_link_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:amc_vis.FDb.ind_link.Find
amc_vis::Link*       ind_link_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:amc_vis.FDb.ind_link.FindX
amc_vis::Link&       ind_link_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:amc_vis.FDb.ind_link.N
inline i32           ind_link_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:amc_vis.FDb.ind_link.InsertMaybe
bool                 ind_link_InsertMaybe(amc_vis::Link& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:amc_vis.FDb.ind_link.Remove
void                 ind_link_Remove(amc_vis::Link& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:amc_vis.FDb.ind_link.Reserve
void                 ind_link_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.linkdep.Alloc
amc_vis::Linkdep&    linkdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.linkdep.AllocMaybe
amc_vis::Linkdep*    linkdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.linkdep.AllocMem
void*                linkdep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.linkdep.EmptyQ
inline bool          linkdep_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.linkdep.Find
inline amc_vis::Linkdep* linkdep_Find(i32 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.linkdep.Last
inline amc_vis::Linkdep* linkdep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.linkdep.N
inline i32           linkdep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:amc_vis.FDb.linkdep.RemoveAll
void                 linkdep_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.linkdep.RemoveLast
void                 linkdep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.linkdep.qFind
inline amc_vis::Linkdep& linkdep_qFind(i32 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.linkdep.XrefMaybe
bool                 linkdep_XrefMaybe(amc_vis::Linkdep &row);

// Return true if index is empty
// func:amc_vis.FDb.c_linklist.EmptyQ
inline bool          c_linklist_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.c_linklist.Find
inline amc_vis::Link* c_linklist_Find(u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:amc_vis.FDb.c_linklist.Getary
inline algo::aryptr<amc_vis::Link*> c_linklist_Getary() __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:amc_vis.FDb.c_linklist.Insert
void                 c_linklist_Insert(amc_vis::Link& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:amc_vis.FDb.c_linklist.InsertMaybe
bool                 c_linklist_InsertMaybe(amc_vis::Link& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:amc_vis.FDb.c_linklist.N
inline i32           c_linklist_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:amc_vis.FDb.c_linklist.Remove
void                 c_linklist_Remove(amc_vis::Link& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FDb.c_linklist.RemoveAll
inline void          c_linklist_RemoveAll() __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:amc_vis.FDb.c_linklist.Reserve
void                 c_linklist_Reserve(u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:amc_vis.FDb.c_linklist.qFind
inline amc_vis::Link& c_linklist_qFind(u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:amc_vis.FDb.c_linklist.InAryQ
inline bool          c_linklist_InAryQ(amc_vis::Link& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:amc_vis.FDb.c_linklist.qLast
inline amc_vis::Link& c_linklist_qLast() __attribute__((nothrow));

// Remove all elements from heap and free memory used by the array.
// func:amc_vis.FDb.bh_node.Dealloc
void                 bh_node_Dealloc() __attribute__((nothrow));
// Return true if index is empty
// func:amc_vis.FDb.bh_node.EmptyQ
inline bool          bh_node_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FDb.bh_node.First
inline amc_vis::FNode* bh_node_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
// func:amc_vis.FDb.bh_node.InBheapQ
inline bool          bh_node_InBheapQ(amc_vis::FNode& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
// func:amc_vis.FDb.bh_node.Insert
void                 bh_node_Insert(amc_vis::FNode& row) __attribute__((nothrow));
// Return number of items in the heap
// func:amc_vis.FDb.bh_node.N
inline i32           bh_node_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
// func:amc_vis.FDb.bh_node.Reheap
i32                  bh_node_Reheap(amc_vis::FNode& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
// func:amc_vis.FDb.bh_node.ReheapFirst
i32                  bh_node_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FDb.bh_node.Remove
void                 bh_node_Remove(amc_vis::FNode& row) __attribute__((nothrow));
// Remove all elements from binary heap
// func:amc_vis.FDb.bh_node.RemoveAll
void                 bh_node_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
// func:amc_vis.FDb.bh_node.RemoveFirst
amc_vis::FNode*      bh_node_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
// func:amc_vis.FDb.bh_node.Reserve
void                 bh_node_Reserve(int n) __attribute__((nothrow));

// Remove all elements from heap and free memory used by the array.
// func:amc_vis.FDb.bh_link.Dealloc
void                 bh_link_Dealloc() __attribute__((nothrow));
// Return true if index is empty
// func:amc_vis.FDb.bh_link.EmptyQ
inline bool          bh_link_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FDb.bh_link.First
inline amc_vis::Link* bh_link_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
// func:amc_vis.FDb.bh_link.InBheapQ
inline bool          bh_link_InBheapQ(amc_vis::Link& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
// func:amc_vis.FDb.bh_link.Insert
void                 bh_link_Insert(amc_vis::Link& row) __attribute__((nothrow));
// Return number of items in the heap
// func:amc_vis.FDb.bh_link.N
inline i32           bh_link_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
// func:amc_vis.FDb.bh_link.Reheap
i32                  bh_link_Reheap(amc_vis::Link& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
// func:amc_vis.FDb.bh_link.ReheapFirst
i32                  bh_link_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FDb.bh_link.Remove
void                 bh_link_Remove(amc_vis::Link& row) __attribute__((nothrow));
// Remove all elements from binary heap
// func:amc_vis.FDb.bh_link.RemoveAll
void                 bh_link_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
// func:amc_vis.FDb.bh_link.RemoveFirst
amc_vis::Link*       bh_link_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
// func:amc_vis.FDb.bh_link.Reserve
void                 bh_link_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.reftype.Alloc
amc_vis::FReftype&   reftype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.reftype.AllocMaybe
amc_vis::FReftype*   reftype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:amc_vis.FDb.reftype.InsertMaybe
amc_vis::FReftype*   reftype_InsertMaybe(const dmmeta::Reftype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.reftype.AllocMem
void*                reftype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.reftype.EmptyQ
inline bool          reftype_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.reftype.Find
inline amc_vis::FReftype* reftype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.reftype.Last
inline amc_vis::FReftype* reftype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.reftype.N
inline i32           reftype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.reftype.RemoveLast
void                 reftype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.reftype.qFind
inline amc_vis::FReftype& reftype_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.reftype.XrefMaybe
bool                 reftype_XrefMaybe(amc_vis::FReftype &row);

// Return true if hash is empty
// func:amc_vis.FDb.ind_reftype.EmptyQ
inline bool          ind_reftype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:amc_vis.FDb.ind_reftype.Find
amc_vis::FReftype*   ind_reftype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:amc_vis.FDb.ind_reftype.FindX
amc_vis::FReftype&   ind_reftype_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:amc_vis.FDb.ind_reftype.GetOrCreate
amc_vis::FReftype&   ind_reftype_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:amc_vis.FDb.ind_reftype.N
inline i32           ind_reftype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:amc_vis.FDb.ind_reftype.InsertMaybe
bool                 ind_reftype_InsertMaybe(amc_vis::FReftype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:amc_vis.FDb.ind_reftype.Remove
void                 ind_reftype_Remove(amc_vis::FReftype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:amc_vis.FDb.ind_reftype.Reserve
void                 ind_reftype_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.nodedep.Alloc
amc_vis::FNodedep&   nodedep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.nodedep.AllocMaybe
amc_vis::FNodedep*   nodedep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.nodedep.AllocMem
void*                nodedep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.nodedep.EmptyQ
inline bool          nodedep_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.nodedep.Find
inline amc_vis::FNodedep* nodedep_Find(i32 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.nodedep.Last
inline amc_vis::FNodedep* nodedep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.nodedep.N
inline i32           nodedep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:amc_vis.FDb.nodedep.RemoveAll
void                 nodedep_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.nodedep.RemoveLast
void                 nodedep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.nodedep.qFind
inline amc_vis::FNodedep& nodedep_qFind(i32 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.nodedep.XrefMaybe
bool                 nodedep_XrefMaybe(amc_vis::FNodedep &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.outrow.Alloc
amc_vis::Outrow&     outrow_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.outrow.AllocMaybe
amc_vis::Outrow*     outrow_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.outrow.AllocMem
void*                outrow_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.outrow.EmptyQ
inline bool          outrow_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.outrow.Find
inline amc_vis::Outrow* outrow_Find(i32 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.outrow.Last
inline amc_vis::Outrow* outrow_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.outrow.N
inline i32           outrow_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:amc_vis.FDb.outrow.RemoveAll
void                 outrow_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.outrow.RemoveLast
void                 outrow_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.outrow.qFind
inline amc_vis::Outrow& outrow_qFind(i32 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.outrow.XrefMaybe
bool                 outrow_XrefMaybe(amc_vis::Outrow &row);

// Return true if index is empty
// func:amc_vis.FDb.zd_select.EmptyQ
inline bool          zd_select_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FDb.zd_select.First
inline amc_vis::FCtype* zd_select_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.FDb.zd_select.InLlistQ
inline bool          zd_select_InLlistQ(amc_vis::FCtype& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.FDb.zd_select.Insert
void                 zd_select_Insert(amc_vis::FCtype& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.FDb.zd_select.Last
inline amc_vis::FCtype* zd_select_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:amc_vis.FDb.zd_select.N
inline i32           zd_select_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.FDb.zd_select.Next
inline amc_vis::FCtype* zd_select_Next(amc_vis::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.FDb.zd_select.Prev
inline amc_vis::FCtype* zd_select_Prev(amc_vis::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FDb.zd_select.Remove
void                 zd_select_Remove(amc_vis::FCtype& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FDb.zd_select.RemoveAll
void                 zd_select_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.FDb.zd_select.RemoveFirst
amc_vis::FCtype*     zd_select_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.FDb.zd_select.qLast
inline amc_vis::FCtype& zd_select_qLast() __attribute__((__warn_unused_result__, nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:amc_vis.FDb.finput.Alloc
amc_vis::FFinput&    finput_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:amc_vis.FDb.finput.AllocMaybe
amc_vis::FFinput*    finput_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:amc_vis.FDb.finput.InsertMaybe
amc_vis::FFinput*    finput_InsertMaybe(const dmmeta::Finput &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:amc_vis.FDb.finput.AllocMem
void*                finput_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.FDb.finput.EmptyQ
inline bool          finput_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.FDb.finput.Find
inline amc_vis::FFinput* finput_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.FDb.finput.Last
inline amc_vis::FFinput* finput_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:amc_vis.FDb.finput.N
inline i32           finput_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.FDb.finput.RemoveLast
void                 finput_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.FDb.finput.qFind
inline amc_vis::FFinput& finput_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:amc_vis.FDb.finput.XrefMaybe
bool                 finput_XrefMaybe(amc_vis::FFinput &row);

// cursor points to valid item
// func:amc_vis.FDb.ctype_curs.Reset
inline void          _db_ctype_curs_Reset(_db_ctype_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.ctype_curs.ValidQ
inline bool          _db_ctype_curs_ValidQ(_db_ctype_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.ctype_curs.Next
inline void          _db_ctype_curs_Next(_db_ctype_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.ctype_curs.Access
inline amc_vis::FCtype& _db_ctype_curs_Access(_db_ctype_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.field_curs.Reset
inline void          _db_field_curs_Reset(_db_field_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.field_curs.ValidQ
inline bool          _db_field_curs_ValidQ(_db_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.field_curs.Next
inline void          _db_field_curs_Next(_db_field_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.field_curs.Access
inline amc_vis::FField& _db_field_curs_Access(_db_field_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.node_curs.Reset
inline void          _db_node_curs_Reset(_db_node_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.node_curs.ValidQ
inline bool          _db_node_curs_ValidQ(_db_node_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.node_curs.Next
inline void          _db_node_curs_Next(_db_node_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.node_curs.Access
inline amc_vis::FNode& _db_node_curs_Access(_db_node_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.link_curs.Reset
inline void          _db_link_curs_Reset(_db_link_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.link_curs.ValidQ
inline bool          _db_link_curs_ValidQ(_db_link_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.link_curs.Next
inline void          _db_link_curs_Next(_db_link_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.link_curs.Access
inline amc_vis::Link& _db_link_curs_Access(_db_link_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.linkdep_curs.Reset
inline void          _db_linkdep_curs_Reset(_db_linkdep_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.linkdep_curs.ValidQ
inline bool          _db_linkdep_curs_ValidQ(_db_linkdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.linkdep_curs.Next
inline void          _db_linkdep_curs_Next(_db_linkdep_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.linkdep_curs.Access
inline amc_vis::Linkdep& _db_linkdep_curs_Access(_db_linkdep_curs &curs) __attribute__((nothrow));
// func:amc_vis.FDb.c_linklist_curs.Reset
inline void          _db_c_linklist_curs_Reset(_db_c_linklist_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.c_linklist_curs.ValidQ
inline bool          _db_c_linklist_curs_ValidQ(_db_c_linklist_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.c_linklist_curs.Next
inline void          _db_c_linklist_curs_Next(_db_c_linklist_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.c_linklist_curs.Access
inline amc_vis::Link& _db_c_linklist_curs_Access(_db_c_linklist_curs &curs) __attribute__((nothrow));
// func:amc_vis.FDb.bh_node_curs.Reserve
void                 _db_bh_node_curs_Reserve(_db_bh_node_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
// func:amc_vis.FDb.bh_node_curs.Reset
void                 _db_bh_node_curs_Reset(_db_bh_node_curs &curs, amc_vis::FDb &parent);
// Advance cursor.
// func:amc_vis.FDb.bh_node_curs.Next
void                 _db_bh_node_curs_Next(_db_bh_node_curs &curs);
// Access current element. If not more elements, return NULL
// func:amc_vis.FDb.bh_node_curs.Access
inline amc_vis::FNode& _db_bh_node_curs_Access(_db_bh_node_curs &curs) __attribute__((nothrow));
// Return true if Access() will return non-NULL.
// func:amc_vis.FDb.bh_node_curs.ValidQ
inline bool          _db_bh_node_curs_ValidQ(_db_bh_node_curs &curs) __attribute__((nothrow));
// func:amc_vis.FDb.bh_link_curs.Reserve
void                 _db_bh_link_curs_Reserve(_db_bh_link_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
// func:amc_vis.FDb.bh_link_curs.Reset
void                 _db_bh_link_curs_Reset(_db_bh_link_curs &curs, amc_vis::FDb &parent);
// Advance cursor.
// func:amc_vis.FDb.bh_link_curs.Next
void                 _db_bh_link_curs_Next(_db_bh_link_curs &curs);
// Access current element. If not more elements, return NULL
// func:amc_vis.FDb.bh_link_curs.Access
inline amc_vis::Link& _db_bh_link_curs_Access(_db_bh_link_curs &curs) __attribute__((nothrow));
// Return true if Access() will return non-NULL.
// func:amc_vis.FDb.bh_link_curs.ValidQ
inline bool          _db_bh_link_curs_ValidQ(_db_bh_link_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.reftype_curs.Reset
inline void          _db_reftype_curs_Reset(_db_reftype_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.reftype_curs.ValidQ
inline bool          _db_reftype_curs_ValidQ(_db_reftype_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.reftype_curs.Next
inline void          _db_reftype_curs_Next(_db_reftype_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.reftype_curs.Access
inline amc_vis::FReftype& _db_reftype_curs_Access(_db_reftype_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.nodedep_curs.Reset
inline void          _db_nodedep_curs_Reset(_db_nodedep_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.nodedep_curs.ValidQ
inline bool          _db_nodedep_curs_ValidQ(_db_nodedep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.nodedep_curs.Next
inline void          _db_nodedep_curs_Next(_db_nodedep_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.nodedep_curs.Access
inline amc_vis::FNodedep& _db_nodedep_curs_Access(_db_nodedep_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.outrow_curs.Reset
inline void          _db_outrow_curs_Reset(_db_outrow_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.outrow_curs.ValidQ
inline bool          _db_outrow_curs_ValidQ(_db_outrow_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.outrow_curs.Next
inline void          _db_outrow_curs_Next(_db_outrow_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.outrow_curs.Access
inline amc_vis::Outrow& _db_outrow_curs_Access(_db_outrow_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.zd_select_curs.Reset
inline void          _db_zd_select_curs_Reset(_db_zd_select_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.zd_select_curs.ValidQ
inline bool          _db_zd_select_curs_ValidQ(_db_zd_select_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.zd_select_curs.Next
inline void          _db_zd_select_curs_Next(_db_zd_select_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.zd_select_curs.Access
inline amc_vis::FCtype& _db_zd_select_curs_Access(_db_zd_select_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.finput_curs.Reset
inline void          _db_finput_curs_Reset(_db_finput_curs &curs, amc_vis::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FDb.finput_curs.ValidQ
inline bool          _db_finput_curs_ValidQ(_db_finput_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FDb.finput_curs.Next
inline void          _db_finput_curs_Next(_db_finput_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FDb.finput_curs.Access
inline amc_vis::FFinput& _db_finput_curs_Access(_db_finput_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.FDb..Init
void                 FDb_Init();
// func:amc_vis.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- amc_vis.FField
// create: amc_vis.FDb.field (Lary)
// global access: field (Lary, by rowid)
// global access: ind_field (Thash, hash field field)
// access: amc_vis.FCtype.c_field (Ptrary)
struct FField { // amc_vis.FField
    amc_vis::FField*     ind_field_next;         // hash next
    algo::Smallstr100    field;                  // Primary key, as ctype.name
    algo::Smallstr100    arg;                    // Type of field
    algo::Smallstr50     reftype;                //   "Val"  Type constructor
    algo::CppExpr        dflt;                   // Default value (c++ expression)
    algo::Comment        comment;                //
    amc_vis::FCtype*     p_ctype;                // reference to parent row
    amc_vis::FCtype*     p_arg;                  // reference to parent row
    amc_vis::FReftype*   p_reftype;              // reference to parent row
    amc_vis::FFinput*    c_finput;               // optional pointer
    bool                 ctype_c_field_in_ary;   //   false  membership flag
    // x-reference on amc_vis.FField.p_ctype prevents copy
    // x-reference on amc_vis.FField.p_arg prevents copy
    // x-reference on amc_vis.FField.p_reftype prevents copy
    // x-reference on amc_vis.FField.c_finput prevents copy
    // func:amc_vis.FField..AssignOp
    amc_vis::FField&     operator =(const amc_vis::FField &rhs) = delete;
    // x-reference on amc_vis.FField.p_ctype prevents copy
    // x-reference on amc_vis.FField.p_arg prevents copy
    // x-reference on amc_vis.FField.p_reftype prevents copy
    // x-reference on amc_vis.FField.c_finput prevents copy
    // func:amc_vis.FField..CopyCtor
    FField(const amc_vis::FField &rhs) = delete;
private:
    // func:amc_vis.FField..Ctor
    inline               FField() __attribute__((nothrow));
    // func:amc_vis.FField..Dtor
    inline               ~FField() __attribute__((nothrow));
    friend amc_vis::FField&     field_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FField*     field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 field_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:amc_vis.FField.msghdr.CopyOut
void                 field_CopyOut(amc_vis::FField &row, dmmeta::Field &out) __attribute__((nothrow));
// Copy fields in to row
// func:amc_vis.FField.msghdr.CopyIn
void                 field_CopyIn(amc_vis::FField &row, dmmeta::Field &in) __attribute__((nothrow));

// func:amc_vis.FField.ctype.Get
algo::Smallstr100    ctype_Get(amc_vis::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:amc_vis.FField.ns.Get
algo::Smallstr16     ns_Get(amc_vis::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:amc_vis.FField.name.Get
algo::Smallstr50     name_Get(amc_vis::FField& field) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:amc_vis.FField.c_finput.InsertMaybe
inline bool          c_finput_InsertMaybe(amc_vis::FField& field, amc_vis::FFinput& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FField.c_finput.Remove
inline void          c_finput_Remove(amc_vis::FField& field, amc_vis::FFinput& row) __attribute__((nothrow));

// Set all fields to initial values.
// func:amc_vis.FField..Init
void                 FField_Init(amc_vis::FField& field);
// func:amc_vis.FField..Uninit
void                 FField_Uninit(amc_vis::FField& field) __attribute__((nothrow));

// --- amc_vis.FFinput
// create: amc_vis.FDb.finput (Lary)
// global access: finput (Lary, by rowid)
// access: amc_vis.FField.c_finput (Ptr)
struct FFinput { // amc_vis.FFinput
    algo::Smallstr100   field;     // Target field to read
    bool                extrn;     //   false  Call user-provided function
    bool                update;    //   false
    bool                strict;    //   true  Exist process if record contains error
    algo::Comment       comment;   //
    // func:amc_vis.FFinput..AssignOp
    inline amc_vis::FFinput& operator =(const amc_vis::FFinput &rhs) = delete;
    // func:amc_vis.FFinput..CopyCtor
    inline               FFinput(const amc_vis::FFinput &rhs) = delete;
private:
    // func:amc_vis.FFinput..Ctor
    inline               FFinput() __attribute__((nothrow));
    // func:amc_vis.FFinput..Dtor
    inline               ~FFinput() __attribute__((nothrow));
    friend amc_vis::FFinput&    finput_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FFinput*    finput_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 finput_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:amc_vis.FFinput.msghdr.CopyOut
void                 finput_CopyOut(amc_vis::FFinput &row, dmmeta::Finput &out) __attribute__((nothrow));
// Copy fields in to row
// func:amc_vis.FFinput.msghdr.CopyIn
void                 finput_CopyIn(amc_vis::FFinput &row, dmmeta::Finput &in) __attribute__((nothrow));

// func:amc_vis.FFinput.ns.Get
algo::Smallstr16     ns_Get(amc_vis::FFinput& finput) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:amc_vis.FFinput..Init
inline void          FFinput_Init(amc_vis::FFinput& finput);
// func:amc_vis.FFinput..Uninit
void                 FFinput_Uninit(amc_vis::FFinput& finput) __attribute__((nothrow));

// --- amc_vis.Nodekey
struct Nodekey { // amc_vis.Nodekey: Correspodns to a ctype
    u32   n_ct_in;     //   0  Number of incoming dependencies
    i32   idx;         //   0  Set to -rowid
    i32   prev_xpos;   //   99999999
    // func:amc_vis.Nodekey..EqOp
    inline bool          operator ==(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..NeOp
    inline bool          operator !=(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..LtOp
    inline bool          operator <(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..GtOp
    inline bool          operator >(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..LeOp
    inline bool          operator <=(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..GeOp
    inline bool          operator >=(const amc_vis::Nodekey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Nodekey..Ctor
    inline               Nodekey() __attribute__((nothrow));
    // func:amc_vis.Nodekey..FieldwiseCtor
    explicit inline               Nodekey(u32 in_n_ct_in, i32 in_idx, i32 in_prev_xpos) __attribute__((nothrow));
};

// func:amc_vis.Nodekey..Hash
inline u32           Nodekey_Hash(u32 prev, amc_vis::Nodekey rhs) __attribute__((nothrow));
// func:amc_vis.Nodekey..Lt
inline bool          Nodekey_Lt(amc_vis::Nodekey lhs, amc_vis::Nodekey rhs) __attribute__((nothrow));
// func:amc_vis.Nodekey..Cmp
inline i32           Nodekey_Cmp(amc_vis::Nodekey lhs, amc_vis::Nodekey rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.Nodekey..Init
inline void          Nodekey_Init(amc_vis::Nodekey& parent);
// func:amc_vis.Nodekey..Eq
inline bool          Nodekey_Eq(amc_vis::Nodekey lhs, amc_vis::Nodekey rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:amc_vis.Nodekey..Update
inline bool          Nodekey_Update(amc_vis::Nodekey &lhs, amc_vis::Nodekey rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:amc_vis.Nodekey.String  printfmt:Sep
// func:amc_vis.Nodekey..Print
void                 Nodekey_Print(amc_vis::Nodekey row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.FNode
// create: amc_vis.FDb.node (Lary)
// global access: node (Lary, by rowid)
// global access: ind_node (Thash, hash field node)
// global access: bh_node (Bheap, sort field nodekey)
// access: amc_vis.FNodedep.p_node1 (Upptr)
// access: amc_vis.FNodedep.p_node2 (Upptr)
// access: amc_vis.Link.p_node1 (Upptr)
// access: amc_vis.Link.p_node2 (Upptr)
struct FNode { // amc_vis.FNode: Corresponds to a ctype
    amc_vis::FNode*      ind_node_next;         // hash next
    i32                  bh_node_idx;           // index in heap; -1 means not-in-heap
    algo::Smallstr100    node;                  //
    amc_vis::Nodekey     nodekey;               // Sort key for columns
    algo::Smallstr100    label;                 // Display label
    i32                  xpos;                  //   1
    algo::Smallstr100    label2;                // Display label
    amc_vis::Link*       c_bottom;              // Bottom. optional pointer
    amc_vis::Link*       c_top;                 // Top. optional pointer
    amc_vis::FCtype*     p_ctype;               // reference to parent row
    i32                  rowid;                 //   0
    amc_vis::FNodedep*   zd_nodedep_out_head;   // zero-terminated doubly linked list
    amc_vis::FNodedep*   zd_nodedep_out_tail;   // pointer to last element
    amc_vis::FNodedep*   zd_nodedep_in_head;    // zero-terminated doubly linked list
    i32                  zd_nodedep_in_n;       // zero-terminated doubly linked list
    amc_vis::FNodedep*   zd_nodedep_in_tail;    // pointer to last element
    amc_vis::Link*       zd_link_out_head;      // zero-terminated doubly linked list
    i32                  zd_link_out_n;         // zero-terminated doubly linked list
    amc_vis::Link*       zd_link_out_tail;      // pointer to last element
    amc_vis::Link*       zd_link_in_head;       // zero-terminated doubly linked list
    i32                  zd_link_in_n;          // zero-terminated doubly linked list
    amc_vis::Link*       zd_link_in_tail;       // pointer to last element
    // reftype Llist of amc_vis.FNode.zd_nodedep_out prohibits copy
    // reftype Llist of amc_vis.FNode.zd_nodedep_in prohibits copy
    // reftype Llist of amc_vis.FNode.zd_link_out prohibits copy
    // reftype Llist of amc_vis.FNode.zd_link_in prohibits copy
    // func:amc_vis.FNode..AssignOp
    amc_vis::FNode&      operator =(const amc_vis::FNode &rhs) = delete;
    // reftype Llist of amc_vis.FNode.zd_nodedep_out prohibits copy
    // reftype Llist of amc_vis.FNode.zd_nodedep_in prohibits copy
    // reftype Llist of amc_vis.FNode.zd_link_out prohibits copy
    // reftype Llist of amc_vis.FNode.zd_link_in prohibits copy
    // func:amc_vis.FNode..CopyCtor
    FNode(const amc_vis::FNode &rhs) = delete;
private:
    // func:amc_vis.FNode..Ctor
    inline               FNode() __attribute__((nothrow));
    // func:amc_vis.FNode..Dtor
    inline               ~FNode() __attribute__((nothrow));
    friend amc_vis::FNode&      node_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FNode*      node_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 node_RemoveAll() __attribute__((nothrow));
    friend void                 node_RemoveLast() __attribute__((nothrow));
};

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
// func:amc_vis.FNode.nodekey.Lt
inline bool          nodekey_Lt(amc_vis::FNode& node, amc_vis::FNode &rhs) __attribute__((nothrow));
// Compare two fields.
// func:amc_vis.FNode.nodekey.Cmp
inline i32           nodekey_Cmp(amc_vis::FNode& node, amc_vis::FNode &rhs) __attribute__((nothrow));

// Return true if index is empty
// func:amc_vis.FNode.zd_nodedep_out.EmptyQ
inline bool          zd_nodedep_out_EmptyQ(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FNode.zd_nodedep_out.First
inline amc_vis::FNodedep* zd_nodedep_out_First(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.FNode.zd_nodedep_out.InLlistQ
inline bool          zd_nodedep_out_InLlistQ(amc_vis::FNodedep& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.FNode.zd_nodedep_out.Insert
void                 zd_nodedep_out_Insert(amc_vis::FNode& node, amc_vis::FNodedep& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.FNode.zd_nodedep_out.Last
inline amc_vis::FNodedep* zd_nodedep_out_Last(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.FNode.zd_nodedep_out.Next
inline amc_vis::FNodedep* zd_nodedep_out_Next(amc_vis::FNodedep &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.FNode.zd_nodedep_out.Prev
inline amc_vis::FNodedep* zd_nodedep_out_Prev(amc_vis::FNodedep &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FNode.zd_nodedep_out.Remove
void                 zd_nodedep_out_Remove(amc_vis::FNode& node, amc_vis::FNodedep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FNode.zd_nodedep_out.RemoveAll
void                 zd_nodedep_out_RemoveAll(amc_vis::FNode& node) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.FNode.zd_nodedep_out.RemoveFirst
amc_vis::FNodedep*   zd_nodedep_out_RemoveFirst(amc_vis::FNode& node) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.FNode.zd_nodedep_out.qLast
inline amc_vis::FNodedep& zd_nodedep_out_qLast(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:amc_vis.FNode.zd_nodedep_in.EmptyQ
inline bool          zd_nodedep_in_EmptyQ(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FNode.zd_nodedep_in.First
inline amc_vis::FNodedep* zd_nodedep_in_First(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.FNode.zd_nodedep_in.InLlistQ
inline bool          zd_nodedep_in_InLlistQ(amc_vis::FNodedep& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.FNode.zd_nodedep_in.Insert
void                 zd_nodedep_in_Insert(amc_vis::FNode& node, amc_vis::FNodedep& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.FNode.zd_nodedep_in.Last
inline amc_vis::FNodedep* zd_nodedep_in_Last(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:amc_vis.FNode.zd_nodedep_in.N
inline i32           zd_nodedep_in_N(const amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.FNode.zd_nodedep_in.Next
inline amc_vis::FNodedep* zd_nodedep_in_Next(amc_vis::FNodedep &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.FNode.zd_nodedep_in.Prev
inline amc_vis::FNodedep* zd_nodedep_in_Prev(amc_vis::FNodedep &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FNode.zd_nodedep_in.Remove
void                 zd_nodedep_in_Remove(amc_vis::FNode& node, amc_vis::FNodedep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FNode.zd_nodedep_in.RemoveAll
void                 zd_nodedep_in_RemoveAll(amc_vis::FNode& node) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.FNode.zd_nodedep_in.RemoveFirst
amc_vis::FNodedep*   zd_nodedep_in_RemoveFirst(amc_vis::FNode& node) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.FNode.zd_nodedep_in.qLast
inline amc_vis::FNodedep& zd_nodedep_in_qLast(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:amc_vis.FNode.zd_link_out.EmptyQ
inline bool          zd_link_out_EmptyQ(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FNode.zd_link_out.First
inline amc_vis::Link* zd_link_out_First(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.FNode.zd_link_out.InLlistQ
inline bool          zd_link_out_InLlistQ(amc_vis::Link& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.FNode.zd_link_out.Insert
void                 zd_link_out_Insert(amc_vis::FNode& node, amc_vis::Link& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.FNode.zd_link_out.Last
inline amc_vis::Link* zd_link_out_Last(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:amc_vis.FNode.zd_link_out.N
inline i32           zd_link_out_N(const amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.FNode.zd_link_out.Next
inline amc_vis::Link* zd_link_out_Next(amc_vis::Link &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.FNode.zd_link_out.Prev
inline amc_vis::Link* zd_link_out_Prev(amc_vis::Link &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FNode.zd_link_out.Remove
void                 zd_link_out_Remove(amc_vis::FNode& node, amc_vis::Link& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FNode.zd_link_out.RemoveAll
void                 zd_link_out_RemoveAll(amc_vis::FNode& node) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.FNode.zd_link_out.RemoveFirst
amc_vis::Link*       zd_link_out_RemoveFirst(amc_vis::FNode& node) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.FNode.zd_link_out.qLast
inline amc_vis::Link& zd_link_out_qLast(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:amc_vis.FNode.zd_link_in.EmptyQ
inline bool          zd_link_in_EmptyQ(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.FNode.zd_link_in.First
inline amc_vis::Link* zd_link_in_First(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.FNode.zd_link_in.InLlistQ
inline bool          zd_link_in_InLlistQ(amc_vis::Link& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.FNode.zd_link_in.Insert
void                 zd_link_in_Insert(amc_vis::FNode& node, amc_vis::Link& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.FNode.zd_link_in.Last
inline amc_vis::Link* zd_link_in_Last(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:amc_vis.FNode.zd_link_in.N
inline i32           zd_link_in_N(const amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.FNode.zd_link_in.Next
inline amc_vis::Link* zd_link_in_Next(amc_vis::Link &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.FNode.zd_link_in.Prev
inline amc_vis::Link* zd_link_in_Prev(amc_vis::Link &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.FNode.zd_link_in.Remove
void                 zd_link_in_Remove(amc_vis::FNode& node, amc_vis::Link& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.FNode.zd_link_in.RemoveAll
void                 zd_link_in_RemoveAll(amc_vis::FNode& node) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.FNode.zd_link_in.RemoveFirst
amc_vis::Link*       zd_link_in_RemoveFirst(amc_vis::FNode& node) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.FNode.zd_link_in.qLast
inline amc_vis::Link& zd_link_in_qLast(amc_vis::FNode& node) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:amc_vis.FNode..Init
void                 FNode_Init(amc_vis::FNode& node);
// cursor points to valid item
// func:amc_vis.FNode.zd_nodedep_out_curs.Reset
inline void          node_zd_nodedep_out_curs_Reset(node_zd_nodedep_out_curs &curs, amc_vis::FNode &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_nodedep_out_curs.ValidQ
inline bool          node_zd_nodedep_out_curs_ValidQ(node_zd_nodedep_out_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FNode.zd_nodedep_out_curs.Next
inline void          node_zd_nodedep_out_curs_Next(node_zd_nodedep_out_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FNode.zd_nodedep_out_curs.Access
inline amc_vis::FNodedep& node_zd_nodedep_out_curs_Access(node_zd_nodedep_out_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_nodedep_in_curs.Reset
inline void          node_zd_nodedep_in_curs_Reset(node_zd_nodedep_in_curs &curs, amc_vis::FNode &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_nodedep_in_curs.ValidQ
inline bool          node_zd_nodedep_in_curs_ValidQ(node_zd_nodedep_in_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FNode.zd_nodedep_in_curs.Next
inline void          node_zd_nodedep_in_curs_Next(node_zd_nodedep_in_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FNode.zd_nodedep_in_curs.Access
inline amc_vis::FNodedep& node_zd_nodedep_in_curs_Access(node_zd_nodedep_in_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_link_out_curs.Reset
inline void          node_zd_link_out_curs_Reset(node_zd_link_out_curs &curs, amc_vis::FNode &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_link_out_curs.ValidQ
inline bool          node_zd_link_out_curs_ValidQ(node_zd_link_out_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FNode.zd_link_out_curs.Next
inline void          node_zd_link_out_curs_Next(node_zd_link_out_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FNode.zd_link_out_curs.Access
inline amc_vis::Link& node_zd_link_out_curs_Access(node_zd_link_out_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_link_in_curs.Reset
inline void          node_zd_link_in_curs_Reset(node_zd_link_in_curs &curs, amc_vis::FNode &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.FNode.zd_link_in_curs.ValidQ
inline bool          node_zd_link_in_curs_ValidQ(node_zd_link_in_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.FNode.zd_link_in_curs.Next
inline void          node_zd_link_in_curs_Next(node_zd_link_in_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.FNode.zd_link_in_curs.Access
inline amc_vis::Link& node_zd_link_in_curs_Access(node_zd_link_in_curs &curs) __attribute__((nothrow));
// func:amc_vis.FNode..Uninit
void                 FNode_Uninit(amc_vis::FNode& node) __attribute__((nothrow));

// --- amc_vis.FNodedep
// create: amc_vis.FDb.nodedep (Lary)
// global access: nodedep (Lary, by rowid)
// access: amc_vis.FNode.zd_nodedep_out (Llist)
// access: amc_vis.FNode.zd_nodedep_in (Llist)
struct FNodedep { // amc_vis.FNodedep: Edge for computing node dependencies
    amc_vis::FNodedep*   zd_nodedep_out_next;   // zslist link; -1 means not-in-list
    amc_vis::FNodedep*   zd_nodedep_out_prev;   // previous element
    amc_vis::FNodedep*   zd_nodedep_in_next;    // zslist link; -1 means not-in-list
    amc_vis::FNodedep*   zd_nodedep_in_prev;    // previous element
    i32                  row;                   //   0
    i32                  rowid;                 //   0  Id
    bool                 up;                    //   false  Points up
    bool                 inst;                  //   false  Instance (vs. index)
    amc_vis::FNode*      p_node1;               // reference to parent row
    amc_vis::FNode*      p_node2;               // reference to parent row
    algo::Smallstr50     name;                  //
    algo::Smallstr50     reftype;               //
    // func:amc_vis.FNodedep..AssignOp
    inline amc_vis::FNodedep& operator =(const amc_vis::FNodedep &rhs) = delete;
    // func:amc_vis.FNodedep..CopyCtor
    inline               FNodedep(const amc_vis::FNodedep &rhs) = delete;
    // func:amc_vis.FNodedep..FieldwiseCtor
    explicit inline               FNodedep(i32 in_row, i32 in_rowid, bool in_up, bool in_inst, amc_vis::FNode* in_p_node1, amc_vis::FNode* in_p_node2, const algo::strptr& in_name, const algo::strptr& in_reftype) __attribute__((nothrow));
private:
    // func:amc_vis.FNodedep..Ctor
    inline               FNodedep() __attribute__((nothrow));
    // func:amc_vis.FNodedep..Dtor
    inline               ~FNodedep() __attribute__((nothrow));
    friend amc_vis::FNodedep&   nodedep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FNodedep*   nodedep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 nodedep_RemoveAll() __attribute__((nothrow));
    friend void                 nodedep_RemoveLast() __attribute__((nothrow));
};

// Set all fields to initial values.
// func:amc_vis.FNodedep..Init
inline void          FNodedep_Init(amc_vis::FNodedep& nodedep);
// func:amc_vis.FNodedep..Uninit
void                 FNodedep_Uninit(amc_vis::FNodedep& nodedep) __attribute__((nothrow));

// --- amc_vis.FReftype
// create: amc_vis.FDb.reftype (Lary)
// global access: reftype (Lary, by rowid)
// global access: ind_reftype (Thash, hash field reftype)
// access: amc_vis.FField.p_reftype (Upptr)
struct FReftype { // amc_vis.FReftype
    amc_vis::FReftype*   ind_reftype_next;   // hash next
    algo::Smallstr50     reftype;            //   "Val"
    bool                 isval;              //   false  True if field makes values of target type
    bool                 cascins;            //   false  Field is cascade-insert
    bool                 usebasepool;        //   false  Fields with this type make use of dmmeta.basepool
    bool                 cancopy;            //   false  This type of field can be copied
    bool                 isxref;             //   false  This type of field is an x-ref
    bool                 del;                //   false  Supports random deletion?
    bool                 up;                 //   false  This type of field is a reference
    bool                 isnew;              //   false  If set, skip this relation in amc_vis
    bool                 hasalloc;           //   false  Generte Alloc/Delete functions for arg type
    bool                 inst;               //   false  Field creates an instance of arg type (directly or indirectly)
    bool                 varlen;             //   false  This pool supports varlen allocations
    // func:amc_vis.FReftype..AssignOp
    amc_vis::FReftype&   operator =(const amc_vis::FReftype &rhs) = delete;
    // func:amc_vis.FReftype..CopyCtor
    FReftype(const amc_vis::FReftype &rhs) = delete;
private:
    // func:amc_vis.FReftype..Ctor
    inline               FReftype() __attribute__((nothrow));
    // func:amc_vis.FReftype..Dtor
    inline               ~FReftype() __attribute__((nothrow));
    friend amc_vis::FReftype&   reftype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::FReftype*   reftype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 reftype_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:amc_vis.FReftype.msghdr.CopyOut
void                 reftype_CopyOut(amc_vis::FReftype &row, dmmeta::Reftype &out) __attribute__((nothrow));
// Copy fields in to row
// func:amc_vis.FReftype.msghdr.CopyIn
void                 reftype_CopyIn(amc_vis::FReftype &row, dmmeta::Reftype &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:amc_vis.FReftype..Init
void                 FReftype_Init(amc_vis::FReftype& reftype);
// func:amc_vis.FReftype..Uninit
void                 FReftype_Uninit(amc_vis::FReftype& reftype) __attribute__((nothrow));

// --- amc_vis.FieldId
#pragma pack(push,1)
struct FieldId { // amc_vis.FieldId: Field read helper
    i32   value;   //   -1
    // func:amc_vis.FieldId.value.Cast
    inline               operator amc_vis_FieldIdEnum() const __attribute__((nothrow));
    // func:amc_vis.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:amc_vis.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:amc_vis.FieldId..EnumCtor
    inline               FieldId(amc_vis_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:amc_vis.FieldId.value.GetEnum
inline amc_vis_FieldIdEnum value_GetEnum(const amc_vis::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:amc_vis.FieldId.value.SetEnum
inline void          value_SetEnum(amc_vis::FieldId& parent, amc_vis_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:amc_vis.FieldId.value.ToCstr
const char*          value_ToCstr(const amc_vis::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:amc_vis.FieldId.value.Print
void                 value_Print(const amc_vis::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:amc_vis.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(amc_vis::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:amc_vis.FieldId.value.SetStrptr
void                 value_SetStrptr(amc_vis::FieldId& parent, algo::strptr rhs, amc_vis_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:amc_vis.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(amc_vis::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of amc_vis::FieldId from an ascii string.
// The format of the string is the format of the amc_vis::FieldId's only field
// func:amc_vis.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(amc_vis::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.FieldId..Init
inline void          FieldId_Init(amc_vis::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:amc_vis.FieldId.String  printfmt:Raw
// func:amc_vis.FieldId..Print
void                 FieldId_Print(amc_vis::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.Linkkey
struct Linkkey { // amc_vis.Linkkey: Correspodns to a ctype
    u32   n_link_in;   //   0  Number of incoming dependencies
    i32   samecol;     //   0  Set on links that lead to the same col
    i32   colweight;   //   0  Smaller cols are scheduled first
    i32   topbot;      //   0  Set to -1 for bottoms and tops to schedule them sooner
    // func:amc_vis.Linkkey..EqOp
    inline bool          operator ==(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..NeOp
    inline bool          operator !=(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..LtOp
    inline bool          operator <(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..GtOp
    inline bool          operator >(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..LeOp
    inline bool          operator <=(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..GeOp
    inline bool          operator >=(const amc_vis::Linkkey &rhs) const __attribute__((nothrow));
    // func:amc_vis.Linkkey..Ctor
    inline               Linkkey() __attribute__((nothrow));
    // func:amc_vis.Linkkey..FieldwiseCtor
    explicit inline               Linkkey(u32 in_n_link_in, i32 in_samecol, i32 in_colweight, i32 in_topbot) __attribute__((nothrow));
};

// func:amc_vis.Linkkey..Hash
inline u32           Linkkey_Hash(u32 prev, amc_vis::Linkkey rhs) __attribute__((nothrow));
// func:amc_vis.Linkkey..Lt
inline bool          Linkkey_Lt(amc_vis::Linkkey lhs, amc_vis::Linkkey rhs) __attribute__((nothrow));
// func:amc_vis.Linkkey..Cmp
i32                  Linkkey_Cmp(amc_vis::Linkkey lhs, amc_vis::Linkkey rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.Linkkey..Init
inline void          Linkkey_Init(amc_vis::Linkkey& parent);
// func:amc_vis.Linkkey..Eq
bool                 Linkkey_Eq(amc_vis::Linkkey lhs, amc_vis::Linkkey rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:amc_vis.Linkkey..Update
inline bool          Linkkey_Update(amc_vis::Linkkey &lhs, amc_vis::Linkkey rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:amc_vis.Linkkey.String  printfmt:Tuple
// func:amc_vis.Linkkey..Print
void                 Linkkey_Print(amc_vis::Linkkey row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.Link
// create: amc_vis.FDb.link (Lary)
// global access: link (Lary, by rowid)
// global access: ind_link (Thash, hash field link)
// global access: c_linklist (Ptrary)
// global access: bh_link (Bheap, sort field linkkey)
// access: amc_vis.FNode.c_bottom (Ptr)
// access: amc_vis.FNode.c_top (Ptr)
// access: amc_vis.FNode.zd_link_out (Llist)
// access: amc_vis.FNode.zd_link_in (Llist)
// access: amc_vis.Linkdep.p_link_from (Upptr)
// access: amc_vis.Linkdep.p_link_to (Upptr)
struct Link { // amc_vis.Link: Correspodns to a ctype
    amc_vis::Link*      ind_link_next;           // hash next
    i32                 bh_link_idx;             // index in heap; -1 means not-in-heap
    amc_vis::Link*      zd_link_out_next;        // zslist link; -1 means not-in-list
    amc_vis::Link*      zd_link_out_prev;        // previous element
    amc_vis::Link*      zd_link_in_next;         // zslist link; -1 means not-in-list
    amc_vis::Link*      zd_link_in_prev;         // previous element
    algo::Smallstr100   link;                    // Primary key
    algo::Smallstr100   label1;                  // Label in column 1
    algo::Smallstr100   label2;                  // Label in column 2
    amc_vis::Linkkey    linkkey;                 //
    i32                 outrow;                  //   0  Outrow #
    amc_vis::FNode*     p_node1;                 // reference to parent row
    amc_vis::FNode*     p_node2;                 // reference to parent row
    bool                upptr;                   //   false  Up-arrow (not a constraint)
    amc_vis::Linkdep*   zd_linkdep_out_head;     // zero-terminated doubly linked list
    amc_vis::Linkdep*   zd_linkdep_out_tail;     // pointer to last element
    amc_vis::Linkdep*   zd_linkdep_in_head;      // zero-terminated doubly linked list
    amc_vis::Linkdep*   zd_linkdep_in_tail;      // pointer to last element
    bool                _db_c_linklist_in_ary;   //   false  membership flag
    // reftype Llist of amc_vis.Link.zd_linkdep_out prohibits copy
    // reftype Llist of amc_vis.Link.zd_linkdep_in prohibits copy
    // func:amc_vis.Link..AssignOp
    amc_vis::Link&       operator =(const amc_vis::Link &rhs) = delete;
    // reftype Llist of amc_vis.Link.zd_linkdep_out prohibits copy
    // reftype Llist of amc_vis.Link.zd_linkdep_in prohibits copy
    // func:amc_vis.Link..CopyCtor
    Link(const amc_vis::Link &rhs) = delete;
private:
    // func:amc_vis.Link..Ctor
    inline               Link() __attribute__((nothrow));
    // func:amc_vis.Link..Dtor
    inline               ~Link() __attribute__((nothrow));
    friend amc_vis::Link&       link_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::Link*       link_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 link_RemoveAll() __attribute__((nothrow));
    friend void                 link_RemoveLast() __attribute__((nothrow));
};

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
// func:amc_vis.Link.linkkey.Lt
inline bool          linkkey_Lt(amc_vis::Link& link, amc_vis::Link &rhs) __attribute__((nothrow));
// Compare two fields.
// func:amc_vis.Link.linkkey.Cmp
inline i32           linkkey_Cmp(amc_vis::Link& link, amc_vis::Link &rhs) __attribute__((nothrow));

// Return true if index is empty
// func:amc_vis.Link.zd_linkdep_out.EmptyQ
inline bool          zd_linkdep_out_EmptyQ(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.Link.zd_linkdep_out.First
inline amc_vis::Linkdep* zd_linkdep_out_First(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.Link.zd_linkdep_out.InLlistQ
inline bool          zd_linkdep_out_InLlistQ(amc_vis::Linkdep& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.Link.zd_linkdep_out.Insert
void                 zd_linkdep_out_Insert(amc_vis::Link& link, amc_vis::Linkdep& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.Link.zd_linkdep_out.Last
inline amc_vis::Linkdep* zd_linkdep_out_Last(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.Link.zd_linkdep_out.Next
inline amc_vis::Linkdep* zd_linkdep_out_Next(amc_vis::Linkdep &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.Link.zd_linkdep_out.Prev
inline amc_vis::Linkdep* zd_linkdep_out_Prev(amc_vis::Linkdep &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.Link.zd_linkdep_out.Remove
void                 zd_linkdep_out_Remove(amc_vis::Link& link, amc_vis::Linkdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.Link.zd_linkdep_out.RemoveAll
void                 zd_linkdep_out_RemoveAll(amc_vis::Link& link) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.Link.zd_linkdep_out.RemoveFirst
amc_vis::Linkdep*    zd_linkdep_out_RemoveFirst(amc_vis::Link& link) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.Link.zd_linkdep_out.qLast
inline amc_vis::Linkdep& zd_linkdep_out_qLast(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:amc_vis.Link.zd_linkdep_in.EmptyQ
inline bool          zd_linkdep_in_EmptyQ(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:amc_vis.Link.zd_linkdep_in.First
inline amc_vis::Linkdep* zd_linkdep_in_First(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:amc_vis.Link.zd_linkdep_in.InLlistQ
inline bool          zd_linkdep_in_InLlistQ(amc_vis::Linkdep& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:amc_vis.Link.zd_linkdep_in.Insert
void                 zd_linkdep_in_Insert(amc_vis::Link& link, amc_vis::Linkdep& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:amc_vis.Link.zd_linkdep_in.Last
inline amc_vis::Linkdep* zd_linkdep_in_Last(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:amc_vis.Link.zd_linkdep_in.Next
inline amc_vis::Linkdep* zd_linkdep_in_Next(amc_vis::Linkdep &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:amc_vis.Link.zd_linkdep_in.Prev
inline amc_vis::Linkdep* zd_linkdep_in_Prev(amc_vis::Linkdep &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:amc_vis.Link.zd_linkdep_in.Remove
void                 zd_linkdep_in_Remove(amc_vis::Link& link, amc_vis::Linkdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:amc_vis.Link.zd_linkdep_in.RemoveAll
void                 zd_linkdep_in_RemoveAll(amc_vis::Link& link) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:amc_vis.Link.zd_linkdep_in.RemoveFirst
amc_vis::Linkdep*    zd_linkdep_in_RemoveFirst(amc_vis::Link& link) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:amc_vis.Link.zd_linkdep_in.qLast
inline amc_vis::Linkdep& zd_linkdep_in_qLast(amc_vis::Link& link) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:amc_vis.Link..Init
void                 Link_Init(amc_vis::Link& link);
// cursor points to valid item
// func:amc_vis.Link.zd_linkdep_out_curs.Reset
inline void          link_zd_linkdep_out_curs_Reset(link_zd_linkdep_out_curs &curs, amc_vis::Link &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.Link.zd_linkdep_out_curs.ValidQ
inline bool          link_zd_linkdep_out_curs_ValidQ(link_zd_linkdep_out_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.Link.zd_linkdep_out_curs.Next
inline void          link_zd_linkdep_out_curs_Next(link_zd_linkdep_out_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.Link.zd_linkdep_out_curs.Access
inline amc_vis::Linkdep& link_zd_linkdep_out_curs_Access(link_zd_linkdep_out_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.Link.zd_linkdep_in_curs.Reset
inline void          link_zd_linkdep_in_curs_Reset(link_zd_linkdep_in_curs &curs, amc_vis::Link &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.Link.zd_linkdep_in_curs.ValidQ
inline bool          link_zd_linkdep_in_curs_ValidQ(link_zd_linkdep_in_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:amc_vis.Link.zd_linkdep_in_curs.Next
inline void          link_zd_linkdep_in_curs_Next(link_zd_linkdep_in_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.Link.zd_linkdep_in_curs.Access
inline amc_vis::Linkdep& link_zd_linkdep_in_curs_Access(link_zd_linkdep_in_curs &curs) __attribute__((nothrow));
// func:amc_vis.Link..Uninit
void                 Link_Uninit(amc_vis::Link& link) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:amc_vis.Link.String  printfmt:Tuple
// func:amc_vis.Link..Print
void                 Link_Print(amc_vis::Link& row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.Linkdep
// create: amc_vis.FDb.linkdep (Lary)
// global access: linkdep (Lary, by rowid)
// access: amc_vis.Link.zd_linkdep_out (Llist)
// access: amc_vis.Link.zd_linkdep_in (Llist)
struct Linkdep { // amc_vis.Linkdep: Corresponds to a field
    amc_vis::Linkdep*   zd_linkdep_out_next;   // zslist link; -1 means not-in-list
    amc_vis::Linkdep*   zd_linkdep_out_prev;   // previous element
    amc_vis::Linkdep*   zd_linkdep_in_next;    // zslist link; -1 means not-in-list
    amc_vis::Linkdep*   zd_linkdep_in_prev;    // previous element
    i32                 row;                   //   0
    i32                 rowid;                 //   0  Id
    bool                up;                    //   false  Points up
    bool                inst;                  //   false  Instance (vs. index)
    amc_vis::Link*      p_link_from;           // reference to parent row
    amc_vis::Link*      p_link_to;             // reference to parent row
    // func:amc_vis.Linkdep..AssignOp
    inline amc_vis::Linkdep& operator =(const amc_vis::Linkdep &rhs) = delete;
    // func:amc_vis.Linkdep..CopyCtor
    inline               Linkdep(const amc_vis::Linkdep &rhs) = delete;
    // func:amc_vis.Linkdep..FieldwiseCtor
    explicit inline               Linkdep(i32 in_row, i32 in_rowid, bool in_up, bool in_inst, amc_vis::Link* in_p_link_from, amc_vis::Link* in_p_link_to) __attribute__((nothrow));
private:
    // func:amc_vis.Linkdep..Ctor
    inline               Linkdep() __attribute__((nothrow));
    // func:amc_vis.Linkdep..Dtor
    inline               ~Linkdep() __attribute__((nothrow));
    friend amc_vis::Linkdep&    linkdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::Linkdep*    linkdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 linkdep_RemoveAll() __attribute__((nothrow));
    friend void                 linkdep_RemoveLast() __attribute__((nothrow));
};

// Set all fields to initial values.
// func:amc_vis.Linkdep..Init
inline void          Linkdep_Init(amc_vis::Linkdep& linkdep);
// func:amc_vis.Linkdep..Uninit
void                 Linkdep_Uninit(amc_vis::Linkdep& linkdep) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:amc_vis.Linkdep.String  printfmt:Tuple
// func:amc_vis.Linkdep..Print
void                 Linkdep_Print(amc_vis::Linkdep& row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.Outrow
// create: amc_vis.FDb.outrow (Lary)
// global access: outrow (Lary, by rowid)
struct Outrow { // amc_vis.Outrow: One line of text
    i32   rowid;        //   0  Outrow pkey
    u8*   text_elems;   // pointer to elements
    u32   text_n;       // number of elements in array
    u32   text_max;     // max. capacity of array before realloc
    // func:amc_vis.Outrow..AssignOp
    amc_vis::Outrow&     operator =(const amc_vis::Outrow &rhs) __attribute__((nothrow));
    // func:amc_vis.Outrow..CopyCtor
    Outrow(const amc_vis::Outrow &rhs) __attribute__((nothrow));
private:
    // func:amc_vis.Outrow..Ctor
    inline               Outrow() __attribute__((nothrow));
    // func:amc_vis.Outrow..Dtor
    inline               ~Outrow() __attribute__((nothrow));
    friend amc_vis::Outrow&     outrow_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend amc_vis::Outrow*     outrow_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 outrow_RemoveAll() __attribute__((nothrow));
    friend void                 outrow_RemoveLast() __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:amc_vis.Outrow.text.Addary
algo::aryptr<u8>     text_Addary(amc_vis::Outrow& outrow, algo::aryptr<u8> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:amc_vis.Outrow.text.Alloc
u8&                  text_Alloc(amc_vis::Outrow& outrow) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:amc_vis.Outrow.text.AllocAt
u8&                  text_AllocAt(amc_vis::Outrow& outrow, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:amc_vis.Outrow.text.AllocN
algo::aryptr<u8>     text_AllocN(amc_vis::Outrow& outrow, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:amc_vis.Outrow.text.EmptyQ
inline bool          text_EmptyQ(amc_vis::Outrow& outrow) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:amc_vis.Outrow.text.Find
inline u8*           text_Find(amc_vis::Outrow& outrow, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:amc_vis.Outrow.text.Getary
inline algo::aryptr<u8> text_Getary(const amc_vis::Outrow& outrow) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:amc_vis.Outrow.text.Last
inline u8*           text_Last(amc_vis::Outrow& outrow) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:amc_vis.Outrow.text.Max
inline i32           text_Max(amc_vis::Outrow& outrow) __attribute__((nothrow));
// Return number of items in the array
// func:amc_vis.Outrow.text.N
inline i32           text_N(const amc_vis::Outrow& outrow) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:amc_vis.Outrow.text.Remove
void                 text_Remove(amc_vis::Outrow& outrow, u32 i) __attribute__((nothrow));
// func:amc_vis.Outrow.text.RemoveAll
inline void          text_RemoveAll(amc_vis::Outrow& outrow) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:amc_vis.Outrow.text.RemoveLast
void                 text_RemoveLast(amc_vis::Outrow& outrow) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:amc_vis.Outrow.text.Reserve
inline void          text_Reserve(amc_vis::Outrow& outrow, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:amc_vis.Outrow.text.AbsReserve
void                 text_AbsReserve(amc_vis::Outrow& outrow, int n) __attribute__((nothrow));
// Convert text to a string.
// Array is printed as a regular string.
// func:amc_vis.Outrow.text.Print
void                 text_Print(amc_vis::Outrow& outrow, algo::cstring &rhs) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:amc_vis.Outrow.text.Setary
void                 text_Setary(amc_vis::Outrow& outrow, amc_vis::Outrow &rhs) __attribute__((nothrow));
// Copy specified array into text, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:amc_vis.Outrow.text.Setary2
void                 text_Setary(amc_vis::Outrow& outrow, const algo::aryptr<u8> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:amc_vis.Outrow.text.qFind
inline u8&           text_qFind(amc_vis::Outrow& outrow, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:amc_vis.Outrow.text.qLast
inline u8&           text_qLast(amc_vis::Outrow& outrow) __attribute__((nothrow));
// Return row id of specified element
// func:amc_vis.Outrow.text.rowid_Get
inline u64           text_rowid_Get(amc_vis::Outrow& outrow, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:amc_vis.Outrow.text.AllocNVal
algo::aryptr<u8>     text_AllocNVal(amc_vis::Outrow& outrow, int n_elems, const u8& val) __attribute__((nothrow));
// The array is replaced with the input string. Function always succeeds.
// func:amc_vis.Outrow.text.ReadStrptrMaybe
bool                 text_ReadStrptrMaybe(amc_vis::Outrow& outrow, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:amc_vis.Outrow.text_curs.Next
inline void          outrow_text_curs_Next(outrow_text_curs &curs) __attribute__((nothrow));
// func:amc_vis.Outrow.text_curs.Reset
inline void          outrow_text_curs_Reset(outrow_text_curs &curs, amc_vis::Outrow &parent) __attribute__((nothrow));
// cursor points to valid item
// func:amc_vis.Outrow.text_curs.ValidQ
inline bool          outrow_text_curs_ValidQ(outrow_text_curs &curs) __attribute__((nothrow));
// item access
// func:amc_vis.Outrow.text_curs.Access
inline u8&           outrow_text_curs_Access(outrow_text_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.Outrow..Init
inline void          Outrow_Init(amc_vis::Outrow& outrow);
// func:amc_vis.Outrow..Uninit
void                 Outrow_Uninit(amc_vis::Outrow& outrow) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:amc_vis.Outrow.String  printfmt:Tuple
// func:amc_vis.Outrow..Print
void                 Outrow_Print(amc_vis::Outrow& row, algo::cstring& str) __attribute__((nothrow));

// --- amc_vis.TableId
struct TableId { // amc_vis.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    // func:amc_vis.TableId.value.Cast
    inline               operator amc_vis_TableIdEnum() const __attribute__((nothrow));
    // func:amc_vis.TableId..Ctor
    inline               TableId() __attribute__((nothrow));
    // func:amc_vis.TableId..FieldwiseCtor
    explicit inline               TableId(i32 in_value) __attribute__((nothrow));
    // func:amc_vis.TableId..EnumCtor
    inline               TableId(amc_vis_TableIdEnum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:amc_vis.TableId.value.GetEnum
inline amc_vis_TableIdEnum value_GetEnum(const amc_vis::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:amc_vis.TableId.value.SetEnum
inline void          value_SetEnum(amc_vis::TableId& parent, amc_vis_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:amc_vis.TableId.value.ToCstr
const char*          value_ToCstr(const amc_vis::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:amc_vis.TableId.value.Print
void                 value_Print(const amc_vis::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:amc_vis.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(amc_vis::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:amc_vis.TableId.value.SetStrptr
void                 value_SetStrptr(amc_vis::TableId& parent, algo::strptr rhs, amc_vis_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:amc_vis.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(amc_vis::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of amc_vis::TableId from an ascii string.
// The format of the string is the format of the amc_vis::TableId's only field
// func:amc_vis.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(amc_vis::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:amc_vis.TableId..Init
inline void          TableId_Init(amc_vis::TableId& parent);
// print string representation of ROW to string STR
// cfmt:amc_vis.TableId.String  printfmt:Raw
// func:amc_vis.TableId..Print
void                 TableId_Print(amc_vis::TableId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace amc_vis { // gen:ns_curstext

struct ctype_c_field_curs {// fcurs:amc_vis.FCtype.c_field/curs
    typedef amc_vis::FField ChildType;
    amc_vis::FField** elems;
    u32 n_elems;
    u32 index;
    ctype_c_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_ctype_curs {// cursor
    typedef amc_vis::FCtype ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_ctype_curs(){ parent=NULL; index=0; }
};


struct _db_field_curs {// cursor
    typedef amc_vis::FField ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_field_curs(){ parent=NULL; index=0; }
};


struct _db_node_curs {// cursor
    typedef amc_vis::FNode ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_node_curs(){ parent=NULL; index=0; }
};


struct _db_link_curs {// cursor
    typedef amc_vis::Link ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_link_curs(){ parent=NULL; index=0; }
};


struct _db_linkdep_curs {// cursor
    typedef amc_vis::Linkdep ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_linkdep_curs(){ parent=NULL; index=0; }
};


struct _db_c_linklist_curs {// fcurs:amc_vis.FDb.c_linklist/curs
    typedef amc_vis::Link ChildType;
    amc_vis::Link** elems;
    u32 n_elems;
    u32 index;
    _db_c_linklist_curs() { elems=NULL; n_elems=0; index=0; }
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_node_curs {
    typedef amc_vis::FNode ChildType;
    amc_vis::FDb      *parent;        // parent
    amc_vis::FNode*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_node_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_node_curs();
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_link_curs {
    typedef amc_vis::Link ChildType;
    amc_vis::FDb      *parent;        // parent
    amc_vis::Link*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_link_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_link_curs();
};


struct _db_reftype_curs {// cursor
    typedef amc_vis::FReftype ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_reftype_curs(){ parent=NULL; index=0; }
};


struct _db_nodedep_curs {// cursor
    typedef amc_vis::FNodedep ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_nodedep_curs(){ parent=NULL; index=0; }
};


struct _db_outrow_curs {// cursor
    typedef amc_vis::Outrow ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_outrow_curs(){ parent=NULL; index=0; }
};


struct _db_zd_select_curs {// fcurs:amc_vis.FDb.zd_select/curs
    typedef amc_vis::FCtype ChildType;
    amc_vis::FCtype* row;
    _db_zd_select_curs() {
        row = NULL;
    }
};


struct _db_finput_curs {// cursor
    typedef amc_vis::FFinput ChildType;
    amc_vis::FDb *parent;
    i64 index;
    _db_finput_curs(){ parent=NULL; index=0; }
};


struct node_zd_nodedep_out_curs {// fcurs:amc_vis.FNode.zd_nodedep_out/curs
    typedef amc_vis::FNodedep ChildType;
    amc_vis::FNodedep* row;
    node_zd_nodedep_out_curs() {
        row = NULL;
    }
};


struct node_zd_nodedep_in_curs {// fcurs:amc_vis.FNode.zd_nodedep_in/curs
    typedef amc_vis::FNodedep ChildType;
    amc_vis::FNodedep* row;
    node_zd_nodedep_in_curs() {
        row = NULL;
    }
};


struct node_zd_link_out_curs {// fcurs:amc_vis.FNode.zd_link_out/curs
    typedef amc_vis::Link ChildType;
    amc_vis::Link* row;
    node_zd_link_out_curs() {
        row = NULL;
    }
};


struct node_zd_link_in_curs {// fcurs:amc_vis.FNode.zd_link_in/curs
    typedef amc_vis::Link ChildType;
    amc_vis::Link* row;
    node_zd_link_in_curs() {
        row = NULL;
    }
};


struct link_zd_linkdep_out_curs {// fcurs:amc_vis.Link.zd_linkdep_out/curs
    typedef amc_vis::Linkdep ChildType;
    amc_vis::Linkdep* row;
    link_zd_linkdep_out_curs() {
        row = NULL;
    }
};


struct link_zd_linkdep_in_curs {// fcurs:amc_vis.Link.zd_linkdep_in/curs
    typedef amc_vis::Linkdep ChildType;
    amc_vis::Linkdep* row;
    link_zd_linkdep_in_curs() {
        row = NULL;
    }
};


struct outrow_text_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    outrow_text_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace amc_vis { // gen:ns_func
// func:amc_vis...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// func:amc_vis...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:amc_vis...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::trace &row);// cfmt:amc_vis.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::Nodekey &row);// cfmt:amc_vis.Nodekey.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::FieldId &row);// cfmt:amc_vis.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::Linkkey &row);// cfmt:amc_vis.Linkkey.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::Link &row);// cfmt:amc_vis.Link.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::Linkdep &row);// cfmt:amc_vis.Linkdep.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::Outrow &row);// cfmt:amc_vis.Outrow.String
inline algo::cstring &operator <<(algo::cstring &str, const amc_vis::TableId &row);// cfmt:amc_vis.TableId.String
}
