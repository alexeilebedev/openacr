//
// include/gen/sv2ssim_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//


#pragma once
#include "include/gen/amcdb_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dmmeta_gen.inl.h"
//#pragma endinclude
inline sv2ssim::FBltin::FBltin() {
    sv2ssim::FBltin_Init(*this);
}

inline sv2ssim::FBltin::~FBltin() {
    sv2ssim::FBltin_Uninit(*this);
}


// --- sv2ssim.FBltin..Init
// Set all fields to initial values.
inline void sv2ssim::FBltin_Init(sv2ssim::FBltin& bltin) {
    bltin.likeu64 = bool(false);
    bltin.bigendok = bool(false);
    bltin.issigned = bool(false);
    bltin.ind_bltin_next = (sv2ssim::FBltin*)-1; // (sv2ssim.FDb.ind_bltin) not-in-hash
}
inline sv2ssim::trace::trace() {
}


// --- sv2ssim.FDb.field.EmptyQ
// Return true if index is empty
inline bool sv2ssim::field_EmptyQ() {
    return _db.field_n == 0;
}

// --- sv2ssim.FDb.field.Find
// Look up row by row id. Return NULL if out of range
inline sv2ssim::FField* sv2ssim::field_Find(i32 t) {
    sv2ssim::FField *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.field_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.field_lary[bsr][index];
    }
    return retval;
}

// --- sv2ssim.FDb.field.Last
// Return pointer to last element of array, or NULL if array is empty
inline sv2ssim::FField* sv2ssim::field_Last() {
    return field_Find(i32(_db.field_n-1));
}

// --- sv2ssim.FDb.field.N
// Return number of items in the pool
inline i32 sv2ssim::field_N() {
    return _db.field_n;
}

// --- sv2ssim.FDb.field.qFind
// 'quick' Access row by row id. No bounds checking.
inline sv2ssim::FField& sv2ssim::field_qFind(i32 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.field_lary[bsr][index];
}

// --- sv2ssim.FDb.linetok.EmptyQ
// Return true if index is empty
inline bool sv2ssim::linetok_EmptyQ() {
    return _db.linetok_n == 0;
}

// --- sv2ssim.FDb.linetok.Find
// Look up row by row id. Return NULL if out of range
inline algo::cstring* sv2ssim::linetok_Find(u64 t) {
    u64 idx = t;
    u64 lim = _db.linetok_n;
    if (idx >= lim) return NULL;
    return _db.linetok_elems + idx;
}

// --- sv2ssim.FDb.linetok.Getary
// Return array pointer by value
inline algo::aryptr<algo::cstring> sv2ssim::linetok_Getary() {
    return algo::aryptr<algo::cstring>(_db.linetok_elems, _db.linetok_n);
}

// --- sv2ssim.FDb.linetok.Last
// Return pointer to last element of array, or NULL if array is empty
inline algo::cstring* sv2ssim::linetok_Last() {
    return linetok_Find(u64(_db.linetok_n-1));
}

// --- sv2ssim.FDb.linetok.Max
// Return max. number of items in the array
inline i32 sv2ssim::linetok_Max() {
    return _db.linetok_max;
}

// --- sv2ssim.FDb.linetok.N
// Return number of items in the array
inline i32 sv2ssim::linetok_N() {
    return _db.linetok_n;
}

// --- sv2ssim.FDb.linetok.Reserve
// Make sure N *more* elements will fit in array. Process dies if out of memory
inline void sv2ssim::linetok_Reserve(int n) {
    u32 new_n = _db.linetok_n + n;
    if (UNLIKELY(new_n > _db.linetok_max)) {
        linetok_AbsReserve(new_n);
    }
}

// --- sv2ssim.FDb.linetok.qFind
// 'quick' Access row by row id. No bounds checking.
inline algo::cstring& sv2ssim::linetok_qFind(u64 t) {
    return _db.linetok_elems[t];
}

// --- sv2ssim.FDb.linetok.qLast
// Return reference to last element of array. No bounds checking
inline algo::cstring& sv2ssim::linetok_qLast() {
    return linetok_qFind(u64(_db.linetok_n-1));
}

// --- sv2ssim.FDb.linetok.rowid_Get
// Return row id of specified element
inline u64 sv2ssim::linetok_rowid_Get(algo::cstring &elem) {
    u64 id = &elem - _db.linetok_elems;
    return u64(id);
}

// --- sv2ssim.FDb.svtype.EmptyQ
// Return true if index is empty
inline bool sv2ssim::svtype_EmptyQ() {
    return _db.svtype_n == 0;
}

// --- sv2ssim.FDb.svtype.Find
// Look up row by row id. Return NULL if out of range
inline sv2ssim::FSvtype* sv2ssim::svtype_Find(u64 t) {
    sv2ssim::FSvtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.svtype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.svtype_lary[bsr][index];
    }
    return retval;
}

// --- sv2ssim.FDb.svtype.Last
// Return pointer to last element of array, or NULL if array is empty
inline sv2ssim::FSvtype* sv2ssim::svtype_Last() {
    return svtype_Find(u64(_db.svtype_n-1));
}

// --- sv2ssim.FDb.svtype.N
// Return number of items in the pool
inline i32 sv2ssim::svtype_N() {
    return _db.svtype_n;
}

// --- sv2ssim.FDb.svtype.qFind
// 'quick' Access row by row id. No bounds checking.
inline sv2ssim::FSvtype& sv2ssim::svtype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.svtype_lary[bsr][index];
}

// --- sv2ssim.FDb.ind_field.EmptyQ
// Return true if hash is empty
inline bool sv2ssim::ind_field_EmptyQ() {
    return _db.ind_field_n == 0;
}

// --- sv2ssim.FDb.ind_field.N
// Return number of items in the hash
inline i32 sv2ssim::ind_field_N() {
    return _db.ind_field_n;
}

// --- sv2ssim.FDb.zd_selfield.EmptyQ
// Return true if index is empty
inline bool sv2ssim::zd_selfield_EmptyQ() {
    return _db.zd_selfield_head == NULL;
}

// --- sv2ssim.FDb.zd_selfield.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline sv2ssim::FField* sv2ssim::zd_selfield_First() {
    sv2ssim::FField *row = NULL;
    row = _db.zd_selfield_head;
    return row;
}

// --- sv2ssim.FDb.zd_selfield.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool sv2ssim::zd_selfield_InLlistQ(sv2ssim::FField& row) {
    bool result = false;
    result = !(row.zd_selfield_next == (sv2ssim::FField*)-1);
    return result;
}

// --- sv2ssim.FDb.zd_selfield.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline sv2ssim::FField* sv2ssim::zd_selfield_Last() {
    sv2ssim::FField *row = NULL;
    row = _db.zd_selfield_tail;
    return row;
}

// --- sv2ssim.FDb.zd_selfield.N
// Return number of items in the linked list
inline i32 sv2ssim::zd_selfield_N() {
    return _db.zd_selfield_n;
}

// --- sv2ssim.FDb.zd_selfield.Next
// Return pointer to next element in the list
inline sv2ssim::FField* sv2ssim::zd_selfield_Next(sv2ssim::FField &row) {
    return row.zd_selfield_next;
}

// --- sv2ssim.FDb.zd_selfield.Prev
// Return pointer to previous element in the list
inline sv2ssim::FField* sv2ssim::zd_selfield_Prev(sv2ssim::FField &row) {
    return row.zd_selfield_prev;
}

// --- sv2ssim.FDb.zd_selfield.qLast
// Return reference to last element in the index. No bounds checking.
inline sv2ssim::FField& sv2ssim::zd_selfield_qLast() {
    sv2ssim::FField *row = NULL;
    row = _db.zd_selfield_tail;
    return *row;
}

// --- sv2ssim.FDb.bltin.EmptyQ
// Return true if index is empty
inline bool sv2ssim::bltin_EmptyQ() {
    return _db.bltin_n == 0;
}

// --- sv2ssim.FDb.bltin.Find
// Look up row by row id. Return NULL if out of range
inline sv2ssim::FBltin* sv2ssim::bltin_Find(u64 t) {
    sv2ssim::FBltin *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.bltin_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.bltin_lary[bsr][index];
    }
    return retval;
}

// --- sv2ssim.FDb.bltin.Last
// Return pointer to last element of array, or NULL if array is empty
inline sv2ssim::FBltin* sv2ssim::bltin_Last() {
    return bltin_Find(u64(_db.bltin_n-1));
}

// --- sv2ssim.FDb.bltin.N
// Return number of items in the pool
inline i32 sv2ssim::bltin_N() {
    return _db.bltin_n;
}

// --- sv2ssim.FDb.bltin.qFind
// 'quick' Access row by row id. No bounds checking.
inline sv2ssim::FBltin& sv2ssim::bltin_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.bltin_lary[bsr][index];
}

// --- sv2ssim.FDb.ind_bltin.EmptyQ
// Return true if hash is empty
inline bool sv2ssim::ind_bltin_EmptyQ() {
    return _db.ind_bltin_n == 0;
}

// --- sv2ssim.FDb.ind_bltin.N
// Return number of items in the hash
inline i32 sv2ssim::ind_bltin_N() {
    return _db.ind_bltin_n;
}

// --- sv2ssim.FDb.field_curs.Reset
// cursor points to valid item
inline void sv2ssim::_db_field_curs_Reset(_db_field_curs &curs, sv2ssim::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- sv2ssim.FDb.field_curs.ValidQ
// cursor points to valid item
inline bool sv2ssim::_db_field_curs_ValidQ(_db_field_curs &curs) {
    return curs.index < _db.field_n;
}

// --- sv2ssim.FDb.field_curs.Next
// proceed to next item
inline void sv2ssim::_db_field_curs_Next(_db_field_curs &curs) {
    curs.index++;
}

// --- sv2ssim.FDb.field_curs.Access
// item access
inline sv2ssim::FField& sv2ssim::_db_field_curs_Access(_db_field_curs &curs) {
    return field_qFind(i32(curs.index));
}

// --- sv2ssim.FDb.linetok_curs.Next
// proceed to next item
inline void sv2ssim::_db_linetok_curs_Next(_db_linetok_curs &curs) {
    curs.index++;
}

// --- sv2ssim.FDb.linetok_curs.Reset
inline void sv2ssim::_db_linetok_curs_Reset(_db_linetok_curs &curs, sv2ssim::FDb &parent) {
    curs.elems = parent.linetok_elems;
    curs.n_elems = parent.linetok_n;
    curs.index = 0;
}

// --- sv2ssim.FDb.linetok_curs.ValidQ
// cursor points to valid item
inline bool sv2ssim::_db_linetok_curs_ValidQ(_db_linetok_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- sv2ssim.FDb.linetok_curs.Access
// item access
inline algo::cstring& sv2ssim::_db_linetok_curs_Access(_db_linetok_curs &curs) {
    return curs.elems[curs.index];
}

// --- sv2ssim.FDb.svtype_curs.Reset
// cursor points to valid item
inline void sv2ssim::_db_svtype_curs_Reset(_db_svtype_curs &curs, sv2ssim::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- sv2ssim.FDb.svtype_curs.ValidQ
// cursor points to valid item
inline bool sv2ssim::_db_svtype_curs_ValidQ(_db_svtype_curs &curs) {
    return curs.index < _db.svtype_n;
}

// --- sv2ssim.FDb.svtype_curs.Next
// proceed to next item
inline void sv2ssim::_db_svtype_curs_Next(_db_svtype_curs &curs) {
    curs.index++;
}

// --- sv2ssim.FDb.svtype_curs.Access
// item access
inline sv2ssim::FSvtype& sv2ssim::_db_svtype_curs_Access(_db_svtype_curs &curs) {
    return svtype_qFind(u64(curs.index));
}

// --- sv2ssim.FDb.zd_selfield_curs.Reset
// cursor points to valid item
inline void sv2ssim::_db_zd_selfield_curs_Reset(_db_zd_selfield_curs &curs, sv2ssim::FDb &parent) {
    curs.row = parent.zd_selfield_head;
}

// --- sv2ssim.FDb.zd_selfield_curs.ValidQ
// cursor points to valid item
inline bool sv2ssim::_db_zd_selfield_curs_ValidQ(_db_zd_selfield_curs &curs) {
    return curs.row != NULL;
}

// --- sv2ssim.FDb.zd_selfield_curs.Next
// proceed to next item
inline void sv2ssim::_db_zd_selfield_curs_Next(_db_zd_selfield_curs &curs) {
    sv2ssim::FField *next = (*curs.row).zd_selfield_next;
    curs.row = next;
}

// --- sv2ssim.FDb.zd_selfield_curs.Access
// item access
inline sv2ssim::FField& sv2ssim::_db_zd_selfield_curs_Access(_db_zd_selfield_curs &curs) {
    return *curs.row;
}

// --- sv2ssim.FDb.bltin_curs.Reset
// cursor points to valid item
inline void sv2ssim::_db_bltin_curs_Reset(_db_bltin_curs &curs, sv2ssim::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- sv2ssim.FDb.bltin_curs.ValidQ
// cursor points to valid item
inline bool sv2ssim::_db_bltin_curs_ValidQ(_db_bltin_curs &curs) {
    return curs.index < _db.bltin_n;
}

// --- sv2ssim.FDb.bltin_curs.Next
// proceed to next item
inline void sv2ssim::_db_bltin_curs_Next(_db_bltin_curs &curs) {
    curs.index++;
}

// --- sv2ssim.FDb.bltin_curs.Access
// item access
inline sv2ssim::FBltin& sv2ssim::_db_bltin_curs_Access(_db_bltin_curs &curs) {
    return bltin_qFind(u64(curs.index));
}
inline sv2ssim::FField::FField() {
    sv2ssim::FField_Init(*this);
}

inline sv2ssim::FField::~FField() {
    sv2ssim::FField_Uninit(*this);
}

inline sv2ssim::FSvtype::FSvtype() {
    sv2ssim::FSvtype_Init(*this);
}


// --- sv2ssim.FSvtype..Init
// Set all fields to initial values.
inline void sv2ssim::FSvtype_Init(sv2ssim::FSvtype& svtype) {
    svtype.maxwid = i32(0);
    svtype.fixedwid1 = i32(0);
    svtype.fixedwid2 = i32(0);
}
inline sv2ssim::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline sv2ssim::FieldId::FieldId(sv2ssim_FieldIdEnum arg) { this->value = i32(arg); }
inline sv2ssim::FieldId::FieldId() {
    sv2ssim::FieldId_Init(*this);
}


// --- sv2ssim.FieldId.value.GetEnum
// Get value of field as enum type
inline sv2ssim_FieldIdEnum sv2ssim::value_GetEnum(const sv2ssim::FieldId& parent) {
    return sv2ssim_FieldIdEnum(parent.value);
}

// --- sv2ssim.FieldId.value.SetEnum
// Set value of field from enum type.
inline void sv2ssim::value_SetEnum(sv2ssim::FieldId& parent, sv2ssim_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- sv2ssim.FieldId.value.Cast
inline sv2ssim::FieldId::operator sv2ssim_FieldIdEnum () const {
    return sv2ssim_FieldIdEnum((*this).value);
}

// --- sv2ssim.FieldId..Init
// Set all fields to initial values.
inline void sv2ssim::FieldId_Init(sv2ssim::FieldId& parent) {
    parent.value = i32(-1);
}
inline sv2ssim::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline sv2ssim::TableId::TableId(sv2ssim_TableIdEnum arg) { this->value = i32(arg); }
inline sv2ssim::TableId::TableId() {
    sv2ssim::TableId_Init(*this);
}


// --- sv2ssim.TableId.value.GetEnum
// Get value of field as enum type
inline sv2ssim_TableIdEnum sv2ssim::value_GetEnum(const sv2ssim::TableId& parent) {
    return sv2ssim_TableIdEnum(parent.value);
}

// --- sv2ssim.TableId.value.SetEnum
// Set value of field from enum type.
inline void sv2ssim::value_SetEnum(sv2ssim::TableId& parent, sv2ssim_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- sv2ssim.TableId.value.Cast
inline sv2ssim::TableId::operator sv2ssim_TableIdEnum () const {
    return sv2ssim_TableIdEnum((*this).value);
}

// --- sv2ssim.TableId..Init
// Set all fields to initial values.
inline void sv2ssim::TableId_Init(sv2ssim::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sv2ssim::trace &row) {// cfmt:sv2ssim.trace.String
    sv2ssim::trace_Print(const_cast<sv2ssim::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sv2ssim::FField &row) {// cfmt:sv2ssim.FField.String
    sv2ssim::FField_Print(const_cast<sv2ssim::FField&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sv2ssim::FieldId &row) {// cfmt:sv2ssim.FieldId.String
    sv2ssim::FieldId_Print(const_cast<sv2ssim::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sv2ssim::TableId &row) {// cfmt:sv2ssim.TableId.String
    sv2ssim::TableId_Print(const_cast<sv2ssim::TableId&>(row), str);
    return str;
}
