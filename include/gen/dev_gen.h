//
// include/gen/dev_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums
extern const char *  dev_Arch_arch_;         //           fconst:dev.Arch.arch/
extern const char *  dev_Arch_arch_amd64;    // amd64     fconst:dev.Arch.arch/amd64
extern const char *  dev_Arch_arch_i686;     // i686      fconst:dev.Arch.arch/i686
extern const char *  dev_Arch_arch_i86pc;    // i86pc     fconst:dev.Arch.arch/i86pc
extern const char *  dev_Arch_arch_x64;      // x64       fconst:dev.Arch.arch/x64
extern const char *  dev_Arch_arch_x86_64;   // x86_64    fconst:dev.Arch.arch/x86_64
extern const char *  dev_Builddir_builddir_Darwin_clangPP_coverage_x86_64;   // Darwin-clang++.coverage-x86_64    fconst:dev.Builddir.builddir/Darwin-clang++.coverage-x86_64
extern const char *  dev_Builddir_builddir_Darwin_clangPP_debug_x86_64;      // Darwin-clang++.debug-x86_64       fconst:dev.Builddir.builddir/Darwin-clang++.debug-x86_64
extern const char *  dev_Builddir_builddir_Darwin_clangPP_profile_x86_64;    // Darwin-clang++.profile-x86_64     fconst:dev.Builddir.builddir/Darwin-clang++.profile-x86_64
extern const char *  dev_Builddir_builddir_Darwin_clangPP_release_x86_64;    // Darwin-clang++.release-x86_64     fconst:dev.Builddir.builddir/Darwin-clang++.release-x86_64
extern const char *  dev_Builddir_builddir_FreeBSD_clangPP_coverage_amd64;   // FreeBSD-clang++.coverage-amd64    fconst:dev.Builddir.builddir/FreeBSD-clang++.coverage-amd64
extern const char *  dev_Builddir_builddir_FreeBSD_clangPP_debug_amd64;      // FreeBSD-clang++.debug-amd64       fconst:dev.Builddir.builddir/FreeBSD-clang++.debug-amd64
extern const char *  dev_Builddir_builddir_FreeBSD_clangPP_profile_amd64;    // FreeBSD-clang++.profile-amd64     fconst:dev.Builddir.builddir/FreeBSD-clang++.profile-amd64
extern const char *  dev_Builddir_builddir_FreeBSD_clangPP_release_amd64;    // FreeBSD-clang++.release-amd64     fconst:dev.Builddir.builddir/FreeBSD-clang++.release-amd64
extern const char *  dev_Builddir_builddir_Linux_gPP_9_coverage_x86_64;      // Linux-g++-9.coverage-x86_64       fconst:dev.Builddir.builddir/Linux-g++-9.coverage-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_9_debug_x86_64;         // Linux-g++-9.debug-x86_64          fconst:dev.Builddir.builddir/Linux-g++-9.debug-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_9_profile_x86_64;       // Linux-g++-9.profile-x86_64        fconst:dev.Builddir.builddir/Linux-g++-9.profile-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_9_release_x86_64;       // Linux-g++-9.release-x86_64        fconst:dev.Builddir.builddir/Linux-g++-9.release-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_coverage_x86_64;        // Linux-g++.coverage-x86_64         fconst:dev.Builddir.builddir/Linux-g++.coverage-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_debug_x86_64;           // Linux-g++.debug-x86_64            fconst:dev.Builddir.builddir/Linux-g++.debug-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_profile_x86_64;         // Linux-g++.profile-x86_64          fconst:dev.Builddir.builddir/Linux-g++.profile-x86_64
extern const char *  dev_Builddir_builddir_Linux_gPP_release_x86_64;         // Linux-g++.release-x86_64          fconst:dev.Builddir.builddir/Linux-g++.release-x86_64
extern const char *  dev_Cfg_cfg_;           //             fconst:dev.Cfg.cfg/
extern const char *  dev_Cfg_cfg_coverage;   // coverage    fconst:dev.Cfg.cfg/coverage
extern const char *  dev_Cfg_cfg_debug;      // debug       fconst:dev.Cfg.cfg/debug
extern const char *  dev_Cfg_cfg_profile;    // profile     fconst:dev.Cfg.cfg/profile
extern const char *  dev_Cfg_cfg_release;    // release     fconst:dev.Cfg.cfg/release
extern const char *  dev_Compiler_compiler_;          //            fconst:dev.Compiler.compiler/
extern const char *  dev_Compiler_compiler_cl;        // cl         fconst:dev.Compiler.compiler/cl
extern const char *  dev_Compiler_compiler_clangPP;   // clang++    fconst:dev.Compiler.compiler/clang++
extern const char *  dev_Compiler_compiler_gPP;       // g++        fconst:dev.Compiler.compiler/g++
extern const char *  dev_Compiler_compiler_gPP_9;     // g++-9      fconst:dev.Compiler.compiler/g++-9

// --- dev_Covline_flag_Enum

enum dev_Covline_flag_Enum {          // dev.Covline.flag
     dev_Covline_flag_N       = 'N'   // Non-executable
    ,dev_Covline_flag_E       = 'E'   // Executable
    ,dev_Covline_flag_P       = 'P'   // Executable, partially executed
};

enum { dev_Covline_flag_Enum_N = 3 };


// --- dev_FieldIdEnum

enum dev_FieldIdEnum {                 // dev.FieldId.value
     dev_FieldId_arch           = 0
    ,dev_FieldId_comment        = 1
    ,dev_FieldId_badline        = 2
    ,dev_FieldId_expr           = 3
    ,dev_FieldId_targsrc_regx   = 4
    ,dev_FieldId_builddir       = 5
    ,dev_FieldId_uname          = 6
    ,dev_FieldId_compiler       = 7
    ,dev_FieldId_cfg            = 8
    ,dev_FieldId_suffix         = 9
    ,dev_FieldId_ranlib         = 10
    ,dev_FieldId_ar             = 11
    ,dev_FieldId_link           = 12
    ,dev_FieldId_libext         = 13
    ,dev_FieldId_exeext         = 14
    ,dev_FieldId_pchext         = 15
    ,dev_FieldId_objext         = 16
    ,dev_FieldId_rc             = 17
    ,dev_FieldId_copyright      = 18
    ,dev_FieldId_dflt           = 19
    ,dev_FieldId_covfile        = 20
    ,dev_FieldId_total          = 21
    ,dev_FieldId_nonexe         = 22
    ,dev_FieldId_exe            = 23
    ,dev_FieldId_exer           = 24
    ,dev_FieldId_hit            = 25
    ,dev_FieldId_cov            = 26
    ,dev_FieldId_covline        = 27
    ,dev_FieldId_src            = 28
    ,dev_FieldId_line           = 29
    ,dev_FieldId_flag           = 30
    ,dev_FieldId_text           = 31
    ,dev_FieldId_covtarget      = 32
    ,dev_FieldId_edaction       = 33
    ,dev_FieldId_edacttype      = 34
    ,dev_FieldId_name           = 35
    ,dev_FieldId_needamc        = 36
    ,dev_FieldId_gitfile        = 37
    ,dev_FieldId_ext            = 38
    ,dev_FieldId_gitinfo        = 39
    ,dev_FieldId_author         = 40
    ,dev_FieldId_compver        = 41
    ,dev_FieldId_package        = 42
    ,dev_FieldId_hilite         = 43
    ,dev_FieldId_color          = 44
    ,dev_FieldId_htmlentity     = 45
    ,dev_FieldId_code           = 46
    ,dev_FieldId_include        = 47
    ,dev_FieldId_srcfile        = 48
    ,dev_FieldId_filename       = 49
    ,dev_FieldId_sys            = 50
    ,dev_FieldId_license        = 51
    ,dev_FieldId_nlongline      = 52
    ,dev_FieldId_longestline    = 53
    ,dev_FieldId_nbadws         = 54
    ,dev_FieldId_maxws          = 55
    ,dev_FieldId_nlongfunc      = 56
    ,dev_FieldId_longestfunc    = 57
    ,dev_FieldId_nmysteryfunc   = 58
    ,dev_FieldId_badness        = 59
    ,dev_FieldId_mdsection      = 60
    ,dev_FieldId_match          = 61
    ,dev_FieldId_path           = 62
    ,dev_FieldId_genlist        = 63
    ,dev_FieldId_strict         = 64
    ,dev_FieldId_opt_type       = 65
    ,dev_FieldId_sep            = 66
    ,dev_FieldId_baseref        = 67
    ,dev_FieldId_origin         = 68
    ,dev_FieldId_pkgdep         = 69
    ,dev_FieldId_parent         = 70
    ,dev_FieldId_soft           = 71
    ,dev_FieldId_pkgkey         = 72
    ,dev_FieldId_key            = 73
    ,dev_FieldId_inl            = 74
    ,dev_FieldId_sandbox        = 75
    ,dev_FieldId_filter         = 76
    ,dev_FieldId_sbpath         = 77
    ,dev_FieldId_syscmd         = 78
    ,dev_FieldId_execkey        = 79
    ,dev_FieldId_command        = 80
    ,dev_FieldId_pid            = 81
    ,dev_FieldId_status         = 82
    ,dev_FieldId_nprereq        = 83
    ,dev_FieldId_fail_prereq    = 84
    ,dev_FieldId_completed      = 85
    ,dev_FieldId_maxtime        = 86
    ,dev_FieldId_syscmddep      = 87
    ,dev_FieldId_child          = 88
    ,dev_FieldId_syslib         = 89
    ,dev_FieldId_targdep        = 90
    ,dev_FieldId_target         = 91
    ,dev_FieldId_targsrc        = 92
    ,dev_FieldId_targsyslib     = 93
    ,dev_FieldId_cov_min        = 94
    ,dev_FieldId_maxerr         = 95
    ,dev_FieldId_timefmt        = 96
    ,dev_FieldId_dirname        = 97
    ,dev_FieldId_tool_opt       = 98
    ,dev_FieldId_opt            = 99
    ,dev_FieldId_sortfld        = 100
    ,dev_FieldId_field          = 101
    ,dev_FieldId_value          = 102
};

enum { dev_FieldIdEnum_N = 103 };

extern const char *  dev_License_license_;      //        fconst:dev.License.license/
extern const char *  dev_License_license_GPL;   // GPL    fconst:dev.License.license/GPL
extern const char *  dev_Sandbox_sandbox_abt_md;       // abt_md        fconst:dev.Sandbox.sandbox/abt_md
extern const char *  dev_Sandbox_sandbox_acr_ed;       // acr_ed        fconst:dev.Sandbox.sandbox/acr_ed
extern const char *  dev_Sandbox_sandbox_amc;          // amc           fconst:dev.Sandbox.sandbox/amc
extern const char *  dev_Sandbox_sandbox_amc_gc;       // amc_gc        fconst:dev.Sandbox.sandbox/amc_gc
extern const char *  dev_Sandbox_sandbox_apm_base;     // apm-base      fconst:dev.Sandbox.sandbox/apm-base
extern const char *  dev_Sandbox_sandbox_apm_theirs;   // apm-theirs    fconst:dev.Sandbox.sandbox/apm-theirs
extern const char *  dev_Sandbox_sandbox_atf_ci;       // atf_ci        fconst:dev.Sandbox.sandbox/atf_ci
extern const char *  dev_Sandbox_sandbox_atf_ci_apm;   // atf_ci-apm    fconst:dev.Sandbox.sandbox/atf_ci-apm
extern const char *  dev_Sandbox_sandbox_atf_fuzz;     // atf_fuzz      fconst:dev.Sandbox.sandbox/atf_fuzz
namespace dev { // gen:ns_pkeytypedef
    typedef algo::Smallstr50 ArchPkey;
    typedef algo::Smallstr50 BadlinePkey;
    typedef algo::Smallstr50 BuilddirPkey;
    typedef algo::Smallstr50 CfgPkey;
    typedef algo::Smallstr50 CompilerPkey;
    typedef algo::Smallstr50 CopyrightPkey;
    typedef algo::Smallstr200 CovlinePkey;
    typedef algo::Smallstr50 EdactionPkey;
    typedef algo::Smallstr50 EdacttypePkey;
    typedef algo::Smallstr200 GitfilePkey;
    typedef algo::Smallstr40 GitinfoPkey;
    typedef algo::Smallstr50 HilitePkey;
    typedef algo::Smallstr50 HtmlentityPkey;
    typedef algo::Smallstr200 IncludePkey;
    typedef algo::Smallstr50 LicensePkey;
    typedef algo::Smallstr50 MdsectionPkey;
    typedef algo::Smallstr50 OptTypePkey;
    typedef algo::Smallstr50 PackagePkey;
    typedef algo::Smallstr100 PkgdepPkey;
    typedef algo::Smallstr150 PkgkeyPkey;
    typedef algo::Smallstr50 SandboxPkey;
    typedef algo::Smallstr50 SbpathPkey;
    typedef algo::Smallstr200 SrcfilePkey;
    typedef i64 SyscmdPkey;
    typedef algo::RspaceStr16 SyscmddepPkey;
    typedef algo::Smallstr50 SyslibPkey;
    typedef algo::Smallstr50 TargdepPkey;
    typedef algo::Smallstr16 TargetPkey;
    typedef algo::Smallstr100 TargsrcPkey;
    typedef algo::Smallstr50 TargsyslibPkey;
    typedef algo::Smallstr100 TimefmtPkey;
    typedef algo::Smallstr100 ToolOptPkey;
    typedef algo::Smallstr50 UnamePkey;
} // gen:ns_pkeytypedef
namespace dev { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace dev { struct Arch; }
namespace dev { struct Badline; }
namespace dev { struct Builddir; }
namespace dev { struct Cfg; }
namespace dev { struct Compiler; }
namespace dev { struct Copyright; }
namespace dev { struct Covfile; }
namespace dev { struct Covline; }
namespace dev { struct Covtarget; }
namespace dev { struct Edaction; }
namespace dev { struct Edacttype; }
namespace dev { struct FieldId; }
namespace dev { struct Gitfile; }
namespace dev { struct Gitinfo; }
namespace dev { struct Hilite; }
namespace dev { struct Htmlentity; }
namespace dev { struct Include; }
namespace dev { struct License; }
namespace dev { struct Linelim; }
namespace dev { struct Mdsection; }
namespace dev { struct Msgfile; }
namespace dev { struct Noindent; }
namespace dev { struct OptType; }
namespace dev { struct Package; }
namespace dev { struct Pkgdep; }
namespace dev { struct Pkgkey; }
namespace dev { struct Readme; }
namespace dev { struct Sandbox; }
namespace dev { struct Sbpath; }
namespace dev { struct Scriptfile; }
namespace dev { struct Srcfile; }
namespace dev { struct Syscmd; }
namespace dev { struct Syscmddep; }
namespace dev { struct Syslib; }
namespace dev { struct Targdep; }
namespace dev { struct Target; }
namespace dev { struct Targsrc; }
namespace dev { struct Targsyslib; }
namespace dev { struct Tgtcov; }
namespace dev { struct Timefmt; }
namespace dev { struct ToolOpt; }
namespace dev { struct Uname; }
namespace dev { struct Unstablefld; }
namespace dev { // gen:ns_print_struct

// --- dev.Arch
struct Arch { // dev.Arch: System architecture
    algo::Smallstr50   arch;      //
    algo::Comment      comment;   //
    explicit Arch(const algo::strptr&            in_arch
        ,const algo::Comment&           in_comment);
    Arch();
};

// func:dev.Arch..ReadFieldMaybe
bool                 Arch_ReadFieldMaybe(dev::Arch& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Arch from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Arch..ReadStrptrMaybe
bool                 Arch_ReadStrptrMaybe(dev::Arch &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Arch.String  printfmt:Tuple
// func:dev.Arch..Print
void                 Arch_Print(dev::Arch& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Badline
struct Badline { // dev.Badline: Regex of a dubious source code line
    algo::Smallstr50    badline;        //
    algo::Smallstr200   expr;           //
    algo::Smallstr50    targsrc_regx;   //
    algo::Comment       comment;        //
    Badline();
};

// func:dev.Badline..ReadFieldMaybe
bool                 Badline_ReadFieldMaybe(dev::Badline& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Badline from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Badline..ReadStrptrMaybe
bool                 Badline_ReadStrptrMaybe(dev::Badline &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Badline.String  printfmt:Tuple
// func:dev.Badline..Print
void                 Badline_Print(dev::Badline& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Builddir
struct Builddir { // dev.Builddir: Directory where object files/executables go. Determines compile/link options
    algo::Smallstr50   builddir;   // Primary key - uname.compiler.cfg-arch
    algo::Comment      comment;    //
    Builddir();
};

// func:dev.Builddir.uname.Get
algo::Smallstr50     uname_Get(dev::Builddir& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Builddir.uname.Get2
algo::Smallstr50     Builddir_uname_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Builddir.compiler.Get
algo::Smallstr50     compiler_Get(dev::Builddir& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Builddir.compiler.Get2
algo::Smallstr50     Builddir_compiler_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Builddir.cfg.Get
algo::Smallstr50     cfg_Get(dev::Builddir& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Builddir.cfg.Get2
algo::Smallstr50     Builddir_cfg_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Builddir.arch.Get
algo::Smallstr50     arch_Get(dev::Builddir& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Builddir.arch.Get2
algo::Smallstr50     Builddir_arch_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Builddir..Concat_uname_compiler_cfg_arch
tempstr              Builddir_Concat_uname_compiler_cfg_arch( const algo::strptr& uname ,const algo::strptr& compiler ,const algo::strptr& cfg ,const algo::strptr& arch );
// func:dev.Builddir..ReadFieldMaybe
bool                 Builddir_ReadFieldMaybe(dev::Builddir& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Builddir from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Builddir..ReadStrptrMaybe
bool                 Builddir_ReadStrptrMaybe(dev::Builddir &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Builddir.String  printfmt:Tuple
// func:dev.Builddir..Print
void                 Builddir_Print(dev::Builddir& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Cfg
struct Cfg { // dev.Cfg: Compiler configuration
    algo::Smallstr50   cfg;       //
    algo::Smallstr5    suffix;    //
    algo::Comment      comment;   //
    explicit Cfg(const algo::strptr&            in_cfg
        ,const algo::strptr&            in_suffix
        ,const algo::Comment&           in_comment);
    Cfg();
};

// func:dev.Cfg..ReadFieldMaybe
bool                 Cfg_ReadFieldMaybe(dev::Cfg& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Cfg from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Cfg..ReadStrptrMaybe
bool                 Cfg_ReadStrptrMaybe(dev::Cfg &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Cfg.String  printfmt:Tuple
// func:dev.Cfg..Print
void                 Cfg_Print(dev::Cfg& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Compiler
struct Compiler { // dev.Compiler: One of the known compilers
    algo::Smallstr50   compiler;   //
    algo::Smallstr50   ranlib;     //
    algo::Smallstr50   ar;         //
    algo::Smallstr50   link;       //
    algo::Smallstr50   libext;     //
    algo::Smallstr20   exeext;     //
    algo::Smallstr20   pchext;     //
    algo::Smallstr20   objext;     //
    algo::Smallstr50   rc;         //
    algo::Comment      comment;    //
    explicit Compiler(const algo::strptr&            in_compiler
        ,const algo::strptr&            in_ranlib
        ,const algo::strptr&            in_ar
        ,const algo::strptr&            in_link
        ,const algo::strptr&            in_libext
        ,const algo::strptr&            in_exeext
        ,const algo::strptr&            in_pchext
        ,const algo::strptr&            in_objext
        ,const algo::strptr&            in_rc
        ,const algo::Comment&           in_comment);
    Compiler();
};

// func:dev.Compiler..ReadFieldMaybe
bool                 Compiler_ReadFieldMaybe(dev::Compiler& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Compiler from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Compiler..ReadStrptrMaybe
bool                 Compiler_ReadStrptrMaybe(dev::Compiler &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Compiler.String  printfmt:Tuple
// func:dev.Compiler..Print
void                 Compiler_Print(dev::Compiler& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Copyright
struct Copyright { // dev.Copyright: Copyrighting entity
    algo::Smallstr50   copyright;   //
    bool               dflt;        //   false
    algo::Comment      comment;     //
    Copyright();
};

// func:dev.Copyright..ReadFieldMaybe
bool                 Copyright_ReadFieldMaybe(dev::Copyright& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Copyright from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Copyright..ReadStrptrMaybe
bool                 Copyright_ReadStrptrMaybe(dev::Copyright &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Copyright..Init
void                 Copyright_Init(dev::Copyright& parent);
// print string representation of ROW to string STR
// cfmt:dev.Copyright.String  printfmt:Tuple
// func:dev.Copyright..Print
void                 Copyright_Print(dev::Copyright& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Covfile
struct Covfile { // dev.Covfile
    algo::Smallstr200   covfile;   // Source file
    u32                 total;     //   0  Total lines
    u32                 nonexe;    //   0  Non-executable lines
    u32                 exe;       //   0  Executable lines
    algo::U32Dec2       exer;      // Percentage of executable lines
    u32                 hit;       //   0  Exercised lines
    algo::U32Dec2       cov;       // Line coverage
    Covfile();
};

// func:dev.Covfile..ReadFieldMaybe
bool                 Covfile_ReadFieldMaybe(dev::Covfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Covfile from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Covfile..ReadStrptrMaybe
bool                 Covfile_ReadStrptrMaybe(dev::Covfile &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Covfile..Init
void                 Covfile_Init(dev::Covfile& parent);
// print string representation of ROW to string STR
// cfmt:dev.Covfile.String  printfmt:Tuple
// func:dev.Covfile..Print
void                 Covfile_Print(dev::Covfile& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Covline
struct Covline { // dev.Covline
    algo::Smallstr200   covline;   // file:line
    char                flag;      //   'N'  Flag
    u32                 hit;       //   0  Number of hits
    algo::cstring       text;      // Line text
    Covline();
};

// func:dev.Covline.src.Get
algo::Smallstr200    src_Get(dev::Covline& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Covline.src.Get2
algo::Smallstr200    Covline_src_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Covline.line.Get
u32                  line_Get(dev::Covline& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Covline.line.Get2
u32                  Covline_line_Get(algo::strptr arg) __attribute__((nothrow));

// Get value of field as enum type
// func:dev.Covline.flag.GetEnum
dev_Covline_flag_Enum flag_GetEnum(const dev::Covline& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:dev.Covline.flag.SetEnum
void                 flag_SetEnum(dev::Covline& parent, dev_Covline_flag_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:dev.Covline.flag.ToCstr
const char*          flag_ToCstr(const dev::Covline& parent) __attribute__((nothrow));
// Convert flag to a string. First, attempt conversion to a known string.
// If no string matches, print flag as a numeric value.
// func:dev.Covline.flag.Print
void                 flag_Print(const dev::Covline& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:dev.Covline.flag.SetStrptrMaybe
bool                 flag_SetStrptrMaybe(dev::Covline& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:dev.Covline.flag.SetStrptr
void                 flag_SetStrptr(dev::Covline& parent, algo::strptr rhs, dev_Covline_flag_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:dev.Covline.flag.ReadStrptrMaybe
bool                 flag_ReadStrptrMaybe(dev::Covline& parent, algo::strptr rhs) __attribute__((nothrow));

// func:dev.Covline..Concat_src_line
tempstr              Covline_Concat_src_line( const algo::strptr& src ,u32 line );
// func:dev.Covline..ReadFieldMaybe
bool                 Covline_ReadFieldMaybe(dev::Covline& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Covline from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Covline..ReadStrptrMaybe
bool                 Covline_ReadStrptrMaybe(dev::Covline &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Covline..Init
void                 Covline_Init(dev::Covline& parent);
// print string representation of ROW to string STR
// cfmt:dev.Covline.String  printfmt:Tuple
// func:dev.Covline..Print
void                 Covline_Print(dev::Covline& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Covtarget
struct Covtarget { // dev.Covtarget
    algo::Smallstr16   covtarget;   // Target
    u32                total;       //   0  Total lines
    u32                nonexe;      //   0  Non-executable lines
    u32                exe;         //   0  Executable lines
    algo::U32Dec2      exer;        // Percentage of executable lines
    u32                hit;         //   0  Exercised lines
    algo::U32Dec2      cov;         // Line coverage
    Covtarget();
};

// func:dev.Covtarget..ReadFieldMaybe
bool                 Covtarget_ReadFieldMaybe(dev::Covtarget& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Covtarget from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Covtarget..ReadStrptrMaybe
bool                 Covtarget_ReadStrptrMaybe(dev::Covtarget &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Covtarget..Init
void                 Covtarget_Init(dev::Covtarget& parent);
// print string representation of ROW to string STR
// cfmt:dev.Covtarget.String  printfmt:Tuple
// func:dev.Covtarget..Print
void                 Covtarget_Print(dev::Covtarget& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Edaction
struct Edaction { // dev.Edaction: acr_ed editing action (only one can exist at a time)
    algo::Smallstr50   edaction;   //
    bool               needamc;    //   false
    algo::Comment      comment;    //
    Edaction();
};

// func:dev.Edaction.edacttype.Get
algo::Smallstr50     edacttype_Get(dev::Edaction& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Edaction.edacttype.Get2
algo::Smallstr50     Edaction_edacttype_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Edaction.name.Get
algo::Smallstr50     name_Get(dev::Edaction& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Edaction.name.Get2
algo::Smallstr50     Edaction_name_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Edaction..Concat_edacttype_name
tempstr              Edaction_Concat_edacttype_name( const algo::strptr& edacttype ,const algo::strptr& name );
// func:dev.Edaction..ReadFieldMaybe
bool                 Edaction_ReadFieldMaybe(dev::Edaction& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Edaction from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Edaction..ReadStrptrMaybe
bool                 Edaction_ReadStrptrMaybe(dev::Edaction &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Edaction..Init
void                 Edaction_Init(dev::Edaction& parent);
// print string representation of ROW to string STR
// cfmt:dev.Edaction.String  printfmt:Tuple
// func:dev.Edaction..Print
void                 Edaction_Print(dev::Edaction& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Edacttype
struct Edacttype { // dev.Edacttype: acr_ed editing action type
    algo::Smallstr50   edacttype;   //
    algo::Comment      comment;     //
    Edacttype();
};

// func:dev.Edacttype..ReadFieldMaybe
bool                 Edacttype_ReadFieldMaybe(dev::Edacttype& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Edacttype from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Edacttype..ReadStrptrMaybe
bool                 Edacttype_ReadStrptrMaybe(dev::Edacttype &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Edacttype.String  printfmt:Tuple
// func:dev.Edacttype..Print
void                 Edacttype_Print(dev::Edacttype& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.FieldId
#pragma pack(push,1)
struct FieldId { // dev.FieldId: Field read helper
    i32   value;   //   -1
    inline operator dev_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(dev_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:dev.FieldId.value.GetEnum
dev_FieldIdEnum      value_GetEnum(const dev::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:dev.FieldId.value.SetEnum
void                 value_SetEnum(dev::FieldId& parent, dev_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:dev.FieldId.value.ToCstr
const char*          value_ToCstr(const dev::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:dev.FieldId.value.Print
void                 value_Print(const dev::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:dev.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(dev::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:dev.FieldId.value.SetStrptr
void                 value_SetStrptr(dev::FieldId& parent, algo::strptr rhs, dev_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:dev.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(dev::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of dev::FieldId from an ascii string.
// The format of the string is the format of the dev::FieldId's only field
// func:dev.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(dev::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.FieldId..Init
void                 FieldId_Init(dev::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:dev.FieldId.String  printfmt:Raw
// func:dev.FieldId..Print
void                 FieldId_Print(dev::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Gitfile
struct Gitfile { // dev.Gitfile: File managed by git
    algo::Smallstr200   gitfile;   //
    explicit Gitfile(const algo::strptr&            in_gitfile);
    Gitfile();
};

// func:dev.Gitfile.ext.Get
algo::Smallstr50     ext_Get(dev::Gitfile& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Gitfile.ext.Get2
algo::Smallstr50     Gitfile_ext_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Gitfile..ReadFieldMaybe
bool                 Gitfile_ReadFieldMaybe(dev::Gitfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Gitfile from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Gitfile..ReadStrptrMaybe
bool                 Gitfile_ReadStrptrMaybe(dev::Gitfile &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Gitfile.String  printfmt:Tuple
// func:dev.Gitfile..Print
void                 Gitfile_Print(dev::Gitfile& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Gitinfo
struct Gitinfo { // dev.Gitinfo
    algo::Smallstr40   gitinfo;   //
    algo::Smallstr50   author;    //
    algo::Smallstr40   cfg;       //
    algo::Smallstr20   compver;   //
    algo::Smallstr40   package;   //
    algo::Comment      comment;   //
    explicit Gitinfo(const algo::strptr&            in_gitinfo
        ,const algo::strptr&            in_author
        ,const algo::strptr&            in_cfg
        ,const algo::strptr&            in_compver
        ,const algo::strptr&            in_package
        ,const algo::Comment&           in_comment);
    Gitinfo();
};

// func:dev.Gitinfo..ReadFieldMaybe
bool                 Gitinfo_ReadFieldMaybe(dev::Gitinfo& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Gitinfo from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Gitinfo..ReadStrptrMaybe
bool                 Gitinfo_ReadStrptrMaybe(dev::Gitinfo &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Gitinfo.String  printfmt:Tuple
// func:dev.Gitinfo..Print
void                 Gitinfo_Print(dev::Gitinfo& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Hilite
struct Hilite { // dev.Hilite: Mapping of perl regx->hilite pattern
    algo::Smallstr50   hilite;    //
    algo::Smallstr50   color;     //
    algo::Comment      comment;   //
    Hilite();
};

// func:dev.Hilite..ReadFieldMaybe
bool                 Hilite_ReadFieldMaybe(dev::Hilite& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Hilite from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Hilite..ReadStrptrMaybe
bool                 Hilite_ReadStrptrMaybe(dev::Hilite &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Hilite.String  printfmt:Tuple
// func:dev.Hilite..Print
void                 Hilite_Print(dev::Hilite& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Htmlentity
struct Htmlentity { // dev.Htmlentity: Known HTML entity strings & codes
    algo::Smallstr50   htmlentity;   //
    i32                code;         //   0
    algo::Comment      comment;      //
    Htmlentity();
};

// func:dev.Htmlentity..ReadFieldMaybe
bool                 Htmlentity_ReadFieldMaybe(dev::Htmlentity& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Htmlentity from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Htmlentity..ReadStrptrMaybe
bool                 Htmlentity_ReadStrptrMaybe(dev::Htmlentity &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Htmlentity..Init
void                 Htmlentity_Init(dev::Htmlentity& parent);
// print string representation of ROW to string STR
// cfmt:dev.Htmlentity.String  printfmt:Tuple
// func:dev.Htmlentity..Print
void                 Htmlentity_Print(dev::Htmlentity& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Include
struct Include { // dev.Include: A site where one file includes another
    algo::Smallstr200   include;   //
    bool                sys;       //   false
    algo::Comment       comment;   //
    Include();
};

// func:dev.Include.srcfile.Get
algo::Smallstr200    srcfile_Get(dev::Include& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Include.srcfile.Get2
algo::Smallstr200    Include_srcfile_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Include.filename.Get
algo::Smallstr200    filename_Get(dev::Include& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Include.filename.Get2
algo::Smallstr200    Include_filename_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Include..Concat_srcfile_filename
tempstr              Include_Concat_srcfile_filename( const algo::strptr& srcfile ,const algo::strptr& filename );
// func:dev.Include..ReadFieldMaybe
bool                 Include_ReadFieldMaybe(dev::Include& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Include from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Include..ReadStrptrMaybe
bool                 Include_ReadStrptrMaybe(dev::Include &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Include..Init
void                 Include_Init(dev::Include& parent);
// print string representation of ROW to string STR
// cfmt:dev.Include.String  printfmt:Tuple
// func:dev.Include..Print
void                 Include_Print(dev::Include& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.License
struct License { // dev.License: Source code license
    algo::Smallstr50   license;   //
    algo::Comment      comment;   //
    License();
};

// func:dev.License..ReadFieldMaybe
bool                 License_ReadFieldMaybe(dev::License& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::License from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.License..ReadStrptrMaybe
bool                 License_ReadStrptrMaybe(dev::License &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.License.String  printfmt:Tuple
// func:dev.License..Print
void                 License_Print(dev::License& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Linelim
struct Linelim { // dev.Linelim
    algo::Smallstr200   gitfile;        //
    u32                 nlongline;      //   0
    u32                 longestline;    //   0
    u32                 nbadws;         //   0
    u32                 maxws;          //   0
    u32                 nlongfunc;      //   0
    u32                 longestfunc;    //   0
    u32                 nmysteryfunc;   //   0
    algo::Smallstr50    badness;        //
    Linelim();
};

// func:dev.Linelim..ReadFieldMaybe
bool                 Linelim_ReadFieldMaybe(dev::Linelim& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Linelim from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Linelim..ReadStrptrMaybe
bool                 Linelim_ReadStrptrMaybe(dev::Linelim &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Linelim..Init
void                 Linelim_Init(dev::Linelim& parent);
// print string representation of ROW to string STR
// cfmt:dev.Linelim.String  printfmt:Tuple
// func:dev.Linelim..Print
void                 Linelim_Print(dev::Linelim& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Mdsection
struct Mdsection { // dev.Mdsection: Template for updating a markdown file
    algo::Smallstr50    mdsection;   //
    algo::Smallstr200   match;       //
    algo::Smallstr100   path;        //
    algo::Smallstr50    genlist;     //
    algo::Comment       comment;     //
    Mdsection();
};

// func:dev.Mdsection..ReadFieldMaybe
bool                 Mdsection_ReadFieldMaybe(dev::Mdsection& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Mdsection from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Mdsection..ReadStrptrMaybe
bool                 Mdsection_ReadStrptrMaybe(dev::Mdsection &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Mdsection.String  printfmt:Tuple
// func:dev.Mdsection..Print
void                 Mdsection_Print(dev::Mdsection& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Msgfile
struct Msgfile { // dev.Msgfile: File in repo containing messages that should be normalized during CI
    algo::Smallstr200   gitfile;   // Name of file containing messages
    bool                strict;    //   false  Delete unrecognizable lines (except comments)
    algo::Comment       comment;   //
    Msgfile();
};

// func:dev.Msgfile..ReadFieldMaybe
bool                 Msgfile_ReadFieldMaybe(dev::Msgfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Msgfile from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Msgfile..ReadStrptrMaybe
bool                 Msgfile_ReadStrptrMaybe(dev::Msgfile &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Msgfile..Init
void                 Msgfile_Init(dev::Msgfile& parent);
// print string representation of ROW to string STR
// cfmt:dev.Msgfile.String  printfmt:Tuple
// func:dev.Msgfile..Print
void                 Msgfile_Print(dev::Msgfile& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Noindent
struct Noindent { // dev.Noindent: Indicates that a file should not be automatically indented
    algo::Smallstr200   gitfile;   //
    algo::Comment       comment;   //
    Noindent();
};

// func:dev.Noindent..ReadFieldMaybe
bool                 Noindent_ReadFieldMaybe(dev::Noindent& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Noindent from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Noindent..ReadStrptrMaybe
bool                 Noindent_ReadStrptrMaybe(dev::Noindent &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Noindent.String  printfmt:Tuple
// func:dev.Noindent..Print
void                 Noindent_Print(dev::Noindent& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.OptType
struct OptType { // dev.OptType: Type of option (used in tool_opt)
    algo::Smallstr50   opt_type;   //
    algo::RspaceStr4   sep;        //
    algo::Comment      comment;    //
    explicit OptType(const algo::strptr&            in_opt_type
        ,const algo::strptr&            in_sep
        ,const algo::Comment&           in_comment);
    OptType();
};

// func:dev.OptType..ReadFieldMaybe
bool                 OptType_ReadFieldMaybe(dev::OptType& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::OptType from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.OptType..ReadStrptrMaybe
bool                 OptType_ReadStrptrMaybe(dev::OptType &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.OptType.String  printfmt:Tuple
// func:dev.OptType..Print
void                 OptType_Print(dev::OptType& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Package
struct Package { // dev.Package: OpenACR package
    algo::Smallstr50    package;   // Package name
    algo::Smallstr50    baseref;   // Base gitref of installed package
    algo::Smallstr200   origin;    // Source URL for published package
    algo::Comment       comment;   //
    explicit Package(const algo::strptr&            in_package
        ,const algo::strptr&            in_baseref
        ,const algo::strptr&            in_origin
        ,const algo::Comment&           in_comment);
    Package();
};

// func:dev.Package..ReadFieldMaybe
bool                 Package_ReadFieldMaybe(dev::Package& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Package from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Package..ReadStrptrMaybe
bool                 Package_ReadStrptrMaybe(dev::Package &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Package.String  printfmt:Tuple
// func:dev.Package..Print
void                 Package_Print(dev::Package& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Pkgdep
struct Pkgdep { // dev.Pkgdep: OpenACR Package dependency
    algo::Smallstr100   pkgdep;    //
    bool                soft;      //   false  Soft dependency: affects package ordering but not forced update
    algo::Comment       comment;   //
    explicit Pkgdep(const algo::strptr&            in_pkgdep
        ,bool                           in_soft
        ,const algo::Comment&           in_comment);
    Pkgdep();
};

// func:dev.Pkgdep.package.Get
algo::Smallstr50     package_Get(dev::Pkgdep& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Pkgdep.package.Get2
algo::Smallstr50     Pkgdep_package_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Pkgdep.parent.Get
algo::Smallstr50     parent_Get(dev::Pkgdep& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Pkgdep.parent.Get2
algo::Smallstr50     Pkgdep_parent_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Pkgdep..Concat_package_parent
tempstr              Pkgdep_Concat_package_parent( const algo::strptr& package ,const algo::strptr& parent );
// func:dev.Pkgdep..ReadFieldMaybe
bool                 Pkgdep_ReadFieldMaybe(dev::Pkgdep& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Pkgdep from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Pkgdep..ReadStrptrMaybe
bool                 Pkgdep_ReadStrptrMaybe(dev::Pkgdep &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Pkgdep..Init
void                 Pkgdep_Init(dev::Pkgdep& parent);
// print string representation of ROW to string STR
// cfmt:dev.Pkgdep.String  printfmt:Tuple
// func:dev.Pkgdep..Print
void                 Pkgdep_Print(dev::Pkgdep& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Pkgkey
struct Pkgkey { // dev.Pkgkey: Keys belonging to the OpenACR package
    algo::Smallstr150   pkgkey;    //
    algo::Comment       comment;   //
    explicit Pkgkey(const algo::strptr&            in_pkgkey
        ,const algo::Comment&           in_comment);
    Pkgkey();
};

// func:dev.Pkgkey.package.Get
algo::Smallstr50     package_Get(dev::Pkgkey& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Pkgkey.package.Get2
algo::Smallstr50     Pkgkey_package_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Pkgkey.key.Get
algo::Smallstr150    key_Get(dev::Pkgkey& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Pkgkey.key.Get2
algo::Smallstr150    Pkgkey_key_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Pkgkey..Concat_package_key
tempstr              Pkgkey_Concat_package_key( const algo::strptr& package ,const algo::strptr& key );
// func:dev.Pkgkey..ReadFieldMaybe
bool                 Pkgkey_ReadFieldMaybe(dev::Pkgkey& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Pkgkey from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Pkgkey..ReadStrptrMaybe
bool                 Pkgkey_ReadStrptrMaybe(dev::Pkgkey &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Pkgkey.String  printfmt:Tuple
// func:dev.Pkgkey..Print
void                 Pkgkey_Print(dev::Pkgkey& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Readme
struct Readme { // dev.Readme: File containing documentation
    algo::Smallstr200   gitfile;   //
    bool                inl;       //   false
    bool                sandbox;   //   false
    algo::Smallstr100   filter;    //
    algo::Comment       comment;   //
    explicit Readme(const algo::strptr&            in_gitfile
        ,bool                           in_inl
        ,bool                           in_sandbox
        ,const algo::strptr&            in_filter
        ,const algo::Comment&           in_comment);
    Readme();
};

// func:dev.Readme..ReadFieldMaybe
bool                 Readme_ReadFieldMaybe(dev::Readme& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Readme from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Readme..ReadStrptrMaybe
bool                 Readme_ReadStrptrMaybe(dev::Readme &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Readme..Init
void                 Readme_Init(dev::Readme& parent);
// print string representation of ROW to string STR
// cfmt:dev.Readme.String  printfmt:Tuple
// func:dev.Readme..Print
void                 Readme_Print(dev::Readme& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Sandbox
struct Sandbox { // dev.Sandbox: Registered sandbox
    algo::Smallstr50   sandbox;   //
    algo::Comment      comment;   //
    Sandbox();
};

// func:dev.Sandbox..ReadFieldMaybe
bool                 Sandbox_ReadFieldMaybe(dev::Sandbox& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Sandbox from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Sandbox..ReadStrptrMaybe
bool                 Sandbox_ReadStrptrMaybe(dev::Sandbox &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Sandbox.String  printfmt:Tuple
// func:dev.Sandbox..Print
void                 Sandbox_Print(dev::Sandbox& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Sbpath
struct Sbpath { // dev.Sbpath: Extra files to copy into the sandbox
    algo::Smallstr50   sbpath;    //
    algo::Comment      comment;   //
    Sbpath();
};

// func:dev.Sbpath..ReadFieldMaybe
bool                 Sbpath_ReadFieldMaybe(dev::Sbpath& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Sbpath from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Sbpath..ReadStrptrMaybe
bool                 Sbpath_ReadStrptrMaybe(dev::Sbpath &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Sbpath.String  printfmt:Tuple
// func:dev.Sbpath..Print
void                 Sbpath_Print(dev::Sbpath& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Scriptfile
struct Scriptfile { // dev.Scriptfile: Known script file
    algo::Smallstr200   gitfile;   //
    algo::Smallstr50    license;   //
    algo::Comment       comment;   //
    Scriptfile();
};

// func:dev.Scriptfile.name.Get
algo::Smallstr50     name_Get(dev::Scriptfile& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Scriptfile.name.Get2
algo::Smallstr50     Scriptfile_name_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Scriptfile..ReadFieldMaybe
bool                 Scriptfile_ReadFieldMaybe(dev::Scriptfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Scriptfile from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Scriptfile..ReadStrptrMaybe
bool                 Scriptfile_ReadStrptrMaybe(dev::Scriptfile &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Scriptfile.String  printfmt:Tuple
// func:dev.Scriptfile..Print
void                 Scriptfile_Print(dev::Scriptfile& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Srcfile
struct Srcfile { // dev.Srcfile: Source file or header (key is pathname)
    algo::Smallstr200   srcfile;   //
    Srcfile();
};

// func:dev.Srcfile.ext.Get
algo::Smallstr10     ext_Get(dev::Srcfile& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Srcfile.ext.Get2
algo::Smallstr10     Srcfile_ext_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Srcfile..ReadFieldMaybe
bool                 Srcfile_ReadFieldMaybe(dev::Srcfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Srcfile from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Srcfile..ReadStrptrMaybe
bool                 Srcfile_ReadStrptrMaybe(dev::Srcfile &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Srcfile.String  printfmt:Tuple
// func:dev.Srcfile..Print
void                 Srcfile_Print(dev::Srcfile& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Syscmd
struct Syscmd { // dev.Syscmd: System command to execute
    i64             syscmd;        //   0  Step number
    algo::cstring   command;       // Command to execute
    i32             pid;           //   0  PID, if running
    i32             status;        //   0  Exit status (if command has completed)
    i32             nprereq;       //   0  Number of live pre-requisites
    bool            fail_prereq;   //   false  Set if one of pre-requisites fails
    bool            completed;     //   false  Completed?
    i32             maxtime;       //   0  Optional max running time (used to use SIGALRM)
    explicit Syscmd(i64                            in_syscmd
        ,const algo::strptr&            in_command
        ,i32                            in_pid
        ,i32                            in_status
        ,i32                            in_nprereq
        ,bool                           in_fail_prereq
        ,bool                           in_completed
        ,i32                            in_maxtime);
    Syscmd();
};

// func:dev.Syscmd.execkey.Get
// this function is 'extrn' and implemented by user
i64                  execkey_Get(dev::Syscmd& parent) __attribute__((__warn_unused_result__, nothrow));

// func:dev.Syscmd..ReadFieldMaybe
bool                 Syscmd_ReadFieldMaybe(dev::Syscmd& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Syscmd from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Syscmd..ReadStrptrMaybe
bool                 Syscmd_ReadStrptrMaybe(dev::Syscmd &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Syscmd..Init
void                 Syscmd_Init(dev::Syscmd& parent);
// print string representation of ROW to string STR
// cfmt:dev.Syscmd.String  printfmt:Tuple
// func:dev.Syscmd..Print
void                 Syscmd_Print(dev::Syscmd& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Syscmddep
struct Syscmddep { // dev.Syscmddep: Dependency between two commands
    i64   child;    //   0
    i64   parent;   //   0
    explicit Syscmddep(i64                            in_child
        ,i64                            in_parent);
    Syscmddep();
};

// func:dev.Syscmddep.syscmddep.Get
// this function is 'extrn' and implemented by user
algo::RspaceStr16    syscmddep_Get(dev::Syscmddep& parent) __attribute__((__warn_unused_result__, nothrow));

// func:dev.Syscmddep..ReadFieldMaybe
bool                 Syscmddep_ReadFieldMaybe(dev::Syscmddep& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Syscmddep from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Syscmddep..ReadStrptrMaybe
bool                 Syscmddep_ReadStrptrMaybe(dev::Syscmddep &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Syscmddep..Init
void                 Syscmddep_Init(dev::Syscmddep& parent);
// print string representation of ROW to string STR
// cfmt:dev.Syscmddep.String  printfmt:Tuple
// func:dev.Syscmddep..Print
void                 Syscmddep_Print(dev::Syscmddep& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Syslib
struct Syslib { // dev.Syslib: Registered system library
    algo::Smallstr50   syslib;    //
    algo::Comment      comment;   //
    Syslib();
};

// func:dev.Syslib..ReadFieldMaybe
bool                 Syslib_ReadFieldMaybe(dev::Syslib& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Syslib from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Syslib..ReadStrptrMaybe
bool                 Syslib_ReadStrptrMaybe(dev::Syslib &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Syslib.String  printfmt:Tuple
// func:dev.Syslib..Print
void                 Syslib_Print(dev::Syslib& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Targdep
struct Targdep { // dev.Targdep: Dependency between targets
    algo::Smallstr50   targdep;   // Primary key - target.parent
    algo::Comment      comment;   //
    explicit Targdep(const algo::strptr&            in_targdep
        ,const algo::Comment&           in_comment);
    Targdep();
};

// func:dev.Targdep.target.Get
algo::Smallstr16     target_Get(dev::Targdep& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targdep.target.Get2
algo::Smallstr16     Targdep_target_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targdep.parent.Get
algo::Smallstr16     parent_Get(dev::Targdep& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targdep.parent.Get2
algo::Smallstr16     Targdep_parent_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targdep..Concat_target_parent
tempstr              Targdep_Concat_target_parent( const algo::strptr& target ,const algo::strptr& parent );
// func:dev.Targdep..ReadFieldMaybe
bool                 Targdep_ReadFieldMaybe(dev::Targdep& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Targdep from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Targdep..ReadStrptrMaybe
bool                 Targdep_ReadStrptrMaybe(dev::Targdep &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Targdep.String  printfmt:Tuple
// func:dev.Targdep..Print
void                 Targdep_Print(dev::Targdep& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Target
struct Target { // dev.Target: Build target
    algo::Smallstr16   target;   // Primary key - name of target
    explicit Target(const algo::strptr&            in_target);
    Target();
};

// func:dev.Target..ReadFieldMaybe
bool                 Target_ReadFieldMaybe(dev::Target& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Target from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Target..ReadStrptrMaybe
bool                 Target_ReadStrptrMaybe(dev::Target &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Target.String  printfmt:Tuple
// func:dev.Target..Print
void                 Target_Print(dev::Target& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Targsrc
struct Targsrc { // dev.Targsrc: List of sources for target
    algo::Smallstr100   targsrc;   //
    algo::Comment       comment;   //
    explicit Targsrc(const algo::strptr&            in_targsrc
        ,const algo::Comment&           in_comment);
    Targsrc();
};

// func:dev.Targsrc.target.Get
algo::Smallstr16     target_Get(dev::Targsrc& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsrc.target.Get2
algo::Smallstr16     Targsrc_target_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsrc.src.Get
algo::Smallstr200    src_Get(dev::Targsrc& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsrc.src.Get2
algo::Smallstr200    Targsrc_src_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsrc.ext.Get
algo::Smallstr10     ext_Get(dev::Targsrc& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsrc.ext.Get2
algo::Smallstr10     Targsrc_ext_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsrc..Concat_target_src
tempstr              Targsrc_Concat_target_src( const algo::strptr& target ,const algo::strptr& src );
// func:dev.Targsrc..ReadFieldMaybe
bool                 Targsrc_ReadFieldMaybe(dev::Targsrc& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Targsrc from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Targsrc..ReadStrptrMaybe
bool                 Targsrc_ReadStrptrMaybe(dev::Targsrc &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Targsrc.String  printfmt:Tuple
// func:dev.Targsrc..Print
void                 Targsrc_Print(dev::Targsrc& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Targsyslib
struct Targsyslib { // dev.Targsyslib: Use of system library by target
    algo::Smallstr50   targsyslib;   //
    algo::Comment      comment;      //
    Targsyslib();
};

// func:dev.Targsyslib.target.Get
algo::Smallstr16     target_Get(dev::Targsyslib& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsyslib.target.Get2
algo::Smallstr16     Targsyslib_target_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsyslib.syslib.Get
algo::Smallstr50     syslib_Get(dev::Targsyslib& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsyslib.syslib.Get2
algo::Smallstr50     Targsyslib_syslib_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsyslib.uname.Get
algo::Smallstr50     uname_Get(dev::Targsyslib& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.Targsyslib.uname.Get2
algo::Smallstr50     Targsyslib_uname_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.Targsyslib..Concat_uname_target_syslib
tempstr              Targsyslib_Concat_uname_target_syslib( const algo::strptr& uname ,const algo::strptr& target ,const algo::strptr& syslib );
// func:dev.Targsyslib..ReadFieldMaybe
bool                 Targsyslib_ReadFieldMaybe(dev::Targsyslib& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Targsyslib from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Targsyslib..ReadStrptrMaybe
bool                 Targsyslib_ReadStrptrMaybe(dev::Targsyslib &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Targsyslib.String  printfmt:Tuple
// func:dev.Targsyslib..Print
void                 Targsyslib_Print(dev::Targsyslib& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Tgtcov
struct Tgtcov { // dev.Tgtcov: Captured line coverate information by target
    algo::Smallstr16   target;    // Target
    algo::U32Dec2      cov_min;   // Minimal coverage limit
    algo::U32Dec2      maxerr;    // Tolerable error
    algo::Comment      comment;   //
    Tgtcov();
};

// func:dev.Tgtcov..ReadFieldMaybe
bool                 Tgtcov_ReadFieldMaybe(dev::Tgtcov& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Tgtcov from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Tgtcov..ReadStrptrMaybe
bool                 Tgtcov_ReadStrptrMaybe(dev::Tgtcov &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Tgtcov.String  printfmt:Tuple
// func:dev.Tgtcov..Print
void                 Tgtcov_Print(dev::Tgtcov& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Timefmt
struct Timefmt { // dev.Timefmt: Time formats supported by orgfile
    algo::Smallstr100   timefmt;   //
    bool                dirname;   //   false
    algo::Comment       comment;   //
    Timefmt();
};

// func:dev.Timefmt..ReadFieldMaybe
bool                 Timefmt_ReadFieldMaybe(dev::Timefmt& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Timefmt from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Timefmt..ReadStrptrMaybe
bool                 Timefmt_ReadStrptrMaybe(dev::Timefmt &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:dev.Timefmt..Init
void                 Timefmt_Init(dev::Timefmt& parent);
// print string representation of ROW to string STR
// cfmt:dev.Timefmt.String  printfmt:Tuple
// func:dev.Timefmt..Print
void                 Timefmt_Print(dev::Timefmt& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.ToolOpt
struct ToolOpt { // dev.ToolOpt: Compiler/linker options to use
    algo::Smallstr100   tool_opt;   // Primary key - uname.compiler-cfg.arch/target-opt_type:opt
    algo::Comment       comment;    //
    explicit ToolOpt(const algo::strptr&            in_tool_opt
        ,const algo::Comment&           in_comment);
    ToolOpt();
};

// func:dev.ToolOpt.uname.Get
algo::Smallstr50     uname_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.uname.Get2
algo::Smallstr50     ToolOpt_uname_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.compiler.Get
algo::Smallstr50     compiler_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.compiler.Get2
algo::Smallstr50     ToolOpt_compiler_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.cfg.Get
algo::Smallstr50     cfg_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.cfg.Get2
algo::Smallstr50     ToolOpt_cfg_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.arch.Get
algo::Smallstr50     arch_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.arch.Get2
algo::Smallstr50     ToolOpt_arch_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.target.Get
algo::Smallstr50     target_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.target.Get2
algo::Smallstr50     ToolOpt_target_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.opt_type.Get
algo::Smallstr50     opt_type_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.opt_type.Get2
algo::Smallstr50     ToolOpt_opt_type_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.opt.Get
algo::Smallstr100    opt_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.opt.Get2
algo::Smallstr100    ToolOpt_opt_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt.sortfld.Get
algo::Smallstr50     sortfld_Get(dev::ToolOpt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:dev.ToolOpt.sortfld.Get2
algo::Smallstr50     ToolOpt_sortfld_Get(algo::strptr arg) __attribute__((nothrow));

// func:dev.ToolOpt..Concat_uname_compiler_cfg_arch_target_opt_type_opt
tempstr              ToolOpt_Concat_uname_compiler_cfg_arch_target_opt_type_opt( const algo::strptr& uname ,const algo::strptr& compiler ,const algo::strptr& cfg ,const algo::strptr& arch ,const algo::strptr& target ,const algo::strptr& opt_type ,const algo::strptr& opt );
// func:dev.ToolOpt..ReadFieldMaybe
bool                 ToolOpt_ReadFieldMaybe(dev::ToolOpt& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::ToolOpt from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.ToolOpt..ReadStrptrMaybe
bool                 ToolOpt_ReadStrptrMaybe(dev::ToolOpt &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.ToolOpt.String  printfmt:Tuple
// func:dev.ToolOpt..Print
void                 ToolOpt_Print(dev::ToolOpt& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Uname
struct Uname { // dev.Uname: List of known unames
    algo::Smallstr50   uname;     //
    algo::Comment      comment;   //
    explicit Uname(const algo::strptr&            in_uname
        ,const algo::Comment&           in_comment);
    Uname();
};

// func:dev.Uname..ReadFieldMaybe
bool                 Uname_ReadFieldMaybe(dev::Uname& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Uname from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Uname..ReadStrptrMaybe
bool                 Uname_ReadStrptrMaybe(dev::Uname &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Uname.String  printfmt:Tuple
// func:dev.Uname..Print
void                 Uname_Print(dev::Uname& row, algo::cstring& str) __attribute__((nothrow));

// --- dev.Unstablefld
struct Unstablefld { // dev.Unstablefld: Fields that should be stripped from component test output because they contain timestamps etc.
    algo::Smallstr100   field;     //
    algo::Comment       comment;   //
    Unstablefld();
};

// func:dev.Unstablefld..ReadFieldMaybe
bool                 Unstablefld_ReadFieldMaybe(dev::Unstablefld& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of dev::Unstablefld from an ascii string.
// The format of the string is an ssim Tuple
// func:dev.Unstablefld..ReadStrptrMaybe
bool                 Unstablefld_ReadStrptrMaybe(dev::Unstablefld &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:dev.Unstablefld.String  printfmt:Tuple
// func:dev.Unstablefld..Print
void                 Unstablefld_Print(dev::Unstablefld& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace dev { // gen:ns_func
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const dev::Badline &row);// cfmt:dev.Badline.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Copyright &row);// cfmt:dev.Copyright.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Covfile &row);// cfmt:dev.Covfile.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Covline &row);// cfmt:dev.Covline.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Covtarget &row);// cfmt:dev.Covtarget.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Edaction &row);// cfmt:dev.Edaction.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Edacttype &row);// cfmt:dev.Edacttype.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::FieldId &row);// cfmt:dev.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Gitfile &row);// cfmt:dev.Gitfile.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Hilite &row);// cfmt:dev.Hilite.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Htmlentity &row);// cfmt:dev.Htmlentity.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Include &row);// cfmt:dev.Include.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::License &row);// cfmt:dev.License.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Linelim &row);// cfmt:dev.Linelim.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Mdsection &row);// cfmt:dev.Mdsection.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Msgfile &row);// cfmt:dev.Msgfile.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Noindent &row);// cfmt:dev.Noindent.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Package &row);// cfmt:dev.Package.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Pkgdep &row);// cfmt:dev.Pkgdep.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Pkgkey &row);// cfmt:dev.Pkgkey.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Readme &row);// cfmt:dev.Readme.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Sandbox &row);// cfmt:dev.Sandbox.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Sbpath &row);// cfmt:dev.Sbpath.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Scriptfile &row);// cfmt:dev.Scriptfile.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Srcfile &row);// cfmt:dev.Srcfile.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Syscmd &row);// cfmt:dev.Syscmd.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Syscmddep &row);// cfmt:dev.Syscmddep.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Syslib &row);// cfmt:dev.Syslib.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Targdep &row);// cfmt:dev.Targdep.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Target &row);// cfmt:dev.Target.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Targsrc &row);// cfmt:dev.Targsrc.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Targsyslib &row);// cfmt:dev.Targsyslib.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Tgtcov &row);// cfmt:dev.Tgtcov.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Timefmt &row);// cfmt:dev.Timefmt.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::ToolOpt &row);// cfmt:dev.ToolOpt.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Uname &row);// cfmt:dev.Uname.String
inline algo::cstring &operator <<(algo::cstring &str, const dev::Unstablefld &row);// cfmt:dev.Unstablefld.String
}
