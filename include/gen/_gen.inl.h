//
// include/gen/_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//



// --- pad_byte..Init
// Set all fields to initial values.
inline void pad_byte_Init(pad_byte& parent) {
    parent.value = u8(0);
}

// --- bool..Update
// Set value. Return true if new value is different from old value.
inline bool bool_Update(bool &lhs, bool rhs) throw() {
    bool ret = !bool_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- char..Update
// Set value. Return true if new value is different from old value.
inline bool char_Update(char &lhs, char rhs) throw() {
    bool ret = !char_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- double..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool double_UpdateMax(double &lhs, double rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- double..Min
// Return the lesser of two values
inline double double_Min(double lhs, double rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- double..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool double_UpdateMin(double &lhs, double rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- double..Max
// Return the greater of two values
inline double double_Max(double lhs, double rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- double..Update
// Set value. Return true if new value is different from old value.
inline bool double_Update(double &lhs, double rhs) throw() {
    bool ret = !double_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- float..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool float_UpdateMax(float &lhs, float rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- float..Min
// Return the lesser of two values
inline float float_Min(float lhs, float rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- float..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool float_UpdateMin(float &lhs, float rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- float..Max
// Return the greater of two values
inline float float_Max(float lhs, float rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- float..Update
// Set value. Return true if new value is different from old value.
inline bool float_Update(float &lhs, float rhs) throw() {
    bool ret = !float_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- i16..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool i16_UpdateMax(i16 &lhs, i16 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i16..Min
// Return the lesser of two values
inline i16 i16_Min(i16 lhs, i16 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- i16..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool i16_UpdateMin(i16 &lhs, i16 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i16..Max
// Return the greater of two values
inline i16 i16_Max(i16 lhs, i16 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- i16..Update
// Set value. Return true if new value is different from old value.
inline bool i16_Update(i16 &lhs, i16 rhs) throw() {
    bool ret = !i16_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- i32..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool i32_UpdateMax(i32 &lhs, i32 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i32..Min
// Return the lesser of two values
inline i32 i32_Min(i32 lhs, i32 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- i32..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool i32_UpdateMin(i32 &lhs, i32 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i32..Max
// Return the greater of two values
inline i32 i32_Max(i32 lhs, i32 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- i32..Update
// Set value. Return true if new value is different from old value.
inline bool i32_Update(i32 &lhs, i32 rhs) throw() {
    bool ret = !i32_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- i64..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool i64_UpdateMax(i64 &lhs, i64 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i64..Min
// Return the lesser of two values
inline i64 i64_Min(i64 lhs, i64 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- i64..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool i64_UpdateMin(i64 &lhs, i64 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i64..Max
// Return the greater of two values
inline i64 i64_Max(i64 lhs, i64 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- i64..Update
// Set value. Return true if new value is different from old value.
inline bool i64_Update(i64 &lhs, i64 rhs) throw() {
    bool ret = !i64_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- i8..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool i8_UpdateMax(i8 &lhs, i8 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i8..Min
// Return the lesser of two values
inline i8 i8_Min(i8 lhs, i8 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- i8..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool i8_UpdateMin(i8 &lhs, i8 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- i8..Max
// Return the greater of two values
inline i8 i8_Max(i8 lhs, i8 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- i8..Update
// Set value. Return true if new value is different from old value.
inline bool i8_Update(i8 &lhs, i8 rhs) throw() {
    bool ret = !i8_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- u8..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool u8_UpdateMax(u8 &lhs, u8 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u8..Min
// Return the lesser of two values
inline u8 u8_Min(u8 lhs, u8 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- u8..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool u8_UpdateMin(u8 &lhs, u8 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u8..Max
// Return the greater of two values
inline u8 u8_Max(u8 lhs, u8 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- u8..Update
// Set value. Return true if new value is different from old value.
inline bool u8_Update(u8 &lhs, u8 rhs) throw() {
    bool ret = !u8_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- u128..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool u128_UpdateMax(u128 &lhs, u128 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u128..Min
// Return the lesser of two values
inline u128 u128_Min(u128 lhs, u128 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- u128..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool u128_UpdateMin(u128 &lhs, u128 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u128..Max
// Return the greater of two values
inline u128 u128_Max(u128 lhs, u128 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- u128..Update
// Set value. Return true if new value is different from old value.
inline bool u128_Update(u128 &lhs, u128 rhs) throw() {
    bool ret = !u128_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- u16..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool u16_UpdateMax(u16 &lhs, u16 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u16..Min
// Return the lesser of two values
inline u16 u16_Min(u16 lhs, u16 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- u16..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool u16_UpdateMin(u16 &lhs, u16 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u16..Max
// Return the greater of two values
inline u16 u16_Max(u16 lhs, u16 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- u16..Update
// Set value. Return true if new value is different from old value.
inline bool u16_Update(u16 &lhs, u16 rhs) throw() {
    bool ret = !u16_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- u32..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool u32_UpdateMax(u32 &lhs, u32 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u32..Min
// Return the lesser of two values
inline u32 u32_Min(u32 lhs, u32 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- u32..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool u32_UpdateMin(u32 &lhs, u32 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u32..Max
// Return the greater of two values
inline u32 u32_Max(u32 lhs, u32 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- u32..Update
// Set value. Return true if new value is different from old value.
inline bool u32_Update(u32 &lhs, u32 rhs) throw() {
    bool ret = !u32_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- u64..UpdateMax
// Attempt to make LHS bigger. Return true if it was changed
inline bool u64_UpdateMax(u64 &lhs, u64 rhs) throw() {
    bool retval = lhs < rhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u64..Min
// Return the lesser of two values
inline u64 u64_Min(u64 lhs, u64 rhs) throw() {
    return lhs < rhs ? lhs : rhs;
}

// --- u64..UpdateMin
// Attempt to make LHS smaller. Return true if it was changed
inline bool u64_UpdateMin(u64 &lhs, u64 rhs) throw() {
    bool retval = rhs < lhs;
    if (retval) {
        lhs = rhs;
    }
    return retval;
}

// --- u64..Max
// Return the greater of two values
inline u64 u64_Max(u64 lhs, u64 rhs) throw() {
    return rhs < lhs ? lhs : rhs;
}

// --- u64..Update
// Set value. Return true if new value is different from old value.
inline bool u64_Update(u64 &lhs, u64 rhs) throw() {
    bool ret = !u64_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bool &row) {// cfmt:bool.String
    bool_Print(const_cast<bool&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const char &row) {// cfmt:char.String
    char_Print(const_cast<char&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const double &row) {// cfmt:double.String
    double_Print(const_cast<double&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const float &row) {// cfmt:float.String
    float_Print(const_cast<float&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const i16 &row) {// cfmt:i16.String
    i16_Print(const_cast<i16&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const i32 &row) {// cfmt:i32.String
    i32_Print(const_cast<i32&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const i64 &row) {// cfmt:i64.String
    i64_Print(const_cast<i64&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const i8 &row) {// cfmt:i8.String
    i8_Print(const_cast<i8&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const u8 &row) {// cfmt:u8.String
    u8_Print(const_cast<u8&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const u128 &row) {// cfmt:u128.String
    u128_Print(const_cast<u128&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const u16 &row) {// cfmt:u16.String
    u16_Print(const_cast<u16&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const u32 &row) {// cfmt:u32.String
    u32_Print(const_cast<u32&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const u64 &row) {// cfmt:u64.String
    u64_Print(const_cast<u64&>(row), str);
    return str;
}
