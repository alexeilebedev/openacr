//
// include/gen/amsdb_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/algo_gen.h"
#include "include/gen/ams_gen.h"
//#pragma endinclude

// --- amsdb_FieldIdEnum

enum amsdb_FieldIdEnum {             // amsdb.FieldId.value
     amsdb_FieldId_proctype     = 0
    ,amsdb_FieldId_id           = 1
    ,amsdb_FieldId_comment      = 2
    ,amsdb_FieldId_streamtype   = 3
    ,amsdb_FieldId_value        = 4
};

enum { amsdb_FieldIdEnum_N = 5 };

namespace amsdb { struct FieldId; }
namespace amsdb { struct ProcType; }
namespace amsdb { struct StreamType; }
namespace amsdb {
    typedef algo::Smallstr50 ProcTypePkey;
    typedef algo::Smallstr50 StreamTypePkey;
}//pkey typedefs
namespace amsdb {

// --- amsdb.FieldId
#pragma pack(push,1)
struct FieldId { // amsdb.FieldId: Field read helper
    i32   value;   //   -1
    inline operator amsdb_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(amsdb_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
amsdb_FieldIdEnum    value_GetEnum(const amsdb::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(amsdb::FieldId& parent, amsdb_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const amsdb::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const amsdb::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(amsdb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(amsdb::FieldId& parent, algo::strptr rhs, amsdb_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(amsdb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of amsdb::FieldId from an ascii string.
// The format of the string is the format of the amsdb::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(amsdb::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(amsdb::FieldId& parent);
// print string representation of amsdb::FieldId to string LHS, no header -- cprint:amsdb.FieldId.String
void                 FieldId_Print(amsdb::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- amsdb.ProcType
struct ProcType { // amsdb.ProcType
    algo::Smallstr50   proctype;   //
    u32                id;         //   0
    algo::Comment      comment;    //
    ProcType();
};

bool                 ProcType_ReadFieldMaybe(amsdb::ProcType &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amsdb::ProcType from an ascii string.
// The format of the string is an ssim Tuple
bool                 ProcType_ReadStrptrMaybe(amsdb::ProcType &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 ProcType_Init(amsdb::ProcType& parent);
// print string representation of amsdb::ProcType to string LHS, no header -- cprint:amsdb.ProcType.String
void                 ProcType_Print(amsdb::ProcType & row, algo::cstring &str) __attribute__((nothrow));

// --- amsdb.StreamType
struct StreamType { // amsdb.StreamType
    algo::Smallstr50   streamtype;   //
    ams::StreamType    id;           //
    algo::Comment      comment;      //
    StreamType();
};

bool                 StreamType_ReadFieldMaybe(amsdb::StreamType &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amsdb::StreamType from an ascii string.
// The format of the string is an ssim Tuple
bool                 StreamType_ReadStrptrMaybe(amsdb::StreamType &parent, algo::strptr in_str);
// print string representation of amsdb::StreamType to string LHS, no header -- cprint:amsdb.StreamType.String
void                 StreamType_Print(amsdb::StreamType & row, algo::cstring &str) __attribute__((nothrow));
} // end namespace amsdb
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const amsdb::FieldId &row);// cfmt:amsdb.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const amsdb::ProcType &row);// cfmt:amsdb.ProcType.String
inline algo::cstring &operator <<(algo::cstring &str, const amsdb::StreamType &row);// cfmt:amsdb.StreamType.String
}
