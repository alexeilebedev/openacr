//
// include/gen/algo_lib_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
#include "include/gen/dmmeta_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- algo_lib_FieldIdEnum

enum algo_lib_FieldIdEnum {               // algo_lib.FieldId.value
     algo_lib_FieldId_ary           = 0
    ,algo_lib_FieldId_verbose       = 1
    ,algo_lib_FieldId_debug         = 2
    ,algo_lib_FieldId_help          = 3
    ,algo_lib_FieldId_version       = 4
    ,algo_lib_FieldId_signature     = 5
    ,algo_lib_FieldId_v             = 6
    ,algo_lib_FieldId_d             = 7
    ,algo_lib_FieldId_sig           = 8
    ,algo_lib_FieldId_h             = 9
    ,algo_lib_FieldId_time          = 10
    ,algo_lib_FieldId_delay         = 11
    ,algo_lib_FieldId_hook          = 12
    ,algo_lib_FieldId_recurrent     = 13
    ,algo_lib_FieldId_expr          = 14
    ,algo_lib_FieldId_state         = 15
    ,algo_lib_FieldId_front         = 16
    ,algo_lib_FieldId_next_front    = 17
    ,algo_lib_FieldId_start         = 18
    ,algo_lib_FieldId_accept        = 19
    ,algo_lib_FieldId_parseerror    = 20
    ,algo_lib_FieldId_accepts_all   = 21
    ,algo_lib_FieldId_literal       = 22
    ,algo_lib_FieldId_type          = 23
    ,algo_lib_FieldId_in            = 24
    ,algo_lib_FieldId_out           = 25
    ,algo_lib_FieldId_value         = 26
};

enum { algo_lib_FieldIdEnum_N = 27 };


// --- algo_lib_RegxToken_type_Enum

enum algo_lib_RegxToken_type_Enum {        // algo_lib.RegxToken.type
     algo_lib_RegxToken_type_expr     = 0
    ,algo_lib_RegxToken_type_or       = 1
    ,algo_lib_RegxToken_type_lparen   = 2
};

enum { algo_lib_RegxToken_type_Enum_N = 3 };


// --- algo_lib_TableIdEnum

enum algo_lib_TableIdEnum {                       // algo_lib.TableId.value
     algo_lib_TableId_dmmeta_Dispsigcheck   = 0   // dmmeta.Dispsigcheck -> algo_lib.FDispsigcheck
    ,algo_lib_TableId_dmmeta_dispsigcheck   = 0   // dmmeta.dispsigcheck -> algo_lib.FDispsigcheck
};

enum { algo_lib_TableIdEnum_N = 2 };

namespace algo_lib { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace algo_lib { // gen:ns_tclass_field
struct lpool_Lpblock {
    lpool_Lpblock* next;
};
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace dmmeta { struct Dispsigcheck; }
namespace dmmeta { struct Logcat; }
namespace algo_lib { struct Replscope; }
namespace algo_lib { struct FTxtrow; }
namespace algo_lib { struct FTxttbl; }
namespace algo_lib { struct Regx; }
namespace algo_lib { struct Bitset_ary_bitcurs; }
namespace algo_lib { struct Bitset_ary_curs; }
namespace algo_lib { struct csvparse_ary_tok_curs; }
namespace algo_lib { struct _db_temp_strings_curs; }
namespace algo_lib { struct _db_imtable_curs; }
namespace algo_lib { struct _db_bh_timehook_curs; }
namespace algo_lib { struct _db_dispsigcheck_curs; }
namespace algo_lib { struct _db_imdb_curs; }
namespace algo_lib { struct _db_logcat_curs; }
namespace algo_lib { struct _db_exec_args_curs; }
namespace algo_lib { struct _db_dirstack_curs; }
namespace algo_lib { struct txtrow_c_txtcell_curs; }
namespace algo_lib { struct txttbl_c_txtrow_curs; }
namespace algo_lib { struct InTextFile_temp_buf_curs; }
namespace algo_lib { struct regx_state_curs; }
namespace algo_lib { struct regxparse_ary_expr_curs; }
namespace algo_lib { struct RegxState_ch_class_curs; }
namespace algo_lib { struct replscope_ind_replvar_curs; }
namespace algo_lib { struct tabulate_width_curs; }
namespace algo_lib { struct Bitset; }
namespace algo_lib { struct Cmdline; }
namespace algo_lib { struct CsvParse; }
namespace algo_lib { struct ErrorX; }
namespace algo_lib { struct FFildes; }
namespace algo_lib { struct FLockfile; }
namespace algo_lib { struct FTimehook; }
namespace algo_lib { struct FImdb; }
namespace algo_lib { struct FLogcat; }
namespace algo_lib { struct trace; }
namespace algo_lib { struct FDb; }
namespace algo_lib { struct FDispsigcheck; }
namespace algo_lib { struct FImtable; }
namespace algo_lib { struct FIohook; }
namespace algo_lib { struct FReplvar; }
namespace algo_lib { struct FTempfile; }
namespace algo_lib { struct FTxtcell; }
namespace algo_lib { struct FieldId; }
namespace algo_lib { struct InTextFile; }
namespace algo_lib { struct Mmap; }
namespace algo_lib { struct MmapFile; }
namespace algo_lib { struct RegxToken; }
namespace algo_lib { struct RegxExpr; }
namespace algo_lib { struct RegxParse; }
namespace algo_lib { struct RegxState; }
namespace algo_lib { struct ShHdr; }
namespace algo_lib { struct Srng; }
namespace algo_lib { struct TableId; }
namespace algo_lib { struct Tabulate; }
namespace algo_lib { extern struct algo_lib::FDb _db; }
namespace algo_lib { // hook_fcn_typedef
    typedef void (*timehook_hook_hook)(void* userctx, algo_lib::FTimehook& arg); // hook:algo_lib.FTimehook.hook
    typedef void (*_db_h_fatalerror_hook)(void* userctx); // hook:algo_lib.FDb.h_fatalerror
    typedef void (*iohook_callback_hook)(void* userctx, algo_lib::FIohook& arg); // hook:algo_lib.FIohook.callback
} // hook_decl
namespace algo_lib { // gen:ns_print_struct

// --- algo_lib.Bitset
struct Bitset { // algo_lib.Bitset
    u64*   ary_elems;   // pointer to elements
    u32    ary_n;       // number of elements in array
    u32    ary_max;     // max. capacity of array before realloc
    // Copy from aryptr (operator=)
    // func:algo_lib.Bitset.ary.AssignAryptr
    inline void          operator =(const algo::aryptr<u64> &rhs) __attribute__((nothrow));
    // func:algo_lib.Bitset.ary.CtorAryptr
    explicit inline               Bitset(const algo::aryptr<u64> &rhs) __attribute__((nothrow));
    // func:algo_lib.Bitset..AssignOp
    algo_lib::Bitset&    operator =(const algo_lib::Bitset &rhs) __attribute__((nothrow));
    // func:algo_lib.Bitset..Ctor
    inline               Bitset() __attribute__((nothrow));
    // func:algo_lib.Bitset..Dtor
    inline               ~Bitset() __attribute__((nothrow));
    // func:algo_lib.Bitset..CopyCtor
    Bitset(const algo_lib::Bitset &rhs) __attribute__((nothrow));
};

// Get max # of bits in the bitset
// Return max. number of bits supported by array
// func:algo_lib.Bitset.ary.NBits
inline int           ary_Nbits(algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. No bounds checking
// func:algo_lib.Bitset.ary.qGetBit
inline bool          ary_qGetBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. If bit index is out of bounds, return 0.
// func:algo_lib.Bitset.ary.GetBit
inline bool          ary_GetBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Check if all the bits in the bitset are equal to zero
// func:algo_lib.Bitset.ary.BitsEmptyQ
inline bool          ary_BitsEmptyQ(algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow));
// func:algo_lib.Bitset.ary.Sum1s
inline u64           ary_Sum1s(algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow));
// Clear bit # BIT_IDX in bit set. No bounds checking
// func:algo_lib.Bitset.ary.qClearBit
inline void          ary_qClearBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((nothrow));
// Clear bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing
// func:algo_lib.Bitset.ary.ClearBit
inline void          ary_ClearBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
// func:algo_lib.Bitset.ary.qSetBit
inline void          ary_qSetBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing.
// func:algo_lib.Bitset.ary.SetBit
inline void          ary_SetBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
// func:algo_lib.Bitset.ary.qSetBitVal
inline void          ary_qSetBitVal(algo_lib::Bitset& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Or bit # BIT_IDX in bit set. No bounds checking
// func:algo_lib.Bitset.ary.qOrBitVal
inline void          ary_qOrBitVal(algo_lib::Bitset& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Set all bits of array to zero.
// Note: this does not change what NBits will return.
// func:algo_lib.Bitset.ary.ClearBitsAll
inline void          ary_ClearBitsAll(algo_lib::Bitset& parent) __attribute__((nothrow));
// Zero in PARENT any bits that are set in RHS.
// func:algo_lib.Bitset.ary.ClearBits
inline void          ary_ClearBits(algo_lib::Bitset& parent, algo_lib::Bitset &rhs) __attribute__((nothrow));
// Set PARENT to union of two bitsets.
// (This function is not named Set.. to avoid triple entendre).
// func:algo_lib.Bitset.ary.OrBits
inline void          ary_OrBits(algo_lib::Bitset& parent, algo_lib::Bitset &rhs) __attribute__((nothrow));
// Make sure the array supports at least NBITS bits.
// This function is the same as AllocBit(NBITS - 1) assuming NBITS > 0;
// func:algo_lib.Bitset.ary.ExpandBits
void                 ary_ExpandBits(algo_lib::Bitset& parent, u32 n_bits) __attribute__((nothrow));
// Make sure all bits up to and including #BIT_IDX exist
// New values are initialized with zero.
// func:algo_lib.Bitset.ary.AllocBit
void                 ary_AllocBit(algo_lib::Bitset& parent, u32 bit_idx) __attribute__((nothrow));
// Return smallest number N such that indexes of all 1 bits are below N
// func:algo_lib.Bitset.ary.Sup
inline i32           ary_Sup(algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.Bitset.ary.Addary
algo::aryptr<u64>    ary_Addary(algo_lib::Bitset& parent, algo::aryptr<u64> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.Bitset.ary.Alloc
u64&                 ary_Alloc(algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.Bitset.ary.AllocAt
u64&                 ary_AllocAt(algo_lib::Bitset& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Bitset.ary.AllocN
algo::aryptr<u64>    ary_AllocN(algo_lib::Bitset& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.Bitset.ary.EmptyQ
inline bool          ary_EmptyQ(algo_lib::Bitset& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.Bitset.ary.Find
inline u64*          ary_Find(algo_lib::Bitset& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.Bitset.ary.Getary
inline algo::aryptr<u64> ary_Getary(const algo_lib::Bitset& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.Bitset.ary.Last
inline u64*          ary_Last(algo_lib::Bitset& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.Bitset.ary.Max
inline i32           ary_Max(algo_lib::Bitset& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.Bitset.ary.N
inline i32           ary_N(const algo_lib::Bitset& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.Bitset.ary.Remove
void                 ary_Remove(algo_lib::Bitset& parent, u32 i) __attribute__((nothrow));
// func:algo_lib.Bitset.ary.RemoveAll
inline void          ary_RemoveAll(algo_lib::Bitset& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.Bitset.ary.RemoveLast
void                 ary_RemoveLast(algo_lib::Bitset& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.Bitset.ary.Reserve
inline void          ary_Reserve(algo_lib::Bitset& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.Bitset.ary.AbsReserve
void                 ary_AbsReserve(algo_lib::Bitset& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.Bitset.ary.Setary
void                 ary_Setary(algo_lib::Bitset& parent, algo_lib::Bitset &rhs) __attribute__((nothrow));
// Copy specified array into ary, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.Bitset.ary.Setary2
void                 ary_Setary(algo_lib::Bitset& parent, const algo::aryptr<u64> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.Bitset.ary.qFind
inline u64&          ary_qFind(algo_lib::Bitset& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.Bitset.ary.qLast
inline u64&          ary_qLast(algo_lib::Bitset& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.Bitset.ary.rowid_Get
inline u64           ary_rowid_Get(algo_lib::Bitset& parent, u64 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Bitset.ary.AllocNVal
algo::aryptr<u64>    ary_AllocNVal(algo_lib::Bitset& parent, int n_elems, const u64& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.Bitset.ary.ReadStrptrMaybe
bool                 ary_ReadStrptrMaybe(algo_lib::Bitset& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.Bitset.ary_bitcurs.Next
void                 Bitset_ary_bitcurs_Next(Bitset_ary_bitcurs &curs);
// func:algo_lib.Bitset.ary_bitcurs.Reset
inline void          Bitset_ary_bitcurs_Reset(Bitset_ary_bitcurs &curs, algo_lib::Bitset &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.Bitset.ary_bitcurs.ValidQ
inline bool          Bitset_ary_bitcurs_ValidQ(Bitset_ary_bitcurs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.Bitset.ary_bitcurs.Access
inline int&          Bitset_ary_bitcurs_Access(Bitset_ary_bitcurs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.Bitset.ary_curs.Next
inline void          Bitset_ary_curs_Next(Bitset_ary_curs &curs) __attribute__((nothrow));
// func:algo_lib.Bitset.ary_curs.Reset
inline void          Bitset_ary_curs_Reset(Bitset_ary_curs &curs, algo_lib::Bitset &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.Bitset.ary_curs.ValidQ
inline bool          Bitset_ary_curs_ValidQ(Bitset_ary_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.Bitset.ary_curs.Access
inline u64&          Bitset_ary_curs_Access(Bitset_ary_curs &curs) __attribute__((nothrow));
// Read fields of algo_lib::Bitset from an ascii string.
// The format of the string is the format of the algo_lib::Bitset's only field
// func:algo_lib.Bitset..ReadStrptrMaybe
bool                 Bitset_ReadStrptrMaybe(algo_lib::Bitset &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.Bitset..Init
inline void          Bitset_Init(algo_lib::Bitset& parent);
// func:algo_lib.Bitset..Uninit
void                 Bitset_Uninit(algo_lib::Bitset& parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.Bitset.String  printfmt:Raw
// func:algo_lib.Bitset..Print
void                 Bitset_Print(algo_lib::Bitset& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.Cmdline
struct Cmdline { // algo_lib.Cmdline: *can't move this to command namespace because of circular dependency*
    u8     verbose;     //   0  Verbosity level (0..255)
    u8     debug;       //   0  Debug level (0..255)
    bool   help;        //   false  Print help and exit
    bool   version;     //   false  Print version and exit
    bool   signature;   //   false  Show signatures and exit
    // func:algo_lib.Cmdline..Ctor
    inline               Cmdline() __attribute__((nothrow));
};

// Alias: value is retrieved from verbose
// func:algo_lib.Cmdline.v.Get
inline u8            v_Get(const algo_lib::Cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Alias: value is assigned to verbose
// func:algo_lib.Cmdline.v.Set
void                 v_Set(algo_lib::Cmdline& parent, u8 rhs) __attribute__((nothrow));
// Alias: value is read into verbose
// func:algo_lib.Cmdline.v.ReadStrptrMaybe
bool                 v_ReadStrptrMaybe(algo_lib::Cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Alias: value is retrieved from debug
// func:algo_lib.Cmdline.d.Get
inline u8            d_Get(const algo_lib::Cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Alias: value is assigned to debug
// func:algo_lib.Cmdline.d.Set
void                 d_Set(algo_lib::Cmdline& parent, u8 rhs) __attribute__((nothrow));
// Alias: value is read into debug
// func:algo_lib.Cmdline.d.ReadStrptrMaybe
bool                 d_ReadStrptrMaybe(algo_lib::Cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Alias: value is retrieved from signature
// func:algo_lib.Cmdline.sig.Get
inline bool          sig_Get(const algo_lib::Cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Alias: value is assigned to signature
// func:algo_lib.Cmdline.sig.Set
void                 sig_Set(algo_lib::Cmdline& parent, bool rhs) __attribute__((nothrow));
// Alias: value is read into signature
// func:algo_lib.Cmdline.sig.ReadStrptrMaybe
bool                 sig_ReadStrptrMaybe(algo_lib::Cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Alias: value is retrieved from help
// func:algo_lib.Cmdline.h.Get
inline bool          h_Get(const algo_lib::Cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Alias: value is assigned to help
// func:algo_lib.Cmdline.h.Set
void                 h_Set(algo_lib::Cmdline& parent, bool rhs) __attribute__((nothrow));
// Alias: value is read into help
// func:algo_lib.Cmdline.h.ReadStrptrMaybe
bool                 h_ReadStrptrMaybe(algo_lib::Cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// func:algo_lib.Cmdline..ReadFieldMaybe
bool                 Cmdline_ReadFieldMaybe(algo_lib::Cmdline& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo_lib::Cmdline from attributes of ascii tuple TUPLE
// func:algo_lib.Cmdline..ReadTupleMaybe
bool                 Cmdline_ReadTupleMaybe(algo_lib::Cmdline &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.Cmdline..Init
inline void          Cmdline_Init(algo_lib::Cmdline& parent);
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:algo_lib.Cmdline..NArgs
i32                  Cmdline_NArgs(algo_lib::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- algo_lib.CsvParse
// create: algo_lib.FDb.csvparse (Cppstack)
struct CsvParse { // algo_lib.CsvParse
    algo::strptr     input;           // Input string
    char             sep;             //   ','  Input: separator
    char             quotechar1;      //   '\"'  Allow this quote
    char             quotechar2;      //   '\''  Allow this quote as well
    algo::cstring*   ary_tok_elems;   // pointer to elements
    u32              ary_tok_n;       // number of elements in array
    u32              ary_tok_max;     // max. capacity of array before realloc
    bool             openquote;       //   true  On output: set if unbalanced quote found
    // func:algo_lib.CsvParse..AssignOp
    algo_lib::CsvParse&  operator =(const algo_lib::CsvParse &rhs) __attribute__((nothrow));
    // func:algo_lib.CsvParse..Ctor
    inline               CsvParse() __attribute__((nothrow));
    // func:algo_lib.CsvParse..Dtor
    inline               ~CsvParse() __attribute__((nothrow));
    // func:algo_lib.CsvParse..CopyCtor
    CsvParse(const algo_lib::CsvParse &rhs) __attribute__((nothrow));
    // func:algo_lib.CsvParse..FieldwiseCtor
    explicit inline               CsvParse(algo::strptr in_input, char in_sep, char in_quotechar1, char in_quotechar2, bool in_openquote) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.CsvParse.ary_tok.Addary
algo::aryptr<algo::cstring> ary_tok_Addary(algo_lib::CsvParse& csvparse, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.CsvParse.ary_tok.Alloc
algo::cstring&       ary_tok_Alloc(algo_lib::CsvParse& csvparse) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.CsvParse.ary_tok.AllocAt
algo::cstring&       ary_tok_AllocAt(algo_lib::CsvParse& csvparse, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.CsvParse.ary_tok.AllocN
algo::aryptr<algo::cstring> ary_tok_AllocN(algo_lib::CsvParse& csvparse, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.CsvParse.ary_tok.EmptyQ
inline bool          ary_tok_EmptyQ(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.CsvParse.ary_tok.Find
inline algo::cstring* ary_tok_Find(algo_lib::CsvParse& csvparse, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.CsvParse.ary_tok.Getary
inline algo::aryptr<algo::cstring> ary_tok_Getary(const algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.CsvParse.ary_tok.Last
inline algo::cstring* ary_tok_Last(algo_lib::CsvParse& csvparse) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.CsvParse.ary_tok.Max
inline i32           ary_tok_Max(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.CsvParse.ary_tok.N
inline i32           ary_tok_N(const algo_lib::CsvParse& csvparse) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.CsvParse.ary_tok.Remove
void                 ary_tok_Remove(algo_lib::CsvParse& csvparse, u32 i) __attribute__((nothrow));
// func:algo_lib.CsvParse.ary_tok.RemoveAll
void                 ary_tok_RemoveAll(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.CsvParse.ary_tok.RemoveLast
void                 ary_tok_RemoveLast(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.CsvParse.ary_tok.Reserve
inline void          ary_tok_Reserve(algo_lib::CsvParse& csvparse, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.CsvParse.ary_tok.AbsReserve
void                 ary_tok_AbsReserve(algo_lib::CsvParse& csvparse, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.CsvParse.ary_tok.Setary
void                 ary_tok_Setary(algo_lib::CsvParse& csvparse, algo_lib::CsvParse &rhs) __attribute__((nothrow));
// Copy specified array into ary_tok, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.CsvParse.ary_tok.Setary2
void                 ary_tok_Setary(algo_lib::CsvParse& csvparse, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.CsvParse.ary_tok.qFind
inline algo::cstring& ary_tok_qFind(algo_lib::CsvParse& csvparse, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.CsvParse.ary_tok.qLast
inline algo::cstring& ary_tok_qLast(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.CsvParse.ary_tok.rowid_Get
inline u64           ary_tok_rowid_Get(algo_lib::CsvParse& csvparse, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.CsvParse.ary_tok.AllocNVal
algo::aryptr<algo::cstring> ary_tok_AllocNVal(algo_lib::CsvParse& csvparse, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.CsvParse.ary_tok.ReadStrptrMaybe
bool                 ary_tok_ReadStrptrMaybe(algo_lib::CsvParse& csvparse, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.CsvParse.ary_tok_curs.Next
inline void          csvparse_ary_tok_curs_Next(csvparse_ary_tok_curs &curs) __attribute__((nothrow));
// func:algo_lib.CsvParse.ary_tok_curs.Reset
inline void          csvparse_ary_tok_curs_Reset(csvparse_ary_tok_curs &curs, algo_lib::CsvParse &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.CsvParse.ary_tok_curs.ValidQ
inline bool          csvparse_ary_tok_curs_ValidQ(csvparse_ary_tok_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.CsvParse.ary_tok_curs.Access
inline algo::cstring& csvparse_ary_tok_curs_Access(csvparse_ary_tok_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.CsvParse..Init
inline void          CsvParse_Init(algo_lib::CsvParse& csvparse);
// func:algo_lib.CsvParse..Uninit
void                 CsvParse_Uninit(algo_lib::CsvParse& csvparse) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.CsvParse.String  printfmt:Tuple
// func:algo_lib.CsvParse..Print
void                 CsvParse_Print(algo_lib::CsvParse& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.ErrorX
// create: algo_lib.FDb.error (Malloc)
struct ErrorX { // algo_lib.ErrorX
    algo::cstring   str;   //
    // func:algo_lib.ErrorX..FieldwiseCtor
    explicit inline               ErrorX(const algo::strptr& in_str) __attribute__((nothrow));
private:
    // func:algo_lib.ErrorX..Ctor
    inline               ErrorX() __attribute__((nothrow));
    friend algo_lib::ErrorX&    error_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::ErrorX*    error_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 error_Delete(algo_lib::ErrorX &row) __attribute__((nothrow));
};

// print string representation of ROW to string STR
// cfmt:algo_lib.ErrorX.String  printfmt:Extern
// func:algo_lib.ErrorX..Print
// this function is 'extrn' and implemented by user
void                 ErrorX_Print(algo_lib::ErrorX& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FFildes
// create: algo_lib.FDb.fildes (Cppstack)
struct FFildes { // algo_lib.FFildes: Wrapper for unix file descritor, call close() on Uninit
    algo::Fildes   fd;   //
    // func:algo_lib.FFildes..Ctor
    inline               FFildes() __attribute__((nothrow));
    // func:algo_lib.FFildes..Dtor
    inline               ~FFildes() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fd of algo_lib::FFildes
// func:algo_lib.FFildes.fd.Cleanup
// this function is 'extrn' and implemented by user
void                 fd_Cleanup(algo_lib::FFildes& fildes) __attribute__((nothrow));

// func:algo_lib.FFildes..Uninit
inline void          FFildes_Uninit(algo_lib::FFildes& fildes) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.FFildes.String  printfmt:Raw
// func:algo_lib.FFildes..Print
void                 FFildes_Print(algo_lib::FFildes& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FLockfile
struct FLockfile { // algo_lib.FLockfile
    algo::cstring       filename;   //
    algo_lib::FFildes   fildes;     //
    // func:algo_lib.FLockfile..Ctor
    inline               FLockfile() __attribute__((nothrow));
    // func:algo_lib.FLockfile..Dtor
    inline               ~FLockfile() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fildes of algo_lib::FLockfile
// func:algo_lib.FLockfile.fildes.Cleanup
// this function is 'extrn' and implemented by user
void                 fildes_Cleanup(algo_lib::FLockfile& parent) __attribute__((nothrow));

// func:algo_lib.FLockfile..Uninit
inline void          FLockfile_Uninit(algo_lib::FLockfile& parent) __attribute__((nothrow));

// --- algo_lib.FTimehook
// create: algo_lib.FDb.timehook (Cppstack)
// global access: bh_timehook (Bheap, sort field time)
// global access: c_timehook (Ptr)
// access: algo_lib.FTimehook.hook (Hook)
struct FTimehook { // algo_lib.FTimehook
    algo::SchedTime                time;              // Time the hook is scheduled to expire
    algo::SchedTime                delay;             // Minimum delay between iterations
    algo_lib::timehook_hook_hook   hook;              //   NULL  Pointer to a function
    u64                            hook_ctx;          //   0  Callback context
    bool                           recurrent;         //   false  If true, automatically reschedule
    i32                            bh_timehook_idx;   // index in heap; -1 means not-in-heap
    // reftype Hook of algo_lib.FTimehook.hook prohibits copy
    // func:algo_lib.FTimehook..AssignOp
    inline algo_lib::FTimehook& operator =(const algo_lib::FTimehook &rhs) = delete;
    // func:algo_lib.FTimehook..Ctor
    inline               FTimehook() __attribute__((nothrow));
    // func:algo_lib.FTimehook..Dtor
    inline               ~FTimehook() __attribute__((nothrow));
    // reftype Hook of algo_lib.FTimehook.hook prohibits copy
    // func:algo_lib.FTimehook..CopyCtor
    inline               FTimehook(const algo_lib::FTimehook &rhs) = delete;
};

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
// func:algo_lib.FTimehook.time.Lt
inline bool          time_Lt(algo_lib::FTimehook& timehook, algo_lib::FTimehook &rhs) __attribute__((nothrow));
// Compare two fields.
// func:algo_lib.FTimehook.time.Cmp
inline i32           time_Cmp(algo_lib::FTimehook& timehook, algo_lib::FTimehook &rhs) __attribute__((nothrow));

// Invoke function by pointer
// func:algo_lib.FTimehook.hook.Call
inline void          hook_Call(algo_lib::FTimehook& timehook, algo_lib::FTimehook& arg) __attribute__((nothrow));
// Assign 0-argument hook with no context pointer
// func:algo_lib.FTimehook.hook.Set0
inline void          hook_Set0(algo_lib::FTimehook& timehook, void (*fcn)() ) __attribute__((nothrow));
// Assign 1-argument hook with context pointer
// func:algo_lib.FTimehook.hook.Set1
template<class T> inline void hook_Set1(algo_lib::FTimehook& timehook, T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));
// Assign 2-argument hook with context pointer
// func:algo_lib.FTimehook.hook.Set2
template<class T> inline void hook_Set2(algo_lib::FTimehook& timehook, T& ctx, void (*fcn)(T&, algo_lib::FTimehook& arg) ) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FTimehook..Init
inline void          FTimehook_Init(algo_lib::FTimehook& timehook);
// func:algo_lib.FTimehook..ReadFieldMaybe
bool                 FTimehook_ReadFieldMaybe(algo_lib::FTimehook& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo_lib::FTimehook from an ascii string.
// The format of the string is an ssim Tuple
// func:algo_lib.FTimehook..ReadStrptrMaybe
bool                 FTimehook_ReadStrptrMaybe(algo_lib::FTimehook &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo_lib.FTimehook..Uninit
void                 FTimehook_Uninit(algo_lib::FTimehook& timehook) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.FTimehook.String  printfmt:Tuple
// func:algo_lib.FTimehook..Print
void                 FTimehook_Print(algo_lib::FTimehook& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FImdb
// create: algo_lib.FDb.imdb (Inlary)
// global access: ind_imdb (Thash, hash field imdb)
struct FImdb { // algo_lib.FImdb
    algo::Smallstr50                 imdb;                // Database name
    algo::ImdbInsertStrptrMaybeFcn   InsertStrptrMaybe;   //   0  Insert new element given a string
    algo::ImdbStepFcn                Step;                //   0  Perform one step (may be NULL)
    algo::ImdbMainLoopFcn            MainLoop;            //   0  Loop!
    algo::ImdbGetTraceFcn            GetTrace;            //   0
    algo::Comment                    comment;             //
    algo_lib::FImdb*                 ind_imdb_next;       // hash next
    // func:algo_lib.FImdb..AssignOp
    inline algo_lib::FImdb& operator =(const algo_lib::FImdb &rhs) = delete;
    // func:algo_lib.FImdb..Ctor
    inline               FImdb() __attribute__((nothrow));
    // func:algo_lib.FImdb..Dtor
    inline               ~FImdb() __attribute__((nothrow));
    // func:algo_lib.FImdb..CopyCtor
    inline               FImdb(const algo_lib::FImdb &rhs) = delete;
};

// Copy fields out of row
// func:algo_lib.FImdb.msghdr.CopyOut
void                 imdb_CopyOut(algo_lib::FImdb &row, algo::Imdb &out) __attribute__((nothrow));
// Copy fields in to row
// func:algo_lib.FImdb.msghdr.CopyIn
void                 imdb_CopyIn(algo_lib::FImdb &row, algo::Imdb &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FImdb..Init
inline void          FImdb_Init(algo_lib::FImdb& imdb);
// func:algo_lib.FImdb..Uninit
void                 FImdb_Uninit(algo_lib::FImdb& imdb) __attribute__((nothrow));

// --- algo_lib.FLogcat
// create: algo_lib.FDb.logcat (Inlary)
// global access: ind_logcat (Thash, hash field logcat)
struct FLogcat { // algo_lib.FLogcat
    algo::Smallstr50     logcat;            //
    bool                 enabled;           //   false
    bool                 builtin;           //   false
    algo::Comment        comment;           //
    algo_lib::FLogcat*   ind_logcat_next;   // hash next
    // func:algo_lib.FLogcat..AssignOp
    inline algo_lib::FLogcat& operator =(const algo_lib::FLogcat &rhs) = delete;
    // func:algo_lib.FLogcat..Ctor
    inline               FLogcat() __attribute__((nothrow));
    // func:algo_lib.FLogcat..Dtor
    inline               ~FLogcat() __attribute__((nothrow));
    // func:algo_lib.FLogcat..CopyCtor
    inline               FLogcat(const algo_lib::FLogcat &rhs) = delete;
};

// Copy fields out of row
// func:algo_lib.FLogcat.base.CopyOut
void                 logcat_CopyOut(algo_lib::FLogcat &row, dmmeta::Logcat &out) __attribute__((nothrow));
// Copy fields in to row
// func:algo_lib.FLogcat.base.CopyIn
void                 logcat_CopyIn(algo_lib::FLogcat &row, dmmeta::Logcat &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FLogcat..Init
inline void          FLogcat_Init(algo_lib::FLogcat& logcat);
// func:algo_lib.FLogcat..Uninit
void                 FLogcat_Uninit(algo_lib::FLogcat& logcat) __attribute__((nothrow));

// --- algo_lib.trace
#pragma pack(push,1)
struct trace { // algo_lib.trace
    u64   n_mmap;                    //   0  # times memory allocated with mmap() (huge or not)
    u64   n_sbrk;                    //   0  # of calls to sbrk
    u64   tot_insert_err;            //   0
    u64   tot_selfcheck_err;         //   0
    u64   tot_update_err;            //   0
    u64   step_bh_timehook;          //   0
    u64   step_bh_timehook_cycles;   //   0
    u64   step_giveup_time;          //   0
    u64   step_giveup_time_cycles;   //   0
    u64   alloc__db_malloc;          //   0
    u64   del__db_malloc;            //   0
    // func:algo_lib.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// Set all fields to initial values.
// func:algo_lib.trace..Init
void                 trace_Init(algo_lib::trace& parent);
// print string representation of ROW to string STR
// cfmt:algo_lib.trace.String  printfmt:Tuple
// func:algo_lib.trace..Print
void                 trace_Print(algo_lib::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FDb
// create: algo_lib.FDb._db (Global)
struct FDb { // algo_lib.FDb: In-memory database for algo_lib
    u64                               sbrk_huge_limit;                              // Huge page limit in bytes -- set to 0 with fork!
    u64                               sbrk_huge_alloc;                              // Huge page bytes allocated
    bool                              sbrk_zeromem;                                 // Zero allocated memory
    lpool_Lpblock*                    lpool_free[36];                               // Lpool levels
    algo::SchedTime                   next_loop;                                    //
    algo::SchedTime                   limit;                                        //   0x7fffffffffffffff
    double                            clocks_to_ms;                                 //   0.0
    u32                               n_iohook;                                     //   0  Number of iohooks in epoll
    algo::SchedTime                   clock;                                        // Current cpu clock value
    algo::SchedTime                   mainloop_clock;                               // Mainloop cpu clock value
    algo::SchedTime                   start_clock;                                  // cpu clock value at startup
    double                            hz;                                           //   0.0
    algo::SchedTime                   t_last_signal;                                // Time last async signal was processed
    i32                               exit_code;                                    //   0  Exit code from main program. 0 = success (this is the unix exit code!)
    double                            clocks_to_ns;                                 //   0.0
    u32                               n_temp;                                       //   0  * initialization order is important *
    u32                               last_signal;                                  //   0  Value of last signal (used by SetupExitSignals)
    bool                              eol;                                          //   false
    u64                               cpu_hz;                                       //   0  Cpu HZ, determined at startup
    algo::cstring                     temp_strings_elems[8];                        // fixed array
    algo::Charset                     ArgvIdent;                                    //
    algo::Charset                     BashQuotesafe;                                //
    algo::Charset                     RegxSqlSpecial;                               //
    algo::Charset                     SsimBreakName;                                //
    algo::Charset                     SsimBreakValue;                               //
    algo::Charset                     SsimQuotesafe;                                //
    algo_lib::FImtable*               imtable_lary[32];                             // level array
    i32                               imtable_n;                                    // number of elements in array
    algo_lib::FImtable**              ind_imtable_buckets_elems;                    // pointer to bucket array
    i32                               ind_imtable_buckets_n;                        // number of elements in bucket array
    i32                               ind_imtable_n;                                // number of elements in the hash table
    algo::cstring                     log_str;                                      //
    algo_lib::FTimehook**             bh_timehook_elems;                            // binary heap by time
    i32                               bh_timehook_n;                                // number of elements in the heap
    i32                               bh_timehook_max;                              // max elements in bh_timehook_elems
    i32                               epoll_fd;                                     //   -1
    algo_lib::FLockfile               lock_core;                                    //
    algo_lib::FTimehook*              c_timehook;                                   // TEMP: here only for dependency reasons. optional pointer
    algo_lib::FTimehook               _timehook;                                    // Keep me here i'm special
    algo_lib::FDispsigcheck*          dispsigcheck_lary[32];                        // level array
    i32                               dispsigcheck_n;                               // number of elements in array
    algo_lib::FDispsigcheck**         ind_dispsigcheck_buckets_elems;               // pointer to bucket array
    i32                               ind_dispsigcheck_buckets_n;                   // number of elements in bucket array
    i32                               ind_dispsigcheck_n;                           // number of elements in the hash table
    u128                              imdb_data[sizeu128(algo_lib::FImdb,32)];      // place for data
    i32                               imdb_n;                                       // number of elems current in existence
    enum { imdb_max = 32 };
    algo_lib::FImdb**                 ind_imdb_buckets_elems;                       // pointer to bucket array
    i32                               ind_imdb_buckets_n;                           // number of elements in bucket array
    i32                               ind_imdb_n;                                   // number of elements in the hash table
    u64                               txtcell_blocksize;                            // # bytes per block
    algo_lib::FTxtcell*               txtcell_free;                                 //
    u64                               txtrow_blocksize;                             // # bytes per block
    algo_lib::FTxtrow*                txtrow_free;                                  //
    i32                               argc;                                         //   0  Argc from main
    char**                            argv;                                         // Argv from main. optional pointer
    algo::cstring                     xref_error;                                   //
    algo::cstring                     errtext;                                      //
    algo::ByteAry*                    varlenbuf;                                    // optional pointer
    u64                               replvar_blocksize;                            // # bytes per block
    algo_lib::FReplvar*               replvar_free;                                 //
    algo_lib::Cmdline                 cmdline;                                      //
    algo_lib::_db_h_fatalerror_hook   h_fatalerror;                                 //   NULL  Pointer to a function
    u64                               h_fatalerror_ctx;                             //   0  Callback context
    u64                               giveup_count;                                 //   0
    algo::cstring                     fatalerr;                                     //
    u32                               stringtofile_nwrite;                          //   0  Global counter of # of files written
    bool                              giveup_time;                                  //   true  Trigger for giveup_time loop
    bool                              sleep_roundup;                                //   false
    u64                               last_sleep_clocks;                            //   0
    algo::ByteAry                     msgtemp;                                      //
    u32                               show_insert_err_lim;                          //   0
    algo::Charset                     Urlsafe;                                      //
    u64                               winjob;                                       //   0
    algo::PrlogFcn                    Prlog;                                        //   algo::Prlog
    u128                              logcat_data[sizeu128(algo_lib::FLogcat,3)];   // place for data
    i32                               logcat_n;                                     // number of elems current in existence
    enum { logcat_max = 3 };
    algo_lib::FLogcat**               ind_logcat_buckets_elems;                     // pointer to bucket array
    i32                               ind_logcat_buckets_n;                         // number of elements in bucket array
    i32                               ind_logcat_n;                                 // number of elements in the hash table
    bool                              show_tstamp;                                  //   false
    algo::cstring                     tstamp_fmt;                                   //   "%Y/%m/%dT%H:%M:%S.%.6X "
    algo::Fildes                      fildes_stdout;                                //   1
    algo::Fildes                      fildes_stderr;                                //   2
    bool                              pending_eol;                                  //   false
    algo::cstring*                    exec_args_elems;                              // pointer to elements
    u32                               exec_args_n;                                  // number of elements in array
    u32                               exec_args_max;                                // max. capacity of array before realloc
    algo::cstring*                    dirstack_elems;                               // pointer to elements
    u32                               dirstack_n;                                   // number of elements in array
    u32                               dirstack_max;                                 // max. capacity of array before realloc
    algo_lib::trace                   trace;                                        //
};

// Allocate a new piece of memory at least SIZE bytes long.
// If out of memory, return NULL
// Newly allocated memory is initialized to zeros
// func:algo_lib.FDb.sbrk.AllocMem
void*                sbrk_AllocMem(u32 size) __attribute__((__warn_unused_result__, nothrow));
// func:algo_lib.FDb.sbrk.FreeMem
void                 sbrk_FreeMem(void *mem, u32 size) __attribute__((nothrow));

// Free block of memory previously returned by Lpool.
// func:algo_lib.FDb.lpool.FreeMem
void                 lpool_FreeMem(void* mem, u64 size) __attribute__((nothrow));
// Allocate new piece of memory at least SIZE bytes long.
// If not successful, return NULL
// The allocated block is at least 1<<4
// The maximum allocation size is at most 1<<(36+4)
// func:algo_lib.FDb.lpool.AllocMem
void*                lpool_AllocMem(u64 size) __attribute__((__warn_unused_result__, nothrow));
// Add N buffers of some size to the free store
// Reserve NBUF buffers of size BUFSIZE from the base pool (algo_lib::sbrk)
// func:algo_lib.FDb.lpool.ReserveBuffers
bool                 lpool_ReserveBuffers(u64 nbuf, u64 bufsize) __attribute__((nothrow));
// Allocate new block, copy old to new, delete old.
// If the new size is same as old size, do nothing.
// In all other cases, new memory is allocated (i.e. size reduction is not a no-op)
// If no memory, return NULL; old memory remains untouched
// func:algo_lib.FDb.lpool.ReallocMem
void*                lpool_ReallocMem(void* oldmem, u64 old_size, u64 new_size) __attribute__((nothrow));
// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.lpool.Alloc
u8&                  lpool_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.lpool.AllocMaybe
u8*                  lpool_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.lpool.Delete
void                 lpool_Delete(u8 &row) __attribute__((nothrow));

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.fildes.XrefMaybe
bool                 fildes_XrefMaybe(algo_lib::FFildes &row);

// Set all elements of fixed array to value RHS
// func:algo_lib.FDb.temp_strings.Fill
inline void          temp_strings_Fill(const algo::cstring &rhs) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.temp_strings.Find
inline algo::cstring* temp_strings_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Access fixed array temp_strings as aryptr.
// func:algo_lib.FDb.temp_strings.Getary
inline algo::aryptr<algo::cstring> temp_strings_Getary() __attribute__((nothrow));
// Return max number of items in the array
// func:algo_lib.FDb.temp_strings.Max
inline i32           temp_strings_Max() __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.FDb.temp_strings.N
inline i32           temp_strings_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Set contents of fixed array to RHS; Input length is trimmed as necessary
// func:algo_lib.FDb.temp_strings.Setary
inline void          temp_strings_Setary(const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo_lib.FDb.temp_strings.qFind
inline algo::cstring& temp_strings_qFind(u64 t) __attribute__((nothrow));
// Read array from string
// Convert string to field. Return success value
// func:algo_lib.FDb.temp_strings.ReadStrptrMaybe
bool                 temp_strings_ReadStrptrMaybe(algo::strptr in_str) __attribute__((nothrow));

// func:algo_lib.FDb.ArgvIdent.Match
inline bool          ArgvIdentQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.BashQuotesafe.Match
inline bool          BashQuotesafeQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.RegxSqlSpecial.Match
inline bool          RegxSqlSpecialQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.SsimBreakName.Match
inline bool          SsimBreakNameQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.SsimBreakValue.Match
inline bool          SsimBreakValueQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.SsimQuotesafe.Match
inline bool          SsimQuotesafeQ(u32 ch) __attribute__((nothrow));

// Main step
// func:algo_lib.FDb._db.Step
void                 Step();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:algo_lib.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:algo_lib.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:algo_lib.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:algo_lib.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// func:algo_lib.FDb._db.Init
void                 Init() __attribute__((nothrow));
// Load specified ssimfile.
// func:algo_lib.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:algo_lib.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.imtable.Alloc
algo_lib::FImtable&  imtable_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.imtable.AllocMaybe
algo_lib::FImtable*  imtable_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:algo_lib.FDb.imtable.InsertMaybe
algo_lib::FImtable*  imtable_InsertMaybe(const algo::Imtable &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:algo_lib.FDb.imtable.AllocMem
void*                imtable_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.imtable.EmptyQ
inline bool          imtable_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.imtable.Find
inline algo_lib::FImtable* imtable_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.FDb.imtable.Last
inline algo_lib::FImtable* imtable_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:algo_lib.FDb.imtable.N
inline i32           imtable_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:algo_lib.FDb.imtable.RemoveAll
void                 imtable_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.imtable.RemoveLast
void                 imtable_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.FDb.imtable.qFind
inline algo_lib::FImtable& imtable_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.imtable.XrefMaybe
bool                 imtable_XrefMaybe(algo_lib::FImtable &row);

// Return true if hash is empty
// func:algo_lib.FDb.ind_imtable.EmptyQ
inline bool          ind_imtable_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:algo_lib.FDb.ind_imtable.Find
algo_lib::FImtable*  ind_imtable_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:algo_lib.FDb.ind_imtable.GetOrCreate
algo_lib::FImtable&  ind_imtable_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:algo_lib.FDb.ind_imtable.N
inline i32           ind_imtable_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:algo_lib.FDb.ind_imtable.InsertMaybe
bool                 ind_imtable_InsertMaybe(algo_lib::FImtable& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:algo_lib.FDb.ind_imtable.Remove
void                 ind_imtable_Remove(algo_lib::FImtable& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:algo_lib.FDb.ind_imtable.Reserve
void                 ind_imtable_Reserve(int n) __attribute__((nothrow));

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.iohook.XrefMaybe
bool                 iohook_XrefMaybe(algo_lib::FIohook &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.timehook.XrefMaybe
bool                 timehook_XrefMaybe(algo_lib::FTimehook &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.replscope.XrefMaybe
bool                 replscope_XrefMaybe(algo_lib::Replscope &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.error.Alloc
algo_lib::ErrorX&    error_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.error.AllocMaybe
algo_lib::ErrorX*    error_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.error.Delete
void                 error_Delete(algo_lib::ErrorX &row) __attribute__((nothrow));
// Allocate n bytes. If no memory available, return NULL.
// func:algo_lib.FDb.error.AllocMem
void*                error_AllocMem(size_t n) __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:algo_lib.FDb.error.FreeMem
void                 error_FreeMem(void *mem, size_t n) __attribute__((nothrow));
// Reallocate n bytes. If the call fails, return value is NULL.
// In this case, original MEM pointer is untouched.
// func:algo_lib.FDb.error.ReallocMem
void*                error_ReallocMem(void *mem, size_t old_size, size_t new_size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.error.XrefMaybe
bool                 error_XrefMaybe(algo_lib::ErrorX &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.csvparse.XrefMaybe
bool                 csvparse_XrefMaybe(algo_lib::CsvParse &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.regxparse.XrefMaybe
bool                 regxparse_XrefMaybe(algo_lib::RegxParse &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.regx.XrefMaybe
bool                 regx_XrefMaybe(algo_lib::Regx &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.tabulate.XrefMaybe
bool                 tabulate_XrefMaybe(algo_lib::Tabulate &row);

// Remove all elements from heap and free memory used by the array.
// func:algo_lib.FDb.bh_timehook.Dealloc
void                 bh_timehook_Dealloc() __attribute__((nothrow));
// Return true if index is empty
// func:algo_lib.FDb.bh_timehook.EmptyQ
inline bool          bh_timehook_EmptyQ() __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:algo_lib.FDb.bh_timehook.First
inline algo_lib::FTimehook* bh_timehook_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in index, false otherwise
// func:algo_lib.FDb.bh_timehook.InBheapQ
inline bool          bh_timehook_InBheapQ(algo_lib::FTimehook& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row. Row must not already be in index. If row is already in index, do nothing.
// func:algo_lib.FDb.bh_timehook.Insert
void                 bh_timehook_Insert(algo_lib::FTimehook& row) __attribute__((nothrow));
// Return number of items in the heap
// func:algo_lib.FDb.bh_timehook.N
inline i32           bh_timehook_N() __attribute__((__warn_unused_result__, nothrow, pure));
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
// If first item of the is changed, update fstep:algo_lib.FDb.bh_timehook
// func:algo_lib.FDb.bh_timehook.Reheap
i32                  bh_timehook_Reheap(algo_lib::FTimehook& row) __attribute__((nothrow));
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
// Update fstep:algo_lib.FDb.bh_timehook
// func:algo_lib.FDb.bh_timehook.ReheapFirst
i32                  bh_timehook_ReheapFirst() __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:algo_lib.FDb.bh_timehook.Remove
void                 bh_timehook_Remove(algo_lib::FTimehook& row) __attribute__((nothrow));
// Remove all elements from binary heap
// func:algo_lib.FDb.bh_timehook.RemoveAll
void                 bh_timehook_RemoveAll() __attribute__((nothrow));
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
// func:algo_lib.FDb.bh_timehook.RemoveFirst
algo_lib::FTimehook* bh_timehook_RemoveFirst() __attribute__((nothrow));
// Reserve space in index for N more elements
// func:algo_lib.FDb.bh_timehook.Reserve
void                 bh_timehook_Reserve(int n) __attribute__((nothrow));
// First element of index changed.
// func:algo_lib.FDb.bh_timehook.FirstChanged
void                 bh_timehook_FirstChanged() __attribute__((nothrow));
// Update cycles count from previous clock capture
// func:algo_lib.FDb.bh_timehook.UpdateCycles
void                 bh_timehook_UpdateCycles() __attribute__((nothrow));
// func:algo_lib.FDb.bh_timehook.Step
// this function is 'extrn' and implemented by user
void                 bh_timehook_Step() __attribute__((nothrow));
// func:algo_lib.FDb.bh_timehook.Call
inline void          bh_timehook_Call() __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.dispsigcheck.Alloc
algo_lib::FDispsigcheck& dispsigcheck_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.dispsigcheck.AllocMaybe
algo_lib::FDispsigcheck* dispsigcheck_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:algo_lib.FDb.dispsigcheck.InsertMaybe
algo_lib::FDispsigcheck* dispsigcheck_InsertMaybe(const dmmeta::Dispsigcheck &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:algo_lib.FDb.dispsigcheck.AllocMem
void*                dispsigcheck_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.dispsigcheck.EmptyQ
inline bool          dispsigcheck_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.dispsigcheck.Find
inline algo_lib::FDispsigcheck* dispsigcheck_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.FDb.dispsigcheck.Last
inline algo_lib::FDispsigcheck* dispsigcheck_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:algo_lib.FDb.dispsigcheck.N
inline i32           dispsigcheck_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.dispsigcheck.RemoveLast
void                 dispsigcheck_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.FDb.dispsigcheck.qFind
inline algo_lib::FDispsigcheck& dispsigcheck_qFind(u64 t) __attribute__((nothrow, pure));
// func:algo_lib.FDb.dispsigcheck.InputMaybe
// this function is 'extrn' and implemented by user
bool                 dispsigcheck_InputMaybe(dmmeta::Dispsigcheck &elem) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.dispsigcheck.XrefMaybe
bool                 dispsigcheck_XrefMaybe(algo_lib::FDispsigcheck &row);

// Return true if hash is empty
// func:algo_lib.FDb.ind_dispsigcheck.EmptyQ
inline bool          ind_dispsigcheck_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:algo_lib.FDb.ind_dispsigcheck.Find
algo_lib::FDispsigcheck* ind_dispsigcheck_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:algo_lib.FDb.ind_dispsigcheck.GetOrCreate
algo_lib::FDispsigcheck& ind_dispsigcheck_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:algo_lib.FDb.ind_dispsigcheck.N
inline i32           ind_dispsigcheck_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:algo_lib.FDb.ind_dispsigcheck.InsertMaybe
bool                 ind_dispsigcheck_InsertMaybe(algo_lib::FDispsigcheck& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:algo_lib.FDb.ind_dispsigcheck.Remove
void                 ind_dispsigcheck_Remove(algo_lib::FDispsigcheck& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:algo_lib.FDb.ind_dispsigcheck.Reserve
void                 ind_dispsigcheck_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.imdb.Alloc
algo_lib::FImdb&     imdb_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.imdb.AllocMaybe
algo_lib::FImdb*     imdb_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:algo_lib.FDb.imdb.InsertMaybe
algo_lib::FImdb*     imdb_InsertMaybe(const algo::Imdb &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:algo_lib.FDb.imdb.AllocMem
inline void*         imdb_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.imdb.EmptyQ
inline bool          imdb_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.imdb.Find
inline algo_lib::FImdb* imdb_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.FDb.imdb.Getary
inline algo::aryptr<algo_lib::FImdb> imdb_Getary() __attribute__((nothrow));
// Return constant 32 -- max. number of items in the pool
// func:algo_lib.FDb.imdb.Max
inline i32           imdb_Max() __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.FDb.imdb.N
inline i32           imdb_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Destroy all elements of Inlary
// func:algo_lib.FDb.imdb.RemoveAll
void                 imdb_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.imdb.RemoveLast
void                 imdb_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo_lib.FDb.imdb.qFind
inline algo_lib::FImdb& imdb_qFind(u64 t) __attribute__((nothrow));
// Compute row id of element given element's address
// func:algo_lib.FDb.imdb.rowid_Get
inline u64           imdb_rowid_Get(algo_lib::FImdb &row) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.imdb.XrefMaybe
bool                 imdb_XrefMaybe(algo_lib::FImdb &row);

// Return true if hash is empty
// func:algo_lib.FDb.ind_imdb.EmptyQ
inline bool          ind_imdb_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:algo_lib.FDb.ind_imdb.Find
algo_lib::FImdb*     ind_imdb_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:algo_lib.FDb.ind_imdb.GetOrCreate
algo_lib::FImdb&     ind_imdb_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:algo_lib.FDb.ind_imdb.N
inline i32           ind_imdb_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:algo_lib.FDb.ind_imdb.InsertMaybe
bool                 ind_imdb_InsertMaybe(algo_lib::FImdb& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:algo_lib.FDb.ind_imdb.Remove
void                 ind_imdb_Remove(algo_lib::FImdb& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:algo_lib.FDb.ind_imdb.Reserve
void                 ind_imdb_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.malloc.Alloc
u8&                  malloc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.malloc.AllocMaybe
u8*                  malloc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.malloc.Delete
void                 malloc_Delete(u8 &row) __attribute__((nothrow));
// Allocate n bytes. If no memory available, return NULL.
// func:algo_lib.FDb.malloc.AllocMem
void*                malloc_AllocMem(size_t n) __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:algo_lib.FDb.malloc.FreeMem
void                 malloc_FreeMem(void *mem, size_t n) __attribute__((nothrow));
// Reallocate n bytes. If the call fails, return value is NULL.
// In this case, original MEM pointer is untouched.
// func:algo_lib.FDb.malloc.ReallocMem
void*                malloc_ReallocMem(void *mem, size_t old_size, size_t new_size) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.txtcell.Alloc
algo_lib::FTxtcell&  txtcell_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.txtcell.AllocMaybe
algo_lib::FTxtcell*  txtcell_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.txtcell.Delete
void                 txtcell_Delete(algo_lib::FTxtcell &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:algo_lib.FDb.txtcell.AllocMem
void*                txtcell_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:algo_lib.FDb.txtcell.FreeMem
void                 txtcell_FreeMem(algo_lib::FTxtcell &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:algo_lib.FDb.txtcell.Reserve
u64                  txtcell_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:algo_lib.FDb.txtcell.ReserveMem
u64                  txtcell_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.txtcell.XrefMaybe
bool                 txtcell_XrefMaybe(algo_lib::FTxtcell &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.txtrow.Alloc
algo_lib::FTxtrow&   txtrow_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.txtrow.AllocMaybe
algo_lib::FTxtrow*   txtrow_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.txtrow.Delete
void                 txtrow_Delete(algo_lib::FTxtrow &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:algo_lib.FDb.txtrow.AllocMem
void*                txtrow_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:algo_lib.FDb.txtrow.FreeMem
void                 txtrow_FreeMem(algo_lib::FTxtrow &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:algo_lib.FDb.txtrow.Reserve
u64                  txtrow_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:algo_lib.FDb.txtrow.ReserveMem
u64                  txtrow_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.txtrow.XrefMaybe
bool                 txtrow_XrefMaybe(algo_lib::FTxtrow &row);

// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.txttbl.XrefMaybe
bool                 txttbl_XrefMaybe(algo_lib::FTxttbl &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.replvar.Alloc
algo_lib::FReplvar&  replvar_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.replvar.AllocMaybe
algo_lib::FReplvar*  replvar_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:algo_lib.FDb.replvar.Delete
void                 replvar_Delete(algo_lib::FReplvar &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:algo_lib.FDb.replvar.AllocMem
void*                replvar_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:algo_lib.FDb.replvar.FreeMem
void                 replvar_FreeMem(algo_lib::FReplvar &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:algo_lib.FDb.replvar.Reserve
u64                  replvar_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:algo_lib.FDb.replvar.ReserveMem
u64                  replvar_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.replvar.XrefMaybe
bool                 replvar_XrefMaybe(algo_lib::FReplvar &row);

// Invoke function by pointer
// func:algo_lib.FDb.h_fatalerror.Call
inline void          h_fatalerror_Call() __attribute__((nothrow));
// Assign 0-argument hook with no context pointer
// func:algo_lib.FDb.h_fatalerror.Set0
inline void          h_fatalerror_Set0(void (*fcn)() ) __attribute__((nothrow));
// Assign 1-argument hook with context pointer
// func:algo_lib.FDb.h_fatalerror.Set1
template<class T> inline void h_fatalerror_Set1(T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));
// Assign 2-argument hook with context pointer
// func:algo_lib.FDb.h_fatalerror.Set2
template<class T> inline void h_fatalerror_Set2(T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));

// Update cycles count from previous clock capture
// func:algo_lib.FDb.giveup_time.UpdateCycles
void                 giveup_time_UpdateCycles() __attribute__((nothrow));
// func:algo_lib.FDb.giveup_time.Step
// this function is 'extrn' and implemented by user
void                 giveup_time_Step() __attribute__((nothrow));
// func:algo_lib.FDb.giveup_time.Call
inline void          giveup_time_Call() __attribute__((nothrow));

// func:algo_lib.FDb.DigitChar.Match
inline bool          DigitCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.NewLineChar.Match
inline bool          NewLineCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.WhiteChar.Match
inline bool          WhiteCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.DirSep.Match
inline bool          DirSepQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.IdentChar.Match
inline bool          IdentCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.IdentStart.Match
inline bool          IdentStartQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.AlphaChar.Match
inline bool          AlphaCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.HexChar.Match
inline bool          HexCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.UpperChar.Match
inline bool          UpperCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.CmdLineNameBreak.Match
inline bool          CmdLineNameBreakQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.CmdLineValueBreak.Match
inline bool          CmdLineValueBreakQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.WordSeparator.Match
inline bool          WordSeparatorQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.LowerChar.Match
inline bool          LowerCharQ(u32 ch) __attribute__((nothrow));

// func:algo_lib.FDb.Urlsafe.Match
inline bool          UrlsafeQ(u32 ch) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.FDb.logcat.Alloc
algo_lib::FLogcat&   logcat_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.FDb.logcat.AllocMaybe
algo_lib::FLogcat*   logcat_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:algo_lib.FDb.logcat.InsertMaybe
algo_lib::FLogcat*   logcat_InsertMaybe(const dmmeta::Logcat &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:algo_lib.FDb.logcat.AllocMem
inline void*         logcat_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.logcat.EmptyQ
inline bool          logcat_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.logcat.Find
inline algo_lib::FLogcat* logcat_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.FDb.logcat.Getary
inline algo::aryptr<algo_lib::FLogcat> logcat_Getary() __attribute__((nothrow));
// Return constant 3 -- max. number of items in the pool
// func:algo_lib.FDb.logcat.Max
inline i32           logcat_Max() __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.FDb.logcat.N
inline i32           logcat_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Destroy all elements of Inlary
// func:algo_lib.FDb.logcat.RemoveAll
void                 logcat_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.logcat.RemoveLast
void                 logcat_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo_lib.FDb.logcat.qFind
inline algo_lib::FLogcat& logcat_qFind(u64 t) __attribute__((nothrow));
// Compute row id of element given element's address
// func:algo_lib.FDb.logcat.rowid_Get
inline u64           logcat_rowid_Get(algo_lib::FLogcat &row) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:algo_lib.FDb.logcat.XrefMaybe
bool                 logcat_XrefMaybe(algo_lib::FLogcat &row);

// Return true if hash is empty
// func:algo_lib.FDb.ind_logcat.EmptyQ
inline bool          ind_logcat_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:algo_lib.FDb.ind_logcat.Find
algo_lib::FLogcat*   ind_logcat_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:algo_lib.FDb.ind_logcat.GetOrCreate
algo_lib::FLogcat&   ind_logcat_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:algo_lib.FDb.ind_logcat.N
inline i32           ind_logcat_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:algo_lib.FDb.ind_logcat.InsertMaybe
bool                 ind_logcat_InsertMaybe(algo_lib::FLogcat& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:algo_lib.FDb.ind_logcat.Remove
void                 ind_logcat_Remove(algo_lib::FLogcat& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:algo_lib.FDb.ind_logcat.Reserve
void                 ind_logcat_Reserve(int n) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.FDb.exec_args.Addary
algo::aryptr<algo::cstring> exec_args_Addary(algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.FDb.exec_args.Alloc
algo::cstring&       exec_args_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.FDb.exec_args.AllocAt
algo::cstring&       exec_args_AllocAt(int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.FDb.exec_args.AllocN
algo::aryptr<algo::cstring> exec_args_AllocN(int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.exec_args.EmptyQ
inline bool          exec_args_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.exec_args.Find
inline algo::cstring* exec_args_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.FDb.exec_args.Getary
inline algo::aryptr<algo::cstring> exec_args_Getary() __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.FDb.exec_args.Last
inline algo::cstring* exec_args_Last() __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.FDb.exec_args.Max
inline i32           exec_args_Max() __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.FDb.exec_args.N
inline i32           exec_args_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.FDb.exec_args.Remove
void                 exec_args_Remove(u32 i) __attribute__((nothrow));
// func:algo_lib.FDb.exec_args.RemoveAll
void                 exec_args_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.exec_args.RemoveLast
void                 exec_args_RemoveLast() __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.FDb.exec_args.Reserve
inline void          exec_args_Reserve(int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.FDb.exec_args.AbsReserve
void                 exec_args_AbsReserve(int n) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.FDb.exec_args.qFind
inline algo::cstring& exec_args_qFind(u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.FDb.exec_args.qLast
inline algo::cstring& exec_args_qLast() __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.FDb.exec_args.rowid_Get
inline u64           exec_args_rowid_Get(algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.FDb.exec_args.AllocNVal
algo::aryptr<algo::cstring> exec_args_AllocNVal(int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.FDb.exec_args.ReadStrptrMaybe
bool                 exec_args_ReadStrptrMaybe(algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.FDb.dirstack.Addary
algo::aryptr<algo::cstring> dirstack_Addary(algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.FDb.dirstack.Alloc
algo::cstring&       dirstack_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.FDb.dirstack.AllocAt
algo::cstring&       dirstack_AllocAt(int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.FDb.dirstack.AllocN
algo::aryptr<algo::cstring> dirstack_AllocN(int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.FDb.dirstack.EmptyQ
inline bool          dirstack_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FDb.dirstack.Find
inline algo::cstring* dirstack_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.FDb.dirstack.Getary
inline algo::aryptr<algo::cstring> dirstack_Getary() __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.FDb.dirstack.Last
inline algo::cstring* dirstack_Last() __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.FDb.dirstack.Max
inline i32           dirstack_Max() __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.FDb.dirstack.N
inline i32           dirstack_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.FDb.dirstack.Remove
void                 dirstack_Remove(u32 i) __attribute__((nothrow));
// func:algo_lib.FDb.dirstack.RemoveAll
void                 dirstack_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.FDb.dirstack.RemoveLast
void                 dirstack_RemoveLast() __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.FDb.dirstack.Reserve
inline void          dirstack_Reserve(int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.FDb.dirstack.AbsReserve
void                 dirstack_AbsReserve(int n) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.FDb.dirstack.qFind
inline algo::cstring& dirstack_qFind(u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.FDb.dirstack.qLast
inline algo::cstring& dirstack_qLast() __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.FDb.dirstack.rowid_Get
inline u64           dirstack_rowid_Get(algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.FDb.dirstack.AllocNVal
algo::aryptr<algo::cstring> dirstack_AllocNVal(int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.FDb.dirstack.ReadStrptrMaybe
bool                 dirstack_ReadStrptrMaybe(algo::strptr in_str) __attribute__((nothrow));

// cursor points to valid item
// func:algo_lib.FDb.temp_strings_curs.Reset
inline void          _db_temp_strings_curs_Reset(_db_temp_strings_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.temp_strings_curs.ValidQ
inline bool          _db_temp_strings_curs_ValidQ(_db_temp_strings_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.temp_strings_curs.Next
inline void          _db_temp_strings_curs_Next(_db_temp_strings_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.temp_strings_curs.Access
inline algo::cstring& _db_temp_strings_curs_Access(_db_temp_strings_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.imtable_curs.Reset
inline void          _db_imtable_curs_Reset(_db_imtable_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.imtable_curs.ValidQ
inline bool          _db_imtable_curs_ValidQ(_db_imtable_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.imtable_curs.Next
inline void          _db_imtable_curs_Next(_db_imtable_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.imtable_curs.Access
inline algo_lib::FImtable& _db_imtable_curs_Access(_db_imtable_curs &curs) __attribute__((nothrow));
// func:algo_lib.FDb.bh_timehook_curs.Reserve
void                 _db_bh_timehook_curs_Reserve(_db_bh_timehook_curs &curs, int n);
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
// func:algo_lib.FDb.bh_timehook_curs.Reset
void                 _db_bh_timehook_curs_Reset(_db_bh_timehook_curs &curs, algo_lib::FDb &parent);
// Advance cursor.
// func:algo_lib.FDb.bh_timehook_curs.Next
void                 _db_bh_timehook_curs_Next(_db_bh_timehook_curs &curs);
// Access current element. If not more elements, return NULL
// func:algo_lib.FDb.bh_timehook_curs.Access
inline algo_lib::FTimehook& _db_bh_timehook_curs_Access(_db_bh_timehook_curs &curs) __attribute__((nothrow));
// Return true if Access() will return non-NULL.
// func:algo_lib.FDb.bh_timehook_curs.ValidQ
inline bool          _db_bh_timehook_curs_ValidQ(_db_bh_timehook_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.dispsigcheck_curs.Reset
inline void          _db_dispsigcheck_curs_Reset(_db_dispsigcheck_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.dispsigcheck_curs.ValidQ
inline bool          _db_dispsigcheck_curs_ValidQ(_db_dispsigcheck_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.dispsigcheck_curs.Next
inline void          _db_dispsigcheck_curs_Next(_db_dispsigcheck_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.dispsigcheck_curs.Access
inline algo_lib::FDispsigcheck& _db_dispsigcheck_curs_Access(_db_dispsigcheck_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.imdb_curs.Reset
inline void          _db_imdb_curs_Reset(_db_imdb_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.imdb_curs.ValidQ
inline bool          _db_imdb_curs_ValidQ(_db_imdb_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.imdb_curs.Next
inline void          _db_imdb_curs_Next(_db_imdb_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.imdb_curs.Access
inline algo_lib::FImdb& _db_imdb_curs_Access(_db_imdb_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.FDb..Init
void                 FDb_Init();
// cursor points to valid item
// func:algo_lib.FDb.logcat_curs.Reset
inline void          _db_logcat_curs_Reset(_db_logcat_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.logcat_curs.ValidQ
inline bool          _db_logcat_curs_ValidQ(_db_logcat_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.logcat_curs.Next
inline void          _db_logcat_curs_Next(_db_logcat_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.logcat_curs.Access
inline algo_lib::FLogcat& _db_logcat_curs_Access(_db_logcat_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.exec_args_curs.Next
inline void          _db_exec_args_curs_Next(_db_exec_args_curs &curs) __attribute__((nothrow));
// func:algo_lib.FDb.exec_args_curs.Reset
inline void          _db_exec_args_curs_Reset(_db_exec_args_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.exec_args_curs.ValidQ
inline bool          _db_exec_args_curs_ValidQ(_db_exec_args_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.exec_args_curs.Access
inline algo::cstring& _db_exec_args_curs_Access(_db_exec_args_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FDb.dirstack_curs.Next
inline void          _db_dirstack_curs_Next(_db_dirstack_curs &curs) __attribute__((nothrow));
// func:algo_lib.FDb.dirstack_curs.Reset
inline void          _db_dirstack_curs_Reset(_db_dirstack_curs &curs, algo_lib::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FDb.dirstack_curs.ValidQ
inline bool          _db_dirstack_curs_ValidQ(_db_dirstack_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FDb.dirstack_curs.Access
inline algo::cstring& _db_dirstack_curs_Access(_db_dirstack_curs &curs) __attribute__((nothrow));
// func:algo_lib.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- algo_lib.FDispsigcheck
// create: algo_lib.FDb.dispsigcheck (Lary)
// global access: dispsigcheck (Lary, by rowid)
// global access: ind_dispsigcheck (Thash, hash field dispsig)
struct FDispsigcheck { // algo_lib.FDispsigcheck
    algo_lib::FDispsigcheck*   ind_dispsigcheck_next;   // hash next
    algo::Smallstr50           dispsig;                 //
    algo::Sha1sig              signature;               //
    // func:algo_lib.FDispsigcheck..AssignOp
    inline algo_lib::FDispsigcheck& operator =(const algo_lib::FDispsigcheck &rhs) = delete;
    // func:algo_lib.FDispsigcheck..CopyCtor
    inline               FDispsigcheck(const algo_lib::FDispsigcheck &rhs) = delete;
private:
    // func:algo_lib.FDispsigcheck..Ctor
    inline               FDispsigcheck() __attribute__((nothrow));
    // func:algo_lib.FDispsigcheck..Dtor
    inline               ~FDispsigcheck() __attribute__((nothrow));
    friend algo_lib::FDispsigcheck& dispsigcheck_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::FDispsigcheck* dispsigcheck_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 dispsigcheck_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:algo_lib.FDispsigcheck.msghdr.CopyOut
void                 dispsigcheck_CopyOut(algo_lib::FDispsigcheck &row, dmmeta::Dispsigcheck &out) __attribute__((nothrow));
// Copy fields in to row
// func:algo_lib.FDispsigcheck.msghdr.CopyIn
void                 dispsigcheck_CopyIn(algo_lib::FDispsigcheck &row, dmmeta::Dispsigcheck &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FDispsigcheck..Init
inline void          FDispsigcheck_Init(algo_lib::FDispsigcheck& dispsigcheck);
// func:algo_lib.FDispsigcheck..Uninit
void                 FDispsigcheck_Uninit(algo_lib::FDispsigcheck& dispsigcheck) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.FDispsigcheck.String  printfmt:Tuple
// func:algo_lib.FDispsigcheck..Print
void                 FDispsigcheck_Print(algo_lib::FDispsigcheck& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FImtable
// create: algo_lib.FDb.imtable (Lary)
// global access: imtable (Lary, by rowid)
// global access: ind_imtable (Thash, hash field imtable)
struct FImtable { // algo_lib.FImtable
    algo_lib::FImtable*       ind_imtable_next;   // hash next
    algo::Smallstr50          imtable;            // Table name
    algo::Smallstr100         elem_type;          // Element type name
    algo::ImrowRowidFindFcn   c_RowidFind;        //   0  Function to find element by rowid (may be NULL)
    algo::ImrowXrefXFcn       XrefX;              //   0  Function to x-reference an element (may be NULL)
    algo::ImrowNItemsFcn      NItems;             //   0  Return number of elements in the table
    algo::ImrowPrintFcn       Print;              //   0  Convert specified element to string (may be NULL)
    i32                       size;               //   0  Size of one element (for fixed-width elements only)
    algo::Smallstr50          ssimfile;           // Ssimfile name (if associated)
    algo::Comment             comment;            //
    // func:algo_lib.FImtable..AssignOp
    algo_lib::FImtable&  operator =(const algo_lib::FImtable &rhs) = delete;
    // func:algo_lib.FImtable..CopyCtor
    FImtable(const algo_lib::FImtable &rhs) = delete;
private:
    // func:algo_lib.FImtable..Ctor
    inline               FImtable() __attribute__((nothrow));
    // func:algo_lib.FImtable..Dtor
    inline               ~FImtable() __attribute__((nothrow));
    friend algo_lib::FImtable&  imtable_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::FImtable*  imtable_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 imtable_RemoveAll() __attribute__((nothrow));
    friend void                 imtable_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:algo_lib.FImtable.msghdr.CopyOut
void                 imtable_CopyOut(algo_lib::FImtable &row, algo::Imtable &out) __attribute__((nothrow));
// Copy fields in to row
// func:algo_lib.FImtable.msghdr.CopyIn
void                 imtable_CopyIn(algo_lib::FImtable &row, algo::Imtable &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FImtable..Init
inline void          FImtable_Init(algo_lib::FImtable& imtable);
// func:algo_lib.FImtable..Uninit
void                 FImtable_Uninit(algo_lib::FImtable& imtable) __attribute__((nothrow));

// --- algo_lib.FIohook
// create: algo_lib.FDb.iohook (Cppstack)
// access: algo_lib.FIohook.callback (Hook)
struct FIohook { // algo_lib.FIohook
    algo_lib::iohook_callback_hook   callback;       //   NULL  Pointer to a function
    u64                              callback_ctx;   //   0  Callback context
    algo::Fildes                     fildes;         // File descriptor, possibly in epoll
    algo::IOEvtFlags                 evt_flags;      // Flags subscribed to
    algo::IOEvtFlags                 flags;          // Flags during callback
    bool                             in_epoll;       //   false  Registered in epoll?
    bool                             nodelete;       //   false  File descriptor is shared -- do not close()
    // func:algo_lib.FIohook..Ctor
    inline               FIohook() __attribute__((nothrow));
    // func:algo_lib.FIohook..Dtor
    inline               ~FIohook() __attribute__((nothrow));
};

// Invoke function by pointer
// func:algo_lib.FIohook.callback.Call
inline void          callback_Call(algo_lib::FIohook& iohook, algo_lib::FIohook& arg) __attribute__((nothrow));
// Assign 0-argument hook with no context pointer
// func:algo_lib.FIohook.callback.Set0
inline void          callback_Set0(algo_lib::FIohook& iohook, void (*fcn)() ) __attribute__((nothrow));
// Assign 1-argument hook with context pointer
// func:algo_lib.FIohook.callback.Set1
template<class T> inline void callback_Set1(algo_lib::FIohook& iohook, T& ctx, void (*fcn)(T&) ) __attribute__((nothrow));
// Assign 2-argument hook with context pointer
// func:algo_lib.FIohook.callback.Set2
template<class T> inline void callback_Set2(algo_lib::FIohook& iohook, T& ctx, void (*fcn)(T&, algo_lib::FIohook& arg) ) __attribute__((nothrow));

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fildes of algo_lib::FIohook
// func:algo_lib.FIohook.fildes.Cleanup
// this function is 'extrn' and implemented by user
void                 fildes_Cleanup(algo_lib::FIohook& iohook) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FIohook..Init
inline void          FIohook_Init(algo_lib::FIohook& iohook);
// func:algo_lib.FIohook..Uninit
inline void          FIohook_Uninit(algo_lib::FIohook& iohook) __attribute__((nothrow));

// --- algo_lib.FReplvar
// create: algo_lib.FDb.replvar (Tpool)
// access: algo_lib.Replscope.ind_replvar (Thash)
struct FReplvar { // algo_lib.FReplvar
    algo_lib::FReplvar*    replvar_next;       // Pointer to next free element int tpool
    algo_lib::Replscope*   p_replscope;        // reference to parent row
    algo::cstring          key;                // Key
    algo::cstring          value;              // Value
    i32                    nsubst;             //   0  Number of times variable accessed
    algo_lib::FReplvar*    ind_replvar_next;   // hash next
    // func:algo_lib.FReplvar..AssignOp
    inline algo_lib::FReplvar& operator =(const algo_lib::FReplvar &rhs) = delete;
    // func:algo_lib.FReplvar..CopyCtor
    inline               FReplvar(const algo_lib::FReplvar &rhs) = delete;
private:
    // func:algo_lib.FReplvar..Ctor
    inline               FReplvar() __attribute__((nothrow));
    // func:algo_lib.FReplvar..Dtor
    inline               ~FReplvar() __attribute__((nothrow));
    friend algo_lib::FReplvar&  replvar_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::FReplvar*  replvar_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 replvar_Delete(algo_lib::FReplvar &row) __attribute__((nothrow));
};

// Set all fields to initial values.
// func:algo_lib.FReplvar..Init
inline void          FReplvar_Init(algo_lib::FReplvar& replvar);
// func:algo_lib.FReplvar..Uninit
void                 FReplvar_Uninit(algo_lib::FReplvar& replvar) __attribute__((nothrow));

// --- algo_lib.FTempfile
struct FTempfile { // algo_lib.FTempfile
    algo::cstring       filename;   //
    algo_lib::FFildes   fildes;     //
    // func:algo_lib.FTempfile..Ctor
    inline               FTempfile() __attribute__((nothrow));
    // func:algo_lib.FTempfile..Dtor
    inline               ~FTempfile() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field fildes of algo_lib::FTempfile
// func:algo_lib.FTempfile.fildes.Cleanup
// this function is 'extrn' and implemented by user
void                 fildes_Cleanup(algo_lib::FTempfile& parent) __attribute__((nothrow));

// func:algo_lib.FTempfile..Uninit
inline void          FTempfile_Uninit(algo_lib::FTempfile& parent) __attribute__((nothrow));

// --- algo_lib.FTxtcell
// create: algo_lib.FDb.txtcell (Tpool)
// access: algo_lib.FTxtrow.c_txtcell (Ptrary)
struct FTxtcell { // algo_lib.FTxtcell
    algo_lib::FTxtcell*   txtcell_next;              // Pointer to next free element int tpool
    algo_lib::FTxtrow*    p_txtrow;                  // reference to parent row
    algo::TextJust        justify;                   //   algo_TextJust_j_left  Justification of text within cell
    algo::TermStyle       style;                     // Text style
    i32                   span;                      //   1  Span in columns
    i32                   width;                     //   0  Width in chars
    algo::cstring         text;                      // Cell contents
    algo::cstring         rsep;                      // Right separator
    bool                  txtrow_c_txtcell_in_ary;   //   false  membership flag
    // func:algo_lib.FTxtcell..AssignOp
    inline algo_lib::FTxtcell& operator =(const algo_lib::FTxtcell &rhs) = delete;
    // func:algo_lib.FTxtcell..CopyCtor
    inline               FTxtcell(const algo_lib::FTxtcell &rhs) = delete;
    // func:algo_lib.FTxtcell..FieldwiseCtor
    explicit inline               FTxtcell(algo_lib::FTxtrow* in_p_txtrow, algo::TextJust in_justify, algo::TermStyle in_style, i32 in_span, i32 in_width, const algo::strptr& in_text, const algo::strptr& in_rsep, bool in_txtrow_c_txtcell_in_ary) __attribute__((nothrow));
private:
    // func:algo_lib.FTxtcell..Ctor
    inline               FTxtcell() __attribute__((nothrow));
    // func:algo_lib.FTxtcell..Dtor
    inline               ~FTxtcell() __attribute__((nothrow));
    friend algo_lib::FTxtcell&  txtcell_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::FTxtcell*  txtcell_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 txtcell_Delete(algo_lib::FTxtcell &row) __attribute__((nothrow));
};

// Set all fields to initial values.
// func:algo_lib.FTxtcell..Init
inline void          FTxtcell_Init(algo_lib::FTxtcell& txtcell);
// func:algo_lib.FTxtcell..Uninit
void                 FTxtcell_Uninit(algo_lib::FTxtcell& txtcell) __attribute__((nothrow));

// --- algo_lib.FTxtrow
// create: algo_lib.FDb.txtrow (Tpool)
// access: algo_lib.FTxtcell.p_txtrow (Upptr)
// access: algo_lib.FTxttbl.c_txtrow (Ptrary)
struct FTxtrow { // algo_lib.FTxtrow: Table row. Todo: absolute index for cells?
    algo_lib::FTxtrow*     txtrow_next;              // Pointer to next free element int tpool
    algo_lib::FTxttbl*     p_txttbl;                 // reference to parent row
    bool                   select;                   //   true  Select for processing
    bool                   ishdr;                    //   false  Is header row
    algo::cstring          sortkey;                  // Sort key
    algo_lib::FTxtcell**   c_txtcell_elems;          // array of pointers
    u32                    c_txtcell_n;              // array of pointers
    u32                    c_txtcell_max;            // capacity of allocated array
    bool                   txttbl_c_txtrow_in_ary;   //   false  membership flag
    // reftype Ptrary of algo_lib.FTxtrow.c_txtcell prohibits copy
    // func:algo_lib.FTxtrow..AssignOp
    inline algo_lib::FTxtrow& operator =(const algo_lib::FTxtrow &rhs) = delete;
    // reftype Ptrary of algo_lib.FTxtrow.c_txtcell prohibits copy
    // func:algo_lib.FTxtrow..CopyCtor
    inline               FTxtrow(const algo_lib::FTxtrow &rhs) = delete;
private:
    // func:algo_lib.FTxtrow..Ctor
    inline               FTxtrow() __attribute__((nothrow));
    // func:algo_lib.FTxtrow..Dtor
    inline               ~FTxtrow() __attribute__((nothrow));
    friend algo_lib::FTxtrow&   txtrow_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend algo_lib::FTxtrow*   txtrow_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 txtrow_Delete(algo_lib::FTxtrow &row) __attribute__((nothrow));
};

// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
// func:algo_lib.FTxtrow.sortkey.Lt
inline bool          sortkey_Lt(algo_lib::FTxtrow& txtrow, algo_lib::FTxtrow &rhs) __attribute__((nothrow));
// Compare two fields.
// Comparison uses version sort (detect embedded integers).
// Comparison is case-insensitive.
// func:algo_lib.FTxtrow.sortkey.Cmp
i32                  sortkey_Cmp(algo_lib::FTxtrow& txtrow, algo_lib::FTxtrow &rhs) __attribute__((nothrow));

// Delete all elements pointed to by the index.
// func:algo_lib.FTxtrow.c_txtcell.Cascdel
void                 c_txtcell_Cascdel(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));
// Return true if index is empty
// func:algo_lib.FTxtrow.c_txtcell.EmptyQ
inline bool          c_txtcell_EmptyQ(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FTxtrow.c_txtcell.Find
inline algo_lib::FTxtcell* c_txtcell_Find(algo_lib::FTxtrow& txtrow, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:algo_lib.FTxtrow.c_txtcell.Getary
inline algo::aryptr<algo_lib::FTxtcell*> c_txtcell_Getary(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:algo_lib.FTxtrow.c_txtcell.Insert
void                 c_txtcell_Insert(algo_lib::FTxtrow& txtrow, algo_lib::FTxtcell& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:algo_lib.FTxtrow.c_txtcell.InsertMaybe
bool                 c_txtcell_InsertMaybe(algo_lib::FTxtrow& txtrow, algo_lib::FTxtcell& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:algo_lib.FTxtrow.c_txtcell.N
inline i32           c_txtcell_N(const algo_lib::FTxtrow& txtrow) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:algo_lib.FTxtrow.c_txtcell.Remove
void                 c_txtcell_Remove(algo_lib::FTxtrow& txtrow, algo_lib::FTxtcell& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:algo_lib.FTxtrow.c_txtcell.RemoveAll
inline void          c_txtcell_RemoveAll(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:algo_lib.FTxtrow.c_txtcell.Reserve
void                 c_txtcell_Reserve(algo_lib::FTxtrow& txtrow, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:algo_lib.FTxtrow.c_txtcell.qFind
inline algo_lib::FTxtcell& c_txtcell_qFind(algo_lib::FTxtrow& txtrow, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:algo_lib.FTxtrow.c_txtcell.InAryQ
inline bool          txtrow_c_txtcell_InAryQ(algo_lib::FTxtcell& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:algo_lib.FTxtrow.c_txtcell.qLast
inline algo_lib::FTxtcell& c_txtcell_qLast(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo_lib.FTxtrow..Init
inline void          FTxtrow_Init(algo_lib::FTxtrow& txtrow);
// func:algo_lib.FTxtrow.c_txtcell_curs.Reset
inline void          txtrow_c_txtcell_curs_Reset(txtrow_c_txtcell_curs &curs, algo_lib::FTxtrow &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FTxtrow.c_txtcell_curs.ValidQ
inline bool          txtrow_c_txtcell_curs_ValidQ(txtrow_c_txtcell_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FTxtrow.c_txtcell_curs.Next
inline void          txtrow_c_txtcell_curs_Next(txtrow_c_txtcell_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FTxtrow.c_txtcell_curs.Access
inline algo_lib::FTxtcell& txtrow_c_txtcell_curs_Access(txtrow_c_txtcell_curs &curs) __attribute__((nothrow));
// func:algo_lib.FTxtrow..Uninit
void                 FTxtrow_Uninit(algo_lib::FTxtrow& txtrow) __attribute__((nothrow));

// --- algo_lib.FTxttbl
// create: algo_lib.FDb.txttbl (Cppstack)
// access: algo_lib.FTxtrow.p_txttbl (Upptr)
struct FTxttbl { // algo_lib.FTxttbl: Table row. Todo: absolute index for cells?
    algo_lib::FTxtrow**   c_txtrow_elems;   // array of pointers
    u32                   c_txtrow_n;       // array of pointers
    u32                   c_txtrow_max;     // capacity of allocated array
    i32                   col_space;        //   2  Extra space between columns
    i32                   hdr_row;          //   0  Index of header row (default -1)
    bool                  normalized;       //   false  Cell widths computed
    // func:algo_lib.FTxttbl..Ctor
    inline               FTxttbl() __attribute__((nothrow));
    // func:algo_lib.FTxttbl..Dtor
    inline               ~FTxttbl() __attribute__((nothrow));
};

// Delete all elements pointed to by the index.
// func:algo_lib.FTxttbl.c_txtrow.Cascdel
void                 c_txtrow_Cascdel(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Return true if index is empty
// func:algo_lib.FTxttbl.c_txtrow.EmptyQ
inline bool          c_txtrow_EmptyQ(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.FTxttbl.c_txtrow.Find
inline algo_lib::FTxtrow* c_txtrow_Find(algo_lib::FTxttbl& txttbl, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:algo_lib.FTxttbl.c_txtrow.Getary
inline algo::aryptr<algo_lib::FTxtrow*> c_txtrow_Getary(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:algo_lib.FTxttbl.c_txtrow.Insert
void                 c_txtrow_Insert(algo_lib::FTxttbl& txttbl, algo_lib::FTxtrow& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:algo_lib.FTxttbl.c_txtrow.InsertMaybe
bool                 c_txtrow_InsertMaybe(algo_lib::FTxttbl& txttbl, algo_lib::FTxtrow& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:algo_lib.FTxttbl.c_txtrow.N
inline i32           c_txtrow_N(const algo_lib::FTxttbl& txttbl) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:algo_lib.FTxttbl.c_txtrow.Remove
void                 c_txtrow_Remove(algo_lib::FTxttbl& txttbl, algo_lib::FTxtrow& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:algo_lib.FTxttbl.c_txtrow.RemoveAll
inline void          c_txtrow_RemoveAll(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:algo_lib.FTxttbl.c_txtrow.Reserve
void                 c_txtrow_Reserve(algo_lib::FTxttbl& txttbl, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:algo_lib.FTxttbl.c_txtrow.qFind
inline algo_lib::FTxtrow& c_txtrow_qFind(algo_lib::FTxttbl& txttbl, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:algo_lib.FTxttbl.c_txtrow.InAryQ
inline bool          txttbl_c_txtrow_InAryQ(algo_lib::FTxtrow& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:algo_lib.FTxttbl.c_txtrow.qLast
inline algo_lib::FTxtrow& c_txtrow_qLast(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Verify whether array is sorted
// func:algo_lib.FTxttbl.c_txtrow.SortedQ
bool                 c_txtrow_SortedQ(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Insertion sort
// func:algo_lib.FTxttbl.c_txtrow.InsertionSort
void                 c_txtrow_InsertionSort(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Heap sort
// func:algo_lib.FTxttbl.c_txtrow.HeapSort
void                 c_txtrow_HeapSort(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// Quick sort
// func:algo_lib.FTxttbl.c_txtrow.QuickSort
void                 c_txtrow_QuickSort(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));

// func:algo_lib.FTxttbl.c_txtrow_curs.Reset
inline void          txttbl_c_txtrow_curs_Reset(txttbl_c_txtrow_curs &curs, algo_lib::FTxttbl &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.FTxttbl.c_txtrow_curs.ValidQ
inline bool          txttbl_c_txtrow_curs_ValidQ(txttbl_c_txtrow_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.FTxttbl.c_txtrow_curs.Next
inline void          txttbl_c_txtrow_curs_Next(txttbl_c_txtrow_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.FTxttbl.c_txtrow_curs.Access
inline algo_lib::FTxtrow& txttbl_c_txtrow_curs_Access(txttbl_c_txtrow_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.FTxttbl..Init
inline void          FTxttbl_Init(algo_lib::FTxttbl& txttbl);
// func:algo_lib.FTxttbl..Uninit
void                 FTxttbl_Uninit(algo_lib::FTxttbl& txttbl) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.FTxttbl.String  printfmt:Extern
// func:algo_lib.FTxttbl..Print
// this function is 'extrn' and implemented by user
void                 FTxttbl_Print(algo_lib::FTxttbl& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.FieldId
#pragma pack(push,1)
struct FieldId { // algo_lib.FieldId: Field read helper
    i32   value;   //   -1
    // func:algo_lib.FieldId.value.Cast
    inline               operator algo_lib_FieldIdEnum() const __attribute__((nothrow));
    // func:algo_lib.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:algo_lib.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:algo_lib.FieldId..EnumCtor
    inline               FieldId(algo_lib_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:algo_lib.FieldId.value.GetEnum
inline algo_lib_FieldIdEnum value_GetEnum(const algo_lib::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo_lib.FieldId.value.SetEnum
inline void          value_SetEnum(algo_lib::FieldId& parent, algo_lib_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo_lib.FieldId.value.ToCstr
const char*          value_ToCstr(const algo_lib::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo_lib.FieldId.value.Print
void                 value_Print(const algo_lib::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo_lib.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo_lib::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo_lib.FieldId.value.SetStrptr
void                 value_SetStrptr(algo_lib::FieldId& parent, algo::strptr rhs, algo_lib_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo_lib.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo_lib::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo_lib::FieldId from an ascii string.
// The format of the string is the format of the algo_lib::FieldId's only field
// func:algo_lib.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(algo_lib::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.FieldId..Init
inline void          FieldId_Init(algo_lib::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:algo_lib.FieldId.String  printfmt:Raw
// func:algo_lib.FieldId..Print
void                 FieldId_Print(algo_lib::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.InTextFile
struct InTextFile { // algo_lib.InTextFile
    algo_lib::FFildes   file;                               //
    bool                own_fd;                             //   true
    algo::LineBuf       line_buf;                           //
    u8                  temp_buf_data[sizeof(u8) * 8192];   // place for data
    i32                 temp_buf_n;                         // number of elems current in existence
    enum { temp_buf_max = 8192 };
    // func:algo_lib.InTextFile..AssignOp
    inline algo_lib::InTextFile& operator =(const algo_lib::InTextFile &rhs) __attribute__((nothrow));
    // func:algo_lib.InTextFile..Ctor
    inline               InTextFile() __attribute__((nothrow));
    // func:algo_lib.InTextFile..Dtor
    inline               ~InTextFile() __attribute__((nothrow));
    // func:algo_lib.InTextFile..CopyCtor
    inline               InTextFile(const algo_lib::InTextFile &rhs) __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field file of algo_lib::InTextFile
// func:algo_lib.InTextFile.file.Cleanup
// this function is 'extrn' and implemented by user
void                 file_Cleanup(algo_lib::InTextFile& parent) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:algo_lib.InTextFile.temp_buf.Alloc
u8&                  temp_buf_Alloc(algo_lib::InTextFile& parent) __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:algo_lib.InTextFile.temp_buf.AllocMaybe
u8*                  temp_buf_AllocMaybe(algo_lib::InTextFile& parent) __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:algo_lib.InTextFile.temp_buf.AllocMem
inline void*         temp_buf_AllocMem(algo_lib::InTextFile& parent) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.InTextFile.temp_buf.EmptyQ
inline bool          temp_buf_EmptyQ(algo_lib::InTextFile& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.InTextFile.temp_buf.Find
inline u8*           temp_buf_Find(algo_lib::InTextFile& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.InTextFile.temp_buf.Getary
inline algo::aryptr<u8> temp_buf_Getary(algo_lib::InTextFile& parent) __attribute__((nothrow));
// Return constant 8192 -- max. number of items in the pool
// func:algo_lib.InTextFile.temp_buf.Max
inline i32           temp_buf_Max(algo_lib::InTextFile& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.InTextFile.temp_buf.N
inline i32           temp_buf_N(const algo_lib::InTextFile& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Destroy all elements of Inlary
// func:algo_lib.InTextFile.temp_buf.RemoveAll
void                 temp_buf_RemoveAll(algo_lib::InTextFile& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.InTextFile.temp_buf.RemoveLast
void                 temp_buf_RemoveLast(algo_lib::InTextFile& parent) __attribute__((nothrow));
// Set contents of fixed array to RHS; Input length is trimmed as necessary
// func:algo_lib.InTextFile.temp_buf.Setary
inline void          temp_buf_Setary(algo_lib::InTextFile& parent, const algo::aryptr<u8> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo_lib.InTextFile.temp_buf.qFind
inline u8&           temp_buf_qFind(algo_lib::InTextFile& parent, u64 t) __attribute__((nothrow));
// Compute row id of element given element's address
// func:algo_lib.InTextFile.temp_buf.rowid_Get
inline u64           temp_buf_rowid_Get(algo_lib::InTextFile& parent, u8 &row) __attribute__((nothrow));
// Convert temp_buf to a string.
// Array is printed as a regular string.
// func:algo_lib.InTextFile.temp_buf.Print
void                 temp_buf_Print(algo_lib::InTextFile& parent, algo::cstring &rhs) __attribute__((nothrow));
// Read array from string
// Convert string to field. Return success value
// func:algo_lib.InTextFile.temp_buf.ReadStrptrMaybe
bool                 temp_buf_ReadStrptrMaybe(algo_lib::InTextFile& parent, algo::strptr in_str) __attribute__((nothrow));

// cursor points to valid item
// func:algo_lib.InTextFile.temp_buf_curs.Reset
inline void          InTextFile_temp_buf_curs_Reset(InTextFile_temp_buf_curs &curs, algo_lib::InTextFile &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.InTextFile.temp_buf_curs.ValidQ
inline bool          InTextFile_temp_buf_curs_ValidQ(InTextFile_temp_buf_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.InTextFile.temp_buf_curs.Next
inline void          InTextFile_temp_buf_curs_Next(InTextFile_temp_buf_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.InTextFile.temp_buf_curs.Access
inline u8&           InTextFile_temp_buf_curs_Access(InTextFile_temp_buf_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.InTextFile..Init
void                 InTextFile_Init(algo_lib::InTextFile& parent);
// func:algo_lib.InTextFile..Uninit
void                 InTextFile_Uninit(algo_lib::InTextFile& parent) __attribute__((nothrow));

// --- algo_lib.Mmap
struct Mmap { // algo_lib.Mmap
    algo::memptr   mem;   // Memory that has been mmap()ed
    // func:algo_lib.Mmap..Ctor
    inline               Mmap() __attribute__((nothrow));
    // func:algo_lib.Mmap..Dtor
    inline               ~Mmap() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field mem of algo_lib::Mmap
// func:algo_lib.Mmap.mem.Cleanup
// this function is 'extrn' and implemented by user
void                 mem_Cleanup(algo_lib::Mmap& parent) __attribute__((nothrow));

// func:algo_lib.Mmap..Uninit
inline void          Mmap_Uninit(algo_lib::Mmap& parent) __attribute__((nothrow));

// --- algo_lib.MmapFile
struct MmapFile { // algo_lib.MmapFile
    algo_lib::Mmap      map;    // Pointer to shared memory
    algo_lib::FFildes   fd;     // Associated file descriptor
    algo::strptr        text;   // Alias to map.mem, accessible as text
    // func:algo_lib.MmapFile..Ctor
    inline               MmapFile() __attribute__((nothrow));
};


// --- algo_lib.Regx
// create: algo_lib.FDb.regx (Cppstack)
// access: algo_lib.RegxParse.p_regx (Upptr)
struct Regx { // algo_lib.Regx: Parsed regular expression
    algo::cstring          expr;          // Original string expression in some unspecified regx dialect
    algo_lib::RegxState*   state_elems;   // pointer to elements
    u32                    state_n;       // number of elements in array
    u32                    state_max;     // max. capacity of array before realloc
    algo_lib::Bitset       front;         // Temporary front (for matching)
    algo_lib::Bitset       next_front;    // Next front (for matching)
    algo_lib::Bitset       start;         // Set of starting states
    i32                    accept;        //   0  Accept state
    bool                   parseerror;    //   false  Non-fatal error while parsing
    bool                   accepts_all;   //   false  True if this regx matches anything
    bool                   literal;       //   false  True if expr may be matched literally (set during translation)
    // func:algo_lib.Regx..AssignOp
    algo_lib::Regx&      operator =(const algo_lib::Regx &rhs) __attribute__((nothrow));
    // func:algo_lib.Regx..Ctor
    inline               Regx() __attribute__((nothrow));
    // func:algo_lib.Regx..Dtor
    inline               ~Regx() __attribute__((nothrow));
    // func:algo_lib.Regx..CopyCtor
    Regx(const algo_lib::Regx &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.Regx.state.Addary
algo::aryptr<algo_lib::RegxState> state_Addary(algo_lib::Regx& regx, algo::aryptr<algo_lib::RegxState> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.Regx.state.Alloc
algo_lib::RegxState& state_Alloc(algo_lib::Regx& regx) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.Regx.state.AllocAt
algo_lib::RegxState& state_AllocAt(algo_lib::Regx& regx, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Regx.state.AllocN
algo::aryptr<algo_lib::RegxState> state_AllocN(algo_lib::Regx& regx, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.Regx.state.EmptyQ
inline bool          state_EmptyQ(algo_lib::Regx& regx) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.Regx.state.Find
inline algo_lib::RegxState* state_Find(algo_lib::Regx& regx, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.Regx.state.Getary
inline algo::aryptr<algo_lib::RegxState> state_Getary(const algo_lib::Regx& regx) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.Regx.state.Last
inline algo_lib::RegxState* state_Last(algo_lib::Regx& regx) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.Regx.state.Max
inline i32           state_Max(algo_lib::Regx& regx) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.Regx.state.N
inline i32           state_N(const algo_lib::Regx& regx) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.Regx.state.Remove
void                 state_Remove(algo_lib::Regx& regx, u32 i) __attribute__((nothrow));
// func:algo_lib.Regx.state.RemoveAll
void                 state_RemoveAll(algo_lib::Regx& regx) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.Regx.state.RemoveLast
void                 state_RemoveLast(algo_lib::Regx& regx) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.Regx.state.Reserve
inline void          state_Reserve(algo_lib::Regx& regx, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.Regx.state.AbsReserve
void                 state_AbsReserve(algo_lib::Regx& regx, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.Regx.state.Setary
void                 state_Setary(algo_lib::Regx& regx, algo_lib::Regx &rhs) __attribute__((nothrow));
// Copy specified array into state, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.Regx.state.Setary2
void                 state_Setary(algo_lib::Regx& regx, const algo::aryptr<algo_lib::RegxState> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.Regx.state.qFind
inline algo_lib::RegxState& state_qFind(algo_lib::Regx& regx, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.Regx.state.qLast
inline algo_lib::RegxState& state_qLast(algo_lib::Regx& regx) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.Regx.state.rowid_Get
inline u64           state_rowid_Get(algo_lib::Regx& regx, algo_lib::RegxState &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Regx.state.AllocNVal
algo::aryptr<algo_lib::RegxState> state_AllocNVal(algo_lib::Regx& regx, int n_elems, const algo_lib::RegxState& val) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.Regx.state_curs.Next
inline void          regx_state_curs_Next(regx_state_curs &curs) __attribute__((nothrow));
// func:algo_lib.Regx.state_curs.Reset
inline void          regx_state_curs_Reset(regx_state_curs &curs, algo_lib::Regx &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.Regx.state_curs.ValidQ
inline bool          regx_state_curs_ValidQ(regx_state_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.Regx.state_curs.Access
inline algo_lib::RegxState& regx_state_curs_Access(regx_state_curs &curs) __attribute__((nothrow));
// Read fields of algo_lib::Regx from an ascii string.
// func:algo_lib.Regx..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Regx_ReadStrptrMaybe(algo_lib::Regx &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.Regx..Init
inline void          Regx_Init(algo_lib::Regx& regx);
// func:algo_lib.Regx..Uninit
void                 Regx_Uninit(algo_lib::Regx& regx) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.Regx.String  printfmt:Extern
// func:algo_lib.Regx..Print
// this function is 'extrn' and implemented by user
void                 Regx_Print(algo_lib::Regx& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.RegxToken
struct RegxToken { // algo_lib.RegxToken
    i32   type;   //   0  State
    // func:algo_lib.RegxToken.type.Cast
    inline               operator algo_lib_RegxToken_type_Enum() const __attribute__((nothrow));
    // func:algo_lib.RegxToken..Ctor
    inline               RegxToken() __attribute__((nothrow));
    // func:algo_lib.RegxToken..FieldwiseCtor
    explicit inline               RegxToken(i32 in_type) __attribute__((nothrow));
    // func:algo_lib.RegxToken..EnumCtor
    inline               RegxToken(algo_lib_RegxToken_type_Enum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:algo_lib.RegxToken.type.GetEnum
inline algo_lib_RegxToken_type_Enum type_GetEnum(const algo_lib::RegxToken& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo_lib.RegxToken.type.SetEnum
inline void          type_SetEnum(algo_lib::RegxToken& parent, algo_lib_RegxToken_type_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo_lib.RegxToken.type.ToCstr
const char*          type_ToCstr(const algo_lib::RegxToken& parent) __attribute__((nothrow));
// Convert type to a string. First, attempt conversion to a known string.
// If no string matches, print type as a numeric value.
// func:algo_lib.RegxToken.type.Print
void                 type_Print(const algo_lib::RegxToken& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo_lib.RegxToken.type.SetStrptrMaybe
bool                 type_SetStrptrMaybe(algo_lib::RegxToken& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo_lib.RegxToken.type.SetStrptr
void                 type_SetStrptr(algo_lib::RegxToken& parent, algo::strptr rhs, algo_lib_RegxToken_type_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo_lib.RegxToken.type.ReadStrptrMaybe
bool                 type_ReadStrptrMaybe(algo_lib::RegxToken& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo_lib::RegxToken from an ascii string.
// The format of the string is the format of the algo_lib::RegxToken's only field
// func:algo_lib.RegxToken..ReadStrptrMaybe
bool                 RegxToken_ReadStrptrMaybe(algo_lib::RegxToken &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.RegxToken..Init
inline void          RegxToken_Init(algo_lib::RegxToken& parent);
// print string representation of ROW to string STR
// cfmt:algo_lib.RegxToken.String  printfmt:Raw
// func:algo_lib.RegxToken..Print
void                 RegxToken_Print(algo_lib::RegxToken& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.RegxExpr
// create: algo_lib.RegxParse.ary_expr (Tary)
struct RegxExpr { // algo_lib.RegxExpr
    algo_lib::RegxToken   type;   //
    i32                   in;     //   0  Input state
    algo_lib::Bitset      out;    // Output states
    // func:algo_lib.RegxExpr..Ctor
    inline               RegxExpr() __attribute__((nothrow));
};

// func:algo_lib.RegxExpr..ReadFieldMaybe
bool                 RegxExpr_ReadFieldMaybe(algo_lib::RegxExpr& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo_lib::RegxExpr from an ascii string.
// The format of the string is an ssim Tuple
// func:algo_lib.RegxExpr..ReadStrptrMaybe
bool                 RegxExpr_ReadStrptrMaybe(algo_lib::RegxExpr &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.RegxExpr..Init
inline void          RegxExpr_Init(algo_lib::RegxExpr& parent);
// print string representation of ROW to string STR
// cfmt:algo_lib.RegxExpr.String  printfmt:Tuple
// func:algo_lib.RegxExpr..Print
void                 RegxExpr_Print(algo_lib::RegxExpr& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.RegxParse
// create: algo_lib.FDb.regxparse (Cppstack)
struct RegxParse { // algo_lib.RegxParse: Function to parse regx
    algo::strptr          input;            // Input string
    algo_lib::Regx*       p_regx;           // reference to parent row
    algo_lib::RegxExpr*   ary_expr_elems;   // pointer to elements
    u32                   ary_expr_n;       // number of elements in array
    u32                   ary_expr_max;     // max. capacity of array before realloc
    // func:algo_lib.RegxParse..AssignOp
    algo_lib::RegxParse& operator =(const algo_lib::RegxParse &rhs) __attribute__((nothrow));
    // func:algo_lib.RegxParse..Ctor
    inline               RegxParse() __attribute__((nothrow));
    // func:algo_lib.RegxParse..Dtor
    inline               ~RegxParse() __attribute__((nothrow));
    // func:algo_lib.RegxParse..CopyCtor
    RegxParse(const algo_lib::RegxParse &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.RegxParse.ary_expr.Addary
algo::aryptr<algo_lib::RegxExpr> ary_expr_Addary(algo_lib::RegxParse& regxparse, algo::aryptr<algo_lib::RegxExpr> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.RegxParse.ary_expr.Alloc
algo_lib::RegxExpr&  ary_expr_Alloc(algo_lib::RegxParse& regxparse) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.RegxParse.ary_expr.AllocAt
algo_lib::RegxExpr&  ary_expr_AllocAt(algo_lib::RegxParse& regxparse, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.RegxParse.ary_expr.AllocN
algo::aryptr<algo_lib::RegxExpr> ary_expr_AllocN(algo_lib::RegxParse& regxparse, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.RegxParse.ary_expr.EmptyQ
inline bool          ary_expr_EmptyQ(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.RegxParse.ary_expr.Find
inline algo_lib::RegxExpr* ary_expr_Find(algo_lib::RegxParse& regxparse, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.RegxParse.ary_expr.Getary
inline algo::aryptr<algo_lib::RegxExpr> ary_expr_Getary(const algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.RegxParse.ary_expr.Last
inline algo_lib::RegxExpr* ary_expr_Last(algo_lib::RegxParse& regxparse) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.RegxParse.ary_expr.Max
inline i32           ary_expr_Max(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.RegxParse.ary_expr.N
inline i32           ary_expr_N(const algo_lib::RegxParse& regxparse) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.RegxParse.ary_expr.Remove
void                 ary_expr_Remove(algo_lib::RegxParse& regxparse, u32 i) __attribute__((nothrow));
// func:algo_lib.RegxParse.ary_expr.RemoveAll
void                 ary_expr_RemoveAll(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.RegxParse.ary_expr.RemoveLast
void                 ary_expr_RemoveLast(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.RegxParse.ary_expr.Reserve
inline void          ary_expr_Reserve(algo_lib::RegxParse& regxparse, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.RegxParse.ary_expr.AbsReserve
void                 ary_expr_AbsReserve(algo_lib::RegxParse& regxparse, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.RegxParse.ary_expr.Setary
void                 ary_expr_Setary(algo_lib::RegxParse& regxparse, algo_lib::RegxParse &rhs) __attribute__((nothrow));
// Copy specified array into ary_expr, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.RegxParse.ary_expr.Setary2
void                 ary_expr_Setary(algo_lib::RegxParse& regxparse, const algo::aryptr<algo_lib::RegxExpr> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.RegxParse.ary_expr.qFind
inline algo_lib::RegxExpr& ary_expr_qFind(algo_lib::RegxParse& regxparse, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.RegxParse.ary_expr.qLast
inline algo_lib::RegxExpr& ary_expr_qLast(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.RegxParse.ary_expr.rowid_Get
inline u64           ary_expr_rowid_Get(algo_lib::RegxParse& regxparse, algo_lib::RegxExpr &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.RegxParse.ary_expr.AllocNVal
algo::aryptr<algo_lib::RegxExpr> ary_expr_AllocNVal(algo_lib::RegxParse& regxparse, int n_elems, const algo_lib::RegxExpr& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.RegxParse.ary_expr.ReadStrptrMaybe
bool                 ary_expr_ReadStrptrMaybe(algo_lib::RegxParse& regxparse, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.RegxParse.ary_expr_curs.Next
inline void          regxparse_ary_expr_curs_Next(regxparse_ary_expr_curs &curs) __attribute__((nothrow));
// func:algo_lib.RegxParse.ary_expr_curs.Reset
inline void          regxparse_ary_expr_curs_Reset(regxparse_ary_expr_curs &curs, algo_lib::RegxParse &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.RegxParse.ary_expr_curs.ValidQ
inline bool          regxparse_ary_expr_curs_ValidQ(regxparse_ary_expr_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.RegxParse.ary_expr_curs.Access
inline algo_lib::RegxExpr& regxparse_ary_expr_curs_Access(regxparse_ary_expr_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.RegxParse..Init
inline void          RegxParse_Init(algo_lib::RegxParse& regxparse);
// func:algo_lib.RegxParse..Uninit
void                 RegxParse_Uninit(algo_lib::RegxParse& regxparse) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.RegxParse.String  printfmt:Tuple
// func:algo_lib.RegxParse..Print
void                 RegxParse_Print(algo_lib::RegxParse& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.RegxState
// create: algo_lib.Regx.state (Tary)
struct RegxState { // algo_lib.RegxState
    algo::i32_Range*   ch_class_elems;   // pointer to elements
    u32                ch_class_n;       // number of elements in array
    u32                ch_class_max;     // max. capacity of array before realloc
    algo_lib::Bitset   out;              // Where to go on a match
    bool               accept_all;       //   false  Regx always succeeds from here
    // func:algo_lib.RegxState..AssignOp
    algo_lib::RegxState& operator =(const algo_lib::RegxState &rhs) __attribute__((nothrow));
    // func:algo_lib.RegxState..Ctor
    inline               RegxState() __attribute__((nothrow));
    // func:algo_lib.RegxState..Dtor
    inline               ~RegxState() __attribute__((nothrow));
    // func:algo_lib.RegxState..CopyCtor
    RegxState(const algo_lib::RegxState &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.RegxState.ch_class.Addary
algo::aryptr<algo::i32_Range> ch_class_Addary(algo_lib::RegxState& parent, algo::aryptr<algo::i32_Range> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.RegxState.ch_class.Alloc
algo::i32_Range&     ch_class_Alloc(algo_lib::RegxState& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.RegxState.ch_class.AllocAt
algo::i32_Range&     ch_class_AllocAt(algo_lib::RegxState& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.RegxState.ch_class.AllocN
algo::aryptr<algo::i32_Range> ch_class_AllocN(algo_lib::RegxState& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.RegxState.ch_class.EmptyQ
inline bool          ch_class_EmptyQ(algo_lib::RegxState& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.RegxState.ch_class.Find
inline algo::i32_Range* ch_class_Find(algo_lib::RegxState& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.RegxState.ch_class.Getary
inline algo::aryptr<algo::i32_Range> ch_class_Getary(const algo_lib::RegxState& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.RegxState.ch_class.Last
inline algo::i32_Range* ch_class_Last(algo_lib::RegxState& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.RegxState.ch_class.Max
inline i32           ch_class_Max(algo_lib::RegxState& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.RegxState.ch_class.N
inline i32           ch_class_N(const algo_lib::RegxState& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.RegxState.ch_class.Remove
void                 ch_class_Remove(algo_lib::RegxState& parent, u32 i) __attribute__((nothrow));
// func:algo_lib.RegxState.ch_class.RemoveAll
inline void          ch_class_RemoveAll(algo_lib::RegxState& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.RegxState.ch_class.RemoveLast
void                 ch_class_RemoveLast(algo_lib::RegxState& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.RegxState.ch_class.Reserve
inline void          ch_class_Reserve(algo_lib::RegxState& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.RegxState.ch_class.AbsReserve
void                 ch_class_AbsReserve(algo_lib::RegxState& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.RegxState.ch_class.Setary
void                 ch_class_Setary(algo_lib::RegxState& parent, algo_lib::RegxState &rhs) __attribute__((nothrow));
// Copy specified array into ch_class, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.RegxState.ch_class.Setary2
void                 ch_class_Setary(algo_lib::RegxState& parent, const algo::aryptr<algo::i32_Range> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.RegxState.ch_class.qFind
inline algo::i32_Range& ch_class_qFind(algo_lib::RegxState& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.RegxState.ch_class.qLast
inline algo::i32_Range& ch_class_qLast(algo_lib::RegxState& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.RegxState.ch_class.rowid_Get
inline u64           ch_class_rowid_Get(algo_lib::RegxState& parent, algo::i32_Range &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.RegxState.ch_class.AllocNVal
algo::aryptr<algo::i32_Range> ch_class_AllocNVal(algo_lib::RegxState& parent, int n_elems, const algo::i32_Range& val) __attribute__((nothrow));
// Verify whether array is sorted
// func:algo_lib.RegxState.ch_class.SortedQ
bool                 ch_class_SortedQ(algo_lib::RegxState& parent) __attribute__((nothrow));
// Insertion sort
// func:algo_lib.RegxState.ch_class.InsertionSort
void                 ch_class_InsertionSort(algo_lib::RegxState& parent) __attribute__((nothrow));
// Heap sort
// func:algo_lib.RegxState.ch_class.HeapSort
void                 ch_class_HeapSort(algo_lib::RegxState& parent) __attribute__((nothrow));
// Quick sort
// func:algo_lib.RegxState.ch_class.QuickSort
void                 ch_class_QuickSort(algo_lib::RegxState& parent) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.RegxState.ch_class_curs.Next
inline void          RegxState_ch_class_curs_Next(RegxState_ch_class_curs &curs) __attribute__((nothrow));
// func:algo_lib.RegxState.ch_class_curs.Reset
inline void          RegxState_ch_class_curs_Reset(RegxState_ch_class_curs &curs, algo_lib::RegxState &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.RegxState.ch_class_curs.ValidQ
inline bool          RegxState_ch_class_curs_ValidQ(RegxState_ch_class_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.RegxState.ch_class_curs.Access
inline algo::i32_Range& RegxState_ch_class_curs_Access(RegxState_ch_class_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.RegxState..Init
inline void          RegxState_Init(algo_lib::RegxState& parent);
// func:algo_lib.RegxState..Uninit
void                 RegxState_Uninit(algo_lib::RegxState& parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.RegxState.String  printfmt:Extern
// func:algo_lib.RegxState..Print
// this function is 'extrn' and implemented by user
void                 RegxState_Print(algo_lib::RegxState& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.Replscope
// create: algo_lib.FDb.replscope (Cppstack)
// access: algo_lib.FReplvar.p_replscope (Upptr)
struct Replscope { // algo_lib.Replscope
    bool                   eatcomma;                    //   true
    bool                   fatal;                       //   false  Kill process on bad substitution
    algo_lib::FReplvar**   ind_replvar_buckets_elems;   // pointer to bucket array
    i32                    ind_replvar_buckets_n;       // number of elements in bucket array
    i32                    ind_replvar_n;               // number of elements in the hash table
    // func:algo_lib.Replscope..Ctor
    inline               Replscope() __attribute__((nothrow));
    // func:algo_lib.Replscope..Dtor
    inline               ~Replscope() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field ind_replvar of algo_lib::Replscope
// func:algo_lib.Replscope.ind_replvar.Cleanup
// this function is 'extrn' and implemented by user
void                 ind_replvar_Cleanup(algo_lib::Replscope& replscope) __attribute__((nothrow));
// Delete all rows reachable through the hash index
// func:algo_lib.Replscope.ind_replvar.Cascdel
void                 ind_replvar_Cascdel(algo_lib::Replscope& replscope) __attribute__((nothrow));
// Return true if hash is empty
// func:algo_lib.Replscope.ind_replvar.EmptyQ
inline bool          ind_replvar_EmptyQ(algo_lib::Replscope& replscope) __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:algo_lib.Replscope.ind_replvar.Find
algo_lib::FReplvar*  ind_replvar_Find(algo_lib::Replscope& replscope, const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Return number of items in the hash
// func:algo_lib.Replscope.ind_replvar.N
inline i32           ind_replvar_N(const algo_lib::Replscope& replscope) __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:algo_lib.Replscope.ind_replvar.InsertMaybe
bool                 ind_replvar_InsertMaybe(algo_lib::Replscope& replscope, algo_lib::FReplvar& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:algo_lib.Replscope.ind_replvar.Remove
void                 ind_replvar_Remove(algo_lib::Replscope& replscope, algo_lib::FReplvar& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:algo_lib.Replscope.ind_replvar.Reserve
void                 ind_replvar_Reserve(algo_lib::Replscope& replscope, int n) __attribute__((nothrow));

// func:algo_lib.Replscope.ind_replvar_curs.Reset
void                 replscope_ind_replvar_curs_Reset(replscope_ind_replvar_curs &curs, algo_lib::Replscope &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.Replscope.ind_replvar_curs.ValidQ
inline bool          replscope_ind_replvar_curs_ValidQ(replscope_ind_replvar_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo_lib.Replscope.ind_replvar_curs.Next
inline void          replscope_ind_replvar_curs_Next(replscope_ind_replvar_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.Replscope.ind_replvar_curs.Access
inline algo_lib::FReplvar& replscope_ind_replvar_curs_Access(replscope_ind_replvar_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.Replscope..Init
void                 Replscope_Init(algo_lib::Replscope& replscope);
// func:algo_lib.Replscope..Uninit
void                 Replscope_Uninit(algo_lib::Replscope& replscope) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.Replscope.String  printfmt:Tuple
// func:algo_lib.Replscope..Print
void                 Replscope_Print(algo_lib::Replscope& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.ShHdr
struct ShHdr { // algo_lib.ShHdr
    u32                 magic;        //   0x09202017  Signature
    algo::RspaceStr32   name;         // User defined name
    u64                 dataoffset;   //   4096  Offset to beginning of data
    u64                 eof;          //   0
    u64                 sof;          //   0
    u64                 bufsize;      //   0
    u64                 pad;          //   0
    // func:algo_lib.ShHdr..Ctor
    inline               ShHdr() __attribute__((nothrow));
};

// Set all fields to initial values.
// func:algo_lib.ShHdr..Init
inline void          ShHdr_Init(algo_lib::ShHdr& parent);

// --- algo_lib.Srng
struct Srng { // algo_lib.Srng: Command function, a single word
    u32   z;   //   123
    u32   w;   //   456
    // func:algo_lib.Srng..Ctor
    inline               Srng() __attribute__((nothrow));
};

// Set all fields to initial values.
// func:algo_lib.Srng..Init
inline void          Srng_Init(algo_lib::Srng& parent);

// --- algo_lib.TableId
struct TableId { // algo_lib.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    // func:algo_lib.TableId.value.Cast
    inline               operator algo_lib_TableIdEnum() const __attribute__((nothrow));
    // func:algo_lib.TableId..Ctor
    inline               TableId() __attribute__((nothrow));
    // func:algo_lib.TableId..FieldwiseCtor
    explicit inline               TableId(i32 in_value) __attribute__((nothrow));
    // func:algo_lib.TableId..EnumCtor
    inline               TableId(algo_lib_TableIdEnum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:algo_lib.TableId.value.GetEnum
inline algo_lib_TableIdEnum value_GetEnum(const algo_lib::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo_lib.TableId.value.SetEnum
inline void          value_SetEnum(algo_lib::TableId& parent, algo_lib_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo_lib.TableId.value.ToCstr
const char*          value_ToCstr(const algo_lib::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo_lib.TableId.value.Print
void                 value_Print(const algo_lib::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo_lib.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo_lib::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo_lib.TableId.value.SetStrptr
void                 value_SetStrptr(algo_lib::TableId& parent, algo::strptr rhs, algo_lib_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo_lib.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo_lib::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo_lib::TableId from an ascii string.
// The format of the string is the format of the algo_lib::TableId's only field
// func:algo_lib.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(algo_lib::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.TableId..Init
inline void          TableId_Init(algo_lib::TableId& parent);
// print string representation of ROW to string STR
// cfmt:algo_lib.TableId.String  printfmt:Raw
// func:algo_lib.TableId..Print
void                 TableId_Print(algo_lib::TableId& row, algo::cstring& str) __attribute__((nothrow));

// --- algo_lib.Tabulate
// create: algo_lib.FDb.tabulate (Cppstack)
struct Tabulate { // algo_lib.Tabulate: Function to tabulate a string
    i32*            width_elems;   // pointer to elements
    u32             width_n;       // number of elements in array
    u32             width_max;     // max. capacity of array before realloc
    algo::cstring   temp;          //
    // func:algo_lib.Tabulate..AssignOp
    algo_lib::Tabulate&  operator =(const algo_lib::Tabulate &rhs) __attribute__((nothrow));
    // func:algo_lib.Tabulate..Ctor
    inline               Tabulate() __attribute__((nothrow));
    // func:algo_lib.Tabulate..Dtor
    inline               ~Tabulate() __attribute__((nothrow));
    // func:algo_lib.Tabulate..CopyCtor
    Tabulate(const algo_lib::Tabulate &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo_lib.Tabulate.width.Addary
algo::aryptr<i32>    width_Addary(algo_lib::Tabulate& tabulate, algo::aryptr<i32> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo_lib.Tabulate.width.Alloc
i32&                 width_Alloc(algo_lib::Tabulate& tabulate) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo_lib.Tabulate.width.AllocAt
i32&                 width_AllocAt(algo_lib::Tabulate& tabulate, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Tabulate.width.AllocN
algo::aryptr<i32>    width_AllocN(algo_lib::Tabulate& tabulate, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo_lib.Tabulate.width.EmptyQ
inline bool          width_EmptyQ(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo_lib.Tabulate.width.Find
inline i32*          width_Find(algo_lib::Tabulate& tabulate, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo_lib.Tabulate.width.Getary
inline algo::aryptr<i32> width_Getary(const algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo_lib.Tabulate.width.Last
inline i32*          width_Last(algo_lib::Tabulate& tabulate) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo_lib.Tabulate.width.Max
inline i32           width_Max(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Return number of items in the array
// func:algo_lib.Tabulate.width.N
inline i32           width_N(const algo_lib::Tabulate& tabulate) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo_lib.Tabulate.width.Remove
void                 width_Remove(algo_lib::Tabulate& tabulate, u32 i) __attribute__((nothrow));
// func:algo_lib.Tabulate.width.RemoveAll
inline void          width_RemoveAll(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo_lib.Tabulate.width.RemoveLast
void                 width_RemoveLast(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo_lib.Tabulate.width.Reserve
inline void          width_Reserve(algo_lib::Tabulate& tabulate, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo_lib.Tabulate.width.AbsReserve
void                 width_AbsReserve(algo_lib::Tabulate& tabulate, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo_lib.Tabulate.width.Setary
void                 width_Setary(algo_lib::Tabulate& tabulate, algo_lib::Tabulate &rhs) __attribute__((nothrow));
// Copy specified array into width, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo_lib.Tabulate.width.Setary2
void                 width_Setary(algo_lib::Tabulate& tabulate, const algo::aryptr<i32> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo_lib.Tabulate.width.qFind
inline i32&          width_qFind(algo_lib::Tabulate& tabulate, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo_lib.Tabulate.width.qLast
inline i32&          width_qLast(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// Return row id of specified element
// func:algo_lib.Tabulate.width.rowid_Get
inline u64           width_rowid_Get(algo_lib::Tabulate& tabulate, i32 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo_lib.Tabulate.width.AllocNVal
algo::aryptr<i32>    width_AllocNVal(algo_lib::Tabulate& tabulate, int n_elems, const i32& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo_lib.Tabulate.width.ReadStrptrMaybe
bool                 width_ReadStrptrMaybe(algo_lib::Tabulate& tabulate, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo_lib.Tabulate.width_curs.Next
inline void          tabulate_width_curs_Next(tabulate_width_curs &curs) __attribute__((nothrow));
// func:algo_lib.Tabulate.width_curs.Reset
inline void          tabulate_width_curs_Reset(tabulate_width_curs &curs, algo_lib::Tabulate &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo_lib.Tabulate.width_curs.ValidQ
inline bool          tabulate_width_curs_ValidQ(tabulate_width_curs &curs) __attribute__((nothrow));
// item access
// func:algo_lib.Tabulate.width_curs.Access
inline i32&          tabulate_width_curs_Access(tabulate_width_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo_lib.Tabulate..Init
inline void          Tabulate_Init(algo_lib::Tabulate& tabulate);
// func:algo_lib.Tabulate..Uninit
void                 Tabulate_Uninit(algo_lib::Tabulate& tabulate) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo_lib.Tabulate.String  printfmt:Tuple
// func:algo_lib.Tabulate..Print
void                 Tabulate_Print(algo_lib::Tabulate& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace algo_lib { // gen:ns_curstext

struct Bitset_ary_bitcurs {// cursor
    typedef int& ChildType;
    u64* elems;
    int n_elems;
    int bit;
    Bitset_ary_bitcurs() : elems(0), n_elems(0), bit(0) {}
};


struct Bitset_ary_curs {// cursor
    typedef u64 ChildType;
    u64* elems;
    int n_elems;
    int index;
    Bitset_ary_curs() { elems=NULL; n_elems=0; index=0; }
};


struct csvparse_ary_tok_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    csvparse_ary_tok_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_temp_strings_curs {// cursor
    typedef algo::cstring ChildType;
    int index;
    algo_lib::FDb *parent;
    _db_temp_strings_curs() { parent=NULL; index=0; }
};


struct _db_imtable_curs {// cursor
    typedef algo_lib::FImtable ChildType;
    algo_lib::FDb *parent;
    i64 index;
    _db_imtable_curs(){ parent=NULL; index=0; }
};

// Non-destructive heap cursor, returns heap elements in sorted order.
// A running front of potential smallest entries is kept in the helper heap (curs.temp_%)
struct _db_bh_timehook_curs {
    typedef algo_lib::FTimehook ChildType;
    algo_lib::FDb      *parent;        // parent
    algo_lib::FTimehook*     *temp_elems;    // helper heap
    int            temp_n;        // number of elements heaped in the helper heap
    int            temp_max;      // max number of elements possible in the helper heap
    _db_bh_timehook_curs() : parent(NULL), temp_elems(NULL), temp_n(0), temp_max(0) {}
    ~_db_bh_timehook_curs();
};


struct _db_dispsigcheck_curs {// cursor
    typedef algo_lib::FDispsigcheck ChildType;
    algo_lib::FDb *parent;
    i64 index;
    _db_dispsigcheck_curs(){ parent=NULL; index=0; }
};


struct _db_imdb_curs {// cursor
    typedef algo_lib::FImdb ChildType;
    int index;
    algo_lib::FDb *parent;
    _db_imdb_curs() { parent=NULL; index=0; }
};


struct _db_logcat_curs {// cursor
    typedef algo_lib::FLogcat ChildType;
    int index;
    algo_lib::FDb *parent;
    _db_logcat_curs() { parent=NULL; index=0; }
};


struct _db_exec_args_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    _db_exec_args_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_dirstack_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    _db_dirstack_curs() { elems=NULL; n_elems=0; index=0; }
};


struct txtrow_c_txtcell_curs {// fcurs:algo_lib.FTxtrow.c_txtcell/curs
    typedef algo_lib::FTxtcell ChildType;
    algo_lib::FTxtcell** elems;
    u32 n_elems;
    u32 index;
    txtrow_c_txtcell_curs() { elems=NULL; n_elems=0; index=0; }
};


struct txttbl_c_txtrow_curs {// fcurs:algo_lib.FTxttbl.c_txtrow/curs
    typedef algo_lib::FTxtrow ChildType;
    algo_lib::FTxtrow** elems;
    u32 n_elems;
    u32 index;
    txttbl_c_txtrow_curs() { elems=NULL; n_elems=0; index=0; }
};


struct InTextFile_temp_buf_curs {// cursor
    typedef u8 ChildType;
    int index;
    algo_lib::InTextFile *parent;
    InTextFile_temp_buf_curs() { parent=NULL; index=0; }
};


struct regx_state_curs {// cursor
    typedef algo_lib::RegxState ChildType;
    algo_lib::RegxState* elems;
    int n_elems;
    int index;
    regx_state_curs() { elems=NULL; n_elems=0; index=0; }
};


struct regxparse_ary_expr_curs {// cursor
    typedef algo_lib::RegxExpr ChildType;
    algo_lib::RegxExpr* elems;
    int n_elems;
    int index;
    regxparse_ary_expr_curs() { elems=NULL; n_elems=0; index=0; }
};


struct RegxState_ch_class_curs {// cursor
    typedef algo::i32_Range ChildType;
    algo::i32_Range* elems;
    int n_elems;
    int index;
    RegxState_ch_class_curs() { elems=NULL; n_elems=0; index=0; }
};


struct replscope_ind_replvar_curs {// cursor
    typedef algo_lib::FReplvar ChildType;
    algo_lib::Replscope *parent;
    int bucket;
    algo_lib::FReplvar **prow;
    replscope_ind_replvar_curs() { parent=NULL; bucket=0; prow=NULL; }
};


struct tabulate_width_curs {// cursor
    typedef i32 ChildType;
    i32* elems;
    int n_elems;
    int index;
    tabulate_width_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace algo_lib { // gen:ns_func
// func:algo_lib...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::Bitset &row);// cfmt:algo_lib.Bitset.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::CsvParse &row);// cfmt:algo_lib.CsvParse.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::ErrorX &row);// cfmt:algo_lib.ErrorX.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::FFildes &row);// cfmt:algo_lib.FFildes.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::FTimehook &row);// cfmt:algo_lib.FTimehook.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::trace &row);// cfmt:algo_lib.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::FDispsigcheck &row);// cfmt:algo_lib.FDispsigcheck.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::FTxttbl &row);// cfmt:algo_lib.FTxttbl.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::FieldId &row);// cfmt:algo_lib.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::Regx &row);// cfmt:algo_lib.Regx.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::RegxToken &row);// cfmt:algo_lib.RegxToken.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::RegxExpr &row);// cfmt:algo_lib.RegxExpr.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::RegxParse &row);// cfmt:algo_lib.RegxParse.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::RegxState &row);// cfmt:algo_lib.RegxState.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::Replscope &row);// cfmt:algo_lib.Replscope.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::TableId &row);// cfmt:algo_lib.TableId.String
inline algo::cstring &operator <<(algo::cstring &str, const algo_lib::Tabulate &row);// cfmt:algo_lib.Tabulate.String
}
