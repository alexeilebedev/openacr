//
// include/gen/lib_git_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//


#pragma once
//#pragma endinclude
inline lib_git::trace::trace() {
}

inline lib_git::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline lib_git::FieldId::FieldId(lib_git_FieldIdEnum arg) { this->value = i32(arg); }
inline lib_git::FieldId::FieldId() {
    lib_git::FieldId_Init(*this);
}


// --- lib_git.FieldId.value.GetEnum
// Get value of field as enum type
inline lib_git_FieldIdEnum lib_git::value_GetEnum(const lib_git::FieldId& parent) {
    return lib_git_FieldIdEnum(parent.value);
}

// --- lib_git.FieldId.value.SetEnum
// Set value of field from enum type.
inline void lib_git::value_SetEnum(lib_git::FieldId& parent, lib_git_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- lib_git.FieldId.value.Cast
inline lib_git::FieldId::operator lib_git_FieldIdEnum () const {
    return lib_git_FieldIdEnum((*this).value);
}

// --- lib_git.FieldId..Init
// Set all fields to initial values.
inline void lib_git::FieldId_Init(lib_git::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_git::trace &row) {// cfmt:lib_git.trace.String
    lib_git::trace_Print(const_cast<lib_git::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_git::FieldId &row) {// cfmt:lib_git.FieldId.String
    lib_git::FieldId_Print(const_cast<lib_git::FieldId&>(row), str);
    return str;
}
