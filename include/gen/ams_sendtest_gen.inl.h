//
// include/gen/ams_sendtest_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/ams_gen.inl.h"
#include "include/gen/lib_ams_gen.inl.h"
//#pragma endinclude

// --- ams_sendtest.AmsSendTest..Init
// Set all fields to initial values.
inline void ams_sendtest::AmsSendTest_Init(ams_sendtest::AmsSendTest& parent) {
    parent.n_msg_send = u64(0);
    parent.n_msg_recv = u64(0);
    parent.n_write_wait = u64(0);
    parent.n_msg_limit = u64(1000000);
    parent.sum_recv_latency = u64(0);
}

// --- ams_sendtest.AmsSendTest..Ctor
inline  ams_sendtest::AmsSendTest::AmsSendTest() throw() {
    ams_sendtest::AmsSendTest_Init(*this);
}

// --- ams_sendtest.FChild..Ctor
inline  ams_sendtest::FChild::FChild() throw() {
    ams_sendtest::FChild_Init(*this);
}

// --- ams_sendtest.FChild..Dtor
inline  ams_sendtest::FChild::~FChild() throw() {
    ams_sendtest::FChild_Uninit(*this);
}

// --- ams_sendtest.trace..Ctor
inline  ams_sendtest::trace::trace() throw() {
}

// --- ams_sendtest.FDb.child.EmptyQ
// Return true if index is empty
inline bool ams_sendtest::child_EmptyQ() throw() {
    return _db.child_n == 0;
}

// --- ams_sendtest.FDb.child.Find
// Look up row by row id. Return NULL if out of range
inline ams_sendtest::FChild* ams_sendtest::child_Find(u64 t) throw() {
    ams_sendtest::FChild *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.child_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.child_lary[bsr][index];
    }
    return retval;
}

// --- ams_sendtest.FDb.child.Last
// Return pointer to last element of array, or NULL if array is empty
inline ams_sendtest::FChild* ams_sendtest::child_Last() throw() {
    return child_Find(u64(_db.child_n-1));
}

// --- ams_sendtest.FDb.child.N
// Return number of items in the pool
inline i32 ams_sendtest::child_N() throw() {
    return _db.child_n;
}

// --- ams_sendtest.FDb.child.qFind
// 'quick' Access row by row id. No bounds checking.
inline ams_sendtest::FChild& ams_sendtest::child_qFind(u64 t) throw() {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.child_lary[bsr][index];
}

// --- ams_sendtest.FDb.child_curs.Reset
// cursor points to valid item
inline void ams_sendtest::_db_child_curs_Reset(_db_child_curs &curs, ams_sendtest::FDb &parent) throw() {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ams_sendtest.FDb.child_curs.ValidQ
// cursor points to valid item
inline bool ams_sendtest::_db_child_curs_ValidQ(_db_child_curs &curs) throw() {
    return curs.index < _db.child_n;
}

// --- ams_sendtest.FDb.child_curs.Next
// proceed to next item
inline void ams_sendtest::_db_child_curs_Next(_db_child_curs &curs) throw() {
    curs.index++;
}

// --- ams_sendtest.FDb.child_curs.Access
// item access
inline ams_sendtest::FChild& ams_sendtest::_db_child_curs_Access(_db_child_curs &curs) throw() {
    return child_qFind(u64(curs.index));
}

// --- ams_sendtest.FieldId.value.GetEnum
// Get value of field as enum type
inline ams_sendtest_FieldIdEnum ams_sendtest::value_GetEnum(const ams_sendtest::FieldId& parent) throw() {
    return ams_sendtest_FieldIdEnum(parent.value);
}

// --- ams_sendtest.FieldId.value.SetEnum
// Set value of field from enum type.
inline void ams_sendtest::value_SetEnum(ams_sendtest::FieldId& parent, ams_sendtest_FieldIdEnum rhs) throw() {
    parent.value = i32(rhs);
}

// --- ams_sendtest.FieldId.value.Cast
inline  ams_sendtest::FieldId::operator ams_sendtest_FieldIdEnum() const throw() {
    return ams_sendtest_FieldIdEnum((*this).value);
}

// --- ams_sendtest.FieldId..Init
// Set all fields to initial values.
inline void ams_sendtest::FieldId_Init(ams_sendtest::FieldId& parent) {
    parent.value = i32(-1);
}

// --- ams_sendtest.FieldId..Ctor
inline  ams_sendtest::FieldId::FieldId() throw() {
    ams_sendtest::FieldId_Init(*this);
}

// --- ams_sendtest.FieldId..FieldwiseCtor
inline  ams_sendtest::FieldId::FieldId(i32 in_value) throw()
    : value(in_value)
 {
}

// --- ams_sendtest.FieldId..EnumCtor
inline  ams_sendtest::FieldId::FieldId(ams_sendtest_FieldIdEnum arg) throw() {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ams_sendtest::AmsSendTest &row) {// cfmt:ams_sendtest.AmsSendTest.String
    ams_sendtest::AmsSendTest_Print(const_cast<ams_sendtest::AmsSendTest&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ams_sendtest::trace &row) {// cfmt:ams_sendtest.trace.String
    ams_sendtest::trace_Print(const_cast<ams_sendtest::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ams_sendtest::FieldId &row) {// cfmt:ams_sendtest.FieldId.String
    ams_sendtest::FieldId_Print(const_cast<ams_sendtest::FieldId&>(row), str);
    return str;
}
