//
// include/gen/lib_json_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- lib_json_FNode_type_Enum

enum lib_json_FNode_type_Enum {        // lib_json.FNode.type
     lib_json_FNode_type_null     = 0
    ,lib_json_FNode_type_false    = 1
    ,lib_json_FNode_type_true     = 2
    ,lib_json_FNode_type_string   = 3
    ,lib_json_FNode_type_number   = 4
    ,lib_json_FNode_type_array    = 5
    ,lib_json_FNode_type_object   = 6
    ,lib_json_FNode_type_field    = 7
};

enum { lib_json_FNode_type_Enum_N = 8 };


// --- lib_json_FParser_state_Enum

enum lib_json_FParser_state_Enum {              // lib_json.FParser.state
     lib_json_FParser_state_ws           = 0
    ,lib_json_FParser_state_value        = 1
    ,lib_json_FParser_state_number       = 2
    ,lib_json_FParser_state_str          = 3
    ,lib_json_FParser_state_str_esc      = 4
    ,lib_json_FParser_state_str_uesc     = 5
    ,lib_json_FParser_state_str_usurr1   = 6
    ,lib_json_FParser_state_str_usurr2   = 7
    ,lib_json_FParser_state_token        = 8
    ,lib_json_FParser_state_sec_line     = 9    // JSON security line
    ,lib_json_FParser_state_err          = 99   // parser error
};

enum { lib_json_FParser_state_Enum_N = 11 };


// --- lib_json_FieldIdEnum

enum lib_json_FieldIdEnum {        // lib_json.FieldId.value
     lib_json_FieldId_value   = 0
};

enum { lib_json_FieldIdEnum_N = 1 };

namespace lib_json { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace lib_json { // gen:ns_tclass_field
struct lpool_Lpblock {
    lpool_Lpblock* next;
};
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace lib_json { struct node_c_child_curs; }
namespace lib_json { struct trace; }
namespace lib_json { struct FDb; }
namespace lib_json { struct FldKey; }
namespace lib_json { struct FParser; }
namespace lib_json { struct FieldId; }
namespace lib_json { extern struct lib_json::FDb _db; }
namespace lib_json { // gen:ns_print_struct

// --- lib_json.trace
#pragma pack(push,1)
struct trace { // lib_json.trace
    u64   alloc__db_node;   //   0
    u64   del__db_node;     //   0
    // func:lib_json.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// Set all fields to initial values.
// func:lib_json.trace..Init
inline void          trace_Init(lib_json::trace& parent);
// print string representation of ROW to string STR
// cfmt:lib_json.trace.String  printfmt:Tuple
// func:lib_json.trace..Print
void                 trace_Print(lib_json::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_json.FDb
// create: lib_json.FDb._db (Global)
struct FDb { // lib_json.FDb: In-memory database for lib_json
    lpool_Lpblock*      lpool_free[36];             // Lpool levels
    u64                 node_blocksize;             // # bytes per block
    lib_json::FNode*    node_free;                  //
    lib_json::FNode**   ind_objfld_buckets_elems;   // pointer to bucket array
    i32                 ind_objfld_buckets_n;       // number of elements in bucket array
    i32                 ind_objfld_n;               // number of elements in the hash table
    lib_json::trace     trace;                      //
};

// Free block of memory previously returned by Lpool.
// func:lib_json.FDb.lpool.FreeMem
void                 lpool_FreeMem(void* mem, u64 size) __attribute__((nothrow));
// Allocate new piece of memory at least SIZE bytes long.
// If not successful, return NULL
// The allocated block is at least 1<<4
// The maximum allocation size is at most 1<<(36+4)
// func:lib_json.FDb.lpool.AllocMem
void*                lpool_AllocMem(u64 size) __attribute__((__warn_unused_result__, nothrow));
// Add N buffers of some size to the free store
// Reserve NBUF buffers of size BUFSIZE from the base pool (algo_lib::sbrk)
// func:lib_json.FDb.lpool.ReserveBuffers
bool                 lpool_ReserveBuffers(u64 nbuf, u64 bufsize) __attribute__((nothrow));
// Allocate new block, copy old to new, delete old.
// If the new size is same as old size, do nothing.
// In all other cases, new memory is allocated (i.e. size reduction is not a no-op)
// If no memory, return NULL; old memory remains untouched
// func:lib_json.FDb.lpool.ReallocMem
void*                lpool_ReallocMem(void* oldmem, u64 old_size, u64 new_size) __attribute__((nothrow));
// Allocate memory for new default row.
// If out of memory, process is killed.
// func:lib_json.FDb.lpool.Alloc
u8&                  lpool_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:lib_json.FDb.lpool.AllocMaybe
u8*                  lpool_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:lib_json.FDb.lpool.Delete
void                 lpool_Delete(u8 &row) __attribute__((nothrow));

// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:lib_json.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:lib_json.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:lib_json.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:lib_json.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:lib_json.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:lib_json.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_json.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:lib_json.FDb.node.Alloc
lib_json::FNode&     node_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:lib_json.FDb.node.AllocMaybe
lib_json::FNode*     node_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:lib_json.FDb.node.Delete
void                 node_Delete(lib_json::FNode &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:lib_json.FDb.node.AllocMem
void*                node_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:lib_json.FDb.node.FreeMem
void                 node_FreeMem(lib_json::FNode &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:lib_json.FDb.node.Reserve
u64                  node_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:lib_json.FDb.node.ReserveMem
u64                  node_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_json.FDb.node.XrefMaybe
bool                 node_XrefMaybe(lib_json::FNode &row);

// Return true if hash is empty
// func:lib_json.FDb.ind_objfld.EmptyQ
inline bool          ind_objfld_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:lib_json.FDb.ind_objfld.Find
lib_json::FNode*     ind_objfld_Find(const lib_json::FldKey& key) __attribute__((__warn_unused_result__, nothrow));
// Return number of items in the hash
// func:lib_json.FDb.ind_objfld.N
inline i32           ind_objfld_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:lib_json.FDb.ind_objfld.InsertMaybe
bool                 ind_objfld_InsertMaybe(lib_json::FNode& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:lib_json.FDb.ind_objfld.Remove
void                 ind_objfld_Remove(lib_json::FNode& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:lib_json.FDb.ind_objfld.Reserve
void                 ind_objfld_Reserve(int n) __attribute__((nothrow));

// func:lib_json.FDb.JsonNumChar.Match
inline bool          JsonNumCharQ(u32 ch) __attribute__((nothrow));

// func:lib_json.FDb.JsonFirstNumChar.Match
inline bool          JsonFirstNumCharQ(u32 ch) __attribute__((nothrow));

// Set all fields to initial values.
// func:lib_json.FDb..Init
void                 FDb_Init();
// func:lib_json.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- lib_json.FldKey
struct FldKey { // lib_json.FldKey
    lib_json::FNode*   object;   // optional pointer
    algo::strptr       field;    //
    // func:lib_json.FldKey..EqOp
    inline bool          operator ==(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..NeOp
    inline bool          operator !=(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..LtOp
    inline bool          operator <(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..GtOp
    inline bool          operator >(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..LeOp
    inline bool          operator <=(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..GeOp
    inline bool          operator >=(const lib_json::FldKey &rhs) const __attribute__((nothrow));
    // func:lib_json.FldKey..Ctor
    inline               FldKey() __attribute__((nothrow));
    // func:lib_json.FldKey..FieldwiseCtor
    explicit inline               FldKey(lib_json::FNode* in_object, algo::strptr in_field) __attribute__((nothrow));
};

// func:lib_json.FldKey..Hash
inline u32           FldKey_Hash(u32 prev, const lib_json::FldKey& rhs) __attribute__((nothrow));
// func:lib_json.FldKey..Lt
inline bool          FldKey_Lt(lib_json::FldKey& lhs, lib_json::FldKey& rhs) __attribute__((nothrow));
// func:lib_json.FldKey..Cmp
inline i32           FldKey_Cmp(lib_json::FldKey& lhs, lib_json::FldKey& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:lib_json.FldKey..Init
inline void          FldKey_Init(lib_json::FldKey& parent);
// func:lib_json.FldKey..Eq
inline bool          FldKey_Eq(lib_json::FldKey& lhs, lib_json::FldKey& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:lib_json.FldKey..Update
inline bool          FldKey_Update(lib_json::FldKey &lhs, lib_json::FldKey& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:lib_json.FldKey.String  printfmt:Tuple
// func:lib_json.FldKey..Print
void                 FldKey_Print(lib_json::FldKey& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_json.FNode
// create: lib_json.FDb.node (Tpool)
// global access: ind_objfld (Thash, hash field fldkey)
// access: lib_json.FNode.p_parent (Upptr)
// access: lib_json.FNode.c_child (Ptrary)
// access: lib_json.FParser.node (Ptr)
// access: lib_json.FParser.root_node (Ptr)
// access: lib_json.FldKey.object (Ptr)
struct FNode { // lib_json.FNode
    lib_json::FNode*    node_next;             // Pointer to next free element int tpool
    lib_json::FNode*    ind_objfld_next;       // hash next
    lib_json::FNode*    p_parent;              // reference to parent row
    lib_json::FNode**   c_child_elems;         // array of pointers
    u32                 c_child_n;             // array of pointers
    u32                 c_child_max;           // capacity of allocated array
    u32                 type;                  //   0
    algo::cstring       value;                 //
    bool                node_c_child_in_ary;   //   false  membership flag
    // reftype Ptrary of lib_json.FNode.c_child prohibits copy
    // func:lib_json.FNode..AssignOp
    inline lib_json::FNode& operator =(const lib_json::FNode &rhs) = delete;
    // reftype Ptrary of lib_json.FNode.c_child prohibits copy
    // func:lib_json.FNode..CopyCtor
    inline               FNode(const lib_json::FNode &rhs) = delete;
private:
    // func:lib_json.FNode..Ctor
    inline               FNode() __attribute__((nothrow));
    // func:lib_json.FNode..Dtor
    inline               ~FNode() __attribute__((nothrow));
    friend lib_json::FNode&     node_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_json::FNode*     node_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 node_Delete(lib_json::FNode &row) __attribute__((nothrow));
};

// Delete all elements pointed to by the index.
// func:lib_json.FNode.c_child.Cascdel
void                 c_child_Cascdel(lib_json::FNode& node) __attribute__((nothrow));
// Return true if index is empty
// func:lib_json.FNode.c_child.EmptyQ
inline bool          c_child_EmptyQ(lib_json::FNode& node) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:lib_json.FNode.c_child.Find
inline lib_json::FNode* c_child_Find(lib_json::FNode& node, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:lib_json.FNode.c_child.Getary
inline algo::aryptr<lib_json::FNode*> c_child_Getary(lib_json::FNode& node) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:lib_json.FNode.c_child.Insert
void                 c_child_Insert(lib_json::FNode& node, lib_json::FNode& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:lib_json.FNode.c_child.InsertMaybe
bool                 c_child_InsertMaybe(lib_json::FNode& node, lib_json::FNode& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:lib_json.FNode.c_child.N
inline i32           c_child_N(const lib_json::FNode& node) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:lib_json.FNode.c_child.Remove
void                 c_child_Remove(lib_json::FNode& node, lib_json::FNode& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:lib_json.FNode.c_child.RemoveAll
inline void          c_child_RemoveAll(lib_json::FNode& node) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:lib_json.FNode.c_child.Reserve
void                 c_child_Reserve(lib_json::FNode& node, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:lib_json.FNode.c_child.qFind
inline lib_json::FNode& c_child_qFind(lib_json::FNode& node, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:lib_json.FNode.c_child.InAryQ
inline bool          node_c_child_InAryQ(lib_json::FNode& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:lib_json.FNode.c_child.qLast
inline lib_json::FNode& c_child_qLast(lib_json::FNode& node) __attribute__((nothrow));

// Get value of field as enum type
// func:lib_json.FNode.type.GetEnum
inline lib_json_FNode_type_Enum type_GetEnum(const lib_json::FNode& node) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_json.FNode.type.SetEnum
inline void          type_SetEnum(lib_json::FNode& node, lib_json_FNode_type_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_json.FNode.type.ToCstr
const char*          type_ToCstr(const lib_json::FNode& node) __attribute__((nothrow));
// Convert type to a string. First, attempt conversion to a known string.
// If no string matches, print type as a numeric value.
// func:lib_json.FNode.type.Print
void                 type_Print(const lib_json::FNode& node, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_json.FNode.type.SetStrptrMaybe
bool                 type_SetStrptrMaybe(lib_json::FNode& node, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_json.FNode.type.SetStrptr
void                 type_SetStrptr(lib_json::FNode& node, algo::strptr rhs, lib_json_FNode_type_Enum dflt) __attribute__((nothrow));

// func:lib_json.FNode.fldkey.Get
// this function is 'extrn' and implemented by user
lib_json::FldKey     fldkey_Get(lib_json::FNode& node) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:lib_json.FNode..Init
inline void          FNode_Init(lib_json::FNode& node);
// func:lib_json.FNode.c_child_curs.Reset
inline void          node_c_child_curs_Reset(node_c_child_curs &curs, lib_json::FNode &parent) __attribute__((nothrow));
// cursor points to valid item
// func:lib_json.FNode.c_child_curs.ValidQ
inline bool          node_c_child_curs_ValidQ(node_c_child_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:lib_json.FNode.c_child_curs.Next
inline void          node_c_child_curs_Next(node_c_child_curs &curs) __attribute__((nothrow));
// item access
// func:lib_json.FNode.c_child_curs.Access
inline lib_json::FNode& node_c_child_curs_Access(node_c_child_curs &curs) __attribute__((nothrow));
// func:lib_json.FNode..Uninit
void                 FNode_Uninit(lib_json::FNode& node) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:lib_json.FNode.String  printfmt:Tuple
// func:lib_json.FNode..Print
void                 FNode_Print(lib_json::FNode& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_json.FParser
struct FParser { // lib_json.FParser
    algo::strptr       buf;          //
    i32                ind;          //   0
    lib_json::FNode*   node;         // optional pointer
    lib_json::FNode*   root_node;    // optional pointer
    u32                state;        //   0
    bool               need_comma;   //   false
    bool               have_comma;   //   false
    bool               need_colon;   //   false
    algo::cstring      err_info;     //
    i32                err_offset;   //   0
    i32                offset;       //   0
    u32                uesc_value;   //   0
    u8                 uesc_need;    //   0
    algo::cstring      value;        //
    // func:lib_json.FParser..Ctor
    inline               FParser() __attribute__((nothrow));
    // func:lib_json.FParser..Dtor
    inline               ~FParser() __attribute__((nothrow));
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field root_node of lib_json::FParser
// func:lib_json.FParser.root_node.Cleanup
// this function is 'extrn' and implemented by user
void                 root_node_Cleanup(lib_json::FParser& parent) __attribute__((nothrow));

// Get value of field as enum type
// func:lib_json.FParser.state.GetEnum
inline lib_json_FParser_state_Enum state_GetEnum(const lib_json::FParser& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_json.FParser.state.SetEnum
inline void          state_SetEnum(lib_json::FParser& parent, lib_json_FParser_state_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_json.FParser.state.ToCstr
const char*          state_ToCstr(const lib_json::FParser& parent) __attribute__((nothrow));
// Convert state to a string. First, attempt conversion to a known string.
// If no string matches, print state as a numeric value.
// func:lib_json.FParser.state.Print
void                 state_Print(const lib_json::FParser& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_json.FParser.state.SetStrptrMaybe
bool                 state_SetStrptrMaybe(lib_json::FParser& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_json.FParser.state.SetStrptr
void                 state_SetStrptr(lib_json::FParser& parent, algo::strptr rhs, lib_json_FParser_state_Enum dflt) __attribute__((nothrow));

// Set all fields to initial values.
// func:lib_json.FParser..Init
void                 FParser_Init(lib_json::FParser& parent);
// func:lib_json.FParser..Uninit
void                 FParser_Uninit(lib_json::FParser& parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:lib_json.FParser.String  printfmt:Tuple
// func:lib_json.FParser..Print
void                 FParser_Print(lib_json::FParser& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_json.FieldId
#pragma pack(push,1)
struct FieldId { // lib_json.FieldId: Field read helper
    i32   value;   //   -1
    // func:lib_json.FieldId.value.Cast
    inline               operator lib_json_FieldIdEnum() const __attribute__((nothrow));
    // func:lib_json.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:lib_json.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:lib_json.FieldId..EnumCtor
    inline               FieldId(lib_json_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:lib_json.FieldId.value.GetEnum
inline lib_json_FieldIdEnum value_GetEnum(const lib_json::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_json.FieldId.value.SetEnum
inline void          value_SetEnum(lib_json::FieldId& parent, lib_json_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_json.FieldId.value.ToCstr
const char*          value_ToCstr(const lib_json::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:lib_json.FieldId.value.Print
void                 value_Print(const lib_json::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_json.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(lib_json::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_json.FieldId.value.SetStrptr
void                 value_SetStrptr(lib_json::FieldId& parent, algo::strptr rhs, lib_json_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:lib_json.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(lib_json::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_json::FieldId from an ascii string.
// The format of the string is the format of the lib_json::FieldId's only field
// func:lib_json.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(lib_json::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:lib_json.FieldId..Init
inline void          FieldId_Init(lib_json::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:lib_json.FieldId.String  printfmt:Raw
// func:lib_json.FieldId..Print
void                 FieldId_Print(lib_json::FieldId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace lib_json { // gen:ns_curstext

struct node_c_child_curs {// fcurs:lib_json.FNode.c_child/curs
    typedef lib_json::FNode ChildType;
    lib_json::FNode** elems;
    u32 n_elems;
    u32 index;
    node_c_child_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace lib_json { // gen:ns_func
// func:lib_json...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const lib_json::trace &row);// cfmt:lib_json.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_json::FldKey &row);// cfmt:lib_json.FldKey.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_json::FNode &row);// cfmt:lib_json.FNode.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_json::FParser &row);// cfmt:lib_json.FParser.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_json::FieldId &row);// cfmt:lib_json.FieldId.String
}
