//
// include/gen/sample_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
//#pragma endinclude

// --- sample.trace..Ctor
inline  sample::trace::trace() {
}

// --- sample.FDb.zd_rec.EmptyQ
// Return true if index is empty
inline bool sample::zd_rec_EmptyQ() {
    return _db.zd_rec_head == NULL;
}

// --- sample.FDb.zd_rec.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline sample::FRec* sample::zd_rec_First() {
    sample::FRec *row = NULL;
    row = _db.zd_rec_head;
    return row;
}

// --- sample.FDb.zd_rec.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool sample::zd_rec_InLlistQ(sample::FRec& row) {
    bool result = false;
    result = !(row.zd_rec_next == (sample::FRec*)-1);
    return result;
}

// --- sample.FDb.zd_rec.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline sample::FRec* sample::zd_rec_Last() {
    sample::FRec *row = NULL;
    row = _db.zd_rec_tail;
    return row;
}

// --- sample.FDb.zd_rec.Next
// Return pointer to next element in the list
inline sample::FRec* sample::zd_rec_Next(sample::FRec &row) {
    return row.zd_rec_next;
}

// --- sample.FDb.zd_rec.Prev
// Return pointer to previous element in the list
inline sample::FRec* sample::zd_rec_Prev(sample::FRec &row) {
    return row.zd_rec_prev;
}

// --- sample.FDb.zd_rec.qLast
// Return reference to last element in the index. No bounds checking.
inline sample::FRec& sample::zd_rec_qLast() {
    sample::FRec *row = NULL;
    row = _db.zd_rec_tail;
    return *row;
}

// --- sample.FDb.ind_rec.EmptyQ
// Return true if hash is empty
inline bool sample::ind_rec_EmptyQ() {
    return _db.ind_rec_n == 0;
}

// --- sample.FDb.ind_rec.N
// Return number of items in the hash
inline i32 sample::ind_rec_N() {
    return _db.ind_rec_n;
}

// --- sample.FDb.bh_rec.EmptyQ
// Return true if index is empty
inline bool sample::bh_rec_EmptyQ() {
    return _db.bh_rec_n == 0;
}

// --- sample.FDb.bh_rec.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline sample::FRec* sample::bh_rec_First() {
    sample::FRec *row = NULL;
    if (_db.bh_rec_n > 0) {
        row = _db.bh_rec_elems[0];
    }
    return row;
}

// --- sample.FDb.bh_rec.InBheapQ
// Return true if row is in index, false otherwise
inline bool sample::bh_rec_InBheapQ(sample::FRec& row) {
    bool result = false;
    result = row.bh_rec_idx != -1;
    return result;
}

// --- sample.FDb.bh_rec.N
// Return number of items in the heap
inline i32 sample::bh_rec_N() {
    return _db.bh_rec_n;
}

// --- sample.FDb.zd_sel_rec.EmptyQ
// Return true if index is empty
inline bool sample::zd_sel_rec_EmptyQ() {
    return _db.zd_sel_rec_head == NULL;
}

// --- sample.FDb.zd_sel_rec.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline sample::FRec* sample::zd_sel_rec_First() {
    sample::FRec *row = NULL;
    row = _db.zd_sel_rec_head;
    return row;
}

// --- sample.FDb.zd_sel_rec.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool sample::zd_sel_rec_InLlistQ(sample::FRec& row) {
    bool result = false;
    result = !(row.zd_sel_rec_next == (sample::FRec*)-1);
    return result;
}

// --- sample.FDb.zd_sel_rec.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline sample::FRec* sample::zd_sel_rec_Last() {
    sample::FRec *row = NULL;
    row = _db.zd_sel_rec_tail;
    return row;
}

// --- sample.FDb.zd_sel_rec.N
// Return number of items in the linked list
inline i32 sample::zd_sel_rec_N() {
    return _db.zd_sel_rec_n;
}

// --- sample.FDb.zd_sel_rec.Next
// Return pointer to next element in the list
inline sample::FRec* sample::zd_sel_rec_Next(sample::FRec &row) {
    return row.zd_sel_rec_next;
}

// --- sample.FDb.zd_sel_rec.Prev
// Return pointer to previous element in the list
inline sample::FRec* sample::zd_sel_rec_Prev(sample::FRec &row) {
    return row.zd_sel_rec_prev;
}

// --- sample.FDb.zd_sel_rec.qLast
// Return reference to last element in the index. No bounds checking.
inline sample::FRec& sample::zd_sel_rec_qLast() {
    sample::FRec *row = NULL;
    row = _db.zd_sel_rec_tail;
    return *row;
}

// --- sample.FDb.zd_rec_curs.Reset
// cursor points to valid item
inline void sample::_db_zd_rec_curs_Reset(_db_zd_rec_curs &curs, sample::FDb &parent) {
    curs.row = parent.zd_rec_head;
}

// --- sample.FDb.zd_rec_curs.ValidQ
// cursor points to valid item
inline bool sample::_db_zd_rec_curs_ValidQ(_db_zd_rec_curs &curs) {
    return curs.row != NULL;
}

// --- sample.FDb.zd_rec_curs.Next
// proceed to next item
inline void sample::_db_zd_rec_curs_Next(_db_zd_rec_curs &curs) {
    sample::FRec *next = (*curs.row).zd_rec_next;
    curs.row = next;
}

// --- sample.FDb.zd_rec_curs.Access
// item access
inline sample::FRec& sample::_db_zd_rec_curs_Access(_db_zd_rec_curs &curs) {
    return *curs.row;
}

// --- sample.FDb.bh_rec_curs.Access
// Access current element. If not more elements, return NULL
inline sample::FRec& sample::_db_bh_rec_curs_Access(_db_bh_rec_curs &curs) {
    return *curs.temp_elems[0];
}

// --- sample.FDb.bh_rec_curs.ValidQ
// Return true if Access() will return non-NULL.
inline bool sample::_db_bh_rec_curs_ValidQ(_db_bh_rec_curs &curs) {
    return curs.temp_n > 0;
}

// --- sample.FDb.zd_sel_rec_curs.Reset
// cursor points to valid item
inline void sample::_db_zd_sel_rec_curs_Reset(_db_zd_sel_rec_curs &curs, sample::FDb &parent) {
    curs.row = parent.zd_sel_rec_head;
}

// --- sample.FDb.zd_sel_rec_curs.ValidQ
// cursor points to valid item
inline bool sample::_db_zd_sel_rec_curs_ValidQ(_db_zd_sel_rec_curs &curs) {
    return curs.row != NULL;
}

// --- sample.FDb.zd_sel_rec_curs.Next
// proceed to next item
inline void sample::_db_zd_sel_rec_curs_Next(_db_zd_sel_rec_curs &curs) {
    sample::FRec *next = (*curs.row).zd_sel_rec_next;
    curs.row = next;
}

// --- sample.FDb.zd_sel_rec_curs.Access
// item access
inline sample::FRec& sample::_db_zd_sel_rec_curs_Access(_db_zd_sel_rec_curs &curs) {
    return *curs.row;
}

// --- sample.FRec..Init
// Set all fields to initial values.
inline void sample::FRec_Init(sample::FRec& rec) {
    rec.rec = i32(0);
    rec.rec2 = u32(0);
    rec.field3 = u8(0);
    rec.rec_next = (sample::FRec*)-1; // (sample.FDb.rec) not-in-tpool's freelist
    rec.zd_rec_next = (sample::FRec*)-1; // (sample.FDb.zd_rec) not-in-list
    rec.zd_rec_prev = NULL; // (sample.FDb.zd_rec)
    rec.ind_rec_next = (sample::FRec*)-1; // (sample.FDb.ind_rec) not-in-hash
    rec.bh_rec_idx = -1; // (sample.FDb.bh_rec) not-in-heap
    rec.zd_sel_rec_next = (sample::FRec*)-1; // (sample.FDb.zd_sel_rec) not-in-list
    rec.zd_sel_rec_prev = NULL; // (sample.FDb.zd_sel_rec)
}

// --- sample.FRec..Ctor
inline  sample::FRec::FRec() {
    sample::FRec_Init(*this);
}

// --- sample.FRec..Dtor
inline  sample::FRec::~FRec() {
    sample::FRec_Uninit(*this);
}

// --- sample.FieldId.value.GetEnum
// Get value of field as enum type
inline sample_FieldIdEnum sample::value_GetEnum(const sample::FieldId& parent) {
    return sample_FieldIdEnum(parent.value);
}

// --- sample.FieldId.value.SetEnum
// Set value of field from enum type.
inline void sample::value_SetEnum(sample::FieldId& parent, sample_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- sample.FieldId.value.Cast
inline  sample::FieldId::operator sample_FieldIdEnum() const {
    return sample_FieldIdEnum((*this).value);
}

// --- sample.FieldId..Init
// Set all fields to initial values.
inline void sample::FieldId_Init(sample::FieldId& parent) {
    parent.value = i32(-1);
}

// --- sample.FieldId..Ctor
inline  sample::FieldId::FieldId() {
    sample::FieldId_Init(*this);
}

// --- sample.FieldId..FieldwiseCtor
inline  sample::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- sample.FieldId..EnumCtor
inline  sample::FieldId::FieldId(sample_FieldIdEnum arg) {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sample::trace &row) {// cfmt:sample.trace.String
    sample::trace_Print(const_cast<sample::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sample::FieldId &row) {// cfmt:sample.FieldId.String
    sample::FieldId_Print(const_cast<sample::FieldId&>(row), str);
    return str;
}
