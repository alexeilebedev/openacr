//
// include/gen/sample_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude

// --- sample.trace..Ctor
inline  sample::trace::trace() {
}

// --- sample.FDb.ind_rec.EmptyQ
// Return true if hash is empty
inline bool sample::ind_rec_EmptyQ() {
    return _db.ind_rec_n == 0;
}

// --- sample.FDb.ind_rec.N
// Return number of items in the hash
inline i32 sample::ind_rec_N() {
    return _db.ind_rec_n;
}

// --- sample.FDb.bh_rec.EmptyQ
// Return true if index is empty
inline bool sample::bh_rec_EmptyQ() {
    return _db.bh_rec_n == 0;
}

// --- sample.FDb.bh_rec.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline sample::FRec* sample::bh_rec_First() {
    sample::FRec *row = NULL;
    if (_db.bh_rec_n > 0) {
        row = _db.bh_rec_elems[0];
    }
    return row;
}

// --- sample.FDb.bh_rec.InBheapQ
// Return true if row is in index, false otherwise
inline bool sample::bh_rec_InBheapQ(sample::FRec& row) {
    bool result = false;
    result = row.bh_rec_idx != -1;
    return result;
}

// --- sample.FDb.bh_rec.N
// Return number of items in the heap
inline i32 sample::bh_rec_N() {
    return _db.bh_rec_n;
}

// --- sample.FDb.bh_rec_curs.Access
// Access current element. If not more elements, return NULL
inline sample::FRec& sample::_db_bh_rec_curs_Access(_db_bh_rec_curs &curs) {
    return *curs.temp_elems[0];
}

// --- sample.FDb.bh_rec_curs.ValidQ
// Return true if Access() will return non-NULL.
inline bool sample::_db_bh_rec_curs_ValidQ(_db_bh_rec_curs &curs) {
    return curs.temp_n > 0;
}

// --- sample.Reckey..Hash
inline u32 sample::Reckey_Hash(u32 prev, const sample::Reckey& rhs) {
    prev = i32_Hash(prev, rhs.key1);
    prev = double_Hash(prev, rhs.key2);
    prev = Smallstr20_Hash(prev, rhs.key3);
    return prev;
}

// --- sample.Reckey..EqOp
inline bool sample::Reckey::operator ==(const sample::Reckey &rhs) const {
    return sample::Reckey_Eq(const_cast<sample::Reckey&>(*this),const_cast<sample::Reckey&>(rhs));
}

// --- sample.Reckey..NeOp
inline bool sample::Reckey::operator !=(const sample::Reckey &rhs) const {
    return !sample::Reckey_Eq(const_cast<sample::Reckey&>(*this),const_cast<sample::Reckey&>(rhs));
}

// --- sample.Reckey..LtOp
inline bool sample::Reckey::operator <(const sample::Reckey &rhs) const {
    return sample::Reckey_Lt(const_cast<sample::Reckey&>(*this),const_cast<sample::Reckey&>(rhs));
}

// --- sample.Reckey..GtOp
inline bool sample::Reckey::operator >(const sample::Reckey &rhs) const {
    return sample::Reckey_Lt(const_cast<sample::Reckey&>(rhs),const_cast<sample::Reckey&>(*this));
}

// --- sample.Reckey..LeOp
inline bool sample::Reckey::operator <=(const sample::Reckey &rhs) const {
    return !sample::Reckey_Lt(const_cast<sample::Reckey&>(rhs),const_cast<sample::Reckey&>(*this));
}

// --- sample.Reckey..GeOp
inline bool sample::Reckey::operator >=(const sample::Reckey &rhs) const {
    return !sample::Reckey_Lt(const_cast<sample::Reckey&>(*this),const_cast<sample::Reckey&>(rhs));
}

// --- sample.Reckey..Lt
inline bool sample::Reckey_Lt(sample::Reckey& lhs, sample::Reckey& rhs) {
    return Reckey_Cmp(lhs,rhs) < 0;
}

// --- sample.Reckey..Cmp
inline i32 sample::Reckey_Cmp(sample::Reckey& lhs, sample::Reckey& rhs) {
    i32 retval = 0;
    retval = i32_Cmp(lhs.key1, rhs.key1);
    if (retval != 0) {
        return retval;
    }
    retval = double_Cmp(lhs.key2, rhs.key2);
    if (retval != 0) {
        return retval;
    }
    retval = algo::Smallstr20_Cmp(lhs.key3, rhs.key3);
    return retval;
}

// --- sample.Reckey..Init
// Set all fields to initial values.
inline void sample::Reckey_Init(sample::Reckey& parent) {
    parent.key1 = i32(0);
    parent.key2 = double(0.0);
}

// --- sample.Reckey..Eq
inline bool sample::Reckey_Eq(sample::Reckey& lhs, sample::Reckey& rhs) {
    bool retval = true;
    retval = i32_Eq(lhs.key1, rhs.key1);
    if (!retval) {
        return false;
    }
    retval = double_Eq(lhs.key2, rhs.key2);
    if (!retval) {
        return false;
    }
    retval = algo::Smallstr20_Eq(lhs.key3, rhs.key3);
    return retval;
}

// --- sample.Reckey..Update
// Set value. Return true if new value is different from old value.
inline bool sample::Reckey_Update(sample::Reckey &lhs, sample::Reckey& rhs) {
    bool ret = !Reckey_Eq(lhs, rhs); // compare values
    if (ret) {
        lhs = rhs; // update
    }
    return ret;
}

// --- sample.Reckey..Ctor
inline  sample::Reckey::Reckey() {
    sample::Reckey_Init(*this);
}

// --- sample.Reckey..FieldwiseCtor
inline  sample::Reckey::Reckey(i32 in_key1, double in_key2, const algo::strptr& in_key3)
    : key1(in_key1)
    , key2(in_key2)
    , key3(in_key3)
 {
}

// --- sample.FRec.rec.Lt
// Compare two fields. Comparison is anti-symmetric: if a>b, then !(b>a).
inline bool sample::rec_Lt(sample::FRec& rec, sample::FRec &rhs) {
    return sample::Reckey_Lt(rec.rec,rhs.rec);
}

// --- sample.FRec.rec.Cmp
// Compare two fields.
inline i32 sample::rec_Cmp(sample::FRec& rec, sample::FRec &rhs) {
    i32 retval = 0;
    retval = sample::Reckey_Cmp(rec.rec, rhs.rec);
    return retval;
}

// --- sample.FRec..Init
// Set all fields to initial values.
inline void sample::FRec_Init(sample::FRec& rec) {
    rec.rec_next = (sample::FRec*)-1; // (sample.FDb.rec) not-in-tpool's freelist
    rec.ind_rec_next = (sample::FRec*)-1; // (sample.FDb.ind_rec) not-in-hash
    rec.bh_rec_idx = -1; // (sample.FDb.bh_rec) not-in-heap
}

// --- sample.FRec..Ctor
inline  sample::FRec::FRec() {
    sample::FRec_Init(*this);
}

// --- sample.FRec..Dtor
inline  sample::FRec::~FRec() {
    sample::FRec_Uninit(*this);
}

// --- sample.FieldId.value.GetEnum
// Get value of field as enum type
inline sample_FieldIdEnum sample::value_GetEnum(const sample::FieldId& parent) {
    return sample_FieldIdEnum(parent.value);
}

// --- sample.FieldId.value.SetEnum
// Set value of field from enum type.
inline void sample::value_SetEnum(sample::FieldId& parent, sample_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- sample.FieldId.value.Cast
inline  sample::FieldId::operator sample_FieldIdEnum() const {
    return sample_FieldIdEnum((*this).value);
}

// --- sample.FieldId..Init
// Set all fields to initial values.
inline void sample::FieldId_Init(sample::FieldId& parent) {
    parent.value = i32(-1);
}

// --- sample.FieldId..Ctor
inline  sample::FieldId::FieldId() {
    sample::FieldId_Init(*this);
}

// --- sample.FieldId..FieldwiseCtor
inline  sample::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- sample.FieldId..EnumCtor
inline  sample::FieldId::FieldId(sample_FieldIdEnum arg) {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sample::trace &row) {// cfmt:sample.trace.String
    sample::trace_Print(const_cast<sample::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sample::Reckey &row) {// cfmt:sample.Reckey.String
    sample::Reckey_Print(const_cast<sample::Reckey&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const sample::FieldId &row) {// cfmt:sample.FieldId.String
    sample::FieldId_Print(const_cast<sample::FieldId&>(row), str);
    return str;
}
