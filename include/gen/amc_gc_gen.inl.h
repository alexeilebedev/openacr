//
// include/gen/amc_gc_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline amc_gc::trace::trace() {
}

inline amc_gc::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline amc_gc::FieldId::FieldId(amc_gc_FieldIdEnum arg) { this->value = i32(arg); }
inline amc_gc::FieldId::FieldId() {
    amc_gc::FieldId_Init(*this);
}


// --- amc_gc.FieldId.value.GetEnum
// Get value of field as enum type
inline amc_gc_FieldIdEnum amc_gc::value_GetEnum(const amc_gc::FieldId& parent) {
    return amc_gc_FieldIdEnum(parent.value);
}

// --- amc_gc.FieldId.value.SetEnum
// Set value of field from enum type.
inline void amc_gc::value_SetEnum(amc_gc::FieldId& parent, amc_gc_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- amc_gc.FieldId.value.Cast
inline amc_gc::FieldId::operator amc_gc_FieldIdEnum () const {
    return amc_gc_FieldIdEnum((*this).value);
}

// --- amc_gc.FieldId..Init
// Set all fields to initial values.
inline void amc_gc::FieldId_Init(amc_gc::FieldId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const amc_gc::trace &row) {// cfmt:amc_gc.trace.String
    amc_gc::trace_Print(const_cast<amc_gc::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const amc_gc::FieldId &row) {// cfmt:amc_gc.FieldId.String
    amc_gc::FieldId_Print(const_cast<amc_gc::FieldId&>(row), str);
    return str;
}
