//
// include/gen/lib_sqlite_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/lib_ctype_gen.inl.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// --- lib_sqlite.FConn..Init
// Set all fields to initial values.
inline void lib_sqlite::FConn_Init(lib_sqlite::FConn& conn) {
    conn.db = NULL;
    conn.conn_next = (lib_sqlite::FConn*)-1; // (lib_sqlite.FDb.conn) not-in-tpool's freelist
    conn.ind_conn_next = (lib_sqlite::FConn*)-1; // (lib_sqlite.FDb.ind_conn) not-in-hash
}

// --- lib_sqlite.FConn..Ctor
inline  lib_sqlite::FConn::FConn() {
    lib_sqlite::FConn_Init(*this);
}

// --- lib_sqlite.FConn..Dtor
inline  lib_sqlite::FConn::~FConn() {
    lib_sqlite::FConn_Uninit(*this);
}

// --- lib_sqlite.trace..Ctor
inline  lib_sqlite::trace::trace() {
}

// --- lib_sqlite.FDb.ind_conn.EmptyQ
// Return true if hash is empty
inline bool lib_sqlite::ind_conn_EmptyQ() {
    return _db.ind_conn_n == 0;
}

// --- lib_sqlite.FDb.ind_conn.N
// Return number of items in the hash
inline i32 lib_sqlite::ind_conn_N() {
    return _db.ind_conn_n;
}

// --- lib_sqlite.FDb.substr.EmptyQ
// Return true if index is empty
inline bool lib_sqlite::substr_EmptyQ() {
    return _db.substr_n == 0;
}

// --- lib_sqlite.FDb.substr.Find
// Look up row by row id. Return NULL if out of range
inline lib_sqlite::FSubstr* lib_sqlite::substr_Find(u64 t) {
    lib_sqlite::FSubstr *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.substr_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.substr_lary[bsr][index];
    }
    return retval;
}

// --- lib_sqlite.FDb.substr.Last
// Return pointer to last element of array, or NULL if array is empty
inline lib_sqlite::FSubstr* lib_sqlite::substr_Last() {
    return substr_Find(u64(_db.substr_n-1));
}

// --- lib_sqlite.FDb.substr.N
// Return number of items in the pool
inline i32 lib_sqlite::substr_N() {
    return _db.substr_n;
}

// --- lib_sqlite.FDb.substr.qFind
// 'quick' Access row by row id. No bounds checking.
inline lib_sqlite::FSubstr& lib_sqlite::substr_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.substr_lary[bsr][index];
}

// --- lib_sqlite.FDb.substr_curs.Reset
// cursor points to valid item
inline void lib_sqlite::_db_substr_curs_Reset(_db_substr_curs &curs, lib_sqlite::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- lib_sqlite.FDb.substr_curs.ValidQ
// cursor points to valid item
inline bool lib_sqlite::_db_substr_curs_ValidQ(_db_substr_curs &curs) {
    return curs.index < _db.substr_n;
}

// --- lib_sqlite.FDb.substr_curs.Next
// proceed to next item
inline void lib_sqlite::_db_substr_curs_Next(_db_substr_curs &curs) {
    curs.index++;
}

// --- lib_sqlite.FDb.substr_curs.Access
// item access
inline lib_sqlite::FSubstr& lib_sqlite::_db_substr_curs_Access(_db_substr_curs &curs) {
    return substr_qFind(u64(curs.index));
}

// --- lib_sqlite.FSubstr..Ctor
inline  lib_sqlite::FSubstr::FSubstr() {
}

// --- lib_sqlite.FieldId.value.GetEnum
// Get value of field as enum type
inline lib_sqlite_FieldIdEnum lib_sqlite::value_GetEnum(const lib_sqlite::FieldId& parent) {
    return lib_sqlite_FieldIdEnum(parent.value);
}

// --- lib_sqlite.FieldId.value.SetEnum
// Set value of field from enum type.
inline void lib_sqlite::value_SetEnum(lib_sqlite::FieldId& parent, lib_sqlite_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- lib_sqlite.FieldId.value.Cast
inline  lib_sqlite::FieldId::operator lib_sqlite_FieldIdEnum() const {
    return lib_sqlite_FieldIdEnum((*this).value);
}

// --- lib_sqlite.FieldId..Init
// Set all fields to initial values.
inline void lib_sqlite::FieldId_Init(lib_sqlite::FieldId& parent) {
    parent.value = i32(-1);
}

// --- lib_sqlite.FieldId..Ctor
inline  lib_sqlite::FieldId::FieldId() {
    lib_sqlite::FieldId_Init(*this);
}

// --- lib_sqlite.FieldId..FieldwiseCtor
inline  lib_sqlite::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- lib_sqlite.FieldId..EnumCtor
inline  lib_sqlite::FieldId::FieldId(lib_sqlite_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- lib_sqlite.TableId.value.GetEnum
// Get value of field as enum type
inline lib_sqlite_TableIdEnum lib_sqlite::value_GetEnum(const lib_sqlite::TableId& parent) {
    return lib_sqlite_TableIdEnum(parent.value);
}

// --- lib_sqlite.TableId.value.SetEnum
// Set value of field from enum type.
inline void lib_sqlite::value_SetEnum(lib_sqlite::TableId& parent, lib_sqlite_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- lib_sqlite.TableId.value.Cast
inline  lib_sqlite::TableId::operator lib_sqlite_TableIdEnum() const {
    return lib_sqlite_TableIdEnum((*this).value);
}

// --- lib_sqlite.TableId..Init
// Set all fields to initial values.
inline void lib_sqlite::TableId_Init(lib_sqlite::TableId& parent) {
    parent.value = i32(-1);
}

// --- lib_sqlite.TableId..Ctor
inline  lib_sqlite::TableId::TableId() {
    lib_sqlite::TableId_Init(*this);
}

// --- lib_sqlite.TableId..FieldwiseCtor
inline  lib_sqlite::TableId::TableId(i32 in_value)
    : value(in_value)
 {
}

// --- lib_sqlite.TableId..EnumCtor
inline  lib_sqlite::TableId::TableId(lib_sqlite_TableIdEnum arg) {
    this->value = i32(arg);
}

// --- lib_sqlite.Vtab..Init
// Set all fields to initial values.
inline void lib_sqlite::Vtab_Init(lib_sqlite::Vtab& parent) {
    parent.c_ssimfile = NULL;
    parent.p_ctype = NULL;
}

// --- lib_sqlite.Vtab..Ctor
inline  lib_sqlite::Vtab::Vtab() {
    lib_sqlite::Vtab_Init(*this);
}

// --- lib_sqlite.VtabCurs..Init
// Set all fields to initial values.
inline void lib_sqlite::VtabCurs_Init(lib_sqlite::VtabCurs& parent) {
    parent.i = i32(0);
    parent.eof = bool(false);
}

// --- lib_sqlite.VtabCurs..Ctor
inline  lib_sqlite::VtabCurs::VtabCurs() {
    lib_sqlite::VtabCurs_Init(*this);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_sqlite::trace &row) {// cfmt:lib_sqlite.trace.String
    lib_sqlite::trace_Print(const_cast<lib_sqlite::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_sqlite::FieldId &row) {// cfmt:lib_sqlite.FieldId.String
    lib_sqlite::FieldId_Print(const_cast<lib_sqlite::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_sqlite::TableId &row) {// cfmt:lib_sqlite.TableId.String
    lib_sqlite::TableId_Print(const_cast<lib_sqlite::TableId&>(row), str);
    return str;
}
