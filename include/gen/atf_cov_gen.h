//
// include/gen/atf_cov_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/dev_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/command_gen.h"
#include "include/gen/algo_lib_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- atf_cov_FieldIdEnum

enum atf_cov_FieldIdEnum {        // atf_cov.FieldId.value
     atf_cov_FieldId_value   = 0
};

enum { atf_cov_FieldIdEnum_N = 1 };


// --- atf_cov_Phase_value_Enum

enum atf_cov_Phase_value_Enum {         // atf_cov.Phase.value
     atf_cov_Phase_value_runcmd   = 0   // Run command
    ,atf_cov_Phase_value_gcov     = 1   // Prepare and run gcov
    ,atf_cov_Phase_value_ssim     = 2   // Generate ssim coverage files
    ,atf_cov_Phase_value_report   = 3   // Create all report
};

enum { atf_cov_Phase_value_Enum_N = 4 };


// --- atf_cov_TableIdEnum

enum atf_cov_TableIdEnum {                 // atf_cov.TableId.value
     atf_cov_TableId_dev_Covfile     = 0   // dev.Covfile -> atf_cov.FCovfile
    ,atf_cov_TableId_dev_covfile     = 0   // dev.covfile -> atf_cov.FCovfile
    ,atf_cov_TableId_dev_Covline     = 1   // dev.Covline -> atf_cov.FCovline
    ,atf_cov_TableId_dev_covline     = 1   // dev.covline -> atf_cov.FCovline
    ,atf_cov_TableId_dev_Covtarget   = 2   // dev.Covtarget -> atf_cov.FCovtarget
    ,atf_cov_TableId_dev_covtarget   = 2   // dev.covtarget -> atf_cov.FCovtarget
    ,atf_cov_TableId_dev_Gitfile     = 3   // dev.Gitfile -> atf_cov.FGitfile
    ,atf_cov_TableId_dev_gitfile     = 3   // dev.gitfile -> atf_cov.FGitfile
    ,atf_cov_TableId_dev_Target      = 4   // dev.Target -> atf_cov.FTarget
    ,atf_cov_TableId_dev_target      = 4   // dev.target -> atf_cov.FTarget
    ,atf_cov_TableId_dev_Targsrc     = 5   // dev.Targsrc -> atf_cov.FTargsrc
    ,atf_cov_TableId_dev_targsrc     = 5   // dev.targsrc -> atf_cov.FTargsrc
    ,atf_cov_TableId_dev_Tgtcov      = 6   // dev.Tgtcov -> atf_cov.FTgtcov
    ,atf_cov_TableId_dev_tgtcov      = 6   // dev.tgtcov -> atf_cov.FTgtcov
};

enum { atf_cov_TableIdEnum_N = 14 };

namespace atf_cov { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace atf_cov { // gen:ns_tclass_field
extern const char *atf_cov_help;
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace dev { struct Covfile; }
namespace dev { struct Covline; }
namespace atf_cov { struct FGitfile; }
namespace dev { struct Covtarget; }
namespace dev { struct Gitfile; }
namespace dev { struct Target; }
namespace dev { struct Targsrc; }
namespace atf_cov { struct FTarget; }
namespace dev { struct Tgtcov; }
namespace atf_cov { struct _db_covline_curs; }
namespace atf_cov { struct _db_target_curs; }
namespace atf_cov { struct _db_targsrc_curs; }
namespace atf_cov { struct _db_gitfile_curs; }
namespace atf_cov { struct _db_covtarget_curs; }
namespace atf_cov { struct _db_covfile_curs; }
namespace atf_cov { struct _db_tgtcov_curs; }
namespace atf_cov { struct gitfile_c_covline_curs; }
namespace atf_cov { struct target_c_targsrc_curs; }
namespace atf_cov { struct FCovfile; }
namespace atf_cov { struct FCovline; }
namespace atf_cov { struct FCovtarget; }
namespace atf_cov { struct trace; }
namespace atf_cov { struct FDb; }
namespace atf_cov { struct FTargsrc; }
namespace atf_cov { struct FTgtcov; }
namespace atf_cov { struct FieldId; }
namespace atf_cov { struct Phase; }
namespace atf_cov { struct TableId; }
namespace atf_cov { extern struct atf_cov::FDb _db; }
namespace atf_cov { // gen:ns_print_struct

// --- atf_cov.FCovfile
// create: atf_cov.FDb.covfile (Lary)
// global access: covfile (Lary, by rowid)
// access: atf_cov.FGitfile.c_covfile (Ptr)
struct FCovfile { // atf_cov.FCovfile
    algo::Smallstr200   covfile;   // Source file
    u32                 total;     //   0  Total lines
    u32                 nonexe;    //   0  Non-executable lines
    u32                 exe;       //   0  Executable lines
    algo::U32Dec2       exer;      // Percentage of executable lines
    u32                 hit;       //   0  Exercised lines
    algo::U32Dec2       cov;       // Line coverage
    // func:atf_cov.FCovfile..AssignOp
    inline atf_cov::FCovfile& operator =(const atf_cov::FCovfile &rhs) = delete;
    // func:atf_cov.FCovfile..CopyCtor
    inline               FCovfile(const atf_cov::FCovfile &rhs) = delete;
private:
    // func:atf_cov.FCovfile..Ctor
    inline               FCovfile() __attribute__((nothrow));
    // func:atf_cov.FCovfile..Dtor
    inline               ~FCovfile() __attribute__((nothrow));
    friend atf_cov::FCovfile&   covfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FCovfile*   covfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 covfile_RemoveAll() __attribute__((nothrow));
    friend void                 covfile_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FCovfile.base.CopyOut
void                 covfile_CopyOut(atf_cov::FCovfile &row, dev::Covfile &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FCovfile.base.CopyIn
void                 covfile_CopyIn(atf_cov::FCovfile &row, dev::Covfile &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:atf_cov.FCovfile..Init
inline void          FCovfile_Init(atf_cov::FCovfile& covfile);
// func:atf_cov.FCovfile..Uninit
void                 FCovfile_Uninit(atf_cov::FCovfile& covfile) __attribute__((nothrow));

// --- atf_cov.FCovline
// create: atf_cov.FDb.covline (Lary)
// global access: covline (Lary, by rowid)
// global access: ind_covline (Thash, hash field covline)
// access: atf_cov.FGitfile.c_covline (Ptrary)
struct FCovline { // atf_cov.FCovline
    algo::Smallstr200    covline;                    // file:line
    char                 flag;                       //   'N'  Flag
    u32                  hit;                        //   0  Number of hits
    algo::cstring        text;                       // Line text
    atf_cov::FGitfile*   p_gitfile;                  // reference to parent row
    bool                 gitfile_c_covline_in_ary;   //   false  membership flag
    atf_cov::FCovline*   ind_covline_next;           // hash next
    // x-reference on atf_cov.FCovline.p_gitfile prevents copy
    // func:atf_cov.FCovline..AssignOp
    inline atf_cov::FCovline& operator =(const atf_cov::FCovline &rhs) = delete;
    // x-reference on atf_cov.FCovline.p_gitfile prevents copy
    // func:atf_cov.FCovline..CopyCtor
    inline               FCovline(const atf_cov::FCovline &rhs) = delete;
private:
    // func:atf_cov.FCovline..Ctor
    inline               FCovline() __attribute__((nothrow));
    // func:atf_cov.FCovline..Dtor
    inline               ~FCovline() __attribute__((nothrow));
    friend atf_cov::FCovline&   covline_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FCovline*   covline_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 covline_RemoveAll() __attribute__((nothrow));
    friend void                 covline_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FCovline.base.CopyOut
void                 covline_CopyOut(atf_cov::FCovline &row, dev::Covline &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FCovline.base.CopyIn
void                 covline_CopyIn(atf_cov::FCovline &row, dev::Covline &in) __attribute__((nothrow));

// func:atf_cov.FCovline.src.Get
algo::Smallstr200    src_Get(atf_cov::FCovline& covline) __attribute__((__warn_unused_result__, nothrow));

// func:atf_cov.FCovline.line.Get
u32                  line_Get(atf_cov::FCovline& covline) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:atf_cov.FCovline..Init
inline void          FCovline_Init(atf_cov::FCovline& covline);
// func:atf_cov.FCovline..Uninit
void                 FCovline_Uninit(atf_cov::FCovline& covline) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:atf_cov.FCovline.String  printfmt:Tuple
// func:atf_cov.FCovline..Print
void                 FCovline_Print(atf_cov::FCovline& row, algo::cstring& str) __attribute__((nothrow));

// --- atf_cov.FCovtarget
// create: atf_cov.FDb.covtarget (Lary)
// global access: covtarget (Lary, by rowid)
// access: atf_cov.FTarget.c_covtarget (Ptr)
struct FCovtarget { // atf_cov.FCovtarget
    algo::Smallstr16   covtarget;   // Target
    u32                total;       //   0  Total lines
    u32                nonexe;      //   0  Non-executable lines
    u32                exe;         //   0  Executable lines
    algo::U32Dec2      exer;        // Percentage of executable lines
    u32                hit;         //   0  Exercised lines
    algo::U32Dec2      cov;         // Line coverage
    // func:atf_cov.FCovtarget..AssignOp
    inline atf_cov::FCovtarget& operator =(const atf_cov::FCovtarget &rhs) = delete;
    // func:atf_cov.FCovtarget..CopyCtor
    inline               FCovtarget(const atf_cov::FCovtarget &rhs) = delete;
private:
    // func:atf_cov.FCovtarget..Ctor
    inline               FCovtarget() __attribute__((nothrow));
    // func:atf_cov.FCovtarget..Dtor
    inline               ~FCovtarget() __attribute__((nothrow));
    friend atf_cov::FCovtarget& covtarget_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FCovtarget* covtarget_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 covtarget_RemoveAll() __attribute__((nothrow));
    friend void                 covtarget_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FCovtarget.base.CopyOut
void                 covtarget_CopyOut(atf_cov::FCovtarget &row, dev::Covtarget &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FCovtarget.base.CopyIn
void                 covtarget_CopyIn(atf_cov::FCovtarget &row, dev::Covtarget &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:atf_cov.FCovtarget..Init
inline void          FCovtarget_Init(atf_cov::FCovtarget& covtarget);
// func:atf_cov.FCovtarget..Uninit
void                 FCovtarget_Uninit(atf_cov::FCovtarget& covtarget) __attribute__((nothrow));

// --- atf_cov.trace
#pragma pack(push,1)
struct trace { // atf_cov.trace
    // func:atf_cov.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:atf_cov.trace.String  printfmt:Tuple
// func:atf_cov.trace..Print
void                 trace_Print(atf_cov::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- atf_cov.FDb
// create: atf_cov.FDb._db (Global)
struct FDb { // atf_cov.FDb: In-memory database for atf_cov
    command::atf_cov       cmdline;                     //
    command::bash_proc     bash;                        //
    algo_lib::FFildes      logfd;                       //
    dev::Covtarget         total;                       //
    atf_cov::FCovline*     covline_lary[32];            // level array
    i32                    covline_n;                   // number of elements in array
    atf_cov::FCovline**    ind_covline_buckets_elems;   // pointer to bucket array
    i32                    ind_covline_buckets_n;       // number of elements in bucket array
    i32                    ind_covline_n;               // number of elements in the hash table
    atf_cov::FTarget*      target_lary[32];             // level array
    i32                    target_n;                    // number of elements in array
    atf_cov::FTarget**     ind_target_buckets_elems;    // pointer to bucket array
    i32                    ind_target_buckets_n;        // number of elements in bucket array
    i32                    ind_target_n;                // number of elements in the hash table
    atf_cov::FTargsrc*     targsrc_lary[32];            // level array
    i32                    targsrc_n;                   // number of elements in array
    atf_cov::FTargsrc**    ind_targsrc_buckets_elems;   // pointer to bucket array
    i32                    ind_targsrc_buckets_n;       // number of elements in bucket array
    i32                    ind_targsrc_n;               // number of elements in the hash table
    atf_cov::FGitfile*     gitfile_lary[32];            // level array
    i32                    gitfile_n;                   // number of elements in array
    atf_cov::FGitfile**    ind_gitfile_buckets_elems;   // pointer to bucket array
    i32                    ind_gitfile_buckets_n;       // number of elements in bucket array
    i32                    ind_gitfile_n;               // number of elements in the hash table
    atf_cov::FCovtarget*   covtarget_lary[32];          // level array
    i32                    covtarget_n;                 // number of elements in array
    atf_cov::FCovfile*     covfile_lary[32];            // level array
    i32                    covfile_n;                   // number of elements in array
    atf_cov::FTgtcov*      tgtcov_lary[32];             // level array
    i32                    tgtcov_n;                    // number of elements in array
    atf_cov::FTgtcov**     ind_tgtcov_buckets_elems;    // pointer to bucket array
    i32                    ind_tgtcov_buckets_n;        // number of elements in bucket array
    i32                    ind_tgtcov_n;                // number of elements in the hash table
    atf_cov::trace         trace;                       //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     atf_cov.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:atf_cov.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:atf_cov.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:atf_cov.FDb._db.Step
void                 Step();
// Main function
// func:atf_cov.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:atf_cov.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:atf_cov.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:atf_cov.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:atf_cov.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:atf_cov.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:atf_cov.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.covline.Alloc
atf_cov::FCovline&   covline_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.covline.AllocMaybe
atf_cov::FCovline*   covline_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.covline.InsertMaybe
atf_cov::FCovline*   covline_InsertMaybe(const dev::Covline &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.covline.AllocMem
void*                covline_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.covline.EmptyQ
inline bool          covline_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.covline.Find
inline atf_cov::FCovline* covline_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.covline.Last
inline atf_cov::FCovline* covline_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.covline.N
inline i32           covline_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.covline.RemoveAll
void                 covline_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.covline.RemoveLast
void                 covline_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.covline.qFind
inline atf_cov::FCovline& covline_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.covline.XrefMaybe
bool                 covline_XrefMaybe(atf_cov::FCovline &row);

// Return true if hash is empty
// func:atf_cov.FDb.ind_covline.EmptyQ
inline bool          ind_covline_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:atf_cov.FDb.ind_covline.Find
atf_cov::FCovline*   ind_covline_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:atf_cov.FDb.ind_covline.FindX
atf_cov::FCovline&   ind_covline_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:atf_cov.FDb.ind_covline.N
inline i32           ind_covline_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:atf_cov.FDb.ind_covline.InsertMaybe
bool                 ind_covline_InsertMaybe(atf_cov::FCovline& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:atf_cov.FDb.ind_covline.Remove
void                 ind_covline_Remove(atf_cov::FCovline& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:atf_cov.FDb.ind_covline.Reserve
void                 ind_covline_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.target.Alloc
atf_cov::FTarget&    target_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.target.AllocMaybe
atf_cov::FTarget*    target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.target.InsertMaybe
atf_cov::FTarget*    target_InsertMaybe(const dev::Target &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.target.AllocMem
void*                target_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.target.EmptyQ
inline bool          target_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.target.Find
inline atf_cov::FTarget* target_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.target.Last
inline atf_cov::FTarget* target_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.target.N
inline i32           target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.target.RemoveAll
void                 target_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.target.RemoveLast
void                 target_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.target.qFind
inline atf_cov::FTarget& target_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.target.XrefMaybe
bool                 target_XrefMaybe(atf_cov::FTarget &row);

// Return true if hash is empty
// func:atf_cov.FDb.ind_target.EmptyQ
inline bool          ind_target_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:atf_cov.FDb.ind_target.Find
atf_cov::FTarget*    ind_target_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:atf_cov.FDb.ind_target.FindX
atf_cov::FTarget&    ind_target_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:atf_cov.FDb.ind_target.GetOrCreate
atf_cov::FTarget&    ind_target_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:atf_cov.FDb.ind_target.N
inline i32           ind_target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:atf_cov.FDb.ind_target.InsertMaybe
bool                 ind_target_InsertMaybe(atf_cov::FTarget& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:atf_cov.FDb.ind_target.Remove
void                 ind_target_Remove(atf_cov::FTarget& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:atf_cov.FDb.ind_target.Reserve
void                 ind_target_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.targsrc.Alloc
atf_cov::FTargsrc&   targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.targsrc.AllocMaybe
atf_cov::FTargsrc*   targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.targsrc.InsertMaybe
atf_cov::FTargsrc*   targsrc_InsertMaybe(const dev::Targsrc &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.targsrc.AllocMem
void*                targsrc_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.targsrc.EmptyQ
inline bool          targsrc_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.targsrc.Find
inline atf_cov::FTargsrc* targsrc_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.targsrc.Last
inline atf_cov::FTargsrc* targsrc_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.targsrc.N
inline i32           targsrc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.targsrc.RemoveAll
void                 targsrc_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.targsrc.RemoveLast
void                 targsrc_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.targsrc.qFind
inline atf_cov::FTargsrc& targsrc_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.targsrc.XrefMaybe
bool                 targsrc_XrefMaybe(atf_cov::FTargsrc &row);

// Return true if hash is empty
// func:atf_cov.FDb.ind_targsrc.EmptyQ
inline bool          ind_targsrc_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:atf_cov.FDb.ind_targsrc.Find
atf_cov::FTargsrc*   ind_targsrc_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:atf_cov.FDb.ind_targsrc.FindX
atf_cov::FTargsrc&   ind_targsrc_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:atf_cov.FDb.ind_targsrc.N
inline i32           ind_targsrc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:atf_cov.FDb.ind_targsrc.InsertMaybe
bool                 ind_targsrc_InsertMaybe(atf_cov::FTargsrc& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:atf_cov.FDb.ind_targsrc.Remove
void                 ind_targsrc_Remove(atf_cov::FTargsrc& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:atf_cov.FDb.ind_targsrc.Reserve
void                 ind_targsrc_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.gitfile.Alloc
atf_cov::FGitfile&   gitfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.gitfile.AllocMaybe
atf_cov::FGitfile*   gitfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.gitfile.InsertMaybe
atf_cov::FGitfile*   gitfile_InsertMaybe(const dev::Gitfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.gitfile.AllocMem
void*                gitfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.gitfile.EmptyQ
inline bool          gitfile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.gitfile.Find
inline atf_cov::FGitfile* gitfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.gitfile.Last
inline atf_cov::FGitfile* gitfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.gitfile.N
inline i32           gitfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.gitfile.RemoveAll
void                 gitfile_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.gitfile.RemoveLast
void                 gitfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.gitfile.qFind
inline atf_cov::FGitfile& gitfile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.gitfile.XrefMaybe
bool                 gitfile_XrefMaybe(atf_cov::FGitfile &row);

// Return true if hash is empty
// func:atf_cov.FDb.ind_gitfile.EmptyQ
inline bool          ind_gitfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:atf_cov.FDb.ind_gitfile.Find
atf_cov::FGitfile*   ind_gitfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:atf_cov.FDb.ind_gitfile.FindX
atf_cov::FGitfile&   ind_gitfile_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:atf_cov.FDb.ind_gitfile.GetOrCreate
atf_cov::FGitfile&   ind_gitfile_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:atf_cov.FDb.ind_gitfile.N
inline i32           ind_gitfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:atf_cov.FDb.ind_gitfile.InsertMaybe
bool                 ind_gitfile_InsertMaybe(atf_cov::FGitfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:atf_cov.FDb.ind_gitfile.Remove
void                 ind_gitfile_Remove(atf_cov::FGitfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:atf_cov.FDb.ind_gitfile.Reserve
void                 ind_gitfile_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.covtarget.Alloc
atf_cov::FCovtarget& covtarget_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.covtarget.AllocMaybe
atf_cov::FCovtarget* covtarget_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.covtarget.InsertMaybe
atf_cov::FCovtarget* covtarget_InsertMaybe(const dev::Covtarget &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.covtarget.AllocMem
void*                covtarget_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.covtarget.EmptyQ
inline bool          covtarget_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.covtarget.Find
inline atf_cov::FCovtarget* covtarget_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.covtarget.Last
inline atf_cov::FCovtarget* covtarget_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.covtarget.N
inline i32           covtarget_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.covtarget.RemoveAll
void                 covtarget_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.covtarget.RemoveLast
void                 covtarget_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.covtarget.qFind
inline atf_cov::FCovtarget& covtarget_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.covtarget.XrefMaybe
bool                 covtarget_XrefMaybe(atf_cov::FCovtarget &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.covfile.Alloc
atf_cov::FCovfile&   covfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.covfile.AllocMaybe
atf_cov::FCovfile*   covfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.covfile.InsertMaybe
atf_cov::FCovfile*   covfile_InsertMaybe(const dev::Covfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.covfile.AllocMem
void*                covfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.covfile.EmptyQ
inline bool          covfile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.covfile.Find
inline atf_cov::FCovfile* covfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.covfile.Last
inline atf_cov::FCovfile* covfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.covfile.N
inline i32           covfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.covfile.RemoveAll
void                 covfile_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.covfile.RemoveLast
void                 covfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.covfile.qFind
inline atf_cov::FCovfile& covfile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.covfile.XrefMaybe
bool                 covfile_XrefMaybe(atf_cov::FCovfile &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:atf_cov.FDb.tgtcov.Alloc
atf_cov::FTgtcov&    tgtcov_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:atf_cov.FDb.tgtcov.AllocMaybe
atf_cov::FTgtcov*    tgtcov_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:atf_cov.FDb.tgtcov.InsertMaybe
atf_cov::FTgtcov*    tgtcov_InsertMaybe(const dev::Tgtcov &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:atf_cov.FDb.tgtcov.AllocMem
void*                tgtcov_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:atf_cov.FDb.tgtcov.EmptyQ
inline bool          tgtcov_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FDb.tgtcov.Find
inline atf_cov::FTgtcov* tgtcov_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:atf_cov.FDb.tgtcov.Last
inline atf_cov::FTgtcov* tgtcov_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:atf_cov.FDb.tgtcov.N
inline i32           tgtcov_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:atf_cov.FDb.tgtcov.RemoveAll
void                 tgtcov_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:atf_cov.FDb.tgtcov.RemoveLast
void                 tgtcov_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:atf_cov.FDb.tgtcov.qFind
inline atf_cov::FTgtcov& tgtcov_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:atf_cov.FDb.tgtcov.XrefMaybe
bool                 tgtcov_XrefMaybe(atf_cov::FTgtcov &row);

// Return true if hash is empty
// func:atf_cov.FDb.ind_tgtcov.EmptyQ
inline bool          ind_tgtcov_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:atf_cov.FDb.ind_tgtcov.Find
atf_cov::FTgtcov*    ind_tgtcov_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:atf_cov.FDb.ind_tgtcov.FindX
atf_cov::FTgtcov&    ind_tgtcov_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:atf_cov.FDb.ind_tgtcov.N
inline i32           ind_tgtcov_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:atf_cov.FDb.ind_tgtcov.InsertMaybe
bool                 ind_tgtcov_InsertMaybe(atf_cov::FTgtcov& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:atf_cov.FDb.ind_tgtcov.Remove
void                 ind_tgtcov_Remove(atf_cov::FTgtcov& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:atf_cov.FDb.ind_tgtcov.Reserve
void                 ind_tgtcov_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
// func:atf_cov.FDb.covline_curs.Reset
inline void          _db_covline_curs_Reset(_db_covline_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.covline_curs.ValidQ
inline bool          _db_covline_curs_ValidQ(_db_covline_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.covline_curs.Next
inline void          _db_covline_curs_Next(_db_covline_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.covline_curs.Access
inline atf_cov::FCovline& _db_covline_curs_Access(_db_covline_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.target_curs.Reset
inline void          _db_target_curs_Reset(_db_target_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.target_curs.ValidQ
inline bool          _db_target_curs_ValidQ(_db_target_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.target_curs.Next
inline void          _db_target_curs_Next(_db_target_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.target_curs.Access
inline atf_cov::FTarget& _db_target_curs_Access(_db_target_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.targsrc_curs.Reset
inline void          _db_targsrc_curs_Reset(_db_targsrc_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.targsrc_curs.ValidQ
inline bool          _db_targsrc_curs_ValidQ(_db_targsrc_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.targsrc_curs.Next
inline void          _db_targsrc_curs_Next(_db_targsrc_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.targsrc_curs.Access
inline atf_cov::FTargsrc& _db_targsrc_curs_Access(_db_targsrc_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.gitfile_curs.Reset
inline void          _db_gitfile_curs_Reset(_db_gitfile_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.gitfile_curs.ValidQ
inline bool          _db_gitfile_curs_ValidQ(_db_gitfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.gitfile_curs.Next
inline void          _db_gitfile_curs_Next(_db_gitfile_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.gitfile_curs.Access
inline atf_cov::FGitfile& _db_gitfile_curs_Access(_db_gitfile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.covtarget_curs.Reset
inline void          _db_covtarget_curs_Reset(_db_covtarget_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.covtarget_curs.ValidQ
inline bool          _db_covtarget_curs_ValidQ(_db_covtarget_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.covtarget_curs.Next
inline void          _db_covtarget_curs_Next(_db_covtarget_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.covtarget_curs.Access
inline atf_cov::FCovtarget& _db_covtarget_curs_Access(_db_covtarget_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.covfile_curs.Reset
inline void          _db_covfile_curs_Reset(_db_covfile_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.covfile_curs.ValidQ
inline bool          _db_covfile_curs_ValidQ(_db_covfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.covfile_curs.Next
inline void          _db_covfile_curs_Next(_db_covfile_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.covfile_curs.Access
inline atf_cov::FCovfile& _db_covfile_curs_Access(_db_covfile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.tgtcov_curs.Reset
inline void          _db_tgtcov_curs_Reset(_db_tgtcov_curs &curs, atf_cov::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FDb.tgtcov_curs.ValidQ
inline bool          _db_tgtcov_curs_ValidQ(_db_tgtcov_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FDb.tgtcov_curs.Next
inline void          _db_tgtcov_curs_Next(_db_tgtcov_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FDb.tgtcov_curs.Access
inline atf_cov::FTgtcov& _db_tgtcov_curs_Access(_db_tgtcov_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:atf_cov.FDb..Init
void                 FDb_Init();
// func:atf_cov.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- atf_cov.FGitfile
// create: atf_cov.FDb.gitfile (Lary)
// global access: gitfile (Lary, by rowid)
// global access: ind_gitfile (Thash, hash field gitfile)
// access: atf_cov.FCovline.p_gitfile (Upptr)
// access: atf_cov.FTargsrc.p_gitfile (Upptr)
struct FGitfile { // atf_cov.FGitfile
    atf_cov::FGitfile*    ind_gitfile_next;   // hash next
    algo::Smallstr200     gitfile;            //
    atf_cov::FTargsrc*    c_targsrc;          // optional pointer
    atf_cov::FCovline**   c_covline_elems;    // array of pointers
    u32                   c_covline_n;        // array of pointers
    u32                   c_covline_max;      // capacity of allocated array
    atf_cov::FCovfile*    c_covfile;          // optional pointer
    // x-reference on atf_cov.FGitfile.c_targsrc prevents copy
    // reftype Ptrary of atf_cov.FGitfile.c_covline prohibits copy
    // x-reference on atf_cov.FGitfile.c_covfile prevents copy
    // func:atf_cov.FGitfile..AssignOp
    inline atf_cov::FGitfile& operator =(const atf_cov::FGitfile &rhs) = delete;
    // x-reference on atf_cov.FGitfile.c_targsrc prevents copy
    // reftype Ptrary of atf_cov.FGitfile.c_covline prohibits copy
    // x-reference on atf_cov.FGitfile.c_covfile prevents copy
    // func:atf_cov.FGitfile..CopyCtor
    inline               FGitfile(const atf_cov::FGitfile &rhs) = delete;
private:
    // func:atf_cov.FGitfile..Ctor
    inline               FGitfile() __attribute__((nothrow));
    // func:atf_cov.FGitfile..Dtor
    inline               ~FGitfile() __attribute__((nothrow));
    friend atf_cov::FGitfile&   gitfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FGitfile*   gitfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 gitfile_RemoveAll() __attribute__((nothrow));
    friend void                 gitfile_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FGitfile.base.CopyOut
void                 gitfile_CopyOut(atf_cov::FGitfile &row, dev::Gitfile &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FGitfile.base.CopyIn
void                 gitfile_CopyIn(atf_cov::FGitfile &row, dev::Gitfile &in) __attribute__((nothrow));

// func:atf_cov.FGitfile.ext.Get
algo::Smallstr50     ext_Get(atf_cov::FGitfile& gitfile) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:atf_cov.FGitfile.c_targsrc.InsertMaybe
inline bool          c_targsrc_InsertMaybe(atf_cov::FGitfile& gitfile, atf_cov::FTargsrc& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:atf_cov.FGitfile.c_targsrc.Remove
inline void          c_targsrc_Remove(atf_cov::FGitfile& gitfile, atf_cov::FTargsrc& row) __attribute__((nothrow));

// Return true if index is empty
// func:atf_cov.FGitfile.c_covline.EmptyQ
inline bool          c_covline_EmptyQ(atf_cov::FGitfile& gitfile) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FGitfile.c_covline.Find
inline atf_cov::FCovline* c_covline_Find(atf_cov::FGitfile& gitfile, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:atf_cov.FGitfile.c_covline.Getary
inline algo::aryptr<atf_cov::FCovline*> c_covline_Getary(atf_cov::FGitfile& gitfile) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:atf_cov.FGitfile.c_covline.Insert
void                 c_covline_Insert(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:atf_cov.FGitfile.c_covline.InsertMaybe
bool                 c_covline_InsertMaybe(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:atf_cov.FGitfile.c_covline.N
inline i32           c_covline_N(const atf_cov::FGitfile& gitfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:atf_cov.FGitfile.c_covline.Remove
void                 c_covline_Remove(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:atf_cov.FGitfile.c_covline.RemoveAll
inline void          c_covline_RemoveAll(atf_cov::FGitfile& gitfile) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:atf_cov.FGitfile.c_covline.Reserve
void                 c_covline_Reserve(atf_cov::FGitfile& gitfile, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:atf_cov.FGitfile.c_covline.qFind
inline atf_cov::FCovline& c_covline_qFind(atf_cov::FGitfile& gitfile, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:atf_cov.FGitfile.c_covline.InAryQ
inline bool          gitfile_c_covline_InAryQ(atf_cov::FCovline& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:atf_cov.FGitfile.c_covline.qLast
inline atf_cov::FCovline& c_covline_qLast(atf_cov::FGitfile& gitfile) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
// func:atf_cov.FGitfile.c_covfile.InsertMaybe
inline bool          c_covfile_InsertMaybe(atf_cov::FGitfile& gitfile, atf_cov::FCovfile& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:atf_cov.FGitfile.c_covfile.Remove
inline void          c_covfile_Remove(atf_cov::FGitfile& gitfile, atf_cov::FCovfile& row) __attribute__((nothrow));

// Set all fields to initial values.
// func:atf_cov.FGitfile..Init
inline void          FGitfile_Init(atf_cov::FGitfile& gitfile);
// func:atf_cov.FGitfile.c_covline_curs.Reset
inline void          gitfile_c_covline_curs_Reset(gitfile_c_covline_curs &curs, atf_cov::FGitfile &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FGitfile.c_covline_curs.ValidQ
inline bool          gitfile_c_covline_curs_ValidQ(gitfile_c_covline_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FGitfile.c_covline_curs.Next
inline void          gitfile_c_covline_curs_Next(gitfile_c_covline_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FGitfile.c_covline_curs.Access
inline atf_cov::FCovline& gitfile_c_covline_curs_Access(gitfile_c_covline_curs &curs) __attribute__((nothrow));
// func:atf_cov.FGitfile..Uninit
void                 FGitfile_Uninit(atf_cov::FGitfile& gitfile) __attribute__((nothrow));

// --- atf_cov.FTarget
// create: atf_cov.FDb.target (Lary)
// global access: target (Lary, by rowid)
// global access: ind_target (Thash, hash field target)
// access: atf_cov.FTargsrc.p_target (Upptr)
struct FTarget { // atf_cov.FTarget
    atf_cov::FTarget*      ind_target_next;   // hash next
    algo::Smallstr16       target;            // Primary key - name of target
    atf_cov::FTargsrc**    c_targsrc_elems;   // array of pointers
    u32                    c_targsrc_n;       // array of pointers
    u32                    c_targsrc_max;     // capacity of allocated array
    atf_cov::FCovtarget*   c_covtarget;       // optional pointer
    atf_cov::FTgtcov*      c_tgtcov;          // optional pointer
    // reftype Ptrary of atf_cov.FTarget.c_targsrc prohibits copy
    // x-reference on atf_cov.FTarget.c_covtarget prevents copy
    // x-reference on atf_cov.FTarget.c_tgtcov prevents copy
    // func:atf_cov.FTarget..AssignOp
    inline atf_cov::FTarget& operator =(const atf_cov::FTarget &rhs) = delete;
    // reftype Ptrary of atf_cov.FTarget.c_targsrc prohibits copy
    // x-reference on atf_cov.FTarget.c_covtarget prevents copy
    // x-reference on atf_cov.FTarget.c_tgtcov prevents copy
    // func:atf_cov.FTarget..CopyCtor
    inline               FTarget(const atf_cov::FTarget &rhs) = delete;
private:
    // func:atf_cov.FTarget..Ctor
    inline               FTarget() __attribute__((nothrow));
    // func:atf_cov.FTarget..Dtor
    inline               ~FTarget() __attribute__((nothrow));
    friend atf_cov::FTarget&    target_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FTarget*    target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 target_RemoveAll() __attribute__((nothrow));
    friend void                 target_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FTarget.base.CopyOut
void                 target_CopyOut(atf_cov::FTarget &row, dev::Target &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FTarget.base.CopyIn
void                 target_CopyIn(atf_cov::FTarget &row, dev::Target &in) __attribute__((nothrow));

// Return true if index is empty
// func:atf_cov.FTarget.c_targsrc.EmptyQ
inline bool          c_targsrc_EmptyQ(atf_cov::FTarget& target) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:atf_cov.FTarget.c_targsrc.Find
inline atf_cov::FTargsrc* c_targsrc_Find(atf_cov::FTarget& target, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:atf_cov.FTarget.c_targsrc.Getary
inline algo::aryptr<atf_cov::FTargsrc*> c_targsrc_Getary(atf_cov::FTarget& target) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:atf_cov.FTarget.c_targsrc.Insert
void                 c_targsrc_Insert(atf_cov::FTarget& target, atf_cov::FTargsrc& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:atf_cov.FTarget.c_targsrc.InsertMaybe
bool                 c_targsrc_InsertMaybe(atf_cov::FTarget& target, atf_cov::FTargsrc& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:atf_cov.FTarget.c_targsrc.N
inline i32           c_targsrc_N(const atf_cov::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:atf_cov.FTarget.c_targsrc.Remove
void                 c_targsrc_Remove(atf_cov::FTarget& target, atf_cov::FTargsrc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:atf_cov.FTarget.c_targsrc.RemoveAll
inline void          c_targsrc_RemoveAll(atf_cov::FTarget& target) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:atf_cov.FTarget.c_targsrc.Reserve
void                 c_targsrc_Reserve(atf_cov::FTarget& target, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:atf_cov.FTarget.c_targsrc.qFind
inline atf_cov::FTargsrc& c_targsrc_qFind(atf_cov::FTarget& target, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:atf_cov.FTarget.c_targsrc.InAryQ
inline bool          target_c_targsrc_InAryQ(atf_cov::FTargsrc& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:atf_cov.FTarget.c_targsrc.qLast
inline atf_cov::FTargsrc& c_targsrc_qLast(atf_cov::FTarget& target) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
// func:atf_cov.FTarget.c_covtarget.InsertMaybe
inline bool          c_covtarget_InsertMaybe(atf_cov::FTarget& target, atf_cov::FCovtarget& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:atf_cov.FTarget.c_covtarget.Remove
inline void          c_covtarget_Remove(atf_cov::FTarget& target, atf_cov::FCovtarget& row) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
// func:atf_cov.FTarget.c_tgtcov.InsertMaybe
inline bool          c_tgtcov_InsertMaybe(atf_cov::FTarget& target, atf_cov::FTgtcov& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:atf_cov.FTarget.c_tgtcov.Remove
inline void          c_tgtcov_Remove(atf_cov::FTarget& target, atf_cov::FTgtcov& row) __attribute__((nothrow));

// Set all fields to initial values.
// func:atf_cov.FTarget..Init
inline void          FTarget_Init(atf_cov::FTarget& target);
// func:atf_cov.FTarget.c_targsrc_curs.Reset
inline void          target_c_targsrc_curs_Reset(target_c_targsrc_curs &curs, atf_cov::FTarget &parent) __attribute__((nothrow));
// cursor points to valid item
// func:atf_cov.FTarget.c_targsrc_curs.ValidQ
inline bool          target_c_targsrc_curs_ValidQ(target_c_targsrc_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:atf_cov.FTarget.c_targsrc_curs.Next
inline void          target_c_targsrc_curs_Next(target_c_targsrc_curs &curs) __attribute__((nothrow));
// item access
// func:atf_cov.FTarget.c_targsrc_curs.Access
inline atf_cov::FTargsrc& target_c_targsrc_curs_Access(target_c_targsrc_curs &curs) __attribute__((nothrow));
// func:atf_cov.FTarget..Uninit
void                 FTarget_Uninit(atf_cov::FTarget& target) __attribute__((nothrow));

// --- atf_cov.FTargsrc
// create: atf_cov.FDb.targsrc (Lary)
// global access: targsrc (Lary, by rowid)
// global access: ind_targsrc (Thash, hash field targsrc)
// access: atf_cov.FGitfile.c_targsrc (Ptr)
// access: atf_cov.FTarget.c_targsrc (Ptrary)
struct FTargsrc { // atf_cov.FTargsrc
    atf_cov::FTargsrc*   ind_targsrc_next;          // hash next
    algo::Smallstr100    targsrc;                   //
    algo::Comment        comment;                   //
    atf_cov::FGitfile*   p_gitfile;                 // reference to parent row
    atf_cov::FTarget*    p_target;                  // reference to parent row
    bool                 target_c_targsrc_in_ary;   //   false  membership flag
    // x-reference on atf_cov.FTargsrc.p_gitfile prevents copy
    // x-reference on atf_cov.FTargsrc.p_target prevents copy
    // func:atf_cov.FTargsrc..AssignOp
    inline atf_cov::FTargsrc& operator =(const atf_cov::FTargsrc &rhs) = delete;
    // x-reference on atf_cov.FTargsrc.p_gitfile prevents copy
    // x-reference on atf_cov.FTargsrc.p_target prevents copy
    // func:atf_cov.FTargsrc..CopyCtor
    inline               FTargsrc(const atf_cov::FTargsrc &rhs) = delete;
private:
    // func:atf_cov.FTargsrc..Ctor
    inline               FTargsrc() __attribute__((nothrow));
    // func:atf_cov.FTargsrc..Dtor
    inline               ~FTargsrc() __attribute__((nothrow));
    friend atf_cov::FTargsrc&   targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FTargsrc*   targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targsrc_RemoveAll() __attribute__((nothrow));
    friend void                 targsrc_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FTargsrc.base.CopyOut
void                 targsrc_CopyOut(atf_cov::FTargsrc &row, dev::Targsrc &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FTargsrc.base.CopyIn
void                 targsrc_CopyIn(atf_cov::FTargsrc &row, dev::Targsrc &in) __attribute__((nothrow));

// func:atf_cov.FTargsrc.target.Get
algo::Smallstr16     target_Get(atf_cov::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// func:atf_cov.FTargsrc.src.Get
algo::Smallstr200    src_Get(atf_cov::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// func:atf_cov.FTargsrc.ext.Get
algo::Smallstr10     ext_Get(atf_cov::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:atf_cov.FTargsrc..Init
inline void          FTargsrc_Init(atf_cov::FTargsrc& targsrc);
// func:atf_cov.FTargsrc..Uninit
void                 FTargsrc_Uninit(atf_cov::FTargsrc& targsrc) __attribute__((nothrow));

// --- atf_cov.FTgtcov
// create: atf_cov.FDb.tgtcov (Lary)
// global access: tgtcov (Lary, by rowid)
// global access: ind_tgtcov (Thash, hash field target)
// access: atf_cov.FTarget.c_tgtcov (Ptr)
struct FTgtcov { // atf_cov.FTgtcov
    atf_cov::FTgtcov*   ind_tgtcov_next;   // hash next
    algo::Smallstr16    target;            // Target
    algo::U32Dec2       cov_min;           // Minimal coverage limit
    algo::U32Dec2       maxerr;            // Tolerable error
    algo::Comment       comment;           //
    // func:atf_cov.FTgtcov..AssignOp
    inline atf_cov::FTgtcov& operator =(const atf_cov::FTgtcov &rhs) = delete;
    // func:atf_cov.FTgtcov..CopyCtor
    inline               FTgtcov(const atf_cov::FTgtcov &rhs) = delete;
private:
    // func:atf_cov.FTgtcov..Ctor
    inline               FTgtcov() __attribute__((nothrow));
    // func:atf_cov.FTgtcov..Dtor
    inline               ~FTgtcov() __attribute__((nothrow));
    friend atf_cov::FTgtcov&    tgtcov_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_cov::FTgtcov*    tgtcov_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 tgtcov_RemoveAll() __attribute__((nothrow));
    friend void                 tgtcov_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:atf_cov.FTgtcov.base.CopyOut
void                 tgtcov_CopyOut(atf_cov::FTgtcov &row, dev::Tgtcov &out) __attribute__((nothrow));
// Copy fields in to row
// func:atf_cov.FTgtcov.base.CopyIn
void                 tgtcov_CopyIn(atf_cov::FTgtcov &row, dev::Tgtcov &in) __attribute__((nothrow));

// Set all fields to initial values.
// func:atf_cov.FTgtcov..Init
inline void          FTgtcov_Init(atf_cov::FTgtcov& tgtcov);
// func:atf_cov.FTgtcov..Uninit
void                 FTgtcov_Uninit(atf_cov::FTgtcov& tgtcov) __attribute__((nothrow));

// --- atf_cov.FieldId
#pragma pack(push,1)
struct FieldId { // atf_cov.FieldId: Field read helper
    i32   value;   //   -1
    // func:atf_cov.FieldId.value.Cast
    inline               operator atf_cov_FieldIdEnum() const __attribute__((nothrow));
    // func:atf_cov.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:atf_cov.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:atf_cov.FieldId..EnumCtor
    inline               FieldId(atf_cov_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:atf_cov.FieldId.value.GetEnum
inline atf_cov_FieldIdEnum value_GetEnum(const atf_cov::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:atf_cov.FieldId.value.SetEnum
inline void          value_SetEnum(atf_cov::FieldId& parent, atf_cov_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:atf_cov.FieldId.value.ToCstr
const char*          value_ToCstr(const atf_cov::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:atf_cov.FieldId.value.Print
void                 value_Print(const atf_cov::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:atf_cov.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(atf_cov::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:atf_cov.FieldId.value.SetStrptr
void                 value_SetStrptr(atf_cov::FieldId& parent, algo::strptr rhs, atf_cov_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:atf_cov.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(atf_cov::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of atf_cov::FieldId from an ascii string.
// The format of the string is the format of the atf_cov::FieldId's only field
// func:atf_cov.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(atf_cov::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:atf_cov.FieldId..Init
inline void          FieldId_Init(atf_cov::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:atf_cov.FieldId.String  printfmt:Raw
// func:atf_cov.FieldId..Print
void                 FieldId_Print(atf_cov::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- atf_cov.Phase
struct Phase { // atf_cov.Phase
    u8   value;   //   0
    // func:atf_cov.Phase..EqOp
    inline bool          operator ==(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..NeOp
    inline bool          operator !=(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..LtOp
    inline bool          operator <(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..GtOp
    inline bool          operator >(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..LeOp
    inline bool          operator <=(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..GeOp
    inline bool          operator >=(const atf_cov::Phase &rhs) const __attribute__((nothrow));
    // define enum comparison operator to avoid ambiguity
    // func:atf_cov.Phase..EqEnum
    inline bool          operator ==(atf_cov_Phase_value_Enum rhs) const __attribute__((nothrow));
    // func:atf_cov.Phase..Ctor
    inline               Phase() __attribute__((nothrow));
    // func:atf_cov.Phase..EnumCtor
    inline               Phase(atf_cov_Phase_value_Enum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:atf_cov.Phase.value.GetEnum
inline atf_cov_Phase_value_Enum value_GetEnum(const atf_cov::Phase& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:atf_cov.Phase.value.SetEnum
inline void          value_SetEnum(atf_cov::Phase& parent, atf_cov_Phase_value_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:atf_cov.Phase.value.ToCstr
const char*          value_ToCstr(const atf_cov::Phase& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:atf_cov.Phase.value.Print
void                 value_Print(const atf_cov::Phase& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:atf_cov.Phase.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(atf_cov::Phase& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:atf_cov.Phase.value.SetStrptr
void                 value_SetStrptr(atf_cov::Phase& parent, algo::strptr rhs, atf_cov_Phase_value_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:atf_cov.Phase.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(atf_cov::Phase& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of atf_cov::Phase from an ascii string.
// The format of the string is the format of the atf_cov::Phase's only field
// func:atf_cov.Phase..ReadStrptrMaybe
bool                 Phase_ReadStrptrMaybe(atf_cov::Phase &parent, algo::strptr in_str) __attribute__((nothrow));
// func:atf_cov.Phase..Lt
inline bool          Phase_Lt(atf_cov::Phase lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// func:atf_cov.Phase..Cmp
inline i32           Phase_Cmp(atf_cov::Phase lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:atf_cov.Phase..Init
inline void          Phase_Init(atf_cov::Phase& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:atf_cov.Phase..UpdateMax
inline bool          Phase_UpdateMax(atf_cov::Phase &lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:atf_cov.Phase..Min
inline atf_cov::Phase Phase_Min(atf_cov::Phase lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:atf_cov.Phase..UpdateMin
inline bool          Phase_UpdateMin(atf_cov::Phase &lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// Return the greater of two values
// func:atf_cov.Phase..Max
inline atf_cov::Phase Phase_Max(atf_cov::Phase lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// func:atf_cov.Phase..Eq
inline bool          Phase_Eq(atf_cov::Phase lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:atf_cov.Phase..Update
inline bool          Phase_Update(atf_cov::Phase &lhs, atf_cov::Phase rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:atf_cov.Phase.String  printfmt:Raw
// func:atf_cov.Phase..Print
void                 Phase_Print(atf_cov::Phase row, algo::cstring& str) __attribute__((nothrow));

// --- atf_cov.TableId
struct TableId { // atf_cov.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    // func:atf_cov.TableId.value.Cast
    inline               operator atf_cov_TableIdEnum() const __attribute__((nothrow));
    // func:atf_cov.TableId..Ctor
    inline               TableId() __attribute__((nothrow));
    // func:atf_cov.TableId..FieldwiseCtor
    explicit inline               TableId(i32 in_value) __attribute__((nothrow));
    // func:atf_cov.TableId..EnumCtor
    inline               TableId(atf_cov_TableIdEnum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:atf_cov.TableId.value.GetEnum
inline atf_cov_TableIdEnum value_GetEnum(const atf_cov::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:atf_cov.TableId.value.SetEnum
inline void          value_SetEnum(atf_cov::TableId& parent, atf_cov_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:atf_cov.TableId.value.ToCstr
const char*          value_ToCstr(const atf_cov::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:atf_cov.TableId.value.Print
void                 value_Print(const atf_cov::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:atf_cov.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(atf_cov::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:atf_cov.TableId.value.SetStrptr
void                 value_SetStrptr(atf_cov::TableId& parent, algo::strptr rhs, atf_cov_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:atf_cov.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(atf_cov::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of atf_cov::TableId from an ascii string.
// The format of the string is the format of the atf_cov::TableId's only field
// func:atf_cov.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(atf_cov::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:atf_cov.TableId..Init
inline void          TableId_Init(atf_cov::TableId& parent);
// print string representation of ROW to string STR
// cfmt:atf_cov.TableId.String  printfmt:Raw
// func:atf_cov.TableId..Print
void                 TableId_Print(atf_cov::TableId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace atf_cov { // gen:ns_curstext

struct _db_covline_curs {// cursor
    typedef atf_cov::FCovline ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_covline_curs(){ parent=NULL; index=0; }
};


struct _db_target_curs {// cursor
    typedef atf_cov::FTarget ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_target_curs(){ parent=NULL; index=0; }
};


struct _db_targsrc_curs {// cursor
    typedef atf_cov::FTargsrc ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_targsrc_curs(){ parent=NULL; index=0; }
};


struct _db_gitfile_curs {// cursor
    typedef atf_cov::FGitfile ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_gitfile_curs(){ parent=NULL; index=0; }
};


struct _db_covtarget_curs {// cursor
    typedef atf_cov::FCovtarget ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_covtarget_curs(){ parent=NULL; index=0; }
};


struct _db_covfile_curs {// cursor
    typedef atf_cov::FCovfile ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_covfile_curs(){ parent=NULL; index=0; }
};


struct _db_tgtcov_curs {// cursor
    typedef atf_cov::FTgtcov ChildType;
    atf_cov::FDb *parent;
    i64 index;
    _db_tgtcov_curs(){ parent=NULL; index=0; }
};


struct gitfile_c_covline_curs {// fcurs:atf_cov.FGitfile.c_covline/curs
    typedef atf_cov::FCovline ChildType;
    atf_cov::FCovline** elems;
    u32 n_elems;
    u32 index;
    gitfile_c_covline_curs() { elems=NULL; n_elems=0; index=0; }
};


struct target_c_targsrc_curs {// fcurs:atf_cov.FTarget.c_targsrc/curs
    typedef atf_cov::FTargsrc ChildType;
    atf_cov::FTargsrc** elems;
    u32 n_elems;
    u32 index;
    target_c_targsrc_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace atf_cov { // gen:ns_func
// func:atf_cov...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// func:atf_cov...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:atf_cov...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const atf_cov::FCovline &row);// cfmt:atf_cov.FCovline.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_cov::trace &row);// cfmt:atf_cov.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_cov::FieldId &row);// cfmt:atf_cov.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_cov::Phase &row);// cfmt:atf_cov.Phase.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_cov::TableId &row);// cfmt:atf_cov.TableId.String
}
