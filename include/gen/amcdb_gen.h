//
// include/gen/amcdb_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums
extern const char *  amcdb_Curstype_curstype_bitcurs;     // bitcurs      fconst:amcdb.Curstype.curstype/bitcurs
extern const char *  amcdb_Curstype_curstype_curs;        // curs         fconst:amcdb.Curstype.curstype/curs
extern const char *  amcdb_Curstype_curstype_delcurs;     // delcurs      fconst:amcdb.Curstype.curstype/delcurs
extern const char *  amcdb_Curstype_curstype_oncecurs;    // oncecurs     fconst:amcdb.Curstype.curstype/oncecurs
extern const char *  amcdb_Curstype_curstype_unordcurs;   // unordcurs    fconst:amcdb.Curstype.curstype/unordcurs

// --- amcdb_FieldIdEnum

enum amcdb_FieldIdEnum {            // amcdb.FieldId.value
     amcdb_FieldId_ctype      = 0
    ,amcdb_FieldId_likeu64    = 1
    ,amcdb_FieldId_bigendok   = 2
    ,amcdb_FieldId_issigned   = 3
    ,amcdb_FieldId_comment    = 4
    ,amcdb_FieldId_curstype   = 5
    ,amcdb_FieldId_gen        = 6
    ,amcdb_FieldId_perns      = 7
    ,amcdb_FieldId_regxtype   = 8
    ,amcdb_FieldId_tclass     = 9
    ,amcdb_FieldId_tfunc      = 10
    ,amcdb_FieldId_dflt       = 11
    ,amcdb_FieldId_name       = 12
    ,amcdb_FieldId_hasthrow   = 13
    ,amcdb_FieldId_leaf       = 14
    ,amcdb_FieldId_poolfunc   = 15
    ,amcdb_FieldId_inl        = 16
    ,amcdb_FieldId_wur        = 17
    ,amcdb_FieldId_pure       = 18
    ,amcdb_FieldId_ismacro    = 19
    ,amcdb_FieldId_value      = 20
};

enum { amcdb_FieldIdEnum_N = 21 };

extern const char *  amcdb_Tclass_tclass_Alias;      // Alias       fconst:amcdb.Tclass.tclass/Alias
extern const char *  amcdb_Tclass_tclass_Atree;      // Atree       fconst:amcdb.Tclass.tclass/Atree
extern const char *  amcdb_Tclass_tclass_Base;       // Base        fconst:amcdb.Tclass.tclass/Base
extern const char *  amcdb_Tclass_tclass_Bheap;      // Bheap       fconst:amcdb.Tclass.tclass/Bheap
extern const char *  amcdb_Tclass_tclass_Bitfld;     // Bitfld      fconst:amcdb.Tclass.tclass/Bitfld
extern const char *  amcdb_Tclass_tclass_Bitset;     // Bitset      fconst:amcdb.Tclass.tclass/Bitset
extern const char *  amcdb_Tclass_tclass_Blkpool;    // Blkpool     fconst:amcdb.Tclass.tclass/Blkpool
extern const char *  amcdb_Tclass_tclass_Charset;    // Charset     fconst:amcdb.Tclass.tclass/Charset
extern const char *  amcdb_Tclass_tclass_Cmp;        // Cmp         fconst:amcdb.Tclass.tclass/Cmp
extern const char *  amcdb_Tclass_tclass_Count;      // Count       fconst:amcdb.Tclass.tclass/Count
extern const char *  amcdb_Tclass_tclass_Cppfunc;    // Cppfunc     fconst:amcdb.Tclass.tclass/Cppfunc
extern const char *  amcdb_Tclass_tclass_Cppstack;   // Cppstack    fconst:amcdb.Tclass.tclass/Cppstack
extern const char *  amcdb_Tclass_tclass_Ctype;      // Ctype       fconst:amcdb.Tclass.tclass/Ctype
extern const char *  amcdb_Tclass_tclass_Dec;        // Dec         fconst:amcdb.Tclass.tclass/Dec
extern const char *  amcdb_Tclass_tclass_Delptr;     // Delptr      fconst:amcdb.Tclass.tclass/Delptr
extern const char *  amcdb_Tclass_tclass_Exec;       // Exec        fconst:amcdb.Tclass.tclass/Exec
extern const char *  amcdb_Tclass_tclass_Fbuf;       // Fbuf        fconst:amcdb.Tclass.tclass/Fbuf
extern const char *  amcdb_Tclass_tclass_Fcast;      // Fcast       fconst:amcdb.Tclass.tclass/Fcast
extern const char *  amcdb_Tclass_tclass_Fconst;     // Fconst      fconst:amcdb.Tclass.tclass/Fconst
extern const char *  amcdb_Tclass_tclass_Field;      // Field       fconst:amcdb.Tclass.tclass/Field
extern const char *  amcdb_Tclass_tclass_Field2;     // Field2      fconst:amcdb.Tclass.tclass/Field2
extern const char *  amcdb_Tclass_tclass_Global;     // Global      fconst:amcdb.Tclass.tclass/Global
extern const char *  amcdb_Tclass_tclass_Hook;       // Hook        fconst:amcdb.Tclass.tclass/Hook
extern const char *  amcdb_Tclass_tclass_Inlary;     // Inlary      fconst:amcdb.Tclass.tclass/Inlary
extern const char *  amcdb_Tclass_tclass_Io;         // Io          fconst:amcdb.Tclass.tclass/Io
extern const char *  amcdb_Tclass_tclass_Lary;       // Lary        fconst:amcdb.Tclass.tclass/Lary
extern const char *  amcdb_Tclass_tclass_Llist;      // Llist       fconst:amcdb.Tclass.tclass/Llist
extern const char *  amcdb_Tclass_tclass_Lpool;      // Lpool       fconst:amcdb.Tclass.tclass/Lpool
extern const char *  amcdb_Tclass_tclass_Malloc;     // Malloc      fconst:amcdb.Tclass.tclass/Malloc
extern const char *  amcdb_Tclass_tclass_Numstr;     // Numstr      fconst:amcdb.Tclass.tclass/Numstr
extern const char *  amcdb_Tclass_tclass_Opt;        // Opt         fconst:amcdb.Tclass.tclass/Opt
extern const char *  amcdb_Tclass_tclass_Pkey;       // Pkey        fconst:amcdb.Tclass.tclass/Pkey
extern const char *  amcdb_Tclass_tclass_Pmask;      // Pmask       fconst:amcdb.Tclass.tclass/Pmask
extern const char *  amcdb_Tclass_tclass_Pool;       // Pool        fconst:amcdb.Tclass.tclass/Pool
extern const char *  amcdb_Tclass_tclass_Protocol;   // Protocol    fconst:amcdb.Tclass.tclass/Protocol
extern const char *  amcdb_Tclass_tclass_Ptr;        // Ptr         fconst:amcdb.Tclass.tclass/Ptr
extern const char *  amcdb_Tclass_tclass_Ptrary;     // Ptrary      fconst:amcdb.Tclass.tclass/Ptrary
extern const char *  amcdb_Tclass_tclass_Regx;       // Regx        fconst:amcdb.Tclass.tclass/Regx
extern const char *  amcdb_Tclass_tclass_RegxSql;    // RegxSql     fconst:amcdb.Tclass.tclass/RegxSql
extern const char *  amcdb_Tclass_tclass_Sbrk;       // Sbrk        fconst:amcdb.Tclass.tclass/Sbrk
extern const char *  amcdb_Tclass_tclass_Smallstr;   // Smallstr    fconst:amcdb.Tclass.tclass/Smallstr
extern const char *  amcdb_Tclass_tclass_Sort;       // Sort        fconst:amcdb.Tclass.tclass/Sort
extern const char *  amcdb_Tclass_tclass_Step;       // Step        fconst:amcdb.Tclass.tclass/Step
extern const char *  amcdb_Tclass_tclass_Substr;     // Substr      fconst:amcdb.Tclass.tclass/Substr
extern const char *  amcdb_Tclass_tclass_Tary;       // Tary        fconst:amcdb.Tclass.tclass/Tary
extern const char *  amcdb_Tclass_tclass_Thash;      // Thash       fconst:amcdb.Tclass.tclass/Thash
extern const char *  amcdb_Tclass_tclass_Tpool;      // Tpool       fconst:amcdb.Tclass.tclass/Tpool
extern const char *  amcdb_Tclass_tclass_Upptr;      // Upptr       fconst:amcdb.Tclass.tclass/Upptr
extern const char *  amcdb_Tclass_tclass_Val;        // Val         fconst:amcdb.Tclass.tclass/Val
extern const char *  amcdb_Tclass_tclass_Varlen;     // Varlen      fconst:amcdb.Tclass.tclass/Varlen
extern const char *  amcdb_Tclass_tclass_ZSListMT;   // ZSListMT    fconst:amcdb.Tclass.tclass/ZSListMT
namespace amcdb { // gen:ns_pkeytypedef
    typedef algo::Smallstr50 CurstypePkey;
    typedef algo::Smallstr50 GenPkey;
    typedef algo::Smallstr50 RegxtypePkey;
    typedef algo::Smallstr50 TclassPkey;
    typedef algo::Smallstr50 TfuncPkey;
} // gen:ns_pkeytypedef
namespace amcdb { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace amcdb { struct Bltin; }
namespace amcdb { struct Curstype; }
namespace amcdb { struct FieldId; }
namespace amcdb { struct Gen; }
namespace amcdb { struct Regxtype; }
namespace amcdb { struct Tclass; }
namespace amcdb { struct Tcurs; }
namespace amcdb { struct Tfunc; }
namespace amcdb { // gen:ns_print_struct

// --- amcdb.Bltin
struct Bltin { // amcdb.Bltin: Specify properties of a C built-in type
    algo::Smallstr100   ctype;      //
    bool                likeu64;    //   false
    bool                bigendok;   //   false
    bool                issigned;   //   false
    algo::Comment       comment;    //
    explicit Bltin(const algo::strptr&            in_ctype
        ,bool                           in_likeu64
        ,bool                           in_bigendok
        ,bool                           in_issigned
        ,const algo::Comment&           in_comment);
    Bltin();
};

// func:amcdb.Bltin..ReadFieldMaybe
bool                 Bltin_ReadFieldMaybe(amcdb::Bltin& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Bltin from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Bltin..ReadStrptrMaybe
bool                 Bltin_ReadStrptrMaybe(amcdb::Bltin &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:amcdb.Bltin..Init
void                 Bltin_Init(amcdb::Bltin& parent);
// print string representation of ROW to string STR
// cfmt:amcdb.Bltin.String  printfmt:Tuple
// func:amcdb.Bltin..Print
void                 Bltin_Print(amcdb::Bltin& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Curstype
struct Curstype { // amcdb.Curstype: Cursor type
    algo::Smallstr50   curstype;   //
    algo::Comment      comment;    //
    Curstype();
};

// func:amcdb.Curstype..ReadFieldMaybe
bool                 Curstype_ReadFieldMaybe(amcdb::Curstype& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Curstype from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Curstype..ReadStrptrMaybe
bool                 Curstype_ReadStrptrMaybe(amcdb::Curstype &parent, algo::strptr in_str);
// print string representation of ROW to string STR
// cfmt:amcdb.Curstype.String  printfmt:Tuple
// func:amcdb.Curstype..Print
void                 Curstype_Print(amcdb::Curstype& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.FieldId
#pragma pack(push,1)
struct FieldId { // amcdb.FieldId: Field read helper
    i32   value;   //   -1
    inline operator amcdb_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(amcdb_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:amcdb.FieldId.value.GetEnum
amcdb_FieldIdEnum    value_GetEnum(const amcdb::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:amcdb.FieldId.value.SetEnum
void                 value_SetEnum(amcdb::FieldId& parent, amcdb_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:amcdb.FieldId.value.ToCstr
const char*          value_ToCstr(const amcdb::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:amcdb.FieldId.value.Print
void                 value_Print(const amcdb::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:amcdb.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(amcdb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:amcdb.FieldId.value.SetStrptr
void                 value_SetStrptr(amcdb::FieldId& parent, algo::strptr rhs, amcdb_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:amcdb.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(amcdb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of amcdb::FieldId from an ascii string.
// The format of the string is the format of the amcdb::FieldId's only field
// func:amcdb.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(amcdb::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:amcdb.FieldId..Init
void                 FieldId_Init(amcdb::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:amcdb.FieldId.String  printfmt:Raw
// func:amcdb.FieldId..Print
void                 FieldId_Print(amcdb::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Gen
struct Gen { // amcdb.Gen
    algo::Smallstr50   gen;       //
    bool               perns;     //   false
    algo::Comment      comment;   //
    Gen();
};

// func:amcdb.Gen..ReadFieldMaybe
bool                 Gen_ReadFieldMaybe(amcdb::Gen& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Gen from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Gen..ReadStrptrMaybe
bool                 Gen_ReadStrptrMaybe(amcdb::Gen &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:amcdb.Gen..Init
void                 Gen_Init(amcdb::Gen& parent);
// print string representation of ROW to string STR
// cfmt:amcdb.Gen.String  printfmt:Tuple
// func:amcdb.Gen..Print
void                 Gen_Print(amcdb::Gen& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Regxtype
struct Regxtype { // amcdb.Regxtype
    algo::Smallstr50   regxtype;   //
    algo::Comment      comment;    //
    Regxtype();
};

// func:amcdb.Regxtype..ReadFieldMaybe
bool                 Regxtype_ReadFieldMaybe(amcdb::Regxtype& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Regxtype from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Regxtype..ReadStrptrMaybe
bool                 Regxtype_ReadStrptrMaybe(amcdb::Regxtype &parent, algo::strptr in_str);
// print string representation of ROW to string STR
// cfmt:amcdb.Regxtype.String  printfmt:Tuple
// func:amcdb.Regxtype..Print
void                 Regxtype_Print(amcdb::Regxtype& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Tclass
struct Tclass { // amcdb.Tclass: AMC template class
    algo::Smallstr50   tclass;    //
    algo::Comment      comment;   //
    Tclass();
};

// func:amcdb.Tclass..ReadFieldMaybe
bool                 Tclass_ReadFieldMaybe(amcdb::Tclass& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Tclass from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Tclass..ReadStrptrMaybe
bool                 Tclass_ReadStrptrMaybe(amcdb::Tclass &parent, algo::strptr in_str);
// print string representation of ROW to string STR
// cfmt:amcdb.Tclass.String  printfmt:Tuple
// func:amcdb.Tclass..Print
void                 Tclass_Print(amcdb::Tclass& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Tcurs
struct Tcurs { // amcdb.Tcurs: Cursor template
    algo::Smallstr50   tfunc;     //
    bool               dflt;      //   false  Generate cursor by default? (if not, require fcurs)
    algo::Comment      comment;   //
    Tcurs();
};

// func:amcdb.Tcurs.curstype.Get
algo::Smallstr50     curstype_Get(amcdb::Tcurs& parent) __attribute__((__warn_unused_result__, nothrow));
// func:amcdb.Tcurs.curstype.Get2
algo::Smallstr50     Tcurs_curstype_Get(algo::strptr arg) __attribute__((nothrow));

// func:amcdb.Tcurs..ReadFieldMaybe
bool                 Tcurs_ReadFieldMaybe(amcdb::Tcurs& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Tcurs from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Tcurs..ReadStrptrMaybe
bool                 Tcurs_ReadStrptrMaybe(amcdb::Tcurs &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:amcdb.Tcurs..Init
void                 Tcurs_Init(amcdb::Tcurs& parent);
// print string representation of ROW to string STR
// cfmt:amcdb.Tcurs.String  printfmt:Tuple
// func:amcdb.Tcurs..Print
void                 Tcurs_Print(amcdb::Tcurs& row, algo::cstring& str) __attribute__((nothrow));

// --- amcdb.Tfunc
struct Tfunc { // amcdb.Tfunc: AMC template function
    algo::Smallstr50   tfunc;      //
    bool               hasthrow;   //   false  Important defaults for new tfuncs to work
    bool               leaf;       //   true  Important defaults for new tfuncs to work
    bool               poolfunc;   //   false
    bool               inl;        //   false  Function is typically inline
    bool               wur;        //   false  Warn unused result
    bool               pure;       //   false  OK to call fewer times than specified in text
    bool               ismacro;    //   false
    algo::Comment      comment;    //
    Tfunc();
};

// func:amcdb.Tfunc.tclass.Get
algo::Smallstr50     tclass_Get(amcdb::Tfunc& parent) __attribute__((__warn_unused_result__, nothrow));
// func:amcdb.Tfunc.tclass.Get2
algo::Smallstr50     Tfunc_tclass_Get(algo::strptr arg) __attribute__((nothrow));

// func:amcdb.Tfunc.name.Get
algo::Smallstr50     name_Get(amcdb::Tfunc& parent) __attribute__((__warn_unused_result__, nothrow));
// func:amcdb.Tfunc.name.Get2
algo::Smallstr50     Tfunc_name_Get(algo::strptr arg) __attribute__((nothrow));

// func:amcdb.Tfunc..Concat_tclass_name
tempstr              Tfunc_Concat_tclass_name( const algo::strptr& tclass ,const algo::strptr& name );
// func:amcdb.Tfunc..ReadFieldMaybe
bool                 Tfunc_ReadFieldMaybe(amcdb::Tfunc& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of amcdb::Tfunc from an ascii string.
// The format of the string is an ssim Tuple
// func:amcdb.Tfunc..ReadStrptrMaybe
bool                 Tfunc_ReadStrptrMaybe(amcdb::Tfunc &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:amcdb.Tfunc..Init
void                 Tfunc_Init(amcdb::Tfunc& parent);
// print string representation of ROW to string STR
// cfmt:amcdb.Tfunc.String  printfmt:Tuple
// func:amcdb.Tfunc..Print
void                 Tfunc_Print(amcdb::Tfunc& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace amcdb { // gen:ns_func
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const amcdb::FieldId &row);// cfmt:amcdb.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const amcdb::Regxtype &row);// cfmt:amcdb.Regxtype.String
inline algo::cstring &operator <<(algo::cstring &str, const amcdb::Tcurs &row);// cfmt:amcdb.Tcurs.String
}
