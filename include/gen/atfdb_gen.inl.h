//
// include/gen/atfdb_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude

// --- atfdb.Amctest..Ctor
inline  atfdb::Amctest::Amctest() throw() {
}

// --- atfdb.Cijob..Ctor
inline  atfdb::Cijob::Cijob() throw() {
}

// --- atfdb.Cipackage..Init
// Set all fields to initial values.
inline void atfdb::Cipackage_Init(atfdb::Cipackage& parent) {
    parent.remove = bool(false);
    parent.build = bool(false);
}

// --- atfdb.Cipackage..Ctor
inline  atfdb::Cipackage::Cipackage() throw() {
    atfdb::Cipackage_Init(*this);
}

// --- atfdb.Citest..Init
// Set all fields to initial values.
inline void atfdb::Citest_Init(atfdb::Citest& parent) {
    parent.cijob = algo::strptr("test");
    parent.sandbox = bool(false);
}

// --- atfdb.Citest..Ctor
inline  atfdb::Citest::Citest() throw() {
    atfdb::Citest_Init(*this);
}

// --- atfdb.Comptest..Init
// Set all fields to initial values.
inline void atfdb::Comptest_Init(atfdb::Comptest& parent) {
    parent.timeout = i32(10);
    parent.memcheck = bool(true);
    parent.exit_code = u8(0);
}

// --- atfdb.Comptest..Ctor
inline  atfdb::Comptest::Comptest() throw() {
    atfdb::Comptest_Init(*this);
}

// --- atfdb.FieldId.value.GetEnum
// Get value of field as enum type
inline atfdb_FieldIdEnum atfdb::value_GetEnum(const atfdb::FieldId& parent) throw() {
    return atfdb_FieldIdEnum(parent.value);
}

// --- atfdb.FieldId.value.SetEnum
// Set value of field from enum type.
inline void atfdb::value_SetEnum(atfdb::FieldId& parent, atfdb_FieldIdEnum rhs) throw() {
    parent.value = i32(rhs);
}

// --- atfdb.FieldId.value.Cast
inline  atfdb::FieldId::operator atfdb_FieldIdEnum() const throw() {
    return atfdb_FieldIdEnum((*this).value);
}

// --- atfdb.FieldId..Init
// Set all fields to initial values.
inline void atfdb::FieldId_Init(atfdb::FieldId& parent) {
    parent.value = i32(-1);
}

// --- atfdb.FieldId..Ctor
inline  atfdb::FieldId::FieldId() throw() {
    atfdb::FieldId_Init(*this);
}

// --- atfdb.FieldId..FieldwiseCtor
inline  atfdb::FieldId::FieldId(i32 in_value) throw()
    : value(in_value)
 {
}

// --- atfdb.FieldId..EnumCtor
inline  atfdb::FieldId::FieldId(atfdb_FieldIdEnum arg) throw() {
    this->value = i32(arg);
}

// --- atfdb.Fuzzstrat..Ctor
inline  atfdb::Fuzzstrat::Fuzzstrat() throw() {
}

// --- atfdb.Msgdir..Ctor
inline  atfdb::Msgdir::Msgdir() throw() {
}

// --- atfdb.Targs..Ctor
inline  atfdb::Targs::Targs() throw() {
}

// --- atfdb.TestGsymbolChar..Ctor
inline  atfdb::TestGsymbolChar::TestGsymbolChar() throw() {
}

// --- atfdb.TestGsymbolPkey..Ctor
inline  atfdb::TestGsymbolPkey::TestGsymbolPkey() throw() {
}

// --- atfdb.TestGsymbolStrptr..Ctor
inline  atfdb::TestGsymbolStrptr::TestGsymbolStrptr() throw() {
}

// --- atfdb.Tfilt..Ctor
inline  atfdb::Tfilt::Tfilt() throw() {
}

// --- atfdb.Tmsg..Init
// Set all fields to initial values.
inline void atfdb::Tmsg_Init(atfdb::Tmsg& parent) {
    parent.istuple = bool(false);
}

// --- atfdb.Tmsg..Ctor
inline  atfdb::Tmsg::Tmsg() throw() {
    atfdb::Tmsg_Init(*this);
}

// --- atfdb.Unittest..Ctor
inline  atfdb::Unittest::Unittest() throw() {
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Cijob &row) {// cfmt:atfdb.Cijob.String
    atfdb::Cijob_Print(const_cast<atfdb::Cijob&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Cipackage &row) {// cfmt:atfdb.Cipackage.String
    atfdb::Cipackage_Print(const_cast<atfdb::Cipackage&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Citest &row) {// cfmt:atfdb.Citest.String
    atfdb::Citest_Print(const_cast<atfdb::Citest&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Comptest &row) {// cfmt:atfdb.Comptest.String
    atfdb::Comptest_Print(const_cast<atfdb::Comptest&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::FieldId &row) {// cfmt:atfdb.FieldId.String
    atfdb::FieldId_Print(const_cast<atfdb::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Fuzzstrat &row) {// cfmt:atfdb.Fuzzstrat.String
    atfdb::Fuzzstrat_Print(const_cast<atfdb::Fuzzstrat&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Msgdir &row) {// cfmt:atfdb.Msgdir.String
    atfdb::Msgdir_Print(const_cast<atfdb::Msgdir&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Targs &row) {// cfmt:atfdb.Targs.String
    atfdb::Targs_Print(const_cast<atfdb::Targs&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::TestGsymbolChar &row) {// cfmt:atfdb.TestGsymbolChar.String
    atfdb::TestGsymbolChar_Print(const_cast<atfdb::TestGsymbolChar&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::TestGsymbolPkey &row) {// cfmt:atfdb.TestGsymbolPkey.String
    atfdb::TestGsymbolPkey_Print(const_cast<atfdb::TestGsymbolPkey&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::TestGsymbolStrptr &row) {// cfmt:atfdb.TestGsymbolStrptr.String
    atfdb::TestGsymbolStrptr_Print(const_cast<atfdb::TestGsymbolStrptr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Tfilt &row) {// cfmt:atfdb.Tfilt.String
    atfdb::Tfilt_Print(const_cast<atfdb::Tfilt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const atfdb::Tmsg &row) {// cfmt:atfdb.Tmsg.String
    atfdb::Tmsg_Print(const_cast<atfdb::Tmsg&>(row), str);
    return str;
}
