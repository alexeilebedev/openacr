//
// include/gen/ssim2mysql_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/algo_gen.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/command_gen.h"
//#pragma endinclude

// --- ssim2mysql_FieldIdEnum

enum ssim2mysql_FieldIdEnum {        // ssim2mysql.FieldId.value
     ssim2mysql_FieldId_value   = 0
};

enum { ssim2mysql_FieldIdEnum_N = 1 };


// --- ssim2mysql_TableIdEnum

enum ssim2mysql_TableIdEnum {                   // ssim2mysql.TableId.value
     ssim2mysql_TableId_dmmeta_Ctype      = 0   // dmmeta.Ctype -> ssim2mysql.FCtype
    ,ssim2mysql_TableId_dmmeta_ctype      = 0   // dmmeta.ctype -> ssim2mysql.FCtype
    ,ssim2mysql_TableId_dmmeta_Field      = 1   // dmmeta.Field -> ssim2mysql.FField
    ,ssim2mysql_TableId_dmmeta_field      = 1   // dmmeta.field -> ssim2mysql.FField
    ,ssim2mysql_TableId_dmmeta_Ns         = 2   // dmmeta.Ns -> ssim2mysql.FNs
    ,ssim2mysql_TableId_dmmeta_ns         = 2   // dmmeta.ns -> ssim2mysql.FNs
    ,ssim2mysql_TableId_dmmeta_Sqltype    = 3   // dmmeta.Sqltype -> ssim2mysql.FSqltype
    ,ssim2mysql_TableId_dmmeta_sqltype    = 3   // dmmeta.sqltype -> ssim2mysql.FSqltype
    ,ssim2mysql_TableId_dmmeta_Ssimfile   = 4   // dmmeta.Ssimfile -> ssim2mysql.FSsimfile
    ,ssim2mysql_TableId_dmmeta_ssimfile   = 4   // dmmeta.ssimfile -> ssim2mysql.FSsimfile
    ,ssim2mysql_TableId_dmmeta_Substr     = 5   // dmmeta.Substr -> ssim2mysql.FSubstr
    ,ssim2mysql_TableId_dmmeta_substr     = 5   // dmmeta.substr -> ssim2mysql.FSubstr
};

enum { ssim2mysql_TableIdEnum_N = 12 };

namespace ssim2mysql { struct FField; }
namespace ssim2mysql { struct FNs; }
namespace ssim2mysql { struct FCtype; }
namespace ssim2mysql { struct FCmd; }
namespace ssim2mysql { struct FColumn; }
namespace ssim2mysql { struct trace; }
namespace ssim2mysql { struct FDb; }
namespace ssim2mysql { struct FInput; }
namespace ssim2mysql { struct FSqltype; }
namespace ssim2mysql { struct FSsimfile; }
namespace ssim2mysql { struct FSubstr; }
namespace ssim2mysql { struct FieldId; }
namespace ssim2mysql { struct TableId; }
namespace ssim2mysql { struct ctype_c_field_curs; }
namespace ssim2mysql { struct _db_ind_column_curs; }
namespace ssim2mysql { struct _db_ns_curs; }
namespace ssim2mysql { struct _db_ctype_curs; }
namespace ssim2mysql { struct _db_field_curs; }
namespace ssim2mysql { struct _db_sqltype_curs; }
namespace ssim2mysql { struct _db_column_curs; }
namespace ssim2mysql { struct _db_ind_ns_curs; }
namespace ssim2mysql { struct _db_ind_ctype_curs; }
namespace ssim2mysql { struct _db_ind_field_curs; }
namespace ssim2mysql { struct _db_substr_curs; }
namespace ssim2mysql { struct _db_ssimfile_curs; }
namespace ssim2mysql { struct _db_ind_ssimfile_curs; }
namespace ssim2mysql { struct _db_zs_cmd_curs; }
namespace ssim2mysql { struct _db_zd_ssimfile_curs; }
namespace ssim2mysql { struct _db_cd_input_line_curs; }
namespace ssim2mysql { struct ns_c_ssimfile_curs; }
namespace ssim2mysql { struct ssimfile_c_column_curs; }
namespace ssim2mysql {
}//pkey typedefs
namespace ssim2mysql {
extern const char *ssim2mysql_help;
extern const char *ssim2mysql_syntax;
extern FDb _db;

// --- ssim2mysql.FCmd
// create: ssim2mysql.FDb.cmd (Tpool)
// global access: zs_cmd (Llist)
// global access: c_cmd_cur (Ptr)
struct FCmd { // ssim2mysql.FCmd
    algo::cstring       cmd;           // Command to execute
    ssim2mysql::FCmd*   cmd_next;      // Pointer to next free element int tpool
    ssim2mysql::FCmd*   zs_cmd_next;   // zslist link; -1 means not-in-list
private:
    friend ssim2mysql::FCmd&    cmd_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FCmd*    cmd_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 cmd_Delete(ssim2mysql::FCmd &row) __attribute__((nothrow));
    FCmd();
    ~FCmd();
    FCmd(const FCmd&){ /*disallow copy constructor */}
    void operator =(const FCmd&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
void                 FCmd_Init(ssim2mysql::FCmd& cmd);
void                 FCmd_Uninit(ssim2mysql::FCmd& cmd) __attribute__((nothrow));
// print string representation of ssim2mysql::FCmd to string LHS, no header -- cprint:ssim2mysql.FCmd.String
void                 FCmd_Print(ssim2mysql::FCmd & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FColumn
// create: ssim2mysql.FDb.column (Lary)
// global access: ind_column (Thash)
// access: ssim2mysql.FSsimfile.c_column (Ptrary)
struct FColumn { // ssim2mysql.FColumn
    algo::Smallstr100      column;                     // Column name
    algo::cstring          defval;                     // Default value (sql expression)
    ssim2mysql::FField*    p_field;                    // reference to parent row
    bool                   is_int;                     //   false
    bool                   is_pkey;                    //   false
    bool                   ssimfile_c_column_in_ary;   //   false  membership flag
    ssim2mysql::FColumn*   ind_column_next;            // hash next
private:
    friend ssim2mysql::FColumn& column_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FColumn* column_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 column_RemoveAll() __attribute__((nothrow));
    friend void                 column_RemoveLast() __attribute__((nothrow));
    FColumn();
    ~FColumn();
    FColumn(const FColumn&){ /*disallow copy constructor */}
    void operator =(const FColumn&){ /*disallow direct assignment */}
};

algo::Smallstr50     name_Get(ssim2mysql::FColumn& column) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     ssimfile_Get(ssim2mysql::FColumn& column) __attribute__((__warn_unused_result__, nothrow));

tempstr              FColumn_Concat_ssimfile_name( const algo::strptr& ssimfile ,const algo::strptr& name );
// Set all fields to initial values.
void                 FColumn_Init(ssim2mysql::FColumn& column);
void                 FColumn_Uninit(ssim2mysql::FColumn& column) __attribute__((nothrow));
// print string representation of ssim2mysql::FColumn to string LHS, no header -- cprint:ssim2mysql.FColumn.String
void                 FColumn_Print(ssim2mysql::FColumn & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FCtype
// create: ssim2mysql.FDb.ctype (Lary)
// global access: ind_ctype (Thash)
// access: ssim2mysql.FField.p_ctype (Upptr)
// access: ssim2mysql.FField.p_arg (Upptr)
// access: ssim2mysql.FSsimfile.p_ctype (Upptr)
struct FCtype { // ssim2mysql.FCtype
    algo::Smallstr50         ctype;            // Identifier. must be ns.typename
    algo::Comment            comment;          //
    ssim2mysql::FNs*         p_ns;             // reference to parent row
    ssim2mysql::FSqltype*    c_sqltype;        // optional pointer
    ssim2mysql::FField**     c_field_elems;    // array of pointers
    u32                      c_field_n;        // array of pointers
    u32                      c_field_max;      // capacity of allocated array
    ssim2mysql::FSsimfile*   c_ssimfile;       // optional pointer
    ssim2mysql::FCtype*      ind_ctype_next;   // hash next
private:
    friend ssim2mysql::FCtype&  ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FCtype*  ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctype_RemoveLast() __attribute__((nothrow));
    FCtype();
    ~FCtype();
    FCtype(const FCtype&){ /*disallow copy constructor */}
    void operator =(const FCtype&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ctype_CopyOut(ssim2mysql::FCtype &row, dmmeta::Ctype &out) __attribute__((nothrow));
// Copy fields in to row
void                 ctype_CopyIn(ssim2mysql::FCtype &row, dmmeta::Ctype &in) __attribute__((nothrow));

algo::Smallstr16     ns_Get(ssim2mysql::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(ssim2mysql::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_sqltype_InsertMaybe(ssim2mysql::FCtype& ctype, ssim2mysql::FSqltype& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_sqltype_Remove(ssim2mysql::FCtype& ctype, ssim2mysql::FSqltype& row) __attribute__((nothrow));

// Return true if index is empty
bool                 c_field_EmptyQ(ssim2mysql::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FField*  c_field_Find(ssim2mysql::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
algo::aryptr<ssim2mysql::FField*> c_field_Getary(ssim2mysql::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void                 c_field_Insert(ssim2mysql::FCtype& ctype, ssim2mysql::FField& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool                 c_field_InsertMaybe(ssim2mysql::FCtype& ctype, ssim2mysql::FField& row) __attribute__((nothrow));
// Return number of items in the pointer array
i32                  c_field_N(const ssim2mysql::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void                 c_field_Remove(ssim2mysql::FCtype& ctype, ssim2mysql::FField& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 c_field_RemoveAll(ssim2mysql::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
void                 c_field_Reserve(ssim2mysql::FCtype& ctype, u32 n) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_ssimfile_InsertMaybe(ssim2mysql::FCtype& ctype, ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_ssimfile_Remove(ssim2mysql::FCtype& ctype, ssim2mysql::FSsimfile& row) __attribute__((nothrow));

void                 ctype_c_field_curs_Reset(ctype_c_field_curs &curs, ssim2mysql::FCtype &parent);
// cursor points to valid item
bool                 ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs);
// proceed to next item
void                 ctype_c_field_curs_Next(ctype_c_field_curs &curs);
// item access
ssim2mysql::FField&  ctype_c_field_curs_Access(ctype_c_field_curs &curs);
// Set all fields to initial values.
void                 FCtype_Init(ssim2mysql::FCtype& ctype);
void                 FCtype_Uninit(ssim2mysql::FCtype& ctype) __attribute__((nothrow));
// print string representation of ssim2mysql::FCtype to string LHS, no header -- cprint:ssim2mysql.FCtype.String
void                 FCtype_Print(ssim2mysql::FCtype & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.trace
#pragma pack(push,1)
struct trace { // ssim2mysql.trace
    u64   step_zs_cmd;                 //   0
    u64   step_zs_cmd_cycles;          //   0
    u64   step_cd_input_line;          //   0
    u64   step_cd_input_line_cycles;   //   0
    trace();
};
#pragma pack(pop)

// Set all fields to initial values.
void                 trace_Init(ssim2mysql::trace& parent);
// print string representation of ssim2mysql::trace to string LHS, no header -- cprint:ssim2mysql.trace.String
void                 trace_Print(ssim2mysql::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FDb
// create: ssim2mysql.FDb._db (Global)
struct FDb { // ssim2mysql.FDb
    ssim2mysql::FColumn**     ind_column_buckets_elems;     // pointer to bucket array
    i32                       ind_column_buckets_n;         // number of elements in bucket array
    i32                       ind_column_n;                 // number of elements in the hash table
    ssim2mysql::FNs*          ns_lary[32];                  // level array
    i32                       ns_n;                         // number of elements in array
    command::ssim2mysql       cmdline;                      //
    ssim2mysql::FCtype*       ctype_lary[32];               // level array
    i32                       ctype_n;                      // number of elements in array
    ssim2mysql::FField*       field_lary[32];               // level array
    i32                       field_n;                      // number of elements in array
    ssim2mysql::FSqltype*     sqltype_lary[32];             // level array
    i32                       sqltype_n;                    // number of elements in array
    u64                       cmd_blocksize;                // # bytes per block
    ssim2mysql::FCmd*         cmd_free;                     //
    ssim2mysql::FColumn*      column_lary[32];              // level array
    i32                       column_n;                     // number of elements in array
    ssim2mysql::FNs**         ind_ns_buckets_elems;         // pointer to bucket array
    i32                       ind_ns_buckets_n;             // number of elements in bucket array
    i32                       ind_ns_n;                     // number of elements in the hash table
    ssim2mysql::FCtype**      ind_ctype_buckets_elems;      // pointer to bucket array
    i32                       ind_ctype_buckets_n;          // number of elements in bucket array
    i32                       ind_ctype_n;                  // number of elements in the hash table
    ssim2mysql::FField**      ind_field_buckets_elems;      // pointer to bucket array
    i32                       ind_field_buckets_n;          // number of elements in bucket array
    i32                       ind_field_n;                  // number of elements in the hash table
    ssim2mysql::FSubstr*      substr_lary[32];              // level array
    i32                       substr_n;                     // number of elements in array
    ssim2mysql::FSsimfile*    ssimfile_lary[32];            // level array
    i32                       ssimfile_n;                   // number of elements in array
    ssim2mysql::FSsimfile**   ind_ssimfile_buckets_elems;   // pointer to bucket array
    i32                       ind_ssimfile_buckets_n;       // number of elements in bucket array
    i32                       ind_ssimfile_n;               // number of elements in the hash table
    ssim2mysql::FCmd*         zs_cmd_head;                  // zero-terminated singly linked list
    ssim2mysql::FCmd*         zs_cmd_tail;                  // pointer to last element
    ssim2mysql::FCmd*         c_cmd_cur;                    // optional pointer
    ssim2mysql::FSsimfile*    c_ssimfile_cur;               // optional pointer
    u32                       n_cmd_rows;                   //   0
    u64                       input_blocksize;              // # bytes per block
    ssim2mysql::FInput*       input_free;                   //
    ssim2mysql::FSsimfile*    zd_ssimfile_head;             // zero-terminated doubly linked list
    ssim2mysql::FSsimfile*    zd_ssimfile_tail;             // pointer to last element
    ssim2mysql::FInput*       cd_input_line_head;           // zero-terminated doubly linked list
    ssim2mysql::trace         trace;                        //
};

// Return true if hash is empty
bool                 ind_column_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
ssim2mysql::FColumn* ind_column_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
ssim2mysql::FColumn& ind_column_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2mysql::FColumn& ind_column_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_column_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_column_InsertMaybe(ssim2mysql::FColumn& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_column_Remove(ssim2mysql::FColumn& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_column_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FNs&     ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FNs*     ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FNs*     ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ns_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FNs*     ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FNs*     ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FNs&     ns_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ns_XrefMaybe(ssim2mysql::FNs &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FCtype&  ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FCtype*  ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FCtype*  ctype_InsertMaybe(const dmmeta::Ctype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ctype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ctype_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FCtype*  ctype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FCtype*  ctype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ctype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FCtype&  ctype_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ctype_XrefMaybe(ssim2mysql::FCtype &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FField&  field_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FField*  field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FField*  field_InsertMaybe(const dmmeta::Field &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                field_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 field_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FField*  field_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FField*  field_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 field_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FField&  field_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 field_XrefMaybe(ssim2mysql::FField &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FSqltype& sqltype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FSqltype* sqltype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FSqltype* sqltype_InsertMaybe(const dmmeta::Sqltype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                sqltype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 sqltype_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FSqltype* sqltype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FSqltype* sqltype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  sqltype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 sqltype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FSqltype& sqltype_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 sqltype_XrefMaybe(ssim2mysql::FSqltype &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FCmd&    cmd_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FCmd*    cmd_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
void                 cmd_Delete(ssim2mysql::FCmd &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
void*                cmd_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
void                 cmd_FreeMem(ssim2mysql::FCmd &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64                  cmd_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64                  cmd_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 cmd_XrefMaybe(ssim2mysql::FCmd &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FColumn& column_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FColumn* column_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                column_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 column_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FColumn* column_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FColumn* column_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  column_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 column_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 column_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FColumn& column_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 column_XrefMaybe(ssim2mysql::FColumn &row);

// Main function
void                 MainArgs(int argc, char **argv);
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Return true if hash is empty
bool                 ind_ns_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
ssim2mysql::FNs*     ind_ns_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
ssim2mysql::FNs&     ind_ns_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2mysql::FNs&     ind_ns_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ns_InsertMaybe(ssim2mysql::FNs& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ns_Remove(ssim2mysql::FNs& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ns_Reserve(int n) __attribute__((nothrow));

// Return true if hash is empty
bool                 ind_ctype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
ssim2mysql::FCtype*  ind_ctype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
ssim2mysql::FCtype&  ind_ctype_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2mysql::FCtype&  ind_ctype_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ctype_InsertMaybe(ssim2mysql::FCtype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ctype_Remove(ssim2mysql::FCtype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ctype_Reserve(int n) __attribute__((nothrow));

// Return true if hash is empty
bool                 ind_field_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
ssim2mysql::FField*  ind_field_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
ssim2mysql::FField&  ind_field_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2mysql::FField&  ind_field_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_field_InsertMaybe(ssim2mysql::FField& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_field_Remove(ssim2mysql::FField& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_field_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FSubstr& substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FSubstr* substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FSubstr* substr_InsertMaybe(const dmmeta::Substr &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                substr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 substr_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FSubstr* substr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FSubstr* substr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  substr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 substr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FSubstr& substr_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 substr_XrefMaybe(ssim2mysql::FSubstr &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FSsimfile& ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FSsimfile* ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
ssim2mysql::FSsimfile* ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ssimfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ssimfile_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FSsimfile* ssimfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
ssim2mysql::FSsimfile* ssimfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ssimfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
ssim2mysql::FSsimfile& ssimfile_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ssimfile_XrefMaybe(ssim2mysql::FSsimfile &row);

// Return true if hash is empty
bool                 ind_ssimfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
ssim2mysql::FSsimfile* ind_ssimfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
ssim2mysql::FSsimfile& ind_ssimfile_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2mysql::FSsimfile& ind_ssimfile_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ssimfile_InsertMaybe(ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ssimfile_Remove(ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ssimfile_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
bool                 zs_cmd_EmptyQ() __attribute__((__warn_unused_result__, nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
ssim2mysql::FCmd*    zs_cmd_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zs_cmd_InLlistQ(ssim2mysql::FCmd& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zs_cmd_Insert(ssim2mysql::FCmd& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
ssim2mysql::FCmd*    zs_cmd_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
ssim2mysql::FCmd*    zs_cmd_Next(ssim2mysql::FCmd &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// Since the list is singly-linked, use linear search to locate the element.
void                 zs_cmd_Remove(ssim2mysql::FCmd& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zs_cmd_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
ssim2mysql::FCmd*    zs_cmd_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
ssim2mysql::FCmd&    zs_cmd_qLast() __attribute__((__warn_unused_result__, nothrow));
void                 zs_cmd_Step() __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2mysql::FInput&  input_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
ssim2mysql::FInput*  input_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
void                 input_Delete(ssim2mysql::FInput &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
void*                input_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
void                 input_FreeMem(ssim2mysql::FInput &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64                  input_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64                  input_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 input_XrefMaybe(ssim2mysql::FInput &row);

// Return true if index is empty
bool                 zd_ssimfile_EmptyQ() __attribute__((__warn_unused_result__, nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
ssim2mysql::FSsimfile* zd_ssimfile_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 zd_ssimfile_InLlistQ(ssim2mysql::FSsimfile& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 zd_ssimfile_Insert(ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
ssim2mysql::FSsimfile* zd_ssimfile_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
ssim2mysql::FSsimfile* zd_ssimfile_Next(ssim2mysql::FSsimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
ssim2mysql::FSsimfile* zd_ssimfile_Prev(ssim2mysql::FSsimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 zd_ssimfile_Remove(ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 zd_ssimfile_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
ssim2mysql::FSsimfile* zd_ssimfile_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
ssim2mysql::FSsimfile& zd_ssimfile_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
bool                 cd_input_line_EmptyQ() __attribute__((__warn_unused_result__, nothrow));
// If index empty, return NULL. Otherwise return pointer to first element in index
ssim2mysql::FInput*  cd_input_line_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
bool                 cd_input_line_InLlistQ(ssim2mysql::FInput& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
void                 cd_input_line_Insert(ssim2mysql::FInput& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
ssim2mysql::FInput*  cd_input_line_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
ssim2mysql::FInput*  cd_input_line_Next(ssim2mysql::FInput &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
ssim2mysql::FInput*  cd_input_line_Prev(ssim2mysql::FInput &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 cd_input_line_Remove(ssim2mysql::FInput& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 cd_input_line_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
ssim2mysql::FInput*  cd_input_line_RemoveFirst() __attribute__((nothrow));
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
ssim2mysql::FInput*  cd_input_line_RotateFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
ssim2mysql::FInput&  cd_input_line_qLast() __attribute__((__warn_unused_result__, nothrow));
void                 cd_input_line_Step() __attribute__((nothrow));

// cursor points to valid item
void                 _db_ns_curs_Reset(_db_ns_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_ns_curs_ValidQ(_db_ns_curs &curs);
// proceed to next item
void                 _db_ns_curs_Next(_db_ns_curs &curs);
// item access
ssim2mysql::FNs&     _db_ns_curs_Access(_db_ns_curs &curs);
// cursor points to valid item
void                 _db_ctype_curs_Reset(_db_ctype_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_ctype_curs_ValidQ(_db_ctype_curs &curs);
// proceed to next item
void                 _db_ctype_curs_Next(_db_ctype_curs &curs);
// item access
ssim2mysql::FCtype&  _db_ctype_curs_Access(_db_ctype_curs &curs);
// cursor points to valid item
void                 _db_field_curs_Reset(_db_field_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_field_curs_ValidQ(_db_field_curs &curs);
// proceed to next item
void                 _db_field_curs_Next(_db_field_curs &curs);
// item access
ssim2mysql::FField&  _db_field_curs_Access(_db_field_curs &curs);
// cursor points to valid item
void                 _db_sqltype_curs_Reset(_db_sqltype_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_sqltype_curs_ValidQ(_db_sqltype_curs &curs);
// proceed to next item
void                 _db_sqltype_curs_Next(_db_sqltype_curs &curs);
// item access
ssim2mysql::FSqltype& _db_sqltype_curs_Access(_db_sqltype_curs &curs);
// cursor points to valid item
void                 _db_column_curs_Reset(_db_column_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_column_curs_ValidQ(_db_column_curs &curs);
// proceed to next item
void                 _db_column_curs_Next(_db_column_curs &curs);
// item access
ssim2mysql::FColumn& _db_column_curs_Access(_db_column_curs &curs);
// cursor points to valid item
void                 _db_substr_curs_Reset(_db_substr_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_substr_curs_ValidQ(_db_substr_curs &curs);
// proceed to next item
void                 _db_substr_curs_Next(_db_substr_curs &curs);
// item access
ssim2mysql::FSubstr& _db_substr_curs_Access(_db_substr_curs &curs);
// cursor points to valid item
void                 _db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs);
// proceed to next item
void                 _db_ssimfile_curs_Next(_db_ssimfile_curs &curs);
// item access
ssim2mysql::FSsimfile& _db_ssimfile_curs_Access(_db_ssimfile_curs &curs);
// cursor points to valid item
void                 _db_zs_cmd_curs_Reset(_db_zs_cmd_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_zs_cmd_curs_ValidQ(_db_zs_cmd_curs &curs);
// proceed to next item
void                 _db_zs_cmd_curs_Next(_db_zs_cmd_curs &curs);
// item access
ssim2mysql::FCmd&    _db_zs_cmd_curs_Access(_db_zs_cmd_curs &curs);
// cursor points to valid item
void                 _db_zd_ssimfile_curs_Reset(_db_zd_ssimfile_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_zd_ssimfile_curs_ValidQ(_db_zd_ssimfile_curs &curs);
// proceed to next item
void                 _db_zd_ssimfile_curs_Next(_db_zd_ssimfile_curs &curs);
// item access
ssim2mysql::FSsimfile& _db_zd_ssimfile_curs_Access(_db_zd_ssimfile_curs &curs);
// cursor points to valid item
void                 _db_cd_input_line_curs_Reset(_db_cd_input_line_curs &curs, ssim2mysql::FDb &parent);
// cursor points to valid item
bool                 _db_cd_input_line_curs_ValidQ(_db_cd_input_line_curs &curs);
// proceed to next item
void                 _db_cd_input_line_curs_Next(_db_cd_input_line_curs &curs);
// item access
ssim2mysql::FInput&  _db_cd_input_line_curs_Access(_db_cd_input_line_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- ssim2mysql.FField
// create: ssim2mysql.FDb.field (Lary)
// global access: ind_field (Thash)
// access: ssim2mysql.FColumn.p_field (Upptr)
// access: ssim2mysql.FCtype.c_field (Ptrary)
// access: ssim2mysql.FSubstr.p_field (Upptr)
struct FField { // ssim2mysql.FField
    ssim2mysql::FField*    ind_field_next;         // hash next
    algo::Smallstr100      field;                  //
    algo::Smallstr50       arg;                    // type of field
    algo::Smallstr50       reftype;                //   "Val"
    dmmeta::CppExpr        dflt;                   // default value (c++ expression)
    algo::Comment          comment;                //
    ssim2mysql::FCtype*    p_ctype;                // reference to parent row
    ssim2mysql::FCtype*    p_arg;                  // reference to parent row
    ssim2mysql::FSubstr*   c_substr;               // optional pointer
    bool                   select;                 //   false  Select for inclusion to upload
    bool                   is_pkeyref;             //   false  Field is a pkey reference to something else
    bool                   ctype_c_field_in_ary;   //   false  membership flag
private:
    friend ssim2mysql::FField&  field_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FField*  field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 field_RemoveLast() __attribute__((nothrow));
    FField();
    ~FField();
    FField(const FField&){ /*disallow copy constructor */}
    void operator =(const FField&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 field_CopyOut(ssim2mysql::FField &row, dmmeta::Field &out) __attribute__((nothrow));
// Copy fields in to row
void                 field_CopyIn(ssim2mysql::FField &row, dmmeta::Field &in) __attribute__((nothrow));

algo::Smallstr50     ctype_Get(ssim2mysql::FField& field) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr16     ns_Get(ssim2mysql::FField& field) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(ssim2mysql::FField& field) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_substr_InsertMaybe(ssim2mysql::FField& field, ssim2mysql::FSubstr& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_substr_Remove(ssim2mysql::FField& field, ssim2mysql::FSubstr& row) __attribute__((nothrow));

// Set all fields to initial values.
void                 FField_Init(ssim2mysql::FField& field);
void                 FField_Uninit(ssim2mysql::FField& field) __attribute__((nothrow));
// print string representation of ssim2mysql::FField to string LHS, no header -- cprint:ssim2mysql.FField.String
void                 FField_Print(ssim2mysql::FField & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FInput
// create: ssim2mysql.FDb.input (Tpool)
// global access: cd_input_line (Llist)
struct FInput { // ssim2mysql.FInput
    ssim2mysql::FInput*   input_next;            // Pointer to next free element int tpool
    ssim2mysql::FInput*   cd_input_line_next;    // zslist link; -1 means not-in-list
    ssim2mysql::FInput*   cd_input_line_prev;    // previous element
    u8                    in_buf_elems[65536];   // pointer to elements of inline array
    i32                   in_buf_start;          // beginning of valid bytes (in bytes)
    i32                   in_buf_end;            // end of valid bytes (in bytes)
    bool                  in_buf_eof;            // no more data will be written to buffer
    algo::Errcode         in_buf_err;            // system error code
    bool                  in_buf_msgvalid;       // current message is valid
    i32                   in_buf_msglen;         // current message length
    algo_lib::FIohook     in_buf_iohook;         // edge-triggered hook for refilling buffer
    bool                  in_buf_epoll_enable;   // use epoll?
    enum { in_buf_max = 65536 };
    algo::Tuple           tuple;                 // Temp tuple
    algo::cstring         warnstr;               // Warning string
private:
    friend ssim2mysql::FInput&  input_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FInput*  input_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 input_Delete(ssim2mysql::FInput &row) __attribute__((nothrow));
    FInput();
    ~FInput();
    FInput(const FInput&){ /*disallow copy constructor */}
    void operator =(const FInput&){ /*disallow direct assignment */}
};

// Attach file descriptor and begin reading using edge-triggered epoll.
// File descriptor becomes owned by char via FIohook field.
// Whenever the file descriptor becomes readable, insert input into cd_input_line.
void                 in_buf_BeginRead(ssim2mysql::FInput& input, algo::Fildes fd) __attribute__((nothrow));
// Set EOF flag
void                 in_buf_EndRead(ssim2mysql::FInput& input) __attribute__((nothrow));
// Look for valid message at current position in the buffer.
// If message is already there, return a pointer to it. Do not skip message (call SkipMsg to do that).
// If there is no message, read once from underlying file descriptor and try again.
// The message is found by looking for delimiter '\n'.
// The return value is an aryptr. If ret.elems is non-NULL, the message is valid (possibly empty).
// If ret.elems is NULL, no message can be extracted from buffer.
// The returned aryptr excludes the trailing deliminter.
// SkipMsg will skip both the line and the deliminter.
// A partial line at the end of input is NOT returned (TODO?)
//
algo::aryptr<char>   in_buf_GetMsg(ssim2mysql::FInput& input) __attribute__((nothrow));
// Return max. number of bytes in the buffer.
i32                  in_buf_Max(ssim2mysql::FInput& input) __attribute__((nothrow));
// Return number of bytes in the buffer.
i32                  in_buf_N(ssim2mysql::FInput& input) __attribute__((__warn_unused_result__, nothrow, pure));
// Refill buffer. Return false if no further refill possible (input buffer exhausted)
bool                 in_buf_Refill(ssim2mysql::FInput& input) __attribute__((nothrow));
// Discard contents of the buffer.
void                 in_buf_RemoveAll(ssim2mysql::FInput& input) __attribute__((nothrow));
// Mark some buffer contents as read.
//
void                 in_buf_SkipBytes(ssim2mysql::FInput& input, int n) __attribute__((nothrow));
// Skip current message, if any.
void                 in_buf_SkipMsg(ssim2mysql::FInput& input) __attribute__((nothrow));
// Write bytes to the buffer. If the entire block is written, return true,
// Otherwise return false.
// Bytes in the buffer are potentially shifted left to make room for the message.
//
bool                 in_buf_WriteAll(ssim2mysql::FInput& input, u8 *in, i32 in_n) __attribute__((nothrow));

// Set all fields to initial values.
void                 FInput_Init(ssim2mysql::FInput& input);
void                 FInput_Uninit(ssim2mysql::FInput& input) __attribute__((nothrow));
// print string representation of ssim2mysql::FInput to string LHS, no header -- cprint:ssim2mysql.FInput.String
void                 FInput_Print(ssim2mysql::FInput & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FNs
// create: ssim2mysql.FDb.ns (Lary)
// global access: ind_ns (Thash)
// access: ssim2mysql.FCtype.p_ns (Upptr)
struct FNs { // ssim2mysql.FNs
    ssim2mysql::FNs*          ind_ns_next;        // hash next
    algo::Smallstr16          ns;                 // Namespace name (primary key)
    algo::Smallstr50          nstype;             //
    algo::Comment             comment;            //
    ssim2mysql::FSsimfile**   c_ssimfile_elems;   // array of pointers
    u32                       c_ssimfile_n;       // array of pointers
    u32                       c_ssimfile_max;     // capacity of allocated array
private:
    friend ssim2mysql::FNs&     ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FNs*     ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
    FNs();
    ~FNs();
    FNs(const FNs&){ /*disallow copy constructor */}
    void operator =(const FNs&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ns_CopyOut(ssim2mysql::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
void                 ns_CopyIn(ssim2mysql::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));

// Return true if index is empty
bool                 c_ssimfile_EmptyQ(ssim2mysql::FNs& ns) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FSsimfile* c_ssimfile_Find(ssim2mysql::FNs& ns, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
algo::aryptr<ssim2mysql::FSsimfile*> c_ssimfile_Getary(ssim2mysql::FNs& ns) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void                 c_ssimfile_Insert(ssim2mysql::FNs& ns, ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool                 c_ssimfile_InsertMaybe(ssim2mysql::FNs& ns, ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Return number of items in the pointer array
i32                  c_ssimfile_N(const ssim2mysql::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void                 c_ssimfile_Remove(ssim2mysql::FNs& ns, ssim2mysql::FSsimfile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 c_ssimfile_RemoveAll(ssim2mysql::FNs& ns) __attribute__((nothrow));
// Reserve space in index for N more elements;
void                 c_ssimfile_Reserve(ssim2mysql::FNs& ns, u32 n) __attribute__((nothrow));

// Set all fields to initial values.
void                 FNs_Init(ssim2mysql::FNs& ns);
void                 ns_c_ssimfile_curs_Reset(ns_c_ssimfile_curs &curs, ssim2mysql::FNs &parent);
// cursor points to valid item
bool                 ns_c_ssimfile_curs_ValidQ(ns_c_ssimfile_curs &curs);
// proceed to next item
void                 ns_c_ssimfile_curs_Next(ns_c_ssimfile_curs &curs);
// item access
ssim2mysql::FSsimfile& ns_c_ssimfile_curs_Access(ns_c_ssimfile_curs &curs);
void                 FNs_Uninit(ssim2mysql::FNs& ns) __attribute__((nothrow));
// print string representation of ssim2mysql::FNs to string LHS, no header -- cprint:ssim2mysql.FNs.String
void                 FNs_Print(ssim2mysql::FNs & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FSqltype
// create: ssim2mysql.FDb.sqltype (Lary)
// access: ssim2mysql.FCtype.c_sqltype (Ptr)
struct FSqltype { // ssim2mysql.FSqltype
    algo::Smallstr50    ctype;     //
    algo::Smallstr100   expr;      //
    algo::Comment       comment;   //
private:
    friend ssim2mysql::FSqltype& sqltype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FSqltype* sqltype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 sqltype_RemoveLast() __attribute__((nothrow));
    FSqltype();
    ~FSqltype();
    FSqltype(const FSqltype&){ /*disallow copy constructor */}
    void operator =(const FSqltype&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 sqltype_CopyOut(ssim2mysql::FSqltype &row, dmmeta::Sqltype &out) __attribute__((nothrow));
// Copy fields in to row
void                 sqltype_CopyIn(ssim2mysql::FSqltype &row, dmmeta::Sqltype &in) __attribute__((nothrow));

void                 FSqltype_Uninit(ssim2mysql::FSqltype& sqltype) __attribute__((nothrow));
// print string representation of ssim2mysql::FSqltype to string LHS, no header -- cprint:ssim2mysql.FSqltype.String
void                 FSqltype_Print(ssim2mysql::FSqltype & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FSsimfile
// create: ssim2mysql.FDb.ssimfile (Lary)
// global access: ind_ssimfile (Thash)
// global access: c_ssimfile_cur (Ptr)
// global access: zd_ssimfile (Llist)
// access: ssim2mysql.FCtype.c_ssimfile (Ptr)
// access: ssim2mysql.FNs.c_ssimfile (Ptrary)
struct FSsimfile { // ssim2mysql.FSsimfile
    ssim2mysql::FSsimfile*   ind_ssimfile_next;      // hash next
    ssim2mysql::FSsimfile*   zd_ssimfile_next;       // zslist link; -1 means not-in-list
    ssim2mysql::FSsimfile*   zd_ssimfile_prev;       // previous element
    algo::Smallstr50         ssimfile;               //
    algo::Smallstr50         ctype;                  //
    ssim2mysql::FCtype*      p_ctype;                // reference to parent row
    bool                     truncated;              //   false  Already truncated in database
    ssim2mysql::FColumn**    c_column_elems;         // array of pointers
    u32                      c_column_n;             // array of pointers
    u32                      c_column_max;           // capacity of allocated array
    bool                     ns_c_ssimfile_in_ary;   //   false  membership flag
private:
    friend ssim2mysql::FSsimfile& ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FSsimfile* ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ssimfile_RemoveLast() __attribute__((nothrow));
    FSsimfile();
    ~FSsimfile();
    FSsimfile(const FSsimfile&){ /*disallow copy constructor */}
    void operator =(const FSsimfile&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ssimfile_CopyOut(ssim2mysql::FSsimfile &row, dmmeta::Ssimfile &out) __attribute__((nothrow));
// Copy fields in to row
void                 ssimfile_CopyIn(ssim2mysql::FSsimfile &row, dmmeta::Ssimfile &in) __attribute__((nothrow));

algo::Smallstr16     ssimns_Get(ssim2mysql::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr16     ns_Get(ssim2mysql::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr50     name_Get(ssim2mysql::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
bool                 c_column_EmptyQ(ssim2mysql::FSsimfile& ssimfile) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
ssim2mysql::FColumn* c_column_Find(ssim2mysql::FSsimfile& ssimfile, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
algo::aryptr<ssim2mysql::FColumn*> c_column_Getary(ssim2mysql::FSsimfile& ssimfile) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void                 c_column_Insert(ssim2mysql::FSsimfile& ssimfile, ssim2mysql::FColumn& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool                 c_column_InsertMaybe(ssim2mysql::FSsimfile& ssimfile, ssim2mysql::FColumn& row) __attribute__((nothrow));
// Return number of items in the pointer array
i32                  c_column_N(const ssim2mysql::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void                 c_column_Remove(ssim2mysql::FSsimfile& ssimfile, ssim2mysql::FColumn& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 c_column_RemoveAll(ssim2mysql::FSsimfile& ssimfile) __attribute__((nothrow));
// Reserve space in index for N more elements;
void                 c_column_Reserve(ssim2mysql::FSsimfile& ssimfile, u32 n) __attribute__((nothrow));

// Set all fields to initial values.
void                 FSsimfile_Init(ssim2mysql::FSsimfile& ssimfile);
void                 ssimfile_c_column_curs_Reset(ssimfile_c_column_curs &curs, ssim2mysql::FSsimfile &parent);
// cursor points to valid item
bool                 ssimfile_c_column_curs_ValidQ(ssimfile_c_column_curs &curs);
// proceed to next item
void                 ssimfile_c_column_curs_Next(ssimfile_c_column_curs &curs);
// item access
ssim2mysql::FColumn& ssimfile_c_column_curs_Access(ssimfile_c_column_curs &curs);
void                 FSsimfile_Uninit(ssim2mysql::FSsimfile& ssimfile) __attribute__((nothrow));
// print string representation of ssim2mysql::FSsimfile to string LHS, no header -- cprint:ssim2mysql.FSsimfile.String
void                 FSsimfile_Print(ssim2mysql::FSsimfile & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FSubstr
// create: ssim2mysql.FDb.substr (Lary)
// access: ssim2mysql.FField.c_substr (Ptr)
struct FSubstr { // ssim2mysql.FSubstr
    algo::Smallstr100     field;      //
    dmmeta::CppExpr       expr;       //
    algo::Smallstr100     srcfield;   //
    ssim2mysql::FField*   p_field;    // reference to parent row
private:
    friend ssim2mysql::FSubstr& substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend ssim2mysql::FSubstr* substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 substr_RemoveLast() __attribute__((nothrow));
    FSubstr();
    ~FSubstr();
    FSubstr(const FSubstr&){ /*disallow copy constructor */}
    void operator =(const FSubstr&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 substr_CopyOut(ssim2mysql::FSubstr &row, dmmeta::Substr &out) __attribute__((nothrow));
// Copy fields in to row
void                 substr_CopyIn(ssim2mysql::FSubstr &row, dmmeta::Substr &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FSubstr_Init(ssim2mysql::FSubstr& substr);
void                 FSubstr_Uninit(ssim2mysql::FSubstr& substr) __attribute__((nothrow));
// print string representation of ssim2mysql::FSubstr to string LHS, no header -- cprint:ssim2mysql.FSubstr.String
void                 FSubstr_Print(ssim2mysql::FSubstr & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.FieldId
#pragma pack(push,1)
struct FieldId { // ssim2mysql.FieldId: Field read helper
    i32   value;   //   -1
    inline operator ssim2mysql_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(ssim2mysql_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
ssim2mysql_FieldIdEnum value_GetEnum(const ssim2mysql::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(ssim2mysql::FieldId& parent, ssim2mysql_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const ssim2mysql::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const ssim2mysql::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(ssim2mysql::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(ssim2mysql::FieldId& parent, algo::strptr rhs, ssim2mysql_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(ssim2mysql::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of ssim2mysql::FieldId from an ascii string.
// The format of the string is the format of the ssim2mysql::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(ssim2mysql::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(ssim2mysql::FieldId& parent);
// print string representation of ssim2mysql::FieldId to string LHS, no header -- cprint:ssim2mysql.FieldId.String
void                 FieldId_Print(ssim2mysql::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- ssim2mysql.TableId
struct TableId { // ssim2mysql.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator ssim2mysql_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(ssim2mysql_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
ssim2mysql_TableIdEnum value_GetEnum(const ssim2mysql::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(ssim2mysql::TableId& parent, ssim2mysql_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const ssim2mysql::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const ssim2mysql::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(ssim2mysql::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(ssim2mysql::TableId& parent, algo::strptr rhs, ssim2mysql_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(ssim2mysql::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of ssim2mysql::TableId from an ascii string.
// The format of the string is the format of the ssim2mysql::TableId's only field
bool                 TableId_ReadStrptrMaybe(ssim2mysql::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(ssim2mysql::TableId& parent);
// print string representation of ssim2mysql::TableId to string LHS, no header -- cprint:ssim2mysql.TableId.String
void                 TableId_Print(ssim2mysql::TableId & row, algo::cstring &str) __attribute__((nothrow));

struct ctype_c_field_curs {// cursor
    typedef ssim2mysql::FField ChildType;
    ssim2mysql::FField** elems;
    u32 n_elems;
    u32 index;
    ctype_c_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_ns_curs {// cursor
    typedef ssim2mysql::FNs ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};


struct _db_ctype_curs {// cursor
    typedef ssim2mysql::FCtype ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_ctype_curs(){ parent=NULL; index=0; }
};


struct _db_field_curs {// cursor
    typedef ssim2mysql::FField ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_field_curs(){ parent=NULL; index=0; }
};


struct _db_sqltype_curs {// cursor
    typedef ssim2mysql::FSqltype ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_sqltype_curs(){ parent=NULL; index=0; }
};


struct _db_column_curs {// cursor
    typedef ssim2mysql::FColumn ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_column_curs(){ parent=NULL; index=0; }
};


struct _db_substr_curs {// cursor
    typedef ssim2mysql::FSubstr ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_substr_curs(){ parent=NULL; index=0; }
};


struct _db_ssimfile_curs {// cursor
    typedef ssim2mysql::FSsimfile ChildType;
    ssim2mysql::FDb *parent;
    i64 index;
    _db_ssimfile_curs(){ parent=NULL; index=0; }
};


struct _db_zs_cmd_curs {// cursor
    typedef ssim2mysql::FCmd ChildType;
    ssim2mysql::FCmd* row;
    _db_zs_cmd_curs() {
        row = NULL;
    }
};


struct _db_zd_ssimfile_curs {// cursor
    typedef ssim2mysql::FSsimfile ChildType;
    ssim2mysql::FSsimfile* row;
    _db_zd_ssimfile_curs() {
        row = NULL;
    }
};


struct _db_cd_input_line_curs {// cursor
    typedef ssim2mysql::FInput ChildType;
    ssim2mysql::FInput* row;
    ssim2mysql::FInput* head;
    _db_cd_input_line_curs() {
        row = NULL;
        head = NULL;
    }
};


struct ns_c_ssimfile_curs {// cursor
    typedef ssim2mysql::FSsimfile ChildType;
    ssim2mysql::FSsimfile** elems;
    u32 n_elems;
    u32 index;
    ns_c_ssimfile_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ssimfile_c_column_curs {// cursor
    typedef ssim2mysql::FColumn ChildType;
    ssim2mysql::FColumn** elems;
    u32 n_elems;
    u32 index;
    ssimfile_c_column_curs() { elems=NULL; n_elems=0; index=0; }
};

} // end namespace ssim2mysql
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FCmd &row);// cfmt:ssim2mysql.FCmd.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FColumn &row);// cfmt:ssim2mysql.FColumn.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FCtype &row);// cfmt:ssim2mysql.FCtype.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::trace &row);// cfmt:ssim2mysql.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FField &row);// cfmt:ssim2mysql.FField.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FInput &row);// cfmt:ssim2mysql.FInput.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FNs &row);// cfmt:ssim2mysql.FNs.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FSqltype &row);// cfmt:ssim2mysql.FSqltype.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FSsimfile &row);// cfmt:ssim2mysql.FSsimfile.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FSubstr &row);// cfmt:ssim2mysql.FSubstr.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::FieldId &row);// cfmt:ssim2mysql.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const ssim2mysql::TableId &row);// cfmt:ssim2mysql.TableId.String
}
