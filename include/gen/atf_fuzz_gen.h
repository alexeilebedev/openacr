//
// include/gen/atf_fuzz_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.h"
#include "include/gen/atfdb_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/dev_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- atf_fuzz_FieldIdEnum

enum atf_fuzz_FieldIdEnum {        // atf_fuzz.FieldId.value
     atf_fuzz_FieldId_value   = 0
};

enum { atf_fuzz_FieldIdEnum_N = 1 };


// --- atf_fuzz_TableIdEnum

enum atf_fuzz_TableIdEnum {              // atf_fuzz.TableId.value
     atf_fuzz_TableId_dev_Target   = 0   // dev.Target -> atf_fuzz.FTarget
    ,atf_fuzz_TableId_dev_target   = 0   // dev.target -> atf_fuzz.FTarget
};

enum { atf_fuzz_TableIdEnum_N = 2 };

namespace atf_fuzz { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace atf_fuzz { // gen:ns_field
extern const char *atf_fuzz_help;
} // gen:ns_field
// gen:ns_fwddecl2
namespace atfdb { struct Fuzzstrat; }
namespace dev { struct Target; }
namespace atf_fuzz { struct _db_fuzzstrat_curs; }
namespace atf_fuzz { struct _db_target_curs; }
namespace atf_fuzz { struct trace; }
namespace atf_fuzz { struct FDb; }
namespace atf_fuzz { struct FFuzzstrat; }
namespace atf_fuzz { struct FTarget; }
namespace atf_fuzz { struct FieldId; }
namespace atf_fuzz { struct TableId; }
namespace atf_fuzz { extern struct atf_fuzz::FDb _db; }
namespace atf_fuzz { // hook_fcn_typedef
    typedef void (*fuzzstrat_step_hook)(); // hook:atf_fuzz.FFuzzstrat.step
} // hook_decl
namespace atf_fuzz { // gen:ns_print_struct

// --- atf_fuzz.trace
#pragma pack(push,1)
struct trace { // atf_fuzz.trace
    trace();
};
#pragma pack(pop)

// print string representation of atf_fuzz::trace to string LHS, no header -- cprint:atf_fuzz.trace.String
void                 trace_Print(atf_fuzz::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- atf_fuzz.FDb
// create: atf_fuzz.FDb._db (Global)
struct FDb { // atf_fuzz.FDb
    command::atf_fuzz       cmdline;                    //
    atf_fuzz::FFuzzstrat*   fuzzstrat_lary[32];         // level array
    i32                     fuzzstrat_n;                // number of elements in array
    atf_fuzz::FTarget*      target_lary[32];            // level array
    i32                     target_n;                   // number of elements in array
    atf_fuzz::FTarget**     ind_target_buckets_elems;   // pointer to bucket array
    i32                     ind_target_buckets_n;       // number of elements in bucket array
    i32                     ind_target_n;               // number of elements in the hash table
    atf_fuzz::FTarget*      c_target;                   // optional pointer
    atf_fuzz::trace         trace;                      //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     atf_fuzz.FDb.cmdline
//     algo_lib.FDb.cmdline
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
atf_fuzz::FFuzzstrat& fuzzstrat_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
atf_fuzz::FFuzzstrat* fuzzstrat_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_fuzz::FFuzzstrat* fuzzstrat_InsertMaybe(const atfdb::Fuzzstrat &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                fuzzstrat_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 fuzzstrat_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
atf_fuzz::FFuzzstrat* fuzzstrat_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
atf_fuzz::FFuzzstrat* fuzzstrat_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  fuzzstrat_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 fuzzstrat_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 fuzzstrat_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
atf_fuzz::FFuzzstrat& fuzzstrat_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 fuzzstrat_XrefMaybe(atf_fuzz::FFuzzstrat &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
atf_fuzz::FTarget&   target_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
atf_fuzz::FTarget*   target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_fuzz::FTarget*   target_InsertMaybe(const dev::Target &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                target_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 target_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
atf_fuzz::FTarget*   target_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
atf_fuzz::FTarget*   target_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 target_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 target_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
atf_fuzz::FTarget&   target_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 target_XrefMaybe(atf_fuzz::FTarget &row);

// Return true if hash is empty
bool                 ind_target_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
atf_fuzz::FTarget*   ind_target_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
atf_fuzz::FTarget&   ind_target_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_fuzz::FTarget&   ind_target_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_target_InsertMaybe(atf_fuzz::FTarget& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_target_Remove(atf_fuzz::FTarget& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_target_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
void                 _db_fuzzstrat_curs_Reset(_db_fuzzstrat_curs &curs, atf_fuzz::FDb &parent);
// cursor points to valid item
bool                 _db_fuzzstrat_curs_ValidQ(_db_fuzzstrat_curs &curs);
// proceed to next item
void                 _db_fuzzstrat_curs_Next(_db_fuzzstrat_curs &curs);
// item access
atf_fuzz::FFuzzstrat& _db_fuzzstrat_curs_Access(_db_fuzzstrat_curs &curs);
// cursor points to valid item
void                 _db_target_curs_Reset(_db_target_curs &curs, atf_fuzz::FDb &parent);
// cursor points to valid item
bool                 _db_target_curs_ValidQ(_db_target_curs &curs);
// proceed to next item
void                 _db_target_curs_Next(_db_target_curs &curs);
// item access
atf_fuzz::FTarget&   _db_target_curs_Access(_db_target_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- atf_fuzz.FFuzzstrat
// create: atf_fuzz.FDb.fuzzstrat (Lary)
struct FFuzzstrat { // atf_fuzz.FFuzzstrat
    algo::Smallstr50                fuzzstrat;   //
    algo::Comment                   comment;     //
    atf_fuzz::fuzzstrat_step_hook   step;        //   NULL  Pointer to a function
private:
    friend atf_fuzz::FFuzzstrat& fuzzstrat_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_fuzz::FFuzzstrat* fuzzstrat_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 fuzzstrat_RemoveAll() __attribute__((nothrow));
    friend void                 fuzzstrat_RemoveLast() __attribute__((nothrow));
    FFuzzstrat();
    // reftype Hook of atf_fuzz.FFuzzstrat.step prohibits copy
    FFuzzstrat(const FFuzzstrat&){ /*disallow copy constructor */}
    void operator =(const FFuzzstrat&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 fuzzstrat_CopyOut(atf_fuzz::FFuzzstrat &row, atfdb::Fuzzstrat &out) __attribute__((nothrow));
// Copy fields in to row
void                 fuzzstrat_CopyIn(atf_fuzz::FFuzzstrat &row, atfdb::Fuzzstrat &in) __attribute__((nothrow));

// Invoke function by pointer
void                 step_Call(atf_fuzz::FFuzzstrat& fuzzstrat) __attribute__((nothrow));

// Set all fields to initial values.
void                 FFuzzstrat_Init(atf_fuzz::FFuzzstrat& fuzzstrat);

// --- atf_fuzz.FTarget
// create: atf_fuzz.FDb.target (Lary)
// global access: ind_target (Thash)
// global access: c_target (Ptr)
struct FTarget { // atf_fuzz.FTarget
    atf_fuzz::FTarget*   ind_target_next;   // hash next
    algo::Smallstr16     target;            //
    algo::Smallstr50     compat;            //   "Linux-%.%-%"
private:
    friend atf_fuzz::FTarget&   target_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend atf_fuzz::FTarget*   target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 target_RemoveAll() __attribute__((nothrow));
    friend void                 target_RemoveLast() __attribute__((nothrow));
    FTarget();
    ~FTarget();
    FTarget(const FTarget&){ /*disallow copy constructor */}
    void operator =(const FTarget&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 target_CopyOut(atf_fuzz::FTarget &row, dev::Target &out) __attribute__((nothrow));
// Copy fields in to row
void                 target_CopyIn(atf_fuzz::FTarget &row, dev::Target &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FTarget_Init(atf_fuzz::FTarget& target);
void                 FTarget_Uninit(atf_fuzz::FTarget& target) __attribute__((nothrow));

// --- atf_fuzz.FieldId
#pragma pack(push,1)
struct FieldId { // atf_fuzz.FieldId: Field read helper
    i32   value;   //   -1
    inline operator atf_fuzz_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(atf_fuzz_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
atf_fuzz_FieldIdEnum value_GetEnum(const atf_fuzz::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(atf_fuzz::FieldId& parent, atf_fuzz_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const atf_fuzz::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const atf_fuzz::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(atf_fuzz::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(atf_fuzz::FieldId& parent, algo::strptr rhs, atf_fuzz_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(atf_fuzz::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of atf_fuzz::FieldId from an ascii string.
// The format of the string is the format of the atf_fuzz::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(atf_fuzz::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(atf_fuzz::FieldId& parent);
// print string representation of atf_fuzz::FieldId to string LHS, no header -- cprint:atf_fuzz.FieldId.String
void                 FieldId_Print(atf_fuzz::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- atf_fuzz.TableId
struct TableId { // atf_fuzz.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator atf_fuzz_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(atf_fuzz_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
atf_fuzz_TableIdEnum value_GetEnum(const atf_fuzz::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(atf_fuzz::TableId& parent, atf_fuzz_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const atf_fuzz::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const atf_fuzz::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(atf_fuzz::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(atf_fuzz::TableId& parent, algo::strptr rhs, atf_fuzz_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(atf_fuzz::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of atf_fuzz::TableId from an ascii string.
// The format of the string is the format of the atf_fuzz::TableId's only field
bool                 TableId_ReadStrptrMaybe(atf_fuzz::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(atf_fuzz::TableId& parent);
// print string representation of atf_fuzz::TableId to string LHS, no header -- cprint:atf_fuzz.TableId.String
void                 TableId_Print(atf_fuzz::TableId & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace atf_fuzz { // gen:ns_curstext

struct _db_fuzzstrat_curs {// cursor
    typedef atf_fuzz::FFuzzstrat ChildType;
    atf_fuzz::FDb *parent;
    i64 index;
    _db_fuzzstrat_curs(){ parent=NULL; index=0; }
};


struct _db_target_curs {// cursor
    typedef atf_fuzz::FTarget ChildType;
    atf_fuzz::FDb *parent;
    i64 index;
    _db_target_curs(){ parent=NULL; index=0; }
};

} // gen:ns_curstext
namespace atf_fuzz { // gen:ns_func
// User-implemented function from gstatic:atf_fuzz.FDb.fuzzstrat
void                 fuzzstrat_skip_inputs();
} // gen:ns_func
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const atf_fuzz::trace &row);// cfmt:atf_fuzz.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_fuzz::FieldId &row);// cfmt:atf_fuzz.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const atf_fuzz::TableId &row);// cfmt:atf_fuzz.TableId.String
}
