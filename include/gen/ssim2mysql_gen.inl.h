//
// include/gen/ssim2mysql_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/command_gen.inl.h"
//#pragma endinclude
inline ssim2mysql::FCmd::FCmd() {
    ssim2mysql::FCmd_Init(*this);
}

inline ssim2mysql::FCmd::~FCmd() {
    ssim2mysql::FCmd_Uninit(*this);
}


// --- ssim2mysql.FCmd..Init
// Set all fields to initial values.
inline void ssim2mysql::FCmd_Init(ssim2mysql::FCmd& cmd) {
    cmd.cmd_next = (ssim2mysql::FCmd*)-1; // (ssim2mysql.FDb.cmd) not-in-tpool's freelist
    cmd.zs_cmd_next = (ssim2mysql::FCmd*)-1; // (ssim2mysql.FDb.zs_cmd) not-in-list
}
inline ssim2mysql::FColumn::FColumn() {
    ssim2mysql::FColumn_Init(*this);
}

inline ssim2mysql::FColumn::~FColumn() {
    ssim2mysql::FColumn_Uninit(*this);
}


// --- ssim2mysql.FColumn..Init
// Set all fields to initial values.
inline void ssim2mysql::FColumn_Init(ssim2mysql::FColumn& column) {
    column.p_field = NULL;
    column.is_int = bool(false);
    column.is_pkey = bool(false);
    column.ssimfile_c_column_in_ary = bool(false);
    column.ind_column_next = (ssim2mysql::FColumn*)-1; // (ssim2mysql.FDb.ind_column) not-in-hash
}
inline ssim2mysql::FCtype::FCtype() {
    ssim2mysql::FCtype_Init(*this);
}

inline ssim2mysql::FCtype::~FCtype() {
    ssim2mysql::FCtype_Uninit(*this);
}


// --- ssim2mysql.FCtype.c_sqltype.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool ssim2mysql::c_sqltype_InsertMaybe(ssim2mysql::FCtype& ctype, ssim2mysql::FSqltype& row) {
    ssim2mysql::FSqltype* ptr = ctype.c_sqltype;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ctype.c_sqltype = &row;
    }
    return retval;
}

// --- ssim2mysql.FCtype.c_sqltype.Remove
// Remove element from index. If element is not in index, do nothing.
inline void ssim2mysql::c_sqltype_Remove(ssim2mysql::FCtype& ctype, ssim2mysql::FSqltype& row) {
    ssim2mysql::FSqltype *ptr = ctype.c_sqltype;
    if (LIKELY(ptr == &row)) {
        ctype.c_sqltype = NULL;
    }
}

// --- ssim2mysql.FCtype.c_field.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::c_field_EmptyQ(ssim2mysql::FCtype& ctype) {
    return ctype.c_field_n == 0;
}

// --- ssim2mysql.FCtype.c_field.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FField* ssim2mysql::c_field_Find(ssim2mysql::FCtype& ctype, u32 t) {
    ssim2mysql::FField *retval = NULL;
    u64 idx = t;
    u64 lim = ctype.c_field_n;
    if (idx < lim) {
        retval = ctype.c_field_elems[idx];
    }
    return retval;
}

// --- ssim2mysql.FCtype.c_field.Getary
// Return array of pointers
inline algo::aryptr<ssim2mysql::FField*> ssim2mysql::c_field_Getary(ssim2mysql::FCtype& ctype) {
    return algo::aryptr<ssim2mysql::FField*>(ctype.c_field_elems, ctype.c_field_n);
}

// --- ssim2mysql.FCtype.c_field.N
// Return number of items in the pointer array
inline i32 ssim2mysql::c_field_N(const ssim2mysql::FCtype& ctype) {
    return ctype.c_field_n;
}

// --- ssim2mysql.FCtype.c_field.RemoveAll
// Empty the index. (The rows are not deleted)
inline void ssim2mysql::c_field_RemoveAll(ssim2mysql::FCtype& ctype) {
    for (u32 i = 0; i < ctype.c_field_n; i++) {
        // mark all elements as not-in-array
        ctype.c_field_elems[i]->ctype_c_field_in_ary = false;
    }
    ctype.c_field_n = 0;
}

// --- ssim2mysql.FCtype.c_ssimfile.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool ssim2mysql::c_ssimfile_InsertMaybe(ssim2mysql::FCtype& ctype, ssim2mysql::FSsimfile& row) {
    ssim2mysql::FSsimfile* ptr = ctype.c_ssimfile;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        ctype.c_ssimfile = &row;
    }
    return retval;
}

// --- ssim2mysql.FCtype.c_ssimfile.Remove
// Remove element from index. If element is not in index, do nothing.
inline void ssim2mysql::c_ssimfile_Remove(ssim2mysql::FCtype& ctype, ssim2mysql::FSsimfile& row) {
    ssim2mysql::FSsimfile *ptr = ctype.c_ssimfile;
    if (LIKELY(ptr == &row)) {
        ctype.c_ssimfile = NULL;
    }
}

// --- ssim2mysql.FCtype.c_field_curs.Reset
inline void ssim2mysql::ctype_c_field_curs_Reset(ctype_c_field_curs &curs, ssim2mysql::FCtype &parent) {
    curs.elems = parent.c_field_elems;
    curs.n_elems = parent.c_field_n;
    curs.index = 0;
}

// --- ssim2mysql.FCtype.c_field_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- ssim2mysql.FCtype.c_field_curs.Next
// proceed to next item
inline void ssim2mysql::ctype_c_field_curs_Next(ctype_c_field_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FCtype.c_field_curs.Access
// item access
inline ssim2mysql::FField& ssim2mysql::ctype_c_field_curs_Access(ctype_c_field_curs &curs) {
    return *curs.elems[curs.index];
}

// --- ssim2mysql.FCtype..Init
// Set all fields to initial values.
inline void ssim2mysql::FCtype_Init(ssim2mysql::FCtype& ctype) {
    ctype.p_ns = NULL;
    ctype.c_sqltype = NULL;
    ctype.c_field_elems = NULL; // (ssim2mysql.FCtype.c_field)
    ctype.c_field_n = 0; // (ssim2mysql.FCtype.c_field)
    ctype.c_field_max = 0; // (ssim2mysql.FCtype.c_field)
    ctype.c_ssimfile = NULL;
    ctype.ind_ctype_next = (ssim2mysql::FCtype*)-1; // (ssim2mysql.FDb.ind_ctype) not-in-hash
}
inline ssim2mysql::trace::trace() {
    ssim2mysql::trace_Init(*this);
}


// --- ssim2mysql.trace..Init
// Set all fields to initial values.
inline void ssim2mysql::trace_Init(ssim2mysql::trace& parent) {
    parent.step_zs_cmd = u64(0);
    parent.step_zs_cmd_cycles = u64(0);
    parent.step_cd_input_line = u64(0);
    parent.step_cd_input_line_cycles = u64(0);
}

// --- ssim2mysql.FDb.ind_column.EmptyQ
// Return true if hash is empty
inline bool ssim2mysql::ind_column_EmptyQ() {
    return _db.ind_column_n == 0;
}

// --- ssim2mysql.FDb.ind_column.N
// Return number of items in the hash
inline i32 ssim2mysql::ind_column_N() {
    return _db.ind_column_n;
}

// --- ssim2mysql.FDb.ns.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::ns_EmptyQ() {
    return _db.ns_n == 0;
}

// --- ssim2mysql.FDb.ns.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FNs* ssim2mysql::ns_Find(u64 t) {
    ssim2mysql::FNs *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ns_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ns_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.ns.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FNs* ssim2mysql::ns_Last() {
    return ns_Find(u64(_db.ns_n-1));
}

// --- ssim2mysql.FDb.ns.N
// Return number of items in the pool
inline i32 ssim2mysql::ns_N() {
    return _db.ns_n;
}

// --- ssim2mysql.FDb.ns.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FNs& ssim2mysql::ns_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ns_lary[bsr][index];
}

// --- ssim2mysql.FDb.ctype.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::ctype_EmptyQ() {
    return _db.ctype_n == 0;
}

// --- ssim2mysql.FDb.ctype.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FCtype* ssim2mysql::ctype_Find(u64 t) {
    ssim2mysql::FCtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ctype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ctype_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.ctype.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FCtype* ssim2mysql::ctype_Last() {
    return ctype_Find(u64(_db.ctype_n-1));
}

// --- ssim2mysql.FDb.ctype.N
// Return number of items in the pool
inline i32 ssim2mysql::ctype_N() {
    return _db.ctype_n;
}

// --- ssim2mysql.FDb.ctype.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FCtype& ssim2mysql::ctype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ctype_lary[bsr][index];
}

// --- ssim2mysql.FDb.field.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::field_EmptyQ() {
    return _db.field_n == 0;
}

// --- ssim2mysql.FDb.field.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FField* ssim2mysql::field_Find(u64 t) {
    ssim2mysql::FField *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.field_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.field_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.field.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FField* ssim2mysql::field_Last() {
    return field_Find(u64(_db.field_n-1));
}

// --- ssim2mysql.FDb.field.N
// Return number of items in the pool
inline i32 ssim2mysql::field_N() {
    return _db.field_n;
}

// --- ssim2mysql.FDb.field.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FField& ssim2mysql::field_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.field_lary[bsr][index];
}

// --- ssim2mysql.FDb.sqltype.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::sqltype_EmptyQ() {
    return _db.sqltype_n == 0;
}

// --- ssim2mysql.FDb.sqltype.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FSqltype* ssim2mysql::sqltype_Find(u64 t) {
    ssim2mysql::FSqltype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.sqltype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.sqltype_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.sqltype.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FSqltype* ssim2mysql::sqltype_Last() {
    return sqltype_Find(u64(_db.sqltype_n-1));
}

// --- ssim2mysql.FDb.sqltype.N
// Return number of items in the pool
inline i32 ssim2mysql::sqltype_N() {
    return _db.sqltype_n;
}

// --- ssim2mysql.FDb.sqltype.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FSqltype& ssim2mysql::sqltype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.sqltype_lary[bsr][index];
}

// --- ssim2mysql.FDb.column.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::column_EmptyQ() {
    return _db.column_n == 0;
}

// --- ssim2mysql.FDb.column.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FColumn* ssim2mysql::column_Find(u64 t) {
    ssim2mysql::FColumn *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.column_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.column_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.column.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FColumn* ssim2mysql::column_Last() {
    return column_Find(u64(_db.column_n-1));
}

// --- ssim2mysql.FDb.column.N
// Return number of items in the pool
inline i32 ssim2mysql::column_N() {
    return _db.column_n;
}

// --- ssim2mysql.FDb.column.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FColumn& ssim2mysql::column_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.column_lary[bsr][index];
}

// --- ssim2mysql.FDb.ind_ns.EmptyQ
// Return true if hash is empty
inline bool ssim2mysql::ind_ns_EmptyQ() {
    return _db.ind_ns_n == 0;
}

// --- ssim2mysql.FDb.ind_ns.N
// Return number of items in the hash
inline i32 ssim2mysql::ind_ns_N() {
    return _db.ind_ns_n;
}

// --- ssim2mysql.FDb.ind_ctype.EmptyQ
// Return true if hash is empty
inline bool ssim2mysql::ind_ctype_EmptyQ() {
    return _db.ind_ctype_n == 0;
}

// --- ssim2mysql.FDb.ind_ctype.N
// Return number of items in the hash
inline i32 ssim2mysql::ind_ctype_N() {
    return _db.ind_ctype_n;
}

// --- ssim2mysql.FDb.ind_field.EmptyQ
// Return true if hash is empty
inline bool ssim2mysql::ind_field_EmptyQ() {
    return _db.ind_field_n == 0;
}

// --- ssim2mysql.FDb.ind_field.N
// Return number of items in the hash
inline i32 ssim2mysql::ind_field_N() {
    return _db.ind_field_n;
}

// --- ssim2mysql.FDb.substr.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::substr_EmptyQ() {
    return _db.substr_n == 0;
}

// --- ssim2mysql.FDb.substr.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FSubstr* ssim2mysql::substr_Find(u64 t) {
    ssim2mysql::FSubstr *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.substr_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.substr_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.substr.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FSubstr* ssim2mysql::substr_Last() {
    return substr_Find(u64(_db.substr_n-1));
}

// --- ssim2mysql.FDb.substr.N
// Return number of items in the pool
inline i32 ssim2mysql::substr_N() {
    return _db.substr_n;
}

// --- ssim2mysql.FDb.substr.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FSubstr& ssim2mysql::substr_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.substr_lary[bsr][index];
}

// --- ssim2mysql.FDb.ssimfile.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::ssimfile_EmptyQ() {
    return _db.ssimfile_n == 0;
}

// --- ssim2mysql.FDb.ssimfile.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FSsimfile* ssim2mysql::ssimfile_Find(u64 t) {
    ssim2mysql::FSsimfile *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ssimfile_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ssimfile_lary[bsr][index];
    }
    return retval;
}

// --- ssim2mysql.FDb.ssimfile.Last
// Return pointer to last element of array, or NULL if array is empty
inline ssim2mysql::FSsimfile* ssim2mysql::ssimfile_Last() {
    return ssimfile_Find(u64(_db.ssimfile_n-1));
}

// --- ssim2mysql.FDb.ssimfile.N
// Return number of items in the pool
inline i32 ssim2mysql::ssimfile_N() {
    return _db.ssimfile_n;
}

// --- ssim2mysql.FDb.ssimfile.qFind
// 'quick' Access row by row id. No bounds checking.
inline ssim2mysql::FSsimfile& ssim2mysql::ssimfile_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ssimfile_lary[bsr][index];
}

// --- ssim2mysql.FDb.ind_ssimfile.EmptyQ
// Return true if hash is empty
inline bool ssim2mysql::ind_ssimfile_EmptyQ() {
    return _db.ind_ssimfile_n == 0;
}

// --- ssim2mysql.FDb.ind_ssimfile.N
// Return number of items in the hash
inline i32 ssim2mysql::ind_ssimfile_N() {
    return _db.ind_ssimfile_n;
}

// --- ssim2mysql.FDb.zs_cmd.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::zs_cmd_EmptyQ() {
    return _db.zs_cmd_head == NULL;
}

// --- ssim2mysql.FDb.zs_cmd.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline ssim2mysql::FCmd* ssim2mysql::zs_cmd_First() {
    ssim2mysql::FCmd *row = NULL;
    row = _db.zs_cmd_head;
    return row;
}

// --- ssim2mysql.FDb.zs_cmd.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool ssim2mysql::zs_cmd_InLlistQ(ssim2mysql::FCmd& row) {
    bool result = false;
    result = !(row.zs_cmd_next == (ssim2mysql::FCmd*)-1);
    return result;
}

// --- ssim2mysql.FDb.zs_cmd.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline ssim2mysql::FCmd* ssim2mysql::zs_cmd_Last() {
    ssim2mysql::FCmd *row = NULL;
    row = _db.zs_cmd_tail;
    return row;
}

// --- ssim2mysql.FDb.zs_cmd.Next
// Return pointer to next element in the list
inline ssim2mysql::FCmd* ssim2mysql::zs_cmd_Next(ssim2mysql::FCmd &row) {
    return row.zs_cmd_next;
}

// --- ssim2mysql.FDb.zs_cmd.qLast
// Return reference to last element in the index. No bounds checking.
inline ssim2mysql::FCmd& ssim2mysql::zs_cmd_qLast() {
    ssim2mysql::FCmd *row = NULL;
    row = _db.zs_cmd_tail;
    return *row;
}

// --- ssim2mysql.FDb.zd_ssimfile.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::zd_ssimfile_EmptyQ() {
    return _db.zd_ssimfile_head == NULL;
}

// --- ssim2mysql.FDb.zd_ssimfile.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline ssim2mysql::FSsimfile* ssim2mysql::zd_ssimfile_First() {
    ssim2mysql::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_head;
    return row;
}

// --- ssim2mysql.FDb.zd_ssimfile.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool ssim2mysql::zd_ssimfile_InLlistQ(ssim2mysql::FSsimfile& row) {
    bool result = false;
    result = !(row.zd_ssimfile_next == (ssim2mysql::FSsimfile*)-1);
    return result;
}

// --- ssim2mysql.FDb.zd_ssimfile.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline ssim2mysql::FSsimfile* ssim2mysql::zd_ssimfile_Last() {
    ssim2mysql::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_tail;
    return row;
}

// --- ssim2mysql.FDb.zd_ssimfile.Next
// Return pointer to next element in the list
inline ssim2mysql::FSsimfile* ssim2mysql::zd_ssimfile_Next(ssim2mysql::FSsimfile &row) {
    return row.zd_ssimfile_next;
}

// --- ssim2mysql.FDb.zd_ssimfile.Prev
// Return pointer to previous element in the list
inline ssim2mysql::FSsimfile* ssim2mysql::zd_ssimfile_Prev(ssim2mysql::FSsimfile &row) {
    return row.zd_ssimfile_prev;
}

// --- ssim2mysql.FDb.zd_ssimfile.qLast
// Return reference to last element in the index. No bounds checking.
inline ssim2mysql::FSsimfile& ssim2mysql::zd_ssimfile_qLast() {
    ssim2mysql::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_tail;
    return *row;
}

// --- ssim2mysql.FDb.cd_input_line.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::cd_input_line_EmptyQ() {
    return _db.cd_input_line_head == NULL;
}

// --- ssim2mysql.FDb.cd_input_line.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline ssim2mysql::FInput* ssim2mysql::cd_input_line_First() {
    ssim2mysql::FInput *row = NULL;
    row = _db.cd_input_line_head;
    return row;
}

// --- ssim2mysql.FDb.cd_input_line.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool ssim2mysql::cd_input_line_InLlistQ(ssim2mysql::FInput& row) {
    bool result = false;
    result = !(row.cd_input_line_next == (ssim2mysql::FInput*)-1);
    return result;
}

// --- ssim2mysql.FDb.cd_input_line.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline ssim2mysql::FInput* ssim2mysql::cd_input_line_Last() {
    ssim2mysql::FInput *row = NULL;
    row = _db.cd_input_line_head ? _db.cd_input_line_head->cd_input_line_prev : NULL;
    return row;
}

// --- ssim2mysql.FDb.cd_input_line.Next
// Return pointer to next element in the list
inline ssim2mysql::FInput* ssim2mysql::cd_input_line_Next(ssim2mysql::FInput &row) {
    return row.cd_input_line_next;
}

// --- ssim2mysql.FDb.cd_input_line.Prev
// Return pointer to previous element in the list
inline ssim2mysql::FInput* ssim2mysql::cd_input_line_Prev(ssim2mysql::FInput &row) {
    return row.cd_input_line_prev;
}

// --- ssim2mysql.FDb.cd_input_line.qLast
// Return reference to last element in the index. No bounds checking.
inline ssim2mysql::FInput& ssim2mysql::cd_input_line_qLast() {
    ssim2mysql::FInput *row = NULL;
    row = _db.cd_input_line_head ? _db.cd_input_line_head->cd_input_line_prev : NULL;
    return *row;
}

// --- ssim2mysql.FDb.ns_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_ns_curs_Reset(_db_ns_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.ns_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_ns_curs_ValidQ(_db_ns_curs &curs) {
    return curs.index < _db.ns_n;
}

// --- ssim2mysql.FDb.ns_curs.Next
// proceed to next item
inline void ssim2mysql::_db_ns_curs_Next(_db_ns_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.ns_curs.Access
// item access
inline ssim2mysql::FNs& ssim2mysql::_db_ns_curs_Access(_db_ns_curs &curs) {
    return ns_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.ctype_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_ctype_curs_Reset(_db_ctype_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.ctype_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_ctype_curs_ValidQ(_db_ctype_curs &curs) {
    return curs.index < _db.ctype_n;
}

// --- ssim2mysql.FDb.ctype_curs.Next
// proceed to next item
inline void ssim2mysql::_db_ctype_curs_Next(_db_ctype_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.ctype_curs.Access
// item access
inline ssim2mysql::FCtype& ssim2mysql::_db_ctype_curs_Access(_db_ctype_curs &curs) {
    return ctype_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.field_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_field_curs_Reset(_db_field_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.field_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_field_curs_ValidQ(_db_field_curs &curs) {
    return curs.index < _db.field_n;
}

// --- ssim2mysql.FDb.field_curs.Next
// proceed to next item
inline void ssim2mysql::_db_field_curs_Next(_db_field_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.field_curs.Access
// item access
inline ssim2mysql::FField& ssim2mysql::_db_field_curs_Access(_db_field_curs &curs) {
    return field_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.sqltype_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_sqltype_curs_Reset(_db_sqltype_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.sqltype_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_sqltype_curs_ValidQ(_db_sqltype_curs &curs) {
    return curs.index < _db.sqltype_n;
}

// --- ssim2mysql.FDb.sqltype_curs.Next
// proceed to next item
inline void ssim2mysql::_db_sqltype_curs_Next(_db_sqltype_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.sqltype_curs.Access
// item access
inline ssim2mysql::FSqltype& ssim2mysql::_db_sqltype_curs_Access(_db_sqltype_curs &curs) {
    return sqltype_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.column_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_column_curs_Reset(_db_column_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.column_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_column_curs_ValidQ(_db_column_curs &curs) {
    return curs.index < _db.column_n;
}

// --- ssim2mysql.FDb.column_curs.Next
// proceed to next item
inline void ssim2mysql::_db_column_curs_Next(_db_column_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.column_curs.Access
// item access
inline ssim2mysql::FColumn& ssim2mysql::_db_column_curs_Access(_db_column_curs &curs) {
    return column_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.substr_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_substr_curs_Reset(_db_substr_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.substr_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_substr_curs_ValidQ(_db_substr_curs &curs) {
    return curs.index < _db.substr_n;
}

// --- ssim2mysql.FDb.substr_curs.Next
// proceed to next item
inline void ssim2mysql::_db_substr_curs_Next(_db_substr_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.substr_curs.Access
// item access
inline ssim2mysql::FSubstr& ssim2mysql::_db_substr_curs_Access(_db_substr_curs &curs) {
    return substr_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.ssimfile_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, ssim2mysql::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- ssim2mysql.FDb.ssimfile_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs) {
    return curs.index < _db.ssimfile_n;
}

// --- ssim2mysql.FDb.ssimfile_curs.Next
// proceed to next item
inline void ssim2mysql::_db_ssimfile_curs_Next(_db_ssimfile_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FDb.ssimfile_curs.Access
// item access
inline ssim2mysql::FSsimfile& ssim2mysql::_db_ssimfile_curs_Access(_db_ssimfile_curs &curs) {
    return ssimfile_qFind(u64(curs.index));
}

// --- ssim2mysql.FDb.zs_cmd_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_zs_cmd_curs_Reset(_db_zs_cmd_curs &curs, ssim2mysql::FDb &parent) {
    curs.row = parent.zs_cmd_head;
}

// --- ssim2mysql.FDb.zs_cmd_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_zs_cmd_curs_ValidQ(_db_zs_cmd_curs &curs) {
    return curs.row != NULL;
}

// --- ssim2mysql.FDb.zs_cmd_curs.Next
// proceed to next item
inline void ssim2mysql::_db_zs_cmd_curs_Next(_db_zs_cmd_curs &curs) {
    ssim2mysql::FCmd *next = (*curs.row).zs_cmd_next;
    curs.row = next;
}

// --- ssim2mysql.FDb.zs_cmd_curs.Access
// item access
inline ssim2mysql::FCmd& ssim2mysql::_db_zs_cmd_curs_Access(_db_zs_cmd_curs &curs) {
    return *curs.row;
}

// --- ssim2mysql.FDb.zd_ssimfile_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_zd_ssimfile_curs_Reset(_db_zd_ssimfile_curs &curs, ssim2mysql::FDb &parent) {
    curs.row = parent.zd_ssimfile_head;
}

// --- ssim2mysql.FDb.zd_ssimfile_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_zd_ssimfile_curs_ValidQ(_db_zd_ssimfile_curs &curs) {
    return curs.row != NULL;
}

// --- ssim2mysql.FDb.zd_ssimfile_curs.Next
// proceed to next item
inline void ssim2mysql::_db_zd_ssimfile_curs_Next(_db_zd_ssimfile_curs &curs) {
    ssim2mysql::FSsimfile *next = (*curs.row).zd_ssimfile_next;
    curs.row = next;
}

// --- ssim2mysql.FDb.zd_ssimfile_curs.Access
// item access
inline ssim2mysql::FSsimfile& ssim2mysql::_db_zd_ssimfile_curs_Access(_db_zd_ssimfile_curs &curs) {
    return *curs.row;
}

// --- ssim2mysql.FDb.cd_input_line_curs.Reset
// cursor points to valid item
inline void ssim2mysql::_db_cd_input_line_curs_Reset(_db_cd_input_line_curs &curs, ssim2mysql::FDb &parent) {
    curs.row = parent.cd_input_line_head;
    curs.head = &parent.cd_input_line_head;
}

// --- ssim2mysql.FDb.cd_input_line_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::_db_cd_input_line_curs_ValidQ(_db_cd_input_line_curs &curs) {
    return curs.row != NULL;
}

// --- ssim2mysql.FDb.cd_input_line_curs.Next
// proceed to next item
inline void ssim2mysql::_db_cd_input_line_curs_Next(_db_cd_input_line_curs &curs) {
    ssim2mysql::FInput *next = (*curs.row).cd_input_line_next;
    curs.row = next;
    if (curs.row == *curs.head) {
        curs.row = NULL;
    }
}

// --- ssim2mysql.FDb.cd_input_line_curs.Access
// item access
inline ssim2mysql::FInput& ssim2mysql::_db_cd_input_line_curs_Access(_db_cd_input_line_curs &curs) {
    return *curs.row;
}
inline ssim2mysql::FField::FField() {
    ssim2mysql::FField_Init(*this);
}

inline ssim2mysql::FField::~FField() {
    ssim2mysql::FField_Uninit(*this);
}


// --- ssim2mysql.FField.c_substr.InsertMaybe
// Insert row into pointer index. Return final membership status.
inline bool ssim2mysql::c_substr_InsertMaybe(ssim2mysql::FField& field, ssim2mysql::FSubstr& row) {
    ssim2mysql::FSubstr* ptr = field.c_substr;
    bool retval = (ptr == NULL) | (ptr == &row);
    if (retval) {
        field.c_substr = &row;
    }
    return retval;
}

// --- ssim2mysql.FField.c_substr.Remove
// Remove element from index. If element is not in index, do nothing.
inline void ssim2mysql::c_substr_Remove(ssim2mysql::FField& field, ssim2mysql::FSubstr& row) {
    ssim2mysql::FSubstr *ptr = field.c_substr;
    if (LIKELY(ptr == &row)) {
        field.c_substr = NULL;
    }
}
inline ssim2mysql::FInput::FInput() {
    ssim2mysql::FInput_Init(*this);
    // added because ssim2mysql.FInput.in_buf (Fbuf) does not need initialization
    // coverity[uninit_member]
}

inline ssim2mysql::FInput::~FInput() {
    ssim2mysql::FInput_Uninit(*this);
}


// --- ssim2mysql.FInput.in_buf.Max
// Return max. number of bytes in the buffer.
inline i32 ssim2mysql::in_buf_Max(ssim2mysql::FInput& input) {
    return 65536;
    (void)input;//only to avoid -Wunused-parameter
}

// --- ssim2mysql.FInput.in_buf.N
// Return number of bytes in the buffer.
inline i32 ssim2mysql::in_buf_N(ssim2mysql::FInput& input) {
    return input.in_buf_end - input.in_buf_start;
}
inline ssim2mysql::FNs::FNs() {
    ssim2mysql::FNs_Init(*this);
}

inline ssim2mysql::FNs::~FNs() {
    ssim2mysql::FNs_Uninit(*this);
}


// --- ssim2mysql.FNs.c_ssimfile.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::c_ssimfile_EmptyQ(ssim2mysql::FNs& ns) {
    return ns.c_ssimfile_n == 0;
}

// --- ssim2mysql.FNs.c_ssimfile.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FSsimfile* ssim2mysql::c_ssimfile_Find(ssim2mysql::FNs& ns, u32 t) {
    ssim2mysql::FSsimfile *retval = NULL;
    u64 idx = t;
    u64 lim = ns.c_ssimfile_n;
    if (idx < lim) {
        retval = ns.c_ssimfile_elems[idx];
    }
    return retval;
}

// --- ssim2mysql.FNs.c_ssimfile.Getary
// Return array of pointers
inline algo::aryptr<ssim2mysql::FSsimfile*> ssim2mysql::c_ssimfile_Getary(ssim2mysql::FNs& ns) {
    return algo::aryptr<ssim2mysql::FSsimfile*>(ns.c_ssimfile_elems, ns.c_ssimfile_n);
}

// --- ssim2mysql.FNs.c_ssimfile.N
// Return number of items in the pointer array
inline i32 ssim2mysql::c_ssimfile_N(const ssim2mysql::FNs& ns) {
    return ns.c_ssimfile_n;
}

// --- ssim2mysql.FNs.c_ssimfile.RemoveAll
// Empty the index. (The rows are not deleted)
inline void ssim2mysql::c_ssimfile_RemoveAll(ssim2mysql::FNs& ns) {
    for (u32 i = 0; i < ns.c_ssimfile_n; i++) {
        // mark all elements as not-in-array
        ns.c_ssimfile_elems[i]->ns_c_ssimfile_in_ary = false;
    }
    ns.c_ssimfile_n = 0;
}

// --- ssim2mysql.FNs..Init
// Set all fields to initial values.
inline void ssim2mysql::FNs_Init(ssim2mysql::FNs& ns) {
    ns.c_ssimfile_elems = NULL; // (ssim2mysql.FNs.c_ssimfile)
    ns.c_ssimfile_n = 0; // (ssim2mysql.FNs.c_ssimfile)
    ns.c_ssimfile_max = 0; // (ssim2mysql.FNs.c_ssimfile)
    ns.ind_ns_next = (ssim2mysql::FNs*)-1; // (ssim2mysql.FDb.ind_ns) not-in-hash
}

// --- ssim2mysql.FNs.c_ssimfile_curs.Reset
inline void ssim2mysql::ns_c_ssimfile_curs_Reset(ns_c_ssimfile_curs &curs, ssim2mysql::FNs &parent) {
    curs.elems = parent.c_ssimfile_elems;
    curs.n_elems = parent.c_ssimfile_n;
    curs.index = 0;
}

// --- ssim2mysql.FNs.c_ssimfile_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::ns_c_ssimfile_curs_ValidQ(ns_c_ssimfile_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- ssim2mysql.FNs.c_ssimfile_curs.Next
// proceed to next item
inline void ssim2mysql::ns_c_ssimfile_curs_Next(ns_c_ssimfile_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FNs.c_ssimfile_curs.Access
// item access
inline ssim2mysql::FSsimfile& ssim2mysql::ns_c_ssimfile_curs_Access(ns_c_ssimfile_curs &curs) {
    return *curs.elems[curs.index];
}
inline ssim2mysql::FSqltype::FSqltype() {
}

inline ssim2mysql::FSqltype::~FSqltype() {
    ssim2mysql::FSqltype_Uninit(*this);
}

inline ssim2mysql::FSsimfile::FSsimfile() {
    ssim2mysql::FSsimfile_Init(*this);
}

inline ssim2mysql::FSsimfile::~FSsimfile() {
    ssim2mysql::FSsimfile_Uninit(*this);
}


// --- ssim2mysql.FSsimfile.c_column.EmptyQ
// Return true if index is empty
inline bool ssim2mysql::c_column_EmptyQ(ssim2mysql::FSsimfile& ssimfile) {
    return ssimfile.c_column_n == 0;
}

// --- ssim2mysql.FSsimfile.c_column.Find
// Look up row by row id. Return NULL if out of range
inline ssim2mysql::FColumn* ssim2mysql::c_column_Find(ssim2mysql::FSsimfile& ssimfile, u32 t) {
    ssim2mysql::FColumn *retval = NULL;
    u64 idx = t;
    u64 lim = ssimfile.c_column_n;
    if (idx < lim) {
        retval = ssimfile.c_column_elems[idx];
    }
    return retval;
}

// --- ssim2mysql.FSsimfile.c_column.Getary
// Return array of pointers
inline algo::aryptr<ssim2mysql::FColumn*> ssim2mysql::c_column_Getary(ssim2mysql::FSsimfile& ssimfile) {
    return algo::aryptr<ssim2mysql::FColumn*>(ssimfile.c_column_elems, ssimfile.c_column_n);
}

// --- ssim2mysql.FSsimfile.c_column.N
// Return number of items in the pointer array
inline i32 ssim2mysql::c_column_N(const ssim2mysql::FSsimfile& ssimfile) {
    return ssimfile.c_column_n;
}

// --- ssim2mysql.FSsimfile.c_column.RemoveAll
// Empty the index. (The rows are not deleted)
inline void ssim2mysql::c_column_RemoveAll(ssim2mysql::FSsimfile& ssimfile) {
    for (u32 i = 0; i < ssimfile.c_column_n; i++) {
        // mark all elements as not-in-array
        ssimfile.c_column_elems[i]->ssimfile_c_column_in_ary = false;
    }
    ssimfile.c_column_n = 0;
}

// --- ssim2mysql.FSsimfile.c_column_curs.Reset
inline void ssim2mysql::ssimfile_c_column_curs_Reset(ssimfile_c_column_curs &curs, ssim2mysql::FSsimfile &parent) {
    curs.elems = parent.c_column_elems;
    curs.n_elems = parent.c_column_n;
    curs.index = 0;
}

// --- ssim2mysql.FSsimfile.c_column_curs.ValidQ
// cursor points to valid item
inline bool ssim2mysql::ssimfile_c_column_curs_ValidQ(ssimfile_c_column_curs &curs) {
    return curs.index < curs.n_elems;
}

// --- ssim2mysql.FSsimfile.c_column_curs.Next
// proceed to next item
inline void ssim2mysql::ssimfile_c_column_curs_Next(ssimfile_c_column_curs &curs) {
    curs.index++;
}

// --- ssim2mysql.FSsimfile.c_column_curs.Access
// item access
inline ssim2mysql::FColumn& ssim2mysql::ssimfile_c_column_curs_Access(ssimfile_c_column_curs &curs) {
    return *curs.elems[curs.index];
}
inline ssim2mysql::FSubstr::FSubstr() {
    ssim2mysql::FSubstr_Init(*this);
}

inline ssim2mysql::FSubstr::~FSubstr() {
    ssim2mysql::FSubstr_Uninit(*this);
}


// --- ssim2mysql.FSubstr..Init
// Set all fields to initial values.
inline void ssim2mysql::FSubstr_Init(ssim2mysql::FSubstr& substr) {
    substr.p_field = NULL;
}
inline ssim2mysql::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline ssim2mysql::FieldId::FieldId(ssim2mysql_FieldIdEnum arg) { this->value = i32(arg); }
inline ssim2mysql::FieldId::FieldId() {
    ssim2mysql::FieldId_Init(*this);
}


// --- ssim2mysql.FieldId.value.GetEnum
// Get value of field as enum type
inline ssim2mysql_FieldIdEnum ssim2mysql::value_GetEnum(const ssim2mysql::FieldId& parent) {
    return ssim2mysql_FieldIdEnum(parent.value);
}

// --- ssim2mysql.FieldId.value.SetEnum
// Set value of field from enum type.
inline void ssim2mysql::value_SetEnum(ssim2mysql::FieldId& parent, ssim2mysql_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ssim2mysql.FieldId.value.Cast
inline ssim2mysql::FieldId::operator ssim2mysql_FieldIdEnum () const {
    return ssim2mysql_FieldIdEnum((*this).value);
}

// --- ssim2mysql.FieldId..Init
// Set all fields to initial values.
inline void ssim2mysql::FieldId_Init(ssim2mysql::FieldId& parent) {
    parent.value = i32(-1);
}
inline ssim2mysql::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline ssim2mysql::TableId::TableId(ssim2mysql_TableIdEnum arg) { this->value = i32(arg); }
inline ssim2mysql::TableId::TableId() {
    ssim2mysql::TableId_Init(*this);
}


// --- ssim2mysql.TableId.value.GetEnum
// Get value of field as enum type
inline ssim2mysql_TableIdEnum ssim2mysql::value_GetEnum(const ssim2mysql::TableId& parent) {
    return ssim2mysql_TableIdEnum(parent.value);
}

// --- ssim2mysql.TableId.value.SetEnum
// Set value of field from enum type.
inline void ssim2mysql::value_SetEnum(ssim2mysql::TableId& parent, ssim2mysql_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- ssim2mysql.TableId.value.Cast
inline ssim2mysql::TableId::operator ssim2mysql_TableIdEnum () const {
    return ssim2mysql_TableIdEnum((*this).value);
}

// --- ssim2mysql.TableId..Init
// Set all fields to initial values.
inline void ssim2mysql::TableId_Init(ssim2mysql::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FCmd &row) {// cfmt:ssim2mysql.FCmd.String
    ssim2mysql::FCmd_Print(const_cast<ssim2mysql::FCmd&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FColumn &row) {// cfmt:ssim2mysql.FColumn.String
    ssim2mysql::FColumn_Print(const_cast<ssim2mysql::FColumn&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FCtype &row) {// cfmt:ssim2mysql.FCtype.String
    ssim2mysql::FCtype_Print(const_cast<ssim2mysql::FCtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::trace &row) {// cfmt:ssim2mysql.trace.String
    ssim2mysql::trace_Print(const_cast<ssim2mysql::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FField &row) {// cfmt:ssim2mysql.FField.String
    ssim2mysql::FField_Print(const_cast<ssim2mysql::FField&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FInput &row) {// cfmt:ssim2mysql.FInput.String
    ssim2mysql::FInput_Print(const_cast<ssim2mysql::FInput&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FNs &row) {// cfmt:ssim2mysql.FNs.String
    ssim2mysql::FNs_Print(const_cast<ssim2mysql::FNs&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FSqltype &row) {// cfmt:ssim2mysql.FSqltype.String
    ssim2mysql::FSqltype_Print(const_cast<ssim2mysql::FSqltype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FSsimfile &row) {// cfmt:ssim2mysql.FSsimfile.String
    ssim2mysql::FSsimfile_Print(const_cast<ssim2mysql::FSsimfile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FSubstr &row) {// cfmt:ssim2mysql.FSubstr.String
    ssim2mysql::FSubstr_Print(const_cast<ssim2mysql::FSubstr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::FieldId &row) {// cfmt:ssim2mysql.FieldId.String
    ssim2mysql::FieldId_Print(const_cast<ssim2mysql::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const ssim2mysql::TableId &row) {// cfmt:ssim2mysql.TableId.String
    ssim2mysql::TableId_Print(const_cast<ssim2mysql::TableId&>(row), str);
    return str;
}
