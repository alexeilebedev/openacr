//
// include/gen/acr_in_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/dmmeta_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/command_gen.h"
#include "include/gen/dev_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- acr_in_FieldIdEnum

enum acr_in_FieldIdEnum {        // acr_in.FieldId.value
     acr_in_FieldId_value   = 0
};

enum { acr_in_FieldIdEnum_N = 1 };


// --- acr_in_TableIdEnum

enum acr_in_TableIdEnum {                   // acr_in.TableId.value
     acr_in_TableId_dmmeta_Ctype      = 0   // dmmeta.Ctype -> acr_in.FCtype
    ,acr_in_TableId_dmmeta_ctype      = 0   // dmmeta.ctype -> acr_in.FCtype
    ,acr_in_TableId_dmmeta_Dispsig    = 1   // dmmeta.Dispsig -> acr_in.FDispsig
    ,acr_in_TableId_dmmeta_dispsig    = 1   // dmmeta.dispsig -> acr_in.FDispsig
    ,acr_in_TableId_dmmeta_Field      = 2   // dmmeta.Field -> acr_in.FField
    ,acr_in_TableId_dmmeta_field      = 2   // dmmeta.field -> acr_in.FField
    ,acr_in_TableId_dmmeta_Finput     = 3   // dmmeta.Finput -> acr_in.FFinput
    ,acr_in_TableId_dmmeta_finput     = 3   // dmmeta.finput -> acr_in.FFinput
    ,acr_in_TableId_dmmeta_Ns         = 4   // dmmeta.Ns -> acr_in.FNs
    ,acr_in_TableId_dmmeta_ns         = 4   // dmmeta.ns -> acr_in.FNs
    ,acr_in_TableId_dmmeta_Ssimfile   = 5   // dmmeta.Ssimfile -> acr_in.FSsimfile
    ,acr_in_TableId_dmmeta_ssimfile   = 5   // dmmeta.ssimfile -> acr_in.FSsimfile
    ,acr_in_TableId_dmmeta_Substr     = 6   // dmmeta.Substr -> acr_in.FSubstr
    ,acr_in_TableId_dmmeta_substr     = 6   // dmmeta.substr -> acr_in.FSubstr
    ,acr_in_TableId_dev_Targdep       = 7   // dev.Targdep -> acr_in.FTargdep
    ,acr_in_TableId_dev_targdep       = 7   // dev.targdep -> acr_in.FTargdep
    ,acr_in_TableId_dev_Target        = 8   // dev.Target -> acr_in.FTarget
    ,acr_in_TableId_dev_target        = 8   // dev.target -> acr_in.FTarget
};

enum { acr_in_TableIdEnum_N = 18 };

namespace acr_in { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace acr_in { // gen:ns_field
extern const char *acr_in_help;
} // gen:ns_field
// gen:ns_fwddecl2
namespace dmmeta { struct Ctype; }
namespace acr_in { struct FNs; }
namespace dmmeta { struct Dispsig; }
namespace dmmeta { struct Field; }
namespace acr_in { struct FCtype; }
namespace dmmeta { struct Finput; }
namespace acr_in { struct FField; }
namespace dmmeta { struct Ns; }
namespace acr_in { struct FSsimfile; }
namespace dmmeta { struct Ssimfile; }
namespace dmmeta { struct Substr; }
namespace dev { struct Targdep; }
namespace acr_in { struct FTarget; }
namespace dev { struct Target; }
namespace acr_in { struct ctype_c_field_curs; }
namespace acr_in { struct ctype_c_ctype_curs; }
namespace acr_in { struct _db_tuple_curs; }
namespace acr_in { struct _db_finput_curs; }
namespace acr_in { struct _db_field_curs; }
namespace acr_in { struct _db_ctype_curs; }
namespace acr_in { struct _db_ssimfile_curs; }
namespace acr_in { struct _db_ns_curs; }
namespace acr_in { struct _db_zd_todo_curs; }
namespace acr_in { struct _db_zd_ssimfile_curs; }
namespace acr_in { struct _db_substr_curs; }
namespace acr_in { struct _db_dispsig_curs; }
namespace acr_in { struct _db_zd_select_curs; }
namespace acr_in { struct _db_zd_deselect_curs; }
namespace acr_in { struct _db_zd_related_curs; }
namespace acr_in { struct _db_target_curs; }
namespace acr_in { struct _db_targdep_curs; }
namespace acr_in { struct _db_zd_targ_visit_curs; }
namespace acr_in { struct _db_nsssimfile_curs; }
namespace acr_in { struct ns_zd_nsssimfile_ns_curs; }
namespace acr_in { struct ssimfile_zd_nsssimfile_ssimfile_curs; }
namespace acr_in { struct target_c_targdep_curs; }
namespace acr_in { struct target_c_targdep_child_curs; }
namespace acr_in { struct tuple_c_child_curs; }
namespace acr_in { struct tuple_c_parent_curs; }
namespace acr_in { struct trace; }
namespace acr_in { struct FDb; }
namespace acr_in { struct FDispsig; }
namespace acr_in { struct FFinput; }
namespace acr_in { struct FNsssimfile; }
namespace acr_in { struct FSubstr; }
namespace acr_in { struct FTargdep; }
namespace acr_in { struct FTuple; }
namespace acr_in { struct FieldId; }
namespace acr_in { struct TableId; }
namespace acr_in { extern struct acr_in::FDb _db; }
namespace acr_in { // gen:ns_print_struct

// --- acr_in.FCtype
// create: acr_in.FDb.ctype (Lary)
// global access: ind_ctype (Thash)
// global access: zd_todo (Llist)
// global access: zd_related (Llist)
// access: acr_in.FCtype.c_ctype (Ptrary)
// access: acr_in.FField.p_arg (Upptr)
// access: acr_in.FField.p_ctype (Upptr)
// access: acr_in.FSsimfile.p_ctype (Upptr)
// access: acr_in.FTuple.p_ctype (Upptr)
struct FCtype { // acr_in.FCtype
    algo::Smallstr100    ctype;              // Identifier. must be ns.typename
    algo::Comment        comment;            //
    acr_in::FSsimfile*   c_ssimfile;         // optional pointer
    bool                 related;            //   false  Matches 'related' regex
    bool                 select;             //   false
    bool                 visit;              //   false
    acr_in::FField**     c_field_elems;      // array of pointers
    u32                  c_field_n;          // array of pointers
    u32                  c_field_max;        // capacity of allocated array
    acr_in::FCtype**     c_ctype_elems;      // array of pointers
    u32                  c_ctype_n;          // array of pointers
    u32                  c_ctype_max;        // capacity of allocated array
    bool                 parent_of_finput;   //   false  Ctype required by one of the namespaces
    acr_in::FNs*         p_ns;               // reference to parent row
    acr_in::FCtype*      ind_ctype_next;     // hash next
    acr_in::FCtype*      zd_todo_next;       // zslist link; -1 means not-in-list
    acr_in::FCtype*      zd_todo_prev;       // previous element
    acr_in::FCtype*      zd_related_next;    // zslist link; -1 means not-in-list
    acr_in::FCtype*      zd_related_prev;    // previous element
private:
    friend acr_in::FCtype&      ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FCtype*      ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ctype_RemoveLast() __attribute__((nothrow));
    FCtype();
    ~FCtype();
    FCtype(const FCtype&){ /*disallow copy constructor */}
    void operator =(const FCtype&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FCtype.msghdr.CopyOut
void                 ctype_CopyOut(acr_in::FCtype &row, dmmeta::Ctype &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FCtype.msghdr.CopyIn
void                 ctype_CopyIn(acr_in::FCtype &row, dmmeta::Ctype &in) __attribute__((nothrow));

// func:acr_in.FCtype.ns.Get
algo::Smallstr16     ns_Get(acr_in::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FCtype.name.Get
algo::Smallstr100    name_Get(acr_in::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:acr_in.FCtype.c_ssimfile.InsertMaybe
bool                 c_ssimfile_InsertMaybe(acr_in::FCtype& ctype, acr_in::FSsimfile& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FCtype.c_ssimfile.Remove
void                 c_ssimfile_Remove(acr_in::FCtype& ctype, acr_in::FSsimfile& row) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FCtype.c_field.EmptyQ
bool                 c_field_EmptyQ(acr_in::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FCtype.c_field.Find
acr_in::FField*      c_field_Find(acr_in::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FCtype.c_field.Getary
algo::aryptr<acr_in::FField*> c_field_Getary(acr_in::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FCtype.c_field.Insert
void                 c_field_Insert(acr_in::FCtype& ctype, acr_in::FField& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:acr_in.FCtype.c_field.InsertMaybe
bool                 c_field_InsertMaybe(acr_in::FCtype& ctype, acr_in::FField& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FCtype.c_field.N
i32                  c_field_N(const acr_in::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FCtype.c_field.Remove
void                 c_field_Remove(acr_in::FCtype& ctype, acr_in::FField& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FCtype.c_field.RemoveAll
void                 c_field_RemoveAll(acr_in::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FCtype.c_field.Reserve
void                 c_field_Reserve(acr_in::FCtype& ctype, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FCtype.c_field.qFind
acr_in::FField&      c_field_qFind(acr_in::FCtype& ctype, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:acr_in.FCtype.c_field.InAryQ
bool                 ctype_c_field_InAryQ(acr_in::FField& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FCtype.c_field.qLast
acr_in::FField&      c_field_qLast(acr_in::FCtype& ctype) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FCtype.c_ctype.EmptyQ
bool                 c_ctype_EmptyQ(acr_in::FCtype& ctype) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FCtype.c_ctype.Find
acr_in::FCtype*      c_ctype_Find(acr_in::FCtype& ctype, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FCtype.c_ctype.Getary
algo::aryptr<acr_in::FCtype*> c_ctype_Getary(acr_in::FCtype& ctype) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FCtype.c_ctype.Insert
void                 c_ctype_Insert(acr_in::FCtype& ctype, acr_in::FCtype& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
// func:acr_in.FCtype.c_ctype.ScanInsertMaybe
bool                 c_ctype_ScanInsertMaybe(acr_in::FCtype& ctype, acr_in::FCtype& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FCtype.c_ctype.N
i32                  c_ctype_N(const acr_in::FCtype& ctype) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FCtype.c_ctype.Remove
void                 c_ctype_Remove(acr_in::FCtype& ctype, acr_in::FCtype& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FCtype.c_ctype.RemoveAll
void                 c_ctype_RemoveAll(acr_in::FCtype& ctype) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FCtype.c_ctype.Reserve
void                 c_ctype_Reserve(acr_in::FCtype& ctype, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FCtype.c_ctype.qFind
acr_in::FCtype&      c_ctype_qFind(acr_in::FCtype& ctype, u32 idx) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FCtype.c_ctype.qLast
acr_in::FCtype&      c_ctype_qLast(acr_in::FCtype& ctype) __attribute__((nothrow));

// func:acr_in.FCtype.c_field_curs.Reset
void                 ctype_c_field_curs_Reset(ctype_c_field_curs &curs, acr_in::FCtype &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FCtype.c_field_curs.ValidQ
bool                 ctype_c_field_curs_ValidQ(ctype_c_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FCtype.c_field_curs.Next
void                 ctype_c_field_curs_Next(ctype_c_field_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FCtype.c_field_curs.Access
acr_in::FField&      ctype_c_field_curs_Access(ctype_c_field_curs &curs) __attribute__((nothrow));
// func:acr_in.FCtype.c_ctype_curs.Reset
void                 ctype_c_ctype_curs_Reset(ctype_c_ctype_curs &curs, acr_in::FCtype &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FCtype.c_ctype_curs.ValidQ
bool                 ctype_c_ctype_curs_ValidQ(ctype_c_ctype_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FCtype.c_ctype_curs.Next
void                 ctype_c_ctype_curs_Next(ctype_c_ctype_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FCtype.c_ctype_curs.Access
acr_in::FCtype&      ctype_c_ctype_curs_Access(ctype_c_ctype_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:acr_in.FCtype..Init
void                 FCtype_Init(acr_in::FCtype& ctype);
// func:acr_in.FCtype..Uninit
void                 FCtype_Uninit(acr_in::FCtype& ctype) __attribute__((nothrow));

// --- acr_in.trace
#pragma pack(push,1)
struct trace { // acr_in.trace
    trace();
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:acr_in.trace.String  printfmt:Tuple
// func:acr_in.trace..Print
void                 trace_Print(acr_in::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- acr_in.FDb
// create: acr_in.FDb._db (Global)
struct FDb { // acr_in.FDb: In-memory database for acr_in
    acr_in::FTuple*         tuple_lary[32];                 // level array
    i32                     tuple_n;                        // number of elements in array
    acr_in::FTuple**        ind_tuple_buckets_elems;        // pointer to bucket array
    i32                     ind_tuple_buckets_n;            // number of elements in bucket array
    i32                     ind_tuple_n;                    // number of elements in the hash table
    command::acr_in         cmdline;                        //
    acr_in::FFinput*        finput_lary[32];                // level array
    i32                     finput_n;                       // number of elements in array
    acr_in::FField*         field_lary[32];                 // level array
    i32                     field_n;                        // number of elements in array
    acr_in::FField**        ind_field_buckets_elems;        // pointer to bucket array
    i32                     ind_field_buckets_n;            // number of elements in bucket array
    i32                     ind_field_n;                    // number of elements in the hash table
    acr_in::FCtype*         ctype_lary[32];                 // level array
    i32                     ctype_n;                        // number of elements in array
    acr_in::FCtype**        ind_ctype_buckets_elems;        // pointer to bucket array
    i32                     ind_ctype_buckets_n;            // number of elements in bucket array
    i32                     ind_ctype_n;                    // number of elements in the hash table
    acr_in::FSsimfile*      ssimfile_lary[32];              // level array
    i32                     ssimfile_n;                     // number of elements in array
    acr_in::FNs*            ns_lary[32];                    // level array
    i32                     ns_n;                           // number of elements in array
    acr_in::FNs**           ind_ns_buckets_elems;           // pointer to bucket array
    i32                     ind_ns_buckets_n;               // number of elements in bucket array
    i32                     ind_ns_n;                       // number of elements in the hash table
    acr_in::FCtype*         zd_todo_head;                   // zero-terminated doubly linked list
    i32                     zd_todo_n;                      // zero-terminated doubly linked list
    acr_in::FCtype*         zd_todo_tail;                   // pointer to last element
    acr_in::FSsimfile*      zd_ssimfile_head;               // zero-terminated doubly linked list
    i32                     zd_ssimfile_n;                  // zero-terminated doubly linked list
    acr_in::FSsimfile*      zd_ssimfile_tail;               // pointer to last element
    acr_in::FSubstr*        substr_lary[32];                // level array
    i32                     substr_n;                       // number of elements in array
    acr_in::FDispsig*       dispsig_lary[32];               // level array
    i32                     dispsig_n;                      // number of elements in array
    acr_in::FDispsig**      ind_dispsig_buckets_elems;      // pointer to bucket array
    i32                     ind_dispsig_buckets_n;          // number of elements in bucket array
    i32                     ind_dispsig_n;                  // number of elements in the hash table
    acr_in::FTuple*         zd_select_head;                 // zero-terminated doubly linked list
    i32                     zd_select_n;                    // zero-terminated doubly linked list
    acr_in::FTuple*         zd_select_tail;                 // pointer to last element
    acr_in::FTuple*         zd_deselect_head;               // zero-terminated doubly linked list
    i32                     zd_deselect_n;                  // zero-terminated doubly linked list
    acr_in::FTuple*         zd_deselect_tail;               // pointer to last element
    acr_in::FCtype*         zd_related_head;                // zero-terminated doubly linked list
    i32                     zd_related_n;                   // zero-terminated doubly linked list
    acr_in::FCtype*         zd_related_tail;                // pointer to last element
    acr_in::FFinput**       ind_finput_buckets_elems;       // pointer to bucket array
    i32                     ind_finput_buckets_n;           // number of elements in bucket array
    i32                     ind_finput_n;                   // number of elements in the hash table
    acr_in::FTarget*        target_lary[32];                // level array
    i32                     target_n;                       // number of elements in array
    acr_in::FTarget**       ind_target_buckets_elems;       // pointer to bucket array
    i32                     ind_target_buckets_n;           // number of elements in bucket array
    i32                     ind_target_n;                   // number of elements in the hash table
    acr_in::FTargdep*       targdep_lary[32];               // level array
    i32                     targdep_n;                      // number of elements in array
    acr_in::FTarget*        zd_targ_visit_head;             // zero-terminated doubly linked list
    i32                     zd_targ_visit_n;                // zero-terminated doubly linked list
    acr_in::FTarget*        zd_targ_visit_tail;             // pointer to last element
    acr_in::FNsssimfile*    nsssimfile_lary[32];            // level array
    i32                     nsssimfile_n;                   // number of elements in array
    acr_in::FNsssimfile**   ind_nsssimfile_buckets_elems;   // pointer to bucket array
    i32                     ind_nsssimfile_buckets_n;       // number of elements in bucket array
    i32                     ind_nsssimfile_n;               // number of elements in the hash table
    acr_in::FSsimfile**     ind_ssimfile_buckets_elems;     // pointer to bucket array
    i32                     ind_ssimfile_buckets_n;         // number of elements in bucket array
    i32                     ind_ssimfile_n;                 // number of elements in the hash table
    acr_in::trace           trace;                          //
};

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.tuple.Alloc
acr_in::FTuple&      tuple_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.tuple.AllocMaybe
acr_in::FTuple*      tuple_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.tuple.AllocMem
void*                tuple_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.tuple.EmptyQ
bool                 tuple_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.tuple.Find
acr_in::FTuple*      tuple_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.tuple.Last
acr_in::FTuple*      tuple_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.tuple.N
i32                  tuple_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:acr_in.FDb.tuple.RemoveAll
void                 tuple_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.tuple.RemoveLast
void                 tuple_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.tuple.qFind
acr_in::FTuple&      tuple_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.tuple.XrefMaybe
bool                 tuple_XrefMaybe(acr_in::FTuple &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_tuple.EmptyQ
bool                 ind_tuple_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_tuple.Find
acr_in::FTuple*      ind_tuple_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_tuple.FindX
acr_in::FTuple&      ind_tuple_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:acr_in.FDb.ind_tuple.GetOrCreate
acr_in::FTuple&      ind_tuple_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:acr_in.FDb.ind_tuple.N
i32                  ind_tuple_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_tuple.InsertMaybe
bool                 ind_tuple_InsertMaybe(acr_in::FTuple& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_tuple.Remove
void                 ind_tuple_Remove(acr_in::FTuple& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_tuple.Reserve
void                 ind_tuple_Reserve(int n) __attribute__((nothrow));

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     acr_in.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:acr_in.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:acr_in.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:acr_in.FDb._db.Step
void                 Step();
// Main function
// func:acr_in.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// func:acr_in.FDb._db.StaticCheck
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:acr_in.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:acr_in.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:acr_in.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:acr_in.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:acr_in.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:acr_in.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.finput.Alloc
acr_in::FFinput&     finput_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.finput.AllocMaybe
acr_in::FFinput*     finput_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.finput.InsertMaybe
acr_in::FFinput*     finput_InsertMaybe(const dmmeta::Finput &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.finput.AllocMem
void*                finput_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.finput.EmptyQ
bool                 finput_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.finput.Find
acr_in::FFinput*     finput_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.finput.Last
acr_in::FFinput*     finput_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.finput.N
i32                  finput_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.finput.RemoveLast
void                 finput_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.finput.qFind
acr_in::FFinput&     finput_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.finput.XrefMaybe
bool                 finput_XrefMaybe(acr_in::FFinput &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.field.Alloc
acr_in::FField&      field_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.field.AllocMaybe
acr_in::FField*      field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.field.InsertMaybe
acr_in::FField*      field_InsertMaybe(const dmmeta::Field &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.field.AllocMem
void*                field_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.field.EmptyQ
bool                 field_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.field.Find
acr_in::FField*      field_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.field.Last
acr_in::FField*      field_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.field.N
i32                  field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.field.RemoveLast
void                 field_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.field.qFind
acr_in::FField&      field_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.field.XrefMaybe
bool                 field_XrefMaybe(acr_in::FField &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_field.EmptyQ
bool                 ind_field_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_field.Find
acr_in::FField*      ind_field_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_field.FindX
acr_in::FField&      ind_field_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_field.N
i32                  ind_field_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_field.InsertMaybe
bool                 ind_field_InsertMaybe(acr_in::FField& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_field.Remove
void                 ind_field_Remove(acr_in::FField& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_field.Reserve
void                 ind_field_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.ctype.Alloc
acr_in::FCtype&      ctype_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.ctype.AllocMaybe
acr_in::FCtype*      ctype_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.ctype.InsertMaybe
acr_in::FCtype*      ctype_InsertMaybe(const dmmeta::Ctype &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.ctype.AllocMem
void*                ctype_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.ctype.EmptyQ
bool                 ctype_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.ctype.Find
acr_in::FCtype*      ctype_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.ctype.Last
acr_in::FCtype*      ctype_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.ctype.N
i32                  ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.ctype.RemoveLast
void                 ctype_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.ctype.qFind
acr_in::FCtype&      ctype_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.ctype.XrefMaybe
bool                 ctype_XrefMaybe(acr_in::FCtype &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_ctype.EmptyQ
bool                 ind_ctype_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_ctype.Find
acr_in::FCtype*      ind_ctype_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_ctype.FindX
acr_in::FCtype&      ind_ctype_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_ctype.N
i32                  ind_ctype_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_ctype.InsertMaybe
bool                 ind_ctype_InsertMaybe(acr_in::FCtype& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_ctype.Remove
void                 ind_ctype_Remove(acr_in::FCtype& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_ctype.Reserve
void                 ind_ctype_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.ssimfile.Alloc
acr_in::FSsimfile&   ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.ssimfile.AllocMaybe
acr_in::FSsimfile*   ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.ssimfile.InsertMaybe
acr_in::FSsimfile*   ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.ssimfile.AllocMem
void*                ssimfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.ssimfile.EmptyQ
bool                 ssimfile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.ssimfile.Find
acr_in::FSsimfile*   ssimfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.ssimfile.Last
acr_in::FSsimfile*   ssimfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.ssimfile.N
i32                  ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.ssimfile.RemoveLast
void                 ssimfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.ssimfile.qFind
acr_in::FSsimfile&   ssimfile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.ssimfile.XrefMaybe
bool                 ssimfile_XrefMaybe(acr_in::FSsimfile &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.ns.Alloc
acr_in::FNs&         ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.ns.AllocMaybe
acr_in::FNs*         ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.ns.InsertMaybe
acr_in::FNs*         ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.ns.AllocMem
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.ns.EmptyQ
bool                 ns_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.ns.Find
acr_in::FNs*         ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.ns.Last
acr_in::FNs*         ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.ns.N
i32                  ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.ns.RemoveLast
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.ns.qFind
acr_in::FNs&         ns_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.ns.XrefMaybe
bool                 ns_XrefMaybe(acr_in::FNs &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_ns.EmptyQ
bool                 ind_ns_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_ns.Find
acr_in::FNs*         ind_ns_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_ns.FindX
acr_in::FNs&         ind_ns_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:acr_in.FDb.ind_ns.GetOrCreate
acr_in::FNs&         ind_ns_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:acr_in.FDb.ind_ns.N
i32                  ind_ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_ns.InsertMaybe
bool                 ind_ns_InsertMaybe(acr_in::FNs& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_ns.Remove
void                 ind_ns_Remove(acr_in::FNs& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_ns.Reserve
void                 ind_ns_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FDb.zd_todo.EmptyQ
bool                 zd_todo_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_todo.First
acr_in::FCtype*      zd_todo_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_todo.InLlistQ
bool                 zd_todo_InLlistQ(acr_in::FCtype& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_todo.Insert
void                 zd_todo_Insert(acr_in::FCtype& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_todo.Last
acr_in::FCtype*      zd_todo_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_todo.N
i32                  zd_todo_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_todo.Next
acr_in::FCtype*      zd_todo_Next(acr_in::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_todo.Prev
acr_in::FCtype*      zd_todo_Prev(acr_in::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_todo.Remove
void                 zd_todo_Remove(acr_in::FCtype& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_todo.RemoveAll
void                 zd_todo_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_todo.RemoveFirst
acr_in::FCtype*      zd_todo_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_todo.qLast
acr_in::FCtype&      zd_todo_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:acr_in.FDb.zd_ssimfile.EmptyQ
bool                 zd_ssimfile_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_ssimfile.First
acr_in::FSsimfile*   zd_ssimfile_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_ssimfile.InLlistQ
bool                 zd_ssimfile_InLlistQ(acr_in::FSsimfile& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_ssimfile.Insert
void                 zd_ssimfile_Insert(acr_in::FSsimfile& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_ssimfile.Last
acr_in::FSsimfile*   zd_ssimfile_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_ssimfile.N
i32                  zd_ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_ssimfile.Next
acr_in::FSsimfile*   zd_ssimfile_Next(acr_in::FSsimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_ssimfile.Prev
acr_in::FSsimfile*   zd_ssimfile_Prev(acr_in::FSsimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_ssimfile.Remove
void                 zd_ssimfile_Remove(acr_in::FSsimfile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_ssimfile.RemoveAll
void                 zd_ssimfile_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_ssimfile.RemoveFirst
acr_in::FSsimfile*   zd_ssimfile_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_ssimfile.qLast
acr_in::FSsimfile&   zd_ssimfile_qLast() __attribute__((__warn_unused_result__, nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.substr.Alloc
acr_in::FSubstr&     substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.substr.AllocMaybe
acr_in::FSubstr*     substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.substr.InsertMaybe
acr_in::FSubstr*     substr_InsertMaybe(const dmmeta::Substr &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.substr.AllocMem
void*                substr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.substr.EmptyQ
bool                 substr_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.substr.Find
acr_in::FSubstr*     substr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.substr.Last
acr_in::FSubstr*     substr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.substr.N
i32                  substr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.substr.RemoveLast
void                 substr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.substr.qFind
acr_in::FSubstr&     substr_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.substr.XrefMaybe
bool                 substr_XrefMaybe(acr_in::FSubstr &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.dispsig.Alloc
acr_in::FDispsig&    dispsig_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.dispsig.AllocMaybe
acr_in::FDispsig*    dispsig_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.dispsig.InsertMaybe
acr_in::FDispsig*    dispsig_InsertMaybe(const dmmeta::Dispsig &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.dispsig.AllocMem
void*                dispsig_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.dispsig.EmptyQ
bool                 dispsig_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.dispsig.Find
acr_in::FDispsig*    dispsig_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.dispsig.Last
acr_in::FDispsig*    dispsig_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.dispsig.N
i32                  dispsig_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.dispsig.RemoveLast
void                 dispsig_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.dispsig.qFind
acr_in::FDispsig&    dispsig_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.dispsig.XrefMaybe
bool                 dispsig_XrefMaybe(acr_in::FDispsig &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_dispsig.EmptyQ
bool                 ind_dispsig_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_dispsig.Find
acr_in::FDispsig*    ind_dispsig_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_dispsig.FindX
acr_in::FDispsig&    ind_dispsig_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_dispsig.N
i32                  ind_dispsig_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_dispsig.InsertMaybe
bool                 ind_dispsig_InsertMaybe(acr_in::FDispsig& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_dispsig.Remove
void                 ind_dispsig_Remove(acr_in::FDispsig& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_dispsig.Reserve
void                 ind_dispsig_Reserve(int n) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FDb.zd_select.EmptyQ
bool                 zd_select_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_select.First
acr_in::FTuple*      zd_select_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_select.InLlistQ
bool                 zd_select_InLlistQ(acr_in::FTuple& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_select.Insert
void                 zd_select_Insert(acr_in::FTuple& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_select.Last
acr_in::FTuple*      zd_select_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_select.N
i32                  zd_select_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_select.Next
acr_in::FTuple*      zd_select_Next(acr_in::FTuple &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_select.Prev
acr_in::FTuple*      zd_select_Prev(acr_in::FTuple &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_select.Remove
void                 zd_select_Remove(acr_in::FTuple& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_select.RemoveAll
void                 zd_select_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_select.RemoveFirst
acr_in::FTuple*      zd_select_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_select.qLast
acr_in::FTuple&      zd_select_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:acr_in.FDb.zd_deselect.EmptyQ
bool                 zd_deselect_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_deselect.First
acr_in::FTuple*      zd_deselect_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_deselect.InLlistQ
bool                 zd_deselect_InLlistQ(acr_in::FTuple& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_deselect.Insert
void                 zd_deselect_Insert(acr_in::FTuple& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_deselect.Last
acr_in::FTuple*      zd_deselect_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_deselect.N
i32                  zd_deselect_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_deselect.Next
acr_in::FTuple*      zd_deselect_Next(acr_in::FTuple &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_deselect.Prev
acr_in::FTuple*      zd_deselect_Prev(acr_in::FTuple &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_deselect.Remove
void                 zd_deselect_Remove(acr_in::FTuple& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_deselect.RemoveAll
void                 zd_deselect_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_deselect.RemoveFirst
acr_in::FTuple*      zd_deselect_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_deselect.qLast
acr_in::FTuple&      zd_deselect_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:acr_in.FDb.zd_related.EmptyQ
bool                 zd_related_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_related.First
acr_in::FCtype*      zd_related_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_related.InLlistQ
bool                 zd_related_InLlistQ(acr_in::FCtype& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_related.Insert
void                 zd_related_Insert(acr_in::FCtype& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_related.Last
acr_in::FCtype*      zd_related_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_related.N
i32                  zd_related_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_related.Next
acr_in::FCtype*      zd_related_Next(acr_in::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_related.Prev
acr_in::FCtype*      zd_related_Prev(acr_in::FCtype &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_related.Remove
void                 zd_related_Remove(acr_in::FCtype& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_related.RemoveAll
void                 zd_related_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_related.RemoveFirst
acr_in::FCtype*      zd_related_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_related.qLast
acr_in::FCtype&      zd_related_qLast() __attribute__((__warn_unused_result__, nothrow));

// Return true if hash is empty
// func:acr_in.FDb.ind_finput.EmptyQ
bool                 ind_finput_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_finput.Find
acr_in::FFinput*     ind_finput_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_finput.FindX
acr_in::FFinput&     ind_finput_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_finput.N
i32                  ind_finput_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_finput.InsertMaybe
bool                 ind_finput_InsertMaybe(acr_in::FFinput& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_finput.Remove
void                 ind_finput_Remove(acr_in::FFinput& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_finput.Reserve
void                 ind_finput_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.target.Alloc
acr_in::FTarget&     target_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.target.AllocMaybe
acr_in::FTarget*     target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.target.InsertMaybe
acr_in::FTarget*     target_InsertMaybe(const dev::Target &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.target.AllocMem
void*                target_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.target.EmptyQ
bool                 target_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.target.Find
acr_in::FTarget*     target_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.target.Last
acr_in::FTarget*     target_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.target.N
i32                  target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.target.RemoveLast
void                 target_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.target.qFind
acr_in::FTarget&     target_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.target.XrefMaybe
bool                 target_XrefMaybe(acr_in::FTarget &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_target.EmptyQ
bool                 ind_target_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_target.Find
acr_in::FTarget*     ind_target_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_target.FindX
acr_in::FTarget&     ind_target_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_target.N
i32                  ind_target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_target.InsertMaybe
bool                 ind_target_InsertMaybe(acr_in::FTarget& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_target.Remove
void                 ind_target_Remove(acr_in::FTarget& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_target.Reserve
void                 ind_target_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.targdep.Alloc
acr_in::FTargdep&    targdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.targdep.AllocMaybe
acr_in::FTargdep*    targdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:acr_in.FDb.targdep.InsertMaybe
acr_in::FTargdep*    targdep_InsertMaybe(const dev::Targdep &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.targdep.AllocMem
void*                targdep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.targdep.EmptyQ
bool                 targdep_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.targdep.Find
acr_in::FTargdep*    targdep_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.targdep.Last
acr_in::FTargdep*    targdep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.targdep.N
i32                  targdep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.targdep.RemoveLast
void                 targdep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.targdep.qFind
acr_in::FTargdep&    targdep_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.targdep.XrefMaybe
bool                 targdep_XrefMaybe(acr_in::FTargdep &row);

// Return true if index is empty
// func:acr_in.FDb.zd_targ_visit.EmptyQ
bool                 zd_targ_visit_EmptyQ() __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FDb.zd_targ_visit.First
acr_in::FTarget*     zd_targ_visit_First() __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FDb.zd_targ_visit.InLlistQ
bool                 zd_targ_visit_InLlistQ(acr_in::FTarget& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FDb.zd_targ_visit.Insert
void                 zd_targ_visit_Insert(acr_in::FTarget& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FDb.zd_targ_visit.Last
acr_in::FTarget*     zd_targ_visit_Last() __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FDb.zd_targ_visit.N
i32                  zd_targ_visit_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FDb.zd_targ_visit.Next
acr_in::FTarget*     zd_targ_visit_Next(acr_in::FTarget &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FDb.zd_targ_visit.Prev
acr_in::FTarget*     zd_targ_visit_Prev(acr_in::FTarget &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FDb.zd_targ_visit.Remove
void                 zd_targ_visit_Remove(acr_in::FTarget& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FDb.zd_targ_visit.RemoveAll
void                 zd_targ_visit_RemoveAll() __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FDb.zd_targ_visit.RemoveFirst
acr_in::FTarget*     zd_targ_visit_RemoveFirst() __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FDb.zd_targ_visit.qLast
acr_in::FTarget&     zd_targ_visit_qLast() __attribute__((__warn_unused_result__, nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:acr_in.FDb.nsssimfile.Alloc
acr_in::FNsssimfile& nsssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:acr_in.FDb.nsssimfile.AllocMaybe
acr_in::FNsssimfile* nsssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:acr_in.FDb.nsssimfile.AllocMem
void*                nsssimfile_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:acr_in.FDb.nsssimfile.EmptyQ
bool                 nsssimfile_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FDb.nsssimfile.Find
acr_in::FNsssimfile* nsssimfile_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:acr_in.FDb.nsssimfile.Last
acr_in::FNsssimfile* nsssimfile_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:acr_in.FDb.nsssimfile.N
i32                  nsssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:acr_in.FDb.nsssimfile.RemoveAll
void                 nsssimfile_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:acr_in.FDb.nsssimfile.RemoveLast
void                 nsssimfile_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:acr_in.FDb.nsssimfile.qFind
acr_in::FNsssimfile& nsssimfile_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:acr_in.FDb.nsssimfile.XrefMaybe
bool                 nsssimfile_XrefMaybe(acr_in::FNsssimfile &row);

// Return true if hash is empty
// func:acr_in.FDb.ind_nsssimfile.EmptyQ
bool                 ind_nsssimfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_nsssimfile.Find
acr_in::FNsssimfile* ind_nsssimfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_nsssimfile.FindX
acr_in::FNsssimfile& ind_nsssimfile_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_nsssimfile.N
i32                  ind_nsssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_nsssimfile.InsertMaybe
bool                 ind_nsssimfile_InsertMaybe(acr_in::FNsssimfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_nsssimfile.Remove
void                 ind_nsssimfile_Remove(acr_in::FNsssimfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_nsssimfile.Reserve
void                 ind_nsssimfile_Reserve(int n) __attribute__((nothrow));

// Return true if hash is empty
// func:acr_in.FDb.ind_ssimfile.EmptyQ
bool                 ind_ssimfile_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:acr_in.FDb.ind_ssimfile.Find
acr_in::FSsimfile*   ind_ssimfile_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:acr_in.FDb.ind_ssimfile.FindX
acr_in::FSsimfile&   ind_ssimfile_FindX(const algo::strptr& key);
// Return number of items in the hash
// func:acr_in.FDb.ind_ssimfile.N
i32                  ind_ssimfile_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:acr_in.FDb.ind_ssimfile.InsertMaybe
bool                 ind_ssimfile_InsertMaybe(acr_in::FSsimfile& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:acr_in.FDb.ind_ssimfile.Remove
void                 ind_ssimfile_Remove(acr_in::FSsimfile& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:acr_in.FDb.ind_ssimfile.Reserve
void                 ind_ssimfile_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
// func:acr_in.FDb.tuple_curs.Reset
void                 _db_tuple_curs_Reset(_db_tuple_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.tuple_curs.ValidQ
bool                 _db_tuple_curs_ValidQ(_db_tuple_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.tuple_curs.Next
void                 _db_tuple_curs_Next(_db_tuple_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.tuple_curs.Access
acr_in::FTuple&      _db_tuple_curs_Access(_db_tuple_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.finput_curs.Reset
void                 _db_finput_curs_Reset(_db_finput_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.finput_curs.ValidQ
bool                 _db_finput_curs_ValidQ(_db_finput_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.finput_curs.Next
void                 _db_finput_curs_Next(_db_finput_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.finput_curs.Access
acr_in::FFinput&     _db_finput_curs_Access(_db_finput_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.field_curs.Reset
void                 _db_field_curs_Reset(_db_field_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.field_curs.ValidQ
bool                 _db_field_curs_ValidQ(_db_field_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.field_curs.Next
void                 _db_field_curs_Next(_db_field_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.field_curs.Access
acr_in::FField&      _db_field_curs_Access(_db_field_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ctype_curs.Reset
void                 _db_ctype_curs_Reset(_db_ctype_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ctype_curs.ValidQ
bool                 _db_ctype_curs_ValidQ(_db_ctype_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.ctype_curs.Next
void                 _db_ctype_curs_Next(_db_ctype_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.ctype_curs.Access
acr_in::FCtype&      _db_ctype_curs_Access(_db_ctype_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ssimfile_curs.Reset
void                 _db_ssimfile_curs_Reset(_db_ssimfile_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ssimfile_curs.ValidQ
bool                 _db_ssimfile_curs_ValidQ(_db_ssimfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.ssimfile_curs.Next
void                 _db_ssimfile_curs_Next(_db_ssimfile_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.ssimfile_curs.Access
acr_in::FSsimfile&   _db_ssimfile_curs_Access(_db_ssimfile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ns_curs.Reset
void                 _db_ns_curs_Reset(_db_ns_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.ns_curs.ValidQ
bool                 _db_ns_curs_ValidQ(_db_ns_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.ns_curs.Next
void                 _db_ns_curs_Next(_db_ns_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.ns_curs.Access
acr_in::FNs&         _db_ns_curs_Access(_db_ns_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_todo_curs.Reset
void                 _db_zd_todo_curs_Reset(_db_zd_todo_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_todo_curs.ValidQ
bool                 _db_zd_todo_curs_ValidQ(_db_zd_todo_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_todo_curs.Next
void                 _db_zd_todo_curs_Next(_db_zd_todo_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_todo_curs.Access
acr_in::FCtype&      _db_zd_todo_curs_Access(_db_zd_todo_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_ssimfile_curs.Reset
void                 _db_zd_ssimfile_curs_Reset(_db_zd_ssimfile_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_ssimfile_curs.ValidQ
bool                 _db_zd_ssimfile_curs_ValidQ(_db_zd_ssimfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_ssimfile_curs.Next
void                 _db_zd_ssimfile_curs_Next(_db_zd_ssimfile_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_ssimfile_curs.Access
acr_in::FSsimfile&   _db_zd_ssimfile_curs_Access(_db_zd_ssimfile_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.substr_curs.Reset
void                 _db_substr_curs_Reset(_db_substr_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.substr_curs.ValidQ
bool                 _db_substr_curs_ValidQ(_db_substr_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.substr_curs.Next
void                 _db_substr_curs_Next(_db_substr_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.substr_curs.Access
acr_in::FSubstr&     _db_substr_curs_Access(_db_substr_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.dispsig_curs.Reset
void                 _db_dispsig_curs_Reset(_db_dispsig_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.dispsig_curs.ValidQ
bool                 _db_dispsig_curs_ValidQ(_db_dispsig_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.dispsig_curs.Next
void                 _db_dispsig_curs_Next(_db_dispsig_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.dispsig_curs.Access
acr_in::FDispsig&    _db_dispsig_curs_Access(_db_dispsig_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_select_curs.Reset
void                 _db_zd_select_curs_Reset(_db_zd_select_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_select_curs.ValidQ
bool                 _db_zd_select_curs_ValidQ(_db_zd_select_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_select_curs.Next
void                 _db_zd_select_curs_Next(_db_zd_select_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_select_curs.Access
acr_in::FTuple&      _db_zd_select_curs_Access(_db_zd_select_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_deselect_curs.Reset
void                 _db_zd_deselect_curs_Reset(_db_zd_deselect_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_deselect_curs.ValidQ
bool                 _db_zd_deselect_curs_ValidQ(_db_zd_deselect_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_deselect_curs.Next
void                 _db_zd_deselect_curs_Next(_db_zd_deselect_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_deselect_curs.Access
acr_in::FTuple&      _db_zd_deselect_curs_Access(_db_zd_deselect_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_related_curs.Reset
void                 _db_zd_related_curs_Reset(_db_zd_related_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_related_curs.ValidQ
bool                 _db_zd_related_curs_ValidQ(_db_zd_related_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_related_curs.Next
void                 _db_zd_related_curs_Next(_db_zd_related_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_related_curs.Access
acr_in::FCtype&      _db_zd_related_curs_Access(_db_zd_related_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.target_curs.Reset
void                 _db_target_curs_Reset(_db_target_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.target_curs.ValidQ
bool                 _db_target_curs_ValidQ(_db_target_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.target_curs.Next
void                 _db_target_curs_Next(_db_target_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.target_curs.Access
acr_in::FTarget&     _db_target_curs_Access(_db_target_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.targdep_curs.Reset
void                 _db_targdep_curs_Reset(_db_targdep_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.targdep_curs.ValidQ
bool                 _db_targdep_curs_ValidQ(_db_targdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.targdep_curs.Next
void                 _db_targdep_curs_Next(_db_targdep_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.targdep_curs.Access
acr_in::FTargdep&    _db_targdep_curs_Access(_db_targdep_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_targ_visit_curs.Reset
void                 _db_zd_targ_visit_curs_Reset(_db_zd_targ_visit_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.zd_targ_visit_curs.ValidQ
bool                 _db_zd_targ_visit_curs_ValidQ(_db_zd_targ_visit_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.zd_targ_visit_curs.Next
void                 _db_zd_targ_visit_curs_Next(_db_zd_targ_visit_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.zd_targ_visit_curs.Access
acr_in::FTarget&     _db_zd_targ_visit_curs_Access(_db_zd_targ_visit_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.nsssimfile_curs.Reset
void                 _db_nsssimfile_curs_Reset(_db_nsssimfile_curs &curs, acr_in::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FDb.nsssimfile_curs.ValidQ
bool                 _db_nsssimfile_curs_ValidQ(_db_nsssimfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FDb.nsssimfile_curs.Next
void                 _db_nsssimfile_curs_Next(_db_nsssimfile_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FDb.nsssimfile_curs.Access
acr_in::FNsssimfile& _db_nsssimfile_curs_Access(_db_nsssimfile_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:acr_in.FDb..Init
void                 FDb_Init();
// func:acr_in.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- acr_in.FDispsig
// create: acr_in.FDb.dispsig (Lary)
// global access: ind_dispsig (Thash)
struct FDispsig { // acr_in.FDispsig
    acr_in::FDispsig*   ind_dispsig_next;   // hash next
    algo::Smallstr50    dispsig;            //
    algo::Sha1sig       signature;          //
    acr_in::FNs*        p_ns;               // reference to parent row
private:
    friend acr_in::FDispsig&    dispsig_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FDispsig*    dispsig_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 dispsig_RemoveLast() __attribute__((nothrow));
    FDispsig();
    ~FDispsig();
    FDispsig(const FDispsig&){ /*disallow copy constructor */}
    void operator =(const FDispsig&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FDispsig.msghdr.CopyOut
void                 dispsig_CopyOut(acr_in::FDispsig &row, dmmeta::Dispsig &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FDispsig.msghdr.CopyIn
void                 dispsig_CopyIn(acr_in::FDispsig &row, dmmeta::Dispsig &in) __attribute__((nothrow));

// func:acr_in.FDispsig.ns.Get
algo::Smallstr16     ns_Get(acr_in::FDispsig& dispsig) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FDispsig.name.Get
algo::Smallstr50     name_Get(acr_in::FDispsig& dispsig) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FDispsig..Init
void                 FDispsig_Init(acr_in::FDispsig& dispsig);
// func:acr_in.FDispsig..Uninit
void                 FDispsig_Uninit(acr_in::FDispsig& dispsig) __attribute__((nothrow));

// --- acr_in.FField
// create: acr_in.FDb.field (Lary)
// global access: ind_field (Thash)
// access: acr_in.FCtype.c_field (Ptrary)
// access: acr_in.FFinput.p_field (Upptr)
struct FField { // acr_in.FField
    acr_in::FField*     ind_field_next;         // hash next
    algo::Smallstr100   field;                  // Primary key, as ctype.name
    algo::Smallstr100   arg;                    // Type of field
    algo::Smallstr50    reftype;                //   "Val"  Type constructor
    algo::CppExpr       dflt;                   // Default value (c++ expression)
    algo::Comment       comment;                //
    acr_in::FCtype*     p_arg;                  // reference to parent row
    acr_in::FCtype*     p_ctype;                // reference to parent row
    acr_in::FSubstr*    c_substr;               // optional pointer
    bool                ctype_c_field_in_ary;   //   false  membership flag
private:
    friend acr_in::FField&      field_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FField*      field_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 field_RemoveLast() __attribute__((nothrow));
    FField();
    ~FField();
    FField(const FField&){ /*disallow copy constructor */}
    void operator =(const FField&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FField.msghdr.CopyOut
void                 field_CopyOut(acr_in::FField &row, dmmeta::Field &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FField.msghdr.CopyIn
void                 field_CopyIn(acr_in::FField &row, dmmeta::Field &in) __attribute__((nothrow));

// func:acr_in.FField.ctype.Get
algo::Smallstr100    ctype_Get(acr_in::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FField.ns.Get
algo::Smallstr16     ns_Get(acr_in::FField& field) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FField.name.Get
algo::Smallstr50     name_Get(acr_in::FField& field) __attribute__((__warn_unused_result__, nothrow));

// Insert row into pointer index. Return final membership status.
// func:acr_in.FField.c_substr.InsertMaybe
bool                 c_substr_InsertMaybe(acr_in::FField& field, acr_in::FSubstr& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FField.c_substr.Remove
void                 c_substr_Remove(acr_in::FField& field, acr_in::FSubstr& row) __attribute__((nothrow));

// Set all fields to initial values.
// func:acr_in.FField..Init
void                 FField_Init(acr_in::FField& field);
// func:acr_in.FField..Uninit
void                 FField_Uninit(acr_in::FField& field) __attribute__((nothrow));

// --- acr_in.FFinput
// create: acr_in.FDb.finput (Lary)
// global access: ind_finput (Thash)
struct FFinput { // acr_in.FFinput
    acr_in::FFinput*    ind_finput_next;   // hash next
    algo::Smallstr100   field;             // Target field to read
    bool                extrn;             //   false  Call user-provided function
    bool                update;            //   false
    bool                strict;            //   true  Exist process if record contains error
    algo::Comment       comment;           //
    acr_in::FNs*        p_ns;              // reference to parent row
    acr_in::FField*     p_field;           // reference to parent row
private:
    friend acr_in::FFinput&     finput_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FFinput*     finput_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 finput_RemoveLast() __attribute__((nothrow));
    FFinput();
    ~FFinput();
    FFinput(const FFinput&){ /*disallow copy constructor */}
    void operator =(const FFinput&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FFinput.msghdr.CopyOut
void                 finput_CopyOut(acr_in::FFinput &row, dmmeta::Finput &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FFinput.msghdr.CopyIn
void                 finput_CopyIn(acr_in::FFinput &row, dmmeta::Finput &in) __attribute__((nothrow));

// func:acr_in.FFinput.ns.Get
algo::Smallstr16     ns_Get(acr_in::FFinput& finput) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FFinput..Init
void                 FFinput_Init(acr_in::FFinput& finput);
// func:acr_in.FFinput..Uninit
void                 FFinput_Uninit(acr_in::FFinput& finput) __attribute__((nothrow));

// --- acr_in.FNs
// create: acr_in.FDb.ns (Lary)
// global access: ind_ns (Thash)
// access: acr_in.FCtype.p_ns (Upptr)
// access: acr_in.FDispsig.p_ns (Upptr)
// access: acr_in.FFinput.p_ns (Upptr)
// access: acr_in.FNsssimfile.p_ns (Upptr)
// access: acr_in.FTarget.p_ns (Upptr)
struct FNs { // acr_in.FNs
    acr_in::FNs*           ind_ns_next;             // hash next
    algo::Smallstr16       ns;                      // Namespace name (primary key)
    algo::Smallstr50       nstype;                  // Namespace type
    algo::Smallstr50       license;                 // Associated license
    algo::Comment          comment;                 //
    bool                   select;                  //   false
    acr_in::FTarget*       c_target;                // optional pointer
    acr_in::FNsssimfile*   zd_nsssimfile_ns_head;   // zero-terminated doubly linked list
    i32                    zd_nsssimfile_ns_n;      // zero-terminated doubly linked list
    acr_in::FNsssimfile*   zd_nsssimfile_ns_tail;   // pointer to last element
private:
    friend acr_in::FNs&         ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FNs*         ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
    FNs();
    ~FNs();
    FNs(const FNs&){ /*disallow copy constructor */}
    void operator =(const FNs&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FNs.msghdr.CopyOut
void                 ns_CopyOut(acr_in::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FNs.msghdr.CopyIn
void                 ns_CopyIn(acr_in::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
// func:acr_in.FNs.c_target.InsertMaybe
bool                 c_target_InsertMaybe(acr_in::FNs& ns, acr_in::FTarget& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FNs.c_target.Remove
void                 c_target_Remove(acr_in::FNs& ns, acr_in::FTarget& row) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FNs.zd_nsssimfile_ns.EmptyQ
bool                 zd_nsssimfile_ns_EmptyQ(acr_in::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FNs.zd_nsssimfile_ns.First
acr_in::FNsssimfile* zd_nsssimfile_ns_First(acr_in::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FNs.zd_nsssimfile_ns.InLlistQ
bool                 zd_nsssimfile_ns_InLlistQ(acr_in::FNsssimfile& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FNs.zd_nsssimfile_ns.Insert
void                 zd_nsssimfile_ns_Insert(acr_in::FNs& ns, acr_in::FNsssimfile& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FNs.zd_nsssimfile_ns.Last
acr_in::FNsssimfile* zd_nsssimfile_ns_Last(acr_in::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FNs.zd_nsssimfile_ns.N
i32                  zd_nsssimfile_ns_N(const acr_in::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FNs.zd_nsssimfile_ns.Next
acr_in::FNsssimfile* zd_nsssimfile_ns_Next(acr_in::FNsssimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FNs.zd_nsssimfile_ns.Prev
acr_in::FNsssimfile* zd_nsssimfile_ns_Prev(acr_in::FNsssimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FNs.zd_nsssimfile_ns.Remove
void                 zd_nsssimfile_ns_Remove(acr_in::FNs& ns, acr_in::FNsssimfile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FNs.zd_nsssimfile_ns.RemoveAll
void                 zd_nsssimfile_ns_RemoveAll(acr_in::FNs& ns) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FNs.zd_nsssimfile_ns.RemoveFirst
acr_in::FNsssimfile* zd_nsssimfile_ns_RemoveFirst(acr_in::FNs& ns) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FNs.zd_nsssimfile_ns.qLast
acr_in::FNsssimfile& zd_nsssimfile_ns_qLast(acr_in::FNs& ns) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FNs..Init
void                 FNs_Init(acr_in::FNs& ns);
// cursor points to valid item
// func:acr_in.FNs.zd_nsssimfile_ns_curs.Reset
void                 ns_zd_nsssimfile_ns_curs_Reset(ns_zd_nsssimfile_ns_curs &curs, acr_in::FNs &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FNs.zd_nsssimfile_ns_curs.ValidQ
bool                 ns_zd_nsssimfile_ns_curs_ValidQ(ns_zd_nsssimfile_ns_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FNs.zd_nsssimfile_ns_curs.Next
void                 ns_zd_nsssimfile_ns_curs_Next(ns_zd_nsssimfile_ns_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FNs.zd_nsssimfile_ns_curs.Access
acr_in::FNsssimfile& ns_zd_nsssimfile_ns_curs_Access(ns_zd_nsssimfile_ns_curs &curs) __attribute__((nothrow));
// func:acr_in.FNs..Uninit
void                 FNs_Uninit(acr_in::FNs& ns) __attribute__((nothrow));

// --- acr_in.FNsssimfile
// create: acr_in.FDb.nsssimfile (Lary)
// global access: ind_nsssimfile (Thash)
// access: acr_in.FNs.zd_nsssimfile_ns (Llist)
// access: acr_in.FSsimfile.zd_nsssimfile_ssimfile (Llist)
struct FNsssimfile { // acr_in.FNsssimfile
    acr_in::FNsssimfile*   ind_nsssimfile_next;           // hash next
    acr_in::FNsssimfile*   zd_nsssimfile_ns_next;         // zslist link; -1 means not-in-list
    acr_in::FNsssimfile*   zd_nsssimfile_ns_prev;         // previous element
    algo::Smallstr200      nsssimfile;                    //
    bool                   show;                          //   false
    acr_in::FNs*           p_ns;                          // reference to parent row
    acr_in::FSsimfile*     p_ssimfile;                    // reference to parent row
    acr_in::FNsssimfile*   zd_nsssimfile_ssimfile_next;   // zslist link; -1 means not-in-list
    acr_in::FNsssimfile*   zd_nsssimfile_ssimfile_prev;   // previous element
private:
    friend acr_in::FNsssimfile& nsssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FNsssimfile* nsssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 nsssimfile_RemoveAll() __attribute__((nothrow));
    friend void                 nsssimfile_RemoveLast() __attribute__((nothrow));
    FNsssimfile();
    ~FNsssimfile();
    FNsssimfile(const FNsssimfile&){ /*disallow copy constructor */}
    void operator =(const FNsssimfile&){ /*disallow direct assignment */}
};

// func:acr_in.FNsssimfile.ns.Get
algo::Smallstr16     ns_Get(acr_in::FNsssimfile& nsssimfile) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FNsssimfile.ssimfile.Get
algo::Smallstr50     ssimfile_Get(acr_in::FNsssimfile& nsssimfile) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FNsssimfile..Init
void                 FNsssimfile_Init(acr_in::FNsssimfile& nsssimfile);
// func:acr_in.FNsssimfile..Concat_ns_ssimfile
tempstr              FNsssimfile_Concat_ns_ssimfile( const algo::strptr& ns ,const algo::strptr& ssimfile );
// func:acr_in.FNsssimfile..Uninit
void                 FNsssimfile_Uninit(acr_in::FNsssimfile& nsssimfile) __attribute__((nothrow));

// --- acr_in.FSsimfile
// create: acr_in.FDb.ssimfile (Lary)
// global access: zd_ssimfile (Llist)
// global access: ind_ssimfile (Thash)
// access: acr_in.FCtype.c_ssimfile (Ptr)
// access: acr_in.FNsssimfile.p_ssimfile (Upptr)
struct FSsimfile { // acr_in.FSsimfile
    acr_in::FSsimfile*     zd_ssimfile_next;              // zslist link; -1 means not-in-list
    acr_in::FSsimfile*     zd_ssimfile_prev;              // previous element
    acr_in::FSsimfile*     ind_ssimfile_next;             // hash next
    algo::Smallstr50       ssimfile;                      //
    algo::Smallstr100      ctype;                         //
    acr_in::FCtype*        p_ctype;                       // reference to parent row
    bool                   is_finput;                     //   false
    acr_in::FNsssimfile*   zd_nsssimfile_ssimfile_head;   // zero-terminated doubly linked list
    i32                    zd_nsssimfile_ssimfile_n;      // zero-terminated doubly linked list
    acr_in::FNsssimfile*   zd_nsssimfile_ssimfile_tail;   // pointer to last element
private:
    friend acr_in::FSsimfile&   ssimfile_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FSsimfile*   ssimfile_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ssimfile_RemoveLast() __attribute__((nothrow));
    FSsimfile();
    ~FSsimfile();
    FSsimfile(const FSsimfile&){ /*disallow copy constructor */}
    void operator =(const FSsimfile&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FSsimfile.msghdr.CopyOut
void                 ssimfile_CopyOut(acr_in::FSsimfile &row, dmmeta::Ssimfile &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FSsimfile.msghdr.CopyIn
void                 ssimfile_CopyIn(acr_in::FSsimfile &row, dmmeta::Ssimfile &in) __attribute__((nothrow));

// func:acr_in.FSsimfile.ssimns.Get
algo::Smallstr16     ssimns_Get(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FSsimfile.ns.Get
algo::Smallstr16     ns_Get(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FSsimfile.name.Get
algo::Smallstr50     name_Get(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.EmptyQ
bool                 zd_nsssimfile_ssimfile_EmptyQ(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.First
acr_in::FNsssimfile* zd_nsssimfile_ssimfile_First(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.InLlistQ
bool                 zd_nsssimfile_ssimfile_InLlistQ(acr_in::FNsssimfile& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.Insert
void                 zd_nsssimfile_ssimfile_Insert(acr_in::FSsimfile& ssimfile, acr_in::FNsssimfile& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.Last
acr_in::FNsssimfile* zd_nsssimfile_ssimfile_Last(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.N
i32                  zd_nsssimfile_ssimfile_N(const acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.Next
acr_in::FNsssimfile* zd_nsssimfile_ssimfile_Next(acr_in::FNsssimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.Prev
acr_in::FNsssimfile* zd_nsssimfile_ssimfile_Prev(acr_in::FNsssimfile &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.Remove
void                 zd_nsssimfile_ssimfile_Remove(acr_in::FSsimfile& ssimfile, acr_in::FNsssimfile& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.RemoveAll
void                 zd_nsssimfile_ssimfile_RemoveAll(acr_in::FSsimfile& ssimfile) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.RemoveFirst
acr_in::FNsssimfile* zd_nsssimfile_ssimfile_RemoveFirst(acr_in::FSsimfile& ssimfile) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile.qLast
acr_in::FNsssimfile& zd_nsssimfile_ssimfile_qLast(acr_in::FSsimfile& ssimfile) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FSsimfile..Init
void                 FSsimfile_Init(acr_in::FSsimfile& ssimfile);
// cursor points to valid item
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile_curs.Reset
void                 ssimfile_zd_nsssimfile_ssimfile_curs_Reset(ssimfile_zd_nsssimfile_ssimfile_curs &curs, acr_in::FSsimfile &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile_curs.ValidQ
bool                 ssimfile_zd_nsssimfile_ssimfile_curs_ValidQ(ssimfile_zd_nsssimfile_ssimfile_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile_curs.Next
void                 ssimfile_zd_nsssimfile_ssimfile_curs_Next(ssimfile_zd_nsssimfile_ssimfile_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FSsimfile.zd_nsssimfile_ssimfile_curs.Access
acr_in::FNsssimfile& ssimfile_zd_nsssimfile_ssimfile_curs_Access(ssimfile_zd_nsssimfile_ssimfile_curs &curs) __attribute__((nothrow));
// func:acr_in.FSsimfile..Uninit
void                 FSsimfile_Uninit(acr_in::FSsimfile& ssimfile) __attribute__((nothrow));

// --- acr_in.FSubstr
// create: acr_in.FDb.substr (Lary)
// access: acr_in.FField.c_substr (Ptr)
struct FSubstr { // acr_in.FSubstr
    algo::Smallstr100   field;      //
    algo::CppExpr       expr;       //
    algo::Smallstr100   srcfield;   //
private:
    friend acr_in::FSubstr&     substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FSubstr*     substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 substr_RemoveLast() __attribute__((nothrow));
    FSubstr();
    ~FSubstr();
    FSubstr(const FSubstr&){ /*disallow copy constructor */}
    void operator =(const FSubstr&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FSubstr.msghdr.CopyOut
void                 substr_CopyOut(acr_in::FSubstr &row, dmmeta::Substr &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FSubstr.msghdr.CopyIn
void                 substr_CopyIn(acr_in::FSubstr &row, dmmeta::Substr &in) __attribute__((nothrow));

// func:acr_in.FSubstr..Uninit
void                 FSubstr_Uninit(acr_in::FSubstr& substr) __attribute__((nothrow));

// --- acr_in.FTargdep
// create: acr_in.FDb.targdep (Lary)
// access: acr_in.FTarget.c_targdep (Ptrary)
// access: acr_in.FTarget.c_targdep_child (Ptrary)
struct FTargdep { // acr_in.FTargdep
    algo::Smallstr50   targdep;                         // Primary key - target.parent
    algo::Comment      comment;                         //
    acr_in::FTarget*   p_parent;                        // reference to parent row
    bool               target_c_targdep_in_ary;         //   false  membership flag
    bool               target_c_targdep_child_in_ary;   //   false  membership flag
private:
    friend acr_in::FTargdep&    targdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FTargdep*    targdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targdep_RemoveLast() __attribute__((nothrow));
    FTargdep();
    ~FTargdep();
    FTargdep(const FTargdep&){ /*disallow copy constructor */}
    void operator =(const FTargdep&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FTargdep.msghdr.CopyOut
void                 targdep_CopyOut(acr_in::FTargdep &row, dev::Targdep &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FTargdep.msghdr.CopyIn
void                 targdep_CopyIn(acr_in::FTargdep &row, dev::Targdep &in) __attribute__((nothrow));

// func:acr_in.FTargdep.target.Get
algo::Smallstr16     target_Get(acr_in::FTargdep& targdep) __attribute__((__warn_unused_result__, nothrow));

// func:acr_in.FTargdep.parent.Get
algo::Smallstr16     parent_Get(acr_in::FTargdep& targdep) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:acr_in.FTargdep..Init
void                 FTargdep_Init(acr_in::FTargdep& targdep);
// func:acr_in.FTargdep..Uninit
void                 FTargdep_Uninit(acr_in::FTargdep& targdep) __attribute__((nothrow));

// --- acr_in.FTarget
// create: acr_in.FDb.target (Lary)
// global access: ind_target (Thash)
// global access: zd_targ_visit (Llist)
// access: acr_in.FNs.c_target (Ptr)
// access: acr_in.FTargdep.p_parent (Upptr)
struct FTarget { // acr_in.FTarget
    acr_in::FTarget*     ind_target_next;         // hash next
    acr_in::FTarget*     zd_targ_visit_next;      // zslist link; -1 means not-in-list
    acr_in::FTarget*     zd_targ_visit_prev;      // previous element
    algo::Smallstr16     target;                  // Primary key - name of target
    acr_in::FTargdep**   c_targdep_elems;         // array of pointers
    u32                  c_targdep_n;             // array of pointers
    u32                  c_targdep_max;           // capacity of allocated array
    acr_in::FTargdep**   c_targdep_child_elems;   // array of pointers
    u32                  c_targdep_child_n;       // array of pointers
    u32                  c_targdep_child_max;     // capacity of allocated array
    acr_in::FNs*         p_ns;                    // reference to parent row
private:
    friend acr_in::FTarget&     target_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FTarget*     target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 target_RemoveLast() __attribute__((nothrow));
    FTarget();
    ~FTarget();
    FTarget(const FTarget&){ /*disallow copy constructor */}
    void operator =(const FTarget&){ /*disallow direct assignment */}
};

// Copy fields out of row
// func:acr_in.FTarget.msghdr.CopyOut
void                 target_CopyOut(acr_in::FTarget &row, dev::Target &out) __attribute__((nothrow));
// Copy fields in to row
// func:acr_in.FTarget.msghdr.CopyIn
void                 target_CopyIn(acr_in::FTarget &row, dev::Target &in) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FTarget.c_targdep.EmptyQ
bool                 c_targdep_EmptyQ(acr_in::FTarget& target) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FTarget.c_targdep.Find
acr_in::FTargdep*    c_targdep_Find(acr_in::FTarget& target, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FTarget.c_targdep.Getary
algo::aryptr<acr_in::FTargdep*> c_targdep_Getary(acr_in::FTarget& target) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FTarget.c_targdep.Insert
void                 c_targdep_Insert(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:acr_in.FTarget.c_targdep.InsertMaybe
bool                 c_targdep_InsertMaybe(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FTarget.c_targdep.N
i32                  c_targdep_N(const acr_in::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FTarget.c_targdep.Remove
void                 c_targdep_Remove(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FTarget.c_targdep.RemoveAll
void                 c_targdep_RemoveAll(acr_in::FTarget& target) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FTarget.c_targdep.Reserve
void                 c_targdep_Reserve(acr_in::FTarget& target, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FTarget.c_targdep.qFind
acr_in::FTargdep&    c_targdep_qFind(acr_in::FTarget& target, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:acr_in.FTarget.c_targdep.InAryQ
bool                 target_c_targdep_InAryQ(acr_in::FTargdep& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FTarget.c_targdep.qLast
acr_in::FTargdep&    c_targdep_qLast(acr_in::FTarget& target) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FTarget.c_targdep_child.EmptyQ
bool                 c_targdep_child_EmptyQ(acr_in::FTarget& target) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FTarget.c_targdep_child.Find
acr_in::FTargdep*    c_targdep_child_Find(acr_in::FTarget& target, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FTarget.c_targdep_child.Getary
algo::aryptr<acr_in::FTargdep*> c_targdep_child_Getary(acr_in::FTarget& target) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FTarget.c_targdep_child.Insert
void                 c_targdep_child_Insert(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
// func:acr_in.FTarget.c_targdep_child.InsertMaybe
bool                 c_targdep_child_InsertMaybe(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FTarget.c_targdep_child.N
i32                  c_targdep_child_N(const acr_in::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FTarget.c_targdep_child.Remove
void                 c_targdep_child_Remove(acr_in::FTarget& target, acr_in::FTargdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FTarget.c_targdep_child.RemoveAll
void                 c_targdep_child_RemoveAll(acr_in::FTarget& target) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FTarget.c_targdep_child.Reserve
void                 c_targdep_child_Reserve(acr_in::FTarget& target, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FTarget.c_targdep_child.qFind
acr_in::FTargdep&    c_targdep_child_qFind(acr_in::FTarget& target, u32 idx) __attribute__((nothrow));
// True if row is in any ptrary instance
// func:acr_in.FTarget.c_targdep_child.InAryQ
bool                 target_c_targdep_child_InAryQ(acr_in::FTargdep& row) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FTarget.c_targdep_child.qLast
acr_in::FTargdep&    c_targdep_child_qLast(acr_in::FTarget& target) __attribute__((nothrow));

// Set all fields to initial values.
// func:acr_in.FTarget..Init
void                 FTarget_Init(acr_in::FTarget& target);
// func:acr_in.FTarget.c_targdep_curs.Reset
void                 target_c_targdep_curs_Reset(target_c_targdep_curs &curs, acr_in::FTarget &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FTarget.c_targdep_curs.ValidQ
bool                 target_c_targdep_curs_ValidQ(target_c_targdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FTarget.c_targdep_curs.Next
void                 target_c_targdep_curs_Next(target_c_targdep_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FTarget.c_targdep_curs.Access
acr_in::FTargdep&    target_c_targdep_curs_Access(target_c_targdep_curs &curs) __attribute__((nothrow));
// func:acr_in.FTarget.c_targdep_child_curs.Reset
void                 target_c_targdep_child_curs_Reset(target_c_targdep_child_curs &curs, acr_in::FTarget &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FTarget.c_targdep_child_curs.ValidQ
bool                 target_c_targdep_child_curs_ValidQ(target_c_targdep_child_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FTarget.c_targdep_child_curs.Next
void                 target_c_targdep_child_curs_Next(target_c_targdep_child_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FTarget.c_targdep_child_curs.Access
acr_in::FTargdep&    target_c_targdep_child_curs_Access(target_c_targdep_child_curs &curs) __attribute__((nothrow));
// func:acr_in.FTarget..Uninit
void                 FTarget_Uninit(acr_in::FTarget& target) __attribute__((nothrow));

// --- acr_in.FTuple
// create: acr_in.FDb.tuple (Lary)
// global access: ind_tuple (Thash)
// global access: zd_select (Llist)
// global access: zd_deselect (Llist)
// access: acr_in.FTuple.c_child (Ptrary)
// access: acr_in.FTuple.c_parent (Ptrary)
struct FTuple { // acr_in.FTuple
    acr_in::FTuple*    ind_tuple_next;     // hash next
    acr_in::FTuple*    zd_select_next;     // zslist link; -1 means not-in-list
    acr_in::FTuple*    zd_select_prev;     // previous element
    acr_in::FTuple*    zd_deselect_next;   // zslist link; -1 means not-in-list
    acr_in::FTuple*    zd_deselect_prev;   // previous element
    algo::cstring      key;                //
    algo::cstring      str;                //
    acr_in::FTuple**   c_child_elems;      // array of pointers
    u32                c_child_n;          // array of pointers
    u32                c_child_max;        // capacity of allocated array
    acr_in::FCtype*    p_ctype;            // reference to parent row
    acr_in::FTuple**   c_parent_elems;     // array of pointers
    u32                c_parent_n;         // array of pointers
    u32                c_parent_max;       // capacity of allocated array
    bool               deselect_visited;   //   false
private:
    friend acr_in::FTuple&      tuple_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend acr_in::FTuple*      tuple_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 tuple_RemoveAll() __attribute__((nothrow));
    friend void                 tuple_RemoveLast() __attribute__((nothrow));
    FTuple();
    ~FTuple();
    FTuple(const FTuple&){ /*disallow copy constructor */}
    void operator =(const FTuple&){ /*disallow direct assignment */}
};

// Return true if index is empty
// func:acr_in.FTuple.c_child.EmptyQ
bool                 c_child_EmptyQ(acr_in::FTuple& tuple) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FTuple.c_child.Find
acr_in::FTuple*      c_child_Find(acr_in::FTuple& tuple, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FTuple.c_child.Getary
algo::aryptr<acr_in::FTuple*> c_child_Getary(acr_in::FTuple& tuple) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FTuple.c_child.Insert
void                 c_child_Insert(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
// func:acr_in.FTuple.c_child.ScanInsertMaybe
bool                 c_child_ScanInsertMaybe(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FTuple.c_child.N
i32                  c_child_N(const acr_in::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FTuple.c_child.Remove
void                 c_child_Remove(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FTuple.c_child.RemoveAll
void                 c_child_RemoveAll(acr_in::FTuple& tuple) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FTuple.c_child.Reserve
void                 c_child_Reserve(acr_in::FTuple& tuple, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FTuple.c_child.qFind
acr_in::FTuple&      c_child_qFind(acr_in::FTuple& tuple, u32 idx) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FTuple.c_child.qLast
acr_in::FTuple&      c_child_qLast(acr_in::FTuple& tuple) __attribute__((nothrow));

// Return true if index is empty
// func:acr_in.FTuple.c_parent.EmptyQ
bool                 c_parent_EmptyQ(acr_in::FTuple& tuple) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:acr_in.FTuple.c_parent.Find
acr_in::FTuple*      c_parent_Find(acr_in::FTuple& tuple, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
// func:acr_in.FTuple.c_parent.Getary
algo::aryptr<acr_in::FTuple*> c_parent_Getary(acr_in::FTuple& tuple) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
// func:acr_in.FTuple.c_parent.Insert
void                 c_parent_Insert(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
// func:acr_in.FTuple.c_parent.ScanInsertMaybe
bool                 c_parent_ScanInsertMaybe(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Return number of items in the pointer array
// func:acr_in.FTuple.c_parent.N
i32                  c_parent_N(const acr_in::FTuple& tuple) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
// func:acr_in.FTuple.c_parent.Remove
void                 c_parent_Remove(acr_in::FTuple& tuple, acr_in::FTuple& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:acr_in.FTuple.c_parent.RemoveAll
void                 c_parent_RemoveAll(acr_in::FTuple& tuple) __attribute__((nothrow));
// Reserve space in index for N more elements;
// func:acr_in.FTuple.c_parent.Reserve
void                 c_parent_Reserve(acr_in::FTuple& tuple, u32 n) __attribute__((nothrow));
// Return reference without bounds checking
// func:acr_in.FTuple.c_parent.qFind
acr_in::FTuple&      c_parent_qFind(acr_in::FTuple& tuple, u32 idx) __attribute__((nothrow));
// Reference to last element without bounds checking
// func:acr_in.FTuple.c_parent.qLast
acr_in::FTuple&      c_parent_qLast(acr_in::FTuple& tuple) __attribute__((nothrow));

// Set all fields to initial values.
// func:acr_in.FTuple..Init
void                 FTuple_Init(acr_in::FTuple& tuple);
// func:acr_in.FTuple.c_child_curs.Reset
void                 tuple_c_child_curs_Reset(tuple_c_child_curs &curs, acr_in::FTuple &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FTuple.c_child_curs.ValidQ
bool                 tuple_c_child_curs_ValidQ(tuple_c_child_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FTuple.c_child_curs.Next
void                 tuple_c_child_curs_Next(tuple_c_child_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FTuple.c_child_curs.Access
acr_in::FTuple&      tuple_c_child_curs_Access(tuple_c_child_curs &curs) __attribute__((nothrow));
// func:acr_in.FTuple.c_parent_curs.Reset
void                 tuple_c_parent_curs_Reset(tuple_c_parent_curs &curs, acr_in::FTuple &parent) __attribute__((nothrow));
// cursor points to valid item
// func:acr_in.FTuple.c_parent_curs.ValidQ
bool                 tuple_c_parent_curs_ValidQ(tuple_c_parent_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:acr_in.FTuple.c_parent_curs.Next
void                 tuple_c_parent_curs_Next(tuple_c_parent_curs &curs) __attribute__((nothrow));
// item access
// func:acr_in.FTuple.c_parent_curs.Access
acr_in::FTuple&      tuple_c_parent_curs_Access(tuple_c_parent_curs &curs) __attribute__((nothrow));
// func:acr_in.FTuple..Uninit
void                 FTuple_Uninit(acr_in::FTuple& tuple) __attribute__((nothrow));

// --- acr_in.FieldId
#pragma pack(push,1)
struct FieldId { // acr_in.FieldId: Field read helper
    i32   value;   //   -1
    inline operator acr_in_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(acr_in_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:acr_in.FieldId.value.GetEnum
acr_in_FieldIdEnum   value_GetEnum(const acr_in::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:acr_in.FieldId.value.SetEnum
void                 value_SetEnum(acr_in::FieldId& parent, acr_in_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:acr_in.FieldId.value.ToCstr
const char*          value_ToCstr(const acr_in::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:acr_in.FieldId.value.Print
void                 value_Print(const acr_in::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:acr_in.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(acr_in::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:acr_in.FieldId.value.SetStrptr
void                 value_SetStrptr(acr_in::FieldId& parent, algo::strptr rhs, acr_in_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:acr_in.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(acr_in::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_in::FieldId from an ascii string.
// The format of the string is the format of the acr_in::FieldId's only field
// func:acr_in.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(acr_in::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:acr_in.FieldId..Init
void                 FieldId_Init(acr_in::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:acr_in.FieldId.String  printfmt:Raw
// func:acr_in.FieldId..Print
void                 FieldId_Print(acr_in::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- acr_in.TableId
struct TableId { // acr_in.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator acr_in_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(acr_in_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
// func:acr_in.TableId.value.GetEnum
acr_in_TableIdEnum   value_GetEnum(const acr_in::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:acr_in.TableId.value.SetEnum
void                 value_SetEnum(acr_in::TableId& parent, acr_in_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:acr_in.TableId.value.ToCstr
const char*          value_ToCstr(const acr_in::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:acr_in.TableId.value.Print
void                 value_Print(const acr_in::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:acr_in.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(acr_in::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:acr_in.TableId.value.SetStrptr
void                 value_SetStrptr(acr_in::TableId& parent, algo::strptr rhs, acr_in_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:acr_in.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(acr_in::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of acr_in::TableId from an ascii string.
// The format of the string is the format of the acr_in::TableId's only field
// func:acr_in.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(acr_in::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
// func:acr_in.TableId..Init
void                 TableId_Init(acr_in::TableId& parent);
// print string representation of ROW to string STR
// cfmt:acr_in.TableId.String  printfmt:Raw
// func:acr_in.TableId..Print
void                 TableId_Print(acr_in::TableId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace acr_in { // gen:ns_curstext

struct ctype_c_field_curs {// fcurs:acr_in.FCtype.c_field/curs
    typedef acr_in::FField ChildType;
    acr_in::FField** elems;
    u32 n_elems;
    u32 index;
    ctype_c_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ctype_c_ctype_curs {// fcurs:acr_in.FCtype.c_ctype/curs
    typedef acr_in::FCtype ChildType;
    acr_in::FCtype** elems;
    u32 n_elems;
    u32 index;
    ctype_c_ctype_curs() { elems=NULL; n_elems=0; index=0; }
};


struct _db_tuple_curs {// cursor
    typedef acr_in::FTuple ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_tuple_curs(){ parent=NULL; index=0; }
};


struct _db_finput_curs {// cursor
    typedef acr_in::FFinput ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_finput_curs(){ parent=NULL; index=0; }
};


struct _db_field_curs {// cursor
    typedef acr_in::FField ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_field_curs(){ parent=NULL; index=0; }
};


struct _db_ctype_curs {// cursor
    typedef acr_in::FCtype ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_ctype_curs(){ parent=NULL; index=0; }
};


struct _db_ssimfile_curs {// cursor
    typedef acr_in::FSsimfile ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_ssimfile_curs(){ parent=NULL; index=0; }
};


struct _db_ns_curs {// cursor
    typedef acr_in::FNs ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};


struct _db_zd_todo_curs {// fcurs:acr_in.FDb.zd_todo/curs
    typedef acr_in::FCtype ChildType;
    acr_in::FCtype* row;
    _db_zd_todo_curs() {
        row = NULL;
    }
};


struct _db_zd_ssimfile_curs {// fcurs:acr_in.FDb.zd_ssimfile/curs
    typedef acr_in::FSsimfile ChildType;
    acr_in::FSsimfile* row;
    _db_zd_ssimfile_curs() {
        row = NULL;
    }
};


struct _db_substr_curs {// cursor
    typedef acr_in::FSubstr ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_substr_curs(){ parent=NULL; index=0; }
};


struct _db_dispsig_curs {// cursor
    typedef acr_in::FDispsig ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_dispsig_curs(){ parent=NULL; index=0; }
};


struct _db_zd_select_curs {// fcurs:acr_in.FDb.zd_select/curs
    typedef acr_in::FTuple ChildType;
    acr_in::FTuple* row;
    _db_zd_select_curs() {
        row = NULL;
    }
};


struct _db_zd_deselect_curs {// fcurs:acr_in.FDb.zd_deselect/curs
    typedef acr_in::FTuple ChildType;
    acr_in::FTuple* row;
    _db_zd_deselect_curs() {
        row = NULL;
    }
};


struct _db_zd_related_curs {// fcurs:acr_in.FDb.zd_related/curs
    typedef acr_in::FCtype ChildType;
    acr_in::FCtype* row;
    _db_zd_related_curs() {
        row = NULL;
    }
};


struct _db_target_curs {// cursor
    typedef acr_in::FTarget ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_target_curs(){ parent=NULL; index=0; }
};


struct _db_targdep_curs {// cursor
    typedef acr_in::FTargdep ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_targdep_curs(){ parent=NULL; index=0; }
};


struct _db_zd_targ_visit_curs {// fcurs:acr_in.FDb.zd_targ_visit/curs
    typedef acr_in::FTarget ChildType;
    acr_in::FTarget* row;
    _db_zd_targ_visit_curs() {
        row = NULL;
    }
};


struct _db_nsssimfile_curs {// cursor
    typedef acr_in::FNsssimfile ChildType;
    acr_in::FDb *parent;
    i64 index;
    _db_nsssimfile_curs(){ parent=NULL; index=0; }
};


struct ns_zd_nsssimfile_ns_curs {// fcurs:acr_in.FNs.zd_nsssimfile_ns/curs
    typedef acr_in::FNsssimfile ChildType;
    acr_in::FNsssimfile* row;
    ns_zd_nsssimfile_ns_curs() {
        row = NULL;
    }
};


struct ssimfile_zd_nsssimfile_ssimfile_curs {// fcurs:acr_in.FSsimfile.zd_nsssimfile_ssimfile/curs
    typedef acr_in::FNsssimfile ChildType;
    acr_in::FNsssimfile* row;
    ssimfile_zd_nsssimfile_ssimfile_curs() {
        row = NULL;
    }
};


struct target_c_targdep_curs {// fcurs:acr_in.FTarget.c_targdep/curs
    typedef acr_in::FTargdep ChildType;
    acr_in::FTargdep** elems;
    u32 n_elems;
    u32 index;
    target_c_targdep_curs() { elems=NULL; n_elems=0; index=0; }
};


struct target_c_targdep_child_curs {// fcurs:acr_in.FTarget.c_targdep_child/curs
    typedef acr_in::FTargdep ChildType;
    acr_in::FTargdep** elems;
    u32 n_elems;
    u32 index;
    target_c_targdep_child_curs() { elems=NULL; n_elems=0; index=0; }
};


struct tuple_c_child_curs {// fcurs:acr_in.FTuple.c_child/curs
    typedef acr_in::FTuple ChildType;
    acr_in::FTuple** elems;
    u32 n_elems;
    u32 index;
    tuple_c_child_curs() { elems=NULL; n_elems=0; index=0; }
};


struct tuple_c_parent_curs {// fcurs:acr_in.FTuple.c_parent/curs
    typedef acr_in::FTuple ChildType;
    acr_in::FTuple** elems;
    u32 n_elems;
    u32 index;
    tuple_c_parent_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace acr_in { // gen:ns_func
} // gen:ns_func
// func:acr_in...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:acr_in...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const acr_in::trace &row);// cfmt:acr_in.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const acr_in::FieldId &row);// cfmt:acr_in.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const acr_in::TableId &row);// cfmt:acr_in.TableId.String
}
