//
// include/gen/amcdb_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline amcdb::Bltin::Bltin(const algo::strptr&            in_ctype
        ,bool                           in_likeu64
        ,bool                           in_bigendok
        ,bool                           in_issigned
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , likeu64(in_likeu64)
    , bigendok(in_bigendok)
    , issigned(in_issigned)
    , comment(in_comment)
{
}
inline amcdb::Bltin::Bltin() {
    amcdb::Bltin_Init(*this);
}


// --- amcdb.Bltin..Init
// Set all fields to initial values.
inline void amcdb::Bltin_Init(amcdb::Bltin& parent) {
    parent.likeu64 = bool(false);
    parent.bigendok = bool(false);
    parent.issigned = bool(false);
}
inline amcdb::Curstype::Curstype() {
}

inline amcdb::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline amcdb::FieldId::FieldId(amcdb_FieldIdEnum arg) { this->value = i32(arg); }
inline amcdb::FieldId::FieldId() {
    amcdb::FieldId_Init(*this);
}


// --- amcdb.FieldId.value.GetEnum
// Get value of field as enum type
inline amcdb_FieldIdEnum amcdb::value_GetEnum(const amcdb::FieldId& parent) {
    return amcdb_FieldIdEnum(parent.value);
}

// --- amcdb.FieldId.value.SetEnum
// Set value of field from enum type.
inline void amcdb::value_SetEnum(amcdb::FieldId& parent, amcdb_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- amcdb.FieldId.value.Cast
inline amcdb::FieldId::operator amcdb_FieldIdEnum () const {
    return amcdb_FieldIdEnum((*this).value);
}

// --- amcdb.FieldId..Init
// Set all fields to initial values.
inline void amcdb::FieldId_Init(amcdb::FieldId& parent) {
    parent.value = i32(-1);
}
inline amcdb::Gen::Gen() {
    amcdb::Gen_Init(*this);
}


// --- amcdb.Gen..Init
// Set all fields to initial values.
inline void amcdb::Gen_Init(amcdb::Gen& parent) {
    parent.perns = bool(false);
}
inline amcdb::Regxtype::Regxtype() {
}

inline amcdb::Tclass::Tclass() {
}

inline amcdb::Tcurs::Tcurs() {
    amcdb::Tcurs_Init(*this);
}


// --- amcdb.Tcurs..Init
// Set all fields to initial values.
inline void amcdb::Tcurs_Init(amcdb::Tcurs& parent) {
    parent.dflt = bool(false);
}
inline amcdb::Tfunc::Tfunc() {
    amcdb::Tfunc_Init(*this);
}


inline algo::cstring &algo::operator <<(algo::cstring &str, const amcdb::FieldId &row) {// cfmt:amcdb.FieldId.String
    amcdb::FieldId_Print(const_cast<amcdb::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const amcdb::Regxtype &row) {// cfmt:amcdb.Regxtype.String
    amcdb::Regxtype_Print(const_cast<amcdb::Regxtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const amcdb::Tcurs &row) {// cfmt:amcdb.Tcurs.String
    amcdb::Tcurs_Print(const_cast<amcdb::Tcurs&>(row), str);
    return str;
}
