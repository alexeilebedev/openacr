//
// include/gen/report_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- report_FieldIdEnum

enum report_FieldIdEnum {                   // report.FieldId.value
     report_FieldId_n_target          = 0
    ,report_FieldId_time              = 1
    ,report_FieldId_hitrate           = 2
    ,report_FieldId_pch_hitrate       = 3
    ,report_FieldId_n_warn            = 4
    ,report_FieldId_n_err             = 5
    ,report_FieldId_n_install         = 6
    ,report_FieldId_n_select          = 7
    ,report_FieldId_n_insert          = 8
    ,report_FieldId_n_delete          = 9
    ,report_FieldId_n_ignore          = 10
    ,report_FieldId_n_update          = 11
    ,report_FieldId_n_file_mod        = 12
    ,report_FieldId_records           = 13
    ,report_FieldId_errors            = 14
    ,report_FieldId_n_cppfile         = 15
    ,report_FieldId_n_cppline         = 16
    ,report_FieldId_n_ctype           = 17
    ,report_FieldId_n_func            = 18
    ,report_FieldId_n_xref            = 19
    ,report_FieldId_n_filemod         = 20
    ,report_FieldId_ntest             = 21
    ,report_FieldId_nselect           = 22
    ,report_FieldId_npass             = 23
    ,report_FieldId_nskip             = 24
    ,report_FieldId_nrun              = 25
    ,report_FieldId_nwrite            = 26
    ,report_FieldId_nerr              = 27
    ,report_FieldId_ninsert           = 28
    ,report_FieldId_success           = 29
    ,report_FieldId_n_test_total      = 30
    ,report_FieldId_n_test_run        = 31
    ,report_FieldId_starttime         = 32
    ,report_FieldId_elapsed_sec       = 33
    ,report_FieldId_preproc_size      = 34
    ,report_FieldId_hit               = 35
    ,report_FieldId_cached_file       = 36
    ,report_FieldId_copy_file_range   = 37
    ,report_FieldId_pch_hit           = 38
    ,report_FieldId_pch_file          = 39
    ,report_FieldId_source            = 40
    ,report_FieldId_pch_source        = 41
    ,report_FieldId_n_line            = 42
    ,report_FieldId_n_static          = 43
    ,report_FieldId_n_inline          = 44
    ,report_FieldId_n_mysteryfunc     = 45
    ,report_FieldId_n_baddecl         = 46
    ,report_FieldId_comment           = 47
    ,report_FieldId_value             = 48
};

enum { report_FieldIdEnum_N = 49 };

namespace report { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace report { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace report { struct FieldId; }
namespace report { struct Protocol; }
namespace report { struct abt; }
namespace report { struct acr; }
namespace report { struct acr_check; }
namespace report { struct amc; }
namespace report { struct atf_comp; }
namespace report { struct atf_unit; }
namespace report { struct gcache; }
namespace report { struct gcache_hitrate; }
namespace report { struct src_func; }
namespace report { // gen:ns_print_struct

// --- report.FieldId
#pragma pack(push,1)
struct FieldId { // report.FieldId: Field read helper
    i32   value;   //   -1
    inline operator report_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(report_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
report_FieldIdEnum   value_GetEnum(const report::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(report::FieldId& parent, report_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const report::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const report::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(report::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(report::FieldId& parent, algo::strptr rhs, report_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(report::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of report::FieldId from an ascii string.
// The format of the string is the format of the report::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(report::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(report::FieldId& parent);
// print string representation of report::FieldId to string LHS, no header -- cprint:report.FieldId.String
void                 FieldId_Print(report::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- report.Protocol
// access: report.Protocol.proto (Protocol)
#pragma pack(push,1)
struct Protocol { // report.Protocol: amc-generated struct for internal purposes
    Protocol();
};
#pragma pack(pop)

void                 StaticCheck();


// --- report.abt
struct abt { // report.abt
    u16                n_target;      //   0
    algo::UnDiff       time;          //
    algo::Smallstr20   hitrate;       //
    algo::Smallstr20   pch_hitrate;   //
    u32                n_warn;        //   0
    u32                n_err;         //   0
    u16                n_install;     //   0
    explicit abt(u16                            in_n_target
        ,algo::UnDiff                   in_time
        ,const algo::strptr&            in_hitrate
        ,const algo::strptr&            in_pch_hitrate
        ,u32                            in_n_warn
        ,u32                            in_n_err
        ,u16                            in_n_install);
    abt();
};

bool                 abt_ReadFieldMaybe(report::abt &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::abt from an ascii string.
// The format of the string is an ssim Tuple
bool                 abt_ReadStrptrMaybe(report::abt &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 abt_Init(report::abt& parent);
// print string representation of report::abt to string LHS, no header -- cprint:report.abt.String
void                 abt_Print(report::abt & row, algo::cstring &str) __attribute__((nothrow));

// --- report.acr
struct acr { // report.acr
    u32   n_select;     //   0  Number of records selected
    u32   n_insert;     //   0  Number of records inserted
    u32   n_delete;     //   0  Number of records deleted
    u32   n_ignore;     //   0  Number of input records ignored
    u32   n_update;     //   0  Number of records updated
    u32   n_file_mod;   //   0  Number of files modified
    acr();
};

bool                 acr_ReadFieldMaybe(report::acr &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::acr from an ascii string.
// The format of the string is an ssim Tuple
bool                 acr_ReadStrptrMaybe(report::acr &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 acr_Init(report::acr& parent);
// print string representation of report::acr to string LHS, no header -- cprint:report.acr.String
void                 acr_Print(report::acr & row, algo::cstring &str) __attribute__((nothrow));

// --- report.acr_check
struct acr_check { // report.acr_check
    u32   records;   //   0  Number of records checked
    u32   errors;    //   0  Number of errors reported
    explicit acr_check(u32                            in_records
        ,u32                            in_errors);
    acr_check();
};

bool                 acr_check_ReadFieldMaybe(report::acr_check &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::acr_check from an ascii string.
// The format of the string is an ssim Tuple
bool                 acr_check_ReadStrptrMaybe(report::acr_check &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 acr_check_Init(report::acr_check& parent);
// print string representation of report::acr_check to string LHS, no header -- cprint:report.acr_check.String
void                 acr_check_Print(report::acr_check & row, algo::cstring &str) __attribute__((nothrow));

// --- report.amc
struct amc { // report.amc
    u32   n_cppfile;   //   0
    u32   n_cppline;   //   0
    u32   n_ctype;     //   0
    u32   n_func;      //   0
    u32   n_xref;      //   0
    u32   n_filemod;   //   0
    amc();
};

bool                 amc_ReadFieldMaybe(report::amc &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::amc from an ascii string.
// The format of the string is an ssim Tuple
bool                 amc_ReadStrptrMaybe(report::amc &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 amc_Init(report::amc& parent);
// print string representation of report::amc to string LHS, no header -- cprint:report.amc.String
void                 amc_Print(report::amc & row, algo::cstring &str) __attribute__((nothrow));

// --- report.atf_comp
struct atf_comp { // report.atf_comp
    i32    ntest;     //   0
    i32    nselect;   //   0
    i32    npass;     //   0
    i32    nskip;     //   0
    i32    nrun;      //   0
    i32    nwrite;    //   0
    i32    nerr;      //   0
    i32    ninsert;   //   0
    bool   success;   //   false
    atf_comp();
};

bool                 atf_comp_ReadFieldMaybe(report::atf_comp &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::atf_comp from an ascii string.
// The format of the string is an ssim Tuple
bool                 atf_comp_ReadStrptrMaybe(report::atf_comp &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 atf_comp_Init(report::atf_comp& parent);
// print string representation of report::atf_comp to string LHS, no header -- cprint:report.atf_comp.String
void                 atf_comp_Print(report::atf_comp & row, algo::cstring &str) __attribute__((nothrow));

// --- report.atf_unit
struct atf_unit { // report.atf_unit
    u32    n_test_total;   //   0
    bool   success;        //   false
    u64    n_test_run;     //   0
    u64    n_err;          //   0
    atf_unit();
};

bool                 atf_unit_ReadFieldMaybe(report::atf_unit &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::atf_unit from an ascii string.
// The format of the string is an ssim Tuple
bool                 atf_unit_ReadStrptrMaybe(report::atf_unit &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 atf_unit_Init(report::atf_unit& parent);
// print string representation of report::atf_unit to string LHS, no header -- cprint:report.atf_unit.String
void                 atf_unit_Print(report::atf_unit & row, algo::cstring &str) __attribute__((nothrow));

// --- report.gcache
struct gcache { // report.gcache
    algo::UnTime    starttime;         // Beginning of run
    double          elapsed_sec;       //   0.0  End of run
    i32             preproc_size;      //   0  Size of preprocessed filed
    bool            hit;               //   false  Cache hit - compilation avoided
    algo::cstring   cached_file;       // location of cached file
    bool            copy_file_range;   //   false  kernel-side copy succeeded
    bool            pch_hit;           //   false  PCH hit - precompiled header reused
    algo::cstring   pch_file;          // location of PCH file
    algo::cstring   source;            // Source file
    algo::cstring   pch_source;        // PCH source file
    explicit gcache(algo::UnTime                   in_starttime
        ,double                         in_elapsed_sec
        ,i32                            in_preproc_size
        ,bool                           in_hit
        ,const algo::strptr&            in_cached_file
        ,bool                           in_copy_file_range
        ,bool                           in_pch_hit
        ,const algo::strptr&            in_pch_file
        ,const algo::strptr&            in_source
        ,const algo::strptr&            in_pch_source);
    gcache();
};

bool                 gcache_ReadFieldMaybe(report::gcache &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::gcache from an ascii string.
// The format of the string is an ssim Tuple
bool                 gcache_ReadStrptrMaybe(report::gcache &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 gcache_Init(report::gcache& parent);
// print string representation of report::gcache to string LHS, no header -- cprint:report.gcache.String
void                 gcache_Print(report::gcache & row, algo::cstring &str) __attribute__((nothrow));

// --- report.gcache_hitrate
struct gcache_hitrate { // report.gcache_hitrate
    algo::Smallstr20   hitrate;       // Hitrate
    algo::Smallstr20   pch_hitrate;   // PCH hitrate
    explicit gcache_hitrate(const algo::strptr&            in_hitrate
        ,const algo::strptr&            in_pch_hitrate);
    gcache_hitrate();
};

bool                 gcache_hitrate_ReadFieldMaybe(report::gcache_hitrate &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::gcache_hitrate from an ascii string.
// The format of the string is an ssim Tuple
bool                 gcache_hitrate_ReadStrptrMaybe(report::gcache_hitrate &parent, algo::strptr in_str);
// print string representation of report::gcache_hitrate to string LHS, no header -- cprint:report.gcache_hitrate.String
void                 gcache_hitrate_Print(report::gcache_hitrate & row, algo::cstring &str) __attribute__((nothrow));

// --- report.src_func
struct src_func { // report.src_func
    u32             n_func;          //   0
    u32             n_line;          //   0
    u32             n_static;        //   0
    u32             n_inline;        //   0
    u32             n_mysteryfunc;   //   0
    u32             n_filemod;       //   0
    u32             n_baddecl;       //   0
    algo::Comment   comment;         //
    src_func();
};

bool                 src_func_ReadFieldMaybe(report::src_func &parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of report::src_func from an ascii string.
// The format of the string is an ssim Tuple
bool                 src_func_ReadStrptrMaybe(report::src_func &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 src_func_Init(report::src_func& parent);
// print string representation of report::src_func to string LHS, no header -- cprint:report.src_func.String
void                 src_func_Print(report::src_func & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace report { // gen:ns_func
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const report::FieldId &row);// cfmt:report.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const report::abt &row);// cfmt:report.abt.String
inline algo::cstring &operator <<(algo::cstring &str, const report::acr &row);// cfmt:report.acr.String
inline algo::cstring &operator <<(algo::cstring &str, const report::acr_check &row);// cfmt:report.acr_check.String
inline algo::cstring &operator <<(algo::cstring &str, const report::amc &row);// cfmt:report.amc.String
inline algo::cstring &operator <<(algo::cstring &str, const report::atf_comp &row);// cfmt:report.atf_comp.String
inline algo::cstring &operator <<(algo::cstring &str, const report::atf_unit &row);// cfmt:report.atf_unit.String
inline algo::cstring &operator <<(algo::cstring &str, const report::gcache &row);// cfmt:report.gcache.String
inline algo::cstring &operator <<(algo::cstring &str, const report::gcache_hitrate &row);// cfmt:report.gcache_hitrate.String
inline algo::cstring &operator <<(algo::cstring &str, const report::src_func &row);// cfmt:report.src_func.String
}
