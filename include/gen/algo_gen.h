//
// include/gen/algo_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
//#pragma endinclude
// gen:ns_enums

// --- algo_BoolEnum

enum algo_BoolEnum {        // algo.Bool.value
     algo_Bool_N       = 0
    ,algo_Bool_Y       = 1
    ,algo_Bool_true    = 1
    ,algo_Bool_false   = 0
    ,algo_Bool_0       = 0
    ,algo_Bool_1       = 1
    ,algo_Bool_off     = 0
    ,algo_Bool_on      = 1
    ,algo_Bool_no      = 0
    ,algo_Bool_yes     = 1
};

enum { algo_BoolEnum_N = 10 };


// --- algo_EchoQEnum

enum algo_EchoQEnum {        // algo.EchoQ.value
     algo_EchoQ_true    = 1
    ,algo_EchoQ_false   = 0
};

enum { algo_EchoQEnum_N = 2 };


// --- algo_ErrnsEnum

enum algo_ErrnsEnum {       // algo.Errns.value
     algo_Errns_unix   = 0
    ,algo_Errns_win    = 1
};

enum { algo_ErrnsEnum_N = 2 };


// --- algo_FailokQEnum

enum algo_FailokQEnum {        // algo.FailokQ.value
     algo_FailokQ_true    = 1
    ,algo_FailokQ_false   = 0
};

enum { algo_FailokQEnum_N = 2 };


// --- algo_FieldIdEnum

enum algo_FieldIdEnum {                    // algo.FieldId.value
     algo_FieldId_name               = 0
    ,algo_FieldId_value              = 1
    ,algo_FieldId_ch                 = 2
    ,algo_FieldId_exponent           = 3
    ,algo_FieldId_mantissa           = 4
    ,algo_FieldId_append             = 5
    ,algo_FieldId_read               = 6
    ,algo_FieldId_write              = 7
    ,algo_FieldId__throw             = 8
    ,algo_FieldId_temp               = 9
    ,algo_FieldId_overlap            = 10
    ,algo_FieldId_linear             = 11
    ,algo_FieldId_printerr           = 12
    ,algo_FieldId_eof                = 13
    ,algo_FieldId_err                = 14
    ,algo_FieldId_x                  = 15
    ,algo_FieldId_y                  = 16
    ,algo_FieldId_ip_host            = 17
    ,algo_FieldId_mask               = 18
    ,algo_FieldId_ok                 = 19
    ,algo_FieldId_neg                = 20
    ,algo_FieldId_overflow           = 21
    ,algo_FieldId_hex                = 22
    ,algo_FieldId_sha1sig            = 23
    ,algo_FieldId_ary                = 24
    ,algo_FieldId_attrs              = 25
    ,algo_FieldId_head               = 26
    ,algo_FieldId_protocol           = 27
    ,algo_FieldId_username           = 28
    ,algo_FieldId_password           = 29
    ,algo_FieldId_server             = 30
    ,algo_FieldId_dir                = 31
    ,algo_FieldId_port               = 32
    ,algo_FieldId_source_addr_host   = 33
    ,algo_FieldId_host               = 34
};

enum { algo_FieldIdEnum_N = 35 };


// --- algo_FileFlagsEnum

enum algo_FileFlagsEnum {                      // algo.FileFlags.value
     algo_FileFlags_read       = (u32(1)<<0)   // algo.FileFlags.read
    ,algo_FileFlags_write      = (u32(1)<<1)   // algo.FileFlags.write
    ,algo_FileFlags_append     = (u32(1)<<4)   // algo.FileFlags.append
    ,algo_FileFlags__throw     = (u32(1)<<5)   // algo.FileFlags._throw
    ,algo_FileFlags_temp       = (u32(1)<<6)   // algo.FileFlags.temp
    ,algo_FileFlags_overlap    = (u32(1)<<7)   // algo.FileFlags.overlap
    ,algo_FileFlags_linear     = (u32(1)<<8)   // algo.FileFlags.linear
    ,algo_FileFlags_printerr   = (u32(1)<<9)   // algo.FileFlags.printerr
};

enum { algo_FileFlagsEnum_N = 8 };


// --- algo_IOEvtFlagsEnum

enum algo_IOEvtFlagsEnum {                   // algo.IOEvtFlags.value
     algo_IOEvtFlags_read    = (u32(1)<<0)   // algo.IOEvtFlags.read
    ,algo_IOEvtFlags_write   = (u32(1)<<1)   // algo.IOEvtFlags.write
    ,algo_IOEvtFlags_eof     = (u32(1)<<2)   // algo.IOEvtFlags.eof
    ,algo_IOEvtFlags_err     = (u32(1)<<3)   // algo.IOEvtFlags.err
};

enum { algo_IOEvtFlagsEnum_N = 4 };


// --- algo_MonthEnum

enum algo_MonthEnum {             // algo.Month.value
     algo_Month_January     = 1
    ,algo_Month_February    = 2
    ,algo_Month_March       = 3
    ,algo_Month_April       = 4
    ,algo_Month_May         = 5
    ,algo_Month_June        = 6
    ,algo_Month_July        = 7
    ,algo_Month_August      = 8
    ,algo_Month_September   = 9
    ,algo_Month_October     = 10
    ,algo_Month_November    = 11
    ,algo_Month_December    = 12
    ,algo_Month_None        = 0
};

enum { algo_MonthEnum_N = 13 };


// --- algo_NumParseFlagsEnum

enum algo_NumParseFlagsEnum {                      // algo.NumParseFlags.value
     algo_NumParseFlags_err        = (u32(1)<<0)   // algo.NumParseFlags.err
    ,algo_NumParseFlags_ok         = (u32(1)<<1)   // algo.NumParseFlags.ok
    ,algo_NumParseFlags_neg        = (u32(1)<<2)   // algo.NumParseFlags.neg
    ,algo_NumParseFlags_overflow   = (u32(1)<<3)   // algo.NumParseFlags.overflow
    ,algo_NumParseFlags_hex        = (u32(1)<<4)   // algo.NumParseFlags.hex
};

enum { algo_NumParseFlagsEnum_N = 5 };


// --- algo_TermStyleEnum

enum algo_TermStyleEnum {             // algo.TermStyle.value
     algo_TermStyle_default   = 0
    ,algo_TermStyle_red       = 1<<0
    ,algo_TermStyle_green     = 1<<1
    ,algo_TermStyle_blue      = 1<<2
    ,algo_TermStyle_bold      = 1<<3
};

enum { algo_TermStyleEnum_N = 5 };


// --- algo_TextJustEnum

enum algo_TextJustEnum {            // algo.TextJust.value
     algo_TextJust_j_right    = 1
    ,algo_TextJust_j_left     = -1
    ,algo_TextJust_j_center   = 0
};

enum { algo_TextJustEnum_N = 3 };

namespace algo { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace algo { // gen:ns_field
} // gen:ns_field
// gen:ns_fwddecl2
namespace algo { struct cstring_ch_curs; }
namespace algo { struct ByteAry_ary_curs; }
namespace algo { struct Charset_ch_bitcurs; }
namespace algo { struct Charset_ch_curs; }
namespace algo { struct LineBuf_buf_curs; }
namespace algo { struct Md5Digest_value_curs; }
namespace algo { struct Sha1sig_sha1sig_curs; }
namespace algo { struct StringAry_ary_curs; }
namespace algo { struct Tuple_attrs_curs; }
namespace algo { struct U64Ary_ary_curs; }
namespace lib_json { struct FNode; }
namespace algo { struct cstring; }
namespace algo { struct Attr; }
namespace algo { struct Bool; }
namespace algo { struct ByteAry; }
namespace algo { struct Charset; }
namespace algo { struct Smallstr150; }
namespace algo { struct Comment; }
namespace algo { struct Smallstr250; }
namespace algo { struct CppExpr; }
namespace algo { struct UnTime; }
namespace algo { struct DateCache; }
namespace algo { struct DayRange; }
namespace algo { struct Decimal; }
namespace algo { struct DirEntry; }
namespace algo { struct DryrunQ; }
namespace algo { struct EchoQ; }
namespace algo { struct Errns; }
namespace algo { struct Errcode; }
namespace algo { struct FailokQ; }
namespace algo { struct FieldId; }
namespace algo { struct Fildes; }
namespace algo { struct FileFlags; }
namespace algo { struct I32Dec1; }
namespace algo { struct I32Dec2; }
namespace algo { struct I32Dec3; }
namespace algo { struct I32Dec4; }
namespace algo { struct I32Dec5; }
namespace algo { struct I64Dec1; }
namespace algo { struct I64Dec10; }
namespace algo { struct I64Dec2; }
namespace algo { struct I64Dec3; }
namespace algo { struct I64Dec4; }
namespace algo { struct I64Dec5; }
namespace algo { struct I64Dec6; }
namespace algo { struct I64Dec7; }
namespace algo { struct I64Dec8; }
namespace algo { struct I64Dec9; }
namespace algo { struct IOEvtFlags; }
namespace algo { struct IPoint; }
namespace algo { struct Smallstr50; }
namespace algo { struct Imdb; }
namespace algo { struct ImrowPtr; }
namespace algo { struct Smallstr100; }
namespace algo { struct Imtable; }
namespace algo { struct Ipmask; }
namespace algo { struct LineBuf; }
namespace algo { struct LnumStr10_U64; }
namespace algo { struct LnumStr11_U64; }
namespace algo { struct LnumStr12_U64; }
namespace algo { struct LnumStr13_U64_Base36; }
namespace algo { struct LnumStr16_U64_Base16; }
namespace algo { struct LnumStr1_U32; }
namespace algo { struct LnumStr20_U64; }
namespace algo { struct LnumStr22_U64; }
namespace algo { struct LnumStr2_U32; }
namespace algo { struct LnumStr3_U32; }
namespace algo { struct LnumStr4_U32; }
namespace algo { struct LnumStr5_U32; }
namespace algo { struct LnumStr5_U32_Base36; }
namespace algo { struct LnumStr6_U32; }
namespace algo { struct LnumStr7_U32; }
namespace algo { struct LnumStr7_U32_Base36; }
namespace algo { struct LnumStr8_U32; }
namespace algo { struct LnumStr8_U32_Base16; }
namespace algo { struct LnumStr8_U64; }
namespace algo { struct LnumStr9_U32; }
namespace algo { struct LnumStr9_U64; }
namespace algo { struct LspaceStr10; }
namespace algo { struct LspaceStr12; }
namespace algo { struct LspaceStr14; }
namespace algo { struct LspaceStr15; }
namespace algo { struct LspaceStr20_I64; }
namespace algo { struct LspaceStr20_U64; }
namespace algo { struct LspaceStr3; }
namespace algo { struct LspaceStr3_I16; }
namespace algo { struct LspaceStr4; }
namespace algo { struct LspaceStr5; }
namespace algo { struct LspaceStr5_I16; }
namespace algo { struct LspaceStr6; }
namespace algo { struct LspaceStr6_U32; }
namespace algo { struct LspaceStr7_I32_Base36; }
namespace algo { struct LspaceStr8; }
namespace algo { struct LspaceStr9; }
namespace algo { struct Md5Digest; }
namespace algo { struct Month; }
namespace algo { struct NumParseFlags; }
namespace algo { struct Protocol; }
namespace algo { struct RnullStr1; }
namespace algo { struct RnullStr10; }
namespace algo { struct RnullStr100; }
namespace algo { struct RnullStr1000; }
namespace algo { struct RnullStr11; }
namespace algo { struct RnullStr12; }
namespace algo { struct RnullStr129; }
namespace algo { struct RnullStr13; }
namespace algo { struct RnullStr14; }
namespace algo { struct RnullStr15; }
namespace algo { struct RnullStr151; }
namespace algo { struct RnullStr16; }
namespace algo { struct RnullStr17; }
namespace algo { struct RnullStr18; }
namespace algo { struct RnullStr19; }
namespace algo { struct RnullStr2; }
namespace algo { struct RnullStr20; }
namespace algo { struct RnullStr21; }
namespace algo { struct RnullStr24; }
namespace algo { struct RnullStr25; }
namespace algo { struct RnullStr28; }
namespace algo { struct RnullStr3; }
namespace algo { struct RnullStr30; }
namespace algo { struct RnullStr32; }
namespace algo { struct RnullStr33; }
namespace algo { struct RnullStr35; }
namespace algo { struct RnullStr36; }
namespace algo { struct RnullStr4; }
namespace algo { struct RnullStr40; }
namespace algo { struct RnullStr41; }
namespace algo { struct RnullStr43; }
namespace algo { struct RnullStr44; }
namespace algo { struct RnullStr48; }
namespace algo { struct RnullStr5; }
namespace algo { struct RnullStr50; }
namespace algo { struct RnullStr54; }
namespace algo { struct RnullStr55; }
namespace algo { struct RnullStr6; }
namespace algo { struct RnullStr60; }
namespace algo { struct RnullStr62; }
namespace algo { struct RnullStr66; }
namespace algo { struct RnullStr6_U32; }
namespace algo { struct RnullStr7; }
namespace algo { struct RnullStr8; }
namespace algo { struct RnullStr80; }
namespace algo { struct RnullStr9; }
namespace algo { struct RspaceStr10; }
namespace algo { struct RspaceStr100; }
namespace algo { struct RspaceStr11; }
namespace algo { struct RspaceStr12; }
namespace algo { struct RspaceStr128; }
namespace algo { struct RspaceStr14; }
namespace algo { struct RspaceStr15; }
namespace algo { struct RspaceStr16; }
namespace algo { struct RspaceStr18; }
namespace algo { struct RspaceStr2; }
namespace algo { struct RspaceStr20; }
namespace algo { struct RspaceStr200; }
namespace algo { struct RspaceStr21; }
namespace algo { struct RspaceStr24; }
namespace algo { struct RspaceStr240; }
namespace algo { struct RspaceStr25; }
namespace algo { struct RspaceStr26; }
namespace algo { struct RspaceStr3; }
namespace algo { struct RspaceStr31; }
namespace algo { struct RspaceStr32; }
namespace algo { struct RspaceStr4; }
namespace algo { struct RspaceStr40; }
namespace algo { struct RspaceStr5; }
namespace algo { struct RspaceStr50; }
namespace algo { struct RspaceStr6; }
namespace algo { struct RspaceStr64; }
namespace algo { struct RspaceStr7; }
namespace algo { struct RspaceStr75; }
namespace algo { struct RspaceStr8; }
namespace algo { struct RspaceStr9; }
namespace algo { struct SchedTime; }
namespace algo { struct SeqType; }
namespace algo { struct Sha1sig; }
namespace algo { struct Smallstr1; }
namespace algo { struct Smallstr10; }
namespace algo { struct Smallstr16; }
namespace algo { struct Smallstr2; }
namespace algo { struct Smallstr20; }
namespace algo { struct Smallstr200; }
namespace algo { struct Smallstr25; }
namespace algo { struct Smallstr3; }
namespace algo { struct Smallstr30; }
namespace algo { struct Smallstr32; }
namespace algo { struct Smallstr4; }
namespace algo { struct Smallstr40; }
namespace algo { struct Smallstr5; }
namespace algo { struct StringAry; }
namespace algo { struct TermStyle; }
namespace algo { struct TextJust; }
namespace algo { struct TstampCache; }
namespace algo { struct Tuple; }
namespace algo { struct U16Dec2; }
namespace algo { struct U32Dec1; }
namespace algo { struct U32Dec2; }
namespace algo { struct U32Dec3; }
namespace algo { struct U32Dec4; }
namespace algo { struct U32Dec5; }
namespace algo { struct U64Ary; }
namespace algo { struct U64Dec10; }
namespace algo { struct U64Dec2; }
namespace algo { struct U64Dec4; }
namespace algo { struct U64Dec5; }
namespace algo { struct U64Dec6; }
namespace algo { struct U64Dec7; }
namespace algo { struct U64Dec8; }
namespace algo { struct U64Dec9; }
namespace algo { struct URL; }
namespace algo { struct UnDiff; }
namespace algo { struct UnixDiff; }
namespace algo { struct UnixTime; }
namespace algo { struct WDiff; }
namespace algo { struct WTime; }
namespace algo { struct i32_Range; }
namespace algo { // gen:ns_print_struct

// --- algo.cstring
// create: algo.StringAry.ary (Tary)
struct cstring { // algo.cstring
    char*   ch_elems;   // pointer to elements
    u32     ch_n;       // number of elements in array
    u32     ch_max;     // max. capacity of array before realloc
    inline operator algo::strptr() const;
    cstring& operator =(const algo::strptr &t);
    cstring(const cstring &t);
    cstring& operator =(const cstring &s);
    explicit cstring(const algo::strptr &s);
    cstring(const tempstr &rhs);
    bool operator ==(const algo::cstring &rhs) const;
    bool operator !=(const algo::cstring &rhs) const;
    bool operator <(const algo::cstring &rhs) const;
    bool operator >(const algo::cstring &rhs) const;
    bool operator <=(const algo::cstring &rhs) const;
    bool operator >=(const algo::cstring &rhs) const;
    cstring();
    ~cstring();
};

// func:algo.cstring.ch.Eq
bool                 ch_Eq(const algo::cstring& parent,const algo::cstring &rhs) __attribute__((nothrow));
// func:algo.cstring.ch.Cmp
int                  ch_Cmp(algo::cstring& parent, algo::cstring &rhs) __attribute__((nothrow));
// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.cstring.ch.Addary
algo::aryptr<char>   ch_Addary(algo::cstring& parent, algo::aryptr<char> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.cstring.ch.Alloc
char&                ch_Alloc(algo::cstring& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.cstring.ch.AllocAt
char&                ch_AllocAt(algo::cstring& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.cstring.ch.AllocN
algo::aryptr<char>   ch_AllocN(algo::cstring& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.cstring.ch.EmptyQ
bool                 ch_EmptyQ(algo::cstring& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.cstring.ch.Find
char*                ch_Find(algo::cstring& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.cstring.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::cstring& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.cstring.ch.Last
char*                ch_Last(algo::cstring& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.cstring.ch.Max
i32                  ch_Max(algo::cstring& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.cstring.ch.N
i32                  ch_N(const algo::cstring& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.cstring.ch.Remove
void                 ch_Remove(algo::cstring& parent, u32 i) __attribute__((nothrow));
// func:algo.cstring.ch.RemoveAll
void                 ch_RemoveAll(algo::cstring& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.cstring.ch.RemoveLast
void                 ch_RemoveLast(algo::cstring& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.cstring.ch.Reserve
void                 ch_Reserve(algo::cstring& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.cstring.ch.AbsReserve
void                 ch_AbsReserve(algo::cstring& parent, int n) __attribute__((nothrow));
// Convert ch to a string.
// Array is printed as a regular string.
// func:algo.cstring.ch.Print
void                 ch_Print(algo::cstring& parent, algo::cstring &rhs) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.cstring.ch.Setary
void                 ch_Setary(algo::cstring& parent, algo::cstring &rhs) __attribute__((nothrow));
// Copy specified array into ch, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.cstring.ch.Setary2
void                 ch_Setary(algo::cstring& parent, const algo::aryptr<char> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.cstring.ch.qFind
char&                ch_qFind(algo::cstring& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.cstring.ch.qLast
char&                ch_qLast(algo::cstring& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.cstring.ch.rowid_Get
u64                  ch_rowid_Get(algo::cstring& parent, char &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.cstring.ch.AllocNVal
algo::aryptr<char>   ch_AllocNVal(algo::cstring& parent, int n_elems, const char& val) __attribute__((nothrow));
// The array is replaced with the input string. Function always succeeds.
// func:algo.cstring.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::cstring& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.cstring.ch_curs.Next
void                 cstring_ch_curs_Next(cstring_ch_curs &curs) __attribute__((nothrow));
// func:algo.cstring.ch_curs.Reset
void                 cstring_ch_curs_Reset(cstring_ch_curs &curs, algo::cstring &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.cstring.ch_curs.ValidQ
bool                 cstring_ch_curs_ValidQ(cstring_ch_curs &curs) __attribute__((nothrow));
// item access
// func:algo.cstring.ch_curs.Access
char&                cstring_ch_curs_Access(cstring_ch_curs &curs) __attribute__((nothrow));
// func:algo.cstring..Hash
// this function is 'extrn' and implemented by user
u32                  cstring_Hash(u32 prev, const algo::cstring & rhs) __attribute__((nothrow));
// Read fields of algo::cstring from an ascii string.
// func:algo.cstring..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 cstring_ReadStrptrMaybe(algo::cstring &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.cstring..Lt
bool                 cstring_Lt(algo::cstring& lhs, algo::cstring& rhs) __attribute__((nothrow));
// func:algo.cstring..Cmp
i32                  cstring_Cmp(algo::cstring& lhs, algo::cstring& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.cstring..Init
void                 cstring_Init(algo::cstring& parent);
// func:algo.cstring..Uninit
void                 cstring_Uninit(algo::cstring& parent) __attribute__((nothrow));
// func:algo.cstring..Eq
bool                 cstring_Eq(algo::cstring& lhs, algo::cstring& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.cstring..Update
bool                 cstring_Update(algo::cstring &lhs, algo::cstring& rhs) __attribute__((nothrow));
// Create JSON representation of algo::cstring under PARENT node
// cfmt:algo.cstring.Json  printfmt:Extern
// func:algo.cstring..FmtJson
// this function is 'extrn' and implemented by user
lib_json::FNode *    cstring_FmtJson(algo::cstring& row, lib_json::FNode *parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.cstring.String  printfmt:Extern
// func:algo.cstring..Print
// this function is 'extrn' and implemented by user
void                 cstring_Print(algo::cstring& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Attr
// create: algo.Tuple.attrs (Tary)
struct Attr { // algo.Attr
    algo::cstring   name;    // attribute name
    algo::cstring   value;   // attribute value
    explicit Attr(const algo::strptr&            in_name
        ,const algo::strptr&            in_value);
    bool operator ==(const algo::Attr &rhs) const;
    bool operator !=(const algo::Attr &rhs) const;
    Attr();
};

// Read fields of algo::Attr from an ascii string.
// func:algo.Attr..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Attr_ReadStrptrMaybe(algo::Attr &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Attr..Cmp
i32                  Attr_Cmp(algo::Attr& lhs, algo::Attr& rhs) __attribute__((nothrow));
// func:algo.Attr..Eq
bool                 Attr_Eq(algo::Attr& lhs, algo::Attr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Attr.String  printfmt:Extern
// func:algo.Attr..Print
// this function is 'extrn' and implemented by user
void                 Attr_Print(algo::Attr& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Bool
struct Bool { // algo.Bool
    u8   value;   //   false
    inline operator algo_BoolEnum() const;
    explicit Bool(u8                             in_value);
    Bool(algo_BoolEnum arg);
    Bool();
};

// Get value of field as enum type
// func:algo.Bool.value.GetEnum
algo_BoolEnum        value_GetEnum(const algo::Bool& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.Bool.value.SetEnum
void                 value_SetEnum(algo::Bool& parent, algo_BoolEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.Bool.value.ToCstr
const char*          value_ToCstr(const algo::Bool& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.Bool.value.Print
void                 value_Print(const algo::Bool& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.Bool.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::Bool& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.Bool.value.SetStrptr
void                 value_SetStrptr(algo::Bool& parent, algo::strptr rhs, algo_BoolEnum dflt) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.Bool..Init
void                 Bool_Init(algo::Bool& parent);
// print string representation of ROW to string STR
// cfmt:algo.Bool.String  printfmt:Extern
// func:algo.Bool..Print
// this function is 'extrn' and implemented by user
void                 Bool_Print(algo::Bool row, algo::cstring& str) __attribute__((nothrow));

// --- algo.ByteAry
struct ByteAry { // algo.ByteAry
    u8*   ary_elems;   // pointer to elements
    u32   ary_n;       // number of elements in array
    u32   ary_max;     // max. capacity of array before realloc
    inline operator algo::memptr() const;
    ByteAry();
    ~ByteAry();
private:
    // reftype Tary of algo.ByteAry.ary prohibits copy
    ByteAry(const ByteAry&){ /*disallow copy constructor */}
    void operator =(const ByteAry&){ /*disallow direct assignment */}
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.ByteAry.ary.Addary
algo::aryptr<u8>     ary_Addary(algo::ByteAry& parent, algo::aryptr<u8> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.ByteAry.ary.Alloc
u8&                  ary_Alloc(algo::ByteAry& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.ByteAry.ary.AllocAt
u8&                  ary_AllocAt(algo::ByteAry& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.ByteAry.ary.AllocN
algo::aryptr<u8>     ary_AllocN(algo::ByteAry& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.ByteAry.ary.EmptyQ
bool                 ary_EmptyQ(algo::ByteAry& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.ByteAry.ary.Find
u8*                  ary_Find(algo::ByteAry& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.ByteAry.ary.Getary
algo::aryptr<u8>     ary_Getary(const algo::ByteAry& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.ByteAry.ary.Last
u8*                  ary_Last(algo::ByteAry& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.ByteAry.ary.Max
i32                  ary_Max(algo::ByteAry& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.ByteAry.ary.N
i32                  ary_N(const algo::ByteAry& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.ByteAry.ary.Remove
void                 ary_Remove(algo::ByteAry& parent, u32 i) __attribute__((nothrow));
// func:algo.ByteAry.ary.RemoveAll
void                 ary_RemoveAll(algo::ByteAry& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.ByteAry.ary.RemoveLast
void                 ary_RemoveLast(algo::ByteAry& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.ByteAry.ary.Reserve
void                 ary_Reserve(algo::ByteAry& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.ByteAry.ary.AbsReserve
void                 ary_AbsReserve(algo::ByteAry& parent, int n) __attribute__((nothrow));
// Convert ary to a string.
// Array is printed as a regular string.
// func:algo.ByteAry.ary.Print
void                 ary_Print(algo::ByteAry& parent, algo::cstring &rhs) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.ByteAry.ary.Setary
void                 ary_Setary(algo::ByteAry& parent, algo::ByteAry &rhs) __attribute__((nothrow));
// Copy specified array into ary, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.ByteAry.ary.Setary2
void                 ary_Setary(algo::ByteAry& parent, const algo::aryptr<u8> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.ByteAry.ary.qFind
u8&                  ary_qFind(algo::ByteAry& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.ByteAry.ary.qLast
u8&                  ary_qLast(algo::ByteAry& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.ByteAry.ary.rowid_Get
u64                  ary_rowid_Get(algo::ByteAry& parent, u8 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.ByteAry.ary.AllocNVal
algo::aryptr<u8>     ary_AllocNVal(algo::ByteAry& parent, int n_elems, const u8& val) __attribute__((nothrow));
// The array is replaced with the input string. Function always succeeds.
// func:algo.ByteAry.ary.ReadStrptrMaybe
bool                 ary_ReadStrptrMaybe(algo::ByteAry& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.ByteAry.ary_curs.Next
void                 ByteAry_ary_curs_Next(ByteAry_ary_curs &curs) __attribute__((nothrow));
// func:algo.ByteAry.ary_curs.Reset
void                 ByteAry_ary_curs_Reset(ByteAry_ary_curs &curs, algo::ByteAry &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.ByteAry.ary_curs.ValidQ
bool                 ByteAry_ary_curs_ValidQ(ByteAry_ary_curs &curs) __attribute__((nothrow));
// item access
// func:algo.ByteAry.ary_curs.Access
u8&                  ByteAry_ary_curs_Access(ByteAry_ary_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.ByteAry..Init
void                 ByteAry_Init(algo::ByteAry& parent);
// func:algo.ByteAry..Uninit
void                 ByteAry_Uninit(algo::ByteAry& parent) __attribute__((nothrow));

// --- algo.Charset
struct Charset { // algo.Charset
    u64   ch_elems[8];   //   0  fixed array
    Charset();
};

// Get max # of bits in the bitset
// Return max. number of bits supported by array
// func:algo.Charset.ch.NBits
int                  ch_Nbits(algo::Charset& parent) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. No bounds checking
// func:algo.Charset.ch.qGetBit
bool                 ch_qGetBit(algo::Charset& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Retrieve value of bit #BIT_IDX in bit set. If bit index is out of bounds, return 0.
// func:algo.Charset.ch.GetBit
bool                 ch_GetBit(algo::Charset& parent, u32 bit_idx) __attribute__((__warn_unused_result__, nothrow));
// Check if all the bits in the bitset are equal to zero
// func:algo.Charset.ch.BitsEmptyQ
bool                 ch_BitsEmptyQ(algo::Charset& parent) __attribute__((__warn_unused_result__, nothrow));
// func:algo.Charset.ch.Sum1s
u64                  ch_Sum1s(algo::Charset& parent) __attribute__((__warn_unused_result__, nothrow));
// Clear bit # BIT_IDX in bit set. No bounds checking
// func:algo.Charset.ch.qClearBit
void                 ch_qClearBit(algo::Charset& parent, u32 bit_idx) __attribute__((nothrow));
// Clear bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing
// func:algo.Charset.ch.ClearBit
void                 ch_ClearBit(algo::Charset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
// func:algo.Charset.ch.qSetBit
void                 ch_qSetBit(algo::Charset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. If bit index is out of bounds, do nothing.
// func:algo.Charset.ch.SetBit
void                 ch_SetBit(algo::Charset& parent, u32 bit_idx) __attribute__((nothrow));
// Set bit # BIT_IDX in bit set. No bounds checking
// func:algo.Charset.ch.qSetBitVal
void                 ch_qSetBitVal(algo::Charset& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Or bit # BIT_IDX in bit set. No bounds checking
// func:algo.Charset.ch.qOrBitVal
void                 ch_qOrBitVal(algo::Charset& parent, u32 bit_idx, bool val) __attribute__((nothrow));
// Set all bits of array to zero.
// Note: this does not change what NBits will return.
// func:algo.Charset.ch.ClearBitsAll
void                 ch_ClearBitsAll(algo::Charset& parent) __attribute__((nothrow));
// Zero in PARENT any bits that are set in RHS.
// func:algo.Charset.ch.ClearBits
void                 ch_ClearBits(algo::Charset& parent, algo::Charset &rhs) __attribute__((nothrow));
// Set PARENT to union of two bitsets.
// (This function is not named Set.. to avoid triple entendre).
// func:algo.Charset.ch.OrBits
void                 ch_OrBits(algo::Charset& parent, algo::Charset &rhs) __attribute__((nothrow));
// Return smallest number N such that indexes of all 1 bits are below N
// func:algo.Charset.ch.Sup
i32                  ch_Sup(algo::Charset& parent) __attribute__((__warn_unused_result__, nothrow));
// Set all elements of fixed array to value RHS
// func:algo.Charset.ch.Fill
void                 ch_Fill(algo::Charset& parent, const u64 &rhs) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.Charset.ch.Find
u64*                 ch_Find(algo::Charset& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Access fixed array ch as aryptr.
// func:algo.Charset.ch.Getary
algo::aryptr<u64>    ch_Getary(algo::Charset& parent) __attribute__((nothrow));
// Return max number of items in the array
// func:algo.Charset.ch.Max
i32                  ch_Max(algo::Charset& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.Charset.ch.N
i32                  ch_N(const algo::Charset& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Set contents of fixed array to RHS; Input length is trimmed as necessary
// func:algo.Charset.ch.Setary
void                 ch_Setary(algo::Charset& parent, const algo::aryptr<u64> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo.Charset.ch.qFind
u64&                 ch_qFind(algo::Charset& parent, u64 t) __attribute__((nothrow));
// Convert ch to a string.
// The separator character is ','.
// func:algo.Charset.ch.Print
void                 ch_Print(algo::Charset& parent, algo::cstring &rhs) __attribute__((nothrow));
// Read array from string
// Convert string to field. Return success value
// func:algo.Charset.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Charset& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.Charset.ch_bitcurs.Next
void                 Charset_ch_bitcurs_Next(Charset_ch_bitcurs &curs);
// func:algo.Charset.ch_bitcurs.Reset
void                 Charset_ch_bitcurs_Reset(Charset_ch_bitcurs &curs, algo::Charset &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Charset.ch_bitcurs.ValidQ
bool                 Charset_ch_bitcurs_ValidQ(Charset_ch_bitcurs &curs) __attribute__((nothrow));
// item access
// func:algo.Charset.ch_bitcurs.Access
int&                 Charset_ch_bitcurs_Access(Charset_ch_bitcurs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Charset.ch_curs.Reset
void                 Charset_ch_curs_Reset(Charset_ch_curs &curs, algo::Charset &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Charset.ch_curs.ValidQ
bool                 Charset_ch_curs_ValidQ(Charset_ch_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo.Charset.ch_curs.Next
void                 Charset_ch_curs_Next(Charset_ch_curs &curs) __attribute__((nothrow));
// item access
// func:algo.Charset.ch_curs.Access
u64&                 Charset_ch_curs_Access(Charset_ch_curs &curs) __attribute__((nothrow));
// Read fields of algo::Charset from an ascii string.
// func:algo.Charset..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Charset_ReadStrptrMaybe(algo::Charset &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Charset..Init
void                 Charset_Init(algo::Charset& parent);

// --- algo.Smallstr150
struct Smallstr150 { // algo.Smallstr150
    enum { ch_max = 150 };
    u8 ch[150+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr150 &rhs) const;
    bool operator !=(const algo::Smallstr150 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr150.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr150.ch.Set
    void                 operator =(const algo::Smallstr150& parent) __attribute__((nothrow));
    // func:algo.Smallstr150.ch.Ctor
    Smallstr150(const algo::Smallstr150 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr150.ch.CtorStrptr
    Smallstr150(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr150();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr150.ch.Add
void                 ch_Add(algo::Smallstr150& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr150.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr150& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr150.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr150& parent) __attribute__((nothrow));
// func:algo.Smallstr150.ch.HashStrptr
u32                  Smallstr150_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr150.ch.Init
void                 ch_Init(algo::Smallstr150 &parent) __attribute__((nothrow));
// always return constant 150
// func:algo.Smallstr150.ch.Max
int                  ch_Max(algo::Smallstr150& parent) __attribute__((nothrow));
// func:algo.Smallstr150.ch.N
int                  ch_N(const algo::Smallstr150& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr150.ch.Print
void                 ch_Print(algo::Smallstr150& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr150.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr150& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr150.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr150& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr150..Hash
u32                  Smallstr150_Hash(u32 prev, const algo::Smallstr150 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr150 from an ascii string.
// The format of the string is the format of the algo::Smallstr150's only field
// func:algo.Smallstr150..ReadStrptrMaybe
bool                 Smallstr150_ReadStrptrMaybe(algo::Smallstr150 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr150..Cmp
i32                  Smallstr150_Cmp(algo::Smallstr150& lhs, algo::Smallstr150& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr150..Init
void                 Smallstr150_Init(algo::Smallstr150& parent);
// func:algo.Smallstr150..Eq
bool                 Smallstr150_Eq(algo::Smallstr150& lhs, algo::Smallstr150& rhs) __attribute__((nothrow));
// func:algo.Smallstr150..EqStrptr
bool                 Smallstr150_EqStrptr(const algo::Smallstr150& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr150.String  printfmt:Raw
// func:algo.Smallstr150..Print
void                 Smallstr150_Print(algo::Smallstr150& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Comment
struct Comment { // algo.Comment
    algo::Smallstr150   value;   // 150 chars should be enough
    inline operator algo::strptr() const;
    explicit Comment(const algo::strptr&            in_value);
    Comment();
};

// Read fields of algo::Comment from an ascii string.
// The format of the string is the format of the algo::Comment's only field
// func:algo.Comment..ReadStrptrMaybe
bool                 Comment_ReadStrptrMaybe(algo::Comment &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Comment..Cmp
i32                  Comment_Cmp(algo::Comment& lhs, algo::Comment& rhs) __attribute__((nothrow));
// func:algo.Comment..Eq
bool                 Comment_Eq(algo::Comment& lhs, algo::Comment& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Comment.String  printfmt:Raw
// func:algo.Comment..Print
void                 Comment_Print(algo::Comment& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr250
struct Smallstr250 { // algo.Smallstr250
    enum { ch_max = 250 };
    u8 ch[250+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr250 &rhs) const;
    bool operator !=(const algo::Smallstr250 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr250.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr250.ch.Set
    void                 operator =(const algo::Smallstr250& parent) __attribute__((nothrow));
    // func:algo.Smallstr250.ch.Ctor
    Smallstr250(const algo::Smallstr250 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr250.ch.CtorStrptr
    Smallstr250(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr250();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr250.ch.Add
void                 ch_Add(algo::Smallstr250& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr250.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr250& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr250.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr250& parent) __attribute__((nothrow));
// func:algo.Smallstr250.ch.HashStrptr
u32                  Smallstr250_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr250.ch.Init
void                 ch_Init(algo::Smallstr250 &parent) __attribute__((nothrow));
// always return constant 250
// func:algo.Smallstr250.ch.Max
int                  ch_Max(algo::Smallstr250& parent) __attribute__((nothrow));
// func:algo.Smallstr250.ch.N
int                  ch_N(const algo::Smallstr250& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr250.ch.Print
void                 ch_Print(algo::Smallstr250& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr250.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr250& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr250.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr250& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr250..Hash
u32                  Smallstr250_Hash(u32 prev, const algo::Smallstr250 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr250 from an ascii string.
// The format of the string is the format of the algo::Smallstr250's only field
// func:algo.Smallstr250..ReadStrptrMaybe
bool                 Smallstr250_ReadStrptrMaybe(algo::Smallstr250 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr250..Cmp
i32                  Smallstr250_Cmp(algo::Smallstr250& lhs, algo::Smallstr250& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr250..Init
void                 Smallstr250_Init(algo::Smallstr250& parent);
// func:algo.Smallstr250..Eq
bool                 Smallstr250_Eq(algo::Smallstr250& lhs, algo::Smallstr250& rhs) __attribute__((nothrow));
// func:algo.Smallstr250..EqStrptr
bool                 Smallstr250_EqStrptr(const algo::Smallstr250& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr250.String  printfmt:Raw
// func:algo.Smallstr250..Print
void                 Smallstr250_Print(algo::Smallstr250& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.CppExpr
struct CppExpr { // algo.CppExpr
    algo::Smallstr250   value;   // expression
    explicit CppExpr(const algo::strptr&            in_value);
    CppExpr();
};

// Read fields of algo::CppExpr from an ascii string.
// The format of the string is the format of the algo::CppExpr's only field
// func:algo.CppExpr..ReadStrptrMaybe
bool                 CppExpr_ReadStrptrMaybe(algo::CppExpr &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.CppExpr.String  printfmt:Raw
// func:algo.CppExpr..Print
void                 CppExpr_Print(algo::CppExpr& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.UnTime
#pragma pack(push,1)
struct UnTime { // algo.UnTime: Unix time * 1e9 + nanoseconds
    i64   value;   //   0
    explicit UnTime(i64                            in_value);
    bool operator ==(const algo::UnTime &rhs) const;
    bool operator !=(const algo::UnTime &rhs) const;
    bool operator <(const algo::UnTime &rhs) const;
    bool operator >(const algo::UnTime &rhs) const;
    bool operator <=(const algo::UnTime &rhs) const;
    bool operator >=(const algo::UnTime &rhs) const;
    UnTime();
};
#pragma pack(pop)

// func:algo.UnTime..Hash
u32                  UnTime_Hash(u32 prev, algo::UnTime rhs) __attribute__((nothrow));
// Read fields of algo::UnTime from an ascii string.
// func:algo.UnTime..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 UnTime_ReadStrptrMaybe(algo::UnTime &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.UnTime..Lt
bool                 UnTime_Lt(algo::UnTime lhs, algo::UnTime rhs) __attribute__((nothrow));
// func:algo.UnTime..Cmp
i32                  UnTime_Cmp(algo::UnTime lhs, algo::UnTime rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.UnTime..Init
void                 UnTime_Init(algo::UnTime& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.UnTime..UpdateMax
bool                 UnTime_UpdateMax(algo::UnTime &lhs, algo::UnTime rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.UnTime..Min
algo::UnTime         UnTime_Min(algo::UnTime lhs, algo::UnTime rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.UnTime..UpdateMin
bool                 UnTime_UpdateMin(algo::UnTime &lhs, algo::UnTime rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.UnTime..Max
algo::UnTime         UnTime_Max(algo::UnTime lhs, algo::UnTime rhs) __attribute__((nothrow));
// func:algo.UnTime..Eq
bool                 UnTime_Eq(algo::UnTime lhs, algo::UnTime rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.UnTime..Update
bool                 UnTime_Update(algo::UnTime &lhs, algo::UnTime rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.UnTime.String  printfmt:Extern
// func:algo.UnTime..Print
// this function is 'extrn' and implemented by user
void                 UnTime_Print(algo::UnTime row, algo::cstring& str) __attribute__((nothrow));

// --- algo.DateCache
struct DateCache { // algo.DateCache
    algo::UnTime   min;   // Min input value
    algo::UnTime   max;   // Max input value
    DateCache();
};


// --- algo.DayRange
struct DayRange { // algo.DayRange
    algo::UnTime   start;   //
    algo::UnTime   end;     //
    explicit DayRange(algo::UnTime                   in_start
        ,algo::UnTime                   in_end);
    DayRange();
};


// --- algo.Decimal
struct Decimal { // algo.Decimal
    i32   exponent;   //   0  Decimal exponent (power of ten) -  allowed range [-63,63]
    i64   mantissa;   //   0  Mantissa, full i64 range allowed
    explicit Decimal(i32                            in_exponent
        ,i64                            in_mantissa);
    bool operator ==(const algo::Decimal &rhs) const;
    bool operator !=(const algo::Decimal &rhs) const;
    Decimal();
};

// Read fields of algo::Decimal from an ascii string.
// func:algo.Decimal..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Decimal_ReadStrptrMaybe(algo::Decimal &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Decimal..Cmp
i32                  Decimal_Cmp(algo::Decimal lhs, algo::Decimal rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Decimal..Init
void                 Decimal_Init(algo::Decimal& parent);
// func:algo.Decimal..Eq
bool                 Decimal_Eq(algo::Decimal lhs, algo::Decimal rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Decimal.String  printfmt:Extern
// func:algo.Decimal..Print
// this function is 'extrn' and implemented by user
void                 Decimal_Print(algo::Decimal row, algo::cstring& str) __attribute__((nothrow));

// --- algo.DirEntry
struct DirEntry { // algo.DirEntry
    algo::cstring   dirname;      // Base directory name, e.g. /tmp
    algo::cstring   pattern;      // Shell wildcard to match, e.g. aa*bb
    algo::cstring   pathname;     // Current pathname, e.g. /tmp/aaCbb
    algo::cstring   filename;     // Current filename, e.g. aaCbb
    u64             mode;         //   0
    u64             size;         //   0  Size of file in bytes
    algo::UnTime    mtime;        // Modification time of file
    algo::UnTime    ctime;        // Change time of file
    bool            eof;          //   false  (internal) EOF flag -- no more dir entries left
    bool            match;        //   false  (internal) File entry matches pattern
    bool            is_dir;       //   false  File is a directory
    DIR*            dir_handle;   // (internal) handle for scanning. optional pointer
    DirEntry();
    ~DirEntry();
private:
    // user-defined fcleanup on algo.DirEntry.dir_handle prevents copy
    DirEntry(const DirEntry&){ /*disallow copy constructor */}
    void operator =(const DirEntry&){ /*disallow direct assignment */}
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field dir_handle of algo::DirEntry
// func:algo.DirEntry.dir_handle.Cleanup
// this function is 'extrn' and implemented by user
void                 dir_handle_Cleanup(algo::DirEntry& parent) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.DirEntry..Init
void                 DirEntry_Init(algo::DirEntry& parent);
// func:algo.DirEntry..Uninit
void                 DirEntry_Uninit(algo::DirEntry& parent) __attribute__((nothrow));

// --- algo.DryrunQ
struct DryrunQ { // algo.DryrunQ: Symbolic bool
    bool   value;   //   false
    inline operator bool() const;
    explicit DryrunQ(bool                           in_value);
    DryrunQ();
};

// Set all fields to initial values.
// func:algo.DryrunQ..Init
void                 DryrunQ_Init(algo::DryrunQ& parent);
// print string representation of ROW to string STR
// cfmt:algo.DryrunQ.String  printfmt:Raw
// func:algo.DryrunQ..Print
void                 DryrunQ_Print(algo::DryrunQ row, algo::cstring& str) __attribute__((nothrow));

// --- algo.EchoQ
struct EchoQ { // algo.EchoQ: Symbolic bool
    bool   value;   //   false
    inline operator algo_EchoQEnum() const;
    explicit EchoQ(bool                           in_value);
    EchoQ(algo_EchoQEnum arg);
    EchoQ();
};

// Get value of field as enum type
// func:algo.EchoQ.value.GetEnum
algo_EchoQEnum       value_GetEnum(const algo::EchoQ& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.EchoQ.value.SetEnum
void                 value_SetEnum(algo::EchoQ& parent, algo_EchoQEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.EchoQ.value.ToCstr
const char*          value_ToCstr(const algo::EchoQ& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.EchoQ.value.Print
void                 value_Print(const algo::EchoQ& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.EchoQ.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::EchoQ& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.EchoQ.value.SetStrptr
void                 value_SetStrptr(algo::EchoQ& parent, algo::strptr rhs, algo_EchoQEnum dflt) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.EchoQ..Init
void                 EchoQ_Init(algo::EchoQ& parent);
// print string representation of ROW to string STR
// cfmt:algo.EchoQ.String  printfmt:Raw
// func:algo.EchoQ..Print
void                 EchoQ_Print(algo::EchoQ row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Errns
// create: algo.Errcode.type (Bitfld)
struct Errns { // algo.Errns: Error namespace.
    u8   value;   //   0
    inline operator algo_ErrnsEnum() const;
    explicit Errns(u8                             in_value);
    Errns(algo_ErrnsEnum arg);
    Errns();
};

// Get value of field as enum type
// func:algo.Errns.value.GetEnum
algo_ErrnsEnum       value_GetEnum(const algo::Errns& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.Errns.value.SetEnum
void                 value_SetEnum(algo::Errns& parent, algo_ErrnsEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.Errns.value.ToCstr
const char*          value_ToCstr(const algo::Errns& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.Errns.value.Print
void                 value_Print(const algo::Errns& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.Errns.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::Errns& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.Errns.value.SetStrptr
void                 value_SetStrptr(algo::Errns& parent, algo::strptr rhs, algo_ErrnsEnum dflt) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.Errns..Init
void                 Errns_Init(algo::Errns& parent);

// --- algo.Errcode
struct Errcode { // algo.Errcode
    u64   value;   //   0
    Errcode();
};

// Retrieve bitfield from value of field value
//    32 bits starting at bit 0.
// func:algo.Errcode.code.Get
i32                  code_Get(const algo::Errcode& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    32 bits starting at bit 0.
// func:algo.Errcode.code.Set
void                 code_Set(algo::Errcode& parent, i32 rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    8 bits starting at bit 32.
// func:algo.Errcode.type.Get
algo::Errns          type_Get(const algo::Errcode& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    8 bits starting at bit 32.
// func:algo.Errcode.type.Set
void                 type_Set(algo::Errcode& parent, algo::Errns rhs) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.Errcode..Init
void                 Errcode_Init(algo::Errcode& parent);
// print string representation of ROW to string STR
// cfmt:algo.Errcode.String  printfmt:Extern
// func:algo.Errcode..Print
// this function is 'extrn' and implemented by user
void                 Errcode_Print(algo::Errcode& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.FailokQ
struct FailokQ { // algo.FailokQ: Symbolic bool
    bool   value;   //   false
    inline operator algo_FailokQEnum() const;
    explicit FailokQ(bool                           in_value);
    FailokQ(algo_FailokQEnum arg);
    FailokQ();
};

// Get value of field as enum type
// func:algo.FailokQ.value.GetEnum
algo_FailokQEnum     value_GetEnum(const algo::FailokQ& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.FailokQ.value.SetEnum
void                 value_SetEnum(algo::FailokQ& parent, algo_FailokQEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.FailokQ.value.ToCstr
const char*          value_ToCstr(const algo::FailokQ& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.FailokQ.value.Print
void                 value_Print(const algo::FailokQ& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.FailokQ.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::FailokQ& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.FailokQ.value.SetStrptr
void                 value_SetStrptr(algo::FailokQ& parent, algo::strptr rhs, algo_FailokQEnum dflt) __attribute__((nothrow));

// Set all fields to initial values.
// func:algo.FailokQ..Init
void                 FailokQ_Init(algo::FailokQ& parent);
// print string representation of ROW to string STR
// cfmt:algo.FailokQ.String  printfmt:Raw
// func:algo.FailokQ..Print
void                 FailokQ_Print(algo::FailokQ row, algo::cstring& str) __attribute__((nothrow));

// --- algo.FieldId
#pragma pack(push,1)
struct FieldId { // algo.FieldId: Field read helper
    i32   value;   //   -1
    inline operator algo_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(algo_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:algo.FieldId.value.GetEnum
algo_FieldIdEnum     value_GetEnum(const algo::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.FieldId.value.SetEnum
void                 value_SetEnum(algo::FieldId& parent, algo_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.FieldId.value.ToCstr
const char*          value_ToCstr(const algo::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.FieldId.value.Print
void                 value_Print(const algo::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.FieldId.value.SetStrptr
void                 value_SetStrptr(algo::FieldId& parent, algo::strptr rhs, algo_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo::FieldId from an ascii string.
// The format of the string is the format of the algo::FieldId's only field
// func:algo.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(algo::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.FieldId..Init
void                 FieldId_Init(algo::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:algo.FieldId.String  printfmt:Raw
// func:algo.FieldId..Print
void                 FieldId_Print(algo::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Fildes
struct Fildes { // algo.Fildes: File descriptor primary key
    i32   value;   //   -1  -1 is invalid value; 0 and above are valid (stdin)
    explicit Fildes(i32                            in_value);
    bool operator ==(const algo::Fildes &rhs) const;
    bool operator !=(const algo::Fildes &rhs) const;
    bool operator <(const algo::Fildes &rhs) const;
    bool operator >(const algo::Fildes &rhs) const;
    bool operator <=(const algo::Fildes &rhs) const;
    bool operator >=(const algo::Fildes &rhs) const;
    Fildes();
};

// func:algo.Fildes..Hash
u32                  Fildes_Hash(u32 prev, const algo::Fildes & rhs) __attribute__((nothrow));
// Read fields of algo::Fildes from an ascii string.
// The format of the string is the format of the algo::Fildes's only field
// func:algo.Fildes..ReadStrptrMaybe
bool                 Fildes_ReadStrptrMaybe(algo::Fildes &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Fildes..Lt
bool                 Fildes_Lt(algo::Fildes& lhs, algo::Fildes& rhs) __attribute__((nothrow));
// func:algo.Fildes..Cmp
i32                  Fildes_Cmp(algo::Fildes& lhs, algo::Fildes& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Fildes..Init
void                 Fildes_Init(algo::Fildes& parent);
// func:algo.Fildes..Eq
bool                 Fildes_Eq(algo::Fildes& lhs, algo::Fildes& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.Fildes..Update
bool                 Fildes_Update(algo::Fildes &lhs, algo::Fildes& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Fildes.String  printfmt:Raw
// func:algo.Fildes..Print
void                 Fildes_Print(algo::Fildes& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.FileFlags
struct FileFlags { // algo.FileFlags
    u32   value;   //   0
    inline operator algo_FileFlagsEnum() const;
    explicit FileFlags(u32                            in_value);
    FileFlags(algo_FileFlagsEnum arg);
    FileFlags();
};

// Retrieve bitfield from value of field value
//    1 bits starting at bit 4.
// func:algo.FileFlags.append.Get
bool                 append_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 4.
// func:algo.FileFlags.append.Set
void                 append_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 0.
// func:algo.FileFlags.read.Get
bool                 read_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 0.
// func:algo.FileFlags.read.Set
void                 read_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 1.
// func:algo.FileFlags.write.Get
bool                 write_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 1.
// func:algo.FileFlags.write.Set
void                 write_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 5.
// func:algo.FileFlags._throw.Get
bool                 _throw_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 5.
// func:algo.FileFlags._throw.Set
void                 _throw_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 6.
// func:algo.FileFlags.temp.Get
bool                 temp_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 6.
// func:algo.FileFlags.temp.Set
void                 temp_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 7.
// func:algo.FileFlags.overlap.Get
bool                 overlap_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 7.
// func:algo.FileFlags.overlap.Set
void                 overlap_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 8.
// func:algo.FileFlags.linear.Get
bool                 linear_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 8.
// func:algo.FileFlags.linear.Set
void                 linear_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 9.
// func:algo.FileFlags.printerr.Get
bool                 printerr_Get(const algo::FileFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 9.
// func:algo.FileFlags.printerr.Set
void                 printerr_Set(algo::FileFlags& parent, bool rhs) __attribute__((nothrow));

// func:algo.FileFlags..ReadFieldMaybe
bool                 FileFlags_ReadFieldMaybe(algo::FileFlags& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo::FileFlags from an ascii string.
// func:algo.FileFlags..ReadStrptrMaybe
bool                 FileFlags_ReadStrptrMaybe(algo::FileFlags &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.FileFlags..Init
void                 FileFlags_Init(algo::FileFlags& parent);
// print string representation of ROW to string STR
// cfmt:algo.FileFlags.String  printfmt:Bitset
// func:algo.FileFlags..Print
void                 FileFlags_Print(algo::FileFlags& row, algo::cstring& str) __attribute__((nothrow));
// func:algo.FileFlags..GetAnon
algo::strptr         FileFlags_GetAnon(algo::FileFlags &parent, i32 idx) __attribute__((nothrow));

// --- algo.I32Dec1
struct I32Dec1 { // algo.I32Dec1: signed i32, scale 1e1
    i32   value;   //   0
    inline operator i32() const;
    explicit I32Dec1(i32                            in_value);
    I32Dec1();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I32Dec1.value.qSetDouble
void                 value_qSetDouble(algo::I32Dec1& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec1.value.GetDouble
double               value_GetDouble(const algo::I32Dec1& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10)
// func:algo.I32Dec1.value.GetInt
i32                  value_GetInt(const algo::I32Dec1& parent) __attribute__((nothrow));
// Return constant 10
// func:algo.I32Dec1.value.GetScale
i32                  I32Dec1_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I32Dec1.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I32Dec1& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec1.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I32Dec1& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I32Dec1.value.Print
void                 value_Print(algo::I32Dec1& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I32Dec1..Hash
u32                  I32Dec1_Hash(u32 prev, algo::I32Dec1 rhs) __attribute__((nothrow));
// Read fields of algo::I32Dec1 from an ascii string.
// The format of the string is the format of the algo::I32Dec1's only field
// func:algo.I32Dec1..ReadStrptrMaybe
bool                 I32Dec1_ReadStrptrMaybe(algo::I32Dec1 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I32Dec1..Init
void                 I32Dec1_Init(algo::I32Dec1& parent);
// print string representation of ROW to string STR
// cfmt:algo.I32Dec1.String  printfmt:Raw
// func:algo.I32Dec1..Print
void                 I32Dec1_Print(algo::I32Dec1 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I32Dec2
struct I32Dec2 { // algo.I32Dec2: signed i32, scale 1e2
    i32   value;   //   0
    inline operator i32() const;
    explicit I32Dec2(i32                            in_value);
    I32Dec2();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I32Dec2.value.qSetDouble
void                 value_qSetDouble(algo::I32Dec2& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec2.value.GetDouble
double               value_GetDouble(const algo::I32Dec2& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100)
// func:algo.I32Dec2.value.GetInt
i32                  value_GetInt(const algo::I32Dec2& parent) __attribute__((nothrow));
// Return constant 100
// func:algo.I32Dec2.value.GetScale
i32                  I32Dec2_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I32Dec2.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I32Dec2& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec2.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I32Dec2& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I32Dec2.value.Print
void                 value_Print(algo::I32Dec2& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I32Dec2..Hash
u32                  I32Dec2_Hash(u32 prev, algo::I32Dec2 rhs) __attribute__((nothrow));
// Read fields of algo::I32Dec2 from an ascii string.
// The format of the string is the format of the algo::I32Dec2's only field
// func:algo.I32Dec2..ReadStrptrMaybe
bool                 I32Dec2_ReadStrptrMaybe(algo::I32Dec2 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I32Dec2..Init
void                 I32Dec2_Init(algo::I32Dec2& parent);
// print string representation of ROW to string STR
// cfmt:algo.I32Dec2.String  printfmt:Raw
// func:algo.I32Dec2..Print
void                 I32Dec2_Print(algo::I32Dec2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I32Dec3
struct I32Dec3 { // algo.I32Dec3
    i32   value;   //   0
    inline operator i32() const;
    explicit I32Dec3(i32                            in_value);
    I32Dec3();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I32Dec3.value.qSetDouble
void                 value_qSetDouble(algo::I32Dec3& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec3.value.GetDouble
double               value_GetDouble(const algo::I32Dec3& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000)
// func:algo.I32Dec3.value.GetInt
i32                  value_GetInt(const algo::I32Dec3& parent) __attribute__((nothrow));
// Return constant 1000
// func:algo.I32Dec3.value.GetScale
i32                  I32Dec3_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I32Dec3.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I32Dec3& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec3.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I32Dec3& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I32Dec3.value.Print
void                 value_Print(algo::I32Dec3& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I32Dec3..Hash
u32                  I32Dec3_Hash(u32 prev, algo::I32Dec3 rhs) __attribute__((nothrow));
// Read fields of algo::I32Dec3 from an ascii string.
// The format of the string is the format of the algo::I32Dec3's only field
// func:algo.I32Dec3..ReadStrptrMaybe
bool                 I32Dec3_ReadStrptrMaybe(algo::I32Dec3 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I32Dec3..Init
void                 I32Dec3_Init(algo::I32Dec3& parent);
// print string representation of ROW to string STR
// cfmt:algo.I32Dec3.String  printfmt:Raw
// func:algo.I32Dec3..Print
void                 I32Dec3_Print(algo::I32Dec3 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I32Dec4
struct I32Dec4 { // algo.I32Dec4
    i32   value;   //   0
    inline operator i32() const;
    explicit I32Dec4(i32                            in_value);
    I32Dec4();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I32Dec4.value.qSetDouble
void                 value_qSetDouble(algo::I32Dec4& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec4.value.GetDouble
double               value_GetDouble(const algo::I32Dec4& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000)
// func:algo.I32Dec4.value.GetInt
i32                  value_GetInt(const algo::I32Dec4& parent) __attribute__((nothrow));
// Return constant 10000
// func:algo.I32Dec4.value.GetScale
i32                  I32Dec4_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I32Dec4.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I32Dec4& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec4.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I32Dec4& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I32Dec4.value.Print
void                 value_Print(algo::I32Dec4& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I32Dec4..Hash
u32                  I32Dec4_Hash(u32 prev, algo::I32Dec4 rhs) __attribute__((nothrow));
// Read fields of algo::I32Dec4 from an ascii string.
// The format of the string is the format of the algo::I32Dec4's only field
// func:algo.I32Dec4..ReadStrptrMaybe
bool                 I32Dec4_ReadStrptrMaybe(algo::I32Dec4 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I32Dec4..Init
void                 I32Dec4_Init(algo::I32Dec4& parent);
// print string representation of ROW to string STR
// cfmt:algo.I32Dec4.String  printfmt:Raw
// func:algo.I32Dec4..Print
void                 I32Dec4_Print(algo::I32Dec4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I32Dec5
struct I32Dec5 { // algo.I32Dec5
    i32   value;   //   0
    inline operator i32() const;
    explicit I32Dec5(i32                            in_value);
    I32Dec5();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I32Dec5.value.qSetDouble
void                 value_qSetDouble(algo::I32Dec5& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec5.value.GetDouble
double               value_GetDouble(const algo::I32Dec5& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000)
// func:algo.I32Dec5.value.GetInt
i32                  value_GetInt(const algo::I32Dec5& parent) __attribute__((nothrow));
// Return constant 100000
// func:algo.I32Dec5.value.GetScale
i32                  I32Dec5_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I32Dec5.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I32Dec5& parent, double val) __attribute__((nothrow));
// func:algo.I32Dec5.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I32Dec5& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I32Dec5.value.Print
void                 value_Print(algo::I32Dec5& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I32Dec5..Hash
u32                  I32Dec5_Hash(u32 prev, algo::I32Dec5 rhs) __attribute__((nothrow));
// Read fields of algo::I32Dec5 from an ascii string.
// The format of the string is the format of the algo::I32Dec5's only field
// func:algo.I32Dec5..ReadStrptrMaybe
bool                 I32Dec5_ReadStrptrMaybe(algo::I32Dec5 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I32Dec5..Init
void                 I32Dec5_Init(algo::I32Dec5& parent);
// print string representation of ROW to string STR
// cfmt:algo.I32Dec5.String  printfmt:Raw
// func:algo.I32Dec5..Print
void                 I32Dec5_Print(algo::I32Dec5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec1
struct I64Dec1 { // algo.I64Dec1
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec1(i64                            in_value);
    I64Dec1();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec1.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec1& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec1.value.GetDouble
double               value_GetDouble(const algo::I64Dec1& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10)
// func:algo.I64Dec1.value.GetInt
i64                  value_GetInt(const algo::I64Dec1& parent) __attribute__((nothrow));
// Return constant 10
// func:algo.I64Dec1.value.GetScale
i64                  I64Dec1_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec1.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec1& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec1.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec1& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec1.value.Print
void                 value_Print(algo::I64Dec1& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec1..Hash
u32                  I64Dec1_Hash(u32 prev, algo::I64Dec1 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec1 from an ascii string.
// The format of the string is the format of the algo::I64Dec1's only field
// func:algo.I64Dec1..ReadStrptrMaybe
bool                 I64Dec1_ReadStrptrMaybe(algo::I64Dec1 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec1..Init
void                 I64Dec1_Init(algo::I64Dec1& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec1.String  printfmt:Raw
// func:algo.I64Dec1..Print
void                 I64Dec1_Print(algo::I64Dec1 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec10
struct I64Dec10 { // algo.I64Dec10: signed i64, scale 1e10
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec10(i64                            in_value);
    I64Dec10();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec10.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec10& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec10.value.GetDouble
double               value_GetDouble(const algo::I64Dec10& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000000000)
// func:algo.I64Dec10.value.GetInt
i64                  value_GetInt(const algo::I64Dec10& parent) __attribute__((nothrow));
// Return constant 10000000000
// func:algo.I64Dec10.value.GetScale
i64                  I64Dec10_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec10.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec10& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec10.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec10& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec10.value.Print
void                 value_Print(algo::I64Dec10& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec10..Hash
u32                  I64Dec10_Hash(u32 prev, algo::I64Dec10 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec10 from an ascii string.
// The format of the string is the format of the algo::I64Dec10's only field
// func:algo.I64Dec10..ReadStrptrMaybe
bool                 I64Dec10_ReadStrptrMaybe(algo::I64Dec10 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec10..Init
void                 I64Dec10_Init(algo::I64Dec10& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec10.String  printfmt:Raw
// func:algo.I64Dec10..Print
void                 I64Dec10_Print(algo::I64Dec10 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec2
struct I64Dec2 { // algo.I64Dec2
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec2(i64                            in_value);
    I64Dec2();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec2.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec2& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec2.value.GetDouble
double               value_GetDouble(const algo::I64Dec2& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100)
// func:algo.I64Dec2.value.GetInt
i64                  value_GetInt(const algo::I64Dec2& parent) __attribute__((nothrow));
// Return constant 100
// func:algo.I64Dec2.value.GetScale
i64                  I64Dec2_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec2.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec2& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec2.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec2& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec2.value.Print
void                 value_Print(algo::I64Dec2& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec2..Hash
u32                  I64Dec2_Hash(u32 prev, algo::I64Dec2 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec2 from an ascii string.
// The format of the string is the format of the algo::I64Dec2's only field
// func:algo.I64Dec2..ReadStrptrMaybe
bool                 I64Dec2_ReadStrptrMaybe(algo::I64Dec2 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec2..Init
void                 I64Dec2_Init(algo::I64Dec2& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec2.String  printfmt:Raw
// func:algo.I64Dec2..Print
void                 I64Dec2_Print(algo::I64Dec2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec3
struct I64Dec3 { // algo.I64Dec3
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec3(i64                            in_value);
    I64Dec3();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec3.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec3& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec3.value.GetDouble
double               value_GetDouble(const algo::I64Dec3& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000)
// func:algo.I64Dec3.value.GetInt
i64                  value_GetInt(const algo::I64Dec3& parent) __attribute__((nothrow));
// Return constant 1000
// func:algo.I64Dec3.value.GetScale
i64                  I64Dec3_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec3.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec3& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec3.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec3& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec3.value.Print
void                 value_Print(algo::I64Dec3& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec3..Hash
u32                  I64Dec3_Hash(u32 prev, algo::I64Dec3 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec3 from an ascii string.
// The format of the string is the format of the algo::I64Dec3's only field
// func:algo.I64Dec3..ReadStrptrMaybe
bool                 I64Dec3_ReadStrptrMaybe(algo::I64Dec3 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec3..Init
void                 I64Dec3_Init(algo::I64Dec3& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec3.String  printfmt:Raw
// func:algo.I64Dec3..Print
void                 I64Dec3_Print(algo::I64Dec3 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec4
#pragma pack(push,1)
struct I64Dec4 { // algo.I64Dec4
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec4(i64                            in_value);
    I64Dec4();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec4.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec4& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec4.value.GetDouble
double               value_GetDouble(const algo::I64Dec4& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000)
// func:algo.I64Dec4.value.GetInt
i64                  value_GetInt(const algo::I64Dec4& parent) __attribute__((nothrow));
// Return constant 10000
// func:algo.I64Dec4.value.GetScale
i64                  I64Dec4_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec4.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec4& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec4.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec4& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec4.value.Print
void                 value_Print(algo::I64Dec4& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec4..Hash
u32                  I64Dec4_Hash(u32 prev, algo::I64Dec4 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec4 from an ascii string.
// The format of the string is the format of the algo::I64Dec4's only field
// func:algo.I64Dec4..ReadStrptrMaybe
bool                 I64Dec4_ReadStrptrMaybe(algo::I64Dec4 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec4..Init
void                 I64Dec4_Init(algo::I64Dec4& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec4.String  printfmt:Raw
// func:algo.I64Dec4..Print
void                 I64Dec4_Print(algo::I64Dec4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec5
#pragma pack(push,1)
struct I64Dec5 { // algo.I64Dec5
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec5(i64                            in_value);
    I64Dec5();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec5.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec5& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec5.value.GetDouble
double               value_GetDouble(const algo::I64Dec5& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000)
// func:algo.I64Dec5.value.GetInt
i64                  value_GetInt(const algo::I64Dec5& parent) __attribute__((nothrow));
// Return constant 100000
// func:algo.I64Dec5.value.GetScale
i64                  I64Dec5_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec5.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec5& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec5.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec5& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec5.value.Print
void                 value_Print(algo::I64Dec5& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec5..Hash
u32                  I64Dec5_Hash(u32 prev, algo::I64Dec5 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec5 from an ascii string.
// The format of the string is the format of the algo::I64Dec5's only field
// func:algo.I64Dec5..ReadStrptrMaybe
bool                 I64Dec5_ReadStrptrMaybe(algo::I64Dec5 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec5..Init
void                 I64Dec5_Init(algo::I64Dec5& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec5.String  printfmt:Raw
// func:algo.I64Dec5..Print
void                 I64Dec5_Print(algo::I64Dec5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec6
struct I64Dec6 { // algo.I64Dec6
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec6(i64                            in_value);
    I64Dec6();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec6.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec6& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec6.value.GetDouble
double               value_GetDouble(const algo::I64Dec6& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000000)
// func:algo.I64Dec6.value.GetInt
i64                  value_GetInt(const algo::I64Dec6& parent) __attribute__((nothrow));
// Return constant 1000000
// func:algo.I64Dec6.value.GetScale
i64                  I64Dec6_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec6.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec6& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec6.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec6& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec6.value.Print
void                 value_Print(algo::I64Dec6& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec6..Hash
u32                  I64Dec6_Hash(u32 prev, algo::I64Dec6 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec6 from an ascii string.
// The format of the string is the format of the algo::I64Dec6's only field
// func:algo.I64Dec6..ReadStrptrMaybe
bool                 I64Dec6_ReadStrptrMaybe(algo::I64Dec6 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec6..Init
void                 I64Dec6_Init(algo::I64Dec6& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec6.String  printfmt:Raw
// func:algo.I64Dec6..Print
void                 I64Dec6_Print(algo::I64Dec6 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec7
struct I64Dec7 { // algo.I64Dec7: signed i64, scale 1e7
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec7(i64                            in_value);
    I64Dec7();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec7.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec7& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec7.value.GetDouble
double               value_GetDouble(const algo::I64Dec7& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000000)
// func:algo.I64Dec7.value.GetInt
i64                  value_GetInt(const algo::I64Dec7& parent) __attribute__((nothrow));
// Return constant 10000000
// func:algo.I64Dec7.value.GetScale
i64                  I64Dec7_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec7.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec7& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec7.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec7& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec7.value.Print
void                 value_Print(algo::I64Dec7& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec7..Hash
u32                  I64Dec7_Hash(u32 prev, algo::I64Dec7 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec7 from an ascii string.
// The format of the string is the format of the algo::I64Dec7's only field
// func:algo.I64Dec7..ReadStrptrMaybe
bool                 I64Dec7_ReadStrptrMaybe(algo::I64Dec7 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec7..Init
void                 I64Dec7_Init(algo::I64Dec7& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec7.String  printfmt:Raw
// func:algo.I64Dec7..Print
void                 I64Dec7_Print(algo::I64Dec7 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec8
#pragma pack(push,1)
struct I64Dec8 { // algo.I64Dec8: signed i64, scale 1e8
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec8(i64                            in_value);
    I64Dec8();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec8.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec8& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec8.value.GetDouble
double               value_GetDouble(const algo::I64Dec8& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000000)
// func:algo.I64Dec8.value.GetInt
i64                  value_GetInt(const algo::I64Dec8& parent) __attribute__((nothrow));
// Return constant 100000000
// func:algo.I64Dec8.value.GetScale
i64                  I64Dec8_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec8.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec8& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec8.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec8& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec8.value.Print
void                 value_Print(algo::I64Dec8& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec8..Hash
u32                  I64Dec8_Hash(u32 prev, algo::I64Dec8 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec8 from an ascii string.
// The format of the string is the format of the algo::I64Dec8's only field
// func:algo.I64Dec8..ReadStrptrMaybe
bool                 I64Dec8_ReadStrptrMaybe(algo::I64Dec8 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec8..Init
void                 I64Dec8_Init(algo::I64Dec8& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec8.String  printfmt:Raw
// func:algo.I64Dec8..Print
void                 I64Dec8_Print(algo::I64Dec8 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.I64Dec9
struct I64Dec9 { // algo.I64Dec9: signed i64, scale 1e9
    i64   value;   //   0
    inline operator i64() const;
    explicit I64Dec9(i64                            in_value);
    I64Dec9();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.I64Dec9.value.qSetDouble
void                 value_qSetDouble(algo::I64Dec9& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec9.value.GetDouble
double               value_GetDouble(const algo::I64Dec9& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000000000)
// func:algo.I64Dec9.value.GetInt
i64                  value_GetInt(const algo::I64Dec9& parent) __attribute__((nothrow));
// Return constant 1000000000
// func:algo.I64Dec9.value.GetScale
i64                  I64Dec9_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.I64Dec9.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::I64Dec9& parent, double val) __attribute__((nothrow));
// func:algo.I64Dec9.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::I64Dec9& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.I64Dec9.value.Print
void                 value_Print(algo::I64Dec9& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.I64Dec9..Hash
u32                  I64Dec9_Hash(u32 prev, algo::I64Dec9 rhs) __attribute__((nothrow));
// Read fields of algo::I64Dec9 from an ascii string.
// The format of the string is the format of the algo::I64Dec9's only field
// func:algo.I64Dec9..ReadStrptrMaybe
bool                 I64Dec9_ReadStrptrMaybe(algo::I64Dec9 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.I64Dec9..Init
void                 I64Dec9_Init(algo::I64Dec9& parent);
// print string representation of ROW to string STR
// cfmt:algo.I64Dec9.String  printfmt:Raw
// func:algo.I64Dec9..Print
void                 I64Dec9_Print(algo::I64Dec9 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.IOEvtFlags
struct IOEvtFlags { // algo.IOEvtFlags
    u32   value;   //   0
    inline operator algo_IOEvtFlagsEnum() const;
    explicit IOEvtFlags(u32                            in_value);
    IOEvtFlags(algo_IOEvtFlagsEnum arg);
    IOEvtFlags();
};

// Retrieve bitfield from value of field value
//    1 bits starting at bit 0.
// func:algo.IOEvtFlags.read.Get
bool                 read_Get(const algo::IOEvtFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 0.
// func:algo.IOEvtFlags.read.Set
void                 read_Set(algo::IOEvtFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 1.
// func:algo.IOEvtFlags.write.Get
bool                 write_Get(const algo::IOEvtFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 1.
// func:algo.IOEvtFlags.write.Set
void                 write_Set(algo::IOEvtFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 2.
// func:algo.IOEvtFlags.eof.Get
bool                 eof_Get(const algo::IOEvtFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 2.
// func:algo.IOEvtFlags.eof.Set
void                 eof_Set(algo::IOEvtFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 3.
// func:algo.IOEvtFlags.err.Get
bool                 err_Get(const algo::IOEvtFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 3.
// func:algo.IOEvtFlags.err.Set
void                 err_Set(algo::IOEvtFlags& parent, bool rhs) __attribute__((nothrow));

// func:algo.IOEvtFlags..ReadFieldMaybe
bool                 IOEvtFlags_ReadFieldMaybe(algo::IOEvtFlags& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo::IOEvtFlags from an ascii string.
// func:algo.IOEvtFlags..ReadStrptrMaybe
bool                 IOEvtFlags_ReadStrptrMaybe(algo::IOEvtFlags &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.IOEvtFlags..Init
void                 IOEvtFlags_Init(algo::IOEvtFlags& parent);
// print string representation of ROW to string STR
// cfmt:algo.IOEvtFlags.String  printfmt:Bitset
// func:algo.IOEvtFlags..Print
void                 IOEvtFlags_Print(algo::IOEvtFlags& row, algo::cstring& str) __attribute__((nothrow));
// func:algo.IOEvtFlags..GetAnon
algo::strptr         IOEvtFlags_GetAnon(algo::IOEvtFlags &parent, i32 idx) __attribute__((nothrow));

// --- algo.IPoint
struct IPoint { // algo.IPoint
    i32   x;   //   0
    i32   y;   //   0
    IPoint();
};

// func:algo.IPoint..ReadFieldMaybe
bool                 IPoint_ReadFieldMaybe(algo::IPoint& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo::IPoint from an ascii string.
// The format of the string is a string with separated values
// func:algo.IPoint..ReadStrptrMaybe
bool                 IPoint_ReadStrptrMaybe(algo::IPoint &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.IPoint..Init
void                 IPoint_Init(algo::IPoint& parent);
// print string representation of ROW to string STR
// cfmt:algo.IPoint.String  printfmt:Sep
// func:algo.IPoint..Print
void                 IPoint_Print(algo::IPoint& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr50
#pragma pack(push,1)
struct Smallstr50 { // algo.Smallstr50
    enum { ch_max = 50 };
    u8 ch[50+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr50 &rhs) const;
    bool operator !=(const algo::Smallstr50 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::Smallstr50 &rhs) const;
    bool operator >(const algo::Smallstr50 &rhs) const;
    bool operator <=(const algo::Smallstr50 &rhs) const;
    bool operator >=(const algo::Smallstr50 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr50.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr50.ch.Set
    void                 operator =(const algo::Smallstr50& parent) __attribute__((nothrow));
    // func:algo.Smallstr50.ch.Ctor
    Smallstr50(const algo::Smallstr50 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr50.ch.CtorStrptr
    Smallstr50(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr50();
};
#pragma pack(pop)

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr50.ch.Add
void                 ch_Add(algo::Smallstr50& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr50.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr50& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr50.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr50& parent) __attribute__((nothrow));
// func:algo.Smallstr50.ch.HashStrptr
u32                  Smallstr50_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr50.ch.Init
void                 ch_Init(algo::Smallstr50 &parent) __attribute__((nothrow));
// always return constant 50
// func:algo.Smallstr50.ch.Max
int                  ch_Max(algo::Smallstr50& parent) __attribute__((nothrow));
// func:algo.Smallstr50.ch.N
int                  ch_N(const algo::Smallstr50& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr50.ch.Print
void                 ch_Print(algo::Smallstr50& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr50.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr50& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr50.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr50& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr50..Hash
u32                  Smallstr50_Hash(u32 prev, const algo::Smallstr50 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr50 from an ascii string.
// The format of the string is the format of the algo::Smallstr50's only field
// func:algo.Smallstr50..ReadStrptrMaybe
bool                 Smallstr50_ReadStrptrMaybe(algo::Smallstr50 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr50..Lt
bool                 Smallstr50_Lt(algo::Smallstr50& lhs, algo::Smallstr50& rhs) __attribute__((nothrow));
// func:algo.Smallstr50..Cmp
i32                  Smallstr50_Cmp(algo::Smallstr50& lhs, algo::Smallstr50& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr50..Init
void                 Smallstr50_Init(algo::Smallstr50& parent);
// func:algo.Smallstr50..Eq
bool                 Smallstr50_Eq(algo::Smallstr50& lhs, algo::Smallstr50& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.Smallstr50..Update
bool                 Smallstr50_Update(algo::Smallstr50 &lhs, algo::Smallstr50& rhs) __attribute__((nothrow));
// func:algo.Smallstr50..EqStrptr
bool                 Smallstr50_EqStrptr(const algo::Smallstr50& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr50.String  printfmt:Raw
// func:algo.Smallstr50..Print
void                 Smallstr50_Print(algo::Smallstr50& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Imdb
struct Imdb { // algo.Imdb: In-memory database descriptor (what is algo.Db then?)
    algo::Smallstr50                 imdb;                // Database name
    algo::ImdbInsertStrptrMaybeFcn   InsertStrptrMaybe;   //   0  Insert new element given a string
    algo::ImdbStepFcn                Step;                //   0  Perform one step (may be NULL)
    algo::ImdbMainLoopFcn            MainLoop;            //   0  Loop!
    algo::ImdbGetTraceFcn            GetTrace;            //   0
    algo::Comment                    comment;             //
    explicit Imdb(const algo::strptr&            in_imdb
        ,const algo::ImdbInsertStrptrMaybeFcn& in_InsertStrptrMaybe
        ,const algo::ImdbStepFcn&       in_Step
        ,const algo::ImdbMainLoopFcn&   in_MainLoop
        ,const algo::ImdbGetTraceFcn&   in_GetTrace
        ,const algo::Comment&           in_comment);
    Imdb();
};

// Set all fields to initial values.
// func:algo.Imdb..Init
void                 Imdb_Init(algo::Imdb& parent);
// print string representation of ROW to string STR
// cfmt:algo.Imdb.String  printfmt:Tuple
// func:algo.Imdb..Print
void                 Imdb_Print(algo::Imdb& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.ImrowPtr
struct ImrowPtr { // algo.ImrowPtr
    u64   value;   //   0
    inline operator u64() const;
    explicit ImrowPtr(u64                            in_value);
    ImrowPtr();
};

// Set all fields to initial values.
// func:algo.ImrowPtr..Init
void                 ImrowPtr_Init(algo::ImrowPtr& parent);
// print string representation of ROW to string STR
// cfmt:algo.ImrowPtr.String  printfmt:Raw
// func:algo.ImrowPtr..Print
void                 ImrowPtr_Print(algo::ImrowPtr& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr100
#pragma pack(push,1)
struct Smallstr100 { // algo.Smallstr100
    enum { ch_max = 100 };
    u8 ch[100+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr100.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr100.ch.Set
    void                 operator =(const algo::Smallstr100& parent) __attribute__((nothrow));
    // func:algo.Smallstr100.ch.Ctor
    Smallstr100(const algo::Smallstr100 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr100.ch.CtorStrptr
    Smallstr100(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr100();
};
#pragma pack(pop)

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr100.ch.Add
void                 ch_Add(algo::Smallstr100& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr100.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr100& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr100.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr100& parent) __attribute__((nothrow));
// func:algo.Smallstr100.ch.HashStrptr
u32                  Smallstr100_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr100.ch.Init
void                 ch_Init(algo::Smallstr100 &parent) __attribute__((nothrow));
// always return constant 100
// func:algo.Smallstr100.ch.Max
int                  ch_Max(algo::Smallstr100& parent) __attribute__((nothrow));
// func:algo.Smallstr100.ch.N
int                  ch_N(const algo::Smallstr100& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr100.ch.Print
void                 ch_Print(algo::Smallstr100& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr100.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr100& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr100.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr100& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr100..Hash
u32                  Smallstr100_Hash(u32 prev, const algo::Smallstr100 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr100 from an ascii string.
// The format of the string is the format of the algo::Smallstr100's only field
// func:algo.Smallstr100..ReadStrptrMaybe
bool                 Smallstr100_ReadStrptrMaybe(algo::Smallstr100 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr100..Cmp
i32                  Smallstr100_Cmp(algo::Smallstr100& lhs, algo::Smallstr100& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr100..Init
void                 Smallstr100_Init(algo::Smallstr100& parent);
// func:algo.Smallstr100..Eq
bool                 Smallstr100_Eq(algo::Smallstr100& lhs, algo::Smallstr100& rhs) __attribute__((nothrow));
// func:algo.Smallstr100..EqStrptr
bool                 Smallstr100_EqStrptr(const algo::Smallstr100& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr100.String  printfmt:Raw
// func:algo.Smallstr100..Print
void                 Smallstr100_Print(algo::Smallstr100& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Imtable
struct Imtable { // algo.Imtable: In-memory table descriptor
    algo::Smallstr50          imtable;       // Table name
    algo::Smallstr100         elem_type;     // Element type name
    algo::ImrowRowidFindFcn   c_RowidFind;   //   0  Function to find element by rowid (may be NULL)
    algo::ImrowXrefXFcn       XrefX;         //   0  Function to x-reference an element (may be NULL)
    algo::ImrowNItemsFcn      NItems;        //   0  Return number of elements in the table
    algo::ImrowPrintFcn       Print;         //   0  Convert specified element to string (may be NULL)
    i32                       size;          //   0  Size of one element (for fixed-width elements only)
    algo::Smallstr50          ssimfile;      // Ssimfile name (if associated)
    algo::Comment             comment;       //
    explicit Imtable(const algo::strptr&            in_imtable
        ,const algo::strptr&            in_elem_type
        ,const algo::ImrowRowidFindFcn& in_c_RowidFind
        ,const algo::ImrowXrefXFcn&     in_XrefX
        ,const algo::ImrowNItemsFcn&    in_NItems
        ,const algo::ImrowPrintFcn&     in_Print
        ,i32                            in_size
        ,const algo::strptr&            in_ssimfile
        ,const algo::Comment&           in_comment);
    Imtable();
};

// Set all fields to initial values.
// func:algo.Imtable..Init
void                 Imtable_Init(algo::Imtable& parent);
// print string representation of ROW to string STR
// cfmt:algo.Imtable.String  printfmt:Tuple
// func:algo.Imtable..Print
void                 Imtable_Print(algo::Imtable& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Ipmask
struct Ipmask { // algo.Ipmask: Format: 10.0.0.0/16
    u32   ip_host;   //   0
    u32   mask;      //   0
    Ipmask();
};

// Read fields of algo::Ipmask from an ascii string.
// func:algo.Ipmask..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Ipmask_ReadStrptrMaybe(algo::Ipmask &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Ipmask..Init
void                 Ipmask_Init(algo::Ipmask& parent);
// print string representation of ROW to string STR
// cfmt:algo.Ipmask.String  printfmt:Extern
// func:algo.Ipmask..Print
// this function is 'extrn' and implemented by user
void                 Ipmask_Print(algo::Ipmask& row, algo::cstring& str) __attribute__((nothrow));
// func:algo.strptr..Hash
// this function is 'extrn' and implemented by user
u32                  strptr_Hash(u32 prev, algo::strptr rhs) __attribute__((nothrow));
// func:algo.strptr..Lt
// this function is 'extrn' and implemented by user
bool                 strptr_Lt(algo::strptr lhs, algo::strptr rhs) __attribute__((nothrow));
// func:algo.strptr..Cmp
// this function is 'extrn' and implemented by user
i32                  strptr_Cmp(algo::strptr lhs, algo::strptr rhs) __attribute__((nothrow));
// func:algo.strptr..Eq
// this function is 'extrn' and implemented by user
bool                 strptr_Eq(algo::strptr lhs, algo::strptr rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.strptr..Update
bool                 strptr_Update(algo::strptr &lhs, algo::strptr rhs) __attribute__((nothrow));
// Create JSON representation of algo::strptr under PARENT node
// cfmt:algo.strptr.Json  printfmt:Extern
// func:algo.strptr..FmtJson
// this function is 'extrn' and implemented by user
lib_json::FNode *    strptr_FmtJson(algo::strptr row, lib_json::FNode *parent) __attribute__((nothrow));

// --- algo.LineBuf
struct LineBuf { // algo.LineBuf
    char*          buf_elems;     // pointer to elements
    u32            buf_n;         // number of elements in array
    u32            buf_max;       // max. capacity of array before realloc
    algo::strptr   incoming;      //
    bool           implied_eof;   //   false
    bool           eof;           //   false
    LineBuf();
    ~LineBuf();
private:
    // reftype Tary of algo.LineBuf.buf prohibits copy
    LineBuf(const LineBuf&){ /*disallow copy constructor */}
    void operator =(const LineBuf&){ /*disallow direct assignment */}
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.LineBuf.buf.Addary
algo::aryptr<char>   buf_Addary(algo::LineBuf& parent, algo::aryptr<char> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.LineBuf.buf.Alloc
char&                buf_Alloc(algo::LineBuf& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.LineBuf.buf.AllocAt
char&                buf_AllocAt(algo::LineBuf& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.LineBuf.buf.AllocN
algo::aryptr<char>   buf_AllocN(algo::LineBuf& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.LineBuf.buf.EmptyQ
bool                 buf_EmptyQ(algo::LineBuf& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.LineBuf.buf.Find
char*                buf_Find(algo::LineBuf& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.LineBuf.buf.Getary
algo::aryptr<char>   buf_Getary(const algo::LineBuf& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.LineBuf.buf.Last
char*                buf_Last(algo::LineBuf& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.LineBuf.buf.Max
i32                  buf_Max(algo::LineBuf& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.LineBuf.buf.N
i32                  buf_N(const algo::LineBuf& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.LineBuf.buf.Remove
void                 buf_Remove(algo::LineBuf& parent, u32 i) __attribute__((nothrow));
// func:algo.LineBuf.buf.RemoveAll
void                 buf_RemoveAll(algo::LineBuf& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.LineBuf.buf.RemoveLast
void                 buf_RemoveLast(algo::LineBuf& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.LineBuf.buf.Reserve
void                 buf_Reserve(algo::LineBuf& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.LineBuf.buf.AbsReserve
void                 buf_AbsReserve(algo::LineBuf& parent, int n) __attribute__((nothrow));
// Convert buf to a string.
// Array is printed as a regular string.
// func:algo.LineBuf.buf.Print
void                 buf_Print(algo::LineBuf& parent, algo::cstring &rhs) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.LineBuf.buf.Setary
void                 buf_Setary(algo::LineBuf& parent, algo::LineBuf &rhs) __attribute__((nothrow));
// Copy specified array into buf, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.LineBuf.buf.Setary2
void                 buf_Setary(algo::LineBuf& parent, const algo::aryptr<char> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.LineBuf.buf.qFind
char&                buf_qFind(algo::LineBuf& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.LineBuf.buf.qLast
char&                buf_qLast(algo::LineBuf& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.LineBuf.buf.rowid_Get
u64                  buf_rowid_Get(algo::LineBuf& parent, char &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.LineBuf.buf.AllocNVal
algo::aryptr<char>   buf_AllocNVal(algo::LineBuf& parent, int n_elems, const char& val) __attribute__((nothrow));
// The array is replaced with the input string. Function always succeeds.
// func:algo.LineBuf.buf.ReadStrptrMaybe
bool                 buf_ReadStrptrMaybe(algo::LineBuf& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.LineBuf.buf_curs.Next
void                 LineBuf_buf_curs_Next(LineBuf_buf_curs &curs) __attribute__((nothrow));
// func:algo.LineBuf.buf_curs.Reset
void                 LineBuf_buf_curs_Reset(LineBuf_buf_curs &curs, algo::LineBuf &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.LineBuf.buf_curs.ValidQ
bool                 LineBuf_buf_curs_ValidQ(LineBuf_buf_curs &curs) __attribute__((nothrow));
// item access
// func:algo.LineBuf.buf_curs.Access
char&                LineBuf_buf_curs_Access(LineBuf_buf_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LineBuf..Init
void                 LineBuf_Init(algo::LineBuf& parent);
// func:algo.LineBuf..Uninit
void                 LineBuf_Uninit(algo::LineBuf& parent) __attribute__((nothrow));

// --- algo.LnumStr10_U64
#pragma pack(push,1)
struct LnumStr10_U64 { // algo.LnumStr10_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 10 };
    u8 ch[10];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr10_U64 &rhs) const;
    bool operator !=(const algo::LnumStr10_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr10_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr10_U64.ch.Set
    void                 operator =(const algo::LnumStr10_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr10_U64.ch.Ctor
    LnumStr10_U64(const algo::LnumStr10_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr10_U64.ch.CtorStrptr
    LnumStr10_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr10_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr10_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr10_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr10_U64.ch.HashStrptr
u32                  LnumStr10_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr10_U64.ch.Init
void                 ch_Init(algo::LnumStr10_U64 &parent) __attribute__((nothrow));
// always return constant 10
// func:algo.LnumStr10_U64.ch.Max
int                  ch_Max(algo::LnumStr10_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr10_U64.ch.N
int                  ch_N(const algo::LnumStr10_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr10_U64.ch.Print
void                 ch_Print(algo::LnumStr10_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr10_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr10_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr10_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr10_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr10_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr10_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr10_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr10_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr10_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr10_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr10_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr10_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr10_U64..Hash
u32                  LnumStr10_U64_Hash(u32 prev, const algo::LnumStr10_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr10_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr10_U64's only field
// func:algo.LnumStr10_U64..ReadStrptrMaybe
bool                 LnumStr10_U64_ReadStrptrMaybe(algo::LnumStr10_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr10_U64..Cmp
i32                  LnumStr10_U64_Cmp(algo::LnumStr10_U64& lhs, algo::LnumStr10_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr10_U64..Init
void                 LnumStr10_U64_Init(algo::LnumStr10_U64& parent);
// func:algo.LnumStr10_U64..Eq
bool                 LnumStr10_U64_Eq(algo::LnumStr10_U64& lhs, algo::LnumStr10_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr10_U64..EqStrptr
bool                 LnumStr10_U64_EqStrptr(const algo::LnumStr10_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr10_U64.String  printfmt:Raw
// func:algo.LnumStr10_U64..Print
void                 LnumStr10_U64_Print(algo::LnumStr10_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr11_U64
#pragma pack(push,1)
struct LnumStr11_U64 { // algo.LnumStr11_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 11 };
    u8 ch[11];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr11_U64 &rhs) const;
    bool operator !=(const algo::LnumStr11_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr11_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr11_U64.ch.Set
    void                 operator =(const algo::LnumStr11_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr11_U64.ch.Ctor
    LnumStr11_U64(const algo::LnumStr11_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr11_U64.ch.CtorStrptr
    LnumStr11_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr11_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr11_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr11_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr11_U64.ch.HashStrptr
u32                  LnumStr11_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr11_U64.ch.Init
void                 ch_Init(algo::LnumStr11_U64 &parent) __attribute__((nothrow));
// always return constant 11
// func:algo.LnumStr11_U64.ch.Max
int                  ch_Max(algo::LnumStr11_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr11_U64.ch.N
int                  ch_N(const algo::LnumStr11_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr11_U64.ch.Print
void                 ch_Print(algo::LnumStr11_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr11_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr11_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr11_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr11_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr11_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr11_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr11_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr11_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr11_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr11_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr11_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr11_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr11_U64..Hash
u32                  LnumStr11_U64_Hash(u32 prev, const algo::LnumStr11_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr11_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr11_U64's only field
// func:algo.LnumStr11_U64..ReadStrptrMaybe
bool                 LnumStr11_U64_ReadStrptrMaybe(algo::LnumStr11_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr11_U64..Cmp
i32                  LnumStr11_U64_Cmp(algo::LnumStr11_U64& lhs, algo::LnumStr11_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr11_U64..Init
void                 LnumStr11_U64_Init(algo::LnumStr11_U64& parent);
// func:algo.LnumStr11_U64..Eq
bool                 LnumStr11_U64_Eq(algo::LnumStr11_U64& lhs, algo::LnumStr11_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr11_U64..EqStrptr
bool                 LnumStr11_U64_EqStrptr(const algo::LnumStr11_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr11_U64.String  printfmt:Raw
// func:algo.LnumStr11_U64..Print
void                 LnumStr11_U64_Print(algo::LnumStr11_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr12_U64
#pragma pack(push,1)
struct LnumStr12_U64 { // algo.LnumStr12_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 12 };
    u8 ch[12];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr12_U64 &rhs) const;
    bool operator !=(const algo::LnumStr12_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr12_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr12_U64.ch.Set
    void                 operator =(const algo::LnumStr12_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr12_U64.ch.Ctor
    LnumStr12_U64(const algo::LnumStr12_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr12_U64.ch.CtorStrptr
    LnumStr12_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr12_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr12_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr12_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr12_U64.ch.HashStrptr
u32                  LnumStr12_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr12_U64.ch.Init
void                 ch_Init(algo::LnumStr12_U64 &parent) __attribute__((nothrow));
// always return constant 12
// func:algo.LnumStr12_U64.ch.Max
int                  ch_Max(algo::LnumStr12_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr12_U64.ch.N
int                  ch_N(const algo::LnumStr12_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr12_U64.ch.Print
void                 ch_Print(algo::LnumStr12_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr12_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr12_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr12_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr12_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr12_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr12_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr12_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr12_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr12_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr12_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr12_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr12_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr12_U64..Hash
u32                  LnumStr12_U64_Hash(u32 prev, const algo::LnumStr12_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr12_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr12_U64's only field
// func:algo.LnumStr12_U64..ReadStrptrMaybe
bool                 LnumStr12_U64_ReadStrptrMaybe(algo::LnumStr12_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr12_U64..Cmp
i32                  LnumStr12_U64_Cmp(algo::LnumStr12_U64& lhs, algo::LnumStr12_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr12_U64..Init
void                 LnumStr12_U64_Init(algo::LnumStr12_U64& parent);
// func:algo.LnumStr12_U64..Eq
bool                 LnumStr12_U64_Eq(algo::LnumStr12_U64& lhs, algo::LnumStr12_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr12_U64..EqStrptr
bool                 LnumStr12_U64_EqStrptr(const algo::LnumStr12_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr12_U64.String  printfmt:Raw
// func:algo.LnumStr12_U64..Print
void                 LnumStr12_U64_Print(algo::LnumStr12_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr13_U64_Base36
#pragma pack(push,1)
struct LnumStr13_U64_Base36 { // algo.LnumStr13_U64_Base36: number stored as ascii digits, left pad with '0', base 36
    enum { ch_max = 13 };
    u8 ch[13];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr13_U64_Base36 &rhs) const;
    bool operator !=(const algo::LnumStr13_U64_Base36 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr13_U64_Base36.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr13_U64_Base36.ch.Set
    void                 operator =(const algo::LnumStr13_U64_Base36& parent) __attribute__((nothrow));
    // func:algo.LnumStr13_U64_Base36.ch.Ctor
    LnumStr13_U64_Base36(const algo::LnumStr13_U64_Base36 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr13_U64_Base36.ch.CtorStrptr
    LnumStr13_U64_Base36(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr13_U64_Base36();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr13_U64_Base36.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr13_U64_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr13_U64_Base36.ch.HashStrptr
u32                  LnumStr13_U64_Base36_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr13_U64_Base36.ch.Init
void                 ch_Init(algo::LnumStr13_U64_Base36 &parent) __attribute__((nothrow));
// always return constant 13
// func:algo.LnumStr13_U64_Base36.ch.Max
int                  ch_Max(algo::LnumStr13_U64_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr13_U64_Base36.ch.N
int                  ch_N(const algo::LnumStr13_U64_Base36& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr13_U64_Base36.ch.Print
void                 ch_Print(algo::LnumStr13_U64_Base36& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr13_U64_Base36.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr13_U64_Base36& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr13_U64_Base36.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr13_U64_Base36& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr13_U64_Base36.ch.Getnum
u64                  ch_Getnum(algo::LnumStr13_U64_Base36& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr13_U64_Base36.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr13_U64_Base36& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr13_U64_Base36.ch.Geti64
i64                  ch_Geti64(algo::LnumStr13_U64_Base36& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-36 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr13_U64_Base36.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr13_U64_Base36& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr13_U64_Base36..Hash
u32                  LnumStr13_U64_Base36_Hash(u32 prev, const algo::LnumStr13_U64_Base36 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr13_U64_Base36 from an ascii string.
// The format of the string is the format of the algo::LnumStr13_U64_Base36's only field
// func:algo.LnumStr13_U64_Base36..ReadStrptrMaybe
bool                 LnumStr13_U64_Base36_ReadStrptrMaybe(algo::LnumStr13_U64_Base36 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr13_U64_Base36..Cmp
i32                  LnumStr13_U64_Base36_Cmp(algo::LnumStr13_U64_Base36& lhs, algo::LnumStr13_U64_Base36& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr13_U64_Base36..Init
void                 LnumStr13_U64_Base36_Init(algo::LnumStr13_U64_Base36& parent);
// func:algo.LnumStr13_U64_Base36..Eq
bool                 LnumStr13_U64_Base36_Eq(algo::LnumStr13_U64_Base36& lhs, algo::LnumStr13_U64_Base36& rhs) __attribute__((nothrow));
// func:algo.LnumStr13_U64_Base36..EqStrptr
bool                 LnumStr13_U64_Base36_EqStrptr(const algo::LnumStr13_U64_Base36& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr13_U64_Base36.String  printfmt:Raw
// func:algo.LnumStr13_U64_Base36..Print
void                 LnumStr13_U64_Base36_Print(algo::LnumStr13_U64_Base36& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr16_U64_Base16
#pragma pack(push,1)
struct LnumStr16_U64_Base16 { // algo.LnumStr16_U64_Base16: number stored as ascii digits, padded with 0s, base 16
    enum { ch_max = 16 };
    u8 ch[16];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr16_U64_Base16 &rhs) const;
    bool operator !=(const algo::LnumStr16_U64_Base16 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr16_U64_Base16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr16_U64_Base16.ch.Set
    void                 operator =(const algo::LnumStr16_U64_Base16& parent) __attribute__((nothrow));
    // func:algo.LnumStr16_U64_Base16.ch.Ctor
    LnumStr16_U64_Base16(const algo::LnumStr16_U64_Base16 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr16_U64_Base16.ch.CtorStrptr
    LnumStr16_U64_Base16(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr16_U64_Base16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr16_U64_Base16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr16_U64_Base16& parent) __attribute__((nothrow));
// func:algo.LnumStr16_U64_Base16.ch.HashStrptr
u32                  LnumStr16_U64_Base16_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr16_U64_Base16.ch.Init
void                 ch_Init(algo::LnumStr16_U64_Base16 &parent) __attribute__((nothrow));
// always return constant 16
// func:algo.LnumStr16_U64_Base16.ch.Max
int                  ch_Max(algo::LnumStr16_U64_Base16& parent) __attribute__((nothrow));
// func:algo.LnumStr16_U64_Base16.ch.N
int                  ch_N(const algo::LnumStr16_U64_Base16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr16_U64_Base16.ch.Print
void                 ch_Print(algo::LnumStr16_U64_Base16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr16_U64_Base16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr16_U64_Base16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr16_U64_Base16.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr16_U64_Base16& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr16_U64_Base16.ch.Getnum
u64                  ch_Getnum(algo::LnumStr16_U64_Base16& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr16_U64_Base16.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr16_U64_Base16& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr16_U64_Base16.ch.Geti64
i64                  ch_Geti64(algo::LnumStr16_U64_Base16& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-16 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr16_U64_Base16.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr16_U64_Base16& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr16_U64_Base16..Hash
u32                  LnumStr16_U64_Base16_Hash(u32 prev, const algo::LnumStr16_U64_Base16 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr16_U64_Base16 from an ascii string.
// The format of the string is the format of the algo::LnumStr16_U64_Base16's only field
// func:algo.LnumStr16_U64_Base16..ReadStrptrMaybe
bool                 LnumStr16_U64_Base16_ReadStrptrMaybe(algo::LnumStr16_U64_Base16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr16_U64_Base16..Cmp
i32                  LnumStr16_U64_Base16_Cmp(algo::LnumStr16_U64_Base16& lhs, algo::LnumStr16_U64_Base16& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr16_U64_Base16..Init
void                 LnumStr16_U64_Base16_Init(algo::LnumStr16_U64_Base16& parent);
// func:algo.LnumStr16_U64_Base16..Eq
bool                 LnumStr16_U64_Base16_Eq(algo::LnumStr16_U64_Base16& lhs, algo::LnumStr16_U64_Base16& rhs) __attribute__((nothrow));
// func:algo.LnumStr16_U64_Base16..EqStrptr
bool                 LnumStr16_U64_Base16_EqStrptr(const algo::LnumStr16_U64_Base16& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr16_U64_Base16.String  printfmt:Raw
// func:algo.LnumStr16_U64_Base16..Print
void                 LnumStr16_U64_Base16_Print(algo::LnumStr16_U64_Base16& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr1_U32
#pragma pack(push,1)
struct LnumStr1_U32 { // algo.LnumStr1_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 1 };
    u8 ch[1];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr1_U32 &rhs) const;
    bool operator !=(const algo::LnumStr1_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr1_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr1_U32.ch.Set
    void                 operator =(const algo::LnumStr1_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr1_U32.ch.Ctor
    LnumStr1_U32(const algo::LnumStr1_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr1_U32.ch.CtorStrptr
    LnumStr1_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr1_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr1_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr1_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr1_U32.ch.HashStrptr
u32                  LnumStr1_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr1_U32.ch.Init
void                 ch_Init(algo::LnumStr1_U32 &parent) __attribute__((nothrow));
// always return constant 1
// func:algo.LnumStr1_U32.ch.Max
int                  ch_Max(algo::LnumStr1_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr1_U32.ch.N
int                  ch_N(const algo::LnumStr1_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr1_U32.ch.Print
void                 ch_Print(algo::LnumStr1_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr1_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr1_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr1_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr1_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr1_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr1_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr1_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr1_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr1_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr1_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr1_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr1_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr1_U32..Hash
u32                  LnumStr1_U32_Hash(u32 prev, const algo::LnumStr1_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr1_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr1_U32's only field
// func:algo.LnumStr1_U32..ReadStrptrMaybe
bool                 LnumStr1_U32_ReadStrptrMaybe(algo::LnumStr1_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr1_U32..Cmp
i32                  LnumStr1_U32_Cmp(algo::LnumStr1_U32& lhs, algo::LnumStr1_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr1_U32..Init
void                 LnumStr1_U32_Init(algo::LnumStr1_U32& parent);
// func:algo.LnumStr1_U32..Eq
bool                 LnumStr1_U32_Eq(algo::LnumStr1_U32& lhs, algo::LnumStr1_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr1_U32..EqStrptr
bool                 LnumStr1_U32_EqStrptr(const algo::LnumStr1_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr1_U32.String  printfmt:Raw
// func:algo.LnumStr1_U32..Print
void                 LnumStr1_U32_Print(algo::LnumStr1_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr20_U64
#pragma pack(push,1)
struct LnumStr20_U64 { // algo.LnumStr20_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 20 };
    u8 ch[20];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr20_U64 &rhs) const;
    bool operator !=(const algo::LnumStr20_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr20_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr20_U64.ch.Set
    void                 operator =(const algo::LnumStr20_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr20_U64.ch.Ctor
    LnumStr20_U64(const algo::LnumStr20_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr20_U64.ch.CtorStrptr
    LnumStr20_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr20_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr20_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr20_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr20_U64.ch.HashStrptr
u32                  LnumStr20_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr20_U64.ch.Init
void                 ch_Init(algo::LnumStr20_U64 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.LnumStr20_U64.ch.Max
int                  ch_Max(algo::LnumStr20_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr20_U64.ch.N
int                  ch_N(const algo::LnumStr20_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr20_U64.ch.Print
void                 ch_Print(algo::LnumStr20_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr20_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr20_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr20_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr20_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr20_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr20_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr20_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr20_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr20_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr20_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr20_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr20_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr20_U64..Hash
u32                  LnumStr20_U64_Hash(u32 prev, const algo::LnumStr20_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr20_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr20_U64's only field
// func:algo.LnumStr20_U64..ReadStrptrMaybe
bool                 LnumStr20_U64_ReadStrptrMaybe(algo::LnumStr20_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr20_U64..Cmp
i32                  LnumStr20_U64_Cmp(algo::LnumStr20_U64& lhs, algo::LnumStr20_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr20_U64..Init
void                 LnumStr20_U64_Init(algo::LnumStr20_U64& parent);
// func:algo.LnumStr20_U64..Eq
bool                 LnumStr20_U64_Eq(algo::LnumStr20_U64& lhs, algo::LnumStr20_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr20_U64..EqStrptr
bool                 LnumStr20_U64_EqStrptr(const algo::LnumStr20_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr20_U64.String  printfmt:Raw
// func:algo.LnumStr20_U64..Print
void                 LnumStr20_U64_Print(algo::LnumStr20_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr22_U64
#pragma pack(push,1)
struct LnumStr22_U64 { // algo.LnumStr22_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 22 };
    u8 ch[22];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr22_U64 &rhs) const;
    bool operator !=(const algo::LnumStr22_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr22_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr22_U64.ch.Set
    void                 operator =(const algo::LnumStr22_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr22_U64.ch.Ctor
    LnumStr22_U64(const algo::LnumStr22_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr22_U64.ch.CtorStrptr
    LnumStr22_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr22_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr22_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr22_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr22_U64.ch.HashStrptr
u32                  LnumStr22_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr22_U64.ch.Init
void                 ch_Init(algo::LnumStr22_U64 &parent) __attribute__((nothrow));
// always return constant 22
// func:algo.LnumStr22_U64.ch.Max
int                  ch_Max(algo::LnumStr22_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr22_U64.ch.N
int                  ch_N(const algo::LnumStr22_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr22_U64.ch.Print
void                 ch_Print(algo::LnumStr22_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr22_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr22_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr22_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr22_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr22_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr22_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr22_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr22_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr22_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr22_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr22_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr22_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr22_U64..Hash
u32                  LnumStr22_U64_Hash(u32 prev, const algo::LnumStr22_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr22_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr22_U64's only field
// func:algo.LnumStr22_U64..ReadStrptrMaybe
bool                 LnumStr22_U64_ReadStrptrMaybe(algo::LnumStr22_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr22_U64..Cmp
i32                  LnumStr22_U64_Cmp(algo::LnumStr22_U64& lhs, algo::LnumStr22_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr22_U64..Init
void                 LnumStr22_U64_Init(algo::LnumStr22_U64& parent);
// func:algo.LnumStr22_U64..Eq
bool                 LnumStr22_U64_Eq(algo::LnumStr22_U64& lhs, algo::LnumStr22_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr22_U64..EqStrptr
bool                 LnumStr22_U64_EqStrptr(const algo::LnumStr22_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr22_U64.String  printfmt:Raw
// func:algo.LnumStr22_U64..Print
void                 LnumStr22_U64_Print(algo::LnumStr22_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr2_U32
#pragma pack(push,1)
struct LnumStr2_U32 { // algo.LnumStr2_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 2 };
    u8 ch[2];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr2_U32 &rhs) const;
    bool operator !=(const algo::LnumStr2_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr2_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr2_U32.ch.Set
    void                 operator =(const algo::LnumStr2_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr2_U32.ch.Ctor
    LnumStr2_U32(const algo::LnumStr2_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr2_U32.ch.CtorStrptr
    LnumStr2_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr2_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr2_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr2_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr2_U32.ch.HashStrptr
u32                  LnumStr2_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr2_U32.ch.Init
void                 ch_Init(algo::LnumStr2_U32 &parent) __attribute__((nothrow));
// always return constant 2
// func:algo.LnumStr2_U32.ch.Max
int                  ch_Max(algo::LnumStr2_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr2_U32.ch.N
int                  ch_N(const algo::LnumStr2_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr2_U32.ch.Print
void                 ch_Print(algo::LnumStr2_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr2_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr2_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr2_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr2_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr2_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr2_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr2_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr2_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr2_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr2_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr2_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr2_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr2_U32..Hash
u32                  LnumStr2_U32_Hash(u32 prev, const algo::LnumStr2_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr2_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr2_U32's only field
// func:algo.LnumStr2_U32..ReadStrptrMaybe
bool                 LnumStr2_U32_ReadStrptrMaybe(algo::LnumStr2_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr2_U32..Cmp
i32                  LnumStr2_U32_Cmp(algo::LnumStr2_U32& lhs, algo::LnumStr2_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr2_U32..Init
void                 LnumStr2_U32_Init(algo::LnumStr2_U32& parent);
// func:algo.LnumStr2_U32..Eq
bool                 LnumStr2_U32_Eq(algo::LnumStr2_U32& lhs, algo::LnumStr2_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr2_U32..EqStrptr
bool                 LnumStr2_U32_EqStrptr(const algo::LnumStr2_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr2_U32.String  printfmt:Raw
// func:algo.LnumStr2_U32..Print
void                 LnumStr2_U32_Print(algo::LnumStr2_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr3_U32
#pragma pack(push,1)
struct LnumStr3_U32 { // algo.LnumStr3_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 3 };
    u8 ch[3];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr3_U32 &rhs) const;
    bool operator !=(const algo::LnumStr3_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr3_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr3_U32.ch.Set
    void                 operator =(const algo::LnumStr3_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr3_U32.ch.Ctor
    LnumStr3_U32(const algo::LnumStr3_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr3_U32.ch.CtorStrptr
    LnumStr3_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr3_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr3_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr3_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr3_U32.ch.HashStrptr
u32                  LnumStr3_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr3_U32.ch.Init
void                 ch_Init(algo::LnumStr3_U32 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.LnumStr3_U32.ch.Max
int                  ch_Max(algo::LnumStr3_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr3_U32.ch.N
int                  ch_N(const algo::LnumStr3_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr3_U32.ch.Print
void                 ch_Print(algo::LnumStr3_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr3_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr3_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr3_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr3_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr3_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr3_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr3_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr3_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr3_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr3_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr3_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr3_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr3_U32..Hash
u32                  LnumStr3_U32_Hash(u32 prev, const algo::LnumStr3_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr3_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr3_U32's only field
// func:algo.LnumStr3_U32..ReadStrptrMaybe
bool                 LnumStr3_U32_ReadStrptrMaybe(algo::LnumStr3_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr3_U32..Cmp
i32                  LnumStr3_U32_Cmp(algo::LnumStr3_U32& lhs, algo::LnumStr3_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr3_U32..Init
void                 LnumStr3_U32_Init(algo::LnumStr3_U32& parent);
// func:algo.LnumStr3_U32..Eq
bool                 LnumStr3_U32_Eq(algo::LnumStr3_U32& lhs, algo::LnumStr3_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr3_U32..EqStrptr
bool                 LnumStr3_U32_EqStrptr(const algo::LnumStr3_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr3_U32.String  printfmt:Raw
// func:algo.LnumStr3_U32..Print
void                 LnumStr3_U32_Print(algo::LnumStr3_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr4_U32
#pragma pack(push,1)
struct LnumStr4_U32 { // algo.LnumStr4_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 4 };
    u8 ch[4];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr4_U32 &rhs) const;
    bool operator !=(const algo::LnumStr4_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr4_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr4_U32.ch.Set
    void                 operator =(const algo::LnumStr4_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr4_U32.ch.Ctor
    LnumStr4_U32(const algo::LnumStr4_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr4_U32.ch.CtorStrptr
    LnumStr4_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr4_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr4_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr4_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr4_U32.ch.HashStrptr
u32                  LnumStr4_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr4_U32.ch.Init
void                 ch_Init(algo::LnumStr4_U32 &parent) __attribute__((nothrow));
// always return constant 4
// func:algo.LnumStr4_U32.ch.Max
int                  ch_Max(algo::LnumStr4_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr4_U32.ch.N
int                  ch_N(const algo::LnumStr4_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr4_U32.ch.Print
void                 ch_Print(algo::LnumStr4_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr4_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr4_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr4_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr4_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr4_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr4_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr4_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr4_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr4_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr4_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr4_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr4_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr4_U32..Hash
u32                  LnumStr4_U32_Hash(u32 prev, const algo::LnumStr4_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr4_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr4_U32's only field
// func:algo.LnumStr4_U32..ReadStrptrMaybe
bool                 LnumStr4_U32_ReadStrptrMaybe(algo::LnumStr4_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr4_U32..Cmp
i32                  LnumStr4_U32_Cmp(algo::LnumStr4_U32& lhs, algo::LnumStr4_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr4_U32..Init
void                 LnumStr4_U32_Init(algo::LnumStr4_U32& parent);
// func:algo.LnumStr4_U32..Eq
bool                 LnumStr4_U32_Eq(algo::LnumStr4_U32& lhs, algo::LnumStr4_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr4_U32..EqStrptr
bool                 LnumStr4_U32_EqStrptr(const algo::LnumStr4_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr4_U32.String  printfmt:Raw
// func:algo.LnumStr4_U32..Print
void                 LnumStr4_U32_Print(algo::LnumStr4_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr5_U32
#pragma pack(push,1)
struct LnumStr5_U32 { // algo.LnumStr5_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr5_U32 &rhs) const;
    bool operator !=(const algo::LnumStr5_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr5_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr5_U32.ch.Set
    void                 operator =(const algo::LnumStr5_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr5_U32.ch.Ctor
    LnumStr5_U32(const algo::LnumStr5_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr5_U32.ch.CtorStrptr
    LnumStr5_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr5_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr5_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr5_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr5_U32.ch.HashStrptr
u32                  LnumStr5_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr5_U32.ch.Init
void                 ch_Init(algo::LnumStr5_U32 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.LnumStr5_U32.ch.Max
int                  ch_Max(algo::LnumStr5_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr5_U32.ch.N
int                  ch_N(const algo::LnumStr5_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr5_U32.ch.Print
void                 ch_Print(algo::LnumStr5_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr5_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr5_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr5_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr5_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr5_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr5_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr5_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr5_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr5_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr5_U32..Hash
u32                  LnumStr5_U32_Hash(u32 prev, const algo::LnumStr5_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr5_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr5_U32's only field
// func:algo.LnumStr5_U32..ReadStrptrMaybe
bool                 LnumStr5_U32_ReadStrptrMaybe(algo::LnumStr5_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr5_U32..Cmp
i32                  LnumStr5_U32_Cmp(algo::LnumStr5_U32& lhs, algo::LnumStr5_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr5_U32..Init
void                 LnumStr5_U32_Init(algo::LnumStr5_U32& parent);
// func:algo.LnumStr5_U32..Eq
bool                 LnumStr5_U32_Eq(algo::LnumStr5_U32& lhs, algo::LnumStr5_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr5_U32..EqStrptr
bool                 LnumStr5_U32_EqStrptr(const algo::LnumStr5_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr5_U32.String  printfmt:Raw
// func:algo.LnumStr5_U32..Print
void                 LnumStr5_U32_Print(algo::LnumStr5_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr5_U32_Base36
#pragma pack(push,1)
struct LnumStr5_U32_Base36 { // algo.LnumStr5_U32_Base36: number stored as ascii digits, left pad with '0', base 36
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr5_U32_Base36 &rhs) const;
    bool operator !=(const algo::LnumStr5_U32_Base36 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr5_U32_Base36.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr5_U32_Base36.ch.Set
    void                 operator =(const algo::LnumStr5_U32_Base36& parent) __attribute__((nothrow));
    // func:algo.LnumStr5_U32_Base36.ch.Ctor
    LnumStr5_U32_Base36(const algo::LnumStr5_U32_Base36 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr5_U32_Base36.ch.CtorStrptr
    LnumStr5_U32_Base36(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr5_U32_Base36();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr5_U32_Base36.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr5_U32_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr5_U32_Base36.ch.HashStrptr
u32                  LnumStr5_U32_Base36_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr5_U32_Base36.ch.Init
void                 ch_Init(algo::LnumStr5_U32_Base36 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.LnumStr5_U32_Base36.ch.Max
int                  ch_Max(algo::LnumStr5_U32_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr5_U32_Base36.ch.N
int                  ch_N(const algo::LnumStr5_U32_Base36& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr5_U32_Base36.ch.Print
void                 ch_Print(algo::LnumStr5_U32_Base36& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr5_U32_Base36.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr5_U32_Base36& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr5_U32_Base36.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr5_U32_Base36& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32_Base36.ch.Getnum
u32                  ch_Getnum(algo::LnumStr5_U32_Base36& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32_Base36.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr5_U32_Base36& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr5_U32_Base36.ch.Geti64
i64                  ch_Geti64(algo::LnumStr5_U32_Base36& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-36 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr5_U32_Base36.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr5_U32_Base36& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr5_U32_Base36..Hash
u32                  LnumStr5_U32_Base36_Hash(u32 prev, const algo::LnumStr5_U32_Base36 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr5_U32_Base36 from an ascii string.
// The format of the string is the format of the algo::LnumStr5_U32_Base36's only field
// func:algo.LnumStr5_U32_Base36..ReadStrptrMaybe
bool                 LnumStr5_U32_Base36_ReadStrptrMaybe(algo::LnumStr5_U32_Base36 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr5_U32_Base36..Cmp
i32                  LnumStr5_U32_Base36_Cmp(algo::LnumStr5_U32_Base36& lhs, algo::LnumStr5_U32_Base36& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr5_U32_Base36..Init
void                 LnumStr5_U32_Base36_Init(algo::LnumStr5_U32_Base36& parent);
// func:algo.LnumStr5_U32_Base36..Eq
bool                 LnumStr5_U32_Base36_Eq(algo::LnumStr5_U32_Base36& lhs, algo::LnumStr5_U32_Base36& rhs) __attribute__((nothrow));
// func:algo.LnumStr5_U32_Base36..EqStrptr
bool                 LnumStr5_U32_Base36_EqStrptr(const algo::LnumStr5_U32_Base36& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr5_U32_Base36.String  printfmt:Raw
// func:algo.LnumStr5_U32_Base36..Print
void                 LnumStr5_U32_Base36_Print(algo::LnumStr5_U32_Base36& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr6_U32
#pragma pack(push,1)
struct LnumStr6_U32 { // algo.LnumStr6_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr6_U32 &rhs) const;
    bool operator !=(const algo::LnumStr6_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr6_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr6_U32.ch.Set
    void                 operator =(const algo::LnumStr6_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr6_U32.ch.Ctor
    LnumStr6_U32(const algo::LnumStr6_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr6_U32.ch.CtorStrptr
    LnumStr6_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr6_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr6_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr6_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr6_U32.ch.HashStrptr
u32                  LnumStr6_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr6_U32.ch.Init
void                 ch_Init(algo::LnumStr6_U32 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.LnumStr6_U32.ch.Max
int                  ch_Max(algo::LnumStr6_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr6_U32.ch.N
int                  ch_N(const algo::LnumStr6_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr6_U32.ch.Print
void                 ch_Print(algo::LnumStr6_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr6_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr6_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr6_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr6_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr6_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr6_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr6_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr6_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr6_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr6_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr6_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr6_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr6_U32..Hash
u32                  LnumStr6_U32_Hash(u32 prev, const algo::LnumStr6_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr6_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr6_U32's only field
// func:algo.LnumStr6_U32..ReadStrptrMaybe
bool                 LnumStr6_U32_ReadStrptrMaybe(algo::LnumStr6_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr6_U32..Cmp
i32                  LnumStr6_U32_Cmp(algo::LnumStr6_U32& lhs, algo::LnumStr6_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr6_U32..Init
void                 LnumStr6_U32_Init(algo::LnumStr6_U32& parent);
// func:algo.LnumStr6_U32..Eq
bool                 LnumStr6_U32_Eq(algo::LnumStr6_U32& lhs, algo::LnumStr6_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr6_U32..EqStrptr
bool                 LnumStr6_U32_EqStrptr(const algo::LnumStr6_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr6_U32.String  printfmt:Raw
// func:algo.LnumStr6_U32..Print
void                 LnumStr6_U32_Print(algo::LnumStr6_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr7_U32
#pragma pack(push,1)
struct LnumStr7_U32 { // algo.LnumStr7_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 7 };
    u8 ch[7];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr7_U32 &rhs) const;
    bool operator !=(const algo::LnumStr7_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr7_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr7_U32.ch.Set
    void                 operator =(const algo::LnumStr7_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr7_U32.ch.Ctor
    LnumStr7_U32(const algo::LnumStr7_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr7_U32.ch.CtorStrptr
    LnumStr7_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr7_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr7_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr7_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr7_U32.ch.HashStrptr
u32                  LnumStr7_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr7_U32.ch.Init
void                 ch_Init(algo::LnumStr7_U32 &parent) __attribute__((nothrow));
// always return constant 7
// func:algo.LnumStr7_U32.ch.Max
int                  ch_Max(algo::LnumStr7_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr7_U32.ch.N
int                  ch_N(const algo::LnumStr7_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr7_U32.ch.Print
void                 ch_Print(algo::LnumStr7_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr7_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr7_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr7_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr7_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr7_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr7_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr7_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr7_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr7_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr7_U32..Hash
u32                  LnumStr7_U32_Hash(u32 prev, const algo::LnumStr7_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr7_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr7_U32's only field
// func:algo.LnumStr7_U32..ReadStrptrMaybe
bool                 LnumStr7_U32_ReadStrptrMaybe(algo::LnumStr7_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr7_U32..Cmp
i32                  LnumStr7_U32_Cmp(algo::LnumStr7_U32& lhs, algo::LnumStr7_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr7_U32..Init
void                 LnumStr7_U32_Init(algo::LnumStr7_U32& parent);
// func:algo.LnumStr7_U32..Eq
bool                 LnumStr7_U32_Eq(algo::LnumStr7_U32& lhs, algo::LnumStr7_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr7_U32..EqStrptr
bool                 LnumStr7_U32_EqStrptr(const algo::LnumStr7_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr7_U32.String  printfmt:Raw
// func:algo.LnumStr7_U32..Print
void                 LnumStr7_U32_Print(algo::LnumStr7_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr7_U32_Base36
#pragma pack(push,1)
struct LnumStr7_U32_Base36 { // algo.LnumStr7_U32_Base36: number stored as ascii digits, left pad with '0', base 36
    enum { ch_max = 7 };
    u8 ch[7];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr7_U32_Base36 &rhs) const;
    bool operator !=(const algo::LnumStr7_U32_Base36 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr7_U32_Base36.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr7_U32_Base36.ch.Set
    void                 operator =(const algo::LnumStr7_U32_Base36& parent) __attribute__((nothrow));
    // func:algo.LnumStr7_U32_Base36.ch.Ctor
    LnumStr7_U32_Base36(const algo::LnumStr7_U32_Base36 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr7_U32_Base36.ch.CtorStrptr
    LnumStr7_U32_Base36(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr7_U32_Base36();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr7_U32_Base36.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr7_U32_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr7_U32_Base36.ch.HashStrptr
u32                  LnumStr7_U32_Base36_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr7_U32_Base36.ch.Init
void                 ch_Init(algo::LnumStr7_U32_Base36 &parent) __attribute__((nothrow));
// always return constant 7
// func:algo.LnumStr7_U32_Base36.ch.Max
int                  ch_Max(algo::LnumStr7_U32_Base36& parent) __attribute__((nothrow));
// func:algo.LnumStr7_U32_Base36.ch.N
int                  ch_N(const algo::LnumStr7_U32_Base36& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr7_U32_Base36.ch.Print
void                 ch_Print(algo::LnumStr7_U32_Base36& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr7_U32_Base36.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr7_U32_Base36& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr7_U32_Base36.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr7_U32_Base36& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32_Base36.ch.Getnum
u32                  ch_Getnum(algo::LnumStr7_U32_Base36& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32_Base36.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr7_U32_Base36& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr7_U32_Base36.ch.Geti64
i64                  ch_Geti64(algo::LnumStr7_U32_Base36& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-36 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr7_U32_Base36.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr7_U32_Base36& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr7_U32_Base36..Hash
u32                  LnumStr7_U32_Base36_Hash(u32 prev, const algo::LnumStr7_U32_Base36 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr7_U32_Base36 from an ascii string.
// The format of the string is the format of the algo::LnumStr7_U32_Base36's only field
// func:algo.LnumStr7_U32_Base36..ReadStrptrMaybe
bool                 LnumStr7_U32_Base36_ReadStrptrMaybe(algo::LnumStr7_U32_Base36 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr7_U32_Base36..Cmp
i32                  LnumStr7_U32_Base36_Cmp(algo::LnumStr7_U32_Base36& lhs, algo::LnumStr7_U32_Base36& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr7_U32_Base36..Init
void                 LnumStr7_U32_Base36_Init(algo::LnumStr7_U32_Base36& parent);
// func:algo.LnumStr7_U32_Base36..Eq
bool                 LnumStr7_U32_Base36_Eq(algo::LnumStr7_U32_Base36& lhs, algo::LnumStr7_U32_Base36& rhs) __attribute__((nothrow));
// func:algo.LnumStr7_U32_Base36..EqStrptr
bool                 LnumStr7_U32_Base36_EqStrptr(const algo::LnumStr7_U32_Base36& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr7_U32_Base36.String  printfmt:Raw
// func:algo.LnumStr7_U32_Base36..Print
void                 LnumStr7_U32_Base36_Print(algo::LnumStr7_U32_Base36& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr8_U32
#pragma pack(push,1)
struct LnumStr8_U32 { // algo.LnumStr8_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr8_U32 &rhs) const;
    bool operator !=(const algo::LnumStr8_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr8_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr8_U32.ch.Set
    void                 operator =(const algo::LnumStr8_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr8_U32.ch.Ctor
    LnumStr8_U32(const algo::LnumStr8_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr8_U32.ch.CtorStrptr
    LnumStr8_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr8_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr8_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr8_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U32.ch.HashStrptr
u32                  LnumStr8_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr8_U32.ch.Init
void                 ch_Init(algo::LnumStr8_U32 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.LnumStr8_U32.ch.Max
int                  ch_Max(algo::LnumStr8_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U32.ch.N
int                  ch_N(const algo::LnumStr8_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr8_U32.ch.Print
void                 ch_Print(algo::LnumStr8_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr8_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr8_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr8_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr8_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr8_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr8_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr8_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr8_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr8_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr8_U32..Hash
u32                  LnumStr8_U32_Hash(u32 prev, const algo::LnumStr8_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr8_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr8_U32's only field
// func:algo.LnumStr8_U32..ReadStrptrMaybe
bool                 LnumStr8_U32_ReadStrptrMaybe(algo::LnumStr8_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr8_U32..Cmp
i32                  LnumStr8_U32_Cmp(algo::LnumStr8_U32& lhs, algo::LnumStr8_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr8_U32..Init
void                 LnumStr8_U32_Init(algo::LnumStr8_U32& parent);
// func:algo.LnumStr8_U32..Eq
bool                 LnumStr8_U32_Eq(algo::LnumStr8_U32& lhs, algo::LnumStr8_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr8_U32..EqStrptr
bool                 LnumStr8_U32_EqStrptr(const algo::LnumStr8_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr8_U32.String  printfmt:Raw
// func:algo.LnumStr8_U32..Print
void                 LnumStr8_U32_Print(algo::LnumStr8_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr8_U32_Base16
#pragma pack(push,1)
struct LnumStr8_U32_Base16 { // algo.LnumStr8_U32_Base16: number stored as ascii digits, padded with 0s, base 16
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr8_U32_Base16 &rhs) const;
    bool operator !=(const algo::LnumStr8_U32_Base16 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr8_U32_Base16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr8_U32_Base16.ch.Set
    void                 operator =(const algo::LnumStr8_U32_Base16& parent) __attribute__((nothrow));
    // func:algo.LnumStr8_U32_Base16.ch.Ctor
    LnumStr8_U32_Base16(const algo::LnumStr8_U32_Base16 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr8_U32_Base16.ch.CtorStrptr
    LnumStr8_U32_Base16(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr8_U32_Base16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr8_U32_Base16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr8_U32_Base16& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U32_Base16.ch.HashStrptr
u32                  LnumStr8_U32_Base16_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr8_U32_Base16.ch.Init
void                 ch_Init(algo::LnumStr8_U32_Base16 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.LnumStr8_U32_Base16.ch.Max
int                  ch_Max(algo::LnumStr8_U32_Base16& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U32_Base16.ch.N
int                  ch_N(const algo::LnumStr8_U32_Base16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr8_U32_Base16.ch.Print
void                 ch_Print(algo::LnumStr8_U32_Base16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr8_U32_Base16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr8_U32_Base16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr8_U32_Base16.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr8_U32_Base16& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32_Base16.ch.Getnum
u32                  ch_Getnum(algo::LnumStr8_U32_Base16& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32_Base16.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr8_U32_Base16& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U32_Base16.ch.Geti64
i64                  ch_Geti64(algo::LnumStr8_U32_Base16& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-16 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr8_U32_Base16.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr8_U32_Base16& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr8_U32_Base16..Hash
u32                  LnumStr8_U32_Base16_Hash(u32 prev, const algo::LnumStr8_U32_Base16 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr8_U32_Base16 from an ascii string.
// The format of the string is the format of the algo::LnumStr8_U32_Base16's only field
// func:algo.LnumStr8_U32_Base16..ReadStrptrMaybe
bool                 LnumStr8_U32_Base16_ReadStrptrMaybe(algo::LnumStr8_U32_Base16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr8_U32_Base16..Cmp
i32                  LnumStr8_U32_Base16_Cmp(algo::LnumStr8_U32_Base16& lhs, algo::LnumStr8_U32_Base16& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr8_U32_Base16..Init
void                 LnumStr8_U32_Base16_Init(algo::LnumStr8_U32_Base16& parent);
// func:algo.LnumStr8_U32_Base16..Eq
bool                 LnumStr8_U32_Base16_Eq(algo::LnumStr8_U32_Base16& lhs, algo::LnumStr8_U32_Base16& rhs) __attribute__((nothrow));
// func:algo.LnumStr8_U32_Base16..EqStrptr
bool                 LnumStr8_U32_Base16_EqStrptr(const algo::LnumStr8_U32_Base16& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr8_U32_Base16.String  printfmt:Raw
// func:algo.LnumStr8_U32_Base16..Print
void                 LnumStr8_U32_Base16_Print(algo::LnumStr8_U32_Base16& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr8_U64
#pragma pack(push,1)
struct LnumStr8_U64 { // algo.LnumStr8_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr8_U64 &rhs) const;
    bool operator !=(const algo::LnumStr8_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr8_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr8_U64.ch.Set
    void                 operator =(const algo::LnumStr8_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr8_U64.ch.Ctor
    LnumStr8_U64(const algo::LnumStr8_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr8_U64.ch.CtorStrptr
    LnumStr8_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr8_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr8_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr8_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U64.ch.HashStrptr
u32                  LnumStr8_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr8_U64.ch.Init
void                 ch_Init(algo::LnumStr8_U64 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.LnumStr8_U64.ch.Max
int                  ch_Max(algo::LnumStr8_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr8_U64.ch.N
int                  ch_N(const algo::LnumStr8_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr8_U64.ch.Print
void                 ch_Print(algo::LnumStr8_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr8_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr8_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr8_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr8_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr8_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr8_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr8_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr8_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr8_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr8_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr8_U64..Hash
u32                  LnumStr8_U64_Hash(u32 prev, const algo::LnumStr8_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr8_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr8_U64's only field
// func:algo.LnumStr8_U64..ReadStrptrMaybe
bool                 LnumStr8_U64_ReadStrptrMaybe(algo::LnumStr8_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr8_U64..Cmp
i32                  LnumStr8_U64_Cmp(algo::LnumStr8_U64& lhs, algo::LnumStr8_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr8_U64..Init
void                 LnumStr8_U64_Init(algo::LnumStr8_U64& parent);
// func:algo.LnumStr8_U64..Eq
bool                 LnumStr8_U64_Eq(algo::LnumStr8_U64& lhs, algo::LnumStr8_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr8_U64..EqStrptr
bool                 LnumStr8_U64_EqStrptr(const algo::LnumStr8_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr8_U64.String  printfmt:Raw
// func:algo.LnumStr8_U64..Print
void                 LnumStr8_U64_Print(algo::LnumStr8_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr9_U32
#pragma pack(push,1)
struct LnumStr9_U32 { // algo.LnumStr9_U32: number stored as ascii digits, left pad with '0'
    enum { ch_max = 9 };
    u8 ch[9];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr9_U32 &rhs) const;
    bool operator !=(const algo::LnumStr9_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr9_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr9_U32.ch.Set
    void                 operator =(const algo::LnumStr9_U32& parent) __attribute__((nothrow));
    // func:algo.LnumStr9_U32.ch.Ctor
    LnumStr9_U32(const algo::LnumStr9_U32 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr9_U32.ch.CtorStrptr
    LnumStr9_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr9_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LnumStr9_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr9_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr9_U32.ch.HashStrptr
u32                  LnumStr9_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr9_U32.ch.Init
void                 ch_Init(algo::LnumStr9_U32 &parent) __attribute__((nothrow));
// always return constant 9
// func:algo.LnumStr9_U32.ch.Max
int                  ch_Max(algo::LnumStr9_U32& parent) __attribute__((nothrow));
// func:algo.LnumStr9_U32.ch.N
int                  ch_N(const algo::LnumStr9_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr9_U32.ch.Print
void                 ch_Print(algo::LnumStr9_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr9_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr9_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr9_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr9_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U32.ch.Getnum
u32                  ch_Getnum(algo::LnumStr9_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LnumStr9_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U32.ch.Geti64
i64                  ch_Geti64(algo::LnumStr9_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr9_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr9_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr9_U32..Hash
u32                  LnumStr9_U32_Hash(u32 prev, const algo::LnumStr9_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr9_U32 from an ascii string.
// The format of the string is the format of the algo::LnumStr9_U32's only field
// func:algo.LnumStr9_U32..ReadStrptrMaybe
bool                 LnumStr9_U32_ReadStrptrMaybe(algo::LnumStr9_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr9_U32..Cmp
i32                  LnumStr9_U32_Cmp(algo::LnumStr9_U32& lhs, algo::LnumStr9_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr9_U32..Init
void                 LnumStr9_U32_Init(algo::LnumStr9_U32& parent);
// func:algo.LnumStr9_U32..Eq
bool                 LnumStr9_U32_Eq(algo::LnumStr9_U32& lhs, algo::LnumStr9_U32& rhs) __attribute__((nothrow));
// func:algo.LnumStr9_U32..EqStrptr
bool                 LnumStr9_U32_EqStrptr(const algo::LnumStr9_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr9_U32.String  printfmt:Raw
// func:algo.LnumStr9_U32..Print
void                 LnumStr9_U32_Print(algo::LnumStr9_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LnumStr9_U64
struct LnumStr9_U64 { // algo.LnumStr9_U64: number stored as ascii digits, left pad with '0'
    enum { ch_max = 9 };
    u8 ch[9];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LnumStr9_U64 &rhs) const;
    bool operator !=(const algo::LnumStr9_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LnumStr9_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LnumStr9_U64.ch.Set
    void                 operator =(const algo::LnumStr9_U64& parent) __attribute__((nothrow));
    // func:algo.LnumStr9_U64.ch.Ctor
    LnumStr9_U64(const algo::LnumStr9_U64 &rhs) __attribute__((nothrow));
    // func:algo.LnumStr9_U64.ch.CtorStrptr
    LnumStr9_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LnumStr9_U64();
};

// Access string as array of chars
// func:algo.LnumStr9_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LnumStr9_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr9_U64.ch.HashStrptr
u32                  LnumStr9_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LnumStr9_U64.ch.Init
void                 ch_Init(algo::LnumStr9_U64 &parent) __attribute__((nothrow));
// always return constant 9
// func:algo.LnumStr9_U64.ch.Max
int                  ch_Max(algo::LnumStr9_U64& parent) __attribute__((nothrow));
// func:algo.LnumStr9_U64.ch.N
int                  ch_N(const algo::LnumStr9_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LnumStr9_U64.ch.Print
void                 ch_Print(algo::LnumStr9_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LnumStr9_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LnumStr9_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LnumStr9_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LnumStr9_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U64.ch.Getnum
u64                  ch_Getnum(algo::LnumStr9_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LnumStr9_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LnumStr9_U64.ch.Geti64
i64                  ch_Geti64(algo::LnumStr9_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LnumStr9_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LnumStr9_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LnumStr9_U64..Hash
u32                  LnumStr9_U64_Hash(u32 prev, const algo::LnumStr9_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LnumStr9_U64 from an ascii string.
// The format of the string is the format of the algo::LnumStr9_U64's only field
// func:algo.LnumStr9_U64..ReadStrptrMaybe
bool                 LnumStr9_U64_ReadStrptrMaybe(algo::LnumStr9_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LnumStr9_U64..Cmp
i32                  LnumStr9_U64_Cmp(algo::LnumStr9_U64& lhs, algo::LnumStr9_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LnumStr9_U64..Init
void                 LnumStr9_U64_Init(algo::LnumStr9_U64& parent);
// func:algo.LnumStr9_U64..Eq
bool                 LnumStr9_U64_Eq(algo::LnumStr9_U64& lhs, algo::LnumStr9_U64& rhs) __attribute__((nothrow));
// func:algo.LnumStr9_U64..EqStrptr
bool                 LnumStr9_U64_EqStrptr(const algo::LnumStr9_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LnumStr9_U64.String  printfmt:Raw
// func:algo.LnumStr9_U64..Print
void                 LnumStr9_U64_Print(algo::LnumStr9_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr10
#pragma pack(push,1)
struct LspaceStr10 { // algo.LspaceStr10
    enum { ch_max = 10 };
    u8 ch[10];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr10 &rhs) const;
    bool operator !=(const algo::LspaceStr10 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr10.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr10.ch.Set
    void                 operator =(const algo::LspaceStr10& parent) __attribute__((nothrow));
    // func:algo.LspaceStr10.ch.Ctor
    LspaceStr10(const algo::LspaceStr10 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr10.ch.CtorStrptr
    LspaceStr10(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr10();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr10.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr10& parent) __attribute__((nothrow));
// func:algo.LspaceStr10.ch.HashStrptr
u32                  LspaceStr10_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr10.ch.Init
void                 ch_Init(algo::LspaceStr10 &parent) __attribute__((nothrow));
// always return constant 10
// func:algo.LspaceStr10.ch.Max
int                  ch_Max(algo::LspaceStr10& parent) __attribute__((nothrow));
// func:algo.LspaceStr10.ch.N
int                  ch_N(const algo::LspaceStr10& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr10.ch.Print
void                 ch_Print(algo::LspaceStr10& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr10.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr10& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr10.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr10& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr10..Hash
u32                  LspaceStr10_Hash(u32 prev, const algo::LspaceStr10 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr10 from an ascii string.
// The format of the string is the format of the algo::LspaceStr10's only field
// func:algo.LspaceStr10..ReadStrptrMaybe
bool                 LspaceStr10_ReadStrptrMaybe(algo::LspaceStr10 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr10..Cmp
i32                  LspaceStr10_Cmp(algo::LspaceStr10& lhs, algo::LspaceStr10& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr10..Init
void                 LspaceStr10_Init(algo::LspaceStr10& parent);
// func:algo.LspaceStr10..Eq
bool                 LspaceStr10_Eq(algo::LspaceStr10& lhs, algo::LspaceStr10& rhs) __attribute__((nothrow));
// func:algo.LspaceStr10..EqStrptr
bool                 LspaceStr10_EqStrptr(const algo::LspaceStr10& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr10.String  printfmt:Raw
// func:algo.LspaceStr10..Print
void                 LspaceStr10_Print(algo::LspaceStr10& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr12
#pragma pack(push,1)
struct LspaceStr12 { // algo.LspaceStr12
    enum { ch_max = 12 };
    u8 ch[12];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr12 &rhs) const;
    bool operator !=(const algo::LspaceStr12 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr12.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr12.ch.Set
    void                 operator =(const algo::LspaceStr12& parent) __attribute__((nothrow));
    // func:algo.LspaceStr12.ch.Ctor
    LspaceStr12(const algo::LspaceStr12 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr12.ch.CtorStrptr
    LspaceStr12(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr12();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr12.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr12& parent) __attribute__((nothrow));
// func:algo.LspaceStr12.ch.HashStrptr
u32                  LspaceStr12_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr12.ch.Init
void                 ch_Init(algo::LspaceStr12 &parent) __attribute__((nothrow));
// always return constant 12
// func:algo.LspaceStr12.ch.Max
int                  ch_Max(algo::LspaceStr12& parent) __attribute__((nothrow));
// func:algo.LspaceStr12.ch.N
int                  ch_N(const algo::LspaceStr12& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr12.ch.Print
void                 ch_Print(algo::LspaceStr12& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr12.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr12& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr12.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr12& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr12..Hash
u32                  LspaceStr12_Hash(u32 prev, const algo::LspaceStr12 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr12 from an ascii string.
// The format of the string is the format of the algo::LspaceStr12's only field
// func:algo.LspaceStr12..ReadStrptrMaybe
bool                 LspaceStr12_ReadStrptrMaybe(algo::LspaceStr12 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr12..Cmp
i32                  LspaceStr12_Cmp(algo::LspaceStr12& lhs, algo::LspaceStr12& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr12..Init
void                 LspaceStr12_Init(algo::LspaceStr12& parent);
// func:algo.LspaceStr12..Eq
bool                 LspaceStr12_Eq(algo::LspaceStr12& lhs, algo::LspaceStr12& rhs) __attribute__((nothrow));
// func:algo.LspaceStr12..EqStrptr
bool                 LspaceStr12_EqStrptr(const algo::LspaceStr12& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr12.String  printfmt:Raw
// func:algo.LspaceStr12..Print
void                 LspaceStr12_Print(algo::LspaceStr12& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr14
#pragma pack(push,1)
struct LspaceStr14 { // algo.LspaceStr14
    enum { ch_max = 14 };
    u8 ch[14];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr14 &rhs) const;
    bool operator !=(const algo::LspaceStr14 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr14.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr14.ch.Set
    void                 operator =(const algo::LspaceStr14& parent) __attribute__((nothrow));
    // func:algo.LspaceStr14.ch.Ctor
    LspaceStr14(const algo::LspaceStr14 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr14.ch.CtorStrptr
    LspaceStr14(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr14();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr14.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr14& parent) __attribute__((nothrow));
// func:algo.LspaceStr14.ch.HashStrptr
u32                  LspaceStr14_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr14.ch.Init
void                 ch_Init(algo::LspaceStr14 &parent) __attribute__((nothrow));
// always return constant 14
// func:algo.LspaceStr14.ch.Max
int                  ch_Max(algo::LspaceStr14& parent) __attribute__((nothrow));
// func:algo.LspaceStr14.ch.N
int                  ch_N(const algo::LspaceStr14& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr14.ch.Print
void                 ch_Print(algo::LspaceStr14& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr14.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr14& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr14.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr14& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr14..Hash
u32                  LspaceStr14_Hash(u32 prev, const algo::LspaceStr14 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr14 from an ascii string.
// The format of the string is the format of the algo::LspaceStr14's only field
// func:algo.LspaceStr14..ReadStrptrMaybe
bool                 LspaceStr14_ReadStrptrMaybe(algo::LspaceStr14 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr14..Cmp
i32                  LspaceStr14_Cmp(algo::LspaceStr14& lhs, algo::LspaceStr14& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr14..Init
void                 LspaceStr14_Init(algo::LspaceStr14& parent);
// func:algo.LspaceStr14..Eq
bool                 LspaceStr14_Eq(algo::LspaceStr14& lhs, algo::LspaceStr14& rhs) __attribute__((nothrow));
// func:algo.LspaceStr14..EqStrptr
bool                 LspaceStr14_EqStrptr(const algo::LspaceStr14& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr14.String  printfmt:Raw
// func:algo.LspaceStr14..Print
void                 LspaceStr14_Print(algo::LspaceStr14& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr15
#pragma pack(push,1)
struct LspaceStr15 { // algo.LspaceStr15
    enum { ch_max = 15 };
    u8 ch[15];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr15 &rhs) const;
    bool operator !=(const algo::LspaceStr15 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr15.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr15.ch.Set
    void                 operator =(const algo::LspaceStr15& parent) __attribute__((nothrow));
    // func:algo.LspaceStr15.ch.Ctor
    LspaceStr15(const algo::LspaceStr15 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr15.ch.CtorStrptr
    LspaceStr15(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr15();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr15.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr15& parent) __attribute__((nothrow));
// func:algo.LspaceStr15.ch.HashStrptr
u32                  LspaceStr15_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr15.ch.Init
void                 ch_Init(algo::LspaceStr15 &parent) __attribute__((nothrow));
// always return constant 15
// func:algo.LspaceStr15.ch.Max
int                  ch_Max(algo::LspaceStr15& parent) __attribute__((nothrow));
// func:algo.LspaceStr15.ch.N
int                  ch_N(const algo::LspaceStr15& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr15.ch.Print
void                 ch_Print(algo::LspaceStr15& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr15.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr15& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr15.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr15& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr15..Hash
u32                  LspaceStr15_Hash(u32 prev, const algo::LspaceStr15 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr15 from an ascii string.
// The format of the string is the format of the algo::LspaceStr15's only field
// func:algo.LspaceStr15..ReadStrptrMaybe
bool                 LspaceStr15_ReadStrptrMaybe(algo::LspaceStr15 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr15..Cmp
i32                  LspaceStr15_Cmp(algo::LspaceStr15& lhs, algo::LspaceStr15& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr15..Init
void                 LspaceStr15_Init(algo::LspaceStr15& parent);
// func:algo.LspaceStr15..Eq
bool                 LspaceStr15_Eq(algo::LspaceStr15& lhs, algo::LspaceStr15& rhs) __attribute__((nothrow));
// func:algo.LspaceStr15..EqStrptr
bool                 LspaceStr15_EqStrptr(const algo::LspaceStr15& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr15.String  printfmt:Raw
// func:algo.LspaceStr15..Print
void                 LspaceStr15_Print(algo::LspaceStr15& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr20_I64
struct LspaceStr20_I64 { // algo.LspaceStr20_I64: number stored as ascii digits, left pad with ' '
    enum { ch_max = 20 };
    u8 ch[20];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr20_I64 &rhs) const;
    bool operator !=(const algo::LspaceStr20_I64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr20_I64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr20_I64.ch.Set
    void                 operator =(const algo::LspaceStr20_I64& parent) __attribute__((nothrow));
    // func:algo.LspaceStr20_I64.ch.Ctor
    LspaceStr20_I64(const algo::LspaceStr20_I64 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr20_I64.ch.CtorStrptr
    LspaceStr20_I64(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr20_I64();
};

// Access string as array of chars
// func:algo.LspaceStr20_I64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr20_I64& parent) __attribute__((nothrow));
// func:algo.LspaceStr20_I64.ch.HashStrptr
u32                  LspaceStr20_I64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr20_I64.ch.Init
void                 ch_Init(algo::LspaceStr20_I64 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.LspaceStr20_I64.ch.Max
int                  ch_Max(algo::LspaceStr20_I64& parent) __attribute__((nothrow));
// func:algo.LspaceStr20_I64.ch.N
int                  ch_N(const algo::LspaceStr20_I64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr20_I64.ch.Print
void                 ch_Print(algo::LspaceStr20_I64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr20_I64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr20_I64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr20_I64.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr20_I64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_I64.ch.Getnum
i64                  ch_Getnum(algo::LspaceStr20_I64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_I64.ch.GetnumDflt
i64                  ch_GetnumDflt(algo::LspaceStr20_I64& parent, i64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_I64.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr20_I64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr20_I64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr20_I64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr20_I64..Hash
u32                  LspaceStr20_I64_Hash(u32 prev, const algo::LspaceStr20_I64 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr20_I64 from an ascii string.
// The format of the string is the format of the algo::LspaceStr20_I64's only field
// func:algo.LspaceStr20_I64..ReadStrptrMaybe
bool                 LspaceStr20_I64_ReadStrptrMaybe(algo::LspaceStr20_I64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr20_I64..Cmp
i32                  LspaceStr20_I64_Cmp(algo::LspaceStr20_I64& lhs, algo::LspaceStr20_I64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr20_I64..Init
void                 LspaceStr20_I64_Init(algo::LspaceStr20_I64& parent);
// func:algo.LspaceStr20_I64..Eq
bool                 LspaceStr20_I64_Eq(algo::LspaceStr20_I64& lhs, algo::LspaceStr20_I64& rhs) __attribute__((nothrow));
// func:algo.LspaceStr20_I64..EqStrptr
bool                 LspaceStr20_I64_EqStrptr(const algo::LspaceStr20_I64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr20_I64.String  printfmt:Raw
// func:algo.LspaceStr20_I64..Print
void                 LspaceStr20_I64_Print(algo::LspaceStr20_I64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr20_U64
#pragma pack(push,1)
struct LspaceStr20_U64 { // algo.LspaceStr20_U64: number stored as ascii digits, left pad with ' '
    enum { ch_max = 20 };
    u8 ch[20];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr20_U64 &rhs) const;
    bool operator !=(const algo::LspaceStr20_U64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr20_U64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr20_U64.ch.Set
    void                 operator =(const algo::LspaceStr20_U64& parent) __attribute__((nothrow));
    // func:algo.LspaceStr20_U64.ch.Ctor
    LspaceStr20_U64(const algo::LspaceStr20_U64 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr20_U64.ch.CtorStrptr
    LspaceStr20_U64(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr20_U64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr20_U64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr20_U64& parent) __attribute__((nothrow));
// func:algo.LspaceStr20_U64.ch.HashStrptr
u32                  LspaceStr20_U64_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr20_U64.ch.Init
void                 ch_Init(algo::LspaceStr20_U64 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.LspaceStr20_U64.ch.Max
int                  ch_Max(algo::LspaceStr20_U64& parent) __attribute__((nothrow));
// func:algo.LspaceStr20_U64.ch.N
int                  ch_N(const algo::LspaceStr20_U64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr20_U64.ch.Print
void                 ch_Print(algo::LspaceStr20_U64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr20_U64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr20_U64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr20_U64.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr20_U64& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_U64.ch.Getnum
u64                  ch_Getnum(algo::LspaceStr20_U64& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_U64.ch.GetnumDflt
u64                  ch_GetnumDflt(algo::LspaceStr20_U64& parent, u64 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr20_U64.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr20_U64& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr20_U64.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr20_U64& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr20_U64..Hash
u32                  LspaceStr20_U64_Hash(u32 prev, const algo::LspaceStr20_U64 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr20_U64 from an ascii string.
// The format of the string is the format of the algo::LspaceStr20_U64's only field
// func:algo.LspaceStr20_U64..ReadStrptrMaybe
bool                 LspaceStr20_U64_ReadStrptrMaybe(algo::LspaceStr20_U64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr20_U64..Cmp
i32                  LspaceStr20_U64_Cmp(algo::LspaceStr20_U64& lhs, algo::LspaceStr20_U64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr20_U64..Init
void                 LspaceStr20_U64_Init(algo::LspaceStr20_U64& parent);
// func:algo.LspaceStr20_U64..Eq
bool                 LspaceStr20_U64_Eq(algo::LspaceStr20_U64& lhs, algo::LspaceStr20_U64& rhs) __attribute__((nothrow));
// func:algo.LspaceStr20_U64..EqStrptr
bool                 LspaceStr20_U64_EqStrptr(const algo::LspaceStr20_U64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr20_U64.String  printfmt:Raw
// func:algo.LspaceStr20_U64..Print
void                 LspaceStr20_U64_Print(algo::LspaceStr20_U64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr3
#pragma pack(push,1)
struct LspaceStr3 { // algo.LspaceStr3
    enum { ch_max = 3 };
    u8 ch[3];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr3 &rhs) const;
    bool operator !=(const algo::LspaceStr3 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr3.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr3.ch.Set
    void                 operator =(const algo::LspaceStr3& parent) __attribute__((nothrow));
    // func:algo.LspaceStr3.ch.Ctor
    LspaceStr3(const algo::LspaceStr3 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr3.ch.CtorStrptr
    LspaceStr3(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr3();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr3.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr3& parent) __attribute__((nothrow));
// func:algo.LspaceStr3.ch.HashStrptr
u32                  LspaceStr3_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr3.ch.Init
void                 ch_Init(algo::LspaceStr3 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.LspaceStr3.ch.Max
int                  ch_Max(algo::LspaceStr3& parent) __attribute__((nothrow));
// func:algo.LspaceStr3.ch.N
int                  ch_N(const algo::LspaceStr3& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr3.ch.Print
void                 ch_Print(algo::LspaceStr3& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr3.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr3& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr3.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr3& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr3..Hash
u32                  LspaceStr3_Hash(u32 prev, const algo::LspaceStr3 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr3 from an ascii string.
// The format of the string is the format of the algo::LspaceStr3's only field
// func:algo.LspaceStr3..ReadStrptrMaybe
bool                 LspaceStr3_ReadStrptrMaybe(algo::LspaceStr3 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr3..Cmp
i32                  LspaceStr3_Cmp(algo::LspaceStr3& lhs, algo::LspaceStr3& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr3..Init
void                 LspaceStr3_Init(algo::LspaceStr3& parent);
// func:algo.LspaceStr3..Eq
bool                 LspaceStr3_Eq(algo::LspaceStr3& lhs, algo::LspaceStr3& rhs) __attribute__((nothrow));
// func:algo.LspaceStr3..EqStrptr
bool                 LspaceStr3_EqStrptr(const algo::LspaceStr3& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr3.String  printfmt:Raw
// func:algo.LspaceStr3..Print
void                 LspaceStr3_Print(algo::LspaceStr3& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr3_I16
#pragma pack(push,1)
struct LspaceStr3_I16 { // algo.LspaceStr3_I16: number stored as ascii digits, left pad with ' '
    enum { ch_max = 3 };
    u8 ch[3];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr3_I16 &rhs) const;
    bool operator !=(const algo::LspaceStr3_I16 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr3_I16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr3_I16.ch.Set
    void                 operator =(const algo::LspaceStr3_I16& parent) __attribute__((nothrow));
    // func:algo.LspaceStr3_I16.ch.Ctor
    LspaceStr3_I16(const algo::LspaceStr3_I16 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr3_I16.ch.CtorStrptr
    LspaceStr3_I16(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr3_I16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr3_I16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr3_I16& parent) __attribute__((nothrow));
// func:algo.LspaceStr3_I16.ch.HashStrptr
u32                  LspaceStr3_I16_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr3_I16.ch.Init
void                 ch_Init(algo::LspaceStr3_I16 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.LspaceStr3_I16.ch.Max
int                  ch_Max(algo::LspaceStr3_I16& parent) __attribute__((nothrow));
// func:algo.LspaceStr3_I16.ch.N
int                  ch_N(const algo::LspaceStr3_I16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr3_I16.ch.Print
void                 ch_Print(algo::LspaceStr3_I16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr3_I16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr3_I16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr3_I16.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr3_I16& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr3_I16.ch.Getnum
i16                  ch_Getnum(algo::LspaceStr3_I16& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr3_I16.ch.GetnumDflt
i16                  ch_GetnumDflt(algo::LspaceStr3_I16& parent, i16 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr3_I16.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr3_I16& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr3_I16.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr3_I16& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr3_I16..Hash
u32                  LspaceStr3_I16_Hash(u32 prev, const algo::LspaceStr3_I16 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr3_I16 from an ascii string.
// The format of the string is the format of the algo::LspaceStr3_I16's only field
// func:algo.LspaceStr3_I16..ReadStrptrMaybe
bool                 LspaceStr3_I16_ReadStrptrMaybe(algo::LspaceStr3_I16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr3_I16..Cmp
i32                  LspaceStr3_I16_Cmp(algo::LspaceStr3_I16& lhs, algo::LspaceStr3_I16& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr3_I16..Init
void                 LspaceStr3_I16_Init(algo::LspaceStr3_I16& parent);
// func:algo.LspaceStr3_I16..Eq
bool                 LspaceStr3_I16_Eq(algo::LspaceStr3_I16& lhs, algo::LspaceStr3_I16& rhs) __attribute__((nothrow));
// func:algo.LspaceStr3_I16..EqStrptr
bool                 LspaceStr3_I16_EqStrptr(const algo::LspaceStr3_I16& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr3_I16.String  printfmt:Raw
// func:algo.LspaceStr3_I16..Print
void                 LspaceStr3_I16_Print(algo::LspaceStr3_I16& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr4
#pragma pack(push,1)
struct LspaceStr4 { // algo.LspaceStr4
    enum { ch_max = 4 };
    u8 ch[4];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr4 &rhs) const;
    bool operator !=(const algo::LspaceStr4 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr4.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr4.ch.Set
    void                 operator =(const algo::LspaceStr4& parent) __attribute__((nothrow));
    // func:algo.LspaceStr4.ch.Ctor
    LspaceStr4(const algo::LspaceStr4 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr4.ch.CtorStrptr
    LspaceStr4(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr4();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr4.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr4& parent) __attribute__((nothrow));
// func:algo.LspaceStr4.ch.HashStrptr
u32                  LspaceStr4_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr4.ch.Init
void                 ch_Init(algo::LspaceStr4 &parent) __attribute__((nothrow));
// always return constant 4
// func:algo.LspaceStr4.ch.Max
int                  ch_Max(algo::LspaceStr4& parent) __attribute__((nothrow));
// func:algo.LspaceStr4.ch.N
int                  ch_N(const algo::LspaceStr4& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr4.ch.Print
void                 ch_Print(algo::LspaceStr4& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr4.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr4& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr4.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr4& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr4..Hash
u32                  LspaceStr4_Hash(u32 prev, const algo::LspaceStr4 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr4 from an ascii string.
// The format of the string is the format of the algo::LspaceStr4's only field
// func:algo.LspaceStr4..ReadStrptrMaybe
bool                 LspaceStr4_ReadStrptrMaybe(algo::LspaceStr4 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr4..Cmp
i32                  LspaceStr4_Cmp(algo::LspaceStr4& lhs, algo::LspaceStr4& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr4..Init
void                 LspaceStr4_Init(algo::LspaceStr4& parent);
// func:algo.LspaceStr4..Eq
bool                 LspaceStr4_Eq(algo::LspaceStr4& lhs, algo::LspaceStr4& rhs) __attribute__((nothrow));
// func:algo.LspaceStr4..EqStrptr
bool                 LspaceStr4_EqStrptr(const algo::LspaceStr4& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr4.String  printfmt:Raw
// func:algo.LspaceStr4..Print
void                 LspaceStr4_Print(algo::LspaceStr4& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr5
#pragma pack(push,1)
struct LspaceStr5 { // algo.LspaceStr5
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr5 &rhs) const;
    bool operator !=(const algo::LspaceStr5 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr5.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr5.ch.Set
    void                 operator =(const algo::LspaceStr5& parent) __attribute__((nothrow));
    // func:algo.LspaceStr5.ch.Ctor
    LspaceStr5(const algo::LspaceStr5 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr5.ch.CtorStrptr
    LspaceStr5(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr5();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr5.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr5& parent) __attribute__((nothrow));
// func:algo.LspaceStr5.ch.HashStrptr
u32                  LspaceStr5_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr5.ch.Init
void                 ch_Init(algo::LspaceStr5 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.LspaceStr5.ch.Max
int                  ch_Max(algo::LspaceStr5& parent) __attribute__((nothrow));
// func:algo.LspaceStr5.ch.N
int                  ch_N(const algo::LspaceStr5& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr5.ch.Print
void                 ch_Print(algo::LspaceStr5& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr5.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr5& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr5.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr5& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr5..Hash
u32                  LspaceStr5_Hash(u32 prev, const algo::LspaceStr5 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr5 from an ascii string.
// The format of the string is the format of the algo::LspaceStr5's only field
// func:algo.LspaceStr5..ReadStrptrMaybe
bool                 LspaceStr5_ReadStrptrMaybe(algo::LspaceStr5 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr5..Cmp
i32                  LspaceStr5_Cmp(algo::LspaceStr5& lhs, algo::LspaceStr5& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr5..Init
void                 LspaceStr5_Init(algo::LspaceStr5& parent);
// func:algo.LspaceStr5..Eq
bool                 LspaceStr5_Eq(algo::LspaceStr5& lhs, algo::LspaceStr5& rhs) __attribute__((nothrow));
// func:algo.LspaceStr5..EqStrptr
bool                 LspaceStr5_EqStrptr(const algo::LspaceStr5& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr5.String  printfmt:Raw
// func:algo.LspaceStr5..Print
void                 LspaceStr5_Print(algo::LspaceStr5& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr5_I16
#pragma pack(push,1)
struct LspaceStr5_I16 { // algo.LspaceStr5_I16
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr5_I16 &rhs) const;
    bool operator !=(const algo::LspaceStr5_I16 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr5_I16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr5_I16.ch.Set
    void                 operator =(const algo::LspaceStr5_I16& parent) __attribute__((nothrow));
    // func:algo.LspaceStr5_I16.ch.Ctor
    LspaceStr5_I16(const algo::LspaceStr5_I16 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr5_I16.ch.CtorStrptr
    LspaceStr5_I16(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr5_I16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr5_I16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr5_I16& parent) __attribute__((nothrow));
// func:algo.LspaceStr5_I16.ch.HashStrptr
u32                  LspaceStr5_I16_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr5_I16.ch.Init
void                 ch_Init(algo::LspaceStr5_I16 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.LspaceStr5_I16.ch.Max
int                  ch_Max(algo::LspaceStr5_I16& parent) __attribute__((nothrow));
// func:algo.LspaceStr5_I16.ch.N
int                  ch_N(const algo::LspaceStr5_I16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr5_I16.ch.Print
void                 ch_Print(algo::LspaceStr5_I16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr5_I16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr5_I16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr5_I16.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr5_I16& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr5_I16.ch.Getnum
u16                  ch_Getnum(algo::LspaceStr5_I16& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr5_I16.ch.GetnumDflt
u16                  ch_GetnumDflt(algo::LspaceStr5_I16& parent, u16 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr5_I16.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr5_I16& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr5_I16.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr5_I16& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr5_I16..Hash
u32                  LspaceStr5_I16_Hash(u32 prev, const algo::LspaceStr5_I16 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr5_I16 from an ascii string.
// The format of the string is the format of the algo::LspaceStr5_I16's only field
// func:algo.LspaceStr5_I16..ReadStrptrMaybe
bool                 LspaceStr5_I16_ReadStrptrMaybe(algo::LspaceStr5_I16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr5_I16..Cmp
i32                  LspaceStr5_I16_Cmp(algo::LspaceStr5_I16& lhs, algo::LspaceStr5_I16& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr5_I16..Init
void                 LspaceStr5_I16_Init(algo::LspaceStr5_I16& parent);
// func:algo.LspaceStr5_I16..Eq
bool                 LspaceStr5_I16_Eq(algo::LspaceStr5_I16& lhs, algo::LspaceStr5_I16& rhs) __attribute__((nothrow));
// func:algo.LspaceStr5_I16..EqStrptr
bool                 LspaceStr5_I16_EqStrptr(const algo::LspaceStr5_I16& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr5_I16.String  printfmt:Raw
// func:algo.LspaceStr5_I16..Print
void                 LspaceStr5_I16_Print(algo::LspaceStr5_I16& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr6
#pragma pack(push,1)
struct LspaceStr6 { // algo.LspaceStr6
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr6 &rhs) const;
    bool operator !=(const algo::LspaceStr6 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr6.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr6.ch.Set
    void                 operator =(const algo::LspaceStr6& parent) __attribute__((nothrow));
    // func:algo.LspaceStr6.ch.Ctor
    LspaceStr6(const algo::LspaceStr6 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr6.ch.CtorStrptr
    LspaceStr6(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr6();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr6.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr6& parent) __attribute__((nothrow));
// func:algo.LspaceStr6.ch.HashStrptr
u32                  LspaceStr6_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr6.ch.Init
void                 ch_Init(algo::LspaceStr6 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.LspaceStr6.ch.Max
int                  ch_Max(algo::LspaceStr6& parent) __attribute__((nothrow));
// func:algo.LspaceStr6.ch.N
int                  ch_N(const algo::LspaceStr6& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr6.ch.Print
void                 ch_Print(algo::LspaceStr6& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr6.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr6& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr6.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr6& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr6..Hash
u32                  LspaceStr6_Hash(u32 prev, const algo::LspaceStr6 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr6 from an ascii string.
// The format of the string is the format of the algo::LspaceStr6's only field
// func:algo.LspaceStr6..ReadStrptrMaybe
bool                 LspaceStr6_ReadStrptrMaybe(algo::LspaceStr6 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr6..Cmp
i32                  LspaceStr6_Cmp(algo::LspaceStr6& lhs, algo::LspaceStr6& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr6..Init
void                 LspaceStr6_Init(algo::LspaceStr6& parent);
// func:algo.LspaceStr6..Eq
bool                 LspaceStr6_Eq(algo::LspaceStr6& lhs, algo::LspaceStr6& rhs) __attribute__((nothrow));
// func:algo.LspaceStr6..EqStrptr
bool                 LspaceStr6_EqStrptr(const algo::LspaceStr6& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr6.String  printfmt:Raw
// func:algo.LspaceStr6..Print
void                 LspaceStr6_Print(algo::LspaceStr6& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr6_U32
struct LspaceStr6_U32 { // algo.LspaceStr6_U32: number stored as ascii digits, left pad with ' '
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr6_U32 &rhs) const;
    bool operator !=(const algo::LspaceStr6_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr6_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr6_U32.ch.Set
    void                 operator =(const algo::LspaceStr6_U32& parent) __attribute__((nothrow));
    // func:algo.LspaceStr6_U32.ch.Ctor
    LspaceStr6_U32(const algo::LspaceStr6_U32 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr6_U32.ch.CtorStrptr
    LspaceStr6_U32(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr6_U32();
};

// Access string as array of chars
// func:algo.LspaceStr6_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr6_U32& parent) __attribute__((nothrow));
// func:algo.LspaceStr6_U32.ch.HashStrptr
u32                  LspaceStr6_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr6_U32.ch.Init
void                 ch_Init(algo::LspaceStr6_U32 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.LspaceStr6_U32.ch.Max
int                  ch_Max(algo::LspaceStr6_U32& parent) __attribute__((nothrow));
// func:algo.LspaceStr6_U32.ch.N
int                  ch_N(const algo::LspaceStr6_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr6_U32.ch.Print
void                 ch_Print(algo::LspaceStr6_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr6_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr6_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr6_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr6_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr6_U32.ch.Getnum
u32                  ch_Getnum(algo::LspaceStr6_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr6_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::LspaceStr6_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr6_U32.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr6_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr6_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr6_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr6_U32..Hash
u32                  LspaceStr6_U32_Hash(u32 prev, const algo::LspaceStr6_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr6_U32 from an ascii string.
// The format of the string is the format of the algo::LspaceStr6_U32's only field
// func:algo.LspaceStr6_U32..ReadStrptrMaybe
bool                 LspaceStr6_U32_ReadStrptrMaybe(algo::LspaceStr6_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr6_U32..Cmp
i32                  LspaceStr6_U32_Cmp(algo::LspaceStr6_U32& lhs, algo::LspaceStr6_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr6_U32..Init
void                 LspaceStr6_U32_Init(algo::LspaceStr6_U32& parent);
// func:algo.LspaceStr6_U32..Eq
bool                 LspaceStr6_U32_Eq(algo::LspaceStr6_U32& lhs, algo::LspaceStr6_U32& rhs) __attribute__((nothrow));
// func:algo.LspaceStr6_U32..EqStrptr
bool                 LspaceStr6_U32_EqStrptr(const algo::LspaceStr6_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr6_U32.String  printfmt:Raw
// func:algo.LspaceStr6_U32..Print
void                 LspaceStr6_U32_Print(algo::LspaceStr6_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr7_I32_Base36
struct LspaceStr7_I32_Base36 { // algo.LspaceStr7_I32_Base36: number stored as ascii digits, left pad with ' ', base 36
    enum { ch_max = 7 };
    u8 ch[7];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr7_I32_Base36 &rhs) const;
    bool operator !=(const algo::LspaceStr7_I32_Base36 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr7_I32_Base36.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr7_I32_Base36.ch.Set
    void                 operator =(const algo::LspaceStr7_I32_Base36& parent) __attribute__((nothrow));
    // func:algo.LspaceStr7_I32_Base36.ch.Ctor
    LspaceStr7_I32_Base36(const algo::LspaceStr7_I32_Base36 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr7_I32_Base36.ch.CtorStrptr
    LspaceStr7_I32_Base36(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr7_I32_Base36();
};

// Access string as array of chars
// func:algo.LspaceStr7_I32_Base36.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr7_I32_Base36& parent) __attribute__((nothrow));
// func:algo.LspaceStr7_I32_Base36.ch.HashStrptr
u32                  LspaceStr7_I32_Base36_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr7_I32_Base36.ch.Init
void                 ch_Init(algo::LspaceStr7_I32_Base36 &parent) __attribute__((nothrow));
// always return constant 7
// func:algo.LspaceStr7_I32_Base36.ch.Max
int                  ch_Max(algo::LspaceStr7_I32_Base36& parent) __attribute__((nothrow));
// func:algo.LspaceStr7_I32_Base36.ch.N
int                  ch_N(const algo::LspaceStr7_I32_Base36& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr7_I32_Base36.ch.Print
void                 ch_Print(algo::LspaceStr7_I32_Base36& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr7_I32_Base36.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr7_I32_Base36& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr7_I32_Base36.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr7_I32_Base36& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.LspaceStr7_I32_Base36.ch.Getnum
i32                  ch_Getnum(algo::LspaceStr7_I32_Base36& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.LspaceStr7_I32_Base36.ch.GetnumDflt
i32                  ch_GetnumDflt(algo::LspaceStr7_I32_Base36& parent, i32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.LspaceStr7_I32_Base36.ch.Geti64
i64                  ch_Geti64(algo::LspaceStr7_I32_Base36& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-36 conversion.
// If the number is too large for the string, return false.
// func:algo.LspaceStr7_I32_Base36.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::LspaceStr7_I32_Base36& parent, i64 rhs) __attribute__((nothrow));

// func:algo.LspaceStr7_I32_Base36..Hash
u32                  LspaceStr7_I32_Base36_Hash(u32 prev, const algo::LspaceStr7_I32_Base36 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr7_I32_Base36 from an ascii string.
// The format of the string is the format of the algo::LspaceStr7_I32_Base36's only field
// func:algo.LspaceStr7_I32_Base36..ReadStrptrMaybe
bool                 LspaceStr7_I32_Base36_ReadStrptrMaybe(algo::LspaceStr7_I32_Base36 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr7_I32_Base36..Cmp
i32                  LspaceStr7_I32_Base36_Cmp(algo::LspaceStr7_I32_Base36& lhs, algo::LspaceStr7_I32_Base36& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr7_I32_Base36..Init
void                 LspaceStr7_I32_Base36_Init(algo::LspaceStr7_I32_Base36& parent);
// func:algo.LspaceStr7_I32_Base36..Eq
bool                 LspaceStr7_I32_Base36_Eq(algo::LspaceStr7_I32_Base36& lhs, algo::LspaceStr7_I32_Base36& rhs) __attribute__((nothrow));
// func:algo.LspaceStr7_I32_Base36..EqStrptr
bool                 LspaceStr7_I32_Base36_EqStrptr(const algo::LspaceStr7_I32_Base36& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr7_I32_Base36.String  printfmt:Raw
// func:algo.LspaceStr7_I32_Base36..Print
void                 LspaceStr7_I32_Base36_Print(algo::LspaceStr7_I32_Base36& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr8
#pragma pack(push,1)
struct LspaceStr8 { // algo.LspaceStr8
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr8 &rhs) const;
    bool operator !=(const algo::LspaceStr8 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr8.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr8.ch.Set
    void                 operator =(const algo::LspaceStr8& parent) __attribute__((nothrow));
    // func:algo.LspaceStr8.ch.Ctor
    LspaceStr8(const algo::LspaceStr8 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr8.ch.CtorStrptr
    LspaceStr8(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr8();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr8.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr8& parent) __attribute__((nothrow));
// func:algo.LspaceStr8.ch.HashStrptr
u32                  LspaceStr8_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr8.ch.Init
void                 ch_Init(algo::LspaceStr8 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.LspaceStr8.ch.Max
int                  ch_Max(algo::LspaceStr8& parent) __attribute__((nothrow));
// func:algo.LspaceStr8.ch.N
int                  ch_N(const algo::LspaceStr8& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr8.ch.Print
void                 ch_Print(algo::LspaceStr8& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr8.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr8& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr8.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr8& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr8..Hash
u32                  LspaceStr8_Hash(u32 prev, const algo::LspaceStr8 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr8 from an ascii string.
// The format of the string is the format of the algo::LspaceStr8's only field
// func:algo.LspaceStr8..ReadStrptrMaybe
bool                 LspaceStr8_ReadStrptrMaybe(algo::LspaceStr8 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr8..Cmp
i32                  LspaceStr8_Cmp(algo::LspaceStr8& lhs, algo::LspaceStr8& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr8..Init
void                 LspaceStr8_Init(algo::LspaceStr8& parent);
// func:algo.LspaceStr8..Eq
bool                 LspaceStr8_Eq(algo::LspaceStr8& lhs, algo::LspaceStr8& rhs) __attribute__((nothrow));
// func:algo.LspaceStr8..EqStrptr
bool                 LspaceStr8_EqStrptr(const algo::LspaceStr8& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr8.String  printfmt:Raw
// func:algo.LspaceStr8..Print
void                 LspaceStr8_Print(algo::LspaceStr8& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.LspaceStr9
#pragma pack(push,1)
struct LspaceStr9 { // algo.LspaceStr9
    enum { ch_max = 9 };
    u8 ch[9];
    inline operator algo::strptr() const;
    bool operator ==(const algo::LspaceStr9 &rhs) const;
    bool operator !=(const algo::LspaceStr9 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.LspaceStr9.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.LspaceStr9.ch.Set
    void                 operator =(const algo::LspaceStr9& parent) __attribute__((nothrow));
    // func:algo.LspaceStr9.ch.Ctor
    LspaceStr9(const algo::LspaceStr9 &rhs) __attribute__((nothrow));
    // func:algo.LspaceStr9.ch.CtorStrptr
    LspaceStr9(const algo::strptr &rhs) __attribute__((nothrow));
    LspaceStr9();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.LspaceStr9.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::LspaceStr9& parent) __attribute__((nothrow));
// func:algo.LspaceStr9.ch.HashStrptr
u32                  LspaceStr9_Hash(u32 prev, const algo::strptr &str);
// func:algo.LspaceStr9.ch.Init
void                 ch_Init(algo::LspaceStr9 &parent) __attribute__((nothrow));
// always return constant 9
// func:algo.LspaceStr9.ch.Max
int                  ch_Max(algo::LspaceStr9& parent) __attribute__((nothrow));
// func:algo.LspaceStr9.ch.N
int                  ch_N(const algo::LspaceStr9& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.LspaceStr9.ch.Print
void                 ch_Print(algo::LspaceStr9& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.LspaceStr9.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::LspaceStr9& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.LspaceStr9.ch.SetStrptr
void                 ch_SetStrptr(algo::LspaceStr9& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.LspaceStr9..Hash
u32                  LspaceStr9_Hash(u32 prev, const algo::LspaceStr9 & rhs) __attribute__((nothrow));
// Read fields of algo::LspaceStr9 from an ascii string.
// The format of the string is the format of the algo::LspaceStr9's only field
// func:algo.LspaceStr9..ReadStrptrMaybe
bool                 LspaceStr9_ReadStrptrMaybe(algo::LspaceStr9 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.LspaceStr9..Cmp
i32                  LspaceStr9_Cmp(algo::LspaceStr9& lhs, algo::LspaceStr9& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.LspaceStr9..Init
void                 LspaceStr9_Init(algo::LspaceStr9& parent);
// func:algo.LspaceStr9..Eq
bool                 LspaceStr9_Eq(algo::LspaceStr9& lhs, algo::LspaceStr9& rhs) __attribute__((nothrow));
// func:algo.LspaceStr9..EqStrptr
bool                 LspaceStr9_EqStrptr(const algo::LspaceStr9& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.LspaceStr9.String  printfmt:Raw
// func:algo.LspaceStr9..Print
void                 LspaceStr9_Print(algo::LspaceStr9& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Md5Digest
struct Md5Digest { // algo.Md5Digest
    u8   value_elems[16];   //   0  fixed array
    explicit Md5Digest(algo::aryptr<u8 >              in_value);
    Md5Digest();
};

// Set all elements of fixed array to value RHS
// func:algo.Md5Digest.value.Fill
void                 value_Fill(algo::Md5Digest& parent, const u8 &rhs) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.Md5Digest.value.Find
u8*                  value_Find(algo::Md5Digest& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Access fixed array value as aryptr.
// func:algo.Md5Digest.value.Getary
algo::aryptr<u8>     value_Getary(algo::Md5Digest& parent) __attribute__((nothrow));
// Return max number of items in the array
// func:algo.Md5Digest.value.Max
i32                  value_Max(algo::Md5Digest& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.Md5Digest.value.N
i32                  value_N(const algo::Md5Digest& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Set contents of fixed array to RHS; Input length is trimmed as necessary
// func:algo.Md5Digest.value.Setary
void                 value_Setary(algo::Md5Digest& parent, const algo::aryptr<u8> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo.Md5Digest.value.qFind
u8&                  value_qFind(algo::Md5Digest& parent, u64 t) __attribute__((nothrow));
// Convert value to a string.
// Array is printed as a regular string.
// func:algo.Md5Digest.value.Print
void                 value_Print(algo::Md5Digest& parent, algo::cstring &rhs) __attribute__((nothrow));
// Read array from string
// Convert string to field. Return success value
// func:algo.Md5Digest.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::Md5Digest& parent, algo::strptr in_str) __attribute__((nothrow));

// cursor points to valid item
// func:algo.Md5Digest.value_curs.Reset
void                 Md5Digest_value_curs_Reset(Md5Digest_value_curs &curs, algo::Md5Digest &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Md5Digest.value_curs.ValidQ
bool                 Md5Digest_value_curs_ValidQ(Md5Digest_value_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo.Md5Digest.value_curs.Next
void                 Md5Digest_value_curs_Next(Md5Digest_value_curs &curs) __attribute__((nothrow));
// item access
// func:algo.Md5Digest.value_curs.Access
u8&                  Md5Digest_value_curs_Access(Md5Digest_value_curs &curs) __attribute__((nothrow));
// Read fields of algo::Md5Digest from an ascii string.
// The format of the string is the format of the algo::Md5Digest's only field
// func:algo.Md5Digest..ReadStrptrMaybe
bool                 Md5Digest_ReadStrptrMaybe(algo::Md5Digest &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Md5Digest..Init
void                 Md5Digest_Init(algo::Md5Digest& parent);
// print string representation of ROW to string STR
// cfmt:algo.Md5Digest.String  printfmt:Raw
// func:algo.Md5Digest..Print
void                 Md5Digest_Print(algo::Md5Digest row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Month
struct Month { // algo.Month
    u32   value;   //   0
    inline operator algo_MonthEnum() const;
    explicit Month(u32                            in_value);
    Month(algo_MonthEnum arg);
    Month();
};

// Get value of field as enum type
// func:algo.Month.value.GetEnum
algo_MonthEnum       value_GetEnum(const algo::Month& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.Month.value.SetEnum
void                 value_SetEnum(algo::Month& parent, algo_MonthEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.Month.value.ToCstr
const char*          value_ToCstr(const algo::Month& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.Month.value.Print
void                 value_Print(const algo::Month& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.Month.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::Month& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.Month.value.SetStrptr
void                 value_SetStrptr(algo::Month& parent, algo::strptr rhs, algo_MonthEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Month.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::Month& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo::Month from an ascii string.
// The format of the string is the format of the algo::Month's only field
// func:algo.Month..ReadStrptrMaybe
bool                 Month_ReadStrptrMaybe(algo::Month &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Month..Init
void                 Month_Init(algo::Month& parent);
// print string representation of ROW to string STR
// cfmt:algo.Month.String  printfmt:Raw
// func:algo.Month..Print
void                 Month_Print(algo::Month row, algo::cstring& str) __attribute__((nothrow));

// --- algo.NumParseFlags
struct NumParseFlags { // algo.NumParseFlags
    u32   value;   //   0
    inline operator algo_NumParseFlagsEnum() const;
    explicit NumParseFlags(u32                            in_value);
    NumParseFlags(algo_NumParseFlagsEnum arg);
    NumParseFlags();
};

// Retrieve bitfield from value of field value
//    1 bits starting at bit 0.
// func:algo.NumParseFlags.err.Get
bool                 err_Get(const algo::NumParseFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 0.
// func:algo.NumParseFlags.err.Set
void                 err_Set(algo::NumParseFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 1.
// func:algo.NumParseFlags.ok.Get
bool                 ok_Get(const algo::NumParseFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 1.
// func:algo.NumParseFlags.ok.Set
void                 ok_Set(algo::NumParseFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 2.
// func:algo.NumParseFlags.neg.Get
bool                 neg_Get(const algo::NumParseFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 2.
// func:algo.NumParseFlags.neg.Set
void                 neg_Set(algo::NumParseFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 3.
// func:algo.NumParseFlags.overflow.Get
bool                 overflow_Get(const algo::NumParseFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 3.
// func:algo.NumParseFlags.overflow.Set
void                 overflow_Set(algo::NumParseFlags& parent, bool rhs) __attribute__((nothrow));

// Retrieve bitfield from value of field value
//    1 bits starting at bit 4.
// func:algo.NumParseFlags.hex.Get
bool                 hex_Get(const algo::NumParseFlags& parent) __attribute__((__warn_unused_result__, nothrow));
// Set bitfield in value of field 'value'
//    1 bits starting at bit 4.
// func:algo.NumParseFlags.hex.Set
void                 hex_Set(algo::NumParseFlags& parent, bool rhs) __attribute__((nothrow));

// func:algo.NumParseFlags..ReadFieldMaybe
bool                 NumParseFlags_ReadFieldMaybe(algo::NumParseFlags& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of algo::NumParseFlags from an ascii string.
// func:algo.NumParseFlags..ReadStrptrMaybe
bool                 NumParseFlags_ReadStrptrMaybe(algo::NumParseFlags &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.NumParseFlags..Init
void                 NumParseFlags_Init(algo::NumParseFlags& parent);
// print string representation of ROW to string STR
// cfmt:algo.NumParseFlags.String  printfmt:Bitset
// func:algo.NumParseFlags..Print
void                 NumParseFlags_Print(algo::NumParseFlags& row, algo::cstring& str) __attribute__((nothrow));
// func:algo.NumParseFlags..GetAnon
algo::strptr         NumParseFlags_GetAnon(algo::NumParseFlags &parent, i32 idx) __attribute__((nothrow));

// --- algo.Protocol
// access: algo.Protocol.proto (Protocol)
#pragma pack(push,1)
struct Protocol { // algo.Protocol: amc-generated struct for internal purposes
    Protocol();
};
#pragma pack(pop)

// func:algo.Protocol.proto.StaticCheck
void                 StaticCheck();


// --- algo.RnullStr1
#pragma pack(push,1)
struct RnullStr1 { // algo.RnullStr1
    enum { ch_max = 1 };
    u8 ch[1];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr1 &rhs) const;
    bool operator !=(const algo::RnullStr1 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr1 &rhs) const;
    bool operator >(const algo::RnullStr1 &rhs) const;
    bool operator <=(const algo::RnullStr1 &rhs) const;
    bool operator >=(const algo::RnullStr1 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr1.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr1.ch.Set
    void                 operator =(const algo::RnullStr1& parent) __attribute__((nothrow));
    // func:algo.RnullStr1.ch.Ctor
    RnullStr1(const algo::RnullStr1 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr1.ch.CtorStrptr
    RnullStr1(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr1();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr1.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr1& parent) __attribute__((nothrow));
// func:algo.RnullStr1.ch.HashStrptr
u32                  RnullStr1_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr1.ch.Init
void                 ch_Init(algo::RnullStr1 &parent) __attribute__((nothrow));
// always return constant 1
// func:algo.RnullStr1.ch.Max
int                  ch_Max(algo::RnullStr1& parent) __attribute__((nothrow));
// func:algo.RnullStr1.ch.N
int                  ch_N(const algo::RnullStr1& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr1.ch.Print
void                 ch_Print(algo::RnullStr1& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr1.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr1& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr1.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr1& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr1..Hash
u32                  RnullStr1_Hash(u32 prev, algo::RnullStr1 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr1 from an ascii string.
// The format of the string is the format of the algo::RnullStr1's only field
// func:algo.RnullStr1..ReadStrptrMaybe
bool                 RnullStr1_ReadStrptrMaybe(algo::RnullStr1 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr1..Lt
bool                 RnullStr1_Lt(algo::RnullStr1 lhs, algo::RnullStr1 rhs) __attribute__((nothrow));
// func:algo.RnullStr1..Cmp
i32                  RnullStr1_Cmp(algo::RnullStr1 lhs, algo::RnullStr1 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr1..Init
void                 RnullStr1_Init(algo::RnullStr1& parent);
// func:algo.RnullStr1..Eq
bool                 RnullStr1_Eq(algo::RnullStr1 lhs, algo::RnullStr1 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr1..Update
bool                 RnullStr1_Update(algo::RnullStr1 &lhs, algo::RnullStr1 rhs) __attribute__((nothrow));
// func:algo.RnullStr1..EqStrptr
bool                 RnullStr1_EqStrptr(algo::RnullStr1 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr1.String  printfmt:Raw
// func:algo.RnullStr1..Print
void                 RnullStr1_Print(algo::RnullStr1 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr10
#pragma pack(push,1)
struct RnullStr10 { // algo.RnullStr10
    enum { ch_max = 10 };
    u8 ch[10];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr10 &rhs) const;
    bool operator !=(const algo::RnullStr10 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr10 &rhs) const;
    bool operator >(const algo::RnullStr10 &rhs) const;
    bool operator <=(const algo::RnullStr10 &rhs) const;
    bool operator >=(const algo::RnullStr10 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr10.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr10.ch.Set
    void                 operator =(const algo::RnullStr10& parent) __attribute__((nothrow));
    // func:algo.RnullStr10.ch.Ctor
    RnullStr10(const algo::RnullStr10 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr10.ch.CtorStrptr
    RnullStr10(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr10();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr10.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr10& parent) __attribute__((nothrow));
// func:algo.RnullStr10.ch.HashStrptr
u32                  RnullStr10_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr10.ch.Init
void                 ch_Init(algo::RnullStr10 &parent) __attribute__((nothrow));
// always return constant 10
// func:algo.RnullStr10.ch.Max
int                  ch_Max(algo::RnullStr10& parent) __attribute__((nothrow));
// func:algo.RnullStr10.ch.N
int                  ch_N(const algo::RnullStr10& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr10.ch.Print
void                 ch_Print(algo::RnullStr10& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr10.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr10& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr10.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr10& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr10..Hash
u32                  RnullStr10_Hash(u32 prev, algo::RnullStr10 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr10 from an ascii string.
// The format of the string is the format of the algo::RnullStr10's only field
// func:algo.RnullStr10..ReadStrptrMaybe
bool                 RnullStr10_ReadStrptrMaybe(algo::RnullStr10 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr10..Lt
bool                 RnullStr10_Lt(algo::RnullStr10 lhs, algo::RnullStr10 rhs) __attribute__((nothrow));
// func:algo.RnullStr10..Cmp
i32                  RnullStr10_Cmp(algo::RnullStr10 lhs, algo::RnullStr10 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr10..Init
void                 RnullStr10_Init(algo::RnullStr10& parent);
// func:algo.RnullStr10..Eq
bool                 RnullStr10_Eq(algo::RnullStr10 lhs, algo::RnullStr10 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr10..Update
bool                 RnullStr10_Update(algo::RnullStr10 &lhs, algo::RnullStr10 rhs) __attribute__((nothrow));
// func:algo.RnullStr10..EqStrptr
bool                 RnullStr10_EqStrptr(algo::RnullStr10 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr10.String  printfmt:Raw
// func:algo.RnullStr10..Print
void                 RnullStr10_Print(algo::RnullStr10 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr100
#pragma pack(push,1)
struct RnullStr100 { // algo.RnullStr100
    enum { ch_max = 100 };
    u8 ch[100];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr100.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr100.ch.Set
    void                 operator =(const algo::RnullStr100& parent) __attribute__((nothrow));
    // func:algo.RnullStr100.ch.Ctor
    RnullStr100(const algo::RnullStr100 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr100.ch.CtorStrptr
    RnullStr100(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr100();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr100.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr100& parent) __attribute__((nothrow));
// func:algo.RnullStr100.ch.HashStrptr
u32                  RnullStr100_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr100.ch.Init
void                 ch_Init(algo::RnullStr100 &parent) __attribute__((nothrow));
// always return constant 100
// func:algo.RnullStr100.ch.Max
int                  ch_Max(algo::RnullStr100& parent) __attribute__((nothrow));
// func:algo.RnullStr100.ch.N
int                  ch_N(const algo::RnullStr100& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr100.ch.Print
void                 ch_Print(algo::RnullStr100& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr100.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr100& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr100.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr100& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr100..Hash
u32                  RnullStr100_Hash(u32 prev, const algo::RnullStr100 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr100 from an ascii string.
// The format of the string is the format of the algo::RnullStr100's only field
// func:algo.RnullStr100..ReadStrptrMaybe
bool                 RnullStr100_ReadStrptrMaybe(algo::RnullStr100 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr100..Lt
bool                 RnullStr100_Lt(algo::RnullStr100& lhs, algo::RnullStr100& rhs) __attribute__((nothrow));
// func:algo.RnullStr100..Cmp
i32                  RnullStr100_Cmp(algo::RnullStr100& lhs, algo::RnullStr100& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr100..Init
void                 RnullStr100_Init(algo::RnullStr100& parent);
// func:algo.RnullStr100..Eq
bool                 RnullStr100_Eq(algo::RnullStr100& lhs, algo::RnullStr100& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr100..Update
bool                 RnullStr100_Update(algo::RnullStr100 &lhs, algo::RnullStr100& rhs) __attribute__((nothrow));
// func:algo.RnullStr100..EqStrptr
bool                 RnullStr100_EqStrptr(const algo::RnullStr100& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr100.String  printfmt:Raw
// func:algo.RnullStr100..Print
void                 RnullStr100_Print(algo::RnullStr100& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr1000
#pragma pack(push,1)
struct RnullStr1000 { // algo.RnullStr1000
    enum { ch_max = 1000 };
    u8 ch[1000];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr1000 &rhs) const;
    bool operator !=(const algo::RnullStr1000 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr1000 &rhs) const;
    bool operator >(const algo::RnullStr1000 &rhs) const;
    bool operator <=(const algo::RnullStr1000 &rhs) const;
    bool operator >=(const algo::RnullStr1000 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr1000.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr1000.ch.Set
    void                 operator =(const algo::RnullStr1000& parent) __attribute__((nothrow));
    // func:algo.RnullStr1000.ch.Ctor
    RnullStr1000(const algo::RnullStr1000 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr1000.ch.CtorStrptr
    RnullStr1000(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr1000();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr1000.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr1000& parent) __attribute__((nothrow));
// func:algo.RnullStr1000.ch.HashStrptr
u32                  RnullStr1000_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr1000.ch.Init
void                 ch_Init(algo::RnullStr1000 &parent) __attribute__((nothrow));
// always return constant 1000
// func:algo.RnullStr1000.ch.Max
int                  ch_Max(algo::RnullStr1000& parent) __attribute__((nothrow));
// func:algo.RnullStr1000.ch.N
int                  ch_N(const algo::RnullStr1000& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr1000.ch.Print
void                 ch_Print(algo::RnullStr1000& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr1000.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr1000& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr1000.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr1000& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr1000..Hash
u32                  RnullStr1000_Hash(u32 prev, const algo::RnullStr1000 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr1000 from an ascii string.
// The format of the string is the format of the algo::RnullStr1000's only field
// func:algo.RnullStr1000..ReadStrptrMaybe
bool                 RnullStr1000_ReadStrptrMaybe(algo::RnullStr1000 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr1000..Lt
bool                 RnullStr1000_Lt(algo::RnullStr1000& lhs, algo::RnullStr1000& rhs) __attribute__((nothrow));
// func:algo.RnullStr1000..Cmp
i32                  RnullStr1000_Cmp(algo::RnullStr1000& lhs, algo::RnullStr1000& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr1000..Init
void                 RnullStr1000_Init(algo::RnullStr1000& parent);
// func:algo.RnullStr1000..Eq
bool                 RnullStr1000_Eq(algo::RnullStr1000& lhs, algo::RnullStr1000& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr1000..Update
bool                 RnullStr1000_Update(algo::RnullStr1000 &lhs, algo::RnullStr1000& rhs) __attribute__((nothrow));
// func:algo.RnullStr1000..EqStrptr
bool                 RnullStr1000_EqStrptr(const algo::RnullStr1000& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr1000.String  printfmt:Raw
// func:algo.RnullStr1000..Print
void                 RnullStr1000_Print(algo::RnullStr1000& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr11
#pragma pack(push,1)
struct RnullStr11 { // algo.RnullStr11
    enum { ch_max = 11 };
    u8 ch[11];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr11 &rhs) const;
    bool operator !=(const algo::RnullStr11 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr11 &rhs) const;
    bool operator >(const algo::RnullStr11 &rhs) const;
    bool operator <=(const algo::RnullStr11 &rhs) const;
    bool operator >=(const algo::RnullStr11 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr11.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr11.ch.Set
    void                 operator =(const algo::RnullStr11& parent) __attribute__((nothrow));
    // func:algo.RnullStr11.ch.Ctor
    RnullStr11(const algo::RnullStr11 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr11.ch.CtorStrptr
    RnullStr11(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr11();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr11.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr11& parent) __attribute__((nothrow));
// func:algo.RnullStr11.ch.HashStrptr
u32                  RnullStr11_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr11.ch.Init
void                 ch_Init(algo::RnullStr11 &parent) __attribute__((nothrow));
// always return constant 11
// func:algo.RnullStr11.ch.Max
int                  ch_Max(algo::RnullStr11& parent) __attribute__((nothrow));
// func:algo.RnullStr11.ch.N
int                  ch_N(const algo::RnullStr11& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr11.ch.Print
void                 ch_Print(algo::RnullStr11& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr11.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr11& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr11.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr11& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr11..Hash
u32                  RnullStr11_Hash(u32 prev, const algo::RnullStr11 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr11 from an ascii string.
// The format of the string is the format of the algo::RnullStr11's only field
// func:algo.RnullStr11..ReadStrptrMaybe
bool                 RnullStr11_ReadStrptrMaybe(algo::RnullStr11 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr11..Lt
bool                 RnullStr11_Lt(algo::RnullStr11& lhs, algo::RnullStr11& rhs) __attribute__((nothrow));
// func:algo.RnullStr11..Cmp
i32                  RnullStr11_Cmp(algo::RnullStr11& lhs, algo::RnullStr11& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr11..Init
void                 RnullStr11_Init(algo::RnullStr11& parent);
// func:algo.RnullStr11..Eq
bool                 RnullStr11_Eq(algo::RnullStr11& lhs, algo::RnullStr11& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr11..Update
bool                 RnullStr11_Update(algo::RnullStr11 &lhs, algo::RnullStr11& rhs) __attribute__((nothrow));
// func:algo.RnullStr11..EqStrptr
bool                 RnullStr11_EqStrptr(const algo::RnullStr11& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr11.String  printfmt:Raw
// func:algo.RnullStr11..Print
void                 RnullStr11_Print(algo::RnullStr11& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr12
#pragma pack(push,1)
struct RnullStr12 { // algo.RnullStr12
    enum { ch_max = 12 };
    u8 ch[12];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr12 &rhs) const;
    bool operator !=(const algo::RnullStr12 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr12 &rhs) const;
    bool operator >(const algo::RnullStr12 &rhs) const;
    bool operator <=(const algo::RnullStr12 &rhs) const;
    bool operator >=(const algo::RnullStr12 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr12.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr12.ch.Set
    void                 operator =(const algo::RnullStr12& parent) __attribute__((nothrow));
    // func:algo.RnullStr12.ch.Ctor
    RnullStr12(const algo::RnullStr12 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr12.ch.CtorStrptr
    RnullStr12(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr12();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr12.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr12& parent) __attribute__((nothrow));
// func:algo.RnullStr12.ch.HashStrptr
u32                  RnullStr12_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr12.ch.Init
void                 ch_Init(algo::RnullStr12 &parent) __attribute__((nothrow));
// always return constant 12
// func:algo.RnullStr12.ch.Max
int                  ch_Max(algo::RnullStr12& parent) __attribute__((nothrow));
// func:algo.RnullStr12.ch.N
int                  ch_N(const algo::RnullStr12& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr12.ch.Print
void                 ch_Print(algo::RnullStr12& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr12.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr12& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr12.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr12& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr12..Hash
u32                  RnullStr12_Hash(u32 prev, const algo::RnullStr12 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr12 from an ascii string.
// The format of the string is the format of the algo::RnullStr12's only field
// func:algo.RnullStr12..ReadStrptrMaybe
bool                 RnullStr12_ReadStrptrMaybe(algo::RnullStr12 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr12..Lt
bool                 RnullStr12_Lt(algo::RnullStr12& lhs, algo::RnullStr12& rhs) __attribute__((nothrow));
// func:algo.RnullStr12..Cmp
i32                  RnullStr12_Cmp(algo::RnullStr12& lhs, algo::RnullStr12& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr12..Init
void                 RnullStr12_Init(algo::RnullStr12& parent);
// func:algo.RnullStr12..Eq
bool                 RnullStr12_Eq(algo::RnullStr12& lhs, algo::RnullStr12& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr12..Update
bool                 RnullStr12_Update(algo::RnullStr12 &lhs, algo::RnullStr12& rhs) __attribute__((nothrow));
// func:algo.RnullStr12..EqStrptr
bool                 RnullStr12_EqStrptr(const algo::RnullStr12& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr12.String  printfmt:Raw
// func:algo.RnullStr12..Print
void                 RnullStr12_Print(algo::RnullStr12& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr129
#pragma pack(push,1)
struct RnullStr129 { // algo.RnullStr129
    enum { ch_max = 129 };
    u8 ch[129];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr129 &rhs) const;
    bool operator !=(const algo::RnullStr129 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr129 &rhs) const;
    bool operator >(const algo::RnullStr129 &rhs) const;
    bool operator <=(const algo::RnullStr129 &rhs) const;
    bool operator >=(const algo::RnullStr129 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr129.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr129.ch.Set
    void                 operator =(const algo::RnullStr129& parent) __attribute__((nothrow));
    // func:algo.RnullStr129.ch.Ctor
    RnullStr129(const algo::RnullStr129 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr129.ch.CtorStrptr
    RnullStr129(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr129();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr129.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr129& parent) __attribute__((nothrow));
// func:algo.RnullStr129.ch.HashStrptr
u32                  RnullStr129_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr129.ch.Init
void                 ch_Init(algo::RnullStr129 &parent) __attribute__((nothrow));
// always return constant 129
// func:algo.RnullStr129.ch.Max
int                  ch_Max(algo::RnullStr129& parent) __attribute__((nothrow));
// func:algo.RnullStr129.ch.N
int                  ch_N(const algo::RnullStr129& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr129.ch.Print
void                 ch_Print(algo::RnullStr129& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr129.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr129& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr129.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr129& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr129..Hash
u32                  RnullStr129_Hash(u32 prev, const algo::RnullStr129 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr129 from an ascii string.
// The format of the string is the format of the algo::RnullStr129's only field
// func:algo.RnullStr129..ReadStrptrMaybe
bool                 RnullStr129_ReadStrptrMaybe(algo::RnullStr129 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr129..Lt
bool                 RnullStr129_Lt(algo::RnullStr129& lhs, algo::RnullStr129& rhs) __attribute__((nothrow));
// func:algo.RnullStr129..Cmp
i32                  RnullStr129_Cmp(algo::RnullStr129& lhs, algo::RnullStr129& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr129..Init
void                 RnullStr129_Init(algo::RnullStr129& parent);
// func:algo.RnullStr129..Eq
bool                 RnullStr129_Eq(algo::RnullStr129& lhs, algo::RnullStr129& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr129..Update
bool                 RnullStr129_Update(algo::RnullStr129 &lhs, algo::RnullStr129& rhs) __attribute__((nothrow));
// func:algo.RnullStr129..EqStrptr
bool                 RnullStr129_EqStrptr(const algo::RnullStr129& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr129.String  printfmt:Raw
// func:algo.RnullStr129..Print
void                 RnullStr129_Print(algo::RnullStr129& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr13
#pragma pack(push,1)
struct RnullStr13 { // algo.RnullStr13
    enum { ch_max = 13 };
    u8 ch[13];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr13 &rhs) const;
    bool operator !=(const algo::RnullStr13 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr13 &rhs) const;
    bool operator >(const algo::RnullStr13 &rhs) const;
    bool operator <=(const algo::RnullStr13 &rhs) const;
    bool operator >=(const algo::RnullStr13 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr13.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr13.ch.Set
    void                 operator =(const algo::RnullStr13& parent) __attribute__((nothrow));
    // func:algo.RnullStr13.ch.Ctor
    RnullStr13(const algo::RnullStr13 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr13.ch.CtorStrptr
    RnullStr13(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr13();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr13.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr13& parent) __attribute__((nothrow));
// func:algo.RnullStr13.ch.HashStrptr
u32                  RnullStr13_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr13.ch.Init
void                 ch_Init(algo::RnullStr13 &parent) __attribute__((nothrow));
// always return constant 13
// func:algo.RnullStr13.ch.Max
int                  ch_Max(algo::RnullStr13& parent) __attribute__((nothrow));
// func:algo.RnullStr13.ch.N
int                  ch_N(const algo::RnullStr13& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr13.ch.Print
void                 ch_Print(algo::RnullStr13& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr13.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr13& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr13.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr13& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr13..Hash
u32                  RnullStr13_Hash(u32 prev, const algo::RnullStr13 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr13 from an ascii string.
// The format of the string is the format of the algo::RnullStr13's only field
// func:algo.RnullStr13..ReadStrptrMaybe
bool                 RnullStr13_ReadStrptrMaybe(algo::RnullStr13 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr13..Lt
bool                 RnullStr13_Lt(algo::RnullStr13& lhs, algo::RnullStr13& rhs) __attribute__((nothrow));
// func:algo.RnullStr13..Cmp
i32                  RnullStr13_Cmp(algo::RnullStr13& lhs, algo::RnullStr13& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr13..Init
void                 RnullStr13_Init(algo::RnullStr13& parent);
// func:algo.RnullStr13..Eq
bool                 RnullStr13_Eq(algo::RnullStr13& lhs, algo::RnullStr13& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr13..Update
bool                 RnullStr13_Update(algo::RnullStr13 &lhs, algo::RnullStr13& rhs) __attribute__((nothrow));
// func:algo.RnullStr13..EqStrptr
bool                 RnullStr13_EqStrptr(const algo::RnullStr13& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr13.String  printfmt:Raw
// func:algo.RnullStr13..Print
void                 RnullStr13_Print(algo::RnullStr13& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr14
#pragma pack(push,1)
struct RnullStr14 { // algo.RnullStr14
    enum { ch_max = 14 };
    u8 ch[14];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr14 &rhs) const;
    bool operator !=(const algo::RnullStr14 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr14 &rhs) const;
    bool operator >(const algo::RnullStr14 &rhs) const;
    bool operator <=(const algo::RnullStr14 &rhs) const;
    bool operator >=(const algo::RnullStr14 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr14.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr14.ch.Set
    void                 operator =(const algo::RnullStr14& parent) __attribute__((nothrow));
    // func:algo.RnullStr14.ch.Ctor
    RnullStr14(const algo::RnullStr14 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr14.ch.CtorStrptr
    RnullStr14(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr14();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr14.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr14& parent) __attribute__((nothrow));
// func:algo.RnullStr14.ch.HashStrptr
u32                  RnullStr14_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr14.ch.Init
void                 ch_Init(algo::RnullStr14 &parent) __attribute__((nothrow));
// always return constant 14
// func:algo.RnullStr14.ch.Max
int                  ch_Max(algo::RnullStr14& parent) __attribute__((nothrow));
// func:algo.RnullStr14.ch.N
int                  ch_N(const algo::RnullStr14& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr14.ch.Print
void                 ch_Print(algo::RnullStr14& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr14.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr14& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr14.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr14& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr14..Hash
u32                  RnullStr14_Hash(u32 prev, const algo::RnullStr14 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr14 from an ascii string.
// The format of the string is the format of the algo::RnullStr14's only field
// func:algo.RnullStr14..ReadStrptrMaybe
bool                 RnullStr14_ReadStrptrMaybe(algo::RnullStr14 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr14..Lt
bool                 RnullStr14_Lt(algo::RnullStr14& lhs, algo::RnullStr14& rhs) __attribute__((nothrow));
// func:algo.RnullStr14..Cmp
i32                  RnullStr14_Cmp(algo::RnullStr14& lhs, algo::RnullStr14& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr14..Init
void                 RnullStr14_Init(algo::RnullStr14& parent);
// func:algo.RnullStr14..Eq
bool                 RnullStr14_Eq(algo::RnullStr14& lhs, algo::RnullStr14& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr14..Update
bool                 RnullStr14_Update(algo::RnullStr14 &lhs, algo::RnullStr14& rhs) __attribute__((nothrow));
// func:algo.RnullStr14..EqStrptr
bool                 RnullStr14_EqStrptr(const algo::RnullStr14& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr14.String  printfmt:Raw
// func:algo.RnullStr14..Print
void                 RnullStr14_Print(algo::RnullStr14& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr15
#pragma pack(push,1)
struct RnullStr15 { // algo.RnullStr15
    enum { ch_max = 15 };
    u8 ch[15];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr15 &rhs) const;
    bool operator !=(const algo::RnullStr15 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr15 &rhs) const;
    bool operator >(const algo::RnullStr15 &rhs) const;
    bool operator <=(const algo::RnullStr15 &rhs) const;
    bool operator >=(const algo::RnullStr15 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr15.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr15.ch.Set
    void                 operator =(const algo::RnullStr15& parent) __attribute__((nothrow));
    // func:algo.RnullStr15.ch.Ctor
    RnullStr15(const algo::RnullStr15 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr15.ch.CtorStrptr
    RnullStr15(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr15();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr15.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr15& parent) __attribute__((nothrow));
// func:algo.RnullStr15.ch.HashStrptr
u32                  RnullStr15_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr15.ch.Init
void                 ch_Init(algo::RnullStr15 &parent) __attribute__((nothrow));
// always return constant 15
// func:algo.RnullStr15.ch.Max
int                  ch_Max(algo::RnullStr15& parent) __attribute__((nothrow));
// func:algo.RnullStr15.ch.N
int                  ch_N(const algo::RnullStr15& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr15.ch.Print
void                 ch_Print(algo::RnullStr15& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr15.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr15& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr15.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr15& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr15..Hash
u32                  RnullStr15_Hash(u32 prev, const algo::RnullStr15 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr15 from an ascii string.
// The format of the string is the format of the algo::RnullStr15's only field
// func:algo.RnullStr15..ReadStrptrMaybe
bool                 RnullStr15_ReadStrptrMaybe(algo::RnullStr15 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr15..Lt
bool                 RnullStr15_Lt(algo::RnullStr15& lhs, algo::RnullStr15& rhs) __attribute__((nothrow));
// func:algo.RnullStr15..Cmp
i32                  RnullStr15_Cmp(algo::RnullStr15& lhs, algo::RnullStr15& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr15..Init
void                 RnullStr15_Init(algo::RnullStr15& parent);
// func:algo.RnullStr15..Eq
bool                 RnullStr15_Eq(algo::RnullStr15& lhs, algo::RnullStr15& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr15..Update
bool                 RnullStr15_Update(algo::RnullStr15 &lhs, algo::RnullStr15& rhs) __attribute__((nothrow));
// func:algo.RnullStr15..EqStrptr
bool                 RnullStr15_EqStrptr(const algo::RnullStr15& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr15.String  printfmt:Raw
// func:algo.RnullStr15..Print
void                 RnullStr15_Print(algo::RnullStr15& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr151
#pragma pack(push,1)
struct RnullStr151 { // algo.RnullStr151
    enum { ch_max = 151 };
    u8 ch[151];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr151 &rhs) const;
    bool operator !=(const algo::RnullStr151 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr151 &rhs) const;
    bool operator >(const algo::RnullStr151 &rhs) const;
    bool operator <=(const algo::RnullStr151 &rhs) const;
    bool operator >=(const algo::RnullStr151 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr151.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr151.ch.Set
    void                 operator =(const algo::RnullStr151& parent) __attribute__((nothrow));
    // func:algo.RnullStr151.ch.Ctor
    RnullStr151(const algo::RnullStr151 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr151.ch.CtorStrptr
    RnullStr151(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr151();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr151.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr151& parent) __attribute__((nothrow));
// func:algo.RnullStr151.ch.HashStrptr
u32                  RnullStr151_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr151.ch.Init
void                 ch_Init(algo::RnullStr151 &parent) __attribute__((nothrow));
// always return constant 151
// func:algo.RnullStr151.ch.Max
int                  ch_Max(algo::RnullStr151& parent) __attribute__((nothrow));
// func:algo.RnullStr151.ch.N
int                  ch_N(const algo::RnullStr151& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr151.ch.Print
void                 ch_Print(algo::RnullStr151& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr151.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr151& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr151.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr151& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr151..Hash
u32                  RnullStr151_Hash(u32 prev, const algo::RnullStr151 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr151 from an ascii string.
// The format of the string is the format of the algo::RnullStr151's only field
// func:algo.RnullStr151..ReadStrptrMaybe
bool                 RnullStr151_ReadStrptrMaybe(algo::RnullStr151 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr151..Lt
bool                 RnullStr151_Lt(algo::RnullStr151& lhs, algo::RnullStr151& rhs) __attribute__((nothrow));
// func:algo.RnullStr151..Cmp
i32                  RnullStr151_Cmp(algo::RnullStr151& lhs, algo::RnullStr151& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr151..Init
void                 RnullStr151_Init(algo::RnullStr151& parent);
// func:algo.RnullStr151..Eq
bool                 RnullStr151_Eq(algo::RnullStr151& lhs, algo::RnullStr151& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr151..Update
bool                 RnullStr151_Update(algo::RnullStr151 &lhs, algo::RnullStr151& rhs) __attribute__((nothrow));
// func:algo.RnullStr151..EqStrptr
bool                 RnullStr151_EqStrptr(const algo::RnullStr151& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr151.String  printfmt:Raw
// func:algo.RnullStr151..Print
void                 RnullStr151_Print(algo::RnullStr151& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr16
#pragma pack(push,1)
struct RnullStr16 { // algo.RnullStr16
    enum { ch_max = 16 };
    u8 ch[16];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr16.ch.Set
    void                 operator =(const algo::RnullStr16& parent) __attribute__((nothrow));
    // func:algo.RnullStr16.ch.Ctor
    RnullStr16(const algo::RnullStr16 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr16.ch.CtorStrptr
    RnullStr16(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr16& parent) __attribute__((nothrow));
// func:algo.RnullStr16.ch.HashStrptr
u32                  RnullStr16_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr16.ch.Init
void                 ch_Init(algo::RnullStr16 &parent) __attribute__((nothrow));
// always return constant 16
// func:algo.RnullStr16.ch.Max
int                  ch_Max(algo::RnullStr16& parent) __attribute__((nothrow));
// func:algo.RnullStr16.ch.N
int                  ch_N(const algo::RnullStr16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr16.ch.Print
void                 ch_Print(algo::RnullStr16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr16.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr16& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr16..Hash
u32                  RnullStr16_Hash(u32 prev, algo::RnullStr16 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr16 from an ascii string.
// The format of the string is the format of the algo::RnullStr16's only field
// func:algo.RnullStr16..ReadStrptrMaybe
bool                 RnullStr16_ReadStrptrMaybe(algo::RnullStr16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr16..Lt
bool                 RnullStr16_Lt(algo::RnullStr16 lhs, algo::RnullStr16 rhs) __attribute__((nothrow));
// func:algo.RnullStr16..Cmp
i32                  RnullStr16_Cmp(algo::RnullStr16 lhs, algo::RnullStr16 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr16..Init
void                 RnullStr16_Init(algo::RnullStr16& parent);
// func:algo.RnullStr16..Eq
bool                 RnullStr16_Eq(algo::RnullStr16 lhs, algo::RnullStr16 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr16..Update
bool                 RnullStr16_Update(algo::RnullStr16 &lhs, algo::RnullStr16 rhs) __attribute__((nothrow));
// func:algo.RnullStr16..EqStrptr
bool                 RnullStr16_EqStrptr(algo::RnullStr16 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr16.String  printfmt:Raw
// func:algo.RnullStr16..Print
void                 RnullStr16_Print(algo::RnullStr16 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr17
#pragma pack(push,1)
struct RnullStr17 { // algo.RnullStr17
    enum { ch_max = 17 };
    u8 ch[17];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr17 &rhs) const;
    bool operator !=(const algo::RnullStr17 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr17 &rhs) const;
    bool operator >(const algo::RnullStr17 &rhs) const;
    bool operator <=(const algo::RnullStr17 &rhs) const;
    bool operator >=(const algo::RnullStr17 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr17.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr17.ch.Set
    void                 operator =(const algo::RnullStr17& parent) __attribute__((nothrow));
    // func:algo.RnullStr17.ch.Ctor
    RnullStr17(const algo::RnullStr17 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr17.ch.CtorStrptr
    RnullStr17(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr17();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr17.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr17& parent) __attribute__((nothrow));
// func:algo.RnullStr17.ch.HashStrptr
u32                  RnullStr17_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr17.ch.Init
void                 ch_Init(algo::RnullStr17 &parent) __attribute__((nothrow));
// always return constant 17
// func:algo.RnullStr17.ch.Max
int                  ch_Max(algo::RnullStr17& parent) __attribute__((nothrow));
// func:algo.RnullStr17.ch.N
int                  ch_N(const algo::RnullStr17& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr17.ch.Print
void                 ch_Print(algo::RnullStr17& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr17.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr17& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr17.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr17& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr17..Hash
u32                  RnullStr17_Hash(u32 prev, const algo::RnullStr17 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr17 from an ascii string.
// The format of the string is the format of the algo::RnullStr17's only field
// func:algo.RnullStr17..ReadStrptrMaybe
bool                 RnullStr17_ReadStrptrMaybe(algo::RnullStr17 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr17..Lt
bool                 RnullStr17_Lt(algo::RnullStr17& lhs, algo::RnullStr17& rhs) __attribute__((nothrow));
// func:algo.RnullStr17..Cmp
i32                  RnullStr17_Cmp(algo::RnullStr17& lhs, algo::RnullStr17& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr17..Init
void                 RnullStr17_Init(algo::RnullStr17& parent);
// func:algo.RnullStr17..Eq
bool                 RnullStr17_Eq(algo::RnullStr17& lhs, algo::RnullStr17& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr17..Update
bool                 RnullStr17_Update(algo::RnullStr17 &lhs, algo::RnullStr17& rhs) __attribute__((nothrow));
// func:algo.RnullStr17..EqStrptr
bool                 RnullStr17_EqStrptr(const algo::RnullStr17& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr17.String  printfmt:Raw
// func:algo.RnullStr17..Print
void                 RnullStr17_Print(algo::RnullStr17& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr18
#pragma pack(push,1)
struct RnullStr18 { // algo.RnullStr18
    enum { ch_max = 18 };
    u8 ch[18];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr18 &rhs) const;
    bool operator !=(const algo::RnullStr18 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr18 &rhs) const;
    bool operator >(const algo::RnullStr18 &rhs) const;
    bool operator <=(const algo::RnullStr18 &rhs) const;
    bool operator >=(const algo::RnullStr18 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr18.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr18.ch.Set
    void                 operator =(const algo::RnullStr18& parent) __attribute__((nothrow));
    // func:algo.RnullStr18.ch.Ctor
    RnullStr18(const algo::RnullStr18 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr18.ch.CtorStrptr
    RnullStr18(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr18();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr18.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr18& parent) __attribute__((nothrow));
// func:algo.RnullStr18.ch.HashStrptr
u32                  RnullStr18_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr18.ch.Init
void                 ch_Init(algo::RnullStr18 &parent) __attribute__((nothrow));
// always return constant 18
// func:algo.RnullStr18.ch.Max
int                  ch_Max(algo::RnullStr18& parent) __attribute__((nothrow));
// func:algo.RnullStr18.ch.N
int                  ch_N(const algo::RnullStr18& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr18.ch.Print
void                 ch_Print(algo::RnullStr18& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr18.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr18& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr18.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr18& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr18..Hash
u32                  RnullStr18_Hash(u32 prev, algo::RnullStr18 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr18 from an ascii string.
// The format of the string is the format of the algo::RnullStr18's only field
// func:algo.RnullStr18..ReadStrptrMaybe
bool                 RnullStr18_ReadStrptrMaybe(algo::RnullStr18 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr18..Lt
bool                 RnullStr18_Lt(algo::RnullStr18 lhs, algo::RnullStr18 rhs) __attribute__((nothrow));
// func:algo.RnullStr18..Cmp
i32                  RnullStr18_Cmp(algo::RnullStr18 lhs, algo::RnullStr18 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr18..Init
void                 RnullStr18_Init(algo::RnullStr18& parent);
// func:algo.RnullStr18..Eq
bool                 RnullStr18_Eq(algo::RnullStr18 lhs, algo::RnullStr18 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr18..Update
bool                 RnullStr18_Update(algo::RnullStr18 &lhs, algo::RnullStr18 rhs) __attribute__((nothrow));
// func:algo.RnullStr18..EqStrptr
bool                 RnullStr18_EqStrptr(algo::RnullStr18 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr18.String  printfmt:Raw
// func:algo.RnullStr18..Print
void                 RnullStr18_Print(algo::RnullStr18 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr19
#pragma pack(push,1)
struct RnullStr19 { // algo.RnullStr19
    enum { ch_max = 19 };
    u8 ch[19];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr19.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr19.ch.Set
    void                 operator =(const algo::RnullStr19& parent) __attribute__((nothrow));
    // func:algo.RnullStr19.ch.Ctor
    RnullStr19(const algo::RnullStr19 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr19.ch.CtorStrptr
    RnullStr19(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr19();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr19.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr19& parent) __attribute__((nothrow));
// func:algo.RnullStr19.ch.HashStrptr
u32                  RnullStr19_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr19.ch.Init
void                 ch_Init(algo::RnullStr19 &parent) __attribute__((nothrow));
// always return constant 19
// func:algo.RnullStr19.ch.Max
int                  ch_Max(algo::RnullStr19& parent) __attribute__((nothrow));
// func:algo.RnullStr19.ch.N
int                  ch_N(const algo::RnullStr19& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr19.ch.Print
void                 ch_Print(algo::RnullStr19& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr19.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr19& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr19.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr19& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr19..Hash
u32                  RnullStr19_Hash(u32 prev, const algo::RnullStr19 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr19 from an ascii string.
// The format of the string is the format of the algo::RnullStr19's only field
// func:algo.RnullStr19..ReadStrptrMaybe
bool                 RnullStr19_ReadStrptrMaybe(algo::RnullStr19 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr19..Lt
bool                 RnullStr19_Lt(algo::RnullStr19& lhs, algo::RnullStr19& rhs) __attribute__((nothrow));
// func:algo.RnullStr19..Cmp
i32                  RnullStr19_Cmp(algo::RnullStr19& lhs, algo::RnullStr19& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr19..Init
void                 RnullStr19_Init(algo::RnullStr19& parent);
// func:algo.RnullStr19..Eq
bool                 RnullStr19_Eq(algo::RnullStr19& lhs, algo::RnullStr19& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr19..Update
bool                 RnullStr19_Update(algo::RnullStr19 &lhs, algo::RnullStr19& rhs) __attribute__((nothrow));
// func:algo.RnullStr19..EqStrptr
bool                 RnullStr19_EqStrptr(const algo::RnullStr19& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr19.String  printfmt:Raw
// func:algo.RnullStr19..Print
void                 RnullStr19_Print(algo::RnullStr19& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr2
#pragma pack(push,1)
struct RnullStr2 { // algo.RnullStr2
    enum { ch_max = 2 };
    u8 ch[2];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr2 &rhs) const;
    bool operator !=(const algo::RnullStr2 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr2 &rhs) const;
    bool operator >(const algo::RnullStr2 &rhs) const;
    bool operator <=(const algo::RnullStr2 &rhs) const;
    bool operator >=(const algo::RnullStr2 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr2.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr2.ch.Set
    void                 operator =(const algo::RnullStr2& parent) __attribute__((nothrow));
    // func:algo.RnullStr2.ch.Ctor
    RnullStr2(const algo::RnullStr2 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr2.ch.CtorStrptr
    RnullStr2(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr2();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr2.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr2& parent) __attribute__((nothrow));
// func:algo.RnullStr2.ch.HashStrptr
u32                  RnullStr2_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr2.ch.Init
void                 ch_Init(algo::RnullStr2 &parent) __attribute__((nothrow));
// always return constant 2
// func:algo.RnullStr2.ch.Max
int                  ch_Max(algo::RnullStr2& parent) __attribute__((nothrow));
// func:algo.RnullStr2.ch.N
int                  ch_N(const algo::RnullStr2& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr2.ch.Print
void                 ch_Print(algo::RnullStr2& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr2.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr2& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr2.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr2& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr2..Hash
u32                  RnullStr2_Hash(u32 prev, algo::RnullStr2 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr2 from an ascii string.
// The format of the string is the format of the algo::RnullStr2's only field
// func:algo.RnullStr2..ReadStrptrMaybe
bool                 RnullStr2_ReadStrptrMaybe(algo::RnullStr2 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr2..Lt
bool                 RnullStr2_Lt(algo::RnullStr2 lhs, algo::RnullStr2 rhs) __attribute__((nothrow));
// func:algo.RnullStr2..Cmp
i32                  RnullStr2_Cmp(algo::RnullStr2 lhs, algo::RnullStr2 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr2..Init
void                 RnullStr2_Init(algo::RnullStr2& parent);
// func:algo.RnullStr2..Eq
bool                 RnullStr2_Eq(algo::RnullStr2 lhs, algo::RnullStr2 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr2..Update
bool                 RnullStr2_Update(algo::RnullStr2 &lhs, algo::RnullStr2 rhs) __attribute__((nothrow));
// func:algo.RnullStr2..EqStrptr
bool                 RnullStr2_EqStrptr(algo::RnullStr2 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr2.String  printfmt:Raw
// func:algo.RnullStr2..Print
void                 RnullStr2_Print(algo::RnullStr2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr20
#pragma pack(push,1)
struct RnullStr20 { // algo.RnullStr20
    enum { ch_max = 20 };
    u8 ch[20];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr20 &rhs) const;
    bool operator !=(const algo::RnullStr20 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr20 &rhs) const;
    bool operator >(const algo::RnullStr20 &rhs) const;
    bool operator <=(const algo::RnullStr20 &rhs) const;
    bool operator >=(const algo::RnullStr20 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr20.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr20.ch.Set
    void                 operator =(const algo::RnullStr20& parent) __attribute__((nothrow));
    // func:algo.RnullStr20.ch.Ctor
    RnullStr20(const algo::RnullStr20 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr20.ch.CtorStrptr
    RnullStr20(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr20();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr20.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr20& parent) __attribute__((nothrow));
// func:algo.RnullStr20.ch.HashStrptr
u32                  RnullStr20_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr20.ch.Init
void                 ch_Init(algo::RnullStr20 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.RnullStr20.ch.Max
int                  ch_Max(algo::RnullStr20& parent) __attribute__((nothrow));
// func:algo.RnullStr20.ch.N
int                  ch_N(const algo::RnullStr20& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr20.ch.Print
void                 ch_Print(algo::RnullStr20& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr20.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr20& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr20.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr20& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr20..Hash
u32                  RnullStr20_Hash(u32 prev, algo::RnullStr20 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr20 from an ascii string.
// The format of the string is the format of the algo::RnullStr20's only field
// func:algo.RnullStr20..ReadStrptrMaybe
bool                 RnullStr20_ReadStrptrMaybe(algo::RnullStr20 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr20..Lt
bool                 RnullStr20_Lt(algo::RnullStr20 lhs, algo::RnullStr20 rhs) __attribute__((nothrow));
// func:algo.RnullStr20..Cmp
i32                  RnullStr20_Cmp(algo::RnullStr20 lhs, algo::RnullStr20 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr20..Init
void                 RnullStr20_Init(algo::RnullStr20& parent);
// func:algo.RnullStr20..Eq
bool                 RnullStr20_Eq(algo::RnullStr20 lhs, algo::RnullStr20 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr20..Update
bool                 RnullStr20_Update(algo::RnullStr20 &lhs, algo::RnullStr20 rhs) __attribute__((nothrow));
// func:algo.RnullStr20..EqStrptr
bool                 RnullStr20_EqStrptr(algo::RnullStr20 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr20.String  printfmt:Raw
// func:algo.RnullStr20..Print
void                 RnullStr20_Print(algo::RnullStr20 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr21
#pragma pack(push,1)
struct RnullStr21 { // algo.RnullStr21
    enum { ch_max = 21 };
    u8 ch[21];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr21.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr21.ch.Set
    void                 operator =(const algo::RnullStr21& parent) __attribute__((nothrow));
    // func:algo.RnullStr21.ch.Ctor
    RnullStr21(const algo::RnullStr21 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr21.ch.CtorStrptr
    RnullStr21(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr21();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr21.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr21& parent) __attribute__((nothrow));
// func:algo.RnullStr21.ch.HashStrptr
u32                  RnullStr21_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr21.ch.Init
void                 ch_Init(algo::RnullStr21 &parent) __attribute__((nothrow));
// always return constant 21
// func:algo.RnullStr21.ch.Max
int                  ch_Max(algo::RnullStr21& parent) __attribute__((nothrow));
// func:algo.RnullStr21.ch.N
int                  ch_N(const algo::RnullStr21& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr21.ch.Print
void                 ch_Print(algo::RnullStr21& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr21.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr21& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr21.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr21& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr21..Hash
u32                  RnullStr21_Hash(u32 prev, const algo::RnullStr21 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr21 from an ascii string.
// The format of the string is the format of the algo::RnullStr21's only field
// func:algo.RnullStr21..ReadStrptrMaybe
bool                 RnullStr21_ReadStrptrMaybe(algo::RnullStr21 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr21..Lt
bool                 RnullStr21_Lt(algo::RnullStr21& lhs, algo::RnullStr21& rhs) __attribute__((nothrow));
// func:algo.RnullStr21..Cmp
i32                  RnullStr21_Cmp(algo::RnullStr21& lhs, algo::RnullStr21& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr21..Init
void                 RnullStr21_Init(algo::RnullStr21& parent);
// func:algo.RnullStr21..Eq
bool                 RnullStr21_Eq(algo::RnullStr21& lhs, algo::RnullStr21& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr21..Update
bool                 RnullStr21_Update(algo::RnullStr21 &lhs, algo::RnullStr21& rhs) __attribute__((nothrow));
// func:algo.RnullStr21..EqStrptr
bool                 RnullStr21_EqStrptr(const algo::RnullStr21& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr21.String  printfmt:Raw
// func:algo.RnullStr21..Print
void                 RnullStr21_Print(algo::RnullStr21& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr24
#pragma pack(push,1)
struct RnullStr24 { // algo.RnullStr24
    enum { ch_max = 24 };
    u8 ch[24];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr24 &rhs) const;
    bool operator !=(const algo::RnullStr24 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr24 &rhs) const;
    bool operator >(const algo::RnullStr24 &rhs) const;
    bool operator <=(const algo::RnullStr24 &rhs) const;
    bool operator >=(const algo::RnullStr24 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr24.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr24.ch.Set
    void                 operator =(const algo::RnullStr24& parent) __attribute__((nothrow));
    // func:algo.RnullStr24.ch.Ctor
    RnullStr24(const algo::RnullStr24 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr24.ch.CtorStrptr
    RnullStr24(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr24();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr24.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr24& parent) __attribute__((nothrow));
// func:algo.RnullStr24.ch.HashStrptr
u32                  RnullStr24_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr24.ch.Init
void                 ch_Init(algo::RnullStr24 &parent) __attribute__((nothrow));
// always return constant 24
// func:algo.RnullStr24.ch.Max
int                  ch_Max(algo::RnullStr24& parent) __attribute__((nothrow));
// func:algo.RnullStr24.ch.N
int                  ch_N(const algo::RnullStr24& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr24.ch.Print
void                 ch_Print(algo::RnullStr24& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr24.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr24& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr24.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr24& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr24..Hash
u32                  RnullStr24_Hash(u32 prev, const algo::RnullStr24 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr24 from an ascii string.
// The format of the string is the format of the algo::RnullStr24's only field
// func:algo.RnullStr24..ReadStrptrMaybe
bool                 RnullStr24_ReadStrptrMaybe(algo::RnullStr24 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr24..Lt
bool                 RnullStr24_Lt(algo::RnullStr24& lhs, algo::RnullStr24& rhs) __attribute__((nothrow));
// func:algo.RnullStr24..Cmp
i32                  RnullStr24_Cmp(algo::RnullStr24& lhs, algo::RnullStr24& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr24..Init
void                 RnullStr24_Init(algo::RnullStr24& parent);
// func:algo.RnullStr24..Eq
bool                 RnullStr24_Eq(algo::RnullStr24& lhs, algo::RnullStr24& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr24..Update
bool                 RnullStr24_Update(algo::RnullStr24 &lhs, algo::RnullStr24& rhs) __attribute__((nothrow));
// func:algo.RnullStr24..EqStrptr
bool                 RnullStr24_EqStrptr(const algo::RnullStr24& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr24.String  printfmt:Raw
// func:algo.RnullStr24..Print
void                 RnullStr24_Print(algo::RnullStr24& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr25
#pragma pack(push,1)
struct RnullStr25 { // algo.RnullStr25
    enum { ch_max = 25 };
    u8 ch[25];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr25 &rhs) const;
    bool operator !=(const algo::RnullStr25 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr25 &rhs) const;
    bool operator >(const algo::RnullStr25 &rhs) const;
    bool operator <=(const algo::RnullStr25 &rhs) const;
    bool operator >=(const algo::RnullStr25 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr25.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr25.ch.Set
    void                 operator =(const algo::RnullStr25& parent) __attribute__((nothrow));
    // func:algo.RnullStr25.ch.Ctor
    RnullStr25(const algo::RnullStr25 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr25.ch.CtorStrptr
    RnullStr25(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr25();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr25.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr25& parent) __attribute__((nothrow));
// func:algo.RnullStr25.ch.HashStrptr
u32                  RnullStr25_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr25.ch.Init
void                 ch_Init(algo::RnullStr25 &parent) __attribute__((nothrow));
// always return constant 25
// func:algo.RnullStr25.ch.Max
int                  ch_Max(algo::RnullStr25& parent) __attribute__((nothrow));
// func:algo.RnullStr25.ch.N
int                  ch_N(const algo::RnullStr25& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr25.ch.Print
void                 ch_Print(algo::RnullStr25& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr25.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr25& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr25.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr25& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr25..Hash
u32                  RnullStr25_Hash(u32 prev, const algo::RnullStr25 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr25 from an ascii string.
// The format of the string is the format of the algo::RnullStr25's only field
// func:algo.RnullStr25..ReadStrptrMaybe
bool                 RnullStr25_ReadStrptrMaybe(algo::RnullStr25 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr25..Lt
bool                 RnullStr25_Lt(algo::RnullStr25& lhs, algo::RnullStr25& rhs) __attribute__((nothrow));
// func:algo.RnullStr25..Cmp
i32                  RnullStr25_Cmp(algo::RnullStr25& lhs, algo::RnullStr25& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr25..Init
void                 RnullStr25_Init(algo::RnullStr25& parent);
// func:algo.RnullStr25..Eq
bool                 RnullStr25_Eq(algo::RnullStr25& lhs, algo::RnullStr25& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr25..Update
bool                 RnullStr25_Update(algo::RnullStr25 &lhs, algo::RnullStr25& rhs) __attribute__((nothrow));
// func:algo.RnullStr25..EqStrptr
bool                 RnullStr25_EqStrptr(const algo::RnullStr25& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr25.String  printfmt:Raw
// func:algo.RnullStr25..Print
void                 RnullStr25_Print(algo::RnullStr25& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr28
#pragma pack(push,1)
struct RnullStr28 { // algo.RnullStr28
    enum { ch_max = 28 };
    u8 ch[28];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr28 &rhs) const;
    bool operator !=(const algo::RnullStr28 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr28 &rhs) const;
    bool operator >(const algo::RnullStr28 &rhs) const;
    bool operator <=(const algo::RnullStr28 &rhs) const;
    bool operator >=(const algo::RnullStr28 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr28.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr28.ch.Set
    void                 operator =(const algo::RnullStr28& parent) __attribute__((nothrow));
    // func:algo.RnullStr28.ch.Ctor
    RnullStr28(const algo::RnullStr28 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr28.ch.CtorStrptr
    RnullStr28(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr28();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr28.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr28& parent) __attribute__((nothrow));
// func:algo.RnullStr28.ch.HashStrptr
u32                  RnullStr28_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr28.ch.Init
void                 ch_Init(algo::RnullStr28 &parent) __attribute__((nothrow));
// always return constant 28
// func:algo.RnullStr28.ch.Max
int                  ch_Max(algo::RnullStr28& parent) __attribute__((nothrow));
// func:algo.RnullStr28.ch.N
int                  ch_N(const algo::RnullStr28& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr28.ch.Print
void                 ch_Print(algo::RnullStr28& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr28.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr28& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr28.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr28& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr28..Hash
u32                  RnullStr28_Hash(u32 prev, const algo::RnullStr28 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr28 from an ascii string.
// The format of the string is the format of the algo::RnullStr28's only field
// func:algo.RnullStr28..ReadStrptrMaybe
bool                 RnullStr28_ReadStrptrMaybe(algo::RnullStr28 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr28..Lt
bool                 RnullStr28_Lt(algo::RnullStr28& lhs, algo::RnullStr28& rhs) __attribute__((nothrow));
// func:algo.RnullStr28..Cmp
i32                  RnullStr28_Cmp(algo::RnullStr28& lhs, algo::RnullStr28& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr28..Init
void                 RnullStr28_Init(algo::RnullStr28& parent);
// func:algo.RnullStr28..Eq
bool                 RnullStr28_Eq(algo::RnullStr28& lhs, algo::RnullStr28& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr28..Update
bool                 RnullStr28_Update(algo::RnullStr28 &lhs, algo::RnullStr28& rhs) __attribute__((nothrow));
// func:algo.RnullStr28..EqStrptr
bool                 RnullStr28_EqStrptr(const algo::RnullStr28& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr28.String  printfmt:Raw
// func:algo.RnullStr28..Print
void                 RnullStr28_Print(algo::RnullStr28& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr3
#pragma pack(push,1)
struct RnullStr3 { // algo.RnullStr3
    enum { ch_max = 3 };
    u8 ch[3];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr3 &rhs) const;
    bool operator !=(const algo::RnullStr3 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr3 &rhs) const;
    bool operator >(const algo::RnullStr3 &rhs) const;
    bool operator <=(const algo::RnullStr3 &rhs) const;
    bool operator >=(const algo::RnullStr3 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr3.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr3.ch.Set
    void                 operator =(const algo::RnullStr3& parent) __attribute__((nothrow));
    // func:algo.RnullStr3.ch.Ctor
    RnullStr3(const algo::RnullStr3 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr3.ch.CtorStrptr
    RnullStr3(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr3();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr3.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr3& parent) __attribute__((nothrow));
// func:algo.RnullStr3.ch.HashStrptr
u32                  RnullStr3_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr3.ch.Init
void                 ch_Init(algo::RnullStr3 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.RnullStr3.ch.Max
int                  ch_Max(algo::RnullStr3& parent) __attribute__((nothrow));
// func:algo.RnullStr3.ch.N
int                  ch_N(const algo::RnullStr3& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr3.ch.Print
void                 ch_Print(algo::RnullStr3& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr3.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr3& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr3.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr3& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr3..Hash
u32                  RnullStr3_Hash(u32 prev, algo::RnullStr3 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr3 from an ascii string.
// The format of the string is the format of the algo::RnullStr3's only field
// func:algo.RnullStr3..ReadStrptrMaybe
bool                 RnullStr3_ReadStrptrMaybe(algo::RnullStr3 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr3..Lt
bool                 RnullStr3_Lt(algo::RnullStr3 lhs, algo::RnullStr3 rhs) __attribute__((nothrow));
// func:algo.RnullStr3..Cmp
i32                  RnullStr3_Cmp(algo::RnullStr3 lhs, algo::RnullStr3 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr3..Init
void                 RnullStr3_Init(algo::RnullStr3& parent);
// func:algo.RnullStr3..Eq
bool                 RnullStr3_Eq(algo::RnullStr3 lhs, algo::RnullStr3 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr3..Update
bool                 RnullStr3_Update(algo::RnullStr3 &lhs, algo::RnullStr3 rhs) __attribute__((nothrow));
// func:algo.RnullStr3..EqStrptr
bool                 RnullStr3_EqStrptr(algo::RnullStr3 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr3.String  printfmt:Raw
// func:algo.RnullStr3..Print
void                 RnullStr3_Print(algo::RnullStr3 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr30
#pragma pack(push,1)
struct RnullStr30 { // algo.RnullStr30
    enum { ch_max = 30 };
    u8 ch[30];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr30.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr30.ch.Set
    void                 operator =(const algo::RnullStr30& parent) __attribute__((nothrow));
    // func:algo.RnullStr30.ch.Ctor
    RnullStr30(const algo::RnullStr30 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr30.ch.CtorStrptr
    RnullStr30(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr30();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr30.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr30& parent) __attribute__((nothrow));
// func:algo.RnullStr30.ch.HashStrptr
u32                  RnullStr30_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr30.ch.Init
void                 ch_Init(algo::RnullStr30 &parent) __attribute__((nothrow));
// always return constant 30
// func:algo.RnullStr30.ch.Max
int                  ch_Max(algo::RnullStr30& parent) __attribute__((nothrow));
// func:algo.RnullStr30.ch.N
int                  ch_N(const algo::RnullStr30& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr30.ch.Print
void                 ch_Print(algo::RnullStr30& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr30.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr30& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr30.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr30& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr30..Hash
u32                  RnullStr30_Hash(u32 prev, algo::RnullStr30 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr30 from an ascii string.
// The format of the string is the format of the algo::RnullStr30's only field
// func:algo.RnullStr30..ReadStrptrMaybe
bool                 RnullStr30_ReadStrptrMaybe(algo::RnullStr30 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr30..Lt
bool                 RnullStr30_Lt(algo::RnullStr30 lhs, algo::RnullStr30 rhs) __attribute__((nothrow));
// func:algo.RnullStr30..Cmp
i32                  RnullStr30_Cmp(algo::RnullStr30 lhs, algo::RnullStr30 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr30..Init
void                 RnullStr30_Init(algo::RnullStr30& parent);
// func:algo.RnullStr30..Eq
bool                 RnullStr30_Eq(algo::RnullStr30 lhs, algo::RnullStr30 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr30..Update
bool                 RnullStr30_Update(algo::RnullStr30 &lhs, algo::RnullStr30 rhs) __attribute__((nothrow));
// func:algo.RnullStr30..EqStrptr
bool                 RnullStr30_EqStrptr(algo::RnullStr30 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr30.String  printfmt:Raw
// func:algo.RnullStr30..Print
void                 RnullStr30_Print(algo::RnullStr30 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr32
#pragma pack(push,1)
struct RnullStr32 { // algo.RnullStr32
    enum { ch_max = 32 };
    u8 ch[32];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr32 &rhs) const;
    bool operator !=(const algo::RnullStr32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr32 &rhs) const;
    bool operator >(const algo::RnullStr32 &rhs) const;
    bool operator <=(const algo::RnullStr32 &rhs) const;
    bool operator >=(const algo::RnullStr32 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr32.ch.Set
    void                 operator =(const algo::RnullStr32& parent) __attribute__((nothrow));
    // func:algo.RnullStr32.ch.Ctor
    RnullStr32(const algo::RnullStr32 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr32.ch.CtorStrptr
    RnullStr32(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr32& parent) __attribute__((nothrow));
// func:algo.RnullStr32.ch.HashStrptr
u32                  RnullStr32_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr32.ch.Init
void                 ch_Init(algo::RnullStr32 &parent) __attribute__((nothrow));
// always return constant 32
// func:algo.RnullStr32.ch.Max
int                  ch_Max(algo::RnullStr32& parent) __attribute__((nothrow));
// func:algo.RnullStr32.ch.N
int                  ch_N(const algo::RnullStr32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr32.ch.Print
void                 ch_Print(algo::RnullStr32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr32.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr32& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr32..Hash
u32                  RnullStr32_Hash(u32 prev, algo::RnullStr32 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr32 from an ascii string.
// The format of the string is the format of the algo::RnullStr32's only field
// func:algo.RnullStr32..ReadStrptrMaybe
bool                 RnullStr32_ReadStrptrMaybe(algo::RnullStr32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr32..Lt
bool                 RnullStr32_Lt(algo::RnullStr32 lhs, algo::RnullStr32 rhs) __attribute__((nothrow));
// func:algo.RnullStr32..Cmp
i32                  RnullStr32_Cmp(algo::RnullStr32 lhs, algo::RnullStr32 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr32..Init
void                 RnullStr32_Init(algo::RnullStr32& parent);
// func:algo.RnullStr32..Eq
bool                 RnullStr32_Eq(algo::RnullStr32 lhs, algo::RnullStr32 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr32..Update
bool                 RnullStr32_Update(algo::RnullStr32 &lhs, algo::RnullStr32 rhs) __attribute__((nothrow));
// func:algo.RnullStr32..EqStrptr
bool                 RnullStr32_EqStrptr(algo::RnullStr32 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr32.String  printfmt:Raw
// func:algo.RnullStr32..Print
void                 RnullStr32_Print(algo::RnullStr32 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr33
#pragma pack(push,1)
struct RnullStr33 { // algo.RnullStr33
    enum { ch_max = 33 };
    u8 ch[33];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr33 &rhs) const;
    bool operator !=(const algo::RnullStr33 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr33 &rhs) const;
    bool operator >(const algo::RnullStr33 &rhs) const;
    bool operator <=(const algo::RnullStr33 &rhs) const;
    bool operator >=(const algo::RnullStr33 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr33.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr33.ch.Set
    void                 operator =(const algo::RnullStr33& parent) __attribute__((nothrow));
    // func:algo.RnullStr33.ch.Ctor
    RnullStr33(const algo::RnullStr33 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr33.ch.CtorStrptr
    RnullStr33(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr33();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr33.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr33& parent) __attribute__((nothrow));
// func:algo.RnullStr33.ch.HashStrptr
u32                  RnullStr33_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr33.ch.Init
void                 ch_Init(algo::RnullStr33 &parent) __attribute__((nothrow));
// always return constant 33
// func:algo.RnullStr33.ch.Max
int                  ch_Max(algo::RnullStr33& parent) __attribute__((nothrow));
// func:algo.RnullStr33.ch.N
int                  ch_N(const algo::RnullStr33& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr33.ch.Print
void                 ch_Print(algo::RnullStr33& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr33.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr33& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr33.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr33& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr33..Hash
u32                  RnullStr33_Hash(u32 prev, const algo::RnullStr33 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr33 from an ascii string.
// The format of the string is the format of the algo::RnullStr33's only field
// func:algo.RnullStr33..ReadStrptrMaybe
bool                 RnullStr33_ReadStrptrMaybe(algo::RnullStr33 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr33..Lt
bool                 RnullStr33_Lt(algo::RnullStr33& lhs, algo::RnullStr33& rhs) __attribute__((nothrow));
// func:algo.RnullStr33..Cmp
i32                  RnullStr33_Cmp(algo::RnullStr33& lhs, algo::RnullStr33& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr33..Init
void                 RnullStr33_Init(algo::RnullStr33& parent);
// func:algo.RnullStr33..Eq
bool                 RnullStr33_Eq(algo::RnullStr33& lhs, algo::RnullStr33& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr33..Update
bool                 RnullStr33_Update(algo::RnullStr33 &lhs, algo::RnullStr33& rhs) __attribute__((nothrow));
// func:algo.RnullStr33..EqStrptr
bool                 RnullStr33_EqStrptr(const algo::RnullStr33& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr33.String  printfmt:Raw
// func:algo.RnullStr33..Print
void                 RnullStr33_Print(algo::RnullStr33& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr35
struct RnullStr35 { // algo.RnullStr35
    enum { ch_max = 35 };
    u8 ch[35];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr35 &rhs) const;
    bool operator !=(const algo::RnullStr35 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr35 &rhs) const;
    bool operator >(const algo::RnullStr35 &rhs) const;
    bool operator <=(const algo::RnullStr35 &rhs) const;
    bool operator >=(const algo::RnullStr35 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr35.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr35.ch.Set
    void                 operator =(const algo::RnullStr35& parent) __attribute__((nothrow));
    // func:algo.RnullStr35.ch.Ctor
    RnullStr35(const algo::RnullStr35 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr35.ch.CtorStrptr
    RnullStr35(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr35();
};

// Access string as array of chars
// func:algo.RnullStr35.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr35& parent) __attribute__((nothrow));
// func:algo.RnullStr35.ch.HashStrptr
u32                  RnullStr35_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr35.ch.Init
void                 ch_Init(algo::RnullStr35 &parent) __attribute__((nothrow));
// always return constant 35
// func:algo.RnullStr35.ch.Max
int                  ch_Max(algo::RnullStr35& parent) __attribute__((nothrow));
// func:algo.RnullStr35.ch.N
int                  ch_N(const algo::RnullStr35& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr35.ch.Print
void                 ch_Print(algo::RnullStr35& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr35.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr35& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr35.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr35& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr35..Hash
u32                  RnullStr35_Hash(u32 prev, const algo::RnullStr35 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr35 from an ascii string.
// The format of the string is the format of the algo::RnullStr35's only field
// func:algo.RnullStr35..ReadStrptrMaybe
bool                 RnullStr35_ReadStrptrMaybe(algo::RnullStr35 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr35..Lt
bool                 RnullStr35_Lt(algo::RnullStr35& lhs, algo::RnullStr35& rhs) __attribute__((nothrow));
// func:algo.RnullStr35..Cmp
i32                  RnullStr35_Cmp(algo::RnullStr35& lhs, algo::RnullStr35& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr35..Init
void                 RnullStr35_Init(algo::RnullStr35& parent);
// func:algo.RnullStr35..Eq
bool                 RnullStr35_Eq(algo::RnullStr35& lhs, algo::RnullStr35& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr35..Update
bool                 RnullStr35_Update(algo::RnullStr35 &lhs, algo::RnullStr35& rhs) __attribute__((nothrow));
// func:algo.RnullStr35..EqStrptr
bool                 RnullStr35_EqStrptr(const algo::RnullStr35& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr35.String  printfmt:Raw
// func:algo.RnullStr35..Print
void                 RnullStr35_Print(algo::RnullStr35& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr36
#pragma pack(push,1)
struct RnullStr36 { // algo.RnullStr36
    enum { ch_max = 36 };
    u8 ch[36];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr36 &rhs) const;
    bool operator !=(const algo::RnullStr36 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr36 &rhs) const;
    bool operator >(const algo::RnullStr36 &rhs) const;
    bool operator <=(const algo::RnullStr36 &rhs) const;
    bool operator >=(const algo::RnullStr36 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr36.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr36.ch.Set
    void                 operator =(const algo::RnullStr36& parent) __attribute__((nothrow));
    // func:algo.RnullStr36.ch.Ctor
    RnullStr36(const algo::RnullStr36 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr36.ch.CtorStrptr
    RnullStr36(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr36();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr36.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr36& parent) __attribute__((nothrow));
// func:algo.RnullStr36.ch.HashStrptr
u32                  RnullStr36_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr36.ch.Init
void                 ch_Init(algo::RnullStr36 &parent) __attribute__((nothrow));
// always return constant 36
// func:algo.RnullStr36.ch.Max
int                  ch_Max(algo::RnullStr36& parent) __attribute__((nothrow));
// func:algo.RnullStr36.ch.N
int                  ch_N(const algo::RnullStr36& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr36.ch.Print
void                 ch_Print(algo::RnullStr36& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr36.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr36& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr36.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr36& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr36..Hash
u32                  RnullStr36_Hash(u32 prev, const algo::RnullStr36 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr36 from an ascii string.
// The format of the string is the format of the algo::RnullStr36's only field
// func:algo.RnullStr36..ReadStrptrMaybe
bool                 RnullStr36_ReadStrptrMaybe(algo::RnullStr36 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr36..Lt
bool                 RnullStr36_Lt(algo::RnullStr36& lhs, algo::RnullStr36& rhs) __attribute__((nothrow));
// func:algo.RnullStr36..Cmp
i32                  RnullStr36_Cmp(algo::RnullStr36& lhs, algo::RnullStr36& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr36..Init
void                 RnullStr36_Init(algo::RnullStr36& parent);
// func:algo.RnullStr36..Eq
bool                 RnullStr36_Eq(algo::RnullStr36& lhs, algo::RnullStr36& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr36..Update
bool                 RnullStr36_Update(algo::RnullStr36 &lhs, algo::RnullStr36& rhs) __attribute__((nothrow));
// func:algo.RnullStr36..EqStrptr
bool                 RnullStr36_EqStrptr(const algo::RnullStr36& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr36.String  printfmt:Raw
// func:algo.RnullStr36..Print
void                 RnullStr36_Print(algo::RnullStr36& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr4
#pragma pack(push,1)
struct RnullStr4 { // algo.RnullStr4
    enum { ch_max = 4 };
    u8 ch[4];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr4.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr4.ch.Set
    void                 operator =(const algo::RnullStr4& parent) __attribute__((nothrow));
    // func:algo.RnullStr4.ch.Ctor
    RnullStr4(const algo::RnullStr4 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr4.ch.CtorStrptr
    RnullStr4(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr4();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr4.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr4& parent) __attribute__((nothrow));
// func:algo.RnullStr4.ch.HashStrptr
u32                  RnullStr4_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr4.ch.Init
void                 ch_Init(algo::RnullStr4 &parent) __attribute__((nothrow));
// always return constant 4
// func:algo.RnullStr4.ch.Max
int                  ch_Max(algo::RnullStr4& parent) __attribute__((nothrow));
// func:algo.RnullStr4.ch.N
int                  ch_N(const algo::RnullStr4& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr4.ch.Print
void                 ch_Print(algo::RnullStr4& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr4.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr4& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr4.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr4& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr4..Hash
u32                  RnullStr4_Hash(u32 prev, algo::RnullStr4 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr4 from an ascii string.
// The format of the string is the format of the algo::RnullStr4's only field
// func:algo.RnullStr4..ReadStrptrMaybe
bool                 RnullStr4_ReadStrptrMaybe(algo::RnullStr4 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr4..Lt
bool                 RnullStr4_Lt(algo::RnullStr4 lhs, algo::RnullStr4 rhs) __attribute__((nothrow));
// func:algo.RnullStr4..Cmp
i32                  RnullStr4_Cmp(algo::RnullStr4 lhs, algo::RnullStr4 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr4..Init
void                 RnullStr4_Init(algo::RnullStr4& parent);
// func:algo.RnullStr4..Eq
bool                 RnullStr4_Eq(algo::RnullStr4 lhs, algo::RnullStr4 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr4..Update
bool                 RnullStr4_Update(algo::RnullStr4 &lhs, algo::RnullStr4 rhs) __attribute__((nothrow));
// func:algo.RnullStr4..EqStrptr
bool                 RnullStr4_EqStrptr(algo::RnullStr4 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr4.String  printfmt:Raw
// func:algo.RnullStr4..Print
void                 RnullStr4_Print(algo::RnullStr4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr40
#pragma pack(push,1)
struct RnullStr40 { // algo.RnullStr40
    enum { ch_max = 40 };
    u8 ch[40];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr40 &rhs) const;
    bool operator !=(const algo::RnullStr40 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr40 &rhs) const;
    bool operator >(const algo::RnullStr40 &rhs) const;
    bool operator <=(const algo::RnullStr40 &rhs) const;
    bool operator >=(const algo::RnullStr40 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr40.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr40.ch.Set
    void                 operator =(const algo::RnullStr40& parent) __attribute__((nothrow));
    // func:algo.RnullStr40.ch.Ctor
    RnullStr40(const algo::RnullStr40 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr40.ch.CtorStrptr
    RnullStr40(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr40();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr40.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr40& parent) __attribute__((nothrow));
// func:algo.RnullStr40.ch.HashStrptr
u32                  RnullStr40_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr40.ch.Init
void                 ch_Init(algo::RnullStr40 &parent) __attribute__((nothrow));
// always return constant 40
// func:algo.RnullStr40.ch.Max
int                  ch_Max(algo::RnullStr40& parent) __attribute__((nothrow));
// func:algo.RnullStr40.ch.N
int                  ch_N(const algo::RnullStr40& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr40.ch.Print
void                 ch_Print(algo::RnullStr40& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr40.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr40& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr40.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr40& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr40..Hash
u32                  RnullStr40_Hash(u32 prev, const algo::RnullStr40 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr40 from an ascii string.
// The format of the string is the format of the algo::RnullStr40's only field
// func:algo.RnullStr40..ReadStrptrMaybe
bool                 RnullStr40_ReadStrptrMaybe(algo::RnullStr40 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr40..Lt
bool                 RnullStr40_Lt(algo::RnullStr40& lhs, algo::RnullStr40& rhs) __attribute__((nothrow));
// func:algo.RnullStr40..Cmp
i32                  RnullStr40_Cmp(algo::RnullStr40& lhs, algo::RnullStr40& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr40..Init
void                 RnullStr40_Init(algo::RnullStr40& parent);
// func:algo.RnullStr40..Eq
bool                 RnullStr40_Eq(algo::RnullStr40& lhs, algo::RnullStr40& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr40..Update
bool                 RnullStr40_Update(algo::RnullStr40 &lhs, algo::RnullStr40& rhs) __attribute__((nothrow));
// func:algo.RnullStr40..EqStrptr
bool                 RnullStr40_EqStrptr(const algo::RnullStr40& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr40.String  printfmt:Raw
// func:algo.RnullStr40..Print
void                 RnullStr40_Print(algo::RnullStr40& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr41
#pragma pack(push,1)
struct RnullStr41 { // algo.RnullStr41
    enum { ch_max = 41 };
    u8 ch[41];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr41 &rhs) const;
    bool operator !=(const algo::RnullStr41 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr41 &rhs) const;
    bool operator >(const algo::RnullStr41 &rhs) const;
    bool operator <=(const algo::RnullStr41 &rhs) const;
    bool operator >=(const algo::RnullStr41 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr41.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr41.ch.Set
    void                 operator =(const algo::RnullStr41& parent) __attribute__((nothrow));
    // func:algo.RnullStr41.ch.Ctor
    RnullStr41(const algo::RnullStr41 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr41.ch.CtorStrptr
    RnullStr41(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr41();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr41.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr41& parent) __attribute__((nothrow));
// func:algo.RnullStr41.ch.HashStrptr
u32                  RnullStr41_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr41.ch.Init
void                 ch_Init(algo::RnullStr41 &parent) __attribute__((nothrow));
// always return constant 41
// func:algo.RnullStr41.ch.Max
int                  ch_Max(algo::RnullStr41& parent) __attribute__((nothrow));
// func:algo.RnullStr41.ch.N
int                  ch_N(const algo::RnullStr41& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr41.ch.Print
void                 ch_Print(algo::RnullStr41& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr41.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr41& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr41.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr41& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr41..Hash
u32                  RnullStr41_Hash(u32 prev, const algo::RnullStr41 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr41 from an ascii string.
// The format of the string is the format of the algo::RnullStr41's only field
// func:algo.RnullStr41..ReadStrptrMaybe
bool                 RnullStr41_ReadStrptrMaybe(algo::RnullStr41 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr41..Lt
bool                 RnullStr41_Lt(algo::RnullStr41& lhs, algo::RnullStr41& rhs) __attribute__((nothrow));
// func:algo.RnullStr41..Cmp
i32                  RnullStr41_Cmp(algo::RnullStr41& lhs, algo::RnullStr41& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr41..Init
void                 RnullStr41_Init(algo::RnullStr41& parent);
// func:algo.RnullStr41..Eq
bool                 RnullStr41_Eq(algo::RnullStr41& lhs, algo::RnullStr41& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr41..Update
bool                 RnullStr41_Update(algo::RnullStr41 &lhs, algo::RnullStr41& rhs) __attribute__((nothrow));
// func:algo.RnullStr41..EqStrptr
bool                 RnullStr41_EqStrptr(const algo::RnullStr41& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr41.String  printfmt:Raw
// func:algo.RnullStr41..Print
void                 RnullStr41_Print(algo::RnullStr41& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr43
#pragma pack(push,1)
struct RnullStr43 { // algo.RnullStr43
    enum { ch_max = 43 };
    u8 ch[43];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr43.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr43.ch.Set
    void                 operator =(const algo::RnullStr43& parent) __attribute__((nothrow));
    // func:algo.RnullStr43.ch.Ctor
    RnullStr43(const algo::RnullStr43 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr43.ch.CtorStrptr
    RnullStr43(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr43();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr43.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr43& parent) __attribute__((nothrow));
// func:algo.RnullStr43.ch.HashStrptr
u32                  RnullStr43_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr43.ch.Init
void                 ch_Init(algo::RnullStr43 &parent) __attribute__((nothrow));
// always return constant 43
// func:algo.RnullStr43.ch.Max
int                  ch_Max(algo::RnullStr43& parent) __attribute__((nothrow));
// func:algo.RnullStr43.ch.N
int                  ch_N(const algo::RnullStr43& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr43.ch.Print
void                 ch_Print(algo::RnullStr43& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr43.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr43& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr43.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr43& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr43..Hash
u32                  RnullStr43_Hash(u32 prev, const algo::RnullStr43 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr43 from an ascii string.
// The format of the string is the format of the algo::RnullStr43's only field
// func:algo.RnullStr43..ReadStrptrMaybe
bool                 RnullStr43_ReadStrptrMaybe(algo::RnullStr43 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr43..Lt
bool                 RnullStr43_Lt(algo::RnullStr43& lhs, algo::RnullStr43& rhs) __attribute__((nothrow));
// func:algo.RnullStr43..Cmp
i32                  RnullStr43_Cmp(algo::RnullStr43& lhs, algo::RnullStr43& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr43..Init
void                 RnullStr43_Init(algo::RnullStr43& parent);
// func:algo.RnullStr43..Eq
bool                 RnullStr43_Eq(algo::RnullStr43& lhs, algo::RnullStr43& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr43..Update
bool                 RnullStr43_Update(algo::RnullStr43 &lhs, algo::RnullStr43& rhs) __attribute__((nothrow));
// func:algo.RnullStr43..EqStrptr
bool                 RnullStr43_EqStrptr(const algo::RnullStr43& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr43.String  printfmt:Raw
// func:algo.RnullStr43..Print
void                 RnullStr43_Print(algo::RnullStr43& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr44
#pragma pack(push,1)
struct RnullStr44 { // algo.RnullStr44
    enum { ch_max = 44 };
    u8 ch[44];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr44.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr44.ch.Set
    void                 operator =(const algo::RnullStr44& parent) __attribute__((nothrow));
    // func:algo.RnullStr44.ch.Ctor
    RnullStr44(const algo::RnullStr44 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr44.ch.CtorStrptr
    RnullStr44(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr44();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr44.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr44& parent) __attribute__((nothrow));
// func:algo.RnullStr44.ch.HashStrptr
u32                  RnullStr44_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr44.ch.Init
void                 ch_Init(algo::RnullStr44 &parent) __attribute__((nothrow));
// always return constant 44
// func:algo.RnullStr44.ch.Max
int                  ch_Max(algo::RnullStr44& parent) __attribute__((nothrow));
// func:algo.RnullStr44.ch.N
int                  ch_N(const algo::RnullStr44& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr44.ch.Print
void                 ch_Print(algo::RnullStr44& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr44.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr44& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr44.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr44& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr44..Hash
u32                  RnullStr44_Hash(u32 prev, const algo::RnullStr44 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr44 from an ascii string.
// The format of the string is the format of the algo::RnullStr44's only field
// func:algo.RnullStr44..ReadStrptrMaybe
bool                 RnullStr44_ReadStrptrMaybe(algo::RnullStr44 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr44..Lt
bool                 RnullStr44_Lt(algo::RnullStr44& lhs, algo::RnullStr44& rhs) __attribute__((nothrow));
// func:algo.RnullStr44..Cmp
i32                  RnullStr44_Cmp(algo::RnullStr44& lhs, algo::RnullStr44& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr44..Init
void                 RnullStr44_Init(algo::RnullStr44& parent);
// func:algo.RnullStr44..Eq
bool                 RnullStr44_Eq(algo::RnullStr44& lhs, algo::RnullStr44& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr44..Update
bool                 RnullStr44_Update(algo::RnullStr44 &lhs, algo::RnullStr44& rhs) __attribute__((nothrow));
// func:algo.RnullStr44..EqStrptr
bool                 RnullStr44_EqStrptr(const algo::RnullStr44& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr44.String  printfmt:Raw
// func:algo.RnullStr44..Print
void                 RnullStr44_Print(algo::RnullStr44& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr48
#pragma pack(push,1)
struct RnullStr48 { // algo.RnullStr48
    enum { ch_max = 48 };
    u8 ch[48];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr48.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr48.ch.Set
    void                 operator =(const algo::RnullStr48& parent) __attribute__((nothrow));
    // func:algo.RnullStr48.ch.Ctor
    RnullStr48(const algo::RnullStr48 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr48.ch.CtorStrptr
    RnullStr48(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr48();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr48.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr48& parent) __attribute__((nothrow));
// func:algo.RnullStr48.ch.HashStrptr
u32                  RnullStr48_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr48.ch.Init
void                 ch_Init(algo::RnullStr48 &parent) __attribute__((nothrow));
// always return constant 48
// func:algo.RnullStr48.ch.Max
int                  ch_Max(algo::RnullStr48& parent) __attribute__((nothrow));
// func:algo.RnullStr48.ch.N
int                  ch_N(const algo::RnullStr48& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr48.ch.Print
void                 ch_Print(algo::RnullStr48& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr48.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr48& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr48.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr48& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr48..Hash
u32                  RnullStr48_Hash(u32 prev, const algo::RnullStr48 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr48 from an ascii string.
// The format of the string is the format of the algo::RnullStr48's only field
// func:algo.RnullStr48..ReadStrptrMaybe
bool                 RnullStr48_ReadStrptrMaybe(algo::RnullStr48 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr48..Lt
bool                 RnullStr48_Lt(algo::RnullStr48& lhs, algo::RnullStr48& rhs) __attribute__((nothrow));
// func:algo.RnullStr48..Cmp
i32                  RnullStr48_Cmp(algo::RnullStr48& lhs, algo::RnullStr48& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr48..Init
void                 RnullStr48_Init(algo::RnullStr48& parent);
// func:algo.RnullStr48..Eq
bool                 RnullStr48_Eq(algo::RnullStr48& lhs, algo::RnullStr48& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr48..Update
bool                 RnullStr48_Update(algo::RnullStr48 &lhs, algo::RnullStr48& rhs) __attribute__((nothrow));
// func:algo.RnullStr48..EqStrptr
bool                 RnullStr48_EqStrptr(const algo::RnullStr48& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr48.String  printfmt:Raw
// func:algo.RnullStr48..Print
void                 RnullStr48_Print(algo::RnullStr48& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr5
#pragma pack(push,1)
struct RnullStr5 { // algo.RnullStr5
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr5.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr5.ch.Set
    void                 operator =(const algo::RnullStr5& parent) __attribute__((nothrow));
    // func:algo.RnullStr5.ch.Ctor
    RnullStr5(const algo::RnullStr5 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr5.ch.CtorStrptr
    RnullStr5(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr5();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr5.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr5& parent) __attribute__((nothrow));
// func:algo.RnullStr5.ch.HashStrptr
u32                  RnullStr5_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr5.ch.Init
void                 ch_Init(algo::RnullStr5 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.RnullStr5.ch.Max
int                  ch_Max(algo::RnullStr5& parent) __attribute__((nothrow));
// func:algo.RnullStr5.ch.N
int                  ch_N(const algo::RnullStr5& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr5.ch.Print
void                 ch_Print(algo::RnullStr5& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr5.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr5& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr5.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr5& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr5..Hash
u32                  RnullStr5_Hash(u32 prev, algo::RnullStr5 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr5 from an ascii string.
// The format of the string is the format of the algo::RnullStr5's only field
// func:algo.RnullStr5..ReadStrptrMaybe
bool                 RnullStr5_ReadStrptrMaybe(algo::RnullStr5 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr5..Lt
bool                 RnullStr5_Lt(algo::RnullStr5 lhs, algo::RnullStr5 rhs) __attribute__((nothrow));
// func:algo.RnullStr5..Cmp
i32                  RnullStr5_Cmp(algo::RnullStr5 lhs, algo::RnullStr5 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr5..Init
void                 RnullStr5_Init(algo::RnullStr5& parent);
// func:algo.RnullStr5..Eq
bool                 RnullStr5_Eq(algo::RnullStr5 lhs, algo::RnullStr5 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr5..Update
bool                 RnullStr5_Update(algo::RnullStr5 &lhs, algo::RnullStr5 rhs) __attribute__((nothrow));
// func:algo.RnullStr5..EqStrptr
bool                 RnullStr5_EqStrptr(algo::RnullStr5 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr5.String  printfmt:Raw
// func:algo.RnullStr5..Print
void                 RnullStr5_Print(algo::RnullStr5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr50
#pragma pack(push,1)
struct RnullStr50 { // algo.RnullStr50
    enum { ch_max = 50 };
    u8 ch[50];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr50.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr50.ch.Set
    void                 operator =(const algo::RnullStr50& parent) __attribute__((nothrow));
    // func:algo.RnullStr50.ch.Ctor
    RnullStr50(const algo::RnullStr50 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr50.ch.CtorStrptr
    RnullStr50(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr50();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr50.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr50& parent) __attribute__((nothrow));
// func:algo.RnullStr50.ch.HashStrptr
u32                  RnullStr50_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr50.ch.Init
void                 ch_Init(algo::RnullStr50 &parent) __attribute__((nothrow));
// always return constant 50
// func:algo.RnullStr50.ch.Max
int                  ch_Max(algo::RnullStr50& parent) __attribute__((nothrow));
// func:algo.RnullStr50.ch.N
int                  ch_N(const algo::RnullStr50& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr50.ch.Print
void                 ch_Print(algo::RnullStr50& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr50.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr50& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr50.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr50& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr50..Hash
u32                  RnullStr50_Hash(u32 prev, const algo::RnullStr50 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr50 from an ascii string.
// The format of the string is the format of the algo::RnullStr50's only field
// func:algo.RnullStr50..ReadStrptrMaybe
bool                 RnullStr50_ReadStrptrMaybe(algo::RnullStr50 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr50..Lt
bool                 RnullStr50_Lt(algo::RnullStr50& lhs, algo::RnullStr50& rhs) __attribute__((nothrow));
// func:algo.RnullStr50..Cmp
i32                  RnullStr50_Cmp(algo::RnullStr50& lhs, algo::RnullStr50& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr50..Init
void                 RnullStr50_Init(algo::RnullStr50& parent);
// func:algo.RnullStr50..Eq
bool                 RnullStr50_Eq(algo::RnullStr50& lhs, algo::RnullStr50& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr50..Update
bool                 RnullStr50_Update(algo::RnullStr50 &lhs, algo::RnullStr50& rhs) __attribute__((nothrow));
// func:algo.RnullStr50..EqStrptr
bool                 RnullStr50_EqStrptr(const algo::RnullStr50& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr50.String  printfmt:Raw
// func:algo.RnullStr50..Print
void                 RnullStr50_Print(algo::RnullStr50& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr54
#pragma pack(push,1)
struct RnullStr54 { // algo.RnullStr54
    enum { ch_max = 54 };
    u8 ch[54];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr54 &rhs) const;
    bool operator !=(const algo::RnullStr54 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr54 &rhs) const;
    bool operator >(const algo::RnullStr54 &rhs) const;
    bool operator <=(const algo::RnullStr54 &rhs) const;
    bool operator >=(const algo::RnullStr54 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr54.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr54.ch.Set
    void                 operator =(const algo::RnullStr54& parent) __attribute__((nothrow));
    // func:algo.RnullStr54.ch.Ctor
    RnullStr54(const algo::RnullStr54 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr54.ch.CtorStrptr
    RnullStr54(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr54();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr54.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr54& parent) __attribute__((nothrow));
// func:algo.RnullStr54.ch.HashStrptr
u32                  RnullStr54_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr54.ch.Init
void                 ch_Init(algo::RnullStr54 &parent) __attribute__((nothrow));
// always return constant 54
// func:algo.RnullStr54.ch.Max
int                  ch_Max(algo::RnullStr54& parent) __attribute__((nothrow));
// func:algo.RnullStr54.ch.N
int                  ch_N(const algo::RnullStr54& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr54.ch.Print
void                 ch_Print(algo::RnullStr54& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr54.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr54& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr54.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr54& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr54..Hash
u32                  RnullStr54_Hash(u32 prev, const algo::RnullStr54 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr54 from an ascii string.
// The format of the string is the format of the algo::RnullStr54's only field
// func:algo.RnullStr54..ReadStrptrMaybe
bool                 RnullStr54_ReadStrptrMaybe(algo::RnullStr54 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr54..Lt
bool                 RnullStr54_Lt(algo::RnullStr54& lhs, algo::RnullStr54& rhs) __attribute__((nothrow));
// func:algo.RnullStr54..Cmp
i32                  RnullStr54_Cmp(algo::RnullStr54& lhs, algo::RnullStr54& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr54..Init
void                 RnullStr54_Init(algo::RnullStr54& parent);
// func:algo.RnullStr54..Eq
bool                 RnullStr54_Eq(algo::RnullStr54& lhs, algo::RnullStr54& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr54..Update
bool                 RnullStr54_Update(algo::RnullStr54 &lhs, algo::RnullStr54& rhs) __attribute__((nothrow));
// func:algo.RnullStr54..EqStrptr
bool                 RnullStr54_EqStrptr(const algo::RnullStr54& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr54.String  printfmt:Raw
// func:algo.RnullStr54..Print
void                 RnullStr54_Print(algo::RnullStr54& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr55
#pragma pack(push,1)
struct RnullStr55 { // algo.RnullStr55
    enum { ch_max = 55 };
    u8 ch[55];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr55.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr55.ch.Set
    void                 operator =(const algo::RnullStr55& parent) __attribute__((nothrow));
    // func:algo.RnullStr55.ch.Ctor
    RnullStr55(const algo::RnullStr55 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr55.ch.CtorStrptr
    RnullStr55(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr55();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr55.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr55& parent) __attribute__((nothrow));
// func:algo.RnullStr55.ch.HashStrptr
u32                  RnullStr55_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr55.ch.Init
void                 ch_Init(algo::RnullStr55 &parent) __attribute__((nothrow));
// always return constant 55
// func:algo.RnullStr55.ch.Max
int                  ch_Max(algo::RnullStr55& parent) __attribute__((nothrow));
// func:algo.RnullStr55.ch.N
int                  ch_N(const algo::RnullStr55& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr55.ch.Print
void                 ch_Print(algo::RnullStr55& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr55.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr55& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr55.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr55& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr55..Hash
u32                  RnullStr55_Hash(u32 prev, const algo::RnullStr55 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr55 from an ascii string.
// The format of the string is the format of the algo::RnullStr55's only field
// func:algo.RnullStr55..ReadStrptrMaybe
bool                 RnullStr55_ReadStrptrMaybe(algo::RnullStr55 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr55..Lt
bool                 RnullStr55_Lt(algo::RnullStr55& lhs, algo::RnullStr55& rhs) __attribute__((nothrow));
// func:algo.RnullStr55..Cmp
i32                  RnullStr55_Cmp(algo::RnullStr55& lhs, algo::RnullStr55& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr55..Init
void                 RnullStr55_Init(algo::RnullStr55& parent);
// func:algo.RnullStr55..Eq
bool                 RnullStr55_Eq(algo::RnullStr55& lhs, algo::RnullStr55& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr55..Update
bool                 RnullStr55_Update(algo::RnullStr55 &lhs, algo::RnullStr55& rhs) __attribute__((nothrow));
// func:algo.RnullStr55..EqStrptr
bool                 RnullStr55_EqStrptr(const algo::RnullStr55& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr55.String  printfmt:Raw
// func:algo.RnullStr55..Print
void                 RnullStr55_Print(algo::RnullStr55& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr6
#pragma pack(push,1)
struct RnullStr6 { // algo.RnullStr6
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr6 &rhs) const;
    bool operator !=(const algo::RnullStr6 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr6 &rhs) const;
    bool operator >(const algo::RnullStr6 &rhs) const;
    bool operator <=(const algo::RnullStr6 &rhs) const;
    bool operator >=(const algo::RnullStr6 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr6.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr6.ch.Set
    void                 operator =(const algo::RnullStr6& parent) __attribute__((nothrow));
    // func:algo.RnullStr6.ch.Ctor
    RnullStr6(const algo::RnullStr6 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr6.ch.CtorStrptr
    RnullStr6(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr6();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr6.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr6& parent) __attribute__((nothrow));
// func:algo.RnullStr6.ch.HashStrptr
u32                  RnullStr6_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr6.ch.Init
void                 ch_Init(algo::RnullStr6 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.RnullStr6.ch.Max
int                  ch_Max(algo::RnullStr6& parent) __attribute__((nothrow));
// func:algo.RnullStr6.ch.N
int                  ch_N(const algo::RnullStr6& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr6.ch.Print
void                 ch_Print(algo::RnullStr6& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr6.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr6& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr6.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr6& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr6..Hash
u32                  RnullStr6_Hash(u32 prev, algo::RnullStr6 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr6 from an ascii string.
// The format of the string is the format of the algo::RnullStr6's only field
// func:algo.RnullStr6..ReadStrptrMaybe
bool                 RnullStr6_ReadStrptrMaybe(algo::RnullStr6 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr6..Lt
bool                 RnullStr6_Lt(algo::RnullStr6 lhs, algo::RnullStr6 rhs) __attribute__((nothrow));
// func:algo.RnullStr6..Cmp
i32                  RnullStr6_Cmp(algo::RnullStr6 lhs, algo::RnullStr6 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr6..Init
void                 RnullStr6_Init(algo::RnullStr6& parent);
// func:algo.RnullStr6..Eq
bool                 RnullStr6_Eq(algo::RnullStr6 lhs, algo::RnullStr6 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr6..Update
bool                 RnullStr6_Update(algo::RnullStr6 &lhs, algo::RnullStr6 rhs) __attribute__((nothrow));
// func:algo.RnullStr6..EqStrptr
bool                 RnullStr6_EqStrptr(algo::RnullStr6 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr6.String  printfmt:Raw
// func:algo.RnullStr6..Print
void                 RnullStr6_Print(algo::RnullStr6 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr60
#pragma pack(push,1)
struct RnullStr60 { // algo.RnullStr60
    enum { ch_max = 60 };
    u8 ch[60];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr60 &rhs) const;
    bool operator !=(const algo::RnullStr60 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr60 &rhs) const;
    bool operator >(const algo::RnullStr60 &rhs) const;
    bool operator <=(const algo::RnullStr60 &rhs) const;
    bool operator >=(const algo::RnullStr60 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr60.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr60.ch.Set
    void                 operator =(const algo::RnullStr60& parent) __attribute__((nothrow));
    // func:algo.RnullStr60.ch.Ctor
    RnullStr60(const algo::RnullStr60 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr60.ch.CtorStrptr
    RnullStr60(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr60();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr60.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr60& parent) __attribute__((nothrow));
// func:algo.RnullStr60.ch.HashStrptr
u32                  RnullStr60_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr60.ch.Init
void                 ch_Init(algo::RnullStr60 &parent) __attribute__((nothrow));
// always return constant 60
// func:algo.RnullStr60.ch.Max
int                  ch_Max(algo::RnullStr60& parent) __attribute__((nothrow));
// func:algo.RnullStr60.ch.N
int                  ch_N(const algo::RnullStr60& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr60.ch.Print
void                 ch_Print(algo::RnullStr60& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr60.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr60& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr60.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr60& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr60..Hash
u32                  RnullStr60_Hash(u32 prev, const algo::RnullStr60 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr60 from an ascii string.
// The format of the string is the format of the algo::RnullStr60's only field
// func:algo.RnullStr60..ReadStrptrMaybe
bool                 RnullStr60_ReadStrptrMaybe(algo::RnullStr60 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr60..Lt
bool                 RnullStr60_Lt(algo::RnullStr60& lhs, algo::RnullStr60& rhs) __attribute__((nothrow));
// func:algo.RnullStr60..Cmp
i32                  RnullStr60_Cmp(algo::RnullStr60& lhs, algo::RnullStr60& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr60..Init
void                 RnullStr60_Init(algo::RnullStr60& parent);
// func:algo.RnullStr60..Eq
bool                 RnullStr60_Eq(algo::RnullStr60& lhs, algo::RnullStr60& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr60..Update
bool                 RnullStr60_Update(algo::RnullStr60 &lhs, algo::RnullStr60& rhs) __attribute__((nothrow));
// func:algo.RnullStr60..EqStrptr
bool                 RnullStr60_EqStrptr(const algo::RnullStr60& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr60.String  printfmt:Raw
// func:algo.RnullStr60..Print
void                 RnullStr60_Print(algo::RnullStr60& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr62
#pragma pack(push,1)
struct RnullStr62 { // algo.RnullStr62
    enum { ch_max = 62 };
    u8 ch[62];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr62 &rhs) const;
    bool operator !=(const algo::RnullStr62 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr62 &rhs) const;
    bool operator >(const algo::RnullStr62 &rhs) const;
    bool operator <=(const algo::RnullStr62 &rhs) const;
    bool operator >=(const algo::RnullStr62 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr62.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr62.ch.Set
    void                 operator =(const algo::RnullStr62& parent) __attribute__((nothrow));
    // func:algo.RnullStr62.ch.Ctor
    RnullStr62(const algo::RnullStr62 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr62.ch.CtorStrptr
    RnullStr62(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr62();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr62.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr62& parent) __attribute__((nothrow));
// func:algo.RnullStr62.ch.HashStrptr
u32                  RnullStr62_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr62.ch.Init
void                 ch_Init(algo::RnullStr62 &parent) __attribute__((nothrow));
// always return constant 62
// func:algo.RnullStr62.ch.Max
int                  ch_Max(algo::RnullStr62& parent) __attribute__((nothrow));
// func:algo.RnullStr62.ch.N
int                  ch_N(const algo::RnullStr62& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr62.ch.Print
void                 ch_Print(algo::RnullStr62& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr62.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr62& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr62.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr62& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr62..Hash
u32                  RnullStr62_Hash(u32 prev, const algo::RnullStr62 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr62 from an ascii string.
// The format of the string is the format of the algo::RnullStr62's only field
// func:algo.RnullStr62..ReadStrptrMaybe
bool                 RnullStr62_ReadStrptrMaybe(algo::RnullStr62 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr62..Lt
bool                 RnullStr62_Lt(algo::RnullStr62& lhs, algo::RnullStr62& rhs) __attribute__((nothrow));
// func:algo.RnullStr62..Cmp
i32                  RnullStr62_Cmp(algo::RnullStr62& lhs, algo::RnullStr62& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr62..Init
void                 RnullStr62_Init(algo::RnullStr62& parent);
// func:algo.RnullStr62..Eq
bool                 RnullStr62_Eq(algo::RnullStr62& lhs, algo::RnullStr62& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr62..Update
bool                 RnullStr62_Update(algo::RnullStr62 &lhs, algo::RnullStr62& rhs) __attribute__((nothrow));
// func:algo.RnullStr62..EqStrptr
bool                 RnullStr62_EqStrptr(const algo::RnullStr62& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr62.String  printfmt:Raw
// func:algo.RnullStr62..Print
void                 RnullStr62_Print(algo::RnullStr62& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr66
#pragma pack(push,1)
struct RnullStr66 { // algo.RnullStr66
    enum { ch_max = 66 };
    u8 ch[66];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr66.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr66.ch.Set
    void                 operator =(const algo::RnullStr66& parent) __attribute__((nothrow));
    // func:algo.RnullStr66.ch.Ctor
    RnullStr66(const algo::RnullStr66 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr66.ch.CtorStrptr
    RnullStr66(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr66();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr66.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr66& parent) __attribute__((nothrow));
// func:algo.RnullStr66.ch.HashStrptr
u32                  RnullStr66_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr66.ch.Init
void                 ch_Init(algo::RnullStr66 &parent) __attribute__((nothrow));
// always return constant 66
// func:algo.RnullStr66.ch.Max
int                  ch_Max(algo::RnullStr66& parent) __attribute__((nothrow));
// func:algo.RnullStr66.ch.N
int                  ch_N(const algo::RnullStr66& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr66.ch.Print
void                 ch_Print(algo::RnullStr66& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr66.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr66& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr66.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr66& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr66..Hash
u32                  RnullStr66_Hash(u32 prev, const algo::RnullStr66 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr66 from an ascii string.
// The format of the string is the format of the algo::RnullStr66's only field
// func:algo.RnullStr66..ReadStrptrMaybe
bool                 RnullStr66_ReadStrptrMaybe(algo::RnullStr66 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr66..Lt
bool                 RnullStr66_Lt(algo::RnullStr66& lhs, algo::RnullStr66& rhs) __attribute__((nothrow));
// func:algo.RnullStr66..Cmp
i32                  RnullStr66_Cmp(algo::RnullStr66& lhs, algo::RnullStr66& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr66..Init
void                 RnullStr66_Init(algo::RnullStr66& parent);
// func:algo.RnullStr66..Eq
bool                 RnullStr66_Eq(algo::RnullStr66& lhs, algo::RnullStr66& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr66..Update
bool                 RnullStr66_Update(algo::RnullStr66 &lhs, algo::RnullStr66& rhs) __attribute__((nothrow));
// func:algo.RnullStr66..EqStrptr
bool                 RnullStr66_EqStrptr(const algo::RnullStr66& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr66.String  printfmt:Raw
// func:algo.RnullStr66..Print
void                 RnullStr66_Print(algo::RnullStr66& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr6_U32
#pragma pack(push,1)
struct RnullStr6_U32 { // algo.RnullStr6_U32: number stored as ascii digits, right pad with null
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr6_U32 &rhs) const;
    bool operator !=(const algo::RnullStr6_U32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr6_U32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr6_U32.ch.Set
    void                 operator =(const algo::RnullStr6_U32& parent) __attribute__((nothrow));
    // func:algo.RnullStr6_U32.ch.Ctor
    RnullStr6_U32(const algo::RnullStr6_U32 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr6_U32.ch.CtorStrptr
    RnullStr6_U32(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr6_U32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr6_U32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr6_U32& parent) __attribute__((nothrow));
// func:algo.RnullStr6_U32.ch.HashStrptr
u32                  RnullStr6_U32_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr6_U32.ch.Init
void                 ch_Init(algo::RnullStr6_U32 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.RnullStr6_U32.ch.Max
int                  ch_Max(algo::RnullStr6_U32& parent) __attribute__((nothrow));
// func:algo.RnullStr6_U32.ch.N
int                  ch_N(const algo::RnullStr6_U32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr6_U32.ch.Print
void                 ch_Print(algo::RnullStr6_U32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr6_U32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr6_U32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr6_U32.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr6_U32& parent, const algo::strptr& rhs) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, the result
// is undefined, and and_ok is set to false.
// Empty string is evaluated to zero.
// func:algo.RnullStr6_U32.ch.Getnum
u32                  ch_Getnum(algo::RnullStr6_U32& parent, bool &and_ok) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, return default value.
// Empty string is evaluated to zero.
// func:algo.RnullStr6_U32.ch.GetnumDflt
u32                  ch_GetnumDflt(algo::RnullStr6_U32& parent, u32 dflt) __attribute__((nothrow));
// Convert field to numeric value. If the value is too large
// for the target type, or the string is invalid, throw an exception.
// Empty string is evaluated to zero.
// func:algo.RnullStr6_U32.ch.Geti64
i64                  ch_Geti64(algo::RnullStr6_U32& parent, bool &out_ok) __attribute__((nothrow));
// Set string to number specified in RHS performing base-10 conversion.
// If the number is too large for the string, return false.
// func:algo.RnullStr6_U32.ch.SetnumMaybe
bool                 ch_SetnumMaybe(algo::RnullStr6_U32& parent, i64 rhs) __attribute__((nothrow));

// func:algo.RnullStr6_U32..Hash
u32                  RnullStr6_U32_Hash(u32 prev, const algo::RnullStr6_U32 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr6_U32 from an ascii string.
// The format of the string is the format of the algo::RnullStr6_U32's only field
// func:algo.RnullStr6_U32..ReadStrptrMaybe
bool                 RnullStr6_U32_ReadStrptrMaybe(algo::RnullStr6_U32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr6_U32..Cmp
i32                  RnullStr6_U32_Cmp(algo::RnullStr6_U32& lhs, algo::RnullStr6_U32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr6_U32..Init
void                 RnullStr6_U32_Init(algo::RnullStr6_U32& parent);
// func:algo.RnullStr6_U32..Eq
bool                 RnullStr6_U32_Eq(algo::RnullStr6_U32& lhs, algo::RnullStr6_U32& rhs) __attribute__((nothrow));
// func:algo.RnullStr6_U32..EqStrptr
bool                 RnullStr6_U32_EqStrptr(const algo::RnullStr6_U32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr6_U32.String  printfmt:Raw
// func:algo.RnullStr6_U32..Print
void                 RnullStr6_U32_Print(algo::RnullStr6_U32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr7
#pragma pack(push,1)
struct RnullStr7 { // algo.RnullStr7
    enum { ch_max = 7 };
    u8 ch[7];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr7 &rhs) const;
    bool operator !=(const algo::RnullStr7 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr7 &rhs) const;
    bool operator >(const algo::RnullStr7 &rhs) const;
    bool operator <=(const algo::RnullStr7 &rhs) const;
    bool operator >=(const algo::RnullStr7 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr7.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr7.ch.Set
    void                 operator =(const algo::RnullStr7& parent) __attribute__((nothrow));
    // func:algo.RnullStr7.ch.Ctor
    RnullStr7(const algo::RnullStr7 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr7.ch.CtorStrptr
    RnullStr7(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr7();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr7.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr7& parent) __attribute__((nothrow));
// func:algo.RnullStr7.ch.HashStrptr
u32                  RnullStr7_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr7.ch.Init
void                 ch_Init(algo::RnullStr7 &parent) __attribute__((nothrow));
// always return constant 7
// func:algo.RnullStr7.ch.Max
int                  ch_Max(algo::RnullStr7& parent) __attribute__((nothrow));
// func:algo.RnullStr7.ch.N
int                  ch_N(const algo::RnullStr7& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr7.ch.Print
void                 ch_Print(algo::RnullStr7& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr7.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr7& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr7.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr7& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr7..Hash
u32                  RnullStr7_Hash(u32 prev, algo::RnullStr7 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr7 from an ascii string.
// The format of the string is the format of the algo::RnullStr7's only field
// func:algo.RnullStr7..ReadStrptrMaybe
bool                 RnullStr7_ReadStrptrMaybe(algo::RnullStr7 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr7..Lt
bool                 RnullStr7_Lt(algo::RnullStr7 lhs, algo::RnullStr7 rhs) __attribute__((nothrow));
// func:algo.RnullStr7..Cmp
i32                  RnullStr7_Cmp(algo::RnullStr7 lhs, algo::RnullStr7 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr7..Init
void                 RnullStr7_Init(algo::RnullStr7& parent);
// func:algo.RnullStr7..Eq
bool                 RnullStr7_Eq(algo::RnullStr7 lhs, algo::RnullStr7 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr7..Update
bool                 RnullStr7_Update(algo::RnullStr7 &lhs, algo::RnullStr7 rhs) __attribute__((nothrow));
// func:algo.RnullStr7..EqStrptr
bool                 RnullStr7_EqStrptr(algo::RnullStr7 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr7.String  printfmt:Raw
// func:algo.RnullStr7..Print
void                 RnullStr7_Print(algo::RnullStr7 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr8
#pragma pack(push,1)
struct RnullStr8 { // algo.RnullStr8
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr8.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr8.ch.Set
    void                 operator =(const algo::RnullStr8& parent) __attribute__((nothrow));
    // func:algo.RnullStr8.ch.Ctor
    RnullStr8(const algo::RnullStr8 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr8.ch.CtorStrptr
    RnullStr8(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr8();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr8.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr8& parent) __attribute__((nothrow));
// func:algo.RnullStr8.ch.HashStrptr
u32                  RnullStr8_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr8.ch.Init
void                 ch_Init(algo::RnullStr8 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.RnullStr8.ch.Max
int                  ch_Max(algo::RnullStr8& parent) __attribute__((nothrow));
// func:algo.RnullStr8.ch.N
int                  ch_N(const algo::RnullStr8& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr8.ch.Print
void                 ch_Print(algo::RnullStr8& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr8.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr8& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr8.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr8& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr8..Hash
u32                  RnullStr8_Hash(u32 prev, algo::RnullStr8 rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr8 from an ascii string.
// The format of the string is the format of the algo::RnullStr8's only field
// func:algo.RnullStr8..ReadStrptrMaybe
bool                 RnullStr8_ReadStrptrMaybe(algo::RnullStr8 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr8..Lt
bool                 RnullStr8_Lt(algo::RnullStr8 lhs, algo::RnullStr8 rhs) __attribute__((nothrow));
// func:algo.RnullStr8..Cmp
i32                  RnullStr8_Cmp(algo::RnullStr8 lhs, algo::RnullStr8 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr8..Init
void                 RnullStr8_Init(algo::RnullStr8& parent);
// func:algo.RnullStr8..Eq
bool                 RnullStr8_Eq(algo::RnullStr8 lhs, algo::RnullStr8 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr8..Update
bool                 RnullStr8_Update(algo::RnullStr8 &lhs, algo::RnullStr8 rhs) __attribute__((nothrow));
// func:algo.RnullStr8..EqStrptr
bool                 RnullStr8_EqStrptr(algo::RnullStr8 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr8.String  printfmt:Raw
// func:algo.RnullStr8..Print
void                 RnullStr8_Print(algo::RnullStr8 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr80
#pragma pack(push,1)
struct RnullStr80 { // algo.RnullStr80
    enum { ch_max = 80 };
    u8 ch[80];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr80.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr80.ch.Set
    void                 operator =(const algo::RnullStr80& parent) __attribute__((nothrow));
    // func:algo.RnullStr80.ch.Ctor
    RnullStr80(const algo::RnullStr80 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr80.ch.CtorStrptr
    RnullStr80(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr80();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr80.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr80& parent) __attribute__((nothrow));
// func:algo.RnullStr80.ch.HashStrptr
u32                  RnullStr80_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr80.ch.Init
void                 ch_Init(algo::RnullStr80 &parent) __attribute__((nothrow));
// always return constant 80
// func:algo.RnullStr80.ch.Max
int                  ch_Max(algo::RnullStr80& parent) __attribute__((nothrow));
// func:algo.RnullStr80.ch.N
int                  ch_N(const algo::RnullStr80& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr80.ch.Print
void                 ch_Print(algo::RnullStr80& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr80.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr80& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr80.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr80& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr80..Hash
u32                  RnullStr80_Hash(u32 prev, const algo::RnullStr80 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr80 from an ascii string.
// The format of the string is the format of the algo::RnullStr80's only field
// func:algo.RnullStr80..ReadStrptrMaybe
bool                 RnullStr80_ReadStrptrMaybe(algo::RnullStr80 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr80..Lt
bool                 RnullStr80_Lt(algo::RnullStr80& lhs, algo::RnullStr80& rhs) __attribute__((nothrow));
// func:algo.RnullStr80..Cmp
i32                  RnullStr80_Cmp(algo::RnullStr80& lhs, algo::RnullStr80& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr80..Init
void                 RnullStr80_Init(algo::RnullStr80& parent);
// func:algo.RnullStr80..Eq
bool                 RnullStr80_Eq(algo::RnullStr80& lhs, algo::RnullStr80& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr80..Update
bool                 RnullStr80_Update(algo::RnullStr80 &lhs, algo::RnullStr80& rhs) __attribute__((nothrow));
// func:algo.RnullStr80..EqStrptr
bool                 RnullStr80_EqStrptr(const algo::RnullStr80& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr80.String  printfmt:Raw
// func:algo.RnullStr80..Print
void                 RnullStr80_Print(algo::RnullStr80& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RnullStr9
#pragma pack(push,1)
struct RnullStr9 { // algo.RnullStr9
    enum { ch_max = 9 };
    u8 ch[9];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RnullStr9 &rhs) const;
    bool operator !=(const algo::RnullStr9 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RnullStr9 &rhs) const;
    bool operator >(const algo::RnullStr9 &rhs) const;
    bool operator <=(const algo::RnullStr9 &rhs) const;
    bool operator >=(const algo::RnullStr9 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RnullStr9.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RnullStr9.ch.Set
    void                 operator =(const algo::RnullStr9& parent) __attribute__((nothrow));
    // func:algo.RnullStr9.ch.Ctor
    RnullStr9(const algo::RnullStr9 &rhs) __attribute__((nothrow));
    // func:algo.RnullStr9.ch.CtorStrptr
    RnullStr9(const algo::strptr &rhs) __attribute__((nothrow));
    RnullStr9();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RnullStr9.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RnullStr9& parent) __attribute__((nothrow));
// func:algo.RnullStr9.ch.HashStrptr
u32                  RnullStr9_Hash(u32 prev, const algo::strptr &str);
// func:algo.RnullStr9.ch.Init
void                 ch_Init(algo::RnullStr9 &parent) __attribute__((nothrow));
// always return constant 9
// func:algo.RnullStr9.ch.Max
int                  ch_Max(algo::RnullStr9& parent) __attribute__((nothrow));
// func:algo.RnullStr9.ch.N
int                  ch_N(const algo::RnullStr9& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RnullStr9.ch.Print
void                 ch_Print(algo::RnullStr9& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RnullStr9.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RnullStr9& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RnullStr9.ch.SetStrptr
void                 ch_SetStrptr(algo::RnullStr9& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RnullStr9..Hash
u32                  RnullStr9_Hash(u32 prev, const algo::RnullStr9 & rhs) __attribute__((nothrow));
// Read fields of algo::RnullStr9 from an ascii string.
// The format of the string is the format of the algo::RnullStr9's only field
// func:algo.RnullStr9..ReadStrptrMaybe
bool                 RnullStr9_ReadStrptrMaybe(algo::RnullStr9 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RnullStr9..Lt
bool                 RnullStr9_Lt(algo::RnullStr9& lhs, algo::RnullStr9& rhs) __attribute__((nothrow));
// func:algo.RnullStr9..Cmp
i32                  RnullStr9_Cmp(algo::RnullStr9& lhs, algo::RnullStr9& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RnullStr9..Init
void                 RnullStr9_Init(algo::RnullStr9& parent);
// func:algo.RnullStr9..Eq
bool                 RnullStr9_Eq(algo::RnullStr9& lhs, algo::RnullStr9& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RnullStr9..Update
bool                 RnullStr9_Update(algo::RnullStr9 &lhs, algo::RnullStr9& rhs) __attribute__((nothrow));
// func:algo.RnullStr9..EqStrptr
bool                 RnullStr9_EqStrptr(const algo::RnullStr9& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RnullStr9.String  printfmt:Raw
// func:algo.RnullStr9..Print
void                 RnullStr9_Print(algo::RnullStr9& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr10
#pragma pack(push,1)
struct RspaceStr10 { // algo.RspaceStr10
    enum { ch_max = 10 };
    u8 ch[10];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr10 &rhs) const;
    bool operator !=(const algo::RspaceStr10 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr10.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr10.ch.Set
    void                 operator =(const algo::RspaceStr10& parent) __attribute__((nothrow));
    // func:algo.RspaceStr10.ch.Ctor
    RspaceStr10(const algo::RspaceStr10 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr10.ch.CtorStrptr
    RspaceStr10(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr10();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr10.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr10& parent) __attribute__((nothrow));
// func:algo.RspaceStr10.ch.HashStrptr
u32                  RspaceStr10_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr10.ch.Init
void                 ch_Init(algo::RspaceStr10 &parent) __attribute__((nothrow));
// always return constant 10
// func:algo.RspaceStr10.ch.Max
int                  ch_Max(algo::RspaceStr10& parent) __attribute__((nothrow));
// func:algo.RspaceStr10.ch.N
int                  ch_N(const algo::RspaceStr10& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr10.ch.Print
void                 ch_Print(algo::RspaceStr10& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr10.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr10& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr10.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr10& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr10..Hash
u32                  RspaceStr10_Hash(u32 prev, algo::RspaceStr10 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr10 from an ascii string.
// The format of the string is the format of the algo::RspaceStr10's only field
// func:algo.RspaceStr10..ReadStrptrMaybe
bool                 RspaceStr10_ReadStrptrMaybe(algo::RspaceStr10 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr10..Cmp
i32                  RspaceStr10_Cmp(algo::RspaceStr10 lhs, algo::RspaceStr10 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr10..Init
void                 RspaceStr10_Init(algo::RspaceStr10& parent);
// func:algo.RspaceStr10..Eq
bool                 RspaceStr10_Eq(algo::RspaceStr10 lhs, algo::RspaceStr10 rhs) __attribute__((nothrow));
// func:algo.RspaceStr10..EqStrptr
bool                 RspaceStr10_EqStrptr(algo::RspaceStr10 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr10.String  printfmt:Raw
// func:algo.RspaceStr10..Print
void                 RspaceStr10_Print(algo::RspaceStr10 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr100
#pragma pack(push,1)
struct RspaceStr100 { // algo.RspaceStr100
    enum { ch_max = 100 };
    u8 ch[100];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr100 &rhs) const;
    bool operator !=(const algo::RspaceStr100 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr100.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr100.ch.Set
    void                 operator =(const algo::RspaceStr100& parent) __attribute__((nothrow));
    // func:algo.RspaceStr100.ch.Ctor
    RspaceStr100(const algo::RspaceStr100 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr100.ch.CtorStrptr
    RspaceStr100(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr100();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr100.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr100& parent) __attribute__((nothrow));
// func:algo.RspaceStr100.ch.HashStrptr
u32                  RspaceStr100_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr100.ch.Init
void                 ch_Init(algo::RspaceStr100 &parent) __attribute__((nothrow));
// always return constant 100
// func:algo.RspaceStr100.ch.Max
int                  ch_Max(algo::RspaceStr100& parent) __attribute__((nothrow));
// func:algo.RspaceStr100.ch.N
int                  ch_N(const algo::RspaceStr100& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr100.ch.Print
void                 ch_Print(algo::RspaceStr100& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr100.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr100& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr100.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr100& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr100..Hash
u32                  RspaceStr100_Hash(u32 prev, const algo::RspaceStr100 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr100 from an ascii string.
// The format of the string is the format of the algo::RspaceStr100's only field
// func:algo.RspaceStr100..ReadStrptrMaybe
bool                 RspaceStr100_ReadStrptrMaybe(algo::RspaceStr100 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr100..Cmp
i32                  RspaceStr100_Cmp(algo::RspaceStr100& lhs, algo::RspaceStr100& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr100..Init
void                 RspaceStr100_Init(algo::RspaceStr100& parent);
// func:algo.RspaceStr100..Eq
bool                 RspaceStr100_Eq(algo::RspaceStr100& lhs, algo::RspaceStr100& rhs) __attribute__((nothrow));
// func:algo.RspaceStr100..EqStrptr
bool                 RspaceStr100_EqStrptr(const algo::RspaceStr100& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr100.String  printfmt:Raw
// func:algo.RspaceStr100..Print
void                 RspaceStr100_Print(algo::RspaceStr100& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr11
#pragma pack(push,1)
struct RspaceStr11 { // algo.RspaceStr11
    enum { ch_max = 11 };
    u8 ch[11];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr11 &rhs) const;
    bool operator !=(const algo::RspaceStr11 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr11.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr11.ch.Set
    void                 operator =(const algo::RspaceStr11& parent) __attribute__((nothrow));
    // func:algo.RspaceStr11.ch.Ctor
    RspaceStr11(const algo::RspaceStr11 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr11.ch.CtorStrptr
    RspaceStr11(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr11();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr11.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr11& parent) __attribute__((nothrow));
// func:algo.RspaceStr11.ch.HashStrptr
u32                  RspaceStr11_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr11.ch.Init
void                 ch_Init(algo::RspaceStr11 &parent) __attribute__((nothrow));
// always return constant 11
// func:algo.RspaceStr11.ch.Max
int                  ch_Max(algo::RspaceStr11& parent) __attribute__((nothrow));
// func:algo.RspaceStr11.ch.N
int                  ch_N(const algo::RspaceStr11& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr11.ch.Print
void                 ch_Print(algo::RspaceStr11& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr11.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr11& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr11.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr11& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr11..Hash
u32                  RspaceStr11_Hash(u32 prev, const algo::RspaceStr11 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr11 from an ascii string.
// The format of the string is the format of the algo::RspaceStr11's only field
// func:algo.RspaceStr11..ReadStrptrMaybe
bool                 RspaceStr11_ReadStrptrMaybe(algo::RspaceStr11 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr11..Cmp
i32                  RspaceStr11_Cmp(algo::RspaceStr11& lhs, algo::RspaceStr11& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr11..Init
void                 RspaceStr11_Init(algo::RspaceStr11& parent);
// func:algo.RspaceStr11..Eq
bool                 RspaceStr11_Eq(algo::RspaceStr11& lhs, algo::RspaceStr11& rhs) __attribute__((nothrow));
// func:algo.RspaceStr11..EqStrptr
bool                 RspaceStr11_EqStrptr(const algo::RspaceStr11& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr11.String  printfmt:Raw
// func:algo.RspaceStr11..Print
void                 RspaceStr11_Print(algo::RspaceStr11& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr12
#pragma pack(push,1)
struct RspaceStr12 { // algo.RspaceStr12
    enum { ch_max = 12 };
    u8 ch[12];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr12 &rhs) const;
    bool operator !=(const algo::RspaceStr12 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr12.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr12.ch.Set
    void                 operator =(const algo::RspaceStr12& parent) __attribute__((nothrow));
    // func:algo.RspaceStr12.ch.Ctor
    RspaceStr12(const algo::RspaceStr12 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr12.ch.CtorStrptr
    RspaceStr12(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr12();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr12.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr12& parent) __attribute__((nothrow));
// func:algo.RspaceStr12.ch.HashStrptr
u32                  RspaceStr12_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr12.ch.Init
void                 ch_Init(algo::RspaceStr12 &parent) __attribute__((nothrow));
// always return constant 12
// func:algo.RspaceStr12.ch.Max
int                  ch_Max(algo::RspaceStr12& parent) __attribute__((nothrow));
// func:algo.RspaceStr12.ch.N
int                  ch_N(const algo::RspaceStr12& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr12.ch.Print
void                 ch_Print(algo::RspaceStr12& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr12.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr12& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr12.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr12& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr12..Hash
u32                  RspaceStr12_Hash(u32 prev, algo::RspaceStr12 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr12 from an ascii string.
// The format of the string is the format of the algo::RspaceStr12's only field
// func:algo.RspaceStr12..ReadStrptrMaybe
bool                 RspaceStr12_ReadStrptrMaybe(algo::RspaceStr12 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr12..Cmp
i32                  RspaceStr12_Cmp(algo::RspaceStr12 lhs, algo::RspaceStr12 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr12..Init
void                 RspaceStr12_Init(algo::RspaceStr12& parent);
// func:algo.RspaceStr12..Eq
bool                 RspaceStr12_Eq(algo::RspaceStr12 lhs, algo::RspaceStr12 rhs) __attribute__((nothrow));
// func:algo.RspaceStr12..EqStrptr
bool                 RspaceStr12_EqStrptr(algo::RspaceStr12 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr12.String  printfmt:Raw
// func:algo.RspaceStr12..Print
void                 RspaceStr12_Print(algo::RspaceStr12 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr128
#pragma pack(push,1)
struct RspaceStr128 { // algo.RspaceStr128
    enum { ch_max = 128 };
    u8 ch[128];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr128 &rhs) const;
    bool operator !=(const algo::RspaceStr128 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr128.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr128.ch.Set
    void                 operator =(const algo::RspaceStr128& parent) __attribute__((nothrow));
    // func:algo.RspaceStr128.ch.Ctor
    RspaceStr128(const algo::RspaceStr128 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr128.ch.CtorStrptr
    RspaceStr128(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr128();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr128.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr128& parent) __attribute__((nothrow));
// func:algo.RspaceStr128.ch.HashStrptr
u32                  RspaceStr128_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr128.ch.Init
void                 ch_Init(algo::RspaceStr128 &parent) __attribute__((nothrow));
// always return constant 128
// func:algo.RspaceStr128.ch.Max
int                  ch_Max(algo::RspaceStr128& parent) __attribute__((nothrow));
// func:algo.RspaceStr128.ch.N
int                  ch_N(const algo::RspaceStr128& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr128.ch.Print
void                 ch_Print(algo::RspaceStr128& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr128.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr128& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr128.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr128& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr128..Hash
u32                  RspaceStr128_Hash(u32 prev, algo::RspaceStr128 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr128 from an ascii string.
// The format of the string is the format of the algo::RspaceStr128's only field
// func:algo.RspaceStr128..ReadStrptrMaybe
bool                 RspaceStr128_ReadStrptrMaybe(algo::RspaceStr128 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr128..Cmp
i32                  RspaceStr128_Cmp(algo::RspaceStr128 lhs, algo::RspaceStr128 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr128..Init
void                 RspaceStr128_Init(algo::RspaceStr128& parent);
// func:algo.RspaceStr128..Eq
bool                 RspaceStr128_Eq(algo::RspaceStr128 lhs, algo::RspaceStr128 rhs) __attribute__((nothrow));
// func:algo.RspaceStr128..EqStrptr
bool                 RspaceStr128_EqStrptr(algo::RspaceStr128 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr128.String  printfmt:Raw
// func:algo.RspaceStr128..Print
void                 RspaceStr128_Print(algo::RspaceStr128 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr14
#pragma pack(push,1)
struct RspaceStr14 { // algo.RspaceStr14
    enum { ch_max = 14 };
    u8 ch[14];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr14 &rhs) const;
    bool operator !=(const algo::RspaceStr14 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr14.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr14.ch.Set
    void                 operator =(const algo::RspaceStr14& parent) __attribute__((nothrow));
    // func:algo.RspaceStr14.ch.Ctor
    RspaceStr14(const algo::RspaceStr14 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr14.ch.CtorStrptr
    RspaceStr14(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr14();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr14.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr14& parent) __attribute__((nothrow));
// func:algo.RspaceStr14.ch.HashStrptr
u32                  RspaceStr14_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr14.ch.Init
void                 ch_Init(algo::RspaceStr14 &parent) __attribute__((nothrow));
// always return constant 14
// func:algo.RspaceStr14.ch.Max
int                  ch_Max(algo::RspaceStr14& parent) __attribute__((nothrow));
// func:algo.RspaceStr14.ch.N
int                  ch_N(const algo::RspaceStr14& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr14.ch.Print
void                 ch_Print(algo::RspaceStr14& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr14.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr14& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr14.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr14& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr14..Hash
u32                  RspaceStr14_Hash(u32 prev, algo::RspaceStr14 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr14 from an ascii string.
// The format of the string is the format of the algo::RspaceStr14's only field
// func:algo.RspaceStr14..ReadStrptrMaybe
bool                 RspaceStr14_ReadStrptrMaybe(algo::RspaceStr14 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr14..Cmp
i32                  RspaceStr14_Cmp(algo::RspaceStr14 lhs, algo::RspaceStr14 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr14..Init
void                 RspaceStr14_Init(algo::RspaceStr14& parent);
// func:algo.RspaceStr14..Eq
bool                 RspaceStr14_Eq(algo::RspaceStr14 lhs, algo::RspaceStr14 rhs) __attribute__((nothrow));
// func:algo.RspaceStr14..EqStrptr
bool                 RspaceStr14_EqStrptr(algo::RspaceStr14 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr14.String  printfmt:Raw
// func:algo.RspaceStr14..Print
void                 RspaceStr14_Print(algo::RspaceStr14 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr15
#pragma pack(push,1)
struct RspaceStr15 { // algo.RspaceStr15
    enum { ch_max = 15 };
    u8 ch[15];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr15 &rhs) const;
    bool operator !=(const algo::RspaceStr15 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr15.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr15.ch.Set
    void                 operator =(const algo::RspaceStr15& parent) __attribute__((nothrow));
    // func:algo.RspaceStr15.ch.Ctor
    RspaceStr15(const algo::RspaceStr15 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr15.ch.CtorStrptr
    RspaceStr15(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr15();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr15.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr15& parent) __attribute__((nothrow));
// func:algo.RspaceStr15.ch.HashStrptr
u32                  RspaceStr15_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr15.ch.Init
void                 ch_Init(algo::RspaceStr15 &parent) __attribute__((nothrow));
// always return constant 15
// func:algo.RspaceStr15.ch.Max
int                  ch_Max(algo::RspaceStr15& parent) __attribute__((nothrow));
// func:algo.RspaceStr15.ch.N
int                  ch_N(const algo::RspaceStr15& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr15.ch.Print
void                 ch_Print(algo::RspaceStr15& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr15.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr15& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr15.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr15& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr15..Hash
u32                  RspaceStr15_Hash(u32 prev, algo::RspaceStr15 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr15 from an ascii string.
// The format of the string is the format of the algo::RspaceStr15's only field
// func:algo.RspaceStr15..ReadStrptrMaybe
bool                 RspaceStr15_ReadStrptrMaybe(algo::RspaceStr15 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr15..Cmp
i32                  RspaceStr15_Cmp(algo::RspaceStr15 lhs, algo::RspaceStr15 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr15..Init
void                 RspaceStr15_Init(algo::RspaceStr15& parent);
// func:algo.RspaceStr15..Eq
bool                 RspaceStr15_Eq(algo::RspaceStr15 lhs, algo::RspaceStr15 rhs) __attribute__((nothrow));
// func:algo.RspaceStr15..EqStrptr
bool                 RspaceStr15_EqStrptr(algo::RspaceStr15 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr15.String  printfmt:Raw
// func:algo.RspaceStr15..Print
void                 RspaceStr15_Print(algo::RspaceStr15 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr16
#pragma pack(push,1)
struct RspaceStr16 { // algo.RspaceStr16
    enum { ch_max = 16 };
    u8 ch[16];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr16.ch.Set
    void                 operator =(const algo::RspaceStr16& parent) __attribute__((nothrow));
    // func:algo.RspaceStr16.ch.Ctor
    RspaceStr16(const algo::RspaceStr16 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr16.ch.CtorStrptr
    RspaceStr16(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr16();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr16& parent) __attribute__((nothrow));
// func:algo.RspaceStr16.ch.HashStrptr
u32                  RspaceStr16_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr16.ch.Init
void                 ch_Init(algo::RspaceStr16 &parent) __attribute__((nothrow));
// always return constant 16
// func:algo.RspaceStr16.ch.Max
int                  ch_Max(algo::RspaceStr16& parent) __attribute__((nothrow));
// func:algo.RspaceStr16.ch.N
int                  ch_N(const algo::RspaceStr16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr16.ch.Print
void                 ch_Print(algo::RspaceStr16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr16.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr16& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr16..Hash
u32                  RspaceStr16_Hash(u32 prev, algo::RspaceStr16 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr16 from an ascii string.
// The format of the string is the format of the algo::RspaceStr16's only field
// func:algo.RspaceStr16..ReadStrptrMaybe
bool                 RspaceStr16_ReadStrptrMaybe(algo::RspaceStr16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr16..Lt
bool                 RspaceStr16_Lt(algo::RspaceStr16 lhs, algo::RspaceStr16 rhs) __attribute__((nothrow));
// func:algo.RspaceStr16..Cmp
i32                  RspaceStr16_Cmp(algo::RspaceStr16 lhs, algo::RspaceStr16 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr16..Init
void                 RspaceStr16_Init(algo::RspaceStr16& parent);
// func:algo.RspaceStr16..Eq
bool                 RspaceStr16_Eq(algo::RspaceStr16 lhs, algo::RspaceStr16 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RspaceStr16..Update
bool                 RspaceStr16_Update(algo::RspaceStr16 &lhs, algo::RspaceStr16 rhs) __attribute__((nothrow));
// func:algo.RspaceStr16..EqStrptr
bool                 RspaceStr16_EqStrptr(algo::RspaceStr16 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr16.String  printfmt:Raw
// func:algo.RspaceStr16..Print
void                 RspaceStr16_Print(algo::RspaceStr16 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr18
#pragma pack(push,1)
struct RspaceStr18 { // algo.RspaceStr18
    enum { ch_max = 18 };
    u8 ch[18];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr18 &rhs) const;
    bool operator !=(const algo::RspaceStr18 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr18.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr18.ch.Set
    void                 operator =(const algo::RspaceStr18& parent) __attribute__((nothrow));
    // func:algo.RspaceStr18.ch.Ctor
    RspaceStr18(const algo::RspaceStr18 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr18.ch.CtorStrptr
    RspaceStr18(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr18();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr18.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr18& parent) __attribute__((nothrow));
// func:algo.RspaceStr18.ch.HashStrptr
u32                  RspaceStr18_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr18.ch.Init
void                 ch_Init(algo::RspaceStr18 &parent) __attribute__((nothrow));
// always return constant 18
// func:algo.RspaceStr18.ch.Max
int                  ch_Max(algo::RspaceStr18& parent) __attribute__((nothrow));
// func:algo.RspaceStr18.ch.N
int                  ch_N(const algo::RspaceStr18& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr18.ch.Print
void                 ch_Print(algo::RspaceStr18& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr18.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr18& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr18.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr18& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr18..Hash
u32                  RspaceStr18_Hash(u32 prev, algo::RspaceStr18 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr18 from an ascii string.
// The format of the string is the format of the algo::RspaceStr18's only field
// func:algo.RspaceStr18..ReadStrptrMaybe
bool                 RspaceStr18_ReadStrptrMaybe(algo::RspaceStr18 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr18..Cmp
i32                  RspaceStr18_Cmp(algo::RspaceStr18 lhs, algo::RspaceStr18 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr18..Init
void                 RspaceStr18_Init(algo::RspaceStr18& parent);
// func:algo.RspaceStr18..Eq
bool                 RspaceStr18_Eq(algo::RspaceStr18 lhs, algo::RspaceStr18 rhs) __attribute__((nothrow));
// func:algo.RspaceStr18..EqStrptr
bool                 RspaceStr18_EqStrptr(algo::RspaceStr18 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr18.String  printfmt:Raw
// func:algo.RspaceStr18..Print
void                 RspaceStr18_Print(algo::RspaceStr18 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr2
#pragma pack(push,1)
struct RspaceStr2 { // algo.RspaceStr2
    enum { ch_max = 2 };
    u8 ch[2];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr2 &rhs) const;
    bool operator !=(const algo::RspaceStr2 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr2.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr2.ch.Set
    void                 operator =(const algo::RspaceStr2& parent) __attribute__((nothrow));
    // func:algo.RspaceStr2.ch.Ctor
    RspaceStr2(const algo::RspaceStr2 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr2.ch.CtorStrptr
    RspaceStr2(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr2();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr2.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr2& parent) __attribute__((nothrow));
// func:algo.RspaceStr2.ch.HashStrptr
u32                  RspaceStr2_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr2.ch.Init
void                 ch_Init(algo::RspaceStr2 &parent) __attribute__((nothrow));
// always return constant 2
// func:algo.RspaceStr2.ch.Max
int                  ch_Max(algo::RspaceStr2& parent) __attribute__((nothrow));
// func:algo.RspaceStr2.ch.N
int                  ch_N(const algo::RspaceStr2& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr2.ch.Print
void                 ch_Print(algo::RspaceStr2& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr2.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr2& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr2.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr2& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr2..Hash
u32                  RspaceStr2_Hash(u32 prev, algo::RspaceStr2 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr2 from an ascii string.
// The format of the string is the format of the algo::RspaceStr2's only field
// func:algo.RspaceStr2..ReadStrptrMaybe
bool                 RspaceStr2_ReadStrptrMaybe(algo::RspaceStr2 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr2..Cmp
i32                  RspaceStr2_Cmp(algo::RspaceStr2 lhs, algo::RspaceStr2 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr2..Init
void                 RspaceStr2_Init(algo::RspaceStr2& parent);
// func:algo.RspaceStr2..Eq
bool                 RspaceStr2_Eq(algo::RspaceStr2 lhs, algo::RspaceStr2 rhs) __attribute__((nothrow));
// func:algo.RspaceStr2..EqStrptr
bool                 RspaceStr2_EqStrptr(algo::RspaceStr2 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr2.String  printfmt:Raw
// func:algo.RspaceStr2..Print
void                 RspaceStr2_Print(algo::RspaceStr2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr20
#pragma pack(push,1)
struct RspaceStr20 { // algo.RspaceStr20
    enum { ch_max = 20 };
    u8 ch[20];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr20 &rhs) const;
    bool operator !=(const algo::RspaceStr20 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr20.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr20.ch.Set
    void                 operator =(const algo::RspaceStr20& parent) __attribute__((nothrow));
    // func:algo.RspaceStr20.ch.Ctor
    RspaceStr20(const algo::RspaceStr20 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr20.ch.CtorStrptr
    RspaceStr20(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr20();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr20.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr20& parent) __attribute__((nothrow));
// func:algo.RspaceStr20.ch.HashStrptr
u32                  RspaceStr20_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr20.ch.Init
void                 ch_Init(algo::RspaceStr20 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.RspaceStr20.ch.Max
int                  ch_Max(algo::RspaceStr20& parent) __attribute__((nothrow));
// func:algo.RspaceStr20.ch.N
int                  ch_N(const algo::RspaceStr20& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr20.ch.Print
void                 ch_Print(algo::RspaceStr20& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr20.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr20& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr20.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr20& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr20..Hash
u32                  RspaceStr20_Hash(u32 prev, algo::RspaceStr20 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr20 from an ascii string.
// The format of the string is the format of the algo::RspaceStr20's only field
// func:algo.RspaceStr20..ReadStrptrMaybe
bool                 RspaceStr20_ReadStrptrMaybe(algo::RspaceStr20 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr20..Cmp
i32                  RspaceStr20_Cmp(algo::RspaceStr20 lhs, algo::RspaceStr20 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr20..Init
void                 RspaceStr20_Init(algo::RspaceStr20& parent);
// func:algo.RspaceStr20..Eq
bool                 RspaceStr20_Eq(algo::RspaceStr20 lhs, algo::RspaceStr20 rhs) __attribute__((nothrow));
// func:algo.RspaceStr20..EqStrptr
bool                 RspaceStr20_EqStrptr(algo::RspaceStr20 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr20.String  printfmt:Raw
// func:algo.RspaceStr20..Print
void                 RspaceStr20_Print(algo::RspaceStr20 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr200
#pragma pack(push,1)
struct RspaceStr200 { // algo.RspaceStr200
    enum { ch_max = 200 };
    u8 ch[200];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr200 &rhs) const;
    bool operator !=(const algo::RspaceStr200 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr200.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr200.ch.Set
    void                 operator =(const algo::RspaceStr200& parent) __attribute__((nothrow));
    // func:algo.RspaceStr200.ch.Ctor
    RspaceStr200(const algo::RspaceStr200 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr200.ch.CtorStrptr
    RspaceStr200(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr200();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr200.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr200& parent) __attribute__((nothrow));
// func:algo.RspaceStr200.ch.HashStrptr
u32                  RspaceStr200_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr200.ch.Init
void                 ch_Init(algo::RspaceStr200 &parent) __attribute__((nothrow));
// always return constant 200
// func:algo.RspaceStr200.ch.Max
int                  ch_Max(algo::RspaceStr200& parent) __attribute__((nothrow));
// func:algo.RspaceStr200.ch.N
int                  ch_N(const algo::RspaceStr200& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr200.ch.Print
void                 ch_Print(algo::RspaceStr200& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr200.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr200& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr200.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr200& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr200..Hash
u32                  RspaceStr200_Hash(u32 prev, const algo::RspaceStr200 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr200 from an ascii string.
// The format of the string is the format of the algo::RspaceStr200's only field
// func:algo.RspaceStr200..ReadStrptrMaybe
bool                 RspaceStr200_ReadStrptrMaybe(algo::RspaceStr200 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr200..Cmp
i32                  RspaceStr200_Cmp(algo::RspaceStr200& lhs, algo::RspaceStr200& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr200..Init
void                 RspaceStr200_Init(algo::RspaceStr200& parent);
// func:algo.RspaceStr200..Eq
bool                 RspaceStr200_Eq(algo::RspaceStr200& lhs, algo::RspaceStr200& rhs) __attribute__((nothrow));
// func:algo.RspaceStr200..EqStrptr
bool                 RspaceStr200_EqStrptr(const algo::RspaceStr200& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr200.String  printfmt:Raw
// func:algo.RspaceStr200..Print
void                 RspaceStr200_Print(algo::RspaceStr200& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr21
#pragma pack(push,1)
struct RspaceStr21 { // algo.RspaceStr21
    enum { ch_max = 21 };
    u8 ch[21];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr21 &rhs) const;
    bool operator !=(const algo::RspaceStr21 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr21.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr21.ch.Set
    void                 operator =(const algo::RspaceStr21& parent) __attribute__((nothrow));
    // func:algo.RspaceStr21.ch.Ctor
    RspaceStr21(const algo::RspaceStr21 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr21.ch.CtorStrptr
    RspaceStr21(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr21();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr21.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr21& parent) __attribute__((nothrow));
// func:algo.RspaceStr21.ch.HashStrptr
u32                  RspaceStr21_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr21.ch.Init
void                 ch_Init(algo::RspaceStr21 &parent) __attribute__((nothrow));
// always return constant 21
// func:algo.RspaceStr21.ch.Max
int                  ch_Max(algo::RspaceStr21& parent) __attribute__((nothrow));
// func:algo.RspaceStr21.ch.N
int                  ch_N(const algo::RspaceStr21& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr21.ch.Print
void                 ch_Print(algo::RspaceStr21& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr21.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr21& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr21.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr21& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr21..Hash
u32                  RspaceStr21_Hash(u32 prev, const algo::RspaceStr21 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr21 from an ascii string.
// The format of the string is the format of the algo::RspaceStr21's only field
// func:algo.RspaceStr21..ReadStrptrMaybe
bool                 RspaceStr21_ReadStrptrMaybe(algo::RspaceStr21 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr21..Cmp
i32                  RspaceStr21_Cmp(algo::RspaceStr21& lhs, algo::RspaceStr21& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr21..Init
void                 RspaceStr21_Init(algo::RspaceStr21& parent);
// func:algo.RspaceStr21..Eq
bool                 RspaceStr21_Eq(algo::RspaceStr21& lhs, algo::RspaceStr21& rhs) __attribute__((nothrow));
// func:algo.RspaceStr21..EqStrptr
bool                 RspaceStr21_EqStrptr(const algo::RspaceStr21& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr21.String  printfmt:Raw
// func:algo.RspaceStr21..Print
void                 RspaceStr21_Print(algo::RspaceStr21& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr24
#pragma pack(push,1)
struct RspaceStr24 { // algo.RspaceStr24
    enum { ch_max = 24 };
    u8 ch[24];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr24.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr24.ch.Set
    void                 operator =(const algo::RspaceStr24& parent) __attribute__((nothrow));
    // func:algo.RspaceStr24.ch.Ctor
    RspaceStr24(const algo::RspaceStr24 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr24.ch.CtorStrptr
    RspaceStr24(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr24();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr24.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr24& parent) __attribute__((nothrow));
// func:algo.RspaceStr24.ch.HashStrptr
u32                  RspaceStr24_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr24.ch.Init
void                 ch_Init(algo::RspaceStr24 &parent) __attribute__((nothrow));
// always return constant 24
// func:algo.RspaceStr24.ch.Max
int                  ch_Max(algo::RspaceStr24& parent) __attribute__((nothrow));
// func:algo.RspaceStr24.ch.N
int                  ch_N(const algo::RspaceStr24& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr24.ch.Print
void                 ch_Print(algo::RspaceStr24& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr24.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr24& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr24.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr24& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr24..Hash
u32                  RspaceStr24_Hash(u32 prev, algo::RspaceStr24 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr24 from an ascii string.
// The format of the string is the format of the algo::RspaceStr24's only field
// func:algo.RspaceStr24..ReadStrptrMaybe
bool                 RspaceStr24_ReadStrptrMaybe(algo::RspaceStr24 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr24..Lt
bool                 RspaceStr24_Lt(algo::RspaceStr24 lhs, algo::RspaceStr24 rhs) __attribute__((nothrow));
// func:algo.RspaceStr24..Cmp
i32                  RspaceStr24_Cmp(algo::RspaceStr24 lhs, algo::RspaceStr24 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr24..Init
void                 RspaceStr24_Init(algo::RspaceStr24& parent);
// func:algo.RspaceStr24..Eq
bool                 RspaceStr24_Eq(algo::RspaceStr24 lhs, algo::RspaceStr24 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RspaceStr24..Update
bool                 RspaceStr24_Update(algo::RspaceStr24 &lhs, algo::RspaceStr24 rhs) __attribute__((nothrow));
// func:algo.RspaceStr24..EqStrptr
bool                 RspaceStr24_EqStrptr(algo::RspaceStr24 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr24.String  printfmt:Raw
// func:algo.RspaceStr24..Print
void                 RspaceStr24_Print(algo::RspaceStr24 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr240
#pragma pack(push,1)
struct RspaceStr240 { // algo.RspaceStr240
    enum { ch_max = 240 };
    u8 ch[240];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr240 &rhs) const;
    bool operator !=(const algo::RspaceStr240 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr240.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr240.ch.Set
    void                 operator =(const algo::RspaceStr240& parent) __attribute__((nothrow));
    // func:algo.RspaceStr240.ch.Ctor
    RspaceStr240(const algo::RspaceStr240 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr240.ch.CtorStrptr
    RspaceStr240(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr240();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr240.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr240& parent) __attribute__((nothrow));
// func:algo.RspaceStr240.ch.HashStrptr
u32                  RspaceStr240_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr240.ch.Init
void                 ch_Init(algo::RspaceStr240 &parent) __attribute__((nothrow));
// always return constant 240
// func:algo.RspaceStr240.ch.Max
int                  ch_Max(algo::RspaceStr240& parent) __attribute__((nothrow));
// func:algo.RspaceStr240.ch.N
int                  ch_N(const algo::RspaceStr240& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr240.ch.Print
void                 ch_Print(algo::RspaceStr240& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr240.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr240& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr240.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr240& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr240..Hash
u32                  RspaceStr240_Hash(u32 prev, const algo::RspaceStr240 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr240 from an ascii string.
// The format of the string is the format of the algo::RspaceStr240's only field
// func:algo.RspaceStr240..ReadStrptrMaybe
bool                 RspaceStr240_ReadStrptrMaybe(algo::RspaceStr240 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr240..Cmp
i32                  RspaceStr240_Cmp(algo::RspaceStr240& lhs, algo::RspaceStr240& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr240..Init
void                 RspaceStr240_Init(algo::RspaceStr240& parent);
// func:algo.RspaceStr240..Eq
bool                 RspaceStr240_Eq(algo::RspaceStr240& lhs, algo::RspaceStr240& rhs) __attribute__((nothrow));
// func:algo.RspaceStr240..EqStrptr
bool                 RspaceStr240_EqStrptr(const algo::RspaceStr240& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr240.String  printfmt:Raw
// func:algo.RspaceStr240..Print
void                 RspaceStr240_Print(algo::RspaceStr240& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr25
#pragma pack(push,1)
struct RspaceStr25 { // algo.RspaceStr25
    enum { ch_max = 25 };
    u8 ch[25];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr25.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr25.ch.Set
    void                 operator =(const algo::RspaceStr25& parent) __attribute__((nothrow));
    // func:algo.RspaceStr25.ch.Ctor
    RspaceStr25(const algo::RspaceStr25 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr25.ch.CtorStrptr
    RspaceStr25(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr25();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr25.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr25& parent) __attribute__((nothrow));
// func:algo.RspaceStr25.ch.HashStrptr
u32                  RspaceStr25_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr25.ch.Init
void                 ch_Init(algo::RspaceStr25 &parent) __attribute__((nothrow));
// always return constant 25
// func:algo.RspaceStr25.ch.Max
int                  ch_Max(algo::RspaceStr25& parent) __attribute__((nothrow));
// func:algo.RspaceStr25.ch.N
int                  ch_N(const algo::RspaceStr25& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr25.ch.Print
void                 ch_Print(algo::RspaceStr25& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr25.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr25& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr25.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr25& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr25..Hash
u32                  RspaceStr25_Hash(u32 prev, algo::RspaceStr25 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr25 from an ascii string.
// The format of the string is the format of the algo::RspaceStr25's only field
// func:algo.RspaceStr25..ReadStrptrMaybe
bool                 RspaceStr25_ReadStrptrMaybe(algo::RspaceStr25 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr25..Lt
bool                 RspaceStr25_Lt(algo::RspaceStr25 lhs, algo::RspaceStr25 rhs) __attribute__((nothrow));
// func:algo.RspaceStr25..Cmp
i32                  RspaceStr25_Cmp(algo::RspaceStr25 lhs, algo::RspaceStr25 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr25..Init
void                 RspaceStr25_Init(algo::RspaceStr25& parent);
// func:algo.RspaceStr25..Eq
bool                 RspaceStr25_Eq(algo::RspaceStr25 lhs, algo::RspaceStr25 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RspaceStr25..Update
bool                 RspaceStr25_Update(algo::RspaceStr25 &lhs, algo::RspaceStr25 rhs) __attribute__((nothrow));
// func:algo.RspaceStr25..EqStrptr
bool                 RspaceStr25_EqStrptr(algo::RspaceStr25 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr25.String  printfmt:Raw
// func:algo.RspaceStr25..Print
void                 RspaceStr25_Print(algo::RspaceStr25 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr26
#pragma pack(push,1)
struct RspaceStr26 { // algo.RspaceStr26
    enum { ch_max = 26 };
    u8 ch[26];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr26 &rhs) const;
    bool operator !=(const algo::RspaceStr26 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr26.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr26.ch.Set
    void                 operator =(const algo::RspaceStr26& parent) __attribute__((nothrow));
    // func:algo.RspaceStr26.ch.Ctor
    RspaceStr26(const algo::RspaceStr26 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr26.ch.CtorStrptr
    RspaceStr26(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr26();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr26.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr26& parent) __attribute__((nothrow));
// func:algo.RspaceStr26.ch.HashStrptr
u32                  RspaceStr26_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr26.ch.Init
void                 ch_Init(algo::RspaceStr26 &parent) __attribute__((nothrow));
// always return constant 26
// func:algo.RspaceStr26.ch.Max
int                  ch_Max(algo::RspaceStr26& parent) __attribute__((nothrow));
// func:algo.RspaceStr26.ch.N
int                  ch_N(const algo::RspaceStr26& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr26.ch.Print
void                 ch_Print(algo::RspaceStr26& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr26.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr26& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr26.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr26& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr26..Hash
u32                  RspaceStr26_Hash(u32 prev, const algo::RspaceStr26 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr26 from an ascii string.
// The format of the string is the format of the algo::RspaceStr26's only field
// func:algo.RspaceStr26..ReadStrptrMaybe
bool                 RspaceStr26_ReadStrptrMaybe(algo::RspaceStr26 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr26..Cmp
i32                  RspaceStr26_Cmp(algo::RspaceStr26& lhs, algo::RspaceStr26& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr26..Init
void                 RspaceStr26_Init(algo::RspaceStr26& parent);
// func:algo.RspaceStr26..Eq
bool                 RspaceStr26_Eq(algo::RspaceStr26& lhs, algo::RspaceStr26& rhs) __attribute__((nothrow));
// func:algo.RspaceStr26..EqStrptr
bool                 RspaceStr26_EqStrptr(const algo::RspaceStr26& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr26.String  printfmt:Raw
// func:algo.RspaceStr26..Print
void                 RspaceStr26_Print(algo::RspaceStr26& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr3
#pragma pack(push,1)
struct RspaceStr3 { // algo.RspaceStr3
    enum { ch_max = 3 };
    u8 ch[3];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr3 &rhs) const;
    bool operator !=(const algo::RspaceStr3 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr3.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr3.ch.Set
    void                 operator =(const algo::RspaceStr3& parent) __attribute__((nothrow));
    // func:algo.RspaceStr3.ch.Ctor
    RspaceStr3(const algo::RspaceStr3 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr3.ch.CtorStrptr
    RspaceStr3(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr3();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr3.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr3& parent) __attribute__((nothrow));
// func:algo.RspaceStr3.ch.HashStrptr
u32                  RspaceStr3_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr3.ch.Init
void                 ch_Init(algo::RspaceStr3 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.RspaceStr3.ch.Max
int                  ch_Max(algo::RspaceStr3& parent) __attribute__((nothrow));
// func:algo.RspaceStr3.ch.N
int                  ch_N(const algo::RspaceStr3& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr3.ch.Print
void                 ch_Print(algo::RspaceStr3& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr3.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr3& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr3.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr3& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr3..Hash
u32                  RspaceStr3_Hash(u32 prev, algo::RspaceStr3 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr3 from an ascii string.
// The format of the string is the format of the algo::RspaceStr3's only field
// func:algo.RspaceStr3..ReadStrptrMaybe
bool                 RspaceStr3_ReadStrptrMaybe(algo::RspaceStr3 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr3..Cmp
i32                  RspaceStr3_Cmp(algo::RspaceStr3 lhs, algo::RspaceStr3 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr3..Init
void                 RspaceStr3_Init(algo::RspaceStr3& parent);
// func:algo.RspaceStr3..Eq
bool                 RspaceStr3_Eq(algo::RspaceStr3 lhs, algo::RspaceStr3 rhs) __attribute__((nothrow));
// func:algo.RspaceStr3..EqStrptr
bool                 RspaceStr3_EqStrptr(algo::RspaceStr3 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr3.String  printfmt:Raw
// func:algo.RspaceStr3..Print
void                 RspaceStr3_Print(algo::RspaceStr3 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr31
#pragma pack(push,1)
struct RspaceStr31 { // algo.RspaceStr31
    enum { ch_max = 31 };
    u8 ch[31];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr31 &rhs) const;
    bool operator !=(const algo::RspaceStr31 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr31.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr31.ch.Set
    void                 operator =(const algo::RspaceStr31& parent) __attribute__((nothrow));
    // func:algo.RspaceStr31.ch.Ctor
    RspaceStr31(const algo::RspaceStr31 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr31.ch.CtorStrptr
    RspaceStr31(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr31();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr31.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr31& parent) __attribute__((nothrow));
// func:algo.RspaceStr31.ch.HashStrptr
u32                  RspaceStr31_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr31.ch.Init
void                 ch_Init(algo::RspaceStr31 &parent) __attribute__((nothrow));
// always return constant 31
// func:algo.RspaceStr31.ch.Max
int                  ch_Max(algo::RspaceStr31& parent) __attribute__((nothrow));
// func:algo.RspaceStr31.ch.N
int                  ch_N(const algo::RspaceStr31& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr31.ch.Print
void                 ch_Print(algo::RspaceStr31& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr31.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr31& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr31.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr31& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr31..Hash
u32                  RspaceStr31_Hash(u32 prev, const algo::RspaceStr31 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr31 from an ascii string.
// The format of the string is the format of the algo::RspaceStr31's only field
// func:algo.RspaceStr31..ReadStrptrMaybe
bool                 RspaceStr31_ReadStrptrMaybe(algo::RspaceStr31 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr31..Cmp
i32                  RspaceStr31_Cmp(algo::RspaceStr31& lhs, algo::RspaceStr31& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr31..Init
void                 RspaceStr31_Init(algo::RspaceStr31& parent);
// func:algo.RspaceStr31..Eq
bool                 RspaceStr31_Eq(algo::RspaceStr31& lhs, algo::RspaceStr31& rhs) __attribute__((nothrow));
// func:algo.RspaceStr31..EqStrptr
bool                 RspaceStr31_EqStrptr(const algo::RspaceStr31& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr31.String  printfmt:Raw
// func:algo.RspaceStr31..Print
void                 RspaceStr31_Print(algo::RspaceStr31& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr32
#pragma pack(push,1)
struct RspaceStr32 { // algo.RspaceStr32
    enum { ch_max = 32 };
    u8 ch[32];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr32 &rhs) const;
    bool operator !=(const algo::RspaceStr32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr32.ch.Set
    void                 operator =(const algo::RspaceStr32& parent) __attribute__((nothrow));
    // func:algo.RspaceStr32.ch.Ctor
    RspaceStr32(const algo::RspaceStr32 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr32.ch.CtorStrptr
    RspaceStr32(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr32();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr32& parent) __attribute__((nothrow));
// func:algo.RspaceStr32.ch.HashStrptr
u32                  RspaceStr32_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr32.ch.Init
void                 ch_Init(algo::RspaceStr32 &parent) __attribute__((nothrow));
// always return constant 32
// func:algo.RspaceStr32.ch.Max
int                  ch_Max(algo::RspaceStr32& parent) __attribute__((nothrow));
// func:algo.RspaceStr32.ch.N
int                  ch_N(const algo::RspaceStr32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr32.ch.Print
void                 ch_Print(algo::RspaceStr32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr32.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr32& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr32..Hash
u32                  RspaceStr32_Hash(u32 prev, algo::RspaceStr32 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr32 from an ascii string.
// The format of the string is the format of the algo::RspaceStr32's only field
// func:algo.RspaceStr32..ReadStrptrMaybe
bool                 RspaceStr32_ReadStrptrMaybe(algo::RspaceStr32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr32..Cmp
i32                  RspaceStr32_Cmp(algo::RspaceStr32 lhs, algo::RspaceStr32 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr32..Init
void                 RspaceStr32_Init(algo::RspaceStr32& parent);
// func:algo.RspaceStr32..Eq
bool                 RspaceStr32_Eq(algo::RspaceStr32 lhs, algo::RspaceStr32 rhs) __attribute__((nothrow));
// func:algo.RspaceStr32..EqStrptr
bool                 RspaceStr32_EqStrptr(algo::RspaceStr32 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr32.String  printfmt:Raw
// func:algo.RspaceStr32..Print
void                 RspaceStr32_Print(algo::RspaceStr32 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr4
#pragma pack(push,1)
struct RspaceStr4 { // algo.RspaceStr4
    enum { ch_max = 4 };
    u8 ch[4];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr4 &rhs) const;
    bool operator !=(const algo::RspaceStr4 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr4.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr4.ch.Set
    void                 operator =(const algo::RspaceStr4& parent) __attribute__((nothrow));
    // func:algo.RspaceStr4.ch.Ctor
    RspaceStr4(const algo::RspaceStr4 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr4.ch.CtorStrptr
    RspaceStr4(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr4();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr4.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr4& parent) __attribute__((nothrow));
// func:algo.RspaceStr4.ch.HashStrptr
u32                  RspaceStr4_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr4.ch.Init
void                 ch_Init(algo::RspaceStr4 &parent) __attribute__((nothrow));
// always return constant 4
// func:algo.RspaceStr4.ch.Max
int                  ch_Max(algo::RspaceStr4& parent) __attribute__((nothrow));
// func:algo.RspaceStr4.ch.N
int                  ch_N(const algo::RspaceStr4& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr4.ch.Print
void                 ch_Print(algo::RspaceStr4& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr4.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr4& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr4.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr4& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr4..Hash
u32                  RspaceStr4_Hash(u32 prev, algo::RspaceStr4 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr4 from an ascii string.
// The format of the string is the format of the algo::RspaceStr4's only field
// func:algo.RspaceStr4..ReadStrptrMaybe
bool                 RspaceStr4_ReadStrptrMaybe(algo::RspaceStr4 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr4..Cmp
i32                  RspaceStr4_Cmp(algo::RspaceStr4 lhs, algo::RspaceStr4 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr4..Init
void                 RspaceStr4_Init(algo::RspaceStr4& parent);
// func:algo.RspaceStr4..Eq
bool                 RspaceStr4_Eq(algo::RspaceStr4 lhs, algo::RspaceStr4 rhs) __attribute__((nothrow));
// func:algo.RspaceStr4..EqStrptr
bool                 RspaceStr4_EqStrptr(algo::RspaceStr4 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr4.String  printfmt:Raw
// func:algo.RspaceStr4..Print
void                 RspaceStr4_Print(algo::RspaceStr4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr40
#pragma pack(push,1)
struct RspaceStr40 { // algo.RspaceStr40
    enum { ch_max = 40 };
    u8 ch[40];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr40.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr40.ch.Set
    void                 operator =(const algo::RspaceStr40& parent) __attribute__((nothrow));
    // func:algo.RspaceStr40.ch.Ctor
    RspaceStr40(const algo::RspaceStr40 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr40.ch.CtorStrptr
    RspaceStr40(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr40();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr40.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr40& parent) __attribute__((nothrow));
// func:algo.RspaceStr40.ch.HashStrptr
u32                  RspaceStr40_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr40.ch.Init
void                 ch_Init(algo::RspaceStr40 &parent) __attribute__((nothrow));
// always return constant 40
// func:algo.RspaceStr40.ch.Max
int                  ch_Max(algo::RspaceStr40& parent) __attribute__((nothrow));
// func:algo.RspaceStr40.ch.N
int                  ch_N(const algo::RspaceStr40& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr40.ch.Print
void                 ch_Print(algo::RspaceStr40& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr40.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr40& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr40.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr40& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr40..Hash
u32                  RspaceStr40_Hash(u32 prev, algo::RspaceStr40 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr40 from an ascii string.
// The format of the string is the format of the algo::RspaceStr40's only field
// func:algo.RspaceStr40..ReadStrptrMaybe
bool                 RspaceStr40_ReadStrptrMaybe(algo::RspaceStr40 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr40..Cmp
i32                  RspaceStr40_Cmp(algo::RspaceStr40 lhs, algo::RspaceStr40 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr40..Init
void                 RspaceStr40_Init(algo::RspaceStr40& parent);
// func:algo.RspaceStr40..Eq
bool                 RspaceStr40_Eq(algo::RspaceStr40 lhs, algo::RspaceStr40 rhs) __attribute__((nothrow));
// func:algo.RspaceStr40..EqStrptr
bool                 RspaceStr40_EqStrptr(algo::RspaceStr40 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr40.String  printfmt:Raw
// func:algo.RspaceStr40..Print
void                 RspaceStr40_Print(algo::RspaceStr40 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr5
#pragma pack(push,1)
struct RspaceStr5 { // algo.RspaceStr5
    enum { ch_max = 5 };
    u8 ch[5];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr5 &rhs) const;
    bool operator !=(const algo::RspaceStr5 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr5.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr5.ch.Set
    void                 operator =(const algo::RspaceStr5& parent) __attribute__((nothrow));
    // func:algo.RspaceStr5.ch.Ctor
    RspaceStr5(const algo::RspaceStr5 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr5.ch.CtorStrptr
    RspaceStr5(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr5();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr5.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr5& parent) __attribute__((nothrow));
// func:algo.RspaceStr5.ch.HashStrptr
u32                  RspaceStr5_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr5.ch.Init
void                 ch_Init(algo::RspaceStr5 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.RspaceStr5.ch.Max
int                  ch_Max(algo::RspaceStr5& parent) __attribute__((nothrow));
// func:algo.RspaceStr5.ch.N
int                  ch_N(const algo::RspaceStr5& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr5.ch.Print
void                 ch_Print(algo::RspaceStr5& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr5.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr5& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr5.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr5& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr5..Hash
u32                  RspaceStr5_Hash(u32 prev, algo::RspaceStr5 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr5 from an ascii string.
// The format of the string is the format of the algo::RspaceStr5's only field
// func:algo.RspaceStr5..ReadStrptrMaybe
bool                 RspaceStr5_ReadStrptrMaybe(algo::RspaceStr5 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr5..Cmp
i32                  RspaceStr5_Cmp(algo::RspaceStr5 lhs, algo::RspaceStr5 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr5..Init
void                 RspaceStr5_Init(algo::RspaceStr5& parent);
// func:algo.RspaceStr5..Eq
bool                 RspaceStr5_Eq(algo::RspaceStr5 lhs, algo::RspaceStr5 rhs) __attribute__((nothrow));
// func:algo.RspaceStr5..EqStrptr
bool                 RspaceStr5_EqStrptr(algo::RspaceStr5 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr5.String  printfmt:Raw
// func:algo.RspaceStr5..Print
void                 RspaceStr5_Print(algo::RspaceStr5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr50
#pragma pack(push,1)
struct RspaceStr50 { // algo.RspaceStr50
    enum { ch_max = 50 };
    u8 ch[50];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr50 &rhs) const;
    bool operator !=(const algo::RspaceStr50 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr50.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr50.ch.Set
    void                 operator =(const algo::RspaceStr50& parent) __attribute__((nothrow));
    // func:algo.RspaceStr50.ch.Ctor
    RspaceStr50(const algo::RspaceStr50 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr50.ch.CtorStrptr
    RspaceStr50(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr50();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr50.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr50& parent) __attribute__((nothrow));
// func:algo.RspaceStr50.ch.HashStrptr
u32                  RspaceStr50_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr50.ch.Init
void                 ch_Init(algo::RspaceStr50 &parent) __attribute__((nothrow));
// always return constant 50
// func:algo.RspaceStr50.ch.Max
int                  ch_Max(algo::RspaceStr50& parent) __attribute__((nothrow));
// func:algo.RspaceStr50.ch.N
int                  ch_N(const algo::RspaceStr50& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr50.ch.Print
void                 ch_Print(algo::RspaceStr50& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr50.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr50& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr50.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr50& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr50..Hash
u32                  RspaceStr50_Hash(u32 prev, algo::RspaceStr50 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr50 from an ascii string.
// The format of the string is the format of the algo::RspaceStr50's only field
// func:algo.RspaceStr50..ReadStrptrMaybe
bool                 RspaceStr50_ReadStrptrMaybe(algo::RspaceStr50 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr50..Cmp
i32                  RspaceStr50_Cmp(algo::RspaceStr50 lhs, algo::RspaceStr50 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr50..Init
void                 RspaceStr50_Init(algo::RspaceStr50& parent);
// func:algo.RspaceStr50..Eq
bool                 RspaceStr50_Eq(algo::RspaceStr50 lhs, algo::RspaceStr50 rhs) __attribute__((nothrow));
// func:algo.RspaceStr50..EqStrptr
bool                 RspaceStr50_EqStrptr(algo::RspaceStr50 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr50.String  printfmt:Raw
// func:algo.RspaceStr50..Print
void                 RspaceStr50_Print(algo::RspaceStr50 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr6
#pragma pack(push,1)
struct RspaceStr6 { // algo.RspaceStr6
    enum { ch_max = 6 };
    u8 ch[6];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr6 &rhs) const;
    bool operator !=(const algo::RspaceStr6 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::RspaceStr6 &rhs) const;
    bool operator >(const algo::RspaceStr6 &rhs) const;
    bool operator <=(const algo::RspaceStr6 &rhs) const;
    bool operator >=(const algo::RspaceStr6 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr6.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr6.ch.Set
    void                 operator =(const algo::RspaceStr6& parent) __attribute__((nothrow));
    // func:algo.RspaceStr6.ch.Ctor
    RspaceStr6(const algo::RspaceStr6 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr6.ch.CtorStrptr
    RspaceStr6(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr6();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr6.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr6& parent) __attribute__((nothrow));
// func:algo.RspaceStr6.ch.HashStrptr
u32                  RspaceStr6_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr6.ch.Init
void                 ch_Init(algo::RspaceStr6 &parent) __attribute__((nothrow));
// always return constant 6
// func:algo.RspaceStr6.ch.Max
int                  ch_Max(algo::RspaceStr6& parent) __attribute__((nothrow));
// func:algo.RspaceStr6.ch.N
int                  ch_N(const algo::RspaceStr6& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr6.ch.Print
void                 ch_Print(algo::RspaceStr6& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr6.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr6& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr6.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr6& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr6..Hash
u32                  RspaceStr6_Hash(u32 prev, algo::RspaceStr6 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr6 from an ascii string.
// The format of the string is the format of the algo::RspaceStr6's only field
// func:algo.RspaceStr6..ReadStrptrMaybe
bool                 RspaceStr6_ReadStrptrMaybe(algo::RspaceStr6 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr6..Lt
bool                 RspaceStr6_Lt(algo::RspaceStr6 lhs, algo::RspaceStr6 rhs) __attribute__((nothrow));
// func:algo.RspaceStr6..Cmp
i32                  RspaceStr6_Cmp(algo::RspaceStr6 lhs, algo::RspaceStr6 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr6..Init
void                 RspaceStr6_Init(algo::RspaceStr6& parent);
// func:algo.RspaceStr6..Eq
bool                 RspaceStr6_Eq(algo::RspaceStr6 lhs, algo::RspaceStr6 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RspaceStr6..Update
bool                 RspaceStr6_Update(algo::RspaceStr6 &lhs, algo::RspaceStr6 rhs) __attribute__((nothrow));
// func:algo.RspaceStr6..EqStrptr
bool                 RspaceStr6_EqStrptr(algo::RspaceStr6 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr6.String  printfmt:Raw
// func:algo.RspaceStr6..Print
void                 RspaceStr6_Print(algo::RspaceStr6 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr64
#pragma pack(push,1)
struct RspaceStr64 { // algo.RspaceStr64
    enum { ch_max = 64 };
    u8 ch[64];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr64 &rhs) const;
    bool operator !=(const algo::RspaceStr64 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr64.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr64.ch.Set
    void                 operator =(const algo::RspaceStr64& parent) __attribute__((nothrow));
    // func:algo.RspaceStr64.ch.Ctor
    RspaceStr64(const algo::RspaceStr64 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr64.ch.CtorStrptr
    RspaceStr64(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr64();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr64.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr64& parent) __attribute__((nothrow));
// func:algo.RspaceStr64.ch.HashStrptr
u32                  RspaceStr64_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr64.ch.Init
void                 ch_Init(algo::RspaceStr64 &parent) __attribute__((nothrow));
// always return constant 64
// func:algo.RspaceStr64.ch.Max
int                  ch_Max(algo::RspaceStr64& parent) __attribute__((nothrow));
// func:algo.RspaceStr64.ch.N
int                  ch_N(const algo::RspaceStr64& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr64.ch.Print
void                 ch_Print(algo::RspaceStr64& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr64.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr64& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr64.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr64& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr64..Hash
u32                  RspaceStr64_Hash(u32 prev, const algo::RspaceStr64 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr64 from an ascii string.
// The format of the string is the format of the algo::RspaceStr64's only field
// func:algo.RspaceStr64..ReadStrptrMaybe
bool                 RspaceStr64_ReadStrptrMaybe(algo::RspaceStr64 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr64..Cmp
i32                  RspaceStr64_Cmp(algo::RspaceStr64& lhs, algo::RspaceStr64& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr64..Init
void                 RspaceStr64_Init(algo::RspaceStr64& parent);
// func:algo.RspaceStr64..Eq
bool                 RspaceStr64_Eq(algo::RspaceStr64& lhs, algo::RspaceStr64& rhs) __attribute__((nothrow));
// func:algo.RspaceStr64..EqStrptr
bool                 RspaceStr64_EqStrptr(const algo::RspaceStr64& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr64.String  printfmt:Raw
// func:algo.RspaceStr64..Print
void                 RspaceStr64_Print(algo::RspaceStr64& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr7
struct RspaceStr7 { // algo.RspaceStr7
    enum { ch_max = 7 };
    u8 ch[7];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr7 &rhs) const;
    bool operator !=(const algo::RspaceStr7 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr7.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr7.ch.Set
    void                 operator =(const algo::RspaceStr7& parent) __attribute__((nothrow));
    // func:algo.RspaceStr7.ch.Ctor
    RspaceStr7(const algo::RspaceStr7 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr7.ch.CtorStrptr
    RspaceStr7(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr7();
};

// Access string as array of chars
// func:algo.RspaceStr7.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr7& parent) __attribute__((nothrow));
// func:algo.RspaceStr7.ch.HashStrptr
u32                  RspaceStr7_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr7.ch.Init
void                 ch_Init(algo::RspaceStr7 &parent) __attribute__((nothrow));
// always return constant 7
// func:algo.RspaceStr7.ch.Max
int                  ch_Max(algo::RspaceStr7& parent) __attribute__((nothrow));
// func:algo.RspaceStr7.ch.N
int                  ch_N(const algo::RspaceStr7& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr7.ch.Print
void                 ch_Print(algo::RspaceStr7& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr7.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr7& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr7.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr7& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr7..Hash
u32                  RspaceStr7_Hash(u32 prev, algo::RspaceStr7 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr7 from an ascii string.
// The format of the string is the format of the algo::RspaceStr7's only field
// func:algo.RspaceStr7..ReadStrptrMaybe
bool                 RspaceStr7_ReadStrptrMaybe(algo::RspaceStr7 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr7..Cmp
i32                  RspaceStr7_Cmp(algo::RspaceStr7 lhs, algo::RspaceStr7 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr7..Init
void                 RspaceStr7_Init(algo::RspaceStr7& parent);
// func:algo.RspaceStr7..Eq
bool                 RspaceStr7_Eq(algo::RspaceStr7 lhs, algo::RspaceStr7 rhs) __attribute__((nothrow));
// func:algo.RspaceStr7..EqStrptr
bool                 RspaceStr7_EqStrptr(algo::RspaceStr7 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr7.String  printfmt:Raw
// func:algo.RspaceStr7..Print
void                 RspaceStr7_Print(algo::RspaceStr7 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr75
#pragma pack(push,1)
struct RspaceStr75 { // algo.RspaceStr75
    enum { ch_max = 75 };
    u8 ch[75];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr75 &rhs) const;
    bool operator !=(const algo::RspaceStr75 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr75.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr75.ch.Set
    void                 operator =(const algo::RspaceStr75& parent) __attribute__((nothrow));
    // func:algo.RspaceStr75.ch.Ctor
    RspaceStr75(const algo::RspaceStr75 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr75.ch.CtorStrptr
    RspaceStr75(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr75();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr75.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr75& parent) __attribute__((nothrow));
// func:algo.RspaceStr75.ch.HashStrptr
u32                  RspaceStr75_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr75.ch.Init
void                 ch_Init(algo::RspaceStr75 &parent) __attribute__((nothrow));
// always return constant 75
// func:algo.RspaceStr75.ch.Max
int                  ch_Max(algo::RspaceStr75& parent) __attribute__((nothrow));
// func:algo.RspaceStr75.ch.N
int                  ch_N(const algo::RspaceStr75& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr75.ch.Print
void                 ch_Print(algo::RspaceStr75& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr75.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr75& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr75.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr75& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr75..Hash
u32                  RspaceStr75_Hash(u32 prev, algo::RspaceStr75 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr75 from an ascii string.
// The format of the string is the format of the algo::RspaceStr75's only field
// func:algo.RspaceStr75..ReadStrptrMaybe
bool                 RspaceStr75_ReadStrptrMaybe(algo::RspaceStr75 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr75..Cmp
i32                  RspaceStr75_Cmp(algo::RspaceStr75 lhs, algo::RspaceStr75 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr75..Init
void                 RspaceStr75_Init(algo::RspaceStr75& parent);
// func:algo.RspaceStr75..Eq
bool                 RspaceStr75_Eq(algo::RspaceStr75 lhs, algo::RspaceStr75 rhs) __attribute__((nothrow));
// func:algo.RspaceStr75..EqStrptr
bool                 RspaceStr75_EqStrptr(algo::RspaceStr75 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr75.String  printfmt:Raw
// func:algo.RspaceStr75..Print
void                 RspaceStr75_Print(algo::RspaceStr75 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr8
#pragma pack(push,1)
struct RspaceStr8 { // algo.RspaceStr8
    enum { ch_max = 8 };
    u8 ch[8];
    inline operator algo::strptr() const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr8.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr8.ch.Set
    void                 operator =(const algo::RspaceStr8& parent) __attribute__((nothrow));
    // func:algo.RspaceStr8.ch.Ctor
    RspaceStr8(const algo::RspaceStr8 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr8.ch.CtorStrptr
    RspaceStr8(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr8();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr8.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr8& parent) __attribute__((nothrow));
// func:algo.RspaceStr8.ch.HashStrptr
u32                  RspaceStr8_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr8.ch.Init
void                 ch_Init(algo::RspaceStr8 &parent) __attribute__((nothrow));
// always return constant 8
// func:algo.RspaceStr8.ch.Max
int                  ch_Max(algo::RspaceStr8& parent) __attribute__((nothrow));
// func:algo.RspaceStr8.ch.N
int                  ch_N(const algo::RspaceStr8& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr8.ch.Print
void                 ch_Print(algo::RspaceStr8& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr8.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr8& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr8.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr8& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr8..Hash
u32                  RspaceStr8_Hash(u32 prev, algo::RspaceStr8 rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr8 from an ascii string.
// The format of the string is the format of the algo::RspaceStr8's only field
// func:algo.RspaceStr8..ReadStrptrMaybe
bool                 RspaceStr8_ReadStrptrMaybe(algo::RspaceStr8 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr8..Lt
bool                 RspaceStr8_Lt(algo::RspaceStr8 lhs, algo::RspaceStr8 rhs) __attribute__((nothrow));
// func:algo.RspaceStr8..Cmp
i32                  RspaceStr8_Cmp(algo::RspaceStr8 lhs, algo::RspaceStr8 rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr8..Init
void                 RspaceStr8_Init(algo::RspaceStr8& parent);
// func:algo.RspaceStr8..Eq
bool                 RspaceStr8_Eq(algo::RspaceStr8 lhs, algo::RspaceStr8 rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.RspaceStr8..Update
bool                 RspaceStr8_Update(algo::RspaceStr8 &lhs, algo::RspaceStr8 rhs) __attribute__((nothrow));
// func:algo.RspaceStr8..EqStrptr
bool                 RspaceStr8_EqStrptr(algo::RspaceStr8 lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr8.String  printfmt:Raw
// func:algo.RspaceStr8..Print
void                 RspaceStr8_Print(algo::RspaceStr8 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.RspaceStr9
#pragma pack(push,1)
struct RspaceStr9 { // algo.RspaceStr9
    enum { ch_max = 9 };
    u8 ch[9];
    inline operator algo::strptr() const;
    bool operator ==(const algo::RspaceStr9 &rhs) const;
    bool operator !=(const algo::RspaceStr9 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.RspaceStr9.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.RspaceStr9.ch.Set
    void                 operator =(const algo::RspaceStr9& parent) __attribute__((nothrow));
    // func:algo.RspaceStr9.ch.Ctor
    RspaceStr9(const algo::RspaceStr9 &rhs) __attribute__((nothrow));
    // func:algo.RspaceStr9.ch.CtorStrptr
    RspaceStr9(const algo::strptr &rhs) __attribute__((nothrow));
    RspaceStr9();
};
#pragma pack(pop)

// Access string as array of chars
// func:algo.RspaceStr9.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::RspaceStr9& parent) __attribute__((nothrow));
// func:algo.RspaceStr9.ch.HashStrptr
u32                  RspaceStr9_Hash(u32 prev, const algo::strptr &str);
// func:algo.RspaceStr9.ch.Init
void                 ch_Init(algo::RspaceStr9 &parent) __attribute__((nothrow));
// always return constant 9
// func:algo.RspaceStr9.ch.Max
int                  ch_Max(algo::RspaceStr9& parent) __attribute__((nothrow));
// func:algo.RspaceStr9.ch.N
int                  ch_N(const algo::RspaceStr9& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.RspaceStr9.ch.Print
void                 ch_Print(algo::RspaceStr9& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.RspaceStr9.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::RspaceStr9& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.RspaceStr9.ch.SetStrptr
void                 ch_SetStrptr(algo::RspaceStr9& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.RspaceStr9..Hash
u32                  RspaceStr9_Hash(u32 prev, const algo::RspaceStr9 & rhs) __attribute__((nothrow));
// Read fields of algo::RspaceStr9 from an ascii string.
// The format of the string is the format of the algo::RspaceStr9's only field
// func:algo.RspaceStr9..ReadStrptrMaybe
bool                 RspaceStr9_ReadStrptrMaybe(algo::RspaceStr9 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.RspaceStr9..Cmp
i32                  RspaceStr9_Cmp(algo::RspaceStr9& lhs, algo::RspaceStr9& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.RspaceStr9..Init
void                 RspaceStr9_Init(algo::RspaceStr9& parent);
// func:algo.RspaceStr9..Eq
bool                 RspaceStr9_Eq(algo::RspaceStr9& lhs, algo::RspaceStr9& rhs) __attribute__((nothrow));
// func:algo.RspaceStr9..EqStrptr
bool                 RspaceStr9_EqStrptr(const algo::RspaceStr9& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.RspaceStr9.String  printfmt:Raw
// func:algo.RspaceStr9..Print
void                 RspaceStr9_Print(algo::RspaceStr9& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.SchedTime
#pragma pack(push,1)
struct SchedTime { // algo.SchedTime
    u64   value;   //   0
    inline operator u64() const;
    explicit SchedTime(u64                            in_value);
    SchedTime();
};
#pragma pack(pop)

// Read fields of algo::SchedTime from an ascii string.
// The format of the string is the format of the algo::SchedTime's only field
// func:algo.SchedTime..ReadStrptrMaybe
bool                 SchedTime_ReadStrptrMaybe(algo::SchedTime &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.SchedTime..Lt
bool                 SchedTime_Lt(algo::SchedTime lhs, algo::SchedTime rhs) __attribute__((nothrow));
// func:algo.SchedTime..Cmp
i32                  SchedTime_Cmp(algo::SchedTime lhs, algo::SchedTime rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.SchedTime..Init
void                 SchedTime_Init(algo::SchedTime& parent);
// func:algo.SchedTime..Eq
bool                 SchedTime_Eq(algo::SchedTime lhs, algo::SchedTime rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.SchedTime..Update
bool                 SchedTime_Update(algo::SchedTime &lhs, algo::SchedTime rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.SchedTime.String  printfmt:Raw
// func:algo.SchedTime..Print
void                 SchedTime_Print(algo::SchedTime row, algo::cstring& str) __attribute__((nothrow));

// --- algo.SeqType
#pragma pack(push,1)
struct SeqType { // algo.SeqType
    u64   value;   //   0
    inline operator u64() const;
    explicit SeqType(u64                            in_value);
    SeqType();
};
#pragma pack(pop)

// func:algo.SeqType..Hash
u32                  SeqType_Hash(u32 prev, algo::SeqType rhs) __attribute__((nothrow));
// Read fields of algo::SeqType from an ascii string.
// The format of the string is the format of the algo::SeqType's only field
// func:algo.SeqType..ReadStrptrMaybe
bool                 SeqType_ReadStrptrMaybe(algo::SeqType &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.SeqType..Lt
bool                 SeqType_Lt(algo::SeqType lhs, algo::SeqType rhs) __attribute__((nothrow));
// func:algo.SeqType..Cmp
i32                  SeqType_Cmp(algo::SeqType lhs, algo::SeqType rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.SeqType..Init
void                 SeqType_Init(algo::SeqType& parent);
// func:algo.SeqType..Eq
bool                 SeqType_Eq(algo::SeqType lhs, algo::SeqType rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.SeqType..Update
bool                 SeqType_Update(algo::SeqType &lhs, algo::SeqType rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.SeqType.String  printfmt:Raw
// func:algo.SeqType..Print
void                 SeqType_Print(algo::SeqType row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Sha1sig
struct Sha1sig { // algo.Sha1sig
    u8   sha1sig_elems[20];   //   0  fixed array
    bool operator ==(const algo::Sha1sig &rhs) const;
    bool operator !=(const algo::Sha1sig &rhs) const;
    bool operator <(const algo::Sha1sig &rhs) const;
    bool operator >(const algo::Sha1sig &rhs) const;
    bool operator <=(const algo::Sha1sig &rhs) const;
    bool operator >=(const algo::Sha1sig &rhs) const;
    Sha1sig();
};

// Set all elements of fixed array to value RHS
// func:algo.Sha1sig.sha1sig.Fill
void                 sha1sig_Fill(algo::Sha1sig& parent, const u8 &rhs) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.Sha1sig.sha1sig.Find
u8*                  sha1sig_Find(algo::Sha1sig& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Access fixed array sha1sig as aryptr.
// func:algo.Sha1sig.sha1sig.Getary
algo::aryptr<u8>     sha1sig_Getary(algo::Sha1sig& parent) __attribute__((nothrow));
// Return max number of items in the array
// func:algo.Sha1sig.sha1sig.Max
i32                  sha1sig_Max(algo::Sha1sig& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.Sha1sig.sha1sig.N
i32                  sha1sig_N(const algo::Sha1sig& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Set contents of fixed array to RHS; Input length is trimmed as necessary
// func:algo.Sha1sig.sha1sig.Setary
void                 sha1sig_Setary(algo::Sha1sig& parent, const algo::aryptr<u8> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking in release.
// func:algo.Sha1sig.sha1sig.qFind
u8&                  sha1sig_qFind(algo::Sha1sig& parent, u64 t) __attribute__((nothrow));
// func:algo.Sha1sig.sha1sig.Eq
bool                 sha1sig_Eq(algo::Sha1sig& parent, algo::Sha1sig &rhs) __attribute__((nothrow, pure));
// func:algo.Sha1sig.sha1sig.Cmp
int                  sha1sig_Cmp(algo::Sha1sig& parent, algo::Sha1sig &rhs) __attribute__((nothrow));
// Convert sha1sig to a string.
// Array is printed as a regular string.
// func:algo.Sha1sig.sha1sig.Print
void                 sha1sig_Print(algo::Sha1sig& parent, algo::cstring &rhs) __attribute__((nothrow));
// Read array from string
// Convert string to field. Return success value
// func:algo.Sha1sig.sha1sig.ReadStrptrMaybe
bool                 sha1sig_ReadStrptrMaybe(algo::Sha1sig& parent, algo::strptr in_str) __attribute__((nothrow));

// cursor points to valid item
// func:algo.Sha1sig.sha1sig_curs.Reset
void                 Sha1sig_sha1sig_curs_Reset(Sha1sig_sha1sig_curs &curs, algo::Sha1sig &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Sha1sig.sha1sig_curs.ValidQ
bool                 Sha1sig_sha1sig_curs_ValidQ(Sha1sig_sha1sig_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:algo.Sha1sig.sha1sig_curs.Next
void                 Sha1sig_sha1sig_curs_Next(Sha1sig_sha1sig_curs &curs) __attribute__((nothrow));
// item access
// func:algo.Sha1sig.sha1sig_curs.Access
u8&                  Sha1sig_sha1sig_curs_Access(Sha1sig_sha1sig_curs &curs) __attribute__((nothrow));
// Read fields of algo::Sha1sig from an ascii string.
// func:algo.Sha1sig..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Sha1sig_ReadStrptrMaybe(algo::Sha1sig &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Sha1sig..Lt
bool                 Sha1sig_Lt(algo::Sha1sig& lhs, algo::Sha1sig& rhs) __attribute__((nothrow));
// func:algo.Sha1sig..Cmp
i32                  Sha1sig_Cmp(algo::Sha1sig& lhs, algo::Sha1sig& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Sha1sig..Init
void                 Sha1sig_Init(algo::Sha1sig& parent);
// func:algo.Sha1sig..Eq
bool                 Sha1sig_Eq(algo::Sha1sig& lhs, algo::Sha1sig& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.Sha1sig..Update
bool                 Sha1sig_Update(algo::Sha1sig &lhs, algo::Sha1sig& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Sha1sig.String  printfmt:Extern
// func:algo.Sha1sig..Print
// this function is 'extrn' and implemented by user
void                 Sha1sig_Print(algo::Sha1sig& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr1
struct Smallstr1 { // algo.Smallstr1
    enum { ch_max = 1 };
    u8 ch[1+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr1 &rhs) const;
    bool operator !=(const algo::Smallstr1 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr1.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr1.ch.Set
    void                 operator =(const algo::Smallstr1& parent) __attribute__((nothrow));
    // func:algo.Smallstr1.ch.Ctor
    Smallstr1(const algo::Smallstr1 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr1.ch.CtorStrptr
    Smallstr1(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr1();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr1.ch.Add
void                 ch_Add(algo::Smallstr1& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr1.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr1& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr1.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr1& parent) __attribute__((nothrow));
// func:algo.Smallstr1.ch.HashStrptr
u32                  Smallstr1_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr1.ch.Init
void                 ch_Init(algo::Smallstr1 &parent) __attribute__((nothrow));
// always return constant 1
// func:algo.Smallstr1.ch.Max
int                  ch_Max(algo::Smallstr1& parent) __attribute__((nothrow));
// func:algo.Smallstr1.ch.N
int                  ch_N(const algo::Smallstr1& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr1.ch.Print
void                 ch_Print(algo::Smallstr1& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr1.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr1& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr1.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr1& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr1..Hash
u32                  Smallstr1_Hash(u32 prev, const algo::Smallstr1 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr1 from an ascii string.
// The format of the string is the format of the algo::Smallstr1's only field
// func:algo.Smallstr1..ReadStrptrMaybe
bool                 Smallstr1_ReadStrptrMaybe(algo::Smallstr1 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr1..Cmp
i32                  Smallstr1_Cmp(algo::Smallstr1& lhs, algo::Smallstr1& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr1..Init
void                 Smallstr1_Init(algo::Smallstr1& parent);
// func:algo.Smallstr1..Eq
bool                 Smallstr1_Eq(algo::Smallstr1& lhs, algo::Smallstr1& rhs) __attribute__((nothrow));
// func:algo.Smallstr1..EqStrptr
bool                 Smallstr1_EqStrptr(const algo::Smallstr1& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr1.String  printfmt:Raw
// func:algo.Smallstr1..Print
void                 Smallstr1_Print(algo::Smallstr1& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr10
#pragma pack(push,1)
struct Smallstr10 { // algo.Smallstr10
    enum { ch_max = 10 };
    u8 ch[10+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr10 &rhs) const;
    bool operator !=(const algo::Smallstr10 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr10.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr10.ch.Set
    void                 operator =(const algo::Smallstr10& parent) __attribute__((nothrow));
    // func:algo.Smallstr10.ch.Ctor
    Smallstr10(const algo::Smallstr10 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr10.ch.CtorStrptr
    Smallstr10(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr10();
};
#pragma pack(pop)

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr10.ch.Add
void                 ch_Add(algo::Smallstr10& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr10.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr10& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr10.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr10& parent) __attribute__((nothrow));
// func:algo.Smallstr10.ch.HashStrptr
u32                  Smallstr10_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr10.ch.Init
void                 ch_Init(algo::Smallstr10 &parent) __attribute__((nothrow));
// always return constant 10
// func:algo.Smallstr10.ch.Max
int                  ch_Max(algo::Smallstr10& parent) __attribute__((nothrow));
// func:algo.Smallstr10.ch.N
int                  ch_N(const algo::Smallstr10& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr10.ch.Print
void                 ch_Print(algo::Smallstr10& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr10.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr10& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr10.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr10& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr10..Hash
u32                  Smallstr10_Hash(u32 prev, const algo::Smallstr10 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr10 from an ascii string.
// The format of the string is the format of the algo::Smallstr10's only field
// func:algo.Smallstr10..ReadStrptrMaybe
bool                 Smallstr10_ReadStrptrMaybe(algo::Smallstr10 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr10..Cmp
i32                  Smallstr10_Cmp(algo::Smallstr10& lhs, algo::Smallstr10& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr10..Init
void                 Smallstr10_Init(algo::Smallstr10& parent);
// func:algo.Smallstr10..Eq
bool                 Smallstr10_Eq(algo::Smallstr10& lhs, algo::Smallstr10& rhs) __attribute__((nothrow));
// func:algo.Smallstr10..EqStrptr
bool                 Smallstr10_EqStrptr(const algo::Smallstr10& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr10.String  printfmt:Raw
// func:algo.Smallstr10..Print
void                 Smallstr10_Print(algo::Smallstr10& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr16
struct Smallstr16 { // algo.Smallstr16
    enum { ch_max = 16 };
    u8 ch[16+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr16 &rhs) const;
    bool operator !=(const algo::Smallstr16 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr16.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr16.ch.Set
    void                 operator =(const algo::Smallstr16& parent) __attribute__((nothrow));
    // func:algo.Smallstr16.ch.Ctor
    Smallstr16(const algo::Smallstr16 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr16.ch.CtorStrptr
    Smallstr16(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr16();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr16.ch.Add
void                 ch_Add(algo::Smallstr16& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr16.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr16& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr16.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr16& parent) __attribute__((nothrow));
// func:algo.Smallstr16.ch.HashStrptr
u32                  Smallstr16_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr16.ch.Init
void                 ch_Init(algo::Smallstr16 &parent) __attribute__((nothrow));
// always return constant 16
// func:algo.Smallstr16.ch.Max
int                  ch_Max(algo::Smallstr16& parent) __attribute__((nothrow));
// func:algo.Smallstr16.ch.N
int                  ch_N(const algo::Smallstr16& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr16.ch.Print
void                 ch_Print(algo::Smallstr16& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr16.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr16& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr16.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr16& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr16..Hash
u32                  Smallstr16_Hash(u32 prev, const algo::Smallstr16 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr16 from an ascii string.
// The format of the string is the format of the algo::Smallstr16's only field
// func:algo.Smallstr16..ReadStrptrMaybe
bool                 Smallstr16_ReadStrptrMaybe(algo::Smallstr16 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr16..Cmp
i32                  Smallstr16_Cmp(algo::Smallstr16& lhs, algo::Smallstr16& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr16..Init
void                 Smallstr16_Init(algo::Smallstr16& parent);
// func:algo.Smallstr16..Eq
bool                 Smallstr16_Eq(algo::Smallstr16& lhs, algo::Smallstr16& rhs) __attribute__((nothrow));
// func:algo.Smallstr16..EqStrptr
bool                 Smallstr16_EqStrptr(const algo::Smallstr16& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr16.String  printfmt:Raw
// func:algo.Smallstr16..Print
void                 Smallstr16_Print(algo::Smallstr16& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr2
struct Smallstr2 { // algo.Smallstr2
    enum { ch_max = 2 };
    u8 ch[2+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr2 &rhs) const;
    bool operator !=(const algo::Smallstr2 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr2.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr2.ch.Set
    void                 operator =(const algo::Smallstr2& parent) __attribute__((nothrow));
    // func:algo.Smallstr2.ch.Ctor
    Smallstr2(const algo::Smallstr2 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr2.ch.CtorStrptr
    Smallstr2(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr2();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr2.ch.Add
void                 ch_Add(algo::Smallstr2& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr2.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr2& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr2.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr2& parent) __attribute__((nothrow));
// func:algo.Smallstr2.ch.HashStrptr
u32                  Smallstr2_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr2.ch.Init
void                 ch_Init(algo::Smallstr2 &parent) __attribute__((nothrow));
// always return constant 2
// func:algo.Smallstr2.ch.Max
int                  ch_Max(algo::Smallstr2& parent) __attribute__((nothrow));
// func:algo.Smallstr2.ch.N
int                  ch_N(const algo::Smallstr2& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr2.ch.Print
void                 ch_Print(algo::Smallstr2& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr2.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr2& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr2.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr2& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr2..Hash
u32                  Smallstr2_Hash(u32 prev, const algo::Smallstr2 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr2 from an ascii string.
// The format of the string is the format of the algo::Smallstr2's only field
// func:algo.Smallstr2..ReadStrptrMaybe
bool                 Smallstr2_ReadStrptrMaybe(algo::Smallstr2 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr2..Cmp
i32                  Smallstr2_Cmp(algo::Smallstr2& lhs, algo::Smallstr2& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr2..Init
void                 Smallstr2_Init(algo::Smallstr2& parent);
// func:algo.Smallstr2..Eq
bool                 Smallstr2_Eq(algo::Smallstr2& lhs, algo::Smallstr2& rhs) __attribute__((nothrow));
// func:algo.Smallstr2..EqStrptr
bool                 Smallstr2_EqStrptr(const algo::Smallstr2& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr2.String  printfmt:Raw
// func:algo.Smallstr2..Print
void                 Smallstr2_Print(algo::Smallstr2& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr20
#pragma pack(push,1)
struct Smallstr20 { // algo.Smallstr20
    enum { ch_max = 20 };
    u8 ch[20+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr20 &rhs) const;
    bool operator !=(const algo::Smallstr20 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::Smallstr20 &rhs) const;
    bool operator >(const algo::Smallstr20 &rhs) const;
    bool operator <=(const algo::Smallstr20 &rhs) const;
    bool operator >=(const algo::Smallstr20 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr20.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr20.ch.Set
    void                 operator =(const algo::Smallstr20& parent) __attribute__((nothrow));
    // func:algo.Smallstr20.ch.Ctor
    Smallstr20(const algo::Smallstr20 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr20.ch.CtorStrptr
    Smallstr20(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr20();
};
#pragma pack(pop)

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr20.ch.Add
void                 ch_Add(algo::Smallstr20& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr20.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr20& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr20.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr20& parent) __attribute__((nothrow));
// func:algo.Smallstr20.ch.HashStrptr
u32                  Smallstr20_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr20.ch.Init
void                 ch_Init(algo::Smallstr20 &parent) __attribute__((nothrow));
// always return constant 20
// func:algo.Smallstr20.ch.Max
int                  ch_Max(algo::Smallstr20& parent) __attribute__((nothrow));
// func:algo.Smallstr20.ch.N
int                  ch_N(const algo::Smallstr20& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr20.ch.Print
void                 ch_Print(algo::Smallstr20& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr20.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr20& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr20.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr20& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr20..Hash
u32                  Smallstr20_Hash(u32 prev, const algo::Smallstr20 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr20 from an ascii string.
// The format of the string is the format of the algo::Smallstr20's only field
// func:algo.Smallstr20..ReadStrptrMaybe
bool                 Smallstr20_ReadStrptrMaybe(algo::Smallstr20 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr20..Lt
bool                 Smallstr20_Lt(algo::Smallstr20& lhs, algo::Smallstr20& rhs) __attribute__((nothrow));
// func:algo.Smallstr20..Cmp
i32                  Smallstr20_Cmp(algo::Smallstr20& lhs, algo::Smallstr20& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr20..Init
void                 Smallstr20_Init(algo::Smallstr20& parent);
// func:algo.Smallstr20..Eq
bool                 Smallstr20_Eq(algo::Smallstr20& lhs, algo::Smallstr20& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.Smallstr20..Update
bool                 Smallstr20_Update(algo::Smallstr20 &lhs, algo::Smallstr20& rhs) __attribute__((nothrow));
// func:algo.Smallstr20..EqStrptr
bool                 Smallstr20_EqStrptr(const algo::Smallstr20& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr20.String  printfmt:Raw
// func:algo.Smallstr20..Print
void                 Smallstr20_Print(algo::Smallstr20& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr200
struct Smallstr200 { // algo.Smallstr200
    enum { ch_max = 200 };
    u8 ch[200+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr200 &rhs) const;
    bool operator !=(const algo::Smallstr200 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr200.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr200.ch.Set
    void                 operator =(const algo::Smallstr200& parent) __attribute__((nothrow));
    // func:algo.Smallstr200.ch.Ctor
    Smallstr200(const algo::Smallstr200 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr200.ch.CtorStrptr
    Smallstr200(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr200();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr200.ch.Add
void                 ch_Add(algo::Smallstr200& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr200.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr200& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr200.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr200& parent) __attribute__((nothrow));
// func:algo.Smallstr200.ch.HashStrptr
u32                  Smallstr200_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr200.ch.Init
void                 ch_Init(algo::Smallstr200 &parent) __attribute__((nothrow));
// always return constant 200
// func:algo.Smallstr200.ch.Max
int                  ch_Max(algo::Smallstr200& parent) __attribute__((nothrow));
// func:algo.Smallstr200.ch.N
int                  ch_N(const algo::Smallstr200& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr200.ch.Print
void                 ch_Print(algo::Smallstr200& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr200.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr200& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr200.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr200& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr200..Hash
u32                  Smallstr200_Hash(u32 prev, const algo::Smallstr200 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr200 from an ascii string.
// The format of the string is the format of the algo::Smallstr200's only field
// func:algo.Smallstr200..ReadStrptrMaybe
bool                 Smallstr200_ReadStrptrMaybe(algo::Smallstr200 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr200..Cmp
i32                  Smallstr200_Cmp(algo::Smallstr200& lhs, algo::Smallstr200& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr200..Init
void                 Smallstr200_Init(algo::Smallstr200& parent);
// func:algo.Smallstr200..Eq
bool                 Smallstr200_Eq(algo::Smallstr200& lhs, algo::Smallstr200& rhs) __attribute__((nothrow));
// func:algo.Smallstr200..EqStrptr
bool                 Smallstr200_EqStrptr(const algo::Smallstr200& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr200.String  printfmt:Raw
// func:algo.Smallstr200..Print
void                 Smallstr200_Print(algo::Smallstr200& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr25
struct Smallstr25 { // algo.Smallstr25
    enum { ch_max = 25 };
    u8 ch[25+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr25 &rhs) const;
    bool operator !=(const algo::Smallstr25 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr25.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr25.ch.Set
    void                 operator =(const algo::Smallstr25& parent) __attribute__((nothrow));
    // func:algo.Smallstr25.ch.Ctor
    Smallstr25(const algo::Smallstr25 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr25.ch.CtorStrptr
    Smallstr25(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr25();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr25.ch.Add
void                 ch_Add(algo::Smallstr25& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr25.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr25& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr25.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr25& parent) __attribute__((nothrow));
// func:algo.Smallstr25.ch.HashStrptr
u32                  Smallstr25_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr25.ch.Init
void                 ch_Init(algo::Smallstr25 &parent) __attribute__((nothrow));
// always return constant 25
// func:algo.Smallstr25.ch.Max
int                  ch_Max(algo::Smallstr25& parent) __attribute__((nothrow));
// func:algo.Smallstr25.ch.N
int                  ch_N(const algo::Smallstr25& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr25.ch.Print
void                 ch_Print(algo::Smallstr25& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr25.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr25& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr25.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr25& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr25..Hash
u32                  Smallstr25_Hash(u32 prev, const algo::Smallstr25 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr25 from an ascii string.
// The format of the string is the format of the algo::Smallstr25's only field
// func:algo.Smallstr25..ReadStrptrMaybe
bool                 Smallstr25_ReadStrptrMaybe(algo::Smallstr25 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr25..Cmp
i32                  Smallstr25_Cmp(algo::Smallstr25& lhs, algo::Smallstr25& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr25..Init
void                 Smallstr25_Init(algo::Smallstr25& parent);
// func:algo.Smallstr25..Eq
bool                 Smallstr25_Eq(algo::Smallstr25& lhs, algo::Smallstr25& rhs) __attribute__((nothrow));
// func:algo.Smallstr25..EqStrptr
bool                 Smallstr25_EqStrptr(const algo::Smallstr25& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr25.String  printfmt:Raw
// func:algo.Smallstr25..Print
void                 Smallstr25_Print(algo::Smallstr25& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr3
struct Smallstr3 { // algo.Smallstr3
    enum { ch_max = 3 };
    u8 ch[3+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr3 &rhs) const;
    bool operator !=(const algo::Smallstr3 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr3.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr3.ch.Set
    void                 operator =(const algo::Smallstr3& parent) __attribute__((nothrow));
    // func:algo.Smallstr3.ch.Ctor
    Smallstr3(const algo::Smallstr3 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr3.ch.CtorStrptr
    Smallstr3(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr3();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr3.ch.Add
void                 ch_Add(algo::Smallstr3& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr3.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr3& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr3.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr3& parent) __attribute__((nothrow));
// func:algo.Smallstr3.ch.HashStrptr
u32                  Smallstr3_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr3.ch.Init
void                 ch_Init(algo::Smallstr3 &parent) __attribute__((nothrow));
// always return constant 3
// func:algo.Smallstr3.ch.Max
int                  ch_Max(algo::Smallstr3& parent) __attribute__((nothrow));
// func:algo.Smallstr3.ch.N
int                  ch_N(const algo::Smallstr3& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr3.ch.Print
void                 ch_Print(algo::Smallstr3& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr3.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr3& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr3.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr3& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr3..Hash
u32                  Smallstr3_Hash(u32 prev, const algo::Smallstr3 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr3 from an ascii string.
// The format of the string is the format of the algo::Smallstr3's only field
// func:algo.Smallstr3..ReadStrptrMaybe
bool                 Smallstr3_ReadStrptrMaybe(algo::Smallstr3 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr3..Cmp
i32                  Smallstr3_Cmp(algo::Smallstr3& lhs, algo::Smallstr3& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr3..Init
void                 Smallstr3_Init(algo::Smallstr3& parent);
// func:algo.Smallstr3..Eq
bool                 Smallstr3_Eq(algo::Smallstr3& lhs, algo::Smallstr3& rhs) __attribute__((nothrow));
// func:algo.Smallstr3..EqStrptr
bool                 Smallstr3_EqStrptr(const algo::Smallstr3& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr3.String  printfmt:Raw
// func:algo.Smallstr3..Print
void                 Smallstr3_Print(algo::Smallstr3& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr30
struct Smallstr30 { // algo.Smallstr30
    enum { ch_max = 30 };
    u8 ch[30+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr30 &rhs) const;
    bool operator !=(const algo::Smallstr30 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    bool operator <(const algo::Smallstr30 &rhs) const;
    bool operator >(const algo::Smallstr30 &rhs) const;
    bool operator <=(const algo::Smallstr30 &rhs) const;
    bool operator >=(const algo::Smallstr30 &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr30.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr30.ch.Set
    void                 operator =(const algo::Smallstr30& parent) __attribute__((nothrow));
    // func:algo.Smallstr30.ch.Ctor
    Smallstr30(const algo::Smallstr30 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr30.ch.CtorStrptr
    Smallstr30(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr30();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr30.ch.Add
void                 ch_Add(algo::Smallstr30& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr30.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr30& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr30.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr30& parent) __attribute__((nothrow));
// func:algo.Smallstr30.ch.HashStrptr
u32                  Smallstr30_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr30.ch.Init
void                 ch_Init(algo::Smallstr30 &parent) __attribute__((nothrow));
// always return constant 30
// func:algo.Smallstr30.ch.Max
int                  ch_Max(algo::Smallstr30& parent) __attribute__((nothrow));
// func:algo.Smallstr30.ch.N
int                  ch_N(const algo::Smallstr30& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr30.ch.Print
void                 ch_Print(algo::Smallstr30& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr30.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr30& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr30.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr30& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr30..Hash
u32                  Smallstr30_Hash(u32 prev, const algo::Smallstr30 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr30 from an ascii string.
// The format of the string is the format of the algo::Smallstr30's only field
// func:algo.Smallstr30..ReadStrptrMaybe
bool                 Smallstr30_ReadStrptrMaybe(algo::Smallstr30 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr30..Lt
bool                 Smallstr30_Lt(algo::Smallstr30& lhs, algo::Smallstr30& rhs) __attribute__((nothrow));
// func:algo.Smallstr30..Cmp
i32                  Smallstr30_Cmp(algo::Smallstr30& lhs, algo::Smallstr30& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr30..Init
void                 Smallstr30_Init(algo::Smallstr30& parent);
// func:algo.Smallstr30..Eq
bool                 Smallstr30_Eq(algo::Smallstr30& lhs, algo::Smallstr30& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.Smallstr30..Update
bool                 Smallstr30_Update(algo::Smallstr30 &lhs, algo::Smallstr30& rhs) __attribute__((nothrow));
// func:algo.Smallstr30..EqStrptr
bool                 Smallstr30_EqStrptr(const algo::Smallstr30& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr30.String  printfmt:Raw
// func:algo.Smallstr30..Print
void                 Smallstr30_Print(algo::Smallstr30& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr32
#pragma pack(push,1)
struct Smallstr32 { // algo.Smallstr32
    enum { ch_max = 32 };
    u8 ch[32+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr32 &rhs) const;
    bool operator !=(const algo::Smallstr32 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr32.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr32.ch.Set
    void                 operator =(const algo::Smallstr32& parent) __attribute__((nothrow));
    // func:algo.Smallstr32.ch.Ctor
    Smallstr32(const algo::Smallstr32 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr32.ch.CtorStrptr
    Smallstr32(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr32();
};
#pragma pack(pop)

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr32.ch.Add
void                 ch_Add(algo::Smallstr32& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr32.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr32& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr32.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr32& parent) __attribute__((nothrow));
// func:algo.Smallstr32.ch.HashStrptr
u32                  Smallstr32_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr32.ch.Init
void                 ch_Init(algo::Smallstr32 &parent) __attribute__((nothrow));
// always return constant 32
// func:algo.Smallstr32.ch.Max
int                  ch_Max(algo::Smallstr32& parent) __attribute__((nothrow));
// func:algo.Smallstr32.ch.N
int                  ch_N(const algo::Smallstr32& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr32.ch.Print
void                 ch_Print(algo::Smallstr32& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr32.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr32& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr32.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr32& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr32..Hash
u32                  Smallstr32_Hash(u32 prev, const algo::Smallstr32 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr32 from an ascii string.
// The format of the string is the format of the algo::Smallstr32's only field
// func:algo.Smallstr32..ReadStrptrMaybe
bool                 Smallstr32_ReadStrptrMaybe(algo::Smallstr32 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr32..Cmp
i32                  Smallstr32_Cmp(algo::Smallstr32& lhs, algo::Smallstr32& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr32..Init
void                 Smallstr32_Init(algo::Smallstr32& parent);
// func:algo.Smallstr32..Eq
bool                 Smallstr32_Eq(algo::Smallstr32& lhs, algo::Smallstr32& rhs) __attribute__((nothrow));
// func:algo.Smallstr32..EqStrptr
bool                 Smallstr32_EqStrptr(const algo::Smallstr32& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr32.String  printfmt:Raw
// func:algo.Smallstr32..Print
void                 Smallstr32_Print(algo::Smallstr32& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr4
struct Smallstr4 { // algo.Smallstr4
    enum { ch_max = 4 };
    u8 ch[4+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr4 &rhs) const;
    bool operator !=(const algo::Smallstr4 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr4.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr4.ch.Set
    void                 operator =(const algo::Smallstr4& parent) __attribute__((nothrow));
    // func:algo.Smallstr4.ch.Ctor
    Smallstr4(const algo::Smallstr4 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr4.ch.CtorStrptr
    Smallstr4(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr4();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr4.ch.Add
void                 ch_Add(algo::Smallstr4& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr4.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr4& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr4.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr4& parent) __attribute__((nothrow));
// func:algo.Smallstr4.ch.HashStrptr
u32                  Smallstr4_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr4.ch.Init
void                 ch_Init(algo::Smallstr4 &parent) __attribute__((nothrow));
// always return constant 4
// func:algo.Smallstr4.ch.Max
int                  ch_Max(algo::Smallstr4& parent) __attribute__((nothrow));
// func:algo.Smallstr4.ch.N
int                  ch_N(const algo::Smallstr4& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr4.ch.Print
void                 ch_Print(algo::Smallstr4& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr4.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr4& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr4.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr4& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr4..Hash
u32                  Smallstr4_Hash(u32 prev, const algo::Smallstr4 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr4 from an ascii string.
// The format of the string is the format of the algo::Smallstr4's only field
// func:algo.Smallstr4..ReadStrptrMaybe
bool                 Smallstr4_ReadStrptrMaybe(algo::Smallstr4 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr4..Cmp
i32                  Smallstr4_Cmp(algo::Smallstr4& lhs, algo::Smallstr4& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr4..Init
void                 Smallstr4_Init(algo::Smallstr4& parent);
// func:algo.Smallstr4..Eq
bool                 Smallstr4_Eq(algo::Smallstr4& lhs, algo::Smallstr4& rhs) __attribute__((nothrow));
// func:algo.Smallstr4..EqStrptr
bool                 Smallstr4_EqStrptr(const algo::Smallstr4& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr4.String  printfmt:Raw
// func:algo.Smallstr4..Print
void                 Smallstr4_Print(algo::Smallstr4& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr40
struct Smallstr40 { // algo.Smallstr40
    enum { ch_max = 40 };
    u8 ch[40+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr40 &rhs) const;
    bool operator !=(const algo::Smallstr40 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr40.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr40.ch.Set
    void                 operator =(const algo::Smallstr40& parent) __attribute__((nothrow));
    // func:algo.Smallstr40.ch.Ctor
    Smallstr40(const algo::Smallstr40 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr40.ch.CtorStrptr
    Smallstr40(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr40();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr40.ch.Add
void                 ch_Add(algo::Smallstr40& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr40.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr40& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr40.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr40& parent) __attribute__((nothrow));
// func:algo.Smallstr40.ch.HashStrptr
u32                  Smallstr40_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr40.ch.Init
void                 ch_Init(algo::Smallstr40 &parent) __attribute__((nothrow));
// always return constant 40
// func:algo.Smallstr40.ch.Max
int                  ch_Max(algo::Smallstr40& parent) __attribute__((nothrow));
// func:algo.Smallstr40.ch.N
int                  ch_N(const algo::Smallstr40& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr40.ch.Print
void                 ch_Print(algo::Smallstr40& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr40.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr40& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr40.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr40& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr40..Hash
u32                  Smallstr40_Hash(u32 prev, const algo::Smallstr40 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr40 from an ascii string.
// The format of the string is the format of the algo::Smallstr40's only field
// func:algo.Smallstr40..ReadStrptrMaybe
bool                 Smallstr40_ReadStrptrMaybe(algo::Smallstr40 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr40..Cmp
i32                  Smallstr40_Cmp(algo::Smallstr40& lhs, algo::Smallstr40& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr40..Init
void                 Smallstr40_Init(algo::Smallstr40& parent);
// func:algo.Smallstr40..Eq
bool                 Smallstr40_Eq(algo::Smallstr40& lhs, algo::Smallstr40& rhs) __attribute__((nothrow));
// func:algo.Smallstr40..EqStrptr
bool                 Smallstr40_EqStrptr(const algo::Smallstr40& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr40.String  printfmt:Raw
// func:algo.Smallstr40..Print
void                 Smallstr40_Print(algo::Smallstr40& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.Smallstr5
struct Smallstr5 { // algo.Smallstr5
    enum { ch_max = 5 };
    u8 ch[5+1];
    u8 n_ch;

    inline operator algo::strptr() const;
    bool operator ==(const algo::Smallstr5 &rhs) const;
    bool operator !=(const algo::Smallstr5 &rhs) const;
    bool operator ==(const algo::strptr &rhs) const;
    // Copy from strptr (operator=)
    // func:algo.Smallstr5.ch.AssignStrptr
    void                 operator =(const algo::strptr &str) __attribute__((nothrow));
    // Copy from same type
    // Copy value from RHS.
    // func:algo.Smallstr5.ch.Set
    void                 operator =(const algo::Smallstr5& parent) __attribute__((nothrow));
    // func:algo.Smallstr5.ch.Ctor
    Smallstr5(const algo::Smallstr5 &rhs) __attribute__((nothrow));
    // func:algo.Smallstr5.ch.CtorStrptr
    Smallstr5(const algo::strptr &rhs) __attribute__((nothrow));
    Smallstr5();
};

// Append character to string.
// If there is no space for an extra character, do nothing.
// func:algo.Smallstr5.ch.Add
void                 ch_Add(algo::Smallstr5& parent, char c) __attribute__((nothrow));
// Append string to this string.
// If there is no space for an extra character, trim.
// If there is no space left, dump core in debug mode.
// func:algo.Smallstr5.ch.AddStrptr
void                 ch_AddStrptr(algo::Smallstr5& parent, algo::strptr str) __attribute__((nothrow));
// Access string as array of chars
// func:algo.Smallstr5.ch.Getary
algo::aryptr<char>   ch_Getary(const algo::Smallstr5& parent) __attribute__((nothrow));
// func:algo.Smallstr5.ch.HashStrptr
u32                  Smallstr5_Hash(u32 prev, const algo::strptr &str);
// func:algo.Smallstr5.ch.Init
void                 ch_Init(algo::Smallstr5 &parent) __attribute__((nothrow));
// always return constant 5
// func:algo.Smallstr5.ch.Max
int                  ch_Max(algo::Smallstr5& parent) __attribute__((nothrow));
// func:algo.Smallstr5.ch.N
int                  ch_N(const algo::Smallstr5& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// func:algo.Smallstr5.ch.Print
void                 ch_Print(algo::Smallstr5& parent, algo::cstring &out) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.Smallstr5.ch.ReadStrptrMaybe
bool                 ch_ReadStrptrMaybe(algo::Smallstr5& parent, algo::strptr rhs) __attribute__((nothrow));
// Copy from strptr, clipping length
// Set string to the value provided by RHS.
// If RHS is too large, it is silently clipped.
// func:algo.Smallstr5.ch.SetStrptr
void                 ch_SetStrptr(algo::Smallstr5& parent, const algo::strptr& rhs) __attribute__((nothrow));

// func:algo.Smallstr5..Hash
u32                  Smallstr5_Hash(u32 prev, const algo::Smallstr5 & rhs) __attribute__((nothrow));
// Read fields of algo::Smallstr5 from an ascii string.
// The format of the string is the format of the algo::Smallstr5's only field
// func:algo.Smallstr5..ReadStrptrMaybe
bool                 Smallstr5_ReadStrptrMaybe(algo::Smallstr5 &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.Smallstr5..Cmp
i32                  Smallstr5_Cmp(algo::Smallstr5& lhs, algo::Smallstr5& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Smallstr5..Init
void                 Smallstr5_Init(algo::Smallstr5& parent);
// func:algo.Smallstr5..Eq
bool                 Smallstr5_Eq(algo::Smallstr5& lhs, algo::Smallstr5& rhs) __attribute__((nothrow));
// func:algo.Smallstr5..EqStrptr
bool                 Smallstr5_EqStrptr(const algo::Smallstr5& lhs, const algo::strptr& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Smallstr5.String  printfmt:Raw
// func:algo.Smallstr5..Print
void                 Smallstr5_Print(algo::Smallstr5& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.StringAry
struct StringAry { // algo.StringAry
    algo::cstring*   ary_elems;   // pointer to elements
    u32              ary_n;       // number of elements in array
    u32              ary_max;     // max. capacity of array before realloc
    StringAry();
    ~StringAry();
private:
    // reftype Tary of algo.StringAry.ary prohibits copy
    StringAry(const StringAry&){ /*disallow copy constructor */}
    void operator =(const StringAry&){ /*disallow direct assignment */}
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.StringAry.ary.Addary
algo::aryptr<algo::cstring> ary_Addary(algo::StringAry& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.StringAry.ary.Alloc
algo::cstring&       ary_Alloc(algo::StringAry& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.StringAry.ary.AllocAt
algo::cstring&       ary_AllocAt(algo::StringAry& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.StringAry.ary.AllocN
algo::aryptr<algo::cstring> ary_AllocN(algo::StringAry& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.StringAry.ary.EmptyQ
bool                 ary_EmptyQ(algo::StringAry& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.StringAry.ary.Find
algo::cstring*       ary_Find(algo::StringAry& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.StringAry.ary.Getary
algo::aryptr<algo::cstring> ary_Getary(const algo::StringAry& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.StringAry.ary.Last
algo::cstring*       ary_Last(algo::StringAry& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.StringAry.ary.Max
i32                  ary_Max(algo::StringAry& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.StringAry.ary.N
i32                  ary_N(const algo::StringAry& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.StringAry.ary.Remove
void                 ary_Remove(algo::StringAry& parent, u32 i) __attribute__((nothrow));
// func:algo.StringAry.ary.RemoveAll
void                 ary_RemoveAll(algo::StringAry& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.StringAry.ary.RemoveLast
void                 ary_RemoveLast(algo::StringAry& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.StringAry.ary.Reserve
void                 ary_Reserve(algo::StringAry& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.StringAry.ary.AbsReserve
void                 ary_AbsReserve(algo::StringAry& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.StringAry.ary.Setary
void                 ary_Setary(algo::StringAry& parent, algo::StringAry &rhs) __attribute__((nothrow));
// Copy specified array into ary, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.StringAry.ary.Setary2
void                 ary_Setary(algo::StringAry& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.StringAry.ary.qFind
algo::cstring&       ary_qFind(algo::StringAry& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.StringAry.ary.qLast
algo::cstring&       ary_qLast(algo::StringAry& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.StringAry.ary.rowid_Get
u64                  ary_rowid_Get(algo::StringAry& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.StringAry.ary.AllocNVal
algo::aryptr<algo::cstring> ary_AllocNVal(algo::StringAry& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo.StringAry.ary.ReadStrptrMaybe
bool                 ary_ReadStrptrMaybe(algo::StringAry& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.StringAry.ary_curs.Next
void                 StringAry_ary_curs_Next(StringAry_ary_curs &curs) __attribute__((nothrow));
// func:algo.StringAry.ary_curs.Reset
void                 StringAry_ary_curs_Reset(StringAry_ary_curs &curs, algo::StringAry &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.StringAry.ary_curs.ValidQ
bool                 StringAry_ary_curs_ValidQ(StringAry_ary_curs &curs) __attribute__((nothrow));
// item access
// func:algo.StringAry.ary_curs.Access
algo::cstring&       StringAry_ary_curs_Access(StringAry_ary_curs &curs) __attribute__((nothrow));
// Read fields of algo::StringAry from an ascii string.
// The format of the string is the format of the algo::StringAry's only field
// func:algo.StringAry..ReadStrptrMaybe
bool                 StringAry_ReadStrptrMaybe(algo::StringAry &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.StringAry..Init
void                 StringAry_Init(algo::StringAry& parent);
// func:algo.StringAry..Uninit
void                 StringAry_Uninit(algo::StringAry& parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.StringAry.String  printfmt:Raw
// func:algo.StringAry..Print
void                 StringAry_Print(algo::StringAry& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.TermStyle
struct TermStyle { // algo.TermStyle
    u32   value;   //   0
    inline operator algo_TermStyleEnum() const;
    explicit TermStyle(u32                            in_value);
    TermStyle(algo_TermStyleEnum arg);
    TermStyle();
};

// Get value of field as enum type
// func:algo.TermStyle.value.GetEnum
algo_TermStyleEnum   value_GetEnum(const algo::TermStyle& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.TermStyle.value.SetEnum
void                 value_SetEnum(algo::TermStyle& parent, algo_TermStyleEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.TermStyle.value.ToCstr
const char*          value_ToCstr(const algo::TermStyle& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.TermStyle.value.Print
void                 value_Print(const algo::TermStyle& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.TermStyle.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::TermStyle& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.TermStyle.value.SetStrptr
void                 value_SetStrptr(algo::TermStyle& parent, algo::strptr rhs, algo_TermStyleEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.TermStyle.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::TermStyle& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo::TermStyle from an ascii string.
// The format of the string is the format of the algo::TermStyle's only field
// func:algo.TermStyle..ReadStrptrMaybe
bool                 TermStyle_ReadStrptrMaybe(algo::TermStyle &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.TermStyle..Init
void                 TermStyle_Init(algo::TermStyle& parent);
// print string representation of ROW to string STR
// cfmt:algo.TermStyle.String  printfmt:Raw
// func:algo.TermStyle..Print
void                 TermStyle_Print(algo::TermStyle row, algo::cstring& str) __attribute__((nothrow));

// --- algo.TextJust
struct TextJust { // algo.TextJust
    i32   value;   //   0
    inline operator algo_TextJustEnum() const;
    explicit TextJust(i32                            in_value);
    TextJust(algo_TextJustEnum arg);
    TextJust();
};

// Get value of field as enum type
// func:algo.TextJust.value.GetEnum
algo_TextJustEnum    value_GetEnum(const algo::TextJust& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:algo.TextJust.value.SetEnum
void                 value_SetEnum(algo::TextJust& parent, algo_TextJustEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:algo.TextJust.value.ToCstr
const char*          value_ToCstr(const algo::TextJust& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:algo.TextJust.value.Print
void                 value_Print(const algo::TextJust& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:algo.TextJust.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(algo::TextJust& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:algo.TextJust.value.SetStrptr
void                 value_SetStrptr(algo::TextJust& parent, algo::strptr rhs, algo_TextJustEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:algo.TextJust.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::TextJust& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of algo::TextJust from an ascii string.
// The format of the string is the format of the algo::TextJust's only field
// func:algo.TextJust..ReadStrptrMaybe
bool                 TextJust_ReadStrptrMaybe(algo::TextJust &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.TextJust..Init
void                 TextJust_Init(algo::TextJust& parent);
// print string representation of ROW to string STR
// cfmt:algo.TextJust.String  printfmt:Raw
// func:algo.TextJust..Print
void                 TextJust_Print(algo::TextJust row, algo::cstring& str) __attribute__((nothrow));

// --- algo.TstampCache
struct TstampCache { // algo.TstampCache
    algo::UnTime    valid_beg;       //
    algo::UnTime    valid_end;       //
    algo::cstring   cached;          //
    algo::cstring   spec;            //
    i8              sec_location;    //   0
    i8              min_location;    //   0
    i8              nano_location;   //   0
    i8              nano_size;       //   0
    bool            cacheable;       //   false
    bool            gmtQ;            //   false
    TstampCache();
};

// Set all fields to initial values.
// func:algo.TstampCache..Init
void                 TstampCache_Init(algo::TstampCache& parent);

// --- algo.Tuple
struct Tuple { // algo.Tuple: Describes a ssim tuple
    algo::Attr*   attrs_elems;   // pointer to elements
    u32           attrs_n;       // number of elements in array
    u32           attrs_max;     // max. capacity of array before realloc
    algo::Attr    head;          // Type tag
    Tuple();
    ~Tuple();
private:
    // reftype Tary of algo.Tuple.attrs prohibits copy
    Tuple(const Tuple&){ /*disallow copy constructor */}
    void operator =(const Tuple&){ /*disallow direct assignment */}
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.Tuple.attrs.Addary
algo::aryptr<algo::Attr> attrs_Addary(algo::Tuple& parent, algo::aryptr<algo::Attr> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.Tuple.attrs.Alloc
algo::Attr&          attrs_Alloc(algo::Tuple& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.Tuple.attrs.AllocAt
algo::Attr&          attrs_AllocAt(algo::Tuple& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.Tuple.attrs.AllocN
algo::aryptr<algo::Attr> attrs_AllocN(algo::Tuple& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.Tuple.attrs.EmptyQ
bool                 attrs_EmptyQ(algo::Tuple& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.Tuple.attrs.Find
algo::Attr*          attrs_Find(algo::Tuple& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.Tuple.attrs.Getary
algo::aryptr<algo::Attr> attrs_Getary(const algo::Tuple& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.Tuple.attrs.Last
algo::Attr*          attrs_Last(algo::Tuple& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.Tuple.attrs.Max
i32                  attrs_Max(algo::Tuple& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.Tuple.attrs.N
i32                  attrs_N(const algo::Tuple& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.Tuple.attrs.Remove
void                 attrs_Remove(algo::Tuple& parent, u32 i) __attribute__((nothrow));
// func:algo.Tuple.attrs.RemoveAll
void                 attrs_RemoveAll(algo::Tuple& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.Tuple.attrs.RemoveLast
void                 attrs_RemoveLast(algo::Tuple& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.Tuple.attrs.Reserve
void                 attrs_Reserve(algo::Tuple& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.Tuple.attrs.AbsReserve
void                 attrs_AbsReserve(algo::Tuple& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.Tuple.attrs.Setary
void                 attrs_Setary(algo::Tuple& parent, algo::Tuple &rhs) __attribute__((nothrow));
// Copy specified array into attrs, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.Tuple.attrs.Setary2
void                 attrs_Setary(algo::Tuple& parent, const algo::aryptr<algo::Attr> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.Tuple.attrs.qFind
algo::Attr&          attrs_qFind(algo::Tuple& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.Tuple.attrs.qLast
algo::Attr&          attrs_qLast(algo::Tuple& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.Tuple.attrs.rowid_Get
u64                  attrs_rowid_Get(algo::Tuple& parent, algo::Attr &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.Tuple.attrs.AllocNVal
algo::aryptr<algo::Attr> attrs_AllocNVal(algo::Tuple& parent, int n_elems, const algo::Attr& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo.Tuple.attrs.ReadStrptrMaybe
bool                 attrs_ReadStrptrMaybe(algo::Tuple& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.Tuple.attrs_curs.Next
void                 Tuple_attrs_curs_Next(Tuple_attrs_curs &curs) __attribute__((nothrow));
// func:algo.Tuple.attrs_curs.Reset
void                 Tuple_attrs_curs_Reset(Tuple_attrs_curs &curs, algo::Tuple &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.Tuple.attrs_curs.ValidQ
bool                 Tuple_attrs_curs_ValidQ(Tuple_attrs_curs &curs) __attribute__((nothrow));
// item access
// func:algo.Tuple.attrs_curs.Access
algo::Attr&          Tuple_attrs_curs_Access(Tuple_attrs_curs &curs) __attribute__((nothrow));
// Read fields of algo::Tuple from an ascii string.
// func:algo.Tuple..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 Tuple_ReadStrptrMaybe(algo::Tuple &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.Tuple..Init
void                 Tuple_Init(algo::Tuple& parent);
// func:algo.Tuple..Uninit
void                 Tuple_Uninit(algo::Tuple& parent) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.Tuple.String  printfmt:Extern
// func:algo.Tuple..Print
// this function is 'extrn' and implemented by user
void                 Tuple_Print(algo::Tuple& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U16Dec2
#pragma pack(push,1)
struct U16Dec2 { // algo.U16Dec2
    u16   value;   //   0
    inline operator u16() const;
    explicit U16Dec2(u16                            in_value);
    U16Dec2();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U16Dec2.value.qSetDouble
void                 value_qSetDouble(algo::U16Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U16Dec2.value.GetDouble
double               value_GetDouble(const algo::U16Dec2& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100)
// func:algo.U16Dec2.value.GetInt
u16                  value_GetInt(const algo::U16Dec2& parent) __attribute__((nothrow));
// Return constant 100
// func:algo.U16Dec2.value.GetScale
u16                  U16Dec2_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U16Dec2.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U16Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U16Dec2.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U16Dec2& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U16Dec2.value.Print
void                 value_Print(algo::U16Dec2& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U16Dec2..Hash
u32                  U16Dec2_Hash(u32 prev, algo::U16Dec2 rhs) __attribute__((nothrow));
// Read fields of algo::U16Dec2 from an ascii string.
// The format of the string is the format of the algo::U16Dec2's only field
// func:algo.U16Dec2..ReadStrptrMaybe
bool                 U16Dec2_ReadStrptrMaybe(algo::U16Dec2 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U16Dec2..Init
void                 U16Dec2_Init(algo::U16Dec2& parent);
// print string representation of ROW to string STR
// cfmt:algo.U16Dec2.String  printfmt:Raw
// func:algo.U16Dec2..Print
void                 U16Dec2_Print(algo::U16Dec2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U32Dec1
#pragma pack(push,1)
struct U32Dec1 { // algo.U32Dec1
    u32   value;   //   0
    inline operator u32() const;
    explicit U32Dec1(u32                            in_value);
    U32Dec1();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U32Dec1.value.qSetDouble
void                 value_qSetDouble(algo::U32Dec1& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec1.value.GetDouble
double               value_GetDouble(const algo::U32Dec1& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10)
// func:algo.U32Dec1.value.GetInt
u32                  value_GetInt(const algo::U32Dec1& parent) __attribute__((nothrow));
// Return constant 10
// func:algo.U32Dec1.value.GetScale
u32                  U32Dec1_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U32Dec1.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U32Dec1& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec1.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U32Dec1& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U32Dec1.value.Print
void                 value_Print(algo::U32Dec1& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U32Dec1..Hash
u32                  U32Dec1_Hash(u32 prev, algo::U32Dec1 rhs) __attribute__((nothrow));
// Read fields of algo::U32Dec1 from an ascii string.
// The format of the string is the format of the algo::U32Dec1's only field
// func:algo.U32Dec1..ReadStrptrMaybe
bool                 U32Dec1_ReadStrptrMaybe(algo::U32Dec1 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U32Dec1..Init
void                 U32Dec1_Init(algo::U32Dec1& parent);
// print string representation of ROW to string STR
// cfmt:algo.U32Dec1.String  printfmt:Raw
// func:algo.U32Dec1..Print
void                 U32Dec1_Print(algo::U32Dec1 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U32Dec2
struct U32Dec2 { // algo.U32Dec2
    u32   value;   //   0
    inline operator u32() const;
    explicit U32Dec2(u32                            in_value);
    U32Dec2();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U32Dec2.value.qSetDouble
void                 value_qSetDouble(algo::U32Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec2.value.GetDouble
double               value_GetDouble(const algo::U32Dec2& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100)
// func:algo.U32Dec2.value.GetInt
u32                  value_GetInt(const algo::U32Dec2& parent) __attribute__((nothrow));
// Return constant 100
// func:algo.U32Dec2.value.GetScale
u32                  U32Dec2_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U32Dec2.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U32Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec2.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U32Dec2& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U32Dec2.value.Print
void                 value_Print(algo::U32Dec2& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U32Dec2..Hash
u32                  U32Dec2_Hash(u32 prev, algo::U32Dec2 rhs) __attribute__((nothrow));
// Read fields of algo::U32Dec2 from an ascii string.
// The format of the string is the format of the algo::U32Dec2's only field
// func:algo.U32Dec2..ReadStrptrMaybe
bool                 U32Dec2_ReadStrptrMaybe(algo::U32Dec2 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U32Dec2..Init
void                 U32Dec2_Init(algo::U32Dec2& parent);
// print string representation of ROW to string STR
// cfmt:algo.U32Dec2.String  printfmt:Raw
// func:algo.U32Dec2..Print
void                 U32Dec2_Print(algo::U32Dec2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U32Dec3
struct U32Dec3 { // algo.U32Dec3
    u32   value;   //   0
    inline operator u32() const;
    explicit U32Dec3(u32                            in_value);
    U32Dec3();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U32Dec3.value.qSetDouble
void                 value_qSetDouble(algo::U32Dec3& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec3.value.GetDouble
double               value_GetDouble(const algo::U32Dec3& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000)
// func:algo.U32Dec3.value.GetInt
u32                  value_GetInt(const algo::U32Dec3& parent) __attribute__((nothrow));
// Return constant 1000
// func:algo.U32Dec3.value.GetScale
u32                  U32Dec3_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U32Dec3.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U32Dec3& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec3.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U32Dec3& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U32Dec3.value.Print
void                 value_Print(algo::U32Dec3& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U32Dec3..Hash
u32                  U32Dec3_Hash(u32 prev, algo::U32Dec3 rhs) __attribute__((nothrow));
// Read fields of algo::U32Dec3 from an ascii string.
// The format of the string is the format of the algo::U32Dec3's only field
// func:algo.U32Dec3..ReadStrptrMaybe
bool                 U32Dec3_ReadStrptrMaybe(algo::U32Dec3 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U32Dec3..Init
void                 U32Dec3_Init(algo::U32Dec3& parent);
// print string representation of ROW to string STR
// cfmt:algo.U32Dec3.String  printfmt:Raw
// func:algo.U32Dec3..Print
void                 U32Dec3_Print(algo::U32Dec3 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U32Dec4
struct U32Dec4 { // algo.U32Dec4
    u32   value;   //   0
    inline operator u32() const;
    explicit U32Dec4(u32                            in_value);
    U32Dec4();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U32Dec4.value.qSetDouble
void                 value_qSetDouble(algo::U32Dec4& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec4.value.GetDouble
double               value_GetDouble(const algo::U32Dec4& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000)
// func:algo.U32Dec4.value.GetInt
u32                  value_GetInt(const algo::U32Dec4& parent) __attribute__((nothrow));
// Return constant 10000
// func:algo.U32Dec4.value.GetScale
u32                  U32Dec4_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U32Dec4.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U32Dec4& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec4.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U32Dec4& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U32Dec4.value.Print
void                 value_Print(algo::U32Dec4& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U32Dec4..Hash
u32                  U32Dec4_Hash(u32 prev, algo::U32Dec4 rhs) __attribute__((nothrow));
// Read fields of algo::U32Dec4 from an ascii string.
// The format of the string is the format of the algo::U32Dec4's only field
// func:algo.U32Dec4..ReadStrptrMaybe
bool                 U32Dec4_ReadStrptrMaybe(algo::U32Dec4 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U32Dec4..Init
void                 U32Dec4_Init(algo::U32Dec4& parent);
// print string representation of ROW to string STR
// cfmt:algo.U32Dec4.String  printfmt:Raw
// func:algo.U32Dec4..Print
void                 U32Dec4_Print(algo::U32Dec4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U32Dec5
struct U32Dec5 { // algo.U32Dec5
    u32   value;   //   0
    inline operator u32() const;
    explicit U32Dec5(u32                            in_value);
    U32Dec5();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U32Dec5.value.qSetDouble
void                 value_qSetDouble(algo::U32Dec5& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec5.value.GetDouble
double               value_GetDouble(const algo::U32Dec5& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000)
// func:algo.U32Dec5.value.GetInt
u32                  value_GetInt(const algo::U32Dec5& parent) __attribute__((nothrow));
// Return constant 100000
// func:algo.U32Dec5.value.GetScale
u32                  U32Dec5_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U32Dec5.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U32Dec5& parent, double val) __attribute__((nothrow));
// func:algo.U32Dec5.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U32Dec5& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U32Dec5.value.Print
void                 value_Print(algo::U32Dec5& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U32Dec5..Hash
u32                  U32Dec5_Hash(u32 prev, algo::U32Dec5 rhs) __attribute__((nothrow));
// Read fields of algo::U32Dec5 from an ascii string.
// The format of the string is the format of the algo::U32Dec5's only field
// func:algo.U32Dec5..ReadStrptrMaybe
bool                 U32Dec5_ReadStrptrMaybe(algo::U32Dec5 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U32Dec5..Init
void                 U32Dec5_Init(algo::U32Dec5& parent);
// print string representation of ROW to string STR
// cfmt:algo.U32Dec5.String  printfmt:Raw
// func:algo.U32Dec5..Print
void                 U32Dec5_Print(algo::U32Dec5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Ary
struct U64Ary { // algo.U64Ary
    u64*   ary_elems;   // pointer to elements
    u32    ary_n;       // number of elements in array
    u32    ary_max;     // max. capacity of array before realloc
    U64Ary();
    ~U64Ary();
private:
    // reftype Tary of algo.U64Ary.ary prohibits copy
    U64Ary(const U64Ary&){ /*disallow copy constructor */}
    void operator =(const U64Ary&){ /*disallow direct assignment */}
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:algo.U64Ary.ary.Addary
algo::aryptr<u64>    ary_Addary(algo::U64Ary& parent, algo::aryptr<u64> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:algo.U64Ary.ary.Alloc
u64&                 ary_Alloc(algo::U64Ary& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:algo.U64Ary.ary.AllocAt
u64&                 ary_AllocAt(algo::U64Ary& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.U64Ary.ary.AllocN
algo::aryptr<u64>    ary_AllocN(algo::U64Ary& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:algo.U64Ary.ary.EmptyQ
bool                 ary_EmptyQ(algo::U64Ary& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:algo.U64Ary.ary.Find
u64*                 ary_Find(algo::U64Ary& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:algo.U64Ary.ary.Getary
algo::aryptr<u64>    ary_Getary(const algo::U64Ary& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:algo.U64Ary.ary.Last
u64*                 ary_Last(algo::U64Ary& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:algo.U64Ary.ary.Max
i32                  ary_Max(algo::U64Ary& parent) __attribute__((nothrow));
// Return number of items in the array
// func:algo.U64Ary.ary.N
i32                  ary_N(const algo::U64Ary& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:algo.U64Ary.ary.Remove
void                 ary_Remove(algo::U64Ary& parent, u32 i) __attribute__((nothrow));
// func:algo.U64Ary.ary.RemoveAll
void                 ary_RemoveAll(algo::U64Ary& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:algo.U64Ary.ary.RemoveLast
void                 ary_RemoveLast(algo::U64Ary& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:algo.U64Ary.ary.Reserve
void                 ary_Reserve(algo::U64Ary& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:algo.U64Ary.ary.AbsReserve
void                 ary_AbsReserve(algo::U64Ary& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:algo.U64Ary.ary.Setary
void                 ary_Setary(algo::U64Ary& parent, algo::U64Ary &rhs) __attribute__((nothrow));
// Copy specified array into ary, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:algo.U64Ary.ary.Setary2
void                 ary_Setary(algo::U64Ary& parent, const algo::aryptr<u64> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:algo.U64Ary.ary.qFind
u64&                 ary_qFind(algo::U64Ary& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:algo.U64Ary.ary.qLast
u64&                 ary_qLast(algo::U64Ary& parent) __attribute__((nothrow));
// Return row id of specified element
// func:algo.U64Ary.ary.rowid_Get
u64                  ary_rowid_Get(algo::U64Ary& parent, u64 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:algo.U64Ary.ary.AllocNVal
algo::aryptr<u64>    ary_AllocNVal(algo::U64Ary& parent, int n_elems, const u64& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:algo.U64Ary.ary.ReadStrptrMaybe
bool                 ary_ReadStrptrMaybe(algo::U64Ary& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:algo.U64Ary.ary_curs.Next
void                 U64Ary_ary_curs_Next(U64Ary_ary_curs &curs) __attribute__((nothrow));
// func:algo.U64Ary.ary_curs.Reset
void                 U64Ary_ary_curs_Reset(U64Ary_ary_curs &curs, algo::U64Ary &parent) __attribute__((nothrow));
// cursor points to valid item
// func:algo.U64Ary.ary_curs.ValidQ
bool                 U64Ary_ary_curs_ValidQ(U64Ary_ary_curs &curs) __attribute__((nothrow));
// item access
// func:algo.U64Ary.ary_curs.Access
u64&                 U64Ary_ary_curs_Access(U64Ary_ary_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Ary..Init
void                 U64Ary_Init(algo::U64Ary& parent);
// func:algo.U64Ary..Uninit
void                 U64Ary_Uninit(algo::U64Ary& parent) __attribute__((nothrow));

// --- algo.U64Dec10
struct U64Dec10 { // algo.U64Dec10: unsigned u64, scale 1e10
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec10(u64                            in_value);
    U64Dec10();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec10.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec10& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec10.value.GetDouble
double               value_GetDouble(const algo::U64Dec10& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000000000)
// func:algo.U64Dec10.value.GetInt
u64                  value_GetInt(const algo::U64Dec10& parent) __attribute__((nothrow));
// Return constant 10000000000
// func:algo.U64Dec10.value.GetScale
u64                  U64Dec10_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec10.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec10& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec10.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec10& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec10.value.Print
void                 value_Print(algo::U64Dec10& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec10..Hash
u32                  U64Dec10_Hash(u32 prev, algo::U64Dec10 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec10 from an ascii string.
// The format of the string is the format of the algo::U64Dec10's only field
// func:algo.U64Dec10..ReadStrptrMaybe
bool                 U64Dec10_ReadStrptrMaybe(algo::U64Dec10 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec10..Init
void                 U64Dec10_Init(algo::U64Dec10& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec10.String  printfmt:Raw
// func:algo.U64Dec10..Print
void                 U64Dec10_Print(algo::U64Dec10 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec2
#pragma pack(push,1)
struct U64Dec2 { // algo.U64Dec2
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec2(u64                            in_value);
    U64Dec2();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec2.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec2.value.GetDouble
double               value_GetDouble(const algo::U64Dec2& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100)
// func:algo.U64Dec2.value.GetInt
u64                  value_GetInt(const algo::U64Dec2& parent) __attribute__((nothrow));
// Return constant 100
// func:algo.U64Dec2.value.GetScale
u64                  U64Dec2_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec2.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec2& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec2.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec2& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec2.value.Print
void                 value_Print(algo::U64Dec2& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec2..Hash
u32                  U64Dec2_Hash(u32 prev, algo::U64Dec2 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec2 from an ascii string.
// The format of the string is the format of the algo::U64Dec2's only field
// func:algo.U64Dec2..ReadStrptrMaybe
bool                 U64Dec2_ReadStrptrMaybe(algo::U64Dec2 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec2..Init
void                 U64Dec2_Init(algo::U64Dec2& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec2.String  printfmt:Raw
// func:algo.U64Dec2..Print
void                 U64Dec2_Print(algo::U64Dec2 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec4
#pragma pack(push,1)
struct U64Dec4 { // algo.U64Dec4
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec4(u64                            in_value);
    U64Dec4();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec4.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec4& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec4.value.GetDouble
double               value_GetDouble(const algo::U64Dec4& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000)
// func:algo.U64Dec4.value.GetInt
u64                  value_GetInt(const algo::U64Dec4& parent) __attribute__((nothrow));
// Return constant 10000
// func:algo.U64Dec4.value.GetScale
u64                  U64Dec4_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec4.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec4& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec4.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec4& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec4.value.Print
void                 value_Print(algo::U64Dec4& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec4..Hash
u32                  U64Dec4_Hash(u32 prev, algo::U64Dec4 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec4 from an ascii string.
// The format of the string is the format of the algo::U64Dec4's only field
// func:algo.U64Dec4..ReadStrptrMaybe
bool                 U64Dec4_ReadStrptrMaybe(algo::U64Dec4 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec4..Init
void                 U64Dec4_Init(algo::U64Dec4& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec4.String  printfmt:Raw
// func:algo.U64Dec4..Print
void                 U64Dec4_Print(algo::U64Dec4 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec5
struct U64Dec5 { // algo.U64Dec5
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec5(u64                            in_value);
    U64Dec5();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec5.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec5& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec5.value.GetDouble
double               value_GetDouble(const algo::U64Dec5& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000)
// func:algo.U64Dec5.value.GetInt
u64                  value_GetInt(const algo::U64Dec5& parent) __attribute__((nothrow));
// Return constant 100000
// func:algo.U64Dec5.value.GetScale
u64                  U64Dec5_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec5.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec5& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec5.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec5& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec5.value.Print
void                 value_Print(algo::U64Dec5& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec5..Hash
u32                  U64Dec5_Hash(u32 prev, algo::U64Dec5 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec5 from an ascii string.
// The format of the string is the format of the algo::U64Dec5's only field
// func:algo.U64Dec5..ReadStrptrMaybe
bool                 U64Dec5_ReadStrptrMaybe(algo::U64Dec5 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec5..Init
void                 U64Dec5_Init(algo::U64Dec5& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec5.String  printfmt:Raw
// func:algo.U64Dec5..Print
void                 U64Dec5_Print(algo::U64Dec5 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec6
struct U64Dec6 { // algo.U64Dec6
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec6(u64                            in_value);
    U64Dec6();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec6.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec6& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec6.value.GetDouble
double               value_GetDouble(const algo::U64Dec6& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000000)
// func:algo.U64Dec6.value.GetInt
u64                  value_GetInt(const algo::U64Dec6& parent) __attribute__((nothrow));
// Return constant 1000000
// func:algo.U64Dec6.value.GetScale
u64                  U64Dec6_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec6.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec6& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec6.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec6& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec6.value.Print
void                 value_Print(algo::U64Dec6& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec6..Hash
u32                  U64Dec6_Hash(u32 prev, algo::U64Dec6 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec6 from an ascii string.
// The format of the string is the format of the algo::U64Dec6's only field
// func:algo.U64Dec6..ReadStrptrMaybe
bool                 U64Dec6_ReadStrptrMaybe(algo::U64Dec6 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec6..Init
void                 U64Dec6_Init(algo::U64Dec6& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec6.String  printfmt:Raw
// func:algo.U64Dec6..Print
void                 U64Dec6_Print(algo::U64Dec6 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec7
struct U64Dec7 { // algo.U64Dec7: unsigned u64, scale 1e7
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec7(u64                            in_value);
    U64Dec7();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec7.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec7& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec7.value.GetDouble
double               value_GetDouble(const algo::U64Dec7& parent) __attribute__((nothrow));
// Return integer portion (divide number by 10000000)
// func:algo.U64Dec7.value.GetInt
u64                  value_GetInt(const algo::U64Dec7& parent) __attribute__((nothrow));
// Return constant 10000000
// func:algo.U64Dec7.value.GetScale
u64                  U64Dec7_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec7.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec7& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec7.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec7& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec7.value.Print
void                 value_Print(algo::U64Dec7& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec7..Hash
u32                  U64Dec7_Hash(u32 prev, algo::U64Dec7 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec7 from an ascii string.
// The format of the string is the format of the algo::U64Dec7's only field
// func:algo.U64Dec7..ReadStrptrMaybe
bool                 U64Dec7_ReadStrptrMaybe(algo::U64Dec7 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec7..Init
void                 U64Dec7_Init(algo::U64Dec7& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec7.String  printfmt:Raw
// func:algo.U64Dec7..Print
void                 U64Dec7_Print(algo::U64Dec7 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec8
#pragma pack(push,1)
struct U64Dec8 { // algo.U64Dec8: unsigned u64, scale 1e8
    u64   value;   //   0
    explicit U64Dec8(u64                            in_value);
    U64Dec8();
};
#pragma pack(pop)

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec8.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec8& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec8.value.GetDouble
double               value_GetDouble(const algo::U64Dec8& parent) __attribute__((nothrow));
// Return integer portion (divide number by 100000000)
// func:algo.U64Dec8.value.GetInt
u64                  value_GetInt(const algo::U64Dec8& parent) __attribute__((nothrow));
// Return constant 100000000
// func:algo.U64Dec8.value.GetScale
u64                  U64Dec8_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec8.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec8& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec8.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec8& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec8.value.Print
void                 value_Print(algo::U64Dec8& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec8..Hash
u32                  U64Dec8_Hash(u32 prev, algo::U64Dec8 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec8 from an ascii string.
// The format of the string is the format of the algo::U64Dec8's only field
// func:algo.U64Dec8..ReadStrptrMaybe
bool                 U64Dec8_ReadStrptrMaybe(algo::U64Dec8 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec8..Init
void                 U64Dec8_Init(algo::U64Dec8& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec8.String  printfmt:Raw
// func:algo.U64Dec8..Print
void                 U64Dec8_Print(algo::U64Dec8 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.U64Dec9
struct U64Dec9 { // algo.U64Dec9: unsigned u64, scale 1e9
    u64   value;   //   0
    inline operator u64() const;
    explicit U64Dec9(u64                            in_value);
    U64Dec9();
};

// Set value of field value.
// The value is rounded to the nearest integer.
// This ensures that truncation of a near-integer value does not occur.
// Example: 1.3 cannot be represented exactly as a double, the actual
// stored value will be 1.29999999. when we apply C truncation,
// we want to end up with 1.3, not 1.2.
// func:algo.U64Dec9.value.qSetDouble
void                 value_qSetDouble(algo::U64Dec9& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec9.value.GetDouble
double               value_GetDouble(const algo::U64Dec9& parent) __attribute__((nothrow));
// Return integer portion (divide number by 1000000000)
// func:algo.U64Dec9.value.GetInt
u64                  value_GetInt(const algo::U64Dec9& parent) __attribute__((nothrow));
// Return constant 1000000000
// func:algo.U64Dec9.value.GetScale
u64                  U64Dec9_GetScale() __attribute__((nothrow));
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
// func:algo.U64Dec9.value.SetDoubleMaybe
bool                 value_SetDoubleMaybe(algo::U64Dec9& parent, double val) __attribute__((nothrow));
// func:algo.U64Dec9.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(algo::U64Dec9& parent, algo::strptr in) __attribute__((nothrow));
// func:algo.U64Dec9.value.Print
void                 value_Print(algo::U64Dec9& parent, cstring &outstr) __attribute__((nothrow));

// func:algo.U64Dec9..Hash
u32                  U64Dec9_Hash(u32 prev, algo::U64Dec9 rhs) __attribute__((nothrow));
// Read fields of algo::U64Dec9 from an ascii string.
// The format of the string is the format of the algo::U64Dec9's only field
// func:algo.U64Dec9..ReadStrptrMaybe
bool                 U64Dec9_ReadStrptrMaybe(algo::U64Dec9 &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.U64Dec9..Init
void                 U64Dec9_Init(algo::U64Dec9& parent);
// print string representation of ROW to string STR
// cfmt:algo.U64Dec9.String  printfmt:Raw
// func:algo.U64Dec9..Print
void                 U64Dec9_Print(algo::U64Dec9 row, algo::cstring& str) __attribute__((nothrow));

// --- algo.URL
struct URL { // algo.URL
    algo::cstring   protocol;           //
    algo::cstring   username;           //
    algo::cstring   password;           // password
    algo::cstring   server;             // www.example.com or A.B.C.D
    algo::cstring   dir;                // /subdir/index.html
    i32             port;               //   -1  80
    u32             source_addr_host;   //   0  source address in host format (valid for multicast addresses only
    algo::cstring   host;               // 0.0.0.0, or A.B.C.D, or 192.168.1.* or eth2
    explicit URL(const algo::strptr&            in_protocol
        ,const algo::strptr&            in_username
        ,const algo::strptr&            in_password
        ,const algo::strptr&            in_server
        ,const algo::strptr&            in_dir
        ,i32                            in_port
        ,u32                            in_source_addr_host
        ,const algo::strptr&            in_host);
    URL();
};

// Read fields of algo::URL from an ascii string.
// func:algo.URL..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 URL_ReadStrptrMaybe(algo::URL &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.URL..Init
void                 URL_Init(algo::URL& parent);
// print string representation of ROW to string STR
// cfmt:algo.URL.String  printfmt:Extern
// func:algo.URL..Print
// this function is 'extrn' and implemented by user
void                 URL_Print(algo::URL& row, algo::cstring& str) __attribute__((nothrow));

// --- algo.UnDiff
#pragma pack(push,1)
struct UnDiff { // algo.UnDiff: Unix diff * 1e9 + nanoseconds
    i64   value;   //   0
    explicit UnDiff(i64                            in_value);
    bool operator ==(const algo::UnDiff &rhs) const;
    bool operator !=(const algo::UnDiff &rhs) const;
    bool operator <(const algo::UnDiff &rhs) const;
    bool operator >(const algo::UnDiff &rhs) const;
    bool operator <=(const algo::UnDiff &rhs) const;
    bool operator >=(const algo::UnDiff &rhs) const;
    UnDiff();
};
#pragma pack(pop)

// func:algo.UnDiff..Hash
u32                  UnDiff_Hash(u32 prev, algo::UnDiff rhs) __attribute__((nothrow));
// Read fields of algo::UnDiff from an ascii string.
// func:algo.UnDiff..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 UnDiff_ReadStrptrMaybe(algo::UnDiff &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.UnDiff..Lt
bool                 UnDiff_Lt(algo::UnDiff lhs, algo::UnDiff rhs) __attribute__((nothrow));
// func:algo.UnDiff..Cmp
i32                  UnDiff_Cmp(algo::UnDiff lhs, algo::UnDiff rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.UnDiff..Init
void                 UnDiff_Init(algo::UnDiff& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.UnDiff..UpdateMax
bool                 UnDiff_UpdateMax(algo::UnDiff &lhs, algo::UnDiff rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.UnDiff..Min
algo::UnDiff         UnDiff_Min(algo::UnDiff lhs, algo::UnDiff rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.UnDiff..UpdateMin
bool                 UnDiff_UpdateMin(algo::UnDiff &lhs, algo::UnDiff rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.UnDiff..Max
algo::UnDiff         UnDiff_Max(algo::UnDiff lhs, algo::UnDiff rhs) __attribute__((nothrow));
// func:algo.UnDiff..Eq
bool                 UnDiff_Eq(algo::UnDiff lhs, algo::UnDiff rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.UnDiff..Update
bool                 UnDiff_Update(algo::UnDiff &lhs, algo::UnDiff rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.UnDiff.String  printfmt:Extern
// func:algo.UnDiff..Print
// this function is 'extrn' and implemented by user
void                 UnDiff_Print(algo::UnDiff row, algo::cstring& str) __attribute__((nothrow));

// --- algo.UnixDiff
struct UnixDiff { // algo.UnixDiff: Difference between two UnixTimes; units: seconds
    i64   value;   //   0
    explicit UnixDiff(i64                            in_value);
    bool operator ==(const algo::UnixDiff &rhs) const;
    bool operator !=(const algo::UnixDiff &rhs) const;
    bool operator <(const algo::UnixDiff &rhs) const;
    bool operator >(const algo::UnixDiff &rhs) const;
    bool operator <=(const algo::UnixDiff &rhs) const;
    bool operator >=(const algo::UnixDiff &rhs) const;
    UnixDiff();
};

// func:algo.UnixDiff..Hash
u32                  UnixDiff_Hash(u32 prev, algo::UnixDiff rhs) __attribute__((nothrow));
// Read fields of algo::UnixDiff from an ascii string.
// func:algo.UnixDiff..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 UnixDiff_ReadStrptrMaybe(algo::UnixDiff &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.UnixDiff..Lt
bool                 UnixDiff_Lt(algo::UnixDiff lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// func:algo.UnixDiff..Cmp
i32                  UnixDiff_Cmp(algo::UnixDiff lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.UnixDiff..Init
void                 UnixDiff_Init(algo::UnixDiff& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.UnixDiff..UpdateMax
bool                 UnixDiff_UpdateMax(algo::UnixDiff &lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.UnixDiff..Min
algo::UnixDiff       UnixDiff_Min(algo::UnixDiff lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.UnixDiff..UpdateMin
bool                 UnixDiff_UpdateMin(algo::UnixDiff &lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.UnixDiff..Max
algo::UnixDiff       UnixDiff_Max(algo::UnixDiff lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// func:algo.UnixDiff..Eq
bool                 UnixDiff_Eq(algo::UnixDiff lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.UnixDiff..Update
bool                 UnixDiff_Update(algo::UnixDiff &lhs, algo::UnixDiff rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.UnixDiff.String  printfmt:Extern
// func:algo.UnixDiff..Print
// this function is 'extrn' and implemented by user
void                 UnixDiff_Print(algo::UnixDiff row, algo::cstring& str) __attribute__((nothrow));

// --- algo.UnixTime
#pragma pack(push,1)
struct UnixTime { // algo.UnixTime: Unix epoch time, in seconds
    i64   value;   //   0
    explicit UnixTime(i64                            in_value);
    bool operator ==(const algo::UnixTime &rhs) const;
    bool operator !=(const algo::UnixTime &rhs) const;
    bool operator <(const algo::UnixTime &rhs) const;
    bool operator >(const algo::UnixTime &rhs) const;
    bool operator <=(const algo::UnixTime &rhs) const;
    bool operator >=(const algo::UnixTime &rhs) const;
    UnixTime();
};
#pragma pack(pop)

// func:algo.UnixTime..Hash
u32                  UnixTime_Hash(u32 prev, algo::UnixTime rhs) __attribute__((nothrow));
// Read fields of algo::UnixTime from an ascii string.
// func:algo.UnixTime..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 UnixTime_ReadStrptrMaybe(algo::UnixTime &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.UnixTime..Lt
bool                 UnixTime_Lt(algo::UnixTime lhs, algo::UnixTime rhs) __attribute__((nothrow));
// func:algo.UnixTime..Cmp
i32                  UnixTime_Cmp(algo::UnixTime lhs, algo::UnixTime rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.UnixTime..Init
void                 UnixTime_Init(algo::UnixTime& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.UnixTime..UpdateMax
bool                 UnixTime_UpdateMax(algo::UnixTime &lhs, algo::UnixTime rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.UnixTime..Min
algo::UnixTime       UnixTime_Min(algo::UnixTime lhs, algo::UnixTime rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.UnixTime..UpdateMin
bool                 UnixTime_UpdateMin(algo::UnixTime &lhs, algo::UnixTime rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.UnixTime..Max
algo::UnixTime       UnixTime_Max(algo::UnixTime lhs, algo::UnixTime rhs) __attribute__((nothrow));
// func:algo.UnixTime..Eq
bool                 UnixTime_Eq(algo::UnixTime lhs, algo::UnixTime rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.UnixTime..Update
bool                 UnixTime_Update(algo::UnixTime &lhs, algo::UnixTime rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.UnixTime.String  printfmt:Extern
// func:algo.UnixTime..Print
// this function is 'extrn' and implemented by user
void                 UnixTime_Print(algo::UnixTime row, algo::cstring& str) __attribute__((nothrow));

// --- algo.WDiff
#pragma pack(push,1)
struct WDiff { // algo.WDiff: Difference between two WinTimes
    i64   value;   //   0
    explicit WDiff(i64                            in_value);
    bool operator ==(const algo::WDiff &rhs) const;
    bool operator !=(const algo::WDiff &rhs) const;
    bool operator <(const algo::WDiff &rhs) const;
    bool operator >(const algo::WDiff &rhs) const;
    bool operator <=(const algo::WDiff &rhs) const;
    bool operator >=(const algo::WDiff &rhs) const;
    WDiff();
};
#pragma pack(pop)

// func:algo.WDiff..Hash
u32                  WDiff_Hash(u32 prev, algo::WDiff rhs) __attribute__((nothrow));
// Read fields of algo::WDiff from an ascii string.
// func:algo.WDiff..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 WDiff_ReadStrptrMaybe(algo::WDiff &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.WDiff..Lt
bool                 WDiff_Lt(algo::WDiff lhs, algo::WDiff rhs) __attribute__((nothrow));
// func:algo.WDiff..Cmp
i32                  WDiff_Cmp(algo::WDiff lhs, algo::WDiff rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.WDiff..Init
void                 WDiff_Init(algo::WDiff& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.WDiff..UpdateMax
bool                 WDiff_UpdateMax(algo::WDiff &lhs, algo::WDiff rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.WDiff..Min
algo::WDiff          WDiff_Min(algo::WDiff lhs, algo::WDiff rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.WDiff..UpdateMin
bool                 WDiff_UpdateMin(algo::WDiff &lhs, algo::WDiff rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.WDiff..Max
algo::WDiff          WDiff_Max(algo::WDiff lhs, algo::WDiff rhs) __attribute__((nothrow));
// func:algo.WDiff..Eq
bool                 WDiff_Eq(algo::WDiff lhs, algo::WDiff rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.WDiff..Update
bool                 WDiff_Update(algo::WDiff &lhs, algo::WDiff rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.WDiff.String  printfmt:Extern
// func:algo.WDiff..Print
// this function is 'extrn' and implemented by user
void                 WDiff_Print(algo::WDiff row, algo::cstring& str) __attribute__((nothrow));

// --- algo.WTime
#pragma pack(push,1)
struct WTime { // algo.WTime: Units: 100nsec; Number of units since Jan 1, 1600
    i64   value;   //   0
    explicit WTime(i64                            in_value);
    bool operator ==(const algo::WTime &rhs) const;
    bool operator !=(const algo::WTime &rhs) const;
    bool operator <(const algo::WTime &rhs) const;
    bool operator >(const algo::WTime &rhs) const;
    bool operator <=(const algo::WTime &rhs) const;
    bool operator >=(const algo::WTime &rhs) const;
    WTime();
};
#pragma pack(pop)

// func:algo.WTime..Hash
u32                  WTime_Hash(u32 prev, algo::WTime rhs) __attribute__((nothrow));
// Read fields of algo::WTime from an ascii string.
// func:algo.WTime..ReadStrptrMaybe
// this function is 'extrn' and implemented by user
bool                 WTime_ReadStrptrMaybe(algo::WTime &parent, algo::strptr in_str) __attribute__((nothrow));
// func:algo.WTime..Lt
bool                 WTime_Lt(algo::WTime lhs, algo::WTime rhs) __attribute__((nothrow));
// func:algo.WTime..Cmp
i32                  WTime_Cmp(algo::WTime lhs, algo::WTime rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.WTime..Init
void                 WTime_Init(algo::WTime& parent);
// Attempt to make LHS bigger. Return true if it was changed
// func:algo.WTime..UpdateMax
bool                 WTime_UpdateMax(algo::WTime &lhs, algo::WTime rhs) __attribute__((nothrow));
// Return the lesser of two values
// func:algo.WTime..Min
algo::WTime          WTime_Min(algo::WTime lhs, algo::WTime rhs) __attribute__((nothrow));
// Attempt to make LHS smaller. Return true if it was changed
// func:algo.WTime..UpdateMin
bool                 WTime_UpdateMin(algo::WTime &lhs, algo::WTime rhs) __attribute__((nothrow));
// Return the greater of two values
// func:algo.WTime..Max
algo::WTime          WTime_Max(algo::WTime lhs, algo::WTime rhs) __attribute__((nothrow));
// func:algo.WTime..Eq
bool                 WTime_Eq(algo::WTime lhs, algo::WTime rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.WTime..Update
bool                 WTime_Update(algo::WTime &lhs, algo::WTime rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.WTime.String  printfmt:Extern
// func:algo.WTime..Print
// this function is 'extrn' and implemented by user
void                 WTime_Print(algo::WTime row, algo::cstring& str) __attribute__((nothrow));

// --- algo.i32_Range
struct i32_Range { // algo.i32_Range
    i32   beg;   //   0
    i32   end;   //   0
    explicit i32_Range(i32                            in_beg
        ,i32                            in_end);
    bool operator ==(const algo::i32_Range &rhs) const;
    bool operator !=(const algo::i32_Range &rhs) const;
    bool operator <(const algo::i32_Range &rhs) const;
    bool operator >(const algo::i32_Range &rhs) const;
    bool operator <=(const algo::i32_Range &rhs) const;
    bool operator >=(const algo::i32_Range &rhs) const;
    i32_Range();
};

// func:algo.i32_Range..Hash
u32                  i32_Range_Hash(u32 prev, const algo::i32_Range & rhs) __attribute__((nothrow));
// func:algo.i32_Range..Lt
bool                 i32_Range_Lt(algo::i32_Range& lhs, algo::i32_Range& rhs) __attribute__((nothrow));
// func:algo.i32_Range..Cmp
i32                  i32_Range_Cmp(algo::i32_Range& lhs, algo::i32_Range& rhs) __attribute__((nothrow));
// Set all fields to initial values.
// func:algo.i32_Range..Init
void                 i32_Range_Init(algo::i32_Range& parent);
// func:algo.i32_Range..Eq
bool                 i32_Range_Eq(algo::i32_Range& lhs, algo::i32_Range& rhs) __attribute__((nothrow));
// Set value. Return true if new value is different from old value.
// func:algo.i32_Range..Update
bool                 i32_Range_Update(algo::i32_Range &lhs, algo::i32_Range& rhs) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:algo.i32_Range.String  printfmt:Extern
// func:algo.i32_Range..Print
// this function is 'extrn' and implemented by user
void                 i32_Range_Print(algo::i32_Range& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace algo { // gen:ns_curstext

struct cstring_ch_curs {// cursor
    typedef char ChildType;
    char* elems;
    int n_elems;
    int index;
    cstring_ch_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ByteAry_ary_curs {// cursor
    typedef u8 ChildType;
    u8* elems;
    int n_elems;
    int index;
    ByteAry_ary_curs() { elems=NULL; n_elems=0; index=0; }
};


struct Charset_ch_bitcurs {// cursor
    typedef int& ChildType;
    u64* elems;
    int n_elems;
    int bit;
    Charset_ch_bitcurs() : elems(0), n_elems(0), bit(0) {}
};


struct Charset_ch_curs {// cursor
    typedef u64 ChildType;
    int index;
    algo::Charset *parent;
    Charset_ch_curs() { parent=NULL; index=0; }
};


struct LineBuf_buf_curs {// cursor
    typedef char ChildType;
    char* elems;
    int n_elems;
    int index;
    LineBuf_buf_curs() { elems=NULL; n_elems=0; index=0; }
};


struct Md5Digest_value_curs {// cursor
    typedef u8 ChildType;
    int index;
    algo::Md5Digest *parent;
    Md5Digest_value_curs() { parent=NULL; index=0; }
};


struct Sha1sig_sha1sig_curs {// cursor
    typedef u8 ChildType;
    int index;
    algo::Sha1sig *parent;
    Sha1sig_sha1sig_curs() { parent=NULL; index=0; }
};


struct StringAry_ary_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    StringAry_ary_curs() { elems=NULL; n_elems=0; index=0; }
};


struct Tuple_attrs_curs {// cursor
    typedef algo::Attr ChildType;
    algo::Attr* elems;
    int n_elems;
    int index;
    Tuple_attrs_curs() { elems=NULL; n_elems=0; index=0; }
};


struct U64Ary_ary_curs {// cursor
    typedef u64 ChildType;
    u64* elems;
    int n_elems;
    int index;
    U64Ary_ary_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace algo { // gen:ns_func
// Test string conversion
// func:algo...ForAllStrings
void                 ForAllStrings(void (*fcn)(algo::StringDesc&) );
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const algo::Attr &row);// cfmt:algo.Attr.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Bool &row);// cfmt:algo.Bool.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Comment &row);// cfmt:algo.Comment.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::CppExpr &row);// cfmt:algo.CppExpr.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::UnTime &row);// cfmt:algo.UnTime.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Decimal &row);// cfmt:algo.Decimal.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::DryrunQ &row);// cfmt:algo.DryrunQ.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::EchoQ &row);// cfmt:algo.EchoQ.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Errcode &row);// cfmt:algo.Errcode.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::FailokQ &row);// cfmt:algo.FailokQ.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::FieldId &row);// cfmt:algo.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Fildes &row);// cfmt:algo.Fildes.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::FileFlags &row);// cfmt:algo.FileFlags.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I32Dec1 &row);// cfmt:algo.I32Dec1.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I32Dec2 &row);// cfmt:algo.I32Dec2.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I32Dec3 &row);// cfmt:algo.I32Dec3.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I32Dec4 &row);// cfmt:algo.I32Dec4.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I32Dec5 &row);// cfmt:algo.I32Dec5.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec1 &row);// cfmt:algo.I64Dec1.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec10 &row);// cfmt:algo.I64Dec10.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec2 &row);// cfmt:algo.I64Dec2.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec3 &row);// cfmt:algo.I64Dec3.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec4 &row);// cfmt:algo.I64Dec4.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec5 &row);// cfmt:algo.I64Dec5.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec6 &row);// cfmt:algo.I64Dec6.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec7 &row);// cfmt:algo.I64Dec7.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec8 &row);// cfmt:algo.I64Dec8.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::I64Dec9 &row);// cfmt:algo.I64Dec9.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::IOEvtFlags &row);// cfmt:algo.IOEvtFlags.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Imdb &row);// cfmt:algo.Imdb.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::ImrowPtr &row);// cfmt:algo.ImrowPtr.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Imtable &row);// cfmt:algo.Imtable.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Ipmask &row);// cfmt:algo.Ipmask.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Md5Digest &row);// cfmt:algo.Md5Digest.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Month &row);// cfmt:algo.Month.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::NumParseFlags &row);// cfmt:algo.NumParseFlags.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::SchedTime &row);// cfmt:algo.SchedTime.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::SeqType &row);// cfmt:algo.SeqType.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Sha1sig &row);// cfmt:algo.Sha1sig.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::StringAry &row);// cfmt:algo.StringAry.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::TermStyle &row);// cfmt:algo.TermStyle.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::TextJust &row);// cfmt:algo.TextJust.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::Tuple &row);// cfmt:algo.Tuple.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U16Dec2 &row);// cfmt:algo.U16Dec2.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U32Dec1 &row);// cfmt:algo.U32Dec1.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U32Dec2 &row);// cfmt:algo.U32Dec2.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U32Dec3 &row);// cfmt:algo.U32Dec3.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U32Dec4 &row);// cfmt:algo.U32Dec4.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U32Dec5 &row);// cfmt:algo.U32Dec5.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec10 &row);// cfmt:algo.U64Dec10.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec2 &row);// cfmt:algo.U64Dec2.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec4 &row);// cfmt:algo.U64Dec4.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec5 &row);// cfmt:algo.U64Dec5.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec6 &row);// cfmt:algo.U64Dec6.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec7 &row);// cfmt:algo.U64Dec7.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec8 &row);// cfmt:algo.U64Dec8.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::U64Dec9 &row);// cfmt:algo.U64Dec9.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::URL &row);// cfmt:algo.URL.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::UnDiff &row);// cfmt:algo.UnDiff.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::UnixDiff &row);// cfmt:algo.UnixDiff.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::UnixTime &row);// cfmt:algo.UnixTime.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::WDiff &row);// cfmt:algo.WDiff.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::WTime &row);// cfmt:algo.WTime.String
inline algo::cstring &operator <<(algo::cstring &str, const algo::i32_Range &row);// cfmt:algo.i32_Range.String
}
