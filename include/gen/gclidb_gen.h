//
// include/gen/gclidb_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- gclidb_FieldIdEnum

enum gclidb_FieldIdEnum {                   // gclidb.FieldId.value
     gclidb_FieldId_gact              = 0
    ,gclidb_FieldId_comment           = 1
    ,gclidb_FieldId_gatv              = 2
    ,gclidb_FieldId_gclicmd           = 3
    ,gclidb_FieldId_gclicmdf2j        = 4
    ,gclidb_FieldId_gclicmdf          = 5
    ,gclidb_FieldId_field             = 6
    ,gclidb_FieldId_jkey              = 7
    ,gclidb_FieldId_dup               = 8
    ,gclidb_FieldId_gclicmdt          = 9
    ,gclidb_FieldId_gmethod           = 10
    ,gclidb_FieldId_gtype             = 11
    ,gclidb_FieldId_uri               = 12
    ,gclidb_FieldId_gclienv           = 13
    ,gclidb_FieldId_addon             = 14
    ,gclidb_FieldId_gclienvsub        = 15
    ,gclidb_FieldId_sub               = 16
    ,gclidb_FieldId_fwd               = 17
    ,gclidb_FieldId_rev               = 18
    ,gclidb_FieldId_uval              = 19
    ,gclidb_FieldId_gclisub           = 20
    ,gclidb_FieldId_gfld              = 21
    ,gclidb_FieldId_val               = 22
    ,gclidb_FieldId_grepo             = 23
    ,gclidb_FieldId_host              = 24
    ,gclidb_FieldId_fname             = 25
    ,gclidb_FieldId_name              = 26
    ,gclidb_FieldId_token             = 27
    ,gclidb_FieldId_default_branch    = 28
    ,gclidb_FieldId_keyid             = 29
    ,gclidb_FieldId_ssh_repo          = 30
    ,gclidb_FieldId_web_url           = 31
    ,gclidb_FieldId_descr             = 32
    ,gclidb_FieldId_active            = 33
    ,gclidb_FieldId_priv              = 34
    ,gclidb_FieldId_grepogitport      = 35
    ,gclidb_FieldId_port              = 36
    ,gclidb_FieldId_grepossh          = 37
    ,gclidb_FieldId_sshid             = 38
    ,gclidb_FieldId_gstate            = 39
    ,gclidb_FieldId_st                = 40
    ,gclidb_FieldId_state             = 41
    ,gclidb_FieldId_gstatet           = 42
    ,gclidb_FieldId_gtbl              = 43
    ,gclidb_FieldId_gtblact           = 44
    ,gclidb_FieldId_t                 = 45
    ,gclidb_FieldId_e                 = 46
    ,gclidb_FieldId_auth              = 47
    ,gclidb_FieldId_gtblactfld        = 48
    ,gclidb_FieldId_dflt              = 49
    ,gclidb_FieldId_field_name_dflt   = 50
    ,gclidb_FieldId_optional          = 51
    ,gclidb_FieldId_regx              = 52
    ,gclidb_FieldId_gtblacttst        = 53
    ,gclidb_FieldId_working           = 54
    ,gclidb_FieldId_cmd               = 55
    ,gclidb_FieldId_gtblacttstout     = 56
    ,gclidb_FieldId_out               = 57
    ,gclidb_FieldId_text              = 58
    ,gclidb_FieldId_default_url       = 59
    ,gclidb_FieldId_gtypeh            = 60
    ,gclidb_FieldId_header            = 61
    ,gclidb_FieldId_gtypeprefix       = 62
    ,gclidb_FieldId_prefix            = 63
    ,gclidb_FieldId_issue             = 64
    ,gclidb_FieldId_project           = 65
    ,gclidb_FieldId_iid               = 66
    ,gclidb_FieldId_assignee          = 67
    ,gclidb_FieldId_labels            = 68
    ,gclidb_FieldId_milestone_iid     = 69
    ,gclidb_FieldId_milestone_num     = 70
    ,gclidb_FieldId_milestone         = 71
    ,gclidb_FieldId_title             = 72
    ,gclidb_FieldId_author            = 73
    ,gclidb_FieldId_mr                = 74
    ,gclidb_FieldId_description       = 75
    ,gclidb_FieldId_issuenote         = 76
    ,gclidb_FieldId_nid               = 77
    ,gclidb_FieldId_note              = 78
    ,gclidb_FieldId_system            = 79
    ,gclidb_FieldId_issuepipeline     = 80
    ,gclidb_FieldId_id                = 81
    ,gclidb_FieldId_id_in             = 82
    ,gclidb_FieldId_status            = 83
    ,gclidb_FieldId_label             = 84
    ,gclidb_FieldId_proj              = 85
    ,gclidb_FieldId_source_branch     = 86
    ,gclidb_FieldId_source_repo       = 87
    ,gclidb_FieldId_reviewer          = 88
    ,gclidb_FieldId_pipeline_status   = 89
    ,gclidb_FieldId_pipeline_id       = 90
    ,gclidb_FieldId_draft             = 91
    ,gclidb_FieldId_node_id           = 92
    ,gclidb_FieldId_mrjob             = 93
    ,gclidb_FieldId_job               = 94
    ,gclidb_FieldId_ref               = 95
    ,gclidb_FieldId_runner            = 96
    ,gclidb_FieldId_mrnote            = 97
    ,gclidb_FieldId_user              = 98
    ,gclidb_FieldId_value             = 99
};

enum { gclidb_FieldIdEnum_N = 100 };

extern const char *  gclidb_Gact_gact_accept;       // accept        fconst:gclidb.Gact.gact/accept
extern const char *  gclidb_Gact_gact_approve;      // approve       fconst:gclidb.Gact.gact/approve
extern const char *  gclidb_Gact_gact_create;       // create        fconst:gclidb.Gact.gact/create
extern const char *  gclidb_Gact_gact_list;         // list          fconst:gclidb.Gact.gact/list
extern const char *  gclidb_Gact_gact_needs_work;   // needs_work    fconst:gclidb.Gact.gact/needs_work
extern const char *  gclidb_Gact_gact_start;        // start         fconst:gclidb.Gact.gact/start
extern const char *  gclidb_Gact_gact_stop;         // stop          fconst:gclidb.Gact.gact/stop
extern const char *  gclidb_Gact_gact_update;       // update        fconst:gclidb.Gact.gact/update
extern const char *  gclidb_Gclicmd_gclicmd_graphql;        // graphql         fconst:gclidb.Gclicmd.gclicmd/graphql
extern const char *  gclidb_Gclicmd_gclicmd_issueadd;       // issueadd        fconst:gclidb.Gclicmd.gclicmd/issueadd
extern const char *  gclidb_Gclicmd_gclicmd_issuelist;      // issuelist       fconst:gclidb.Gclicmd.gclicmd/issuelist
extern const char *  gclidb_Gclicmd_gclicmd_issuemod;       // issuemod        fconst:gclidb.Gclicmd.gclicmd/issuemod
extern const char *  gclidb_Gclicmd_gclicmd_issuenote;      // issuenote       fconst:gclidb.Gclicmd.gclicmd/issuenote
extern const char *  gclidb_Gclicmd_gclicmd_issuesearch;    // issuesearch     fconst:gclidb.Gclicmd.gclicmd/issuesearch
extern const char *  gclidb_Gclicmd_gclicmd_mraccept;       // mraccept        fconst:gclidb.Gclicmd.gclicmd/mraccept
extern const char *  gclidb_Gclicmd_gclicmd_mrlist;         // mrlist          fconst:gclidb.Gclicmd.gclicmd/mrlist
extern const char *  gclidb_Gclicmd_gclicmd_mrlistdet;      // mrlistdet       fconst:gclidb.Gclicmd.gclicmd/mrlistdet
extern const char *  gclidb_Gclicmd_gclicmd_mrmod;          // mrmod           fconst:gclidb.Gclicmd.gclicmd/mrmod
extern const char *  gclidb_Gclicmd_gclicmd_mrnote;         // mrnote          fconst:gclidb.Gclicmd.gclicmd/mrnote
extern const char *  gclidb_Gclicmd_gclicmd_mrnoteadd;      // mrnoteadd       fconst:gclidb.Gclicmd.gclicmd/mrnoteadd
extern const char *  gclidb_Gclicmd_gclicmd_mrnotemod;      // mrnotemod       fconst:gclidb.Gclicmd.gclicmd/mrnotemod
extern const char *  gclidb_Gclicmd_gclicmd_mrreq;          // mrreq           fconst:gclidb.Gclicmd.gclicmd/mrreq
extern const char *  gclidb_Gclicmd_gclicmd_mrreview;       // mrreview        fconst:gclidb.Gclicmd.gclicmd/mrreview
extern const char *  gclidb_Gclicmd_gclicmd_mrreviewrm;     // mrreviewrm      fconst:gclidb.Gclicmd.gclicmd/mrreviewrm
extern const char *  gclidb_Gclicmd_gclicmd_mrsearch;       // mrsearch        fconst:gclidb.Gclicmd.gclicmd/mrsearch
extern const char *  gclidb_Gclicmd_gclicmd_mslist;         // mslist          fconst:gclidb.Gclicmd.gclicmd/mslist
extern const char *  gclidb_Gclicmd_gclicmd_noteadd;        // noteadd         fconst:gclidb.Gclicmd.gclicmd/noteadd
extern const char *  gclidb_Gclicmd_gclicmd_notemod;        // notemod         fconst:gclidb.Gclicmd.gclicmd/notemod
extern const char *  gclidb_Gclicmd_gclicmd_repojob;        // repojob         fconst:gclidb.Gclicmd.gclicmd/repojob
extern const char *  gclidb_Gclicmd_gclicmd_repojobtrace;   // repojobtrace    fconst:gclidb.Gclicmd.gclicmd/repojobtrace
extern const char *  gclidb_Gclicmd_gclicmd_token2repos;    // token2repos     fconst:gclidb.Gclicmd.gclicmd/token2repos
extern const char *  gclidb_Gclicmd_gclicmd_user;           // user            fconst:gclidb.Gclicmd.gclicmd/user
extern const char *  gclidb_Gclicmd_gclicmd_userdet;        // userdet         fconst:gclidb.Gclicmd.gclicmd/userdet
extern const char *  gclidb_Gclicmd_gclicmd_userlist;       // userlist        fconst:gclidb.Gclicmd.gclicmd/userlist
extern const char *  gclidb_Gclienv_gclienv_all;    // all     fconst:gclidb.Gclienv.gclienv/all
extern const char *  gclidb_Gclienv_gclienv_ghub;   // ghub    fconst:gclidb.Gclienv.gclienv/ghub
extern const char *  gclidb_Gclienv_gclienv_glab;   // glab    fconst:gclidb.Gclienv.gclienv/glab
extern const char *  gclidb_Gclisub_gclisub__GITDIR;    // $GITDIR     fconst:gclidb.Gclisub.gclisub/$GITDIR
extern const char *  gclidb_Gclisub_gclisub__HOST;      // $HOST       fconst:gclidb.Gclisub.gclisub/$HOST
extern const char *  gclidb_Gclisub_gclisub__IN_AUTH;   // $IN_AUTH    fconst:gclidb.Gclisub.gclisub/$IN_AUTH
extern const char *  gclidb_Gclisub_gclisub__ISSUE;     // $ISSUE      fconst:gclidb.Gclisub.gclisub/$ISSUE
extern const char *  gclidb_Gclisub_gclisub__ISSUE_;    // $ISSUE#     fconst:gclidb.Gclisub.gclisub/$ISSUE#
extern const char *  gclidb_Gclisub_gclisub__MNOTE;     // $MNOTE      fconst:gclidb.Gclisub.gclisub/$MNOTE
extern const char *  gclidb_Gclisub_gclisub__MR;        // $MR         fconst:gclidb.Gclisub.gclisub/$MR
extern const char *  gclidb_Gclisub_gclisub__MR_;       // $MR_        fconst:gclidb.Gclisub.gclisub/$MR_
extern const char *  gclidb_Gclisub_gclisub__NOTE;      // $NOTE       fconst:gclidb.Gclisub.gclisub/$NOTE
extern const char *  gclidb_Gclisub_gclisub__REPO;      // $REPO       fconst:gclidb.Gclisub.gclisub/$REPO
extern const char *  gclidb_Gclisub_gclisub__TOKEN;     // $TOKEN      fconst:gclidb.Gclisub.gclisub/$TOKEN
extern const char *  gclidb_Gclisub_gclisub__USER;      // $USER       fconst:gclidb.Gclisub.gclisub/$USER
extern const char *  gclidb_Gfld_gfld_action;         // action          fconst:gclidb.Gfld.gfld/action
extern const char *  gclidb_Gfld_gfld_assignee;       // assignee        fconst:gclidb.Gfld.gfld/assignee
extern const char *  gclidb_Gfld_gfld_author;         // author          fconst:gclidb.Gfld.gfld/author
extern const char *  gclidb_Gfld_gfld_default_repo;   // default_repo    fconst:gclidb.Gfld.gfld/default_repo
extern const char *  gclidb_Gfld_gfld_description;    // description     fconst:gclidb.Gfld.gfld/description
extern const char *  gclidb_Gfld_gfld_host;           // host            fconst:gclidb.Gfld.gfld/host
extern const char *  gclidb_Gfld_gfld_labels;         // labels          fconst:gclidb.Gfld.gfld/labels
extern const char *  gclidb_Gfld_gfld_milestone;      // milestone       fconst:gclidb.Gfld.gfld/milestone
extern const char *  gclidb_Gfld_gfld_name;           // name            fconst:gclidb.Gfld.gfld/name
extern const char *  gclidb_Gfld_gfld_note;           // note            fconst:gclidb.Gfld.gfld/note
extern const char *  gclidb_Gfld_gfld_repo;           // repo            fconst:gclidb.Gfld.gfld/repo
extern const char *  gclidb_Gfld_gfld_reviewer;       // reviewer        fconst:gclidb.Gfld.gfld/reviewer
extern const char *  gclidb_Gfld_gfld_state;          // state           fconst:gclidb.Gfld.gfld/state
extern const char *  gclidb_Gfld_gfld_title;          // title           fconst:gclidb.Gfld.gfld/title
extern const char *  gclidb_Gfld_gfld_token;          // token           fconst:gclidb.Gfld.gfld/token
extern const char *  gclidb_Gfld_gfld_user;           // user            fconst:gclidb.Gfld.gfld/user
extern const char *  gclidb_Grepogitport_grepogitport_default;             // default              fconst:gclidb.Grepogitport.grepogitport/default
extern const char *  gclidb_Grepogitport_grepogitport_github_com;          // github.com           fconst:gclidb.Grepogitport.grepogitport/github.com
extern const char *  gclidb_Grepogitport_grepogitport_gitlab_vovaco_com;   // gitlab.vovaco.com    fconst:gclidb.Grepogitport.grepogitport/gitlab.vovaco.com
extern const char *  gclidb_Grepossh_grepossh_glpat;          // glpat           fconst:gclidb.Grepossh.grepossh/glpat
extern const char *  gclidb_Grepossh_grepossh_vparizhs_ghp;   // vparizhs/ghp    fconst:gclidb.Grepossh.grepossh/vparizhs/ghp
extern const char *  gclidb_Gstate_gstate_state_all;          // state_all           fconst:gclidb.Gstate.gstate/state_all
extern const char *  gclidb_Gstate_gstate_state_close;        // state_close         fconst:gclidb.Gstate.gstate/state_close
extern const char *  gclidb_Gstate_gstate_state_closed;       // state_closed        fconst:gclidb.Gstate.gstate/state_closed
extern const char *  gclidb_Gstate_gstate_state_open;         // state_open          fconst:gclidb.Gstate.gstate/state_open
extern const char *  gclidb_Gstate_gstate_state_opened;       // state_opened        fconst:gclidb.Gstate.gstate/state_opened
extern const char *  gclidb_Gstate_gstate_state_set_close;    // state_set_close     fconst:gclidb.Gstate.gstate/state_set_close
extern const char *  gclidb_Gstate_gstate_state_set_closed;   // state_set_closed    fconst:gclidb.Gstate.gstate/state_set_closed
extern const char *  gclidb_Gstate_gstate_state_set_open;     // state_set_open      fconst:gclidb.Gstate.gstate/state_set_open
extern const char *  gclidb_Gstate_gstate_state_set_opened;   // state_set_opened    fconst:gclidb.Gstate.gstate/state_set_opened
extern const char *  gclidb_Gtbl_gtbl_gitconfig;    // gitconfig     fconst:gclidb.Gtbl.gtbl/gitconfig
extern const char *  gclidb_Gtbl_gtbl_help;         // help          fconst:gclidb.Gtbl.gtbl/help
extern const char *  gclidb_Gtbl_gtbl_issue;        // issue         fconst:gclidb.Gtbl.gtbl/issue
extern const char *  gclidb_Gtbl_gtbl_issuenote;    // issuenote     fconst:gclidb.Gtbl.gtbl/issuenote
extern const char *  gclidb_Gtbl_gtbl_milestone;    // milestone     fconst:gclidb.Gtbl.gtbl/milestone
extern const char *  gclidb_Gtbl_gtbl_mr;           // mr            fconst:gclidb.Gtbl.gtbl/mr
extern const char *  gclidb_Gtbl_gtbl_mrjob;        // mrjob         fconst:gclidb.Gtbl.gtbl/mrjob
extern const char *  gclidb_Gtbl_gtbl_mrnote;       // mrnote        fconst:gclidb.Gtbl.gtbl/mrnote
extern const char *  gclidb_Gtbl_gtbl_repo;         // repo          fconst:gclidb.Gtbl.gtbl/repo
extern const char *  gclidb_Gtbl_gtbl_reporemote;   // reporemote    fconst:gclidb.Gtbl.gtbl/reporemote
extern const char *  gclidb_Gtbl_gtbl_user;         // user          fconst:gclidb.Gtbl.gtbl/user
extern const char *  gclidb_Gtblact_gtblact_help_list;          // help_list           fconst:gclidb.Gtblact.gtblact/help_list
extern const char *  gclidb_Gtblact_gtblact_repo_create;        // repo_create         fconst:gclidb.Gtblact.gtblact/repo_create
extern const char *  gclidb_Gtblact_gtblact_gitconfig_create;   // gitconfig_create    fconst:gclidb.Gtblact.gtblact/gitconfig_create
extern const char *  gclidb_Gtblact_gtblact_gitconfig_list;     // gitconfig_list      fconst:gclidb.Gtblact.gtblact/gitconfig_list
extern const char *  gclidb_Gtblact_gtblact_repo_update;        // repo_update         fconst:gclidb.Gtblact.gtblact/repo_update
extern const char *  gclidb_Gtblact_gtblact_reporemote_list;    // reporemote_list     fconst:gclidb.Gtblact.gtblact/reporemote_list
extern const char *  gclidb_Gtblact_gtblact_repo_list;          // repo_list           fconst:gclidb.Gtblact.gtblact/repo_list
extern const char *  gclidb_Gtblact_gtblact_issue_create;       // issue_create        fconst:gclidb.Gtblact.gtblact/issue_create
extern const char *  gclidb_Gtblact_gtblact_issue_update;       // issue_update        fconst:gclidb.Gtblact.gtblact/issue_update
extern const char *  gclidb_Gtblact_gtblact_issue_start;        // issue_start         fconst:gclidb.Gtblact.gtblact/issue_start
extern const char *  gclidb_Gtblact_gtblact_issue_list;         // issue_list          fconst:gclidb.Gtblact.gtblact/issue_list
extern const char *  gclidb_Gtblact_gtblact_mrnote_create;      // mrnote_create       fconst:gclidb.Gtblact.gtblact/mrnote_create
extern const char *  gclidb_Gtblact_gtblact_issuenote_create;   // issuenote_create    fconst:gclidb.Gtblact.gtblact/issuenote_create
extern const char *  gclidb_Gtblact_gtblact_issuenote_list;     // issuenote_list      fconst:gclidb.Gtblact.gtblact/issuenote_list
extern const char *  gclidb_Gtblact_gtblact_issuenote_update;   // issuenote_update    fconst:gclidb.Gtblact.gtblact/issuenote_update
extern const char *  gclidb_Gtblact_gtblact_mrnote_update;      // mrnote_update       fconst:gclidb.Gtblact.gtblact/mrnote_update
extern const char *  gclidb_Gtblact_gtblact_mrnote_list;        // mrnote_list         fconst:gclidb.Gtblact.gtblact/mrnote_list
extern const char *  gclidb_Gtblact_gtblact_mr_list;            // mr_list             fconst:gclidb.Gtblact.gtblact/mr_list
extern const char *  gclidb_Gtblact_gtblact_milestone_list;     // milestone_list      fconst:gclidb.Gtblact.gtblact/milestone_list
extern const char *  gclidb_Gtblact_gtblact_user_list;          // user_list           fconst:gclidb.Gtblact.gtblact/user_list
extern const char *  gclidb_Gtblact_gtblact_mr_create;          // mr_create           fconst:gclidb.Gtblact.gtblact/mr_create
extern const char *  gclidb_Gtblact_gtblact_mr_start;           // mr_start            fconst:gclidb.Gtblact.gtblact/mr_start
extern const char *  gclidb_Gtblact_gtblact_mr_approve;         // mr_approve          fconst:gclidb.Gtblact.gtblact/mr_approve
extern const char *  gclidb_Gtblact_gtblact_mr_accept;          // mr_accept           fconst:gclidb.Gtblact.gtblact/mr_accept
extern const char *  gclidb_Gtblact_gtblact_mr_update;          // mr_update           fconst:gclidb.Gtblact.gtblact/mr_update
extern const char *  gclidb_Gtblact_gtblact_mr_needs_work;      // mr_needs_work       fconst:gclidb.Gtblact.gtblact/mr_needs_work
extern const char *  gclidb_Gtblact_gtblact_mr_stop;            // mr_stop             fconst:gclidb.Gtblact.gtblact/mr_stop
extern const char *  gclidb_Gtblact_gtblact_mrjob_list;         // mrjob_list          fconst:gclidb.Gtblact.gtblact/mrjob_list
extern const char *  gclidb_Gtblact_gtblact_issue_needs_work;   // issue_needs_work    fconst:gclidb.Gtblact.gtblact/issue_needs_work
extern const char *  gclidb_Gtblact_gtblact_issue_stop;         // issue_stop          fconst:gclidb.Gtblact.gtblact/issue_stop
extern const char *  gclidb_Gtype_gtype_ghp;     // ghp      fconst:gclidb.Gtype.gtype/ghp
extern const char *  gclidb_Gtype_gtype_glpat;   // glpat    fconst:gclidb.Gtype.gtype/glpat
extern const char *  gclidb_Label_label_bug;                // bug                 fconst:gclidb.Label.label/bug
extern const char *  gclidb_Label_label_documentation;      // documentation       fconst:gclidb.Label.label/documentation
extern const char *  gclidb_Label_label_done;               // done                fconst:gclidb.Label.label/done
extern const char *  gclidb_Label_label_duplicate;          // duplicate           fconst:gclidb.Label.label/duplicate
extern const char *  gclidb_Label_label_enhancement;        // enhancement         fconst:gclidb.Label.label/enhancement
extern const char *  gclidb_Label_label_good_first_issue;   // good_first_issue    fconst:gclidb.Label.label/good_first_issue
extern const char *  gclidb_Label_label_help_wanted;        // help_wanted         fconst:gclidb.Label.label/help_wanted
extern const char *  gclidb_Label_label_high_priority;      // high_priority       fconst:gclidb.Label.label/high_priority
extern const char *  gclidb_Label_label_in_progress;        // in_progress         fconst:gclidb.Label.label/in_progress
extern const char *  gclidb_Label_label_invalid;            // invalid             fconst:gclidb.Label.label/invalid
extern const char *  gclidb_Label_label_low_priority;       // low_priority        fconst:gclidb.Label.label/low_priority
extern const char *  gclidb_Label_label_medium_priority;    // medium_priority     fconst:gclidb.Label.label/medium_priority
extern const char *  gclidb_Label_label_question;           // question            fconst:gclidb.Label.label/question
extern const char *  gclidb_Label_label_wontfix;            // wontfix             fconst:gclidb.Label.label/wontfix
namespace gclidb { // gen:ns_pkeytypedef
    typedef algo::Smallstr50 GactPkey;
    typedef algo::Smallstr50 GatvPkey;
    typedef algo::Smallstr250 GclicmdPkey;
    typedef algo::Smallstr250 Gclicmdf2jPkey;
    typedef algo::Smallstr250 GclicmdtPkey;
    typedef algo::Smallstr50 GclienvPkey;
    typedef algo::Smallstr50 GclienvsubPkey;
    typedef algo::Smallstr50 GclisubPkey;
    typedef algo::Smallstr50 GfldPkey;
    typedef algo::Smallstr250 GithostPkey;
    typedef algo::Smallstr50 GmethodPkey;
    typedef algo::Smallstr250 GrepoPkey;
    typedef algo::Smallstr50 GrepogitportPkey;
    typedef algo::Smallstr50 GreposshPkey;
    typedef algo::Smallstr50 GstatePkey;
    typedef algo::Smallstr50 GstatetPkey;
    typedef algo::Smallstr250 GtblPkey;
    typedef algo::Smallstr50 GtblactPkey;
    typedef algo::Smallstr50 GtblactfldPkey;
    typedef algo::Smallstr250 GtblacttstPkey;
    typedef algo::Smallstr250 GtblacttstoutPkey;
    typedef algo::Smallstr50 GtypePkey;
    typedef algo::Smallstr250 GtypehPkey;
    typedef algo::Smallstr50 GtypeprefixPkey;
    typedef algo::Smallstr50 IssuePkey;
    typedef algo::Smallstr250 IssuenotePkey;
    typedef algo::Smallstr250 IssuepipelinePkey;
    typedef algo::Smallstr50 LabelPkey;
    typedef algo::Smallstr200 MilestonePkey;
    typedef algo::Smallstr150 MrPkey;
    typedef algo::Smallstr250 MrjobPkey;
    typedef algo::cstring MrnotePkey;
    typedef algo::Smallstr50 ProjectPkey;
    typedef algo::Smallstr50 UserPkey;
} // gen:ns_pkeytypedef
namespace gclidb { // gen:ns_tclass_field
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace gclidb { struct FieldId; }
namespace gclidb { struct Gact; }
namespace gclidb { struct Gatv; }
namespace gclidb { struct Gclicmd; }
namespace gclidb { struct Gclicmdf2j; }
namespace gclidb { struct Gclicmdt; }
namespace gclidb { struct Gclienv; }
namespace gclidb { struct Gclienvsub; }
namespace gclidb { struct Gclisub; }
namespace gclidb { struct Gfld; }
namespace gclidb { struct Githost; }
namespace gclidb { struct Gmethod; }
namespace gclidb { struct Grepo; }
namespace gclidb { struct Grepogitport; }
namespace gclidb { struct Grepossh; }
namespace gclidb { struct Gstate; }
namespace gclidb { struct Gstatet; }
namespace gclidb { struct Gtbl; }
namespace gclidb { struct Gtblact; }
namespace gclidb { struct Gtblactfld; }
namespace gclidb { struct Gtblacttst; }
namespace gclidb { struct Gtblacttstout; }
namespace gclidb { struct Gtype; }
namespace gclidb { struct Gtypeh; }
namespace gclidb { struct Gtypeprefix; }
namespace gclidb { struct Issue; }
namespace gclidb { struct Issuenote; }
namespace gclidb { struct Issuepipeline; }
namespace gclidb { struct Label; }
namespace gclidb { struct Milestone; }
namespace gclidb { struct Mr; }
namespace gclidb { struct Mrjob; }
namespace gclidb { struct Mrnote; }
namespace gclidb { struct Project; }
namespace gclidb { struct User; }
namespace gclidb { // gen:ns_print_struct

// --- gclidb.FieldId
#pragma pack(push,1)
struct FieldId { // gclidb.FieldId: Field read helper
    i32   value;   //   -1
    // func:gclidb.FieldId.value.Cast
    inline               operator gclidb_FieldIdEnum() const __attribute__((nothrow));
    // func:gclidb.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:gclidb.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:gclidb.FieldId..EnumCtor
    inline               FieldId(gclidb_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:gclidb.FieldId.value.GetEnum
inline gclidb_FieldIdEnum value_GetEnum(const gclidb::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:gclidb.FieldId.value.SetEnum
inline void          value_SetEnum(gclidb::FieldId& parent, gclidb_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:gclidb.FieldId.value.ToCstr
const char*          value_ToCstr(const gclidb::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:gclidb.FieldId.value.Print
void                 value_Print(const gclidb::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:gclidb.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(gclidb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:gclidb.FieldId.value.SetStrptr
void                 value_SetStrptr(gclidb::FieldId& parent, algo::strptr rhs, gclidb_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:gclidb.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(gclidb::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of gclidb::FieldId from an ascii string.
// The format of the string is the format of the gclidb::FieldId's only field
// func:gclidb.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(gclidb::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.FieldId..Init
inline void          FieldId_Init(gclidb::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.FieldId.String  printfmt:Raw
// func:gclidb.FieldId..Print
void                 FieldId_Print(gclidb::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gact
struct Gact { // gclidb.Gact: Action that may be performed on a table
    algo::Smallstr50   gact;      //
    algo::Comment      comment;   //
    // func:gclidb.Gact..Ctor
    inline               Gact() __attribute__((nothrow));
};

// func:gclidb.Gact..ReadFieldMaybe
bool                 Gact_ReadFieldMaybe(gclidb::Gact& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gact from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gact..ReadStrptrMaybe
bool                 Gact_ReadStrptrMaybe(gclidb::Gact &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gact.String  printfmt:Tuple
// func:gclidb.Gact..Print
void                 Gact_Print(gclidb::Gact& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gatv
struct Gatv { // gclidb.Gatv
    algo::Smallstr50   gatv;      //
    algo::Comment      comment;   //
    // func:gclidb.Gatv..Ctor
    inline               Gatv() __attribute__((nothrow));
};

// func:gclidb.Gatv..ReadFieldMaybe
bool                 Gatv_ReadFieldMaybe(gclidb::Gatv& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gatv from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gatv..ReadStrptrMaybe
bool                 Gatv_ReadStrptrMaybe(gclidb::Gatv &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gatv.String  printfmt:Tuple
// func:gclidb.Gatv..Print
void                 Gatv_Print(gclidb::Gatv& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclicmd
struct Gclicmd { // gclidb.Gclicmd
    algo::Smallstr250   gclicmd;      //
    algo::Smallstr250   gclicmdf2j;   // Base for gclicmdf2j
    algo::Comment       comment;      //
    // func:gclidb.Gclicmd..Ctor
    inline               Gclicmd() __attribute__((nothrow));
};

// func:gclidb.Gclicmd..ReadFieldMaybe
bool                 Gclicmd_ReadFieldMaybe(gclidb::Gclicmd& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclicmd from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclicmd..ReadStrptrMaybe
bool                 Gclicmd_ReadStrptrMaybe(gclidb::Gclicmd &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gclicmd.String  printfmt:Tuple
// func:gclidb.Gclicmd..Print
void                 Gclicmd_Print(gclidb::Gclicmd& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclicmdf2j
struct Gclicmdf2j { // gclidb.Gclicmdf2j: Mapping of internal fields to JSON fields for gitlab/github
    algo::Smallstr250   gclicmdf2j;   //
    bool                dup;          //   false
    algo::Comment       comment;      //
    // func:gclidb.Gclicmdf2j..Ctor
    inline               Gclicmdf2j() __attribute__((nothrow));
};

// func:gclidb.Gclicmdf2j.gclicmdf.Get
algo::cstring        gclicmdf_Get(gclidb::Gclicmdf2j& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdf2j.gclicmdf.Get2
algo::cstring        Gclicmdf2j_gclicmdf_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdf2j.gclicmd.Get
algo::Smallstr250    gclicmd_Get(gclidb::Gclicmdf2j& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdf2j.gclicmd.Get2
algo::Smallstr250    Gclicmdf2j_gclicmd_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdf2j.field.Get
algo::Smallstr100    field_Get(gclidb::Gclicmdf2j& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdf2j.field.Get2
algo::Smallstr100    Gclicmdf2j_field_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdf2j.jkey.Get
algo::cstring        jkey_Get(gclidb::Gclicmdf2j& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdf2j.jkey.Get2
algo::cstring        Gclicmdf2j_jkey_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdf2j..Concat_gclicmd_field_jkey
tempstr              Gclicmdf2j_Concat_gclicmd_field_jkey( const algo::strptr& gclicmd ,const algo::strptr& field ,const algo::strptr& jkey );
// func:gclidb.Gclicmdf2j..ReadFieldMaybe
bool                 Gclicmdf2j_ReadFieldMaybe(gclidb::Gclicmdf2j& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclicmdf2j from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclicmdf2j..ReadStrptrMaybe
bool                 Gclicmdf2j_ReadStrptrMaybe(gclidb::Gclicmdf2j &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gclicmdf2j..Init
inline void          Gclicmdf2j_Init(gclidb::Gclicmdf2j& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gclicmdf2j.String  printfmt:Tuple
// func:gclidb.Gclicmdf2j..Print
void                 Gclicmdf2j_Print(gclidb::Gclicmdf2j& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclicmdt
struct Gclicmdt { // gclidb.Gclicmdt: Internal test
    algo::Smallstr250   gclicmdt;   //
    algo::Smallstr50    gmethod;    //   "GET"
    algo::Comment       uri;        //
    algo::Comment       comment;    //
    // func:gclidb.Gclicmdt..Ctor
    inline               Gclicmdt() __attribute__((nothrow));
};

// func:gclidb.Gclicmdt.gclicmd.Get
algo::Smallstr250    gclicmd_Get(gclidb::Gclicmdt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdt.gclicmd.Get2
algo::Smallstr250    Gclicmdt_gclicmd_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdt.gtype.Get
algo::Smallstr50     gtype_Get(gclidb::Gclicmdt& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclicmdt.gtype.Get2
algo::Smallstr50     Gclicmdt_gtype_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclicmdt..Concat_gclicmd_gtype
tempstr              Gclicmdt_Concat_gclicmd_gtype( const algo::strptr& gclicmd ,const algo::strptr& gtype );
// func:gclidb.Gclicmdt..ReadFieldMaybe
bool                 Gclicmdt_ReadFieldMaybe(gclidb::Gclicmdt& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclicmdt from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclicmdt..ReadStrptrMaybe
bool                 Gclicmdt_ReadStrptrMaybe(gclidb::Gclicmdt &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gclicmdt..Init
inline void          Gclicmdt_Init(gclidb::Gclicmdt& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gclicmdt.String  printfmt:Tuple
// func:gclidb.Gclicmdt..Print
void                 Gclicmdt_Print(gclidb::Gclicmdt& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclienv
struct Gclienv { // gclidb.Gclienv
    algo::Smallstr50   gclienv;   //
    algo::cstring      addon;     //
    algo::Comment      comment;   //
    // func:gclidb.Gclienv..Ctor
    inline               Gclienv() __attribute__((nothrow));
};

// func:gclidb.Gclienv..ReadFieldMaybe
bool                 Gclienv_ReadFieldMaybe(gclidb::Gclienv& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclienv from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclienv..ReadStrptrMaybe
bool                 Gclienv_ReadStrptrMaybe(gclidb::Gclienv &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gclienv.String  printfmt:Tuple
// func:gclidb.Gclienv..Print
void                 Gclienv_Print(gclidb::Gclienv& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclienvsub
struct Gclienvsub { // gclidb.Gclienvsub
    algo::Smallstr50   gclienvsub;   //
    bool               fwd;          //   false
    bool               rev;          //   false
    algo::cstring      uval;         //
    // func:gclidb.Gclienvsub..Ctor
    inline               Gclienvsub() __attribute__((nothrow));
};

// func:gclidb.Gclienvsub.gclienv.Get
algo::Smallstr50     gclienv_Get(gclidb::Gclienvsub& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclienvsub.gclienv.Get2
algo::Smallstr50     Gclienvsub_gclienv_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclienvsub.sub.Get
algo::Smallstr50     sub_Get(gclidb::Gclienvsub& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gclienvsub.sub.Get2
algo::Smallstr50     Gclienvsub_sub_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gclienvsub..Concat_gclienv_sub
tempstr              Gclienvsub_Concat_gclienv_sub( const algo::strptr& gclienv ,const algo::strptr& sub );
// func:gclidb.Gclienvsub..ReadFieldMaybe
bool                 Gclienvsub_ReadFieldMaybe(gclidb::Gclienvsub& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclienvsub from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclienvsub..ReadStrptrMaybe
bool                 Gclienvsub_ReadStrptrMaybe(gclidb::Gclienvsub &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gclienvsub..Init
inline void          Gclienvsub_Init(gclidb::Gclienvsub& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gclienvsub.String  printfmt:Tuple
// func:gclidb.Gclienvsub..Print
void                 Gclienvsub_Print(gclidb::Gclienvsub& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gclisub
struct Gclisub { // gclidb.Gclisub
    algo::Smallstr50   gclisub;   //
    algo::Comment      comment;   //
    // func:gclidb.Gclisub..Ctor
    inline               Gclisub() __attribute__((nothrow));
};

// func:gclidb.Gclisub..ReadFieldMaybe
bool                 Gclisub_ReadFieldMaybe(gclidb::Gclisub& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gclisub from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gclisub..ReadStrptrMaybe
bool                 Gclisub_ReadStrptrMaybe(gclidb::Gclisub &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gclisub.String  printfmt:Tuple
// func:gclidb.Gclisub..Print
void                 Gclisub_Print(gclidb::Gclisub& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gfld
struct Gfld { // gclidb.Gfld: Gitlab/github field name
    algo::Smallstr50   gfld;      //
    algo::Comment      comment;   //
    // func:gclidb.Gfld..Ctor
    inline               Gfld() __attribute__((nothrow));
};

// func:gclidb.Gfld..ReadFieldMaybe
bool                 Gfld_ReadFieldMaybe(gclidb::Gfld& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gfld from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gfld..ReadStrptrMaybe
bool                 Gfld_ReadStrptrMaybe(gclidb::Gfld &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gfld.String  printfmt:Tuple
// func:gclidb.Gfld..Print
void                 Gfld_Print(gclidb::Gfld& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Githost
struct Githost { // gclidb.Githost
    algo::Smallstr250   githost;   //
    // func:gclidb.Githost..Ctor
    inline               Githost() __attribute__((nothrow));
};

// func:gclidb.Githost.git.Get
algo::cstring        git_Get(gclidb::Githost& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Githost.git.Get2
algo::cstring        Githost_git_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Githost.host.Get
algo::cstring        host_Get(gclidb::Githost& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Githost.host.Get2
algo::cstring        Githost_host_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Githost.gitrepo.Get
algo::cstring        gitrepo_Get(gclidb::Githost& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Githost.gitrepo.Get2
algo::cstring        Githost_gitrepo_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Githost..Concat_git_host_gitrepo
tempstr              Githost_Concat_git_host_gitrepo( const algo::strptr& git ,const algo::strptr& host ,const algo::strptr& gitrepo );

// --- gclidb.Gmethod
struct Gmethod { // gclidb.Gmethod: HTTP method list
    algo::Smallstr50   gmethod;   //
    u32                val;       //   0
    algo::Comment      comment;   //
    // func:gclidb.Gmethod..Ctor
    inline               Gmethod() __attribute__((nothrow));
};

// func:gclidb.Gmethod..ReadFieldMaybe
bool                 Gmethod_ReadFieldMaybe(gclidb::Gmethod& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gmethod from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gmethod..ReadStrptrMaybe
bool                 Gmethod_ReadStrptrMaybe(gclidb::Gmethod &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gmethod..Init
inline void          Gmethod_Init(gclidb::Gmethod& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gmethod.String  printfmt:Tuple
// func:gclidb.Gmethod..Print
void                 Gmethod_Print(gclidb::Gmethod& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Grepo
struct Grepo { // gclidb.Grepo: Repo table (acr grepo -in ~/.ssim)
    algo::Smallstr250   grepo;            // gcli host/full name
    algo::cstring       name;             // gcli full name
    algo::cstring       token;            // gitlab project or repo access token
    algo::cstring       default_branch;   //   "origin"  gcli remote used in the workflow
    algo::cstring       keyid;            // gcli project id or repo
    algo::cstring       ssh_repo;         //
    algo::cstring       web_url;          //
    algo::cstring       descr;            //
    bool                active;           //   true  set to false to ignore the line but keep it in the file
    algo::cstring       priv;             //
    // func:gclidb.Grepo..Ctor
    inline               Grepo() __attribute__((nothrow));
};

// func:gclidb.Grepo.host.Get
algo::cstring        host_Get(gclidb::Grepo& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Grepo.host.Get2
algo::cstring        Grepo_host_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Grepo.fname.Get
algo::cstring        fname_Get(gclidb::Grepo& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Grepo.fname.Get2
algo::cstring        Grepo_fname_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Grepo..Concat_host_fname
tempstr              Grepo_Concat_host_fname( const algo::strptr& host ,const algo::strptr& fname );
// func:gclidb.Grepo..ReadFieldMaybe
bool                 Grepo_ReadFieldMaybe(gclidb::Grepo& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Grepo from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Grepo..ReadStrptrMaybe
bool                 Grepo_ReadStrptrMaybe(gclidb::Grepo &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Grepo..Init
void                 Grepo_Init(gclidb::Grepo& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Grepo.String  printfmt:Tuple
// func:gclidb.Grepo..Print
void                 Grepo_Print(gclidb::Grepo& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Grepogitport
struct Grepogitport { // gclidb.Grepogitport: Default ports for repositories
    algo::Smallstr50   grepogitport;   // grepo git host
    algo::cstring      port;           // ssh port for config
    algo::Comment      comment;        //
    // func:gclidb.Grepogitport..Ctor
    inline               Grepogitport() __attribute__((nothrow));
};

// func:gclidb.Grepogitport..ReadFieldMaybe
bool                 Grepogitport_ReadFieldMaybe(gclidb::Grepogitport& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Grepogitport from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Grepogitport..ReadStrptrMaybe
bool                 Grepogitport_ReadStrptrMaybe(gclidb::Grepogitport &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Grepogitport.String  printfmt:Tuple
// func:gclidb.Grepogitport..Print
void                 Grepogitport_Print(gclidb::Grepogitport& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Grepossh
struct Grepossh { // gclidb.Grepossh: Ssh key table
    algo::Smallstr50    grepossh;   // grepo project/repo name
    algo::Smallstr200   sshid;      // ssh id key name for ssh config
    algo::Comment       comment;    //
    // func:gclidb.Grepossh..Ctor
    inline               Grepossh() __attribute__((nothrow));
};

// func:gclidb.Grepossh.name.Get
algo::cstring        name_Get(gclidb::Grepossh& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Grepossh.name.Get2
algo::cstring        Grepossh_name_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Grepossh..ReadFieldMaybe
bool                 Grepossh_ReadFieldMaybe(gclidb::Grepossh& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Grepossh from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Grepossh..ReadStrptrMaybe
bool                 Grepossh_ReadStrptrMaybe(gclidb::Grepossh &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Grepossh.String  printfmt:Tuple
// func:gclidb.Grepossh..Print
void                 Grepossh_Print(gclidb::Grepossh& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gstate
struct Gstate { // gclidb.Gstate: Issue/MR state list
    algo::Smallstr50   gstate;    //
    algo::Comment      comment;   //
    // func:gclidb.Gstate..Ctor
    inline               Gstate() __attribute__((nothrow));
};

// func:gclidb.Gstate.st.Get
algo::cstring        st_Get(gclidb::Gstate& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gstate.st.Get2
algo::cstring        Gstate_st_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gstate.state.Get
algo::cstring        state_Get(gclidb::Gstate& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gstate.state.Get2
algo::cstring        Gstate_state_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gstate..Concat_st_state
tempstr              Gstate_Concat_st_state( const algo::strptr& st ,const algo::strptr& state );
// func:gclidb.Gstate..ReadFieldMaybe
bool                 Gstate_ReadFieldMaybe(gclidb::Gstate& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gstate from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gstate..ReadStrptrMaybe
bool                 Gstate_ReadStrptrMaybe(gclidb::Gstate &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gstate.String  printfmt:Tuple
// func:gclidb.Gstate..Print
void                 Gstate_Print(gclidb::Gstate& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gstatet
struct Gstatet { // gclidb.Gstatet: Internal
    algo::Smallstr50   gstatet;   //
    algo::cstring      state;     //
    // func:gclidb.Gstatet..Ctor
    inline               Gstatet() __attribute__((nothrow));
};

// func:gclidb.Gstatet.gtype.Get
algo::Smallstr50     gtype_Get(gclidb::Gstatet& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gstatet.gtype.Get2
algo::Smallstr50     Gstatet_gtype_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gstatet.gstate.Get
algo::Smallstr50     gstate_Get(gclidb::Gstatet& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gstatet.gstate.Get2
algo::Smallstr50     Gstatet_gstate_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gstatet..Concat_gstate_gtype
tempstr              Gstatet_Concat_gstate_gtype( const algo::strptr& gstate ,const algo::strptr& gtype );
// func:gclidb.Gstatet..ReadFieldMaybe
bool                 Gstatet_ReadFieldMaybe(gclidb::Gstatet& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gstatet from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gstatet..ReadStrptrMaybe
bool                 Gstatet_ReadStrptrMaybe(gclidb::Gstatet &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gstatet.String  printfmt:Tuple
// func:gclidb.Gstatet..Print
void                 Gstatet_Print(gclidb::Gstatet& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtbl
struct Gtbl { // gclidb.Gtbl: Supported gcli tables
    algo::Smallstr250   gtbl;      //
    algo::Comment       comment;   //
    // func:gclidb.Gtbl..Ctor
    inline               Gtbl() __attribute__((nothrow));
};

// func:gclidb.Gtbl..ReadFieldMaybe
bool                 Gtbl_ReadFieldMaybe(gclidb::Gtbl& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtbl from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtbl..ReadStrptrMaybe
bool                 Gtbl_ReadStrptrMaybe(gclidb::Gtbl &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gtbl.String  printfmt:Tuple
// func:gclidb.Gtbl..Print
void                 Gtbl_Print(gclidb::Gtbl& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtblact
struct Gtblact { // gclidb.Gtblact
    algo::Smallstr50   gtblact;   //
    bool               t;         //   false
    bool               e;         //   false
    bool               auth;      //   false
    // func:gclidb.Gtblact..Ctor
    inline               Gtblact() __attribute__((nothrow));
};

// func:gclidb.Gtblact.gtbl.Get
algo::Smallstr250    gtbl_Get(gclidb::Gtblact& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblact.gtbl.Get2
algo::Smallstr250    Gtblact_gtbl_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblact.gact.Get
algo::Smallstr50     gact_Get(gclidb::Gtblact& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblact.gact.Get2
algo::Smallstr50     Gtblact_gact_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblact..Concat_gtbl_gact
tempstr              Gtblact_Concat_gtbl_gact( const algo::strptr& gtbl ,const algo::strptr& gact );
// func:gclidb.Gtblact..ReadFieldMaybe
bool                 Gtblact_ReadFieldMaybe(gclidb::Gtblact& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtblact from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtblact..ReadStrptrMaybe
bool                 Gtblact_ReadStrptrMaybe(gclidb::Gtblact &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gtblact..Init
inline void          Gtblact_Init(gclidb::Gtblact& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gtblact.String  printfmt:Tuple
// func:gclidb.Gtblact..Print
void                 Gtblact_Print(gclidb::Gtblact& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtblactfld
struct Gtblactfld { // gclidb.Gtblactfld: List of available for each table & action combination
    algo::Smallstr50   gtblactfld;        //
    algo::cstring      dflt;              //
    bool               field_name_dflt;   //   false
    bool               optional;          //   false
    bool               regx;              //   false
    algo::Comment      comment;           //
    // func:gclidb.Gtblactfld..Ctor
    inline               Gtblactfld() __attribute__((nothrow));
};

// func:gclidb.Gtblactfld.gtblact.Get
algo::Smallstr50     gtblact_Get(gclidb::Gtblactfld& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblactfld.gtblact.Get2
algo::Smallstr50     Gtblactfld_gtblact_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblactfld.field.Get
algo::Smallstr50     field_Get(gclidb::Gtblactfld& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblactfld.field.Get2
algo::Smallstr50     Gtblactfld_field_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblactfld..Concat_gtblact_field
tempstr              Gtblactfld_Concat_gtblact_field( const algo::strptr& gtblact ,const algo::strptr& field );
// func:gclidb.Gtblactfld..ReadFieldMaybe
bool                 Gtblactfld_ReadFieldMaybe(gclidb::Gtblactfld& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtblactfld from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtblactfld..ReadStrptrMaybe
bool                 Gtblactfld_ReadStrptrMaybe(gclidb::Gtblactfld &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gtblactfld..Init
inline void          Gtblactfld_Init(gclidb::Gtblactfld& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gtblactfld.String  printfmt:Tuple
// func:gclidb.Gtblactfld..Print
void                 Gtblactfld_Print(gclidb::Gtblactfld& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtblacttst
struct Gtblacttst { // gclidb.Gtblacttst
    algo::Smallstr250   gtblacttst;   //
    bool                working;      //   true
    algo::cstring       cmd;          //
    algo::Comment       comment;      //
    // func:gclidb.Gtblacttst..Ctor
    inline               Gtblacttst() __attribute__((nothrow));
};

// func:gclidb.Gtblacttst.gtblact.Get
algo::Smallstr50     gtblact_Get(gclidb::Gtblacttst& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblacttst.gtblact.Get2
algo::Smallstr50     Gtblacttst_gtblact_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblacttst.gclienv.Get
algo::Smallstr50     gclienv_Get(gclidb::Gtblacttst& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblacttst.gclienv.Get2
algo::Smallstr50     Gtblacttst_gclienv_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblacttst.t.Get
algo::cstring        t_Get(gclidb::Gtblacttst& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblacttst.t.Get2
algo::cstring        Gtblacttst_t_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblacttst..ReadFieldMaybe
bool                 Gtblacttst_ReadFieldMaybe(gclidb::Gtblacttst& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtblacttst from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtblacttst..ReadStrptrMaybe
bool                 Gtblacttst_ReadStrptrMaybe(gclidb::Gtblacttst &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.Gtblacttst..Init
inline void          Gtblacttst_Init(gclidb::Gtblacttst& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.Gtblacttst.String  printfmt:Tuple
// func:gclidb.Gtblacttst..Print
void                 Gtblacttst_Print(gclidb::Gtblacttst& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtblacttstout
struct Gtblacttstout { // gclidb.Gtblacttstout
    algo::Smallstr250   gtblacttstout;   //
    algo::cstring       text;            //
    // func:gclidb.Gtblacttstout..Ctor
    inline               Gtblacttstout() __attribute__((nothrow));
};

// func:gclidb.Gtblacttstout.gtblacttst.Get
algo::Smallstr250    gtblacttst_Get(gclidb::Gtblacttstout& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblacttstout.gtblacttst.Get2
algo::Smallstr250    Gtblacttstout_gtblacttst_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblacttstout.out.Get
algo::cstring        out_Get(gclidb::Gtblacttstout& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtblacttstout.out.Get2
algo::cstring        Gtblacttstout_out_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtblacttstout..Concat_gtblacttst_out
tempstr              Gtblacttstout_Concat_gtblacttst_out( const algo::strptr& gtblacttst ,const algo::strptr& out );
// func:gclidb.Gtblacttstout..ReadFieldMaybe
bool                 Gtblacttstout_ReadFieldMaybe(gclidb::Gtblacttstout& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtblacttstout from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtblacttstout..ReadStrptrMaybe
bool                 Gtblacttstout_ReadStrptrMaybe(gclidb::Gtblacttstout &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gtblacttstout.String  printfmt:Tuple
// func:gclidb.Gtblacttstout..Print
void                 Gtblacttstout_Print(gclidb::Gtblacttstout& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtype
struct Gtype { // gclidb.Gtype: Platform type (ghp=github; glpat=gitlab)
    algo::Smallstr50   gtype;         //
    algo::cstring      default_url;   //
    algo::Comment      comment;       //
    // func:gclidb.Gtype..Ctor
    inline               Gtype() __attribute__((nothrow));
};

// func:gclidb.Gtype..ReadFieldMaybe
bool                 Gtype_ReadFieldMaybe(gclidb::Gtype& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtype from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtype..ReadStrptrMaybe
bool                 Gtype_ReadStrptrMaybe(gclidb::Gtype &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gtype.String  printfmt:Tuple
// func:gclidb.Gtype..Print
void                 Gtype_Print(gclidb::Gtype& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtypeh
struct Gtypeh { // gclidb.Gtypeh: HTTP heaaderes for user with platform
    algo::Smallstr250   gtypeh;   //
    algo::cstring       header;   //
    // func:gclidb.Gtypeh..Ctor
    inline               Gtypeh() __attribute__((nothrow));
};

// func:gclidb.Gtypeh.gtype.Get
algo::Smallstr50     gtype_Get(gclidb::Gtypeh& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtypeh.gtype.Get2
algo::Smallstr50     Gtypeh_gtype_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtypeh.name.Get
algo::cstring        name_Get(gclidb::Gtypeh& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtypeh.name.Get2
algo::cstring        Gtypeh_name_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtypeh..Concat_gtype_name
tempstr              Gtypeh_Concat_gtype_name( const algo::strptr& gtype ,const algo::strptr& name );
// func:gclidb.Gtypeh..ReadFieldMaybe
bool                 Gtypeh_ReadFieldMaybe(gclidb::Gtypeh& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtypeh from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtypeh..ReadStrptrMaybe
bool                 Gtypeh_ReadStrptrMaybe(gclidb::Gtypeh &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gtypeh.String  printfmt:Tuple
// func:gclidb.Gtypeh..Print
void                 Gtypeh_Print(gclidb::Gtypeh& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Gtypeprefix
struct Gtypeprefix { // gclidb.Gtypeprefix: Token prefix mapping to platform
    algo::Smallstr50   gtypeprefix;   //
    algo::Comment      comment;       //
    // func:gclidb.Gtypeprefix..Ctor
    inline               Gtypeprefix() __attribute__((nothrow));
};

// func:gclidb.Gtypeprefix.gtype.Get
algo::Smallstr50     gtype_Get(gclidb::Gtypeprefix& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtypeprefix.gtype.Get2
algo::Smallstr50     Gtypeprefix_gtype_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtypeprefix.prefix.Get
algo::cstring        prefix_Get(gclidb::Gtypeprefix& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Gtypeprefix.prefix.Get2
algo::cstring        Gtypeprefix_prefix_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Gtypeprefix..Concat_gtype_prefix
tempstr              Gtypeprefix_Concat_gtype_prefix( const algo::strptr& gtype ,const algo::strptr& prefix );
// func:gclidb.Gtypeprefix..ReadFieldMaybe
bool                 Gtypeprefix_ReadFieldMaybe(gclidb::Gtypeprefix& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Gtypeprefix from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Gtypeprefix..ReadStrptrMaybe
bool                 Gtypeprefix_ReadStrptrMaybe(gclidb::Gtypeprefix &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Gtypeprefix.String  printfmt:Tuple
// func:gclidb.Gtypeprefix..Print
void                 Gtypeprefix_Print(gclidb::Gtypeprefix& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Issue
struct Issue { // gclidb.Issue: Gitlab project issue
    algo::Smallstr50   issue;           // Identifier. must be in form project.iid
    algo::Smallstr50   assignee;        // User the issue is assigned to
    algo::cstring      labels;          // issue labels - comma-separated list
    algo::cstring      milestone_iid;   // issue milestone, blank if none
    algo::cstring      milestone_num;   // issue milestone, blank if none
    algo::cstring      milestone;       // issue milestone name, blank if none
    algo::cstring      title;           // issue title
    algo::cstring      author;          // issue author
    algo::cstring      state;           // issue state
    algo::cstring      mr;              // mr issue
    algo::cstring      description;     // issue description
    // func:gclidb.Issue..Ctor
    inline               Issue() __attribute__((nothrow));
};

// func:gclidb.Issue.project.Get
algo::Smallstr50     project_Get(gclidb::Issue& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issue.project.Get2
algo::Smallstr50     Issue_project_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issue.iid.Get
algo::cstring        iid_Get(gclidb::Issue& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issue.iid.Get2
algo::cstring        Issue_iid_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issue..Concat_project_iid
tempstr              Issue_Concat_project_iid( const algo::strptr& project ,const algo::strptr& iid );
// func:gclidb.Issue..ReadFieldMaybe
bool                 Issue_ReadFieldMaybe(gclidb::Issue& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Issue from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Issue..ReadStrptrMaybe
bool                 Issue_ReadStrptrMaybe(gclidb::Issue &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Issue.String  printfmt:Tuple
// func:gclidb.Issue..Print
void                 Issue_Print(gclidb::Issue& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Issuenote
struct Issuenote { // gclidb.Issuenote: Issue note
    algo::Smallstr250   issuenote;   // Identifier. must be in form issue.id
    algo::cstring       note;        // Body of issue note
    algo::cstring       system;      // System or user note (glab only)
    algo::cstring       author;      // Authtor of issue note
    // func:gclidb.Issuenote..Ctor
    inline               Issuenote() __attribute__((nothrow));
};

// func:gclidb.Issuenote.issue.Get
algo::Smallstr50     issue_Get(gclidb::Issuenote& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issuenote.issue.Get2
algo::Smallstr50     Issuenote_issue_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issuenote.nid.Get
algo::cstring        nid_Get(gclidb::Issuenote& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issuenote.nid.Get2
algo::cstring        Issuenote_nid_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issuenote..Concat_issue_nid
tempstr              Issuenote_Concat_issue_nid( const algo::strptr& issue ,const algo::strptr& nid );
// func:gclidb.Issuenote..ReadFieldMaybe
bool                 Issuenote_ReadFieldMaybe(gclidb::Issuenote& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Issuenote from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Issuenote..ReadStrptrMaybe
bool                 Issuenote_ReadStrptrMaybe(gclidb::Issuenote &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Issuenote.String  printfmt:Tuple
// func:gclidb.Issuenote..Print
void                 Issuenote_Print(gclidb::Issuenote& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Issuepipeline
struct Issuepipeline { // gclidb.Issuepipeline: Issue pipeline
    algo::Smallstr250   issuepipeline;   // Identifier. must be in form issue.id
    algo::cstring       id_in;           // Id portion of issue pipeline
    algo::cstring       status;          // Id portion of issue pipeline
    // func:gclidb.Issuepipeline..Ctor
    inline               Issuepipeline() __attribute__((nothrow));
};

// func:gclidb.Issuepipeline.issue.Get
algo::Smallstr50     issue_Get(gclidb::Issuepipeline& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issuepipeline.issue.Get2
algo::Smallstr50     Issuepipeline_issue_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issuepipeline.id.Get
algo::cstring        id_Get(gclidb::Issuepipeline& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Issuepipeline.id.Get2
algo::cstring        Issuepipeline_id_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Issuepipeline..Concat_issue_id
tempstr              Issuepipeline_Concat_issue_id( const algo::strptr& issue ,const algo::strptr& id );
// func:gclidb.Issuepipeline..ReadFieldMaybe
bool                 Issuepipeline_ReadFieldMaybe(gclidb::Issuepipeline& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Issuepipeline from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Issuepipeline..ReadStrptrMaybe
bool                 Issuepipeline_ReadStrptrMaybe(gclidb::Issuepipeline &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Issuepipeline.String  printfmt:Tuple
// func:gclidb.Issuepipeline..Print
void                 Issuepipeline_Print(gclidb::Issuepipeline& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Label
struct Label { // gclidb.Label: List of labels for gitlab/github
    algo::Smallstr50   label;     //
    algo::Comment      comment;   //
    // func:gclidb.Label..Ctor
    inline               Label() __attribute__((nothrow));
};

// func:gclidb.Label..ReadFieldMaybe
bool                 Label_ReadFieldMaybe(gclidb::Label& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Label from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Label..ReadStrptrMaybe
bool                 Label_ReadStrptrMaybe(gclidb::Label &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Label.String  printfmt:Tuple
// func:gclidb.Label..Print
void                 Label_Print(gclidb::Label& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Milestone
struct Milestone { // gclidb.Milestone: Gclidb project milestone
    algo::Smallstr200   milestone;     // Milestone id
    algo::cstring       description;   // Milestone description
    algo::cstring       title;         // Milestone title
    // func:gclidb.Milestone..Ctor
    inline               Milestone() __attribute__((nothrow));
};

// func:gclidb.Milestone.project.Get
algo::Smallstr50     project_Get(gclidb::Milestone& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Milestone.project.Get2
algo::Smallstr50     Milestone_project_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Milestone.iid.Get
algo::cstring        iid_Get(gclidb::Milestone& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Milestone.iid.Get2
algo::cstring        Milestone_iid_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Milestone..Concat_project_iid
tempstr              Milestone_Concat_project_iid( const algo::strptr& project ,const algo::strptr& iid );
// func:gclidb.Milestone..ReadFieldMaybe
bool                 Milestone_ReadFieldMaybe(gclidb::Milestone& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Milestone from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Milestone..ReadStrptrMaybe
bool                 Milestone_ReadStrptrMaybe(gclidb::Milestone &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Milestone.String  printfmt:Tuple
// func:gclidb.Milestone..Print
void                 Milestone_Print(gclidb::Milestone& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Mr
struct Mr { // gclidb.Mr: Gitlab project mr
    algo::Smallstr150   mr;                // Identifier. must be in form project.iid
    algo::cstring       state;             // Mr state
    algo::cstring       title;             // Mr title
    algo::cstring       description;       // Mr description
    algo::cstring       source_branch;     // Source branch
    algo::cstring       source_repo;       // Source branch
    algo::cstring       reviewer;          // Reviewer username
    algo::cstring       author;            // Author username
    algo::Smallstr20    pipeline_status;   // Pipeline status
    algo::cstring       pipeline_id;       // Pipeline id
    algo::cstring       draft;             // Some draft status
    algo::cstring       node_id;           // Node id for graphQL
    // func:gclidb.Mr..Ctor
    inline               Mr() __attribute__((nothrow));
};

// func:gclidb.Mr.proj.Get
algo::Smallstr50     proj_Get(gclidb::Mr& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mr.proj.Get2
algo::Smallstr50     Mr_proj_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mr.iid.Get
algo::cstring        iid_Get(gclidb::Mr& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mr.iid.Get2
algo::cstring        Mr_iid_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mr..Concat_proj_iid
tempstr              Mr_Concat_proj_iid( const algo::strptr& proj ,const algo::strptr& iid );
// func:gclidb.Mr..ReadFieldMaybe
bool                 Mr_ReadFieldMaybe(gclidb::Mr& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Mr from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Mr..ReadStrptrMaybe
bool                 Mr_ReadStrptrMaybe(gclidb::Mr &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Mr.String  printfmt:Tuple
// func:gclidb.Mr..Print
void                 Mr_Print(gclidb::Mr& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Mrjob
struct Mrjob { // gclidb.Mrjob: Mr job
    algo::Smallstr250   mrjob;         // Identifier. must be in form mr.id
    algo::Smallstr150   ref;           // Mr portion of mr job
    algo::cstring       id;            // Job ID
    algo::cstring       name;          // Job name
    algo::cstring       pipeline_id;   // Pipeline id
    algo::cstring       status;        //
    algo::cstring       runner;        //
    // func:gclidb.Mrjob..Ctor
    inline               Mrjob() __attribute__((nothrow));
};

// func:gclidb.Mrjob.mr.Get
algo::Smallstr150    mr_Get(gclidb::Mrjob& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mrjob.mr.Get2
algo::Smallstr150    Mrjob_mr_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mrjob.job.Get
algo::cstring        job_Get(gclidb::Mrjob& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mrjob.job.Get2
algo::cstring        Mrjob_job_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mrjob..Concat_mr_job
tempstr              Mrjob_Concat_mr_job( const algo::strptr& mr ,const algo::strptr& job );
// func:gclidb.Mrjob..ReadFieldMaybe
bool                 Mrjob_ReadFieldMaybe(gclidb::Mrjob& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Mrjob from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Mrjob..ReadStrptrMaybe
bool                 Mrjob_ReadStrptrMaybe(gclidb::Mrjob &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Mrjob.String  printfmt:Tuple
// func:gclidb.Mrjob..Print
void                 Mrjob_Print(gclidb::Mrjob& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Mrnote
struct Mrnote { // gclidb.Mrnote: Issue note
    algo::cstring       system;   // System or user note (glab only)
    algo::Smallstr250   mrnote;   // Identifier. must be in form issue.id
    algo::cstring       note;     // Body of mr note
    algo::cstring       author;   // Authtor of mr note
    // func:gclidb.Mrnote..Ctor
    inline               Mrnote() __attribute__((nothrow));
};

// func:gclidb.Mrnote.nid.Get
algo::cstring        nid_Get(gclidb::Mrnote& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mrnote.nid.Get2
algo::cstring        Mrnote_nid_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mrnote.mr.Get
algo::Smallstr150    mr_Get(gclidb::Mrnote& parent) __attribute__((__warn_unused_result__, nothrow));
// func:gclidb.Mrnote.mr.Get2
algo::Smallstr150    Mrnote_mr_Get(algo::strptr arg) __attribute__((nothrow));

// func:gclidb.Mrnote..Concat_mr_nid
tempstr              Mrnote_Concat_mr_nid( const algo::strptr& mr ,const algo::strptr& nid );
// func:gclidb.Mrnote..ReadFieldMaybe
bool                 Mrnote_ReadFieldMaybe(gclidb::Mrnote& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::Mrnote from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.Mrnote..ReadStrptrMaybe
bool                 Mrnote_ReadStrptrMaybe(gclidb::Mrnote &parent, algo::strptr in_str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:gclidb.Mrnote.String  printfmt:Tuple
// func:gclidb.Mrnote..Print
void                 Mrnote_Print(gclidb::Mrnote& row, algo::cstring& str) __attribute__((nothrow));

// --- gclidb.Project
struct Project { // gclidb.Project: Gitlab project mr
    algo::Smallstr50   project;   // Identifier
    // func:gclidb.Project..Ctor
    inline               Project() __attribute__((nothrow));
};


// --- gclidb.User
struct User { // gclidb.User
    algo::Smallstr50   user;   //
    u32                id;     //   0
    algo::cstring      name;   //
    // func:gclidb.User..Ctor
    inline               User() __attribute__((nothrow));
};

// func:gclidb.User..ReadFieldMaybe
bool                 User_ReadFieldMaybe(gclidb::User& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of gclidb::User from an ascii string.
// The format of the string is an ssim Tuple
// func:gclidb.User..ReadStrptrMaybe
bool                 User_ReadStrptrMaybe(gclidb::User &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:gclidb.User..Init
inline void          User_Init(gclidb::User& parent);
// print string representation of ROW to string STR
// cfmt:gclidb.User.String  printfmt:Tuple
// func:gclidb.User..Print
void                 User_Print(gclidb::User& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace gclidb { // gen:ns_func
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::FieldId &row);// cfmt:gclidb.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gact &row);// cfmt:gclidb.Gact.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gatv &row);// cfmt:gclidb.Gatv.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclicmd &row);// cfmt:gclidb.Gclicmd.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclicmdf2j &row);// cfmt:gclidb.Gclicmdf2j.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclicmdt &row);// cfmt:gclidb.Gclicmdt.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclienv &row);// cfmt:gclidb.Gclienv.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclienvsub &row);// cfmt:gclidb.Gclienvsub.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gclisub &row);// cfmt:gclidb.Gclisub.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gfld &row);// cfmt:gclidb.Gfld.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gmethod &row);// cfmt:gclidb.Gmethod.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Grepo &row);// cfmt:gclidb.Grepo.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Grepogitport &row);// cfmt:gclidb.Grepogitport.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Grepossh &row);// cfmt:gclidb.Grepossh.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gstate &row);// cfmt:gclidb.Gstate.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gstatet &row);// cfmt:gclidb.Gstatet.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtbl &row);// cfmt:gclidb.Gtbl.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtblact &row);// cfmt:gclidb.Gtblact.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtblactfld &row);// cfmt:gclidb.Gtblactfld.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtblacttst &row);// cfmt:gclidb.Gtblacttst.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtblacttstout &row);// cfmt:gclidb.Gtblacttstout.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtype &row);// cfmt:gclidb.Gtype.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtypeh &row);// cfmt:gclidb.Gtypeh.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Gtypeprefix &row);// cfmt:gclidb.Gtypeprefix.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Issue &row);// cfmt:gclidb.Issue.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Issuenote &row);// cfmt:gclidb.Issuenote.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Issuepipeline &row);// cfmt:gclidb.Issuepipeline.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Label &row);// cfmt:gclidb.Label.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Milestone &row);// cfmt:gclidb.Milestone.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Mr &row);// cfmt:gclidb.Mr.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Mrjob &row);// cfmt:gclidb.Mrjob.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::Mrnote &row);// cfmt:gclidb.Mrnote.String
inline algo::cstring &operator <<(algo::cstring &str, const gclidb::User &row);// cfmt:gclidb.User.String
}
