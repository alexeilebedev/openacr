//
// include/gen/command_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- command_FieldIdEnum

enum command_FieldIdEnum {                             // command.FieldId.value
     command_FieldId_target                     = 0
    ,command_FieldId_in                         = 1
    ,command_FieldId_cfg                        = 2
    ,command_FieldId_compiler                   = 3
    ,command_FieldId_uname                      = 4
    ,command_FieldId_arch                       = 5
    ,command_FieldId_ood                        = 6
    ,command_FieldId_list                       = 7
    ,command_FieldId_listincl                   = 8
    ,command_FieldId_build                      = 9
    ,command_FieldId_preproc                    = 10
    ,command_FieldId_srcfile                    = 11
    ,command_FieldId_clean                      = 12
    ,command_FieldId_dry_run                    = 13
    ,command_FieldId_maxjobs                    = 14
    ,command_FieldId_printcmd                   = 15
    ,command_FieldId_force                      = 16
    ,command_FieldId_install                    = 17
    ,command_FieldId_coverity                   = 18
    ,command_FieldId_package                    = 19
    ,command_FieldId_maxerr                     = 20
    ,command_FieldId_disas                      = 21
    ,command_FieldId_report                     = 22
    ,command_FieldId_jcdb                       = 23
    ,command_FieldId_cache                      = 24
    ,command_FieldId_shortlink                  = 25
    ,command_FieldId_readme                     = 26
    ,command_FieldId_ns                         = 27
    ,command_FieldId_section                    = 28
    ,command_FieldId_update                     = 29
    ,command_FieldId_check                      = 30
    ,command_FieldId_link                       = 31
    ,command_FieldId_anchor                     = 32
    ,command_FieldId_print                      = 33
    ,command_FieldId_external                   = 34
    ,command_FieldId_evalcmd                    = 35
    ,command_FieldId_query                      = 36
    ,command_FieldId_where                      = 37
    ,command_FieldId_del                        = 38
    ,command_FieldId_sel                        = 39
    ,command_FieldId_insert                     = 40
    ,command_FieldId_replace                    = 41
    ,command_FieldId_merge                      = 42
    ,command_FieldId_unused                     = 43
    ,command_FieldId_trunc                      = 44
    ,command_FieldId_selerr                     = 45
    ,command_FieldId_maxshow                    = 46
    ,command_FieldId_write                      = 47
    ,command_FieldId_rename                     = 48
    ,command_FieldId_nup                        = 49
    ,command_FieldId_ndown                      = 50
    ,command_FieldId_l                          = 51
    ,command_FieldId_xref                       = 52
    ,command_FieldId_fldfunc                    = 53
    ,command_FieldId_maxgroup                   = 54
    ,command_FieldId_pretty                     = 55
    ,command_FieldId_tree                       = 56
    ,command_FieldId_loose                      = 57
    ,command_FieldId_my                         = 58
    ,command_FieldId_schema                     = 59
    ,command_FieldId_e                          = 60
    ,command_FieldId_t                          = 61
    ,command_FieldId_g                          = 62
    ,command_FieldId_x                          = 63
    ,command_FieldId_rowid                      = 64
    ,command_FieldId_cmt                        = 65
    ,command_FieldId_cmd                        = 66
    ,command_FieldId_field                      = 67
    ,command_FieldId_regxof                     = 68
    ,command_FieldId_meta                       = 69
    ,command_FieldId_data                       = 70
    ,command_FieldId_line                       = 71
    ,command_FieldId_point                      = 72
    ,command_FieldId_type                       = 73
    ,command_FieldId_debug_log                  = 74
    ,command_FieldId_arg                        = 75
    ,command_FieldId_write_ours                 = 76
    ,command_FieldId_msize                      = 77
    ,command_FieldId_create                     = 78
    ,command_FieldId_finput                     = 79
    ,command_FieldId_foutput                    = 80
    ,command_FieldId_gstatic                    = 81
    ,command_FieldId_indexed                    = 82
    ,command_FieldId_nstype                     = 83
    ,command_FieldId_ctype                      = 84
    ,command_FieldId_pooltype                   = 85
    ,command_FieldId_ssimfile                   = 86
    ,command_FieldId_subset                     = 87
    ,command_FieldId_subset2                    = 88
    ,command_FieldId_separator                  = 89
    ,command_FieldId_dflt                       = 90
    ,command_FieldId_anon                       = 91
    ,command_FieldId_bigend                     = 92
    ,command_FieldId_cascdel                    = 93
    ,command_FieldId_before                     = 94
    ,command_FieldId_substr                     = 95
    ,command_FieldId_alias                      = 96
    ,command_FieldId_srcfield                   = 97
    ,command_FieldId_fstep                      = 98
    ,command_FieldId_inscond                    = 99
    ,command_FieldId_reftype                    = 100
    ,command_FieldId_hashfld                    = 101
    ,command_FieldId_sortfld                    = 102
    ,command_FieldId_unittest                   = 103
    ,command_FieldId_citest                     = 104
    ,command_FieldId_cppfunc                    = 105
    ,command_FieldId_via                        = 106
    ,command_FieldId_comment                    = 107
    ,command_FieldId_sandbox                    = 108
    ,command_FieldId_test                       = 109
    ,command_FieldId_showcpp                    = 110
    ,command_FieldId_msgtype                    = 111
    ,command_FieldId_anonfld                    = 112
    ,command_FieldId_sigcheck                   = 113
    ,command_FieldId_data_dir                   = 114
    ,command_FieldId_related                    = 115
    ,command_FieldId_notssimfile                = 116
    ,command_FieldId_checkable                  = 117
    ,command_FieldId_r                          = 118
    ,command_FieldId_nsdb                       = 119
    ,command_FieldId_fkey                       = 120
    ,command_FieldId_start                      = 121
    ,command_FieldId_stop                       = 122
    ,command_FieldId_abort                      = 123
    ,command_FieldId_shell                      = 124
    ,command_FieldId_serv                       = 125
    ,command_FieldId_in_dir                     = 126
    ,command_FieldId_out_dir                    = 127
    ,command_FieldId_proto                      = 128
    ,command_FieldId_trace                      = 129
    ,command_FieldId_key                        = 130
    ,command_FieldId_include                    = 131
    ,command_FieldId_dot                        = 132
    ,command_FieldId_xns                        = 133
    ,command_FieldId_noinput                    = 134
    ,command_FieldId_render                     = 135
    ,command_FieldId_id                         = 136
    ,command_FieldId_file_prefix                = 137
    ,command_FieldId_nchild                     = 138
    ,command_FieldId_blocking                   = 139
    ,command_FieldId_nmsg                       = 140
    ,command_FieldId_timeout                    = 141
    ,command_FieldId_recvdelay_ns               = 142
    ,command_FieldId_senddelay_ns               = 143
    ,command_FieldId_msgsize_min                = 144
    ,command_FieldId_msgsize_max                = 145
    ,command_FieldId_bufsize                    = 146
    ,command_FieldId_recvdelay                  = 147
    ,command_FieldId_pkgdata                    = 148
    ,command_FieldId_diff                       = 149
    ,command_FieldId_push                       = 150
    ,command_FieldId_remove                     = 151
    ,command_FieldId_origin                     = 152
    ,command_FieldId_ref                        = 153
    ,command_FieldId_showrec                    = 154
    ,command_FieldId_showfile                   = 155
    ,command_FieldId_R                          = 156
    ,command_FieldId_reset                      = 157
    ,command_FieldId_checkclean                 = 158
    ,command_FieldId_stat                       = 159
    ,command_FieldId_annotate                   = 160
    ,command_FieldId_data_in                    = 161
    ,command_FieldId_binpath                    = 162
    ,command_FieldId_amctest                    = 163
    ,command_FieldId_dofork                     = 164
    ,command_FieldId_q                          = 165
    ,command_FieldId_cijob                      = 166
    ,command_FieldId_capture                    = 167
    ,command_FieldId_exec                       = 168
    ,command_FieldId_astr                       = 169
    ,command_FieldId_anum                       = 170
    ,command_FieldId_adbl                       = 171
    ,command_FieldId_aflag                      = 172
    ,command_FieldId_str                        = 173
    ,command_FieldId_num                        = 174
    ,command_FieldId_dbl                        = 175
    ,command_FieldId_flag                       = 176
    ,command_FieldId_dstr                       = 177
    ,command_FieldId_dnum                       = 178
    ,command_FieldId_ddbl                       = 179
    ,command_FieldId_dflag                      = 180
    ,command_FieldId_mstr                       = 181
    ,command_FieldId_mnum                       = 182
    ,command_FieldId_mdbl                       = 183
    ,command_FieldId_amnum                      = 184
    ,command_FieldId_fconst                     = 185
    ,command_FieldId_cconst                     = 186
    ,command_FieldId_dregx                      = 187
    ,command_FieldId_dpkey                      = 188
    ,command_FieldId_comptest                   = 189
    ,command_FieldId_mdbg                       = 190
    ,command_FieldId_run                        = 191
    ,command_FieldId_printinput                 = 192
    ,command_FieldId_normalize                  = 193
    ,command_FieldId_covcapture                 = 194
    ,command_FieldId_covcheck                   = 195
    ,command_FieldId_compdir                    = 196
    ,command_FieldId_check_untracked            = 197
    ,command_FieldId_memcheck                   = 198
    ,command_FieldId_callgrind                  = 199
    ,command_FieldId_stream                     = 200
    ,command_FieldId_i                          = 201
    ,command_FieldId_b                          = 202
    ,command_FieldId_covdir                     = 203
    ,command_FieldId_logfile                    = 204
    ,command_FieldId_runcmd                     = 205
    ,command_FieldId_exclude                    = 206
    ,command_FieldId_mergepath                  = 207
    ,command_FieldId_gcov                       = 208
    ,command_FieldId_ssim                       = 209
    ,command_FieldId_xmlpretty                  = 210
    ,command_FieldId_summary                    = 211
    ,command_FieldId_reprofile                  = 212
    ,command_FieldId_args                       = 213
    ,command_FieldId_inputfile                  = 214
    ,command_FieldId_fuzzstrat                  = 215
    ,command_FieldId_seed                       = 216
    ,command_FieldId_testprob                   = 217
    ,command_FieldId_gtblacttst                 = 218
    ,command_FieldId_mr                         = 219
    ,command_FieldId_note                       = 220
    ,command_FieldId_skip_init                  = 221
    ,command_FieldId_skip_git_init              = 222
    ,command_FieldId_ncmd                       = 223
    ,command_FieldId_nofork                     = 224
    ,command_FieldId_perf_secs                  = 225
    ,command_FieldId_pertest_timeout            = 226
    ,command_FieldId_stats                      = 227
    ,command_FieldId_enable                     = 228
    ,command_FieldId_disable                    = 229
    ,command_FieldId_gc                         = 230
    ,command_FieldId_dir                        = 231
    ,command_FieldId_hitrate                    = 232
    ,command_FieldId_after                      = 233
    ,command_FieldId_selector                   = 234
    ,command_FieldId_fields                     = 235
    ,command_FieldId_accept                     = 236
    ,command_FieldId_approve                    = 237
    ,command_FieldId_needs_work                 = 238
    ,command_FieldId_authdir                    = 239
    ,command_FieldId_gitdir                     = 240
    ,command_FieldId_show_gitlab_system_notes   = 241
    ,command_FieldId_attach                     = 242
    ,command_FieldId_catchthrow                 = 243
    ,command_FieldId_tui                        = 244
    ,command_FieldId_bcmd                       = 245
    ,command_FieldId_emacs                      = 246
    ,command_FieldId_manywin                    = 247
    ,command_FieldId_follow_child               = 248
    ,command_FieldId_py                         = 249
    ,command_FieldId_writessimfile              = 250
    ,command_FieldId_url                        = 251
    ,command_FieldId_tables                     = 252
    ,command_FieldId_nologo                     = 253
    ,command_FieldId_baddbok                    = 254
    ,command_FieldId_move                       = 255
    ,command_FieldId_dedup                      = 256
    ,command_FieldId_commit                     = 257
    ,command_FieldId_undo                       = 258
    ,command_FieldId_hash                       = 259
    ,command_FieldId_expr                       = 260
    ,command_FieldId_style                      = 261
    ,command_FieldId_match                      = 262
    ,command_FieldId_string                     = 263
    ,command_FieldId_show                       = 264
    ,command_FieldId_name                       = 265
    ,command_FieldId_files                      = 266
    ,command_FieldId_refs                       = 267
    ,command_FieldId_body                       = 268
    ,command_FieldId_targsrc                    = 269
    ,command_FieldId_func                       = 270
    ,command_FieldId_nextfile                   = 271
    ,command_FieldId_other                      = 272
    ,command_FieldId_updateproto                = 273
    ,command_FieldId_listfunc                   = 274
    ,command_FieldId_iffy                       = 275
    ,command_FieldId_gen                        = 276
    ,command_FieldId_showloc                    = 277
    ,command_FieldId_showstatic                 = 278
    ,command_FieldId_showsortkey                = 279
    ,command_FieldId_sortname                   = 280
    ,command_FieldId_baddecl                    = 281
    ,command_FieldId_indent                     = 282
    ,command_FieldId_update_copyright           = 283
    ,command_FieldId_scriptfile                 = 284
    ,command_FieldId_linelim                    = 285
    ,command_FieldId_strayfile                  = 286
    ,command_FieldId_badchar                    = 287
    ,command_FieldId_badline                    = 288
    ,command_FieldId_expand                     = 289
    ,command_FieldId_ignoreQuote                = 290
    ,command_FieldId_maxpacket                  = 291
    ,command_FieldId_db                         = 292
    ,command_FieldId_createdb                   = 293
    ,command_FieldId_typetag                    = 294
    ,command_FieldId_format                     = 295
    ,command_FieldId_tocamelcase                = 296
    ,command_FieldId_tolowerunder               = 297
    ,command_FieldId_pathcomp                   = 298
    ,command_FieldId_fname                      = 299
    ,command_FieldId_outseparator               = 300
    ,command_FieldId_header                     = 301
    ,command_FieldId_prefer_signed              = 302
    ,command_FieldId_value                      = 303
};

enum { command_FieldIdEnum_N = 304 };


// --- command_abt_cache_Enum

enum command_abt_cache_Enum {               // command.abt.cache
     command_abt_cache_auto           = 0   // Select cache automatically among enabled
    ,command_abt_cache_none           = 1   // No cache
    ,command_abt_cache_gcache         = 2   // Select gcache if enabled (no cache if disabled)
    ,command_abt_cache_gcache_force   = 3   // Pass --force to gcache (no cache if disabled)
    ,command_abt_cache_ccache         = 4   // Select ccache if enabled (no cache if disabled)
};

enum { command_abt_cache_Enum_N = 5 };


// --- command_atf_cmdline_fconst_Enum

enum command_atf_cmdline_fconst_Enum {         // command.atf_cmdline.fconst
     command_atf_cmdline_fconst_high     = 0   // Cool
    ,command_atf_cmdline_fconst_medium   = 1   // So-so
    ,command_atf_cmdline_fconst_low      = 2   // Bad
};

enum { command_atf_cmdline_fconst_Enum_N = 3 };


// --- command_samp_regx_style_Enum

enum command_samp_regx_style_Enum {          // command.samp_regx.style
     command_samp_regx_style_acr       = 0   // ACR-style regx
    ,command_samp_regx_style_shell     = 1   // Shell-style regx
    ,command_samp_regx_style_classic   = 2   // Classic regx
    ,command_samp_regx_style_literal   = 3   // Literal string
};

enum { command_samp_regx_style_Enum_N = 4 };


// --- command_ssimfilt_format_Enum

enum command_ssimfilt_format_Enum {            // command.ssimfilt.format
     command_ssimfilt_format_ssim        = 0   // Print selected/filtered tuples
    ,command_ssimfilt_format_csv         = 1   // First tuple determines header. CSV quoting is used. Newlines are removed
    ,command_ssimfilt_format_field       = 2   // Print selected fields, one per line
    ,command_ssimfilt_format_cmd         = 4   // Emit command for each tuple (implied if -cmd is set)
    ,command_ssimfilt_format_json        = 6   // Print JSON object for each tuple
    ,command_ssimfilt_format_stablefld   = 7   // Filter unstable fields, leave the rest intact
    ,command_ssimfilt_format_table       = 5   // ASCII table for each group of tuples
    ,command_ssimfilt_format_mdtable     = 3   // ASCII Markdown table with | separators for each group of tuples
};

enum { command_ssimfilt_format_Enum_N = 8 };

namespace command { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace command { // gen:ns_tclass_field
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace command { struct acr_where_curs; }
namespace command { struct acr_field_curs; }
namespace command { struct acr_dm_arg_curs; }
namespace command { struct atf_cmdline_mstr_curs; }
namespace command { struct atf_cmdline_mnum_curs; }
namespace command { struct atf_cmdline_mdbl_curs; }
namespace command { struct atf_cmdline_amnum_curs; }
namespace command { struct gcache_cmd_curs; }
namespace command { struct gcli_fields_curs; }
namespace command { struct mdbg_args_curs; }
namespace command { struct mdbg_b_curs; }
namespace command { struct sandbox_cmd_curs; }
namespace command { struct sandbox_files_curs; }
namespace command { struct ssimfilt_match_curs; }
namespace command { struct ssimfilt_field_curs; }
namespace command { struct FieldId; }
namespace command { struct abt; }
namespace command { struct abt_md; }
namespace command { struct abt_md_proc; }
namespace command { struct abt_proc; }
namespace command { struct acr; }
namespace command { struct acr_compl; }
namespace command { struct acr_compl_proc; }
namespace command { struct acr_dm; }
namespace command { struct acr_dm_proc; }
namespace command { struct acr_ed; }
namespace command { struct acr_ed_proc; }
namespace command { struct acr_in; }
namespace command { struct acr_in_proc; }
namespace command { struct acr_my; }
namespace command { struct acr_my_proc; }
namespace command { struct acr_proc; }
namespace command { struct amc; }
namespace command { struct amc_gc; }
namespace command { struct amc_gc_proc; }
namespace command { struct amc_proc; }
namespace command { struct amc_vis; }
namespace command { struct amc_vis_proc; }
namespace command { struct ams_cat; }
namespace command { struct ams_cat_proc; }
namespace command { struct ams_sendtest; }
namespace command { struct ams_sendtest_proc; }
namespace command { struct apm; }
namespace command { struct apm_proc; }
namespace command { struct aqlite; }
namespace command { struct aqlite_proc; }
namespace command { struct atf_amc; }
namespace command { struct atf_amc_proc; }
namespace command { struct atf_ci; }
namespace command { struct atf_ci_proc; }
namespace command { struct atf_cmdline; }
namespace command { struct atf_cmdline_proc; }
namespace command { struct atf_comp; }
namespace command { struct atf_comp_proc; }
namespace command { struct atf_cov; }
namespace command { struct atf_cov_proc; }
namespace command { struct atf_fuzz; }
namespace command { struct atf_fuzz_proc; }
namespace command { struct atf_gcli; }
namespace command { struct atf_gcli_proc; }
namespace command { struct atf_nrun; }
namespace command { struct atf_nrun_proc; }
namespace command { struct atf_unit; }
namespace command { struct atf_unit_proc; }
namespace command { struct bash; }
namespace command { struct bash2html; }
namespace command { struct bash2html_proc; }
namespace command { struct bash_proc; }
namespace command { struct gcache; }
namespace command { struct gcache_proc; }
namespace command { struct gcli; }
namespace command { struct gcli_proc; }
namespace command { struct mdbg; }
namespace command { struct mdbg_proc; }
namespace command { struct mysql2ssim; }
namespace command { struct mysql2ssim_proc; }
namespace command { struct orgfile; }
namespace command { struct orgfile_proc; }
namespace command { struct samp_meng; }
namespace command { struct samp_meng_proc; }
namespace command { struct samp_regx; }
namespace command { struct samp_regx_proc; }
namespace command { struct sample; }
namespace command { struct sample_proc; }
namespace command { struct sandbox; }
namespace command { struct sandbox_proc; }
namespace command { struct src_func; }
namespace command { struct src_func_proc; }
namespace command { struct src_hdr; }
namespace command { struct src_hdr_proc; }
namespace command { struct src_lim; }
namespace command { struct src_lim_proc; }
namespace command { struct ssim2csv; }
namespace command { struct ssim2csv_proc; }
namespace command { struct ssim2mysql; }
namespace command { struct ssim2mysql_proc; }
namespace command { struct ssimfilt; }
namespace command { struct ssimfilt_proc; }
namespace command { struct strconv; }
namespace command { struct strconv_proc; }
namespace command { struct sv2ssim; }
namespace command { struct sv2ssim_proc; }
namespace command { // gen:ns_print_struct

// --- command.FieldId
#pragma pack(push,1)
struct FieldId { // command.FieldId: Field read helper
    i32   value;   //   -1
    // func:command.FieldId.value.Cast
    inline               operator command_FieldIdEnum() const __attribute__((nothrow));
    // func:command.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:command.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:command.FieldId..EnumCtor
    inline               FieldId(command_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:command.FieldId.value.GetEnum
inline command_FieldIdEnum value_GetEnum(const command::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:command.FieldId.value.SetEnum
inline void          value_SetEnum(command::FieldId& parent, command_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:command.FieldId.value.ToCstr
const char*          value_ToCstr(const command::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:command.FieldId.value.Print
void                 value_Print(const command::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:command.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(command::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:command.FieldId.value.SetStrptr
void                 value_SetStrptr(command::FieldId& parent, algo::strptr rhs, command_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:command.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(command::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of command::FieldId from an ascii string.
// The format of the string is the format of the command::FieldId's only field
// func:command.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(command::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.FieldId..Init
inline void          FieldId_Init(command::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:command.FieldId.String  printfmt:Raw
// func:command.FieldId..Print
void                 FieldId_Print(command::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- command.abt
// access: command.abt_proc.abt (Exec)
struct abt { // command.abt
    algo_lib::Regx     target;      //   ""  Sql Regx of dev::Target
    algo::cstring      in;          //   "data"  Root of input ssim dir
    algo_lib::Regx     cfg;         //   ""  Sql Regx of dev::Cfg
    algo::Smallstr50   compiler;    //   ""  Set compiler.
    algo::Smallstr50   uname;       //   ""  Set uname (default: guess)
    algo::Smallstr50   arch;        //   ""  Set architecture (default: guess)
    bool               ood;         //   false  List out-of-date source files
    bool               list;        //   false  List target files
    bool               listincl;    //   false  List includes
    bool               build;       //   false  If set, build specified target (all necessary steps)
    bool               preproc;     //   false  Preprocess file, produce .i file
    algo_lib::Regx     srcfile;     //   "%"  Sql Regx of dev::Gitfile
    bool               clean;       //   false  Delete all output files
    bool               dry_run;     //   false  Print actions, do not perform
    i32                maxjobs;     //   0  Maximum number of child build processes. 0=pick good default
    bool               printcmd;    //   false  Print commands. Do not execute
    bool               force;       //   false  Assume all files are out-of-date
    bool               install;     //   false  Update soft-link under bin/
    bool               coverity;    //   false  Run abt in coverity mode
    algo::cstring      package;     //   ""  Package tag
    u32                maxerr;      //   100  Max failing commands before rest of pipeline is forced to fail
    algo_lib::Regx     disas;       //   ""  Sql Regx
    bool               report;      //   true  Print final report
    algo::cstring      jcdb;        //   ""  Create JSON compilation database in specified file
    u8                 cache;       //   0  Cache mode
    bool               shortlink;   //   false  Try to shorten sort link if possible
    // func:command.abt..Ctor
    inline               abt() __attribute__((nothrow));
};

// Print back to string
// func:command.abt.target.Print
void                 target_Print(command::abt& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt.target.ReadStrptrMaybe
bool                 target_ReadStrptrMaybe(command::abt& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.abt.cfg.Print
void                 cfg_Print(command::abt& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt.cfg.ReadStrptrMaybe
bool                 cfg_ReadStrptrMaybe(command::abt& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.abt.srcfile.Print
void                 srcfile_Print(command::abt& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt.srcfile.ReadStrptrMaybe
bool                 srcfile_ReadStrptrMaybe(command::abt& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.abt.disas.Print
void                 disas_Print(command::abt& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt.disas.ReadStrptrMaybe
bool                 disas_ReadStrptrMaybe(command::abt& parent, algo::strptr in) __attribute__((nothrow));

// Get value of field as enum type
// func:command.abt.cache.GetEnum
inline command_abt_cache_Enum cache_GetEnum(const command::abt& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:command.abt.cache.SetEnum
inline void          cache_SetEnum(command::abt& parent, command_abt_cache_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:command.abt.cache.ToCstr
const char*          cache_ToCstr(const command::abt& parent) __attribute__((nothrow));
// Convert cache to a string. First, attempt conversion to a known string.
// If no string matches, print cache as a numeric value.
// func:command.abt.cache.Print
void                 cache_Print(const command::abt& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:command.abt.cache.SetStrptrMaybe
bool                 cache_SetStrptrMaybe(command::abt& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:command.abt.cache.SetStrptr
void                 cache_SetStrptr(command::abt& parent, algo::strptr rhs, command_abt_cache_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:command.abt.cache.ReadStrptrMaybe
bool                 cache_ReadStrptrMaybe(command::abt& parent, algo::strptr rhs) __attribute__((nothrow));

// func:command.abt..ReadFieldMaybe
bool                 abt_ReadFieldMaybe(command::abt& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::abt from attributes of ascii tuple TUPLE
// func:command.abt..ReadTupleMaybe
bool                 abt_ReadTupleMaybe(command::abt &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.abt..Init
void                 abt_Init(command::abt& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.abt..ToCmdline
tempstr              abt_ToCmdline(command::abt& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.abt.Argv  printfmt:Auto
// func:command.abt..PrintArgv
void                 abt_PrintArgv(command::abt& row, algo::cstring& str) __attribute__((nothrow));
// func:command.abt..GetAnon
algo::strptr         abt_GetAnon(command::abt &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.abt..NArgs
i32                  abt_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.abt_md
// access: command.abt_md_proc.abt_md (Exec)
struct abt_md { // command.abt_md
    algo::cstring    in;         //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   readme;     //   "%"  Sql Regx of dev::Readme
    algo_lib::Regx   ns;         //   ""  Sql Regx of dmmeta::Ns
    algo_lib::Regx   section;    //   "%"  Sql Regx
    bool             update;     //   true  (action) Update mode: Re-generate mdfiles
    bool             check;      //   false  (action) Check mode: Check syntax and links
    bool             link;       //   false  (with -print) Print links
    bool             anchor;     //   false  (with -print) Print anchors
    bool             print;      //   false  (action) Query mode: Print .md section without evaluating
    bool             dry_run;    //   false  Do not write changes to disk
    bool             external;   //   false  Check external links as well (may fail if no internet connection)
    bool             evalcmd;    //   true  Execute inline-commands
    // func:command.abt_md..Ctor
    inline               abt_md() __attribute__((nothrow));
};

// Print back to string
// func:command.abt_md.readme.Print
void                 readme_Print(command::abt_md& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt_md.readme.ReadStrptrMaybe
bool                 readme_ReadStrptrMaybe(command::abt_md& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.abt_md.ns.Print
void                 ns_Print(command::abt_md& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt_md.ns.ReadStrptrMaybe
bool                 ns_ReadStrptrMaybe(command::abt_md& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.abt_md.section.Print
void                 section_Print(command::abt_md& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.abt_md.section.ReadStrptrMaybe
bool                 section_ReadStrptrMaybe(command::abt_md& parent, algo::strptr in) __attribute__((nothrow));

// func:command.abt_md..ReadFieldMaybe
bool                 abt_md_ReadFieldMaybe(command::abt_md& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::abt_md from attributes of ascii tuple TUPLE
// func:command.abt_md..ReadTupleMaybe
bool                 abt_md_ReadTupleMaybe(command::abt_md &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.abt_md..Init
void                 abt_md_Init(command::abt_md& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.abt_md..ToCmdline
tempstr              abt_md_ToCmdline(command::abt_md& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.abt_md.Argv  printfmt:Tuple
// func:command.abt_md..PrintArgv
void                 abt_md_PrintArgv(command::abt_md& row, algo::cstring& str) __attribute__((nothrow));
// func:command.abt_md..GetAnon
algo::strptr         abt_md_GetAnon(command::abt_md &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.abt_md..NArgs
i32                  abt_md_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.abt_md_proc
struct abt_md_proc { // command.abt_md_proc: Subprocess: Tool to generate markdown documentation
    algo::cstring     path;      //   "bin/abt_md"  path for executable
    command::abt_md   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.abt_md_proc..Ctor
    inline               abt_md_proc() __attribute__((nothrow));
    // func:command.abt_md_proc..Dtor
    inline               ~abt_md_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.abt_md_proc.abt_md.Start
int                  abt_md_Start(command::abt_md_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.abt_md_proc.abt_md.StartRead
algo::Fildes         abt_md_StartRead(command::abt_md_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.abt_md_proc.abt_md.Kill
void                 abt_md_Kill(command::abt_md_proc& parent);
// Wait for subprocess to return
// func:command.abt_md_proc.abt_md.Wait
void                 abt_md_Wait(command::abt_md_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.abt_md_proc.abt_md.Exec
int                  abt_md_Exec(command::abt_md_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.abt_md_proc.abt_md.ExecX
void                 abt_md_ExecX(command::abt_md_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.abt_md_proc.abt_md.Execv
int                  abt_md_Execv(command::abt_md_proc& parent) __attribute__((nothrow));
// func:command.abt_md_proc.abt_md.ToCmdline
algo::tempstr        abt_md_ToCmdline(command::abt_md_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.abt_md_proc.abt_md.ToArgv
void                 abt_md_ToArgv(command::abt_md_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.abt_md_proc..Init
inline void          abt_md_proc_Init(command::abt_md_proc& parent);
// func:command.abt_md_proc..Uninit
void                 abt_md_proc_Uninit(command::abt_md_proc& parent) __attribute__((nothrow));

// --- command.abt_proc
struct abt_proc { // command.abt_proc: Subprocess: Algo Build Tool - build & link C++ targets
    algo::cstring   path;      //   "bin/abt"  path for executable
    command::abt    cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.abt_proc..Ctor
    inline               abt_proc() __attribute__((nothrow));
    // func:command.abt_proc..Dtor
    inline               ~abt_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.abt_proc.abt.Start
int                  abt_Start(command::abt_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.abt_proc.abt.StartRead
algo::Fildes         abt_StartRead(command::abt_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.abt_proc.abt.Kill
void                 abt_Kill(command::abt_proc& parent);
// Wait for subprocess to return
// func:command.abt_proc.abt.Wait
void                 abt_Wait(command::abt_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.abt_proc.abt.Exec
int                  abt_Exec(command::abt_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.abt_proc.abt.ExecX
void                 abt_ExecX(command::abt_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.abt_proc.abt.Execv
int                  abt_Execv(command::abt_proc& parent) __attribute__((nothrow));
// func:command.abt_proc.abt.ToCmdline
algo::tempstr        abt_ToCmdline(command::abt_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.abt_proc.abt.ToArgv
void                 abt_ToArgv(command::abt_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.abt_proc..Init
inline void          abt_proc_Init(command::abt_proc& parent);
// func:command.abt_proc..Uninit
void                 abt_proc_Uninit(command::abt_proc& parent) __attribute__((nothrow));

// --- command.acr
// access: command.acr_proc.acr (Exec)
struct acr { // command.acr
    algo::cstring    query;         //   ""  Regx to match record
    algo::cstring*   where_elems;   // pointer to elements
    u32              where_n;       // number of elements in array
    u32              where_max;     // max. capacity of array before realloc
    algo::cstring    in;            //   "data"  Input directory or filename, - for stdin
    bool             del;           //   false  Delete found item
    bool             sel;           //   false  Read stdin and select records
    bool             insert;        //   false  Read stdin and insert tuples
    bool             replace;       //   false  Read stdin and replace tuples
    bool             update;        //   false  Read stdin and update attributes of existing tuples
    bool             merge;         //   false  Combination of -update and -insert
    bool             unused;        //   false  Only select records which are not referenced.
    bool             trunc;         //   false  Truncate table on first write
    bool             check;         //   false  Run cross-reference check on selection
    bool             selerr;        //   true  (with -check): Select error records
    i32              maxshow;       //   100  Limit number of errors per table
    bool             write;         //   false  Write data back to disk.
    algo::cstring    rename;        //   ""  Change value of found item
    i32              nup;           //   0  Number of levels to go up
    i32              ndown;         //   0  Number of levels to go down
    bool             l;             //   false  Go down via pkeys only
    bool             xref;          //   false  Short for -nup 100 -ndown 100
    bool             fldfunc;       //   false  Evaluate fldfunc when printing tuple
    i32              maxgroup;      //   25  Max. items per group
    bool             pretty;        //   true  Align output in blocks
    bool             tree;          //   false  Print as tree
    bool             loose;         //   false  Allow printing a record before its references (used with -e)
    bool             my;            //   false  Invoke acr_my -e (using acr_my directly is faster)
    algo::cstring    schema;        //   "data"  Directory for initializing acr meta-data
    bool             e;             //   false  Open selection in editor, write back when done.
    bool             t;             //   false  Short for -tree -xref -loose
    bool             g;             //   false  Trigger git commands for changes in dev.gitfile table
    bool             x;             //   false  Propagate select/rename/delete to ssimreq records
    bool             rowid;         //   false  Always print acr.rowid attribute
    bool             cmt;           //   false  Print comments for all columns referenced in output
    bool             report;        //   true  Show final report
    bool             print;         //   true  Print selected records
    algo::cstring    cmd;           //   ""  Print script with command execution for each selected row
    algo::cstring*   field_elems;   // pointer to elements
    u32              field_n;       // number of elements in array
    u32              field_max;     // max. capacity of array before realloc
    algo::cstring    regxof;        //   ""  Single field: output regx of matching field values
    bool             meta;          //   false  Select meta-data for selected records
    // func:command.acr..AssignOp
    command::acr&        operator =(const command::acr &rhs) __attribute__((nothrow));
    // func:command.acr..Ctor
    inline               acr() __attribute__((nothrow));
    // func:command.acr..Dtor
    inline               ~acr() __attribute__((nothrow));
    // func:command.acr..CopyCtor
    acr(const command::acr &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.acr.where.Addary
algo::aryptr<algo::cstring> where_Addary(command::acr& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.acr.where.Alloc
algo::cstring&       where_Alloc(command::acr& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.acr.where.AllocAt
algo::cstring&       where_AllocAt(command::acr& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr.where.AllocN
algo::aryptr<algo::cstring> where_AllocN(command::acr& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.acr.where.EmptyQ
inline bool          where_EmptyQ(command::acr& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.acr.where.Find
inline algo::cstring* where_Find(command::acr& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.acr.where.Getary
inline algo::aryptr<algo::cstring> where_Getary(const command::acr& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.acr.where.Last
inline algo::cstring* where_Last(command::acr& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.acr.where.Max
inline i32           where_Max(command::acr& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.acr.where.N
inline i32           where_N(const command::acr& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.acr.where.Remove
void                 where_Remove(command::acr& parent, u32 i) __attribute__((nothrow));
// func:command.acr.where.RemoveAll
void                 where_RemoveAll(command::acr& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.acr.where.RemoveLast
void                 where_RemoveLast(command::acr& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.acr.where.Reserve
inline void          where_Reserve(command::acr& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.acr.where.AbsReserve
void                 where_AbsReserve(command::acr& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.acr.where.Setary
void                 where_Setary(command::acr& parent, command::acr &rhs) __attribute__((nothrow));
// Copy specified array into where, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.acr.where.Setary2
void                 where_Setary(command::acr& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.acr.where.qFind
inline algo::cstring& where_qFind(command::acr& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.acr.where.qLast
inline algo::cstring& where_qLast(command::acr& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.acr.where.rowid_Get
inline u64           where_rowid_Get(command::acr& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr.where.AllocNVal
algo::aryptr<algo::cstring> where_AllocNVal(command::acr& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.acr.where.ReadStrptrMaybe
bool                 where_ReadStrptrMaybe(command::acr& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.acr.field.Addary
algo::aryptr<algo::cstring> field_Addary(command::acr& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.acr.field.Alloc
algo::cstring&       field_Alloc(command::acr& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.acr.field.AllocAt
algo::cstring&       field_AllocAt(command::acr& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr.field.AllocN
algo::aryptr<algo::cstring> field_AllocN(command::acr& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.acr.field.EmptyQ
inline bool          field_EmptyQ(command::acr& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.acr.field.Find
inline algo::cstring* field_Find(command::acr& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.acr.field.Getary
inline algo::aryptr<algo::cstring> field_Getary(const command::acr& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.acr.field.Last
inline algo::cstring* field_Last(command::acr& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.acr.field.Max
inline i32           field_Max(command::acr& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.acr.field.N
inline i32           field_N(const command::acr& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.acr.field.Remove
void                 field_Remove(command::acr& parent, u32 i) __attribute__((nothrow));
// func:command.acr.field.RemoveAll
void                 field_RemoveAll(command::acr& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.acr.field.RemoveLast
void                 field_RemoveLast(command::acr& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.acr.field.Reserve
inline void          field_Reserve(command::acr& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.acr.field.AbsReserve
void                 field_AbsReserve(command::acr& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.acr.field.Setary
void                 field_Setary(command::acr& parent, command::acr &rhs) __attribute__((nothrow));
// Copy specified array into field, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.acr.field.Setary2
void                 field_Setary(command::acr& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.acr.field.qFind
inline algo::cstring& field_qFind(command::acr& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.acr.field.qLast
inline algo::cstring& field_qLast(command::acr& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.acr.field.rowid_Get
inline u64           field_rowid_Get(command::acr& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr.field.AllocNVal
algo::aryptr<algo::cstring> field_AllocNVal(command::acr& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.acr.field.ReadStrptrMaybe
bool                 field_ReadStrptrMaybe(command::acr& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.acr.where_curs.Next
inline void          acr_where_curs_Next(acr_where_curs &curs) __attribute__((nothrow));
// func:command.acr.where_curs.Reset
inline void          acr_where_curs_Reset(acr_where_curs &curs, command::acr &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.acr.where_curs.ValidQ
inline bool          acr_where_curs_ValidQ(acr_where_curs &curs) __attribute__((nothrow));
// item access
// func:command.acr.where_curs.Access
inline algo::cstring& acr_where_curs_Access(acr_where_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.acr.field_curs.Next
inline void          acr_field_curs_Next(acr_field_curs &curs) __attribute__((nothrow));
// func:command.acr.field_curs.Reset
inline void          acr_field_curs_Reset(acr_field_curs &curs, command::acr &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.acr.field_curs.ValidQ
inline bool          acr_field_curs_ValidQ(acr_field_curs &curs) __attribute__((nothrow));
// item access
// func:command.acr.field_curs.Access
inline algo::cstring& acr_field_curs_Access(acr_field_curs &curs) __attribute__((nothrow));
// func:command.acr..ReadFieldMaybe
bool                 acr_ReadFieldMaybe(command::acr& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr from attributes of ascii tuple TUPLE
// func:command.acr..ReadTupleMaybe
bool                 acr_ReadTupleMaybe(command::acr &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr..Init
void                 acr_Init(command::acr& parent);
// func:command.acr..Uninit
void                 acr_Uninit(command::acr& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr..ToCmdline
tempstr              acr_ToCmdline(command::acr& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr.Argv  printfmt:Auto
// func:command.acr..PrintArgv
void                 acr_PrintArgv(command::acr& row, algo::cstring& str) __attribute__((nothrow));
// func:command.acr..GetAnon
algo::strptr         acr_GetAnon(command::acr &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr..NArgs
i32                  acr_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_compl
// access: command.acr_compl_proc.acr_compl (Exec)
struct acr_compl { // command.acr_compl
    algo::cstring   data;        //   "data"  Source for completions (dir or file or -)
    algo::cstring   schema;      //   "data"  Source for schema information
    algo::cstring   line;        //   ""  Simulates COMP_LINE (debug)
    algo::cstring   point;       //   ""  Simulates COMP_POINT (debug). default: whole line
    algo::cstring   type;        //   "9"  Simulates COMP_TYPE (debug)
    bool            install;     //   false  Produce bash commands to install the handler
    algo::cstring   debug_log;   //   ""  Log file for debug information, overrides ACR_COMPL_DEBUG_LOG
    // func:command.acr_compl..Ctor
    inline               acr_compl() __attribute__((nothrow));
};

// func:command.acr_compl..ReadFieldMaybe
bool                 acr_compl_ReadFieldMaybe(command::acr_compl& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr_compl from an ascii string.
// The format of the string is an ssim Tuple
// func:command.acr_compl..ReadStrptrMaybe
bool                 acr_compl_ReadStrptrMaybe(command::acr_compl &parent, algo::strptr in_str) __attribute__((nothrow));
// Read fields of command::acr_compl from attributes of ascii tuple TUPLE
// func:command.acr_compl..ReadTupleMaybe
bool                 acr_compl_ReadTupleMaybe(command::acr_compl &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr_compl..Init
inline void          acr_compl_Init(command::acr_compl& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr_compl..ToCmdline
tempstr              acr_compl_ToCmdline(command::acr_compl& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_compl.Argv  printfmt:Auto
// func:command.acr_compl..PrintArgv
void                 acr_compl_PrintArgv(command::acr_compl& row, algo::cstring& str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_compl.String  printfmt:Tuple
// func:command.acr_compl..Print
void                 acr_compl_Print(command::acr_compl& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr_compl..NArgs
i32                  acr_compl_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_compl_proc
struct acr_compl_proc { // command.acr_compl_proc: Subprocess: ACR shell auto-complete for all targets
    algo::cstring        path;      //   "bin/acr_compl"  path for executable
    command::acr_compl   cmd;       // command line for child process
    algo::cstring        fstdin;    // redirect for stdin
    algo::cstring        fstdout;   // redirect for stdout
    algo::cstring        fstderr;   // redirect for stderr
    pid_t                pid;       //   0  pid of running child process
    i32                  timeout;   //   0  optional timeout for child process
    i32                  status;    //   0  last exit status of child process
    // func:command.acr_compl_proc..Ctor
    inline               acr_compl_proc() __attribute__((nothrow));
    // func:command.acr_compl_proc..Dtor
    inline               ~acr_compl_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_compl_proc.acr_compl.Start
int                  acr_compl_Start(command::acr_compl_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_compl_proc.acr_compl.StartRead
algo::Fildes         acr_compl_StartRead(command::acr_compl_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_compl_proc.acr_compl.Kill
void                 acr_compl_Kill(command::acr_compl_proc& parent);
// Wait for subprocess to return
// func:command.acr_compl_proc.acr_compl.Wait
void                 acr_compl_Wait(command::acr_compl_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_compl_proc.acr_compl.Exec
int                  acr_compl_Exec(command::acr_compl_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_compl_proc.acr_compl.ExecX
void                 acr_compl_ExecX(command::acr_compl_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_compl_proc.acr_compl.Execv
int                  acr_compl_Execv(command::acr_compl_proc& parent) __attribute__((nothrow));
// func:command.acr_compl_proc.acr_compl.ToCmdline
algo::tempstr        acr_compl_ToCmdline(command::acr_compl_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_compl_proc.acr_compl.ToArgv
void                 acr_compl_ToArgv(command::acr_compl_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_compl_proc..Init
inline void          acr_compl_proc_Init(command::acr_compl_proc& parent);
// func:command.acr_compl_proc..Uninit
void                 acr_compl_proc_Uninit(command::acr_compl_proc& parent) __attribute__((nothrow));

// --- command.acr_dm
// access: command.acr_dm_proc.acr_dm (Exec)
struct acr_dm { // command.acr_dm
    algo::cstring    in;           //   "data"  Input directory or filename, - for stdin
    algo::cstring*   arg_elems;    // pointer to elements
    u32              arg_n;        // number of elements in array
    u32              arg_max;      // max. capacity of array before realloc
    bool             write_ours;   //   false  Write result to ours file
    u8               msize;        //   7  Conflict marker size
    bool             rowid;        //   false  Output 'ours' rowid for merging into original ssimfiles
    // func:command.acr_dm..AssignOp
    command::acr_dm&     operator =(const command::acr_dm &rhs) __attribute__((nothrow));
    // func:command.acr_dm..Ctor
    inline               acr_dm() __attribute__((nothrow));
    // func:command.acr_dm..Dtor
    inline               ~acr_dm() __attribute__((nothrow));
    // func:command.acr_dm..CopyCtor
    acr_dm(const command::acr_dm &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.acr_dm.arg.Addary
algo::aryptr<algo::cstring> arg_Addary(command::acr_dm& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.acr_dm.arg.Alloc
algo::cstring&       arg_Alloc(command::acr_dm& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.acr_dm.arg.AllocAt
algo::cstring&       arg_AllocAt(command::acr_dm& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr_dm.arg.AllocN
algo::aryptr<algo::cstring> arg_AllocN(command::acr_dm& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.acr_dm.arg.EmptyQ
inline bool          arg_EmptyQ(command::acr_dm& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.acr_dm.arg.Find
inline algo::cstring* arg_Find(command::acr_dm& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.acr_dm.arg.Getary
inline algo::aryptr<algo::cstring> arg_Getary(const command::acr_dm& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.acr_dm.arg.Last
inline algo::cstring* arg_Last(command::acr_dm& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.acr_dm.arg.Max
inline i32           arg_Max(command::acr_dm& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.acr_dm.arg.N
inline i32           arg_N(const command::acr_dm& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.acr_dm.arg.Remove
void                 arg_Remove(command::acr_dm& parent, u32 i) __attribute__((nothrow));
// func:command.acr_dm.arg.RemoveAll
void                 arg_RemoveAll(command::acr_dm& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.acr_dm.arg.RemoveLast
void                 arg_RemoveLast(command::acr_dm& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.acr_dm.arg.Reserve
inline void          arg_Reserve(command::acr_dm& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.acr_dm.arg.AbsReserve
void                 arg_AbsReserve(command::acr_dm& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.acr_dm.arg.Setary
void                 arg_Setary(command::acr_dm& parent, command::acr_dm &rhs) __attribute__((nothrow));
// Copy specified array into arg, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.acr_dm.arg.Setary2
void                 arg_Setary(command::acr_dm& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.acr_dm.arg.qFind
inline algo::cstring& arg_qFind(command::acr_dm& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.acr_dm.arg.qLast
inline algo::cstring& arg_qLast(command::acr_dm& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.acr_dm.arg.rowid_Get
inline u64           arg_rowid_Get(command::acr_dm& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.acr_dm.arg.AllocNVal
algo::aryptr<algo::cstring> arg_AllocNVal(command::acr_dm& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.acr_dm.arg.ReadStrptrMaybe
bool                 arg_ReadStrptrMaybe(command::acr_dm& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.acr_dm.arg_curs.Next
inline void          acr_dm_arg_curs_Next(acr_dm_arg_curs &curs) __attribute__((nothrow));
// func:command.acr_dm.arg_curs.Reset
inline void          acr_dm_arg_curs_Reset(acr_dm_arg_curs &curs, command::acr_dm &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.acr_dm.arg_curs.ValidQ
inline bool          acr_dm_arg_curs_ValidQ(acr_dm_arg_curs &curs) __attribute__((nothrow));
// item access
// func:command.acr_dm.arg_curs.Access
inline algo::cstring& acr_dm_arg_curs_Access(acr_dm_arg_curs &curs) __attribute__((nothrow));
// func:command.acr_dm..ReadFieldMaybe
bool                 acr_dm_ReadFieldMaybe(command::acr_dm& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr_dm from attributes of ascii tuple TUPLE
// func:command.acr_dm..ReadTupleMaybe
bool                 acr_dm_ReadTupleMaybe(command::acr_dm &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr_dm..Init
inline void          acr_dm_Init(command::acr_dm& parent);
// func:command.acr_dm..Uninit
void                 acr_dm_Uninit(command::acr_dm& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr_dm..ToCmdline
tempstr              acr_dm_ToCmdline(command::acr_dm& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_dm.Argv  printfmt:Tuple
// func:command.acr_dm..PrintArgv
void                 acr_dm_PrintArgv(command::acr_dm& row, algo::cstring& str) __attribute__((nothrow));
// func:command.acr_dm..GetAnon
algo::strptr         acr_dm_GetAnon(command::acr_dm &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr_dm..NArgs
i32                  acr_dm_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_dm_proc
struct acr_dm_proc { // command.acr_dm_proc: Subprocess: ACR Diff/Merge
    algo::cstring     path;      //   "bin/acr_dm"  path for executable
    command::acr_dm   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.acr_dm_proc..Ctor
    inline               acr_dm_proc() __attribute__((nothrow));
    // func:command.acr_dm_proc..Dtor
    inline               ~acr_dm_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_dm_proc.acr_dm.Start
int                  acr_dm_Start(command::acr_dm_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_dm_proc.acr_dm.StartRead
algo::Fildes         acr_dm_StartRead(command::acr_dm_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_dm_proc.acr_dm.Kill
void                 acr_dm_Kill(command::acr_dm_proc& parent);
// Wait for subprocess to return
// func:command.acr_dm_proc.acr_dm.Wait
void                 acr_dm_Wait(command::acr_dm_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_dm_proc.acr_dm.Exec
int                  acr_dm_Exec(command::acr_dm_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_dm_proc.acr_dm.ExecX
void                 acr_dm_ExecX(command::acr_dm_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_dm_proc.acr_dm.Execv
int                  acr_dm_Execv(command::acr_dm_proc& parent) __attribute__((nothrow));
// func:command.acr_dm_proc.acr_dm.ToCmdline
algo::tempstr        acr_dm_ToCmdline(command::acr_dm_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_dm_proc.acr_dm.ToArgv
void                 acr_dm_ToArgv(command::acr_dm_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_dm_proc..Init
inline void          acr_dm_proc_Init(command::acr_dm_proc& parent);
// func:command.acr_dm_proc..Uninit
void                 acr_dm_proc_Uninit(command::acr_dm_proc& parent) __attribute__((nothrow));

// --- command.acr_ed
// access: command.acr_ed_proc.acr_ed (Exec)
struct acr_ed { // command.acr_ed
    algo::cstring       in;          //   "data"  Input directory or filename, - for stdin
    bool                create;      //   false  Create new entity (-finput, -target, -ctype, -field)
    bool                del;         //   false  Delete mode
    algo::cstring       rename;      //   ""  Rename to something else
    bool                finput;      //   false  Create in-memory table based on ssimfile
    bool                foutput;     //   false  Declare field as an output
    algo::cstring       srcfile;     //   ""  Create/Rename/Delete a source file
    bool                gstatic;     //   false  Like -finput, but data is loaded at compile time
    bool                indexed;     //   false  (with -finput) Add hash index
    algo::Smallstr16    target;      //   ""  Create/Rename/Delete target
    algo::Smallstr50    nstype;      //   "exe"  (with -create -target): exe,lib,etc.
    algo::Smallstr100   ctype;       //   ""  Create/Rename/Delete ctype
    algo::Smallstr50    pooltype;    //   ""   Pool reftype (Lary,Lpool etc) for finput/ctype
    algo::Smallstr50    ssimfile;    //   ""    Ssimfile for new ctype
    algo::Smallstr100   subset;      //   ""    Primary key is a subset of this ctype
    algo::Smallstr100   subset2;     //   ""    Primary key is also a subset of this ctype
    algo::cstring       separator;   //   "."      Key separator
    algo::Smallstr100   field;       //   ""  Create field
    algo::Smallstr100   arg;         //   ""    Field type (e.g. u32, etc), (with -ctype) add the base field
    algo::cstring       dflt;        //   ""    Field default value
    bool                anon;        //   false    Anonymous field (use with command lines)
    bool                bigend;      //   false    Big-endian field
    bool                cascdel;     //   false    Field is cascdel
    algo::Smallstr100   before;      //   ""    Place field before this one
    algo::Smallstr100   substr;      //   ""    New field is a substring
    bool                alias;       //   false  Create alias field (requires -srcfield)
    algo::Smallstr100   srcfield;    //   ""    Source field for bitfld/substr
    algo::Smallstr50    fstep;       //   ""    Add fstep record
    algo::cstring       inscond;     //   "true"    Insert condition (for xref)
    algo::Smallstr50    reftype;     //   ""    Reftype (e.g. Val, Thash, Llist, etc)
    algo::Smallstr100   hashfld;     //   ""      (-reftype:Thash) Hash field
    algo::Smallstr100   sortfld;     //   ""      (-reftype:Bheap) Sort field
    algo::cstring       unittest;    //   ""  Create unit test, <ns>.<functionname>
    algo::cstring       citest;      //   ""  Create CI test
    algo::cstring       cppfunc;     //   ""  Field is a cppfunc, pass c++ expression as argument
    bool                xref;        //   false      X-ref with field type
    algo::cstring       via;         //   ""        X-ref argument (index, pointer, or index/key)
    bool                write;       //   false  Commit output to disk
    bool                e;           //   false   (with -create -unittest) Edit new testcase
    algo::cstring       comment;     //   ""  Comment for new entity
    bool                sandbox;     //   false  Make changes in sandbox
    bool                test;        //   false  Build resulting changes, run tests
    bool                showcpp;     //   false  (With -sandbox), show resulting diff
    algo::cstring       msgtype;     //   ""  (with -ctype) use this msgtype as type
    bool                anonfld;     //   false  Create anonfld
    // func:command.acr_ed..Ctor
    inline               acr_ed() __attribute__((nothrow));
};

// func:command.acr_ed..ReadFieldMaybe
bool                 acr_ed_ReadFieldMaybe(command::acr_ed& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr_ed from attributes of ascii tuple TUPLE
// func:command.acr_ed..ReadTupleMaybe
bool                 acr_ed_ReadTupleMaybe(command::acr_ed &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr_ed..Init
void                 acr_ed_Init(command::acr_ed& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr_ed..ToCmdline
tempstr              acr_ed_ToCmdline(command::acr_ed& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_ed.Argv  printfmt:Auto
// func:command.acr_ed..PrintArgv
void                 acr_ed_PrintArgv(command::acr_ed& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr_ed..NArgs
i32                  acr_ed_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_ed_proc
struct acr_ed_proc { // command.acr_ed_proc: Subprocess: Script generator for common dev tasks
    algo::cstring     path;      //   "bin/acr_ed"  path for executable
    command::acr_ed   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.acr_ed_proc..Ctor
    inline               acr_ed_proc() __attribute__((nothrow));
    // func:command.acr_ed_proc..Dtor
    inline               ~acr_ed_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_ed_proc.acr_ed.Start
int                  acr_ed_Start(command::acr_ed_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_ed_proc.acr_ed.StartRead
algo::Fildes         acr_ed_StartRead(command::acr_ed_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_ed_proc.acr_ed.Kill
void                 acr_ed_Kill(command::acr_ed_proc& parent);
// Wait for subprocess to return
// func:command.acr_ed_proc.acr_ed.Wait
void                 acr_ed_Wait(command::acr_ed_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_ed_proc.acr_ed.Exec
int                  acr_ed_Exec(command::acr_ed_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_ed_proc.acr_ed.ExecX
void                 acr_ed_ExecX(command::acr_ed_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_ed_proc.acr_ed.Execv
int                  acr_ed_Execv(command::acr_ed_proc& parent) __attribute__((nothrow));
// func:command.acr_ed_proc.acr_ed.ToCmdline
algo::tempstr        acr_ed_ToCmdline(command::acr_ed_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_ed_proc.acr_ed.ToArgv
void                 acr_ed_ToArgv(command::acr_ed_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_ed_proc..Init
inline void          acr_ed_proc_Init(command::acr_ed_proc& parent);
// func:command.acr_ed_proc..Uninit
void                 acr_ed_proc_Uninit(command::acr_ed_proc& parent) __attribute__((nothrow));

// --- command.acr_in
// access: command.acr_in_proc.acr_in (Exec)
struct acr_in { // command.acr_in
    algo_lib::Regx   ns;            //   ""  Sql Regx of dmmeta::Ns
    bool             data;          //   false  List ssimfile contents
    bool             sigcheck;      //   true  Output sigcheck records for schema version mismatch detection
    bool             list;          //   false  List ssimfile names
    bool             t;             //   false  (with -list) Tree mode
    algo::cstring    data_dir;      //   "data"  Directory with ssimfiles
    algo::cstring    schema;        //   "data"
    algo::cstring    related;       //   ""  Select only tuples related to specified acr key
    algo_lib::Regx   notssimfile;   //   ""  Sql Regx of dmmeta::Ssimfile
    bool             checkable;     //   false  Ensure output passes acr -check
    algo_lib::Regx   r;             //   ""  Sql Regx of dmmeta::Ssimfile
    // func:command.acr_in..Ctor
    inline               acr_in() __attribute__((nothrow));
};

// Print back to string
// func:command.acr_in.ns.Print
void                 ns_Print(command::acr_in& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.acr_in.ns.ReadStrptrMaybe
bool                 ns_ReadStrptrMaybe(command::acr_in& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.acr_in.notssimfile.Print
void                 notssimfile_Print(command::acr_in& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.acr_in.notssimfile.ReadStrptrMaybe
bool                 notssimfile_ReadStrptrMaybe(command::acr_in& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.acr_in.r.Print
void                 r_Print(command::acr_in& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.acr_in.r.ReadStrptrMaybe
bool                 r_ReadStrptrMaybe(command::acr_in& parent, algo::strptr in) __attribute__((nothrow));

// func:command.acr_in..ReadFieldMaybe
bool                 acr_in_ReadFieldMaybe(command::acr_in& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr_in from attributes of ascii tuple TUPLE
// func:command.acr_in..ReadTupleMaybe
bool                 acr_in_ReadTupleMaybe(command::acr_in &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr_in..Init
void                 acr_in_Init(command::acr_in& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr_in..ToCmdline
tempstr              acr_in_ToCmdline(command::acr_in& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_in.Argv  printfmt:Auto
// func:command.acr_in..PrintArgv
void                 acr_in_PrintArgv(command::acr_in& row, algo::cstring& str) __attribute__((nothrow));
// func:command.acr_in..GetAnon
algo::strptr         acr_in_GetAnon(command::acr_in &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr_in..NArgs
i32                  acr_in_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_in_proc
struct acr_in_proc { // command.acr_in_proc: Subprocess: ACR Input - compute set of ssimfiles or tuples used by a specific target
    algo::cstring     path;      //   "bin/acr_in"  path for executable
    command::acr_in   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.acr_in_proc..Ctor
    inline               acr_in_proc() __attribute__((nothrow));
    // func:command.acr_in_proc..Dtor
    inline               ~acr_in_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_in_proc.acr_in.Start
int                  acr_in_Start(command::acr_in_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_in_proc.acr_in.StartRead
algo::Fildes         acr_in_StartRead(command::acr_in_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_in_proc.acr_in.Kill
void                 acr_in_Kill(command::acr_in_proc& parent);
// Wait for subprocess to return
// func:command.acr_in_proc.acr_in.Wait
void                 acr_in_Wait(command::acr_in_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_in_proc.acr_in.Exec
int                  acr_in_Exec(command::acr_in_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_in_proc.acr_in.ExecX
void                 acr_in_ExecX(command::acr_in_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_in_proc.acr_in.Execv
int                  acr_in_Execv(command::acr_in_proc& parent) __attribute__((nothrow));
// func:command.acr_in_proc.acr_in.ToCmdline
algo::tempstr        acr_in_ToCmdline(command::acr_in_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_in_proc.acr_in.ToArgv
void                 acr_in_ToArgv(command::acr_in_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_in_proc..Init
inline void          acr_in_proc_Init(command::acr_in_proc& parent);
// func:command.acr_in_proc..Uninit
void                 acr_in_proc_Uninit(command::acr_in_proc& parent) __attribute__((nothrow));

// --- command.acr_my
// access: command.acr_my_proc.acr_my (Exec)
struct acr_my { // command.acr_my
    algo_lib::Regx   nsdb;      //   ""  Sql Regx of dmmeta::Nsdb
    algo::cstring    in;        //   "data"  Input directory or filename, - for stdin
    algo::cstring    schema;    //   "data"  Input directory or filename, - for stdin
    bool             fldfunc;   //   false  Evaluate fldfunc when printing tuple
    bool             fkey;      //   false  Enable foreign key constraints
    bool             e;         //   false  Alias for -start -shell -stop
    bool             start;     //   false  Start local mysql server
    bool             stop;      //   false  Stop local mysql server, saving data
    bool             abort;     //   false  Abort local mysql server, losing data
    bool             shell;     //   false  Connect to local mysql server
    bool             serv;      //   false  Start mysql with TCP/IP service enabled
    // func:command.acr_my..Ctor
    inline               acr_my() __attribute__((nothrow));
};

// Print back to string
// func:command.acr_my.nsdb.Print
void                 nsdb_Print(command::acr_my& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.acr_my.nsdb.ReadStrptrMaybe
bool                 nsdb_ReadStrptrMaybe(command::acr_my& parent, algo::strptr in) __attribute__((nothrow));

// func:command.acr_my..ReadFieldMaybe
bool                 acr_my_ReadFieldMaybe(command::acr_my& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::acr_my from attributes of ascii tuple TUPLE
// func:command.acr_my..ReadTupleMaybe
bool                 acr_my_ReadTupleMaybe(command::acr_my &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.acr_my..Init
void                 acr_my_Init(command::acr_my& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.acr_my..ToCmdline
tempstr              acr_my_ToCmdline(command::acr_my& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.acr_my.Argv  printfmt:Tuple
// func:command.acr_my..PrintArgv
void                 acr_my_PrintArgv(command::acr_my& row, algo::cstring& str) __attribute__((nothrow));
// func:command.acr_my..GetAnon
algo::strptr         acr_my_GetAnon(command::acr_my &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.acr_my..NArgs
i32                  acr_my_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.acr_my_proc
struct acr_my_proc { // command.acr_my_proc: Subprocess: ACR <-> MariaDB adaptor
    algo::cstring     path;      //   "bin/acr_my"  path for executable
    command::acr_my   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.acr_my_proc..Ctor
    inline               acr_my_proc() __attribute__((nothrow));
    // func:command.acr_my_proc..Dtor
    inline               ~acr_my_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_my_proc.acr_my.Start
int                  acr_my_Start(command::acr_my_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_my_proc.acr_my.StartRead
algo::Fildes         acr_my_StartRead(command::acr_my_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_my_proc.acr_my.Kill
void                 acr_my_Kill(command::acr_my_proc& parent);
// Wait for subprocess to return
// func:command.acr_my_proc.acr_my.Wait
void                 acr_my_Wait(command::acr_my_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_my_proc.acr_my.Exec
int                  acr_my_Exec(command::acr_my_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_my_proc.acr_my.ExecX
void                 acr_my_ExecX(command::acr_my_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_my_proc.acr_my.Execv
int                  acr_my_Execv(command::acr_my_proc& parent) __attribute__((nothrow));
// func:command.acr_my_proc.acr_my.ToCmdline
algo::tempstr        acr_my_ToCmdline(command::acr_my_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_my_proc.acr_my.ToArgv
void                 acr_my_ToArgv(command::acr_my_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_my_proc..Init
inline void          acr_my_proc_Init(command::acr_my_proc& parent);
// func:command.acr_my_proc..Uninit
void                 acr_my_proc_Uninit(command::acr_my_proc& parent) __attribute__((nothrow));

// --- command.acr_proc
struct acr_proc { // command.acr_proc: Subprocess: Algo Cross-Reference - ssimfile database & update tool
    algo::cstring   path;      //   "bin/acr"  path for executable
    command::acr    cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.acr_proc..Ctor
    inline               acr_proc() __attribute__((nothrow));
    // func:command.acr_proc..Dtor
    inline               ~acr_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.acr_proc.acr.Start
int                  acr_Start(command::acr_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.acr_proc.acr.StartRead
algo::Fildes         acr_StartRead(command::acr_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.acr_proc.acr.Kill
void                 acr_Kill(command::acr_proc& parent);
// Wait for subprocess to return
// func:command.acr_proc.acr.Wait
void                 acr_Wait(command::acr_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.acr_proc.acr.Exec
int                  acr_Exec(command::acr_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.acr_proc.acr.ExecX
void                 acr_ExecX(command::acr_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.acr_proc.acr.Execv
int                  acr_Execv(command::acr_proc& parent) __attribute__((nothrow));
// func:command.acr_proc.acr.ToCmdline
algo::tempstr        acr_ToCmdline(command::acr_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.acr_proc.acr.ToArgv
void                 acr_ToArgv(command::acr_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.acr_proc..Init
inline void          acr_proc_Init(command::acr_proc& parent);
// func:command.acr_proc..Uninit
void                 acr_proc_Uninit(command::acr_proc& parent) __attribute__((nothrow));

// --- command.amc
// access: command.amc_proc.amc (Exec)
struct amc { // command.amc
    algo::cstring    in_dir;    //   "data"  Root of input ssim dir
    algo::cstring    query;     //   ""  Query mode: generate code for specified object
    algo::cstring    out_dir;   //   "."  Root of output cpp dir
    bool             proto;     //   false  Print prototype
    bool             report;    //   true  Final report
    bool             e;         //   false  Open matching records in editor
    algo_lib::Regx   trace;     //   ""  Sql Regx
    // func:command.amc..Ctor
    inline               amc() __attribute__((nothrow));
};

// Print back to string
// func:command.amc.trace.Print
void                 trace_Print(command::amc& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.amc.trace.ReadStrptrMaybe
bool                 trace_ReadStrptrMaybe(command::amc& parent, algo::strptr in) __attribute__((nothrow));

// func:command.amc..ReadFieldMaybe
bool                 amc_ReadFieldMaybe(command::amc& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::amc from attributes of ascii tuple TUPLE
// func:command.amc..ReadTupleMaybe
bool                 amc_ReadTupleMaybe(command::amc &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.amc..Init
void                 amc_Init(command::amc& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.amc..ToCmdline
tempstr              amc_ToCmdline(command::amc& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.amc.Argv  printfmt:Auto
// func:command.amc..PrintArgv
void                 amc_PrintArgv(command::amc& row, algo::cstring& str) __attribute__((nothrow));
// func:command.amc..GetAnon
algo::strptr         amc_GetAnon(command::amc &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.amc..NArgs
i32                  amc_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.amc_gc
// access: command.amc_gc_proc.amc_gc (Exec)
struct amc_gc { // command.amc_gc
    algo_lib::Regx   target;    //   "%"  Sql Regx of dev::Target
    algo_lib::Regx   key;       //   ""  Sql Regx
    bool             include;   //   false  Garbage collect includes for specified target
    algo::cstring    in;        //   "data"  Input directory or filename, - for stdin
    // func:command.amc_gc..Ctor
    inline               amc_gc() __attribute__((nothrow));
};

// Print back to string
// func:command.amc_gc.target.Print
void                 target_Print(command::amc_gc& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.amc_gc.target.ReadStrptrMaybe
bool                 target_ReadStrptrMaybe(command::amc_gc& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.amc_gc.key.Print
void                 key_Print(command::amc_gc& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.amc_gc.key.ReadStrptrMaybe
bool                 key_ReadStrptrMaybe(command::amc_gc& parent, algo::strptr in) __attribute__((nothrow));

// func:command.amc_gc..ReadFieldMaybe
bool                 amc_gc_ReadFieldMaybe(command::amc_gc& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::amc_gc from attributes of ascii tuple TUPLE
// func:command.amc_gc..ReadTupleMaybe
bool                 amc_gc_ReadTupleMaybe(command::amc_gc &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.amc_gc..Init
void                 amc_gc_Init(command::amc_gc& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.amc_gc..ToCmdline
tempstr              amc_gc_ToCmdline(command::amc_gc& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.amc_gc.Argv  printfmt:Tuple
// func:command.amc_gc..PrintArgv
void                 amc_gc_PrintArgv(command::amc_gc& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.amc_gc..NArgs
i32                  amc_gc_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.amc_gc_proc
struct amc_gc_proc { // command.amc_gc_proc: Subprocess: Garbage collector for in-memory databases
    algo::cstring     path;      //   "bin/amc_gc"  path for executable
    command::amc_gc   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.amc_gc_proc..Ctor
    inline               amc_gc_proc() __attribute__((nothrow));
    // func:command.amc_gc_proc..Dtor
    inline               ~amc_gc_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.amc_gc_proc.amc_gc.Start
int                  amc_gc_Start(command::amc_gc_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.amc_gc_proc.amc_gc.StartRead
algo::Fildes         amc_gc_StartRead(command::amc_gc_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.amc_gc_proc.amc_gc.Kill
void                 amc_gc_Kill(command::amc_gc_proc& parent);
// Wait for subprocess to return
// func:command.amc_gc_proc.amc_gc.Wait
void                 amc_gc_Wait(command::amc_gc_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.amc_gc_proc.amc_gc.Exec
int                  amc_gc_Exec(command::amc_gc_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.amc_gc_proc.amc_gc.ExecX
void                 amc_gc_ExecX(command::amc_gc_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.amc_gc_proc.amc_gc.Execv
int                  amc_gc_Execv(command::amc_gc_proc& parent) __attribute__((nothrow));
// func:command.amc_gc_proc.amc_gc.ToCmdline
algo::tempstr        amc_gc_ToCmdline(command::amc_gc_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.amc_gc_proc.amc_gc.ToArgv
void                 amc_gc_ToArgv(command::amc_gc_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.amc_gc_proc..Init
inline void          amc_gc_proc_Init(command::amc_gc_proc& parent);
// func:command.amc_gc_proc..Uninit
void                 amc_gc_proc_Uninit(command::amc_gc_proc& parent) __attribute__((nothrow));

// --- command.amc_proc
struct amc_proc { // command.amc_proc: Subprocess: Algo Model Compiler: generate code under include/gen and cpp/gen
    algo::cstring   path;      //   "bin/amc"  path for executable
    command::amc    cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.amc_proc..Ctor
    inline               amc_proc() __attribute__((nothrow));
    // func:command.amc_proc..Dtor
    inline               ~amc_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.amc_proc.amc.Start
int                  amc_Start(command::amc_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.amc_proc.amc.StartRead
algo::Fildes         amc_StartRead(command::amc_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.amc_proc.amc.Kill
void                 amc_Kill(command::amc_proc& parent);
// Wait for subprocess to return
// func:command.amc_proc.amc.Wait
void                 amc_Wait(command::amc_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.amc_proc.amc.Exec
int                  amc_Exec(command::amc_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.amc_proc.amc.ExecX
void                 amc_ExecX(command::amc_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.amc_proc.amc.Execv
int                  amc_Execv(command::amc_proc& parent) __attribute__((nothrow));
// func:command.amc_proc.amc.ToCmdline
algo::tempstr        amc_ToCmdline(command::amc_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.amc_proc.amc.ToArgv
void                 amc_ToArgv(command::amc_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.amc_proc..Init
inline void          amc_proc_Init(command::amc_proc& parent);
// func:command.amc_proc..Uninit
void                 amc_proc_Uninit(command::amc_proc& parent) __attribute__((nothrow));

// --- command.amc_vis
// access: command.amc_vis_proc.amc_vis (Exec)
struct amc_vis { // command.amc_vis
    algo_lib::Regx   ctype;     //   "%"  Sql Regx of dmmeta::Ctype
    algo::cstring    in;        //   "data"  Input directory or filename, - for stdin
    algo::cstring    dot;       //   ""  Save dot file with specified filename
    bool             xref;      //   false  Include all ctypes referenced by selected ones
    bool             xns;       //   false  Cross namespace boundaries
    bool             noinput;   //   false  Deselect module inputs
    bool             check;     //   false  Check model for dependency problems
    bool             render;    //   true  Produce an ascii drawing
    // func:command.amc_vis..Ctor
    inline               amc_vis() __attribute__((nothrow));
};

// Print back to string
// func:command.amc_vis.ctype.Print
void                 ctype_Print(command::amc_vis& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.amc_vis.ctype.ReadStrptrMaybe
bool                 ctype_ReadStrptrMaybe(command::amc_vis& parent, algo::strptr in) __attribute__((nothrow));

// func:command.amc_vis..ReadFieldMaybe
bool                 amc_vis_ReadFieldMaybe(command::amc_vis& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::amc_vis from attributes of ascii tuple TUPLE
// func:command.amc_vis..ReadTupleMaybe
bool                 amc_vis_ReadTupleMaybe(command::amc_vis &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.amc_vis..Init
void                 amc_vis_Init(command::amc_vis& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.amc_vis..ToCmdline
tempstr              amc_vis_ToCmdline(command::amc_vis& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.amc_vis.Argv  printfmt:Auto
// func:command.amc_vis..PrintArgv
void                 amc_vis_PrintArgv(command::amc_vis& row, algo::cstring& str) __attribute__((nothrow));
// func:command.amc_vis..GetAnon
algo::strptr         amc_vis_GetAnon(command::amc_vis &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.amc_vis..NArgs
i32                  amc_vis_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.amc_vis_proc
struct amc_vis_proc { // command.amc_vis_proc: Subprocess: Draw access path diagrams
    algo::cstring      path;      //   "bin/amc_vis"  path for executable
    command::amc_vis   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.amc_vis_proc..Ctor
    inline               amc_vis_proc() __attribute__((nothrow));
    // func:command.amc_vis_proc..Dtor
    inline               ~amc_vis_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.amc_vis_proc.amc_vis.Start
int                  amc_vis_Start(command::amc_vis_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.amc_vis_proc.amc_vis.StartRead
algo::Fildes         amc_vis_StartRead(command::amc_vis_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.amc_vis_proc.amc_vis.Kill
void                 amc_vis_Kill(command::amc_vis_proc& parent);
// Wait for subprocess to return
// func:command.amc_vis_proc.amc_vis.Wait
void                 amc_vis_Wait(command::amc_vis_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.amc_vis_proc.amc_vis.Exec
int                  amc_vis_Exec(command::amc_vis_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.amc_vis_proc.amc_vis.ExecX
void                 amc_vis_ExecX(command::amc_vis_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.amc_vis_proc.amc_vis.Execv
int                  amc_vis_Execv(command::amc_vis_proc& parent) __attribute__((nothrow));
// func:command.amc_vis_proc.amc_vis.ToCmdline
algo::tempstr        amc_vis_ToCmdline(command::amc_vis_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.amc_vis_proc.amc_vis.ToArgv
void                 amc_vis_ToArgv(command::amc_vis_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.amc_vis_proc..Init
inline void          amc_vis_proc_Init(command::amc_vis_proc& parent);
// func:command.amc_vis_proc..Uninit
void                 amc_vis_proc_Uninit(command::amc_vis_proc& parent) __attribute__((nothrow));

// --- command.ams_cat
// access: command.ams_cat_proc.ams_cat (Exec)
struct ams_cat { // command.ams_cat
    algo::cstring   in;   //   "data"  Input directory or filename, - for stdin
    // func:command.ams_cat..Ctor
    inline               ams_cat() __attribute__((nothrow));
};

// func:command.ams_cat..ReadFieldMaybe
bool                 ams_cat_ReadFieldMaybe(command::ams_cat& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::ams_cat from attributes of ascii tuple TUPLE
// func:command.ams_cat..ReadTupleMaybe
bool                 ams_cat_ReadTupleMaybe(command::ams_cat &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.ams_cat..Init
inline void          ams_cat_Init(command::ams_cat& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.ams_cat..ToCmdline
tempstr              ams_cat_ToCmdline(command::ams_cat& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.ams_cat.Argv  printfmt:Tuple
// func:command.ams_cat..PrintArgv
void                 ams_cat_PrintArgv(command::ams_cat& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.ams_cat..NArgs
i32                  ams_cat_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.ams_cat_proc
struct ams_cat_proc { // command.ams_cat_proc: Subprocess: Algo Messaging System sample tool
    algo::cstring      path;      //   "bin/ams_cat"  path for executable
    command::ams_cat   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.ams_cat_proc..Ctor
    inline               ams_cat_proc() __attribute__((nothrow));
    // func:command.ams_cat_proc..Dtor
    inline               ~ams_cat_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.ams_cat_proc.ams_cat.Start
int                  ams_cat_Start(command::ams_cat_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.ams_cat_proc.ams_cat.StartRead
algo::Fildes         ams_cat_StartRead(command::ams_cat_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.ams_cat_proc.ams_cat.Kill
void                 ams_cat_Kill(command::ams_cat_proc& parent);
// Wait for subprocess to return
// func:command.ams_cat_proc.ams_cat.Wait
void                 ams_cat_Wait(command::ams_cat_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.ams_cat_proc.ams_cat.Exec
int                  ams_cat_Exec(command::ams_cat_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.ams_cat_proc.ams_cat.ExecX
void                 ams_cat_ExecX(command::ams_cat_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.ams_cat_proc.ams_cat.Execv
int                  ams_cat_Execv(command::ams_cat_proc& parent) __attribute__((nothrow));
// func:command.ams_cat_proc.ams_cat.ToCmdline
algo::tempstr        ams_cat_ToCmdline(command::ams_cat_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.ams_cat_proc.ams_cat.ToArgv
void                 ams_cat_ToArgv(command::ams_cat_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.ams_cat_proc..Init
inline void          ams_cat_proc_Init(command::ams_cat_proc& parent);
// func:command.ams_cat_proc..Uninit
void                 ams_cat_proc_Uninit(command::ams_cat_proc& parent) __attribute__((nothrow));

// --- command.ams_sendtest
// access: command.ams_sendtest_proc.ams_sendtest (Exec)
struct ams_sendtest { // command.ams_sendtest
    algo::cstring    in;             //   "data"  Input directory or filename, - for stdin
    i32              id;             //   0  Process index (0=parent)
    algo::cstring    file_prefix;    //   ""  Use file_prefix
    i32              nchild;         //   1  Number of stream readers
    bool             blocking;       //   false  Use blocking send mode
    i32              nmsg;           //   1000  Number of messages to send/receive
    algo_lib::Regx   trace;          //   ""  Sql Regx
    i32              timeout;        //   30  Time limit for the send
    i64              recvdelay_ns;   //   0  Pause nanoseconds between messages
    i64              senddelay_ns;   //   0  Pause nanoseconds between messages
    i32              msgsize_min;    //   64  Minimum message length
    i32              msgsize_max;    //   1024  Maximum message length
    i32              bufsize;        //   32768  Shared memory buffer size
    i64              recvdelay;      //   0  Pause nanoseconds between messages
    // func:command.ams_sendtest..Ctor
    inline               ams_sendtest() __attribute__((nothrow));
};

// Print back to string
// func:command.ams_sendtest.trace.Print
void                 trace_Print(command::ams_sendtest& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.ams_sendtest.trace.ReadStrptrMaybe
bool                 trace_ReadStrptrMaybe(command::ams_sendtest& parent, algo::strptr in) __attribute__((nothrow));

// func:command.ams_sendtest..ReadFieldMaybe
bool                 ams_sendtest_ReadFieldMaybe(command::ams_sendtest& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::ams_sendtest from attributes of ascii tuple TUPLE
// func:command.ams_sendtest..ReadTupleMaybe
bool                 ams_sendtest_ReadTupleMaybe(command::ams_sendtest &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.ams_sendtest..Init
void                 ams_sendtest_Init(command::ams_sendtest& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.ams_sendtest..ToCmdline
tempstr              ams_sendtest_ToCmdline(command::ams_sendtest& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.ams_sendtest.Argv  printfmt:Tuple
// func:command.ams_sendtest..PrintArgv
void                 ams_sendtest_PrintArgv(command::ams_sendtest& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.ams_sendtest..NArgs
i32                  ams_sendtest_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.ams_sendtest_proc
struct ams_sendtest_proc { // command.ams_sendtest_proc: Subprocess: Algo Messaging System test tool
    algo::cstring           path;      //   "bin/ams_sendtest"  path for executable
    command::ams_sendtest   cmd;       // command line for child process
    algo::cstring           fstdin;    // redirect for stdin
    algo::cstring           fstdout;   // redirect for stdout
    algo::cstring           fstderr;   // redirect for stderr
    pid_t                   pid;       //   0  pid of running child process
    i32                     timeout;   //   0  optional timeout for child process
    i32                     status;    //   0  last exit status of child process
    // func:command.ams_sendtest_proc..Ctor
    inline               ams_sendtest_proc() __attribute__((nothrow));
    // func:command.ams_sendtest_proc..Dtor
    inline               ~ams_sendtest_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.ams_sendtest_proc.ams_sendtest.Start
int                  ams_sendtest_Start(command::ams_sendtest_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.ams_sendtest_proc.ams_sendtest.StartRead
algo::Fildes         ams_sendtest_StartRead(command::ams_sendtest_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.ams_sendtest_proc.ams_sendtest.Kill
void                 ams_sendtest_Kill(command::ams_sendtest_proc& parent);
// Wait for subprocess to return
// func:command.ams_sendtest_proc.ams_sendtest.Wait
void                 ams_sendtest_Wait(command::ams_sendtest_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.ams_sendtest_proc.ams_sendtest.Exec
int                  ams_sendtest_Exec(command::ams_sendtest_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.ams_sendtest_proc.ams_sendtest.ExecX
void                 ams_sendtest_ExecX(command::ams_sendtest_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.ams_sendtest_proc.ams_sendtest.Execv
int                  ams_sendtest_Execv(command::ams_sendtest_proc& parent) __attribute__((nothrow));
// func:command.ams_sendtest_proc.ams_sendtest.ToCmdline
algo::tempstr        ams_sendtest_ToCmdline(command::ams_sendtest_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.ams_sendtest_proc.ams_sendtest.ToArgv
void                 ams_sendtest_ToArgv(command::ams_sendtest_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.ams_sendtest_proc..Init
inline void          ams_sendtest_proc_Init(command::ams_sendtest_proc& parent);
// func:command.ams_sendtest_proc..Uninit
void                 ams_sendtest_proc_Uninit(command::ams_sendtest_proc& parent) __attribute__((nothrow));

// --- command.apm
// access: command.apm_proc.apm (Exec)
struct apm { // command.apm
    algo::cstring       in;           //   "data"  Input directory or filename, - for stdin
    algo::cstring       pkgdata;      //   ""  Load package definitions from here
    algo_lib::Regx      package;      //   ""  Sql Regx of dev::Package
    algo_lib::Regx      ns;           //   ""  Sql Regx of dmmeta::Ns
    bool                install;      //   false  Install new package (specify -origin)
    bool                update;       //   false  Update package (-origin)
    bool                list;         //   false  List installed packages
    bool                diff;         //   false  Diff package with respect to installed version
    bool                push;         //   false  Evaluate package diff and push it to origin
    bool                check;        //   false  Consistency check
    bool                remove;       //   false  Remove specified package
    algo::Smallstr200   origin;       //   ""  Upstream URL of new package
    algo::Smallstr50    ref;          //   ""  (with -create) Gitref or branch to fetch
    bool                dry_run;      //   false  Do not execute transaction
    bool                showrec;      //   false  Show records belonging to package
    bool                showfile;     //   false  List package files (gitfile records)
    bool                R;            //   false  reverse the diff direction
    bool                l;            //   false  Use local package definition on the remote side
    bool                reset;        //   false  Reset package baseref/origin to those provided by the command line
    bool                checkclean;   //   true  Ensure that changes are applied to a clean directory
    bool                t;            //   false  Select parent packages for operation
    bool                stat;         //   false  (with -diff) show stats
    algo::cstring       annotate;     //   ""  Read file and annotate each input tuple with package(s) it belongs to
    algo::cstring       data_in;      //   "data"  Dataset from which package records are loaded
    bool                e;            //   false  Open selected records in editor
    algo::cstring       binpath;      //   "bin"  (internal use)
    // func:command.apm..Ctor
    inline               apm() __attribute__((nothrow));
};

// Print back to string
// func:command.apm.package.Print
void                 package_Print(command::apm& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.apm.package.ReadStrptrMaybe
bool                 package_ReadStrptrMaybe(command::apm& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.apm.ns.Print
void                 ns_Print(command::apm& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.apm.ns.ReadStrptrMaybe
bool                 ns_ReadStrptrMaybe(command::apm& parent, algo::strptr in) __attribute__((nothrow));

// func:command.apm..ReadFieldMaybe
bool                 apm_ReadFieldMaybe(command::apm& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::apm from attributes of ascii tuple TUPLE
// func:command.apm..ReadTupleMaybe
bool                 apm_ReadTupleMaybe(command::apm &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.apm..Init
void                 apm_Init(command::apm& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.apm..ToCmdline
tempstr              apm_ToCmdline(command::apm& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.apm.Argv  printfmt:Tuple
// func:command.apm..PrintArgv
void                 apm_PrintArgv(command::apm& row, algo::cstring& str) __attribute__((nothrow));
// func:command.apm..GetAnon
algo::strptr         apm_GetAnon(command::apm &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.apm..NArgs
i32                  apm_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.apm_proc
struct apm_proc { // command.apm_proc: Subprocess: Algo Package Manager
    algo::cstring   path;      //   "bin/apm"  path for executable
    command::apm    cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.apm_proc..Ctor
    inline               apm_proc() __attribute__((nothrow));
    // func:command.apm_proc..Dtor
    inline               ~apm_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.apm_proc.apm.Start
int                  apm_Start(command::apm_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.apm_proc.apm.StartRead
algo::Fildes         apm_StartRead(command::apm_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.apm_proc.apm.Kill
void                 apm_Kill(command::apm_proc& parent);
// Wait for subprocess to return
// func:command.apm_proc.apm.Wait
void                 apm_Wait(command::apm_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.apm_proc.apm.Exec
int                  apm_Exec(command::apm_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.apm_proc.apm.ExecX
void                 apm_ExecX(command::apm_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.apm_proc.apm.Execv
int                  apm_Execv(command::apm_proc& parent) __attribute__((nothrow));
// func:command.apm_proc.apm.ToCmdline
algo::tempstr        apm_ToCmdline(command::apm_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.apm_proc.apm.ToArgv
void                 apm_ToArgv(command::apm_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.apm_proc..Init
inline void          apm_proc_Init(command::apm_proc& parent);
// func:command.apm_proc..Uninit
void                 apm_proc_Uninit(command::apm_proc& parent) __attribute__((nothrow));

// --- command.aqlite
// access: command.aqlite_proc.aqlite (Exec)
struct aqlite { // command.aqlite
    algo::cstring    in;     //   "data"  Input directory or filename, - for stdin for schema
    algo::cstring    data;   //   "data"  Input directory for data
    algo::cstring    cmd;    // Sql Query to run
    algo_lib::Regx   ns;     //   "%"  Sql Regx of dmmeta::Ns
    // func:command.aqlite..Ctor
    inline               aqlite() __attribute__((nothrow));
};

// Print back to string
// func:command.aqlite.ns.Print
void                 ns_Print(command::aqlite& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.aqlite.ns.ReadStrptrMaybe
bool                 ns_ReadStrptrMaybe(command::aqlite& parent, algo::strptr in) __attribute__((nothrow));

// func:command.aqlite..ReadFieldMaybe
bool                 aqlite_ReadFieldMaybe(command::aqlite& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::aqlite from attributes of ascii tuple TUPLE
// func:command.aqlite..ReadTupleMaybe
bool                 aqlite_ReadTupleMaybe(command::aqlite &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.aqlite..Init
void                 aqlite_Init(command::aqlite& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.aqlite..ToCmdline
tempstr              aqlite_ToCmdline(command::aqlite& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.aqlite.Argv  printfmt:Tuple
// func:command.aqlite..PrintArgv
void                 aqlite_PrintArgv(command::aqlite& row, algo::cstring& str) __attribute__((nothrow));
// func:command.aqlite..GetAnon
algo::strptr         aqlite_GetAnon(command::aqlite &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.aqlite..NArgs
i32                  aqlite_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.aqlite_proc
struct aqlite_proc { // command.aqlite_proc: Subprocess: Runs sqlite queries against ssim files
    algo::cstring     path;      //   "bin/aqlite"  path for executable
    command::aqlite   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.aqlite_proc..Ctor
    inline               aqlite_proc() __attribute__((nothrow));
    // func:command.aqlite_proc..Dtor
    inline               ~aqlite_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.aqlite_proc.aqlite.Start
int                  aqlite_Start(command::aqlite_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.aqlite_proc.aqlite.StartRead
algo::Fildes         aqlite_StartRead(command::aqlite_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.aqlite_proc.aqlite.Kill
void                 aqlite_Kill(command::aqlite_proc& parent);
// Wait for subprocess to return
// func:command.aqlite_proc.aqlite.Wait
void                 aqlite_Wait(command::aqlite_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.aqlite_proc.aqlite.Exec
int                  aqlite_Exec(command::aqlite_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.aqlite_proc.aqlite.ExecX
void                 aqlite_ExecX(command::aqlite_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.aqlite_proc.aqlite.Execv
int                  aqlite_Execv(command::aqlite_proc& parent) __attribute__((nothrow));
// func:command.aqlite_proc.aqlite.ToCmdline
algo::tempstr        aqlite_ToCmdline(command::aqlite_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.aqlite_proc.aqlite.ToArgv
void                 aqlite_ToArgv(command::aqlite_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.aqlite_proc..Init
inline void          aqlite_proc_Init(command::aqlite_proc& parent);
// func:command.aqlite_proc..Uninit
void                 aqlite_proc_Uninit(command::aqlite_proc& parent) __attribute__((nothrow));

// --- command.atf_amc
// access: command.atf_amc_proc.atf_amc (Exec)
struct atf_amc { // command.atf_amc
    algo::cstring    in;        //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   amctest;   //   "%"  Sql Regx of atfdb::Amctest
    bool             dofork;    //   true  Use fork
    bool             q;         //   false  Quiet mode
    // func:command.atf_amc..Ctor
    inline               atf_amc() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_amc.amctest.Print
void                 amctest_Print(command::atf_amc& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_amc.amctest.ReadStrptrMaybe
bool                 amctest_ReadStrptrMaybe(command::atf_amc& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_amc..ReadFieldMaybe
bool                 atf_amc_ReadFieldMaybe(command::atf_amc& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_amc from attributes of ascii tuple TUPLE
// func:command.atf_amc..ReadTupleMaybe
bool                 atf_amc_ReadTupleMaybe(command::atf_amc &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_amc..Init
void                 atf_amc_Init(command::atf_amc& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_amc..ToCmdline
tempstr              atf_amc_ToCmdline(command::atf_amc& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_amc.Argv  printfmt:Tuple
// func:command.atf_amc..PrintArgv
void                 atf_amc_PrintArgv(command::atf_amc& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_amc..GetAnon
algo::strptr         atf_amc_GetAnon(command::atf_amc &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_amc..NArgs
i32                  atf_amc_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_amc_proc
struct atf_amc_proc { // command.atf_amc_proc: Subprocess: Unit tests for amc (see amctest table)
    algo::cstring      path;      //   "bin/atf_amc"  path for executable
    command::atf_amc   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.atf_amc_proc..Ctor
    inline               atf_amc_proc() __attribute__((nothrow));
    // func:command.atf_amc_proc..Dtor
    inline               ~atf_amc_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_amc_proc.atf_amc.Start
int                  atf_amc_Start(command::atf_amc_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_amc_proc.atf_amc.StartRead
algo::Fildes         atf_amc_StartRead(command::atf_amc_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_amc_proc.atf_amc.Kill
void                 atf_amc_Kill(command::atf_amc_proc& parent);
// Wait for subprocess to return
// func:command.atf_amc_proc.atf_amc.Wait
void                 atf_amc_Wait(command::atf_amc_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_amc_proc.atf_amc.Exec
int                  atf_amc_Exec(command::atf_amc_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_amc_proc.atf_amc.ExecX
void                 atf_amc_ExecX(command::atf_amc_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_amc_proc.atf_amc.Execv
int                  atf_amc_Execv(command::atf_amc_proc& parent) __attribute__((nothrow));
// func:command.atf_amc_proc.atf_amc.ToCmdline
algo::tempstr        atf_amc_ToCmdline(command::atf_amc_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_amc_proc.atf_amc.ToArgv
void                 atf_amc_ToArgv(command::atf_amc_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_amc_proc..Init
inline void          atf_amc_proc_Init(command::atf_amc_proc& parent);
// func:command.atf_amc_proc..Uninit
void                 atf_amc_proc_Uninit(command::atf_amc_proc& parent) __attribute__((nothrow));

// --- command.atf_ci
// access: command.atf_ci_proc.atf_ci (Exec)
struct atf_ci { // command.atf_ci
    algo::cstring    in;        //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   citest;    //   "%"  Sql Regx of atfdb::Citest
    i32              maxerr;    //   0  Exit after this many errors
    algo_lib::Regx   cijob;     //   "%"  Sql Regx of atfdb::Cijob
    bool             capture;   //   false  Capture the output of the test
    // func:command.atf_ci..Ctor
    inline               atf_ci() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_ci.citest.Print
void                 citest_Print(command::atf_ci& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_ci.citest.ReadStrptrMaybe
bool                 citest_ReadStrptrMaybe(command::atf_ci& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.atf_ci.cijob.Print
void                 cijob_Print(command::atf_ci& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_ci.cijob.ReadStrptrMaybe
bool                 cijob_ReadStrptrMaybe(command::atf_ci& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_ci..ReadFieldMaybe
bool                 atf_ci_ReadFieldMaybe(command::atf_ci& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_ci from attributes of ascii tuple TUPLE
// func:command.atf_ci..ReadTupleMaybe
bool                 atf_ci_ReadTupleMaybe(command::atf_ci &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_ci..Init
void                 atf_ci_Init(command::atf_ci& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_ci..ToCmdline
tempstr              atf_ci_ToCmdline(command::atf_ci& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_ci.Argv  printfmt:Tuple
// func:command.atf_ci..PrintArgv
void                 atf_ci_PrintArgv(command::atf_ci& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_ci..GetAnon
algo::strptr         atf_ci_GetAnon(command::atf_ci &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_ci..NArgs
i32                  atf_ci_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_ci_proc
struct atf_ci_proc { // command.atf_ci_proc: Subprocess: Normalization tests (see citest table)
    algo::cstring     path;      //   "bin/atf_ci"  path for executable
    command::atf_ci   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.atf_ci_proc..Ctor
    inline               atf_ci_proc() __attribute__((nothrow));
    // func:command.atf_ci_proc..Dtor
    inline               ~atf_ci_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_ci_proc.atf_ci.Start
int                  atf_ci_Start(command::atf_ci_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_ci_proc.atf_ci.StartRead
algo::Fildes         atf_ci_StartRead(command::atf_ci_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_ci_proc.atf_ci.Kill
void                 atf_ci_Kill(command::atf_ci_proc& parent);
// Wait for subprocess to return
// func:command.atf_ci_proc.atf_ci.Wait
void                 atf_ci_Wait(command::atf_ci_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_ci_proc.atf_ci.Exec
int                  atf_ci_Exec(command::atf_ci_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_ci_proc.atf_ci.ExecX
void                 atf_ci_ExecX(command::atf_ci_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_ci_proc.atf_ci.Execv
int                  atf_ci_Execv(command::atf_ci_proc& parent) __attribute__((nothrow));
// func:command.atf_ci_proc.atf_ci.ToCmdline
algo::tempstr        atf_ci_ToCmdline(command::atf_ci_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_ci_proc.atf_ci.ToArgv
void                 atf_ci_ToArgv(command::atf_ci_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_ci_proc..Init
inline void          atf_ci_proc_Init(command::atf_ci_proc& parent);
// func:command.atf_ci_proc..Uninit
void                 atf_ci_proc_Uninit(command::atf_ci_proc& parent) __attribute__((nothrow));

// --- command.atf_cmdline
// access: command.atf_cmdline_proc.atf_cmdline (Exec)
struct atf_cmdline { // command.atf_cmdline
    algo::cstring       in;            //   "data"  Input directory or filename, - for stdin
    bool                exec;          //   false  Execv itself
    algo::cstring       astr;          // Required anon string
    i32                 anum;          //   0  Anon number
    double              adbl;          //   0.0  Anon double
    bool                aflag;         //   false  Anon flag
    algo::cstring       str;           // Required string
    i32                 num;           //   0  Required Number
    double              dbl;           //   0.0  Required double
    bool                flag;          //   false  Required flag
    algo::cstring       dstr;          //   "blah"  Predefined string
    i32                 dnum;          //   -33  Predefined number
    double              ddbl;          //   0.0001  Predefined double
    bool                dflag;         //   true  Predefined flag
    algo::cstring*      mstr_elems;    // pointer to elements
    u32                 mstr_n;        // number of elements in array
    u32                 mstr_max;      // max. capacity of array before realloc
    i32*                mnum_elems;    // pointer to elements
    u32                 mnum_n;        // number of elements in array
    u32                 mnum_max;      // max. capacity of array before realloc
    double*             mdbl_elems;    // pointer to elements
    u32                 mdbl_n;        // number of elements in array
    u32                 mdbl_max;      // max. capacity of array before realloc
    i32*                amnum_elems;   // pointer to elements
    u32                 amnum_n;       // number of elements in array
    u32                 amnum_max;     // max. capacity of array before realloc
    u8                  fconst;        //   0  Fconst for field
    algo::Month         cconst;        // Fconst for arg ctype
    algo_lib::Regx      dregx;         //   "%"  Sql Regx of dmmeta::Ctype
    algo::Smallstr100   dpkey;         //   ""  Predefined pkey
    // func:command.atf_cmdline..AssignOp
    command::atf_cmdline& operator =(const command::atf_cmdline &rhs) __attribute__((nothrow));
    // func:command.atf_cmdline..Ctor
    inline               atf_cmdline() __attribute__((nothrow));
    // func:command.atf_cmdline..Dtor
    inline               ~atf_cmdline() __attribute__((nothrow));
    // func:command.atf_cmdline..CopyCtor
    atf_cmdline(const command::atf_cmdline &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.atf_cmdline.mstr.Addary
algo::aryptr<algo::cstring> mstr_Addary(command::atf_cmdline& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.atf_cmdline.mstr.Alloc
algo::cstring&       mstr_Alloc(command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.atf_cmdline.mstr.AllocAt
algo::cstring&       mstr_AllocAt(command::atf_cmdline& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mstr.AllocN
algo::aryptr<algo::cstring> mstr_AllocN(command::atf_cmdline& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.atf_cmdline.mstr.EmptyQ
inline bool          mstr_EmptyQ(command::atf_cmdline& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.atf_cmdline.mstr.Find
inline algo::cstring* mstr_Find(command::atf_cmdline& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.atf_cmdline.mstr.Getary
inline algo::aryptr<algo::cstring> mstr_Getary(const command::atf_cmdline& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.atf_cmdline.mstr.Last
inline algo::cstring* mstr_Last(command::atf_cmdline& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.atf_cmdline.mstr.Max
inline i32           mstr_Max(command::atf_cmdline& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.atf_cmdline.mstr.N
inline i32           mstr_N(const command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.atf_cmdline.mstr.Remove
void                 mstr_Remove(command::atf_cmdline& parent, u32 i) __attribute__((nothrow));
// func:command.atf_cmdline.mstr.RemoveAll
void                 mstr_RemoveAll(command::atf_cmdline& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.atf_cmdline.mstr.RemoveLast
void                 mstr_RemoveLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.atf_cmdline.mstr.Reserve
inline void          mstr_Reserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.atf_cmdline.mstr.AbsReserve
void                 mstr_AbsReserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.atf_cmdline.mstr.Setary
void                 mstr_Setary(command::atf_cmdline& parent, command::atf_cmdline &rhs) __attribute__((nothrow));
// Copy specified array into mstr, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.atf_cmdline.mstr.Setary2
void                 mstr_Setary(command::atf_cmdline& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.atf_cmdline.mstr.qFind
inline algo::cstring& mstr_qFind(command::atf_cmdline& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.atf_cmdline.mstr.qLast
inline algo::cstring& mstr_qLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.atf_cmdline.mstr.rowid_Get
inline u64           mstr_rowid_Get(command::atf_cmdline& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mstr.AllocNVal
algo::aryptr<algo::cstring> mstr_AllocNVal(command::atf_cmdline& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.atf_cmdline.mstr.ReadStrptrMaybe
bool                 mstr_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.atf_cmdline.mnum.Addary
algo::aryptr<i32>    mnum_Addary(command::atf_cmdline& parent, algo::aryptr<i32> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.atf_cmdline.mnum.Alloc
i32&                 mnum_Alloc(command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.atf_cmdline.mnum.AllocAt
i32&                 mnum_AllocAt(command::atf_cmdline& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mnum.AllocN
algo::aryptr<i32>    mnum_AllocN(command::atf_cmdline& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.atf_cmdline.mnum.EmptyQ
inline bool          mnum_EmptyQ(command::atf_cmdline& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.atf_cmdline.mnum.Find
inline i32*          mnum_Find(command::atf_cmdline& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.atf_cmdline.mnum.Getary
inline algo::aryptr<i32> mnum_Getary(const command::atf_cmdline& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.atf_cmdline.mnum.Last
inline i32*          mnum_Last(command::atf_cmdline& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.atf_cmdline.mnum.Max
inline i32           mnum_Max(command::atf_cmdline& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.atf_cmdline.mnum.N
inline i32           mnum_N(const command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.atf_cmdline.mnum.Remove
void                 mnum_Remove(command::atf_cmdline& parent, u32 i) __attribute__((nothrow));
// func:command.atf_cmdline.mnum.RemoveAll
inline void          mnum_RemoveAll(command::atf_cmdline& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.atf_cmdline.mnum.RemoveLast
void                 mnum_RemoveLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.atf_cmdline.mnum.Reserve
inline void          mnum_Reserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.atf_cmdline.mnum.AbsReserve
void                 mnum_AbsReserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.atf_cmdline.mnum.Setary
void                 mnum_Setary(command::atf_cmdline& parent, command::atf_cmdline &rhs) __attribute__((nothrow));
// Copy specified array into mnum, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.atf_cmdline.mnum.Setary2
void                 mnum_Setary(command::atf_cmdline& parent, const algo::aryptr<i32> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.atf_cmdline.mnum.qFind
inline i32&          mnum_qFind(command::atf_cmdline& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.atf_cmdline.mnum.qLast
inline i32&          mnum_qLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.atf_cmdline.mnum.rowid_Get
inline u64           mnum_rowid_Get(command::atf_cmdline& parent, i32 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mnum.AllocNVal
algo::aryptr<i32>    mnum_AllocNVal(command::atf_cmdline& parent, int n_elems, const i32& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.atf_cmdline.mnum.ReadStrptrMaybe
bool                 mnum_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.atf_cmdline.mdbl.Addary
algo::aryptr<double> mdbl_Addary(command::atf_cmdline& parent, algo::aryptr<double> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.atf_cmdline.mdbl.Alloc
double&              mdbl_Alloc(command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.atf_cmdline.mdbl.AllocAt
double&              mdbl_AllocAt(command::atf_cmdline& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mdbl.AllocN
algo::aryptr<double> mdbl_AllocN(command::atf_cmdline& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.atf_cmdline.mdbl.EmptyQ
inline bool          mdbl_EmptyQ(command::atf_cmdline& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.atf_cmdline.mdbl.Find
inline double*       mdbl_Find(command::atf_cmdline& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.atf_cmdline.mdbl.Getary
inline algo::aryptr<double> mdbl_Getary(const command::atf_cmdline& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.atf_cmdline.mdbl.Last
inline double*       mdbl_Last(command::atf_cmdline& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.atf_cmdline.mdbl.Max
inline i32           mdbl_Max(command::atf_cmdline& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.atf_cmdline.mdbl.N
inline i32           mdbl_N(const command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.atf_cmdline.mdbl.Remove
void                 mdbl_Remove(command::atf_cmdline& parent, u32 i) __attribute__((nothrow));
// func:command.atf_cmdline.mdbl.RemoveAll
inline void          mdbl_RemoveAll(command::atf_cmdline& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.atf_cmdline.mdbl.RemoveLast
void                 mdbl_RemoveLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.atf_cmdline.mdbl.Reserve
inline void          mdbl_Reserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.atf_cmdline.mdbl.AbsReserve
void                 mdbl_AbsReserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.atf_cmdline.mdbl.Setary
void                 mdbl_Setary(command::atf_cmdline& parent, command::atf_cmdline &rhs) __attribute__((nothrow));
// Copy specified array into mdbl, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.atf_cmdline.mdbl.Setary2
void                 mdbl_Setary(command::atf_cmdline& parent, const algo::aryptr<double> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.atf_cmdline.mdbl.qFind
inline double&       mdbl_qFind(command::atf_cmdline& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.atf_cmdline.mdbl.qLast
inline double&       mdbl_qLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.atf_cmdline.mdbl.rowid_Get
inline u64           mdbl_rowid_Get(command::atf_cmdline& parent, double &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.mdbl.AllocNVal
algo::aryptr<double> mdbl_AllocNVal(command::atf_cmdline& parent, int n_elems, const double& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.atf_cmdline.mdbl.ReadStrptrMaybe
bool                 mdbl_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.atf_cmdline.amnum.Addary
algo::aryptr<i32>    amnum_Addary(command::atf_cmdline& parent, algo::aryptr<i32> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.atf_cmdline.amnum.Alloc
i32&                 amnum_Alloc(command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.atf_cmdline.amnum.AllocAt
i32&                 amnum_AllocAt(command::atf_cmdline& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.amnum.AllocN
algo::aryptr<i32>    amnum_AllocN(command::atf_cmdline& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.atf_cmdline.amnum.EmptyQ
inline bool          amnum_EmptyQ(command::atf_cmdline& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.atf_cmdline.amnum.Find
inline i32*          amnum_Find(command::atf_cmdline& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.atf_cmdline.amnum.Getary
inline algo::aryptr<i32> amnum_Getary(const command::atf_cmdline& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.atf_cmdline.amnum.Last
inline i32*          amnum_Last(command::atf_cmdline& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.atf_cmdline.amnum.Max
inline i32           amnum_Max(command::atf_cmdline& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.atf_cmdline.amnum.N
inline i32           amnum_N(const command::atf_cmdline& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.atf_cmdline.amnum.Remove
void                 amnum_Remove(command::atf_cmdline& parent, u32 i) __attribute__((nothrow));
// func:command.atf_cmdline.amnum.RemoveAll
inline void          amnum_RemoveAll(command::atf_cmdline& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.atf_cmdline.amnum.RemoveLast
void                 amnum_RemoveLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.atf_cmdline.amnum.Reserve
inline void          amnum_Reserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.atf_cmdline.amnum.AbsReserve
void                 amnum_AbsReserve(command::atf_cmdline& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.atf_cmdline.amnum.Setary
void                 amnum_Setary(command::atf_cmdline& parent, command::atf_cmdline &rhs) __attribute__((nothrow));
// Copy specified array into amnum, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.atf_cmdline.amnum.Setary2
void                 amnum_Setary(command::atf_cmdline& parent, const algo::aryptr<i32> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.atf_cmdline.amnum.qFind
inline i32&          amnum_qFind(command::atf_cmdline& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.atf_cmdline.amnum.qLast
inline i32&          amnum_qLast(command::atf_cmdline& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.atf_cmdline.amnum.rowid_Get
inline u64           amnum_rowid_Get(command::atf_cmdline& parent, i32 &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.atf_cmdline.amnum.AllocNVal
algo::aryptr<i32>    amnum_AllocNVal(command::atf_cmdline& parent, int n_elems, const i32& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.atf_cmdline.amnum.ReadStrptrMaybe
bool                 amnum_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr in_str) __attribute__((nothrow));

// Get value of field as enum type
// func:command.atf_cmdline.fconst.GetEnum
inline command_atf_cmdline_fconst_Enum fconst_GetEnum(const command::atf_cmdline& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:command.atf_cmdline.fconst.SetEnum
inline void          fconst_SetEnum(command::atf_cmdline& parent, command_atf_cmdline_fconst_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:command.atf_cmdline.fconst.ToCstr
const char*          fconst_ToCstr(const command::atf_cmdline& parent) __attribute__((nothrow));
// Convert fconst to a string. First, attempt conversion to a known string.
// If no string matches, print fconst as a numeric value.
// func:command.atf_cmdline.fconst.Print
void                 fconst_Print(const command::atf_cmdline& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:command.atf_cmdline.fconst.SetStrptrMaybe
bool                 fconst_SetStrptrMaybe(command::atf_cmdline& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:command.atf_cmdline.fconst.SetStrptr
void                 fconst_SetStrptr(command::atf_cmdline& parent, algo::strptr rhs, command_atf_cmdline_fconst_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:command.atf_cmdline.fconst.ReadStrptrMaybe
bool                 fconst_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr rhs) __attribute__((nothrow));

// Print back to string
// func:command.atf_cmdline.dregx.Print
void                 dregx_Print(command::atf_cmdline& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_cmdline.dregx.ReadStrptrMaybe
bool                 dregx_ReadStrptrMaybe(command::atf_cmdline& parent, algo::strptr in) __attribute__((nothrow));

// proceed to next item
// func:command.atf_cmdline.mstr_curs.Next
inline void          atf_cmdline_mstr_curs_Next(atf_cmdline_mstr_curs &curs) __attribute__((nothrow));
// func:command.atf_cmdline.mstr_curs.Reset
inline void          atf_cmdline_mstr_curs_Reset(atf_cmdline_mstr_curs &curs, command::atf_cmdline &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.atf_cmdline.mstr_curs.ValidQ
inline bool          atf_cmdline_mstr_curs_ValidQ(atf_cmdline_mstr_curs &curs) __attribute__((nothrow));
// item access
// func:command.atf_cmdline.mstr_curs.Access
inline algo::cstring& atf_cmdline_mstr_curs_Access(atf_cmdline_mstr_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.atf_cmdline.mnum_curs.Next
inline void          atf_cmdline_mnum_curs_Next(atf_cmdline_mnum_curs &curs) __attribute__((nothrow));
// func:command.atf_cmdline.mnum_curs.Reset
inline void          atf_cmdline_mnum_curs_Reset(atf_cmdline_mnum_curs &curs, command::atf_cmdline &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.atf_cmdline.mnum_curs.ValidQ
inline bool          atf_cmdline_mnum_curs_ValidQ(atf_cmdline_mnum_curs &curs) __attribute__((nothrow));
// item access
// func:command.atf_cmdline.mnum_curs.Access
inline i32&          atf_cmdline_mnum_curs_Access(atf_cmdline_mnum_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.atf_cmdline.mdbl_curs.Next
inline void          atf_cmdline_mdbl_curs_Next(atf_cmdline_mdbl_curs &curs) __attribute__((nothrow));
// func:command.atf_cmdline.mdbl_curs.Reset
inline void          atf_cmdline_mdbl_curs_Reset(atf_cmdline_mdbl_curs &curs, command::atf_cmdline &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.atf_cmdline.mdbl_curs.ValidQ
inline bool          atf_cmdline_mdbl_curs_ValidQ(atf_cmdline_mdbl_curs &curs) __attribute__((nothrow));
// item access
// func:command.atf_cmdline.mdbl_curs.Access
inline double&       atf_cmdline_mdbl_curs_Access(atf_cmdline_mdbl_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.atf_cmdline.amnum_curs.Next
inline void          atf_cmdline_amnum_curs_Next(atf_cmdline_amnum_curs &curs) __attribute__((nothrow));
// func:command.atf_cmdline.amnum_curs.Reset
inline void          atf_cmdline_amnum_curs_Reset(atf_cmdline_amnum_curs &curs, command::atf_cmdline &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.atf_cmdline.amnum_curs.ValidQ
inline bool          atf_cmdline_amnum_curs_ValidQ(atf_cmdline_amnum_curs &curs) __attribute__((nothrow));
// item access
// func:command.atf_cmdline.amnum_curs.Access
inline i32&          atf_cmdline_amnum_curs_Access(atf_cmdline_amnum_curs &curs) __attribute__((nothrow));
// func:command.atf_cmdline..ReadFieldMaybe
bool                 atf_cmdline_ReadFieldMaybe(command::atf_cmdline& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_cmdline from attributes of ascii tuple TUPLE
// func:command.atf_cmdline..ReadTupleMaybe
bool                 atf_cmdline_ReadTupleMaybe(command::atf_cmdline &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_cmdline..Init
void                 atf_cmdline_Init(command::atf_cmdline& parent);
// func:command.atf_cmdline..Uninit
void                 atf_cmdline_Uninit(command::atf_cmdline& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_cmdline..ToCmdline
tempstr              atf_cmdline_ToCmdline(command::atf_cmdline& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_cmdline.Argv  printfmt:Tuple
// func:command.atf_cmdline..PrintArgv
void                 atf_cmdline_PrintArgv(command::atf_cmdline& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_cmdline..GetAnon
algo::strptr         atf_cmdline_GetAnon(command::atf_cmdline &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_cmdline..NArgs
i32                  atf_cmdline_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_cmdline_proc
struct atf_cmdline_proc { // command.atf_cmdline_proc: Subprocess: Test tool for command line parsing
    algo::cstring          path;      //   "bin/atf_cmdline"  path for executable
    command::atf_cmdline   cmd;       // command line for child process
    algo::cstring          fstdin;    // redirect for stdin
    algo::cstring          fstdout;   // redirect for stdout
    algo::cstring          fstderr;   // redirect for stderr
    pid_t                  pid;       //   0  pid of running child process
    i32                    timeout;   //   0  optional timeout for child process
    i32                    status;    //   0  last exit status of child process
    // func:command.atf_cmdline_proc..Ctor
    inline               atf_cmdline_proc() __attribute__((nothrow));
    // func:command.atf_cmdline_proc..Dtor
    inline               ~atf_cmdline_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_cmdline_proc.atf_cmdline.Start
int                  atf_cmdline_Start(command::atf_cmdline_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_cmdline_proc.atf_cmdline.StartRead
algo::Fildes         atf_cmdline_StartRead(command::atf_cmdline_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_cmdline_proc.atf_cmdline.Kill
void                 atf_cmdline_Kill(command::atf_cmdline_proc& parent);
// Wait for subprocess to return
// func:command.atf_cmdline_proc.atf_cmdline.Wait
void                 atf_cmdline_Wait(command::atf_cmdline_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_cmdline_proc.atf_cmdline.Exec
int                  atf_cmdline_Exec(command::atf_cmdline_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_cmdline_proc.atf_cmdline.ExecX
void                 atf_cmdline_ExecX(command::atf_cmdline_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_cmdline_proc.atf_cmdline.Execv
int                  atf_cmdline_Execv(command::atf_cmdline_proc& parent) __attribute__((nothrow));
// func:command.atf_cmdline_proc.atf_cmdline.ToCmdline
algo::tempstr        atf_cmdline_ToCmdline(command::atf_cmdline_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_cmdline_proc.atf_cmdline.ToArgv
void                 atf_cmdline_ToArgv(command::atf_cmdline_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_cmdline_proc..Init
inline void          atf_cmdline_proc_Init(command::atf_cmdline_proc& parent);
// func:command.atf_cmdline_proc..Uninit
void                 atf_cmdline_proc_Uninit(command::atf_cmdline_proc& parent) __attribute__((nothrow));

// --- command.atf_comp
// access: command.atf_comp_proc.atf_comp (Exec)
struct atf_comp { // command.atf_comp
    algo::cstring      in;                //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx     comptest;          //   "%"  Sql Regx of atfdb::Comptest
    bool               mdbg;              //   false  (action) Run component test under debugger
    bool               run;               //   true  (action) Run selected component tests
    bool               capture;           //   false  (action) Re-capture test results
    bool               print;             //   false  (action) Print testcase
    bool               printinput;        //   false  (action) Print input of test case
    bool               e;                 //   false  (action) Open selected testcases in an editor
    bool               normalize;         //   false  (action) Renumber and normalize tmsgs
    bool               covcapture;        //   false  (action) Capture new coverage percentages and save back
    bool               covcheck;          //   false  (action) Check coverage percentages against tgtcov table
    algo::cstring      compdir;           //   ""  Component image directory (exe)
    algo::Smallstr50   cfg;               //   "release"  Set config
    bool               check_untracked;   //   true  Check for untracked file before allowing test to run
    i32                maxerr;            //   1  Exit after this many errors
    bool               build;             //   false  Build given cfg before test
    bool               ood;               //   false  Check given cfg for ood before test
    bool               memcheck;          //   false  Run under memory checker (valgrind)
    bool               force;             //   false  (With -memcheck) run suppressed memcheck
    bool               callgrind;         //   false  Run under callgrind profiler (valgrind)
    i32                maxjobs;           //   0  Maximum number of tests run in parallel
    bool               stream;            //   false  prints component's output
    bool               i;                 //   false  Read and execute testcase from stdin
    bool               write;             //   true  (implied with -e) Write any changes back to ssim tables
    bool               report;            //   false  Print final report
    algo::cstring      b;                 //   ""  Breakpoint passed to mdbg as-is
    // func:command.atf_comp..Ctor
    inline               atf_comp() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_comp.comptest.Print
void                 comptest_Print(command::atf_comp& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_comp.comptest.ReadStrptrMaybe
bool                 comptest_ReadStrptrMaybe(command::atf_comp& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_comp..ReadFieldMaybe
bool                 atf_comp_ReadFieldMaybe(command::atf_comp& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_comp from attributes of ascii tuple TUPLE
// func:command.atf_comp..ReadTupleMaybe
bool                 atf_comp_ReadTupleMaybe(command::atf_comp &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_comp..Init
void                 atf_comp_Init(command::atf_comp& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_comp..ToCmdline
tempstr              atf_comp_ToCmdline(command::atf_comp& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_comp.Argv  printfmt:Tuple
// func:command.atf_comp..PrintArgv
void                 atf_comp_PrintArgv(command::atf_comp& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_comp..GetAnon
algo::strptr         atf_comp_GetAnon(command::atf_comp &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_comp..NArgs
i32                  atf_comp_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_comp_proc
struct atf_comp_proc { // command.atf_comp_proc: Subprocess: Algo Test Framework - Component test execution
    algo::cstring       path;      //   "bin/atf_comp"  path for executable
    command::atf_comp   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.atf_comp_proc..Ctor
    inline               atf_comp_proc() __attribute__((nothrow));
    // func:command.atf_comp_proc..Dtor
    inline               ~atf_comp_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_comp_proc.atf_comp.Start
int                  atf_comp_Start(command::atf_comp_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_comp_proc.atf_comp.StartRead
algo::Fildes         atf_comp_StartRead(command::atf_comp_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_comp_proc.atf_comp.Kill
void                 atf_comp_Kill(command::atf_comp_proc& parent);
// Wait for subprocess to return
// func:command.atf_comp_proc.atf_comp.Wait
void                 atf_comp_Wait(command::atf_comp_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_comp_proc.atf_comp.Exec
int                  atf_comp_Exec(command::atf_comp_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_comp_proc.atf_comp.ExecX
void                 atf_comp_ExecX(command::atf_comp_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_comp_proc.atf_comp.Execv
int                  atf_comp_Execv(command::atf_comp_proc& parent) __attribute__((nothrow));
// func:command.atf_comp_proc.atf_comp.ToCmdline
algo::tempstr        atf_comp_ToCmdline(command::atf_comp_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_comp_proc.atf_comp.ToArgv
void                 atf_comp_ToArgv(command::atf_comp_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_comp_proc..Init
inline void          atf_comp_proc_Init(command::atf_comp_proc& parent);
// func:command.atf_comp_proc..Uninit
void                 atf_comp_proc_Uninit(command::atf_comp_proc& parent) __attribute__((nothrow));

// --- command.atf_cov
// access: command.atf_cov_proc.atf_cov (Exec)
struct atf_cov { // command.atf_cov
    algo::cstring    in;          //   "data"  Input directory or filename, - for stdin
    algo::cstring    covdir;      //   "temp/covdata"  Output directory to save coverage data
    algo::cstring    logfile;     //   ""  Log file
    algo::cstring    runcmd;      //   ""  command to run
    algo_lib::Regx   exclude;     //   "(extern|include/gen|cpp/gen)/%"  Sql Regx of dev::Gitfile
    algo::cstring    mergepath;   //   ""  colon-separated dir list to load .cov.ssim files from
    bool             gcov;        //   false  run gcov
    bool             ssim;        //   false  write out ssim files
    bool             report;      //   false  write out all reports
    bool             capture;     //   false  Write coverage information into tgtcov table
    bool             xmlpretty;   //   false  Generate pretty-formatted XML
    bool             summary;     //   true  Show summary figures
    bool             check;       //   false  Check coverage information against tgtcov table
    // func:command.atf_cov..Ctor
    inline               atf_cov() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_cov.exclude.Print
void                 exclude_Print(command::atf_cov& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_cov.exclude.ReadStrptrMaybe
bool                 exclude_ReadStrptrMaybe(command::atf_cov& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_cov..ReadFieldMaybe
bool                 atf_cov_ReadFieldMaybe(command::atf_cov& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_cov from attributes of ascii tuple TUPLE
// func:command.atf_cov..ReadTupleMaybe
bool                 atf_cov_ReadTupleMaybe(command::atf_cov &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_cov..Init
void                 atf_cov_Init(command::atf_cov& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_cov..ToCmdline
tempstr              atf_cov_ToCmdline(command::atf_cov& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_cov.Argv  printfmt:Tuple
// func:command.atf_cov..PrintArgv
void                 atf_cov_PrintArgv(command::atf_cov& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_cov..NArgs
i32                  atf_cov_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_cov_proc
struct atf_cov_proc { // command.atf_cov_proc: Subprocess: Line coverage
    algo::cstring      path;      //   "bin/atf_cov"  path for executable
    command::atf_cov   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.atf_cov_proc..Ctor
    inline               atf_cov_proc() __attribute__((nothrow));
    // func:command.atf_cov_proc..Dtor
    inline               ~atf_cov_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_cov_proc.atf_cov.Start
int                  atf_cov_Start(command::atf_cov_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_cov_proc.atf_cov.StartRead
algo::Fildes         atf_cov_StartRead(command::atf_cov_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_cov_proc.atf_cov.Kill
void                 atf_cov_Kill(command::atf_cov_proc& parent);
// Wait for subprocess to return
// func:command.atf_cov_proc.atf_cov.Wait
void                 atf_cov_Wait(command::atf_cov_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_cov_proc.atf_cov.Exec
int                  atf_cov_Exec(command::atf_cov_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_cov_proc.atf_cov.ExecX
void                 atf_cov_ExecX(command::atf_cov_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_cov_proc.atf_cov.Execv
int                  atf_cov_Execv(command::atf_cov_proc& parent) __attribute__((nothrow));
// func:command.atf_cov_proc.atf_cov.ToCmdline
algo::tempstr        atf_cov_ToCmdline(command::atf_cov_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_cov_proc.atf_cov.ToArgv
void                 atf_cov_ToArgv(command::atf_cov_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_cov_proc..Init
inline void          atf_cov_proc_Init(command::atf_cov_proc& parent);
// func:command.atf_cov_proc..Uninit
void                 atf_cov_proc_Uninit(command::atf_cov_proc& parent) __attribute__((nothrow));

// --- command.atf_fuzz
// access: command.atf_fuzz_proc.atf_fuzz (Exec)
struct atf_fuzz { // command.atf_fuzz
    algo::cstring      reprofile;   //   "temp/atf_fuzz.repro"  File where repros are stored
    algo::Smallstr16   target;      //   ""  Target to fuzz
    algo::cstring      args;        //   ""  Additional arguments to target
    algo::cstring      inputfile;   //   ""  File with input tuples.
    algo_lib::Regx     fuzzstrat;   //   "%"  Sql Regx of atfdb::Fuzzstrat
    algo::cstring      in;          //   "data"  Input directory or filename, - for stdin
    i32                seed;        //   0  Random seed
    double             testprob;    //   1  Run each case with this probability
    // func:command.atf_fuzz..Ctor
    inline               atf_fuzz() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_fuzz.fuzzstrat.Print
void                 fuzzstrat_Print(command::atf_fuzz& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_fuzz.fuzzstrat.ReadStrptrMaybe
bool                 fuzzstrat_ReadStrptrMaybe(command::atf_fuzz& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_fuzz..ReadFieldMaybe
bool                 atf_fuzz_ReadFieldMaybe(command::atf_fuzz& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_fuzz from attributes of ascii tuple TUPLE
// func:command.atf_fuzz..ReadTupleMaybe
bool                 atf_fuzz_ReadTupleMaybe(command::atf_fuzz &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_fuzz..Init
void                 atf_fuzz_Init(command::atf_fuzz& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_fuzz..ToCmdline
tempstr              atf_fuzz_ToCmdline(command::atf_fuzz& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_fuzz.Argv  printfmt:Tuple
// func:command.atf_fuzz..PrintArgv
void                 atf_fuzz_PrintArgv(command::atf_fuzz& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_fuzz..GetAnon
algo::strptr         atf_fuzz_GetAnon(command::atf_fuzz &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_fuzz..NArgs
i32                  atf_fuzz_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_fuzz_proc
struct atf_fuzz_proc { // command.atf_fuzz_proc: Subprocess: Generator of bad inputs for targets
    algo::cstring       path;      //   "bin/atf_fuzz"  path for executable
    command::atf_fuzz   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.atf_fuzz_proc..Ctor
    inline               atf_fuzz_proc() __attribute__((nothrow));
    // func:command.atf_fuzz_proc..Dtor
    inline               ~atf_fuzz_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_fuzz_proc.atf_fuzz.Start
int                  atf_fuzz_Start(command::atf_fuzz_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_fuzz_proc.atf_fuzz.StartRead
algo::Fildes         atf_fuzz_StartRead(command::atf_fuzz_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_fuzz_proc.atf_fuzz.Kill
void                 atf_fuzz_Kill(command::atf_fuzz_proc& parent);
// Wait for subprocess to return
// func:command.atf_fuzz_proc.atf_fuzz.Wait
void                 atf_fuzz_Wait(command::atf_fuzz_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_fuzz_proc.atf_fuzz.Exec
int                  atf_fuzz_Exec(command::atf_fuzz_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_fuzz_proc.atf_fuzz.ExecX
void                 atf_fuzz_ExecX(command::atf_fuzz_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_fuzz_proc.atf_fuzz.Execv
int                  atf_fuzz_Execv(command::atf_fuzz_proc& parent) __attribute__((nothrow));
// func:command.atf_fuzz_proc.atf_fuzz.ToCmdline
algo::tempstr        atf_fuzz_ToCmdline(command::atf_fuzz_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_fuzz_proc.atf_fuzz.ToArgv
void                 atf_fuzz_ToArgv(command::atf_fuzz_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_fuzz_proc..Init
inline void          atf_fuzz_proc_Init(command::atf_fuzz_proc& parent);
// func:command.atf_fuzz_proc..Uninit
void                 atf_fuzz_proc_Uninit(command::atf_fuzz_proc& parent) __attribute__((nothrow));

// --- command.atf_gcli
// access: command.atf_gcli_proc.atf_gcli (Exec)
struct atf_gcli { // command.atf_gcli
    algo::cstring    in;              //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   gtblacttst;      //   "%"  Sql Regx of gclidb::Gtblacttst
    algo::cstring    id;              //   ""  Use this issue for $ISSUE substitutions
    algo::cstring    mr;              //   ""  Use this issue for $MR substitutions
    algo::cstring    note;            //   ""  Use this issue for $NOTE substitutions
    bool             capture;         //   false  Capture test command output into gverbtout
    bool             skip_init;       //   false  Skip setting local files - already set
    bool             skip_git_init;   //   false  Skip setting local files - already set
    bool             dry_run;         //   false  Print actions, do not perform
    // func:command.atf_gcli..Ctor
    inline               atf_gcli() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_gcli.gtblacttst.Print
void                 gtblacttst_Print(command::atf_gcli& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_gcli.gtblacttst.ReadStrptrMaybe
bool                 gtblacttst_ReadStrptrMaybe(command::atf_gcli& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_gcli..ReadFieldMaybe
bool                 atf_gcli_ReadFieldMaybe(command::atf_gcli& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_gcli from attributes of ascii tuple TUPLE
// func:command.atf_gcli..ReadTupleMaybe
bool                 atf_gcli_ReadTupleMaybe(command::atf_gcli &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_gcli..Init
void                 atf_gcli_Init(command::atf_gcli& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_gcli..ToCmdline
tempstr              atf_gcli_ToCmdline(command::atf_gcli& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_gcli.Argv  printfmt:Tuple
// func:command.atf_gcli..PrintArgv
void                 atf_gcli_PrintArgv(command::atf_gcli& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_gcli..NArgs
i32                  atf_gcli_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_gcli_proc
struct atf_gcli_proc { // command.atf_gcli_proc: Subprocess: test harness for gcli
    algo::cstring       path;      //   "bin/atf_gcli"  path for executable
    command::atf_gcli   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.atf_gcli_proc..Ctor
    inline               atf_gcli_proc() __attribute__((nothrow));
    // func:command.atf_gcli_proc..Dtor
    inline               ~atf_gcli_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_gcli_proc.atf_gcli.Start
int                  atf_gcli_Start(command::atf_gcli_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_gcli_proc.atf_gcli.StartRead
algo::Fildes         atf_gcli_StartRead(command::atf_gcli_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_gcli_proc.atf_gcli.Kill
void                 atf_gcli_Kill(command::atf_gcli_proc& parent);
// Wait for subprocess to return
// func:command.atf_gcli_proc.atf_gcli.Wait
void                 atf_gcli_Wait(command::atf_gcli_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_gcli_proc.atf_gcli.Exec
int                  atf_gcli_Exec(command::atf_gcli_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_gcli_proc.atf_gcli.ExecX
void                 atf_gcli_ExecX(command::atf_gcli_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_gcli_proc.atf_gcli.Execv
int                  atf_gcli_Execv(command::atf_gcli_proc& parent) __attribute__((nothrow));
// func:command.atf_gcli_proc.atf_gcli.ToCmdline
algo::tempstr        atf_gcli_ToCmdline(command::atf_gcli_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_gcli_proc.atf_gcli.ToArgv
void                 atf_gcli_ToArgv(command::atf_gcli_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_gcli_proc..Init
inline void          atf_gcli_proc_Init(command::atf_gcli_proc& parent);
// func:command.atf_gcli_proc..Uninit
void                 atf_gcli_proc_Uninit(command::atf_gcli_proc& parent) __attribute__((nothrow));

// --- command.atf_nrun
// access: command.atf_nrun_proc.atf_nrun (Exec)
struct atf_nrun { // command.atf_nrun
    algo::cstring   in;        //   "data"  Input directory or filename, - for stdin
    i32             maxjobs;   //   2  Number of simultaneous jobs
    i32             ncmd;      //   6
    // func:command.atf_nrun..Ctor
    inline               atf_nrun() __attribute__((nothrow));
};

// func:command.atf_nrun..ReadFieldMaybe
bool                 atf_nrun_ReadFieldMaybe(command::atf_nrun& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_nrun from attributes of ascii tuple TUPLE
// func:command.atf_nrun..ReadTupleMaybe
bool                 atf_nrun_ReadTupleMaybe(command::atf_nrun &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_nrun..Init
inline void          atf_nrun_Init(command::atf_nrun& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_nrun..ToCmdline
tempstr              atf_nrun_ToCmdline(command::atf_nrun& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_nrun.Argv  printfmt:Tuple
// func:command.atf_nrun..PrintArgv
void                 atf_nrun_PrintArgv(command::atf_nrun& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_nrun..GetAnon
algo::strptr         atf_nrun_GetAnon(command::atf_nrun &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_nrun..NArgs
i32                  atf_nrun_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_nrun_proc
struct atf_nrun_proc { // command.atf_nrun_proc: Subprocess: Run N subprocesses in parallel
    algo::cstring       path;      //   "bin/atf_nrun"  path for executable
    command::atf_nrun   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.atf_nrun_proc..Ctor
    inline               atf_nrun_proc() __attribute__((nothrow));
    // func:command.atf_nrun_proc..Dtor
    inline               ~atf_nrun_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_nrun_proc.atf_nrun.Start
int                  atf_nrun_Start(command::atf_nrun_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_nrun_proc.atf_nrun.StartRead
algo::Fildes         atf_nrun_StartRead(command::atf_nrun_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_nrun_proc.atf_nrun.Kill
void                 atf_nrun_Kill(command::atf_nrun_proc& parent);
// Wait for subprocess to return
// func:command.atf_nrun_proc.atf_nrun.Wait
void                 atf_nrun_Wait(command::atf_nrun_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_nrun_proc.atf_nrun.Exec
int                  atf_nrun_Exec(command::atf_nrun_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_nrun_proc.atf_nrun.ExecX
void                 atf_nrun_ExecX(command::atf_nrun_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_nrun_proc.atf_nrun.Execv
int                  atf_nrun_Execv(command::atf_nrun_proc& parent) __attribute__((nothrow));
// func:command.atf_nrun_proc.atf_nrun.ToCmdline
algo::tempstr        atf_nrun_ToCmdline(command::atf_nrun_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_nrun_proc.atf_nrun.ToArgv
void                 atf_nrun_ToArgv(command::atf_nrun_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_nrun_proc..Init
inline void          atf_nrun_proc_Init(command::atf_nrun_proc& parent);
// func:command.atf_nrun_proc..Uninit
void                 atf_nrun_proc_Uninit(command::atf_nrun_proc& parent) __attribute__((nothrow));

// --- command.atf_unit
// access: command.atf_unit_proc.atf_unit (Exec)
struct atf_unit { // command.atf_unit
    algo_lib::Regx   unittest;          //   "%"  Sql Regx of atfdb::Unittest
    bool             nofork;            //   false  Do not fork for destructive tests
    algo::cstring    arg;               //   ""  Argument to pass to tool
    algo::cstring    data_dir;          //   "data"  Data directory
    bool             mdbg;              //   0  Break at testcase in debugger
    double           perf_secs;         //   1.0  # Of seconds to run perf tests for
    u32              pertest_timeout;   //   900  Max runtime of any individual unit test
    bool             report;            //   true  Print final report
    bool             capture;           //   false  Re-capture test results
    bool             check_untracked;   //   true  Check for untracked file before allowing test to run
    // func:command.atf_unit..Ctor
    inline               atf_unit() __attribute__((nothrow));
};

// Print back to string
// func:command.atf_unit.unittest.Print
void                 unittest_Print(command::atf_unit& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.atf_unit.unittest.ReadStrptrMaybe
bool                 unittest_ReadStrptrMaybe(command::atf_unit& parent, algo::strptr in) __attribute__((nothrow));

// func:command.atf_unit..ReadFieldMaybe
bool                 atf_unit_ReadFieldMaybe(command::atf_unit& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::atf_unit from attributes of ascii tuple TUPLE
// func:command.atf_unit..ReadTupleMaybe
bool                 atf_unit_ReadTupleMaybe(command::atf_unit &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.atf_unit..Init
void                 atf_unit_Init(command::atf_unit& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.atf_unit..ToCmdline
tempstr              atf_unit_ToCmdline(command::atf_unit& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.atf_unit.Argv  printfmt:Auto
// func:command.atf_unit..PrintArgv
void                 atf_unit_PrintArgv(command::atf_unit& row, algo::cstring& str) __attribute__((nothrow));
// func:command.atf_unit..GetAnon
algo::strptr         atf_unit_GetAnon(command::atf_unit &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.atf_unit..NArgs
i32                  atf_unit_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.atf_unit_proc
struct atf_unit_proc { // command.atf_unit_proc: Subprocess: Unit tests (see unittest table)
    algo::cstring       path;      //   "bin/atf_unit"  path for executable
    command::atf_unit   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.atf_unit_proc..Ctor
    inline               atf_unit_proc() __attribute__((nothrow));
    // func:command.atf_unit_proc..Dtor
    inline               ~atf_unit_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.atf_unit_proc.atf_unit.Start
int                  atf_unit_Start(command::atf_unit_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.atf_unit_proc.atf_unit.StartRead
algo::Fildes         atf_unit_StartRead(command::atf_unit_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.atf_unit_proc.atf_unit.Kill
void                 atf_unit_Kill(command::atf_unit_proc& parent);
// Wait for subprocess to return
// func:command.atf_unit_proc.atf_unit.Wait
void                 atf_unit_Wait(command::atf_unit_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.atf_unit_proc.atf_unit.Exec
int                  atf_unit_Exec(command::atf_unit_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.atf_unit_proc.atf_unit.ExecX
void                 atf_unit_ExecX(command::atf_unit_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.atf_unit_proc.atf_unit.Execv
int                  atf_unit_Execv(command::atf_unit_proc& parent) __attribute__((nothrow));
// func:command.atf_unit_proc.atf_unit.ToCmdline
algo::tempstr        atf_unit_ToCmdline(command::atf_unit_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.atf_unit_proc.atf_unit.ToArgv
void                 atf_unit_ToArgv(command::atf_unit_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.atf_unit_proc..Init
inline void          atf_unit_proc_Init(command::atf_unit_proc& parent);
// func:command.atf_unit_proc..Uninit
void                 atf_unit_proc_Uninit(command::atf_unit_proc& parent) __attribute__((nothrow));

// --- command.bash
// access: command.bash_proc.bash (Exec)
struct bash { // command.bash
    algo::cstring   c;   //   ""  Shell command to execute
    // func:command.bash..Ctor
    inline               bash() __attribute__((nothrow));
};

// Set all fields to initial values.
// func:command.bash..Init
inline void          bash_Init(command::bash& parent);
// print string representation of ROW to string STR
// cfmt:command.bash.ArgvGnu  printfmt:Auto
// func:command.bash..PrintArgv
void                 bash_PrintArgv(command::bash& row, algo::cstring& str) __attribute__((nothrow));

// --- command.bash2html
// access: command.bash2html_proc.bash2html (Exec)
struct bash2html { // command.bash2html
    algo::cstring   in;     //   "data"  Input directory or filename, - for stdin
    bool            test;   //   false  Produce Test Output
    // func:command.bash2html..Ctor
    inline               bash2html() __attribute__((nothrow));
};

// func:command.bash2html..ReadFieldMaybe
bool                 bash2html_ReadFieldMaybe(command::bash2html& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::bash2html from attributes of ascii tuple TUPLE
// func:command.bash2html..ReadTupleMaybe
bool                 bash2html_ReadTupleMaybe(command::bash2html &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.bash2html..Init
inline void          bash2html_Init(command::bash2html& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.bash2html..ToCmdline
tempstr              bash2html_ToCmdline(command::bash2html& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.bash2html.Argv  printfmt:Tuple
// func:command.bash2html..PrintArgv
void                 bash2html_PrintArgv(command::bash2html& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.bash2html..NArgs
i32                  bash2html_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.bash2html_proc
struct bash2html_proc { // command.bash2html_proc: Subprocess: Convert bash output and colours to html
    algo::cstring        path;      //   "bin/bash2html"  path for executable
    command::bash2html   cmd;       // command line for child process
    algo::cstring        fstdin;    // redirect for stdin
    algo::cstring        fstdout;   // redirect for stdout
    algo::cstring        fstderr;   // redirect for stderr
    pid_t                pid;       //   0  pid of running child process
    i32                  timeout;   //   0  optional timeout for child process
    i32                  status;    //   0  last exit status of child process
    // func:command.bash2html_proc..Ctor
    inline               bash2html_proc() __attribute__((nothrow));
    // func:command.bash2html_proc..Dtor
    inline               ~bash2html_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.bash2html_proc.bash2html.Start
int                  bash2html_Start(command::bash2html_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.bash2html_proc.bash2html.StartRead
algo::Fildes         bash2html_StartRead(command::bash2html_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.bash2html_proc.bash2html.Kill
void                 bash2html_Kill(command::bash2html_proc& parent);
// Wait for subprocess to return
// func:command.bash2html_proc.bash2html.Wait
void                 bash2html_Wait(command::bash2html_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.bash2html_proc.bash2html.Exec
int                  bash2html_Exec(command::bash2html_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.bash2html_proc.bash2html.ExecX
void                 bash2html_ExecX(command::bash2html_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.bash2html_proc.bash2html.Execv
int                  bash2html_Execv(command::bash2html_proc& parent) __attribute__((nothrow));
// func:command.bash2html_proc.bash2html.ToCmdline
algo::tempstr        bash2html_ToCmdline(command::bash2html_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.bash2html_proc.bash2html.ToArgv
void                 bash2html_ToArgv(command::bash2html_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.bash2html_proc..Init
inline void          bash2html_proc_Init(command::bash2html_proc& parent);
// func:command.bash2html_proc..Uninit
void                 bash2html_proc_Uninit(command::bash2html_proc& parent) __attribute__((nothrow));

// --- command.bash_proc
struct bash_proc { // command.bash_proc
    algo::cstring   path;      //   "bash"  path for executable
    command::bash   cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.bash_proc..Ctor
    inline               bash_proc() __attribute__((nothrow));
    // func:command.bash_proc..Dtor
    inline               ~bash_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.bash_proc.bash.Start
int                  bash_Start(command::bash_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.bash_proc.bash.StartRead
algo::Fildes         bash_StartRead(command::bash_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.bash_proc.bash.Kill
void                 bash_Kill(command::bash_proc& parent);
// Wait for subprocess to return
// func:command.bash_proc.bash.Wait
void                 bash_Wait(command::bash_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.bash_proc.bash.Exec
int                  bash_Exec(command::bash_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.bash_proc.bash.ExecX
void                 bash_ExecX(command::bash_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.bash_proc.bash.Execv
int                  bash_Execv(command::bash_proc& parent) __attribute__((nothrow));
// func:command.bash_proc.bash.ToCmdline
algo::tempstr        bash_ToCmdline(command::bash_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.bash_proc.bash.ToArgv
void                 bash_ToArgv(command::bash_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.bash_proc..Init
inline void          bash_proc_Init(command::bash_proc& parent);
// func:command.bash_proc..Uninit
void                 bash_proc_Uninit(command::bash_proc& parent) __attribute__((nothrow));

// --- command.gcache
// access: command.gcache_proc.gcache (Exec)
struct gcache { // command.gcache
    algo::cstring    in;          //   "data"  Input directory or filename, - for stdin
    algo::cstring*   cmd_elems;   // pointer to elements
    u32              cmd_n;       // number of elements in array
    u32              cmd_max;     // max. capacity of array before realloc
    bool             install;     //   false  Create gcache directory and enable gcache
    bool             stats;       //   false  Show cache stats
    bool             enable;      //   false  Create .gcache link to enable gcache use
    bool             disable;     //   false  Remove .gcache link to disable gcache
    bool             gc;          //   false  Clean old files from .gcache
    bool             clean;       //   false  Clean the entire cache
    algo::cstring    dir;         //   "/tmp/gcache"  (With -install,-enable) cache directory
    bool             hitrate;     //   false  Report hit rate (specify start time with -after)
    algo::UnTime     after;       // Start time for reporting
    bool             report;      //   false  Show end-of-run report
    bool             force;       //   false  Force recompile and update cache
    // func:command.gcache..AssignOp
    command::gcache&     operator =(const command::gcache &rhs) __attribute__((nothrow));
    // func:command.gcache..Ctor
    inline               gcache() __attribute__((nothrow));
    // func:command.gcache..Dtor
    inline               ~gcache() __attribute__((nothrow));
    // func:command.gcache..CopyCtor
    gcache(const command::gcache &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.gcache.cmd.Addary
algo::aryptr<algo::cstring> cmd_Addary(command::gcache& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.gcache.cmd.Alloc
algo::cstring&       cmd_Alloc(command::gcache& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.gcache.cmd.AllocAt
algo::cstring&       cmd_AllocAt(command::gcache& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.gcache.cmd.AllocN
algo::aryptr<algo::cstring> cmd_AllocN(command::gcache& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.gcache.cmd.EmptyQ
inline bool          cmd_EmptyQ(command::gcache& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.gcache.cmd.Find
inline algo::cstring* cmd_Find(command::gcache& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.gcache.cmd.Getary
inline algo::aryptr<algo::cstring> cmd_Getary(const command::gcache& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.gcache.cmd.Last
inline algo::cstring* cmd_Last(command::gcache& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.gcache.cmd.Max
inline i32           cmd_Max(command::gcache& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.gcache.cmd.N
inline i32           cmd_N(const command::gcache& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.gcache.cmd.Remove
void                 cmd_Remove(command::gcache& parent, u32 i) __attribute__((nothrow));
// func:command.gcache.cmd.RemoveAll
void                 cmd_RemoveAll(command::gcache& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.gcache.cmd.RemoveLast
void                 cmd_RemoveLast(command::gcache& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.gcache.cmd.Reserve
inline void          cmd_Reserve(command::gcache& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.gcache.cmd.AbsReserve
void                 cmd_AbsReserve(command::gcache& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.gcache.cmd.Setary
void                 cmd_Setary(command::gcache& parent, command::gcache &rhs) __attribute__((nothrow));
// Copy specified array into cmd, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.gcache.cmd.Setary2
void                 cmd_Setary(command::gcache& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.gcache.cmd.qFind
inline algo::cstring& cmd_qFind(command::gcache& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.gcache.cmd.qLast
inline algo::cstring& cmd_qLast(command::gcache& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.gcache.cmd.rowid_Get
inline u64           cmd_rowid_Get(command::gcache& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.gcache.cmd.AllocNVal
algo::aryptr<algo::cstring> cmd_AllocNVal(command::gcache& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.gcache.cmd.ReadStrptrMaybe
bool                 cmd_ReadStrptrMaybe(command::gcache& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.gcache.cmd_curs.Next
inline void          gcache_cmd_curs_Next(gcache_cmd_curs &curs) __attribute__((nothrow));
// func:command.gcache.cmd_curs.Reset
inline void          gcache_cmd_curs_Reset(gcache_cmd_curs &curs, command::gcache &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.gcache.cmd_curs.ValidQ
inline bool          gcache_cmd_curs_ValidQ(gcache_cmd_curs &curs) __attribute__((nothrow));
// item access
// func:command.gcache.cmd_curs.Access
inline algo::cstring& gcache_cmd_curs_Access(gcache_cmd_curs &curs) __attribute__((nothrow));
// func:command.gcache..ReadFieldMaybe
bool                 gcache_ReadFieldMaybe(command::gcache& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::gcache from attributes of ascii tuple TUPLE
// func:command.gcache..ReadTupleMaybe
bool                 gcache_ReadTupleMaybe(command::gcache &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.gcache..Init
void                 gcache_Init(command::gcache& parent);
// func:command.gcache..Uninit
void                 gcache_Uninit(command::gcache& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.gcache..ToCmdline
tempstr              gcache_ToCmdline(command::gcache& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.gcache.Argv  printfmt:Tuple
// func:command.gcache..PrintArgv
void                 gcache_PrintArgv(command::gcache& row, algo::cstring& str) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.gcache.String  printfmt:Tuple
// func:command.gcache..Print
void                 gcache_Print(command::gcache& row, algo::cstring& str) __attribute__((nothrow));
// func:command.gcache..GetAnon
algo::strptr         gcache_GetAnon(command::gcache &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.gcache..NArgs
i32                  gcache_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.gcache_proc
struct gcache_proc { // command.gcache_proc: Subprocess: Compiler cache
    algo::cstring     path;      //   "bin/gcache"  path for executable
    command::gcache   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.gcache_proc..Ctor
    inline               gcache_proc() __attribute__((nothrow));
    // func:command.gcache_proc..Dtor
    inline               ~gcache_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.gcache_proc.gcache.Start
int                  gcache_Start(command::gcache_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.gcache_proc.gcache.StartRead
algo::Fildes         gcache_StartRead(command::gcache_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.gcache_proc.gcache.Kill
void                 gcache_Kill(command::gcache_proc& parent);
// Wait for subprocess to return
// func:command.gcache_proc.gcache.Wait
void                 gcache_Wait(command::gcache_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.gcache_proc.gcache.Exec
int                  gcache_Exec(command::gcache_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.gcache_proc.gcache.ExecX
void                 gcache_ExecX(command::gcache_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.gcache_proc.gcache.Execv
int                  gcache_Execv(command::gcache_proc& parent) __attribute__((nothrow));
// func:command.gcache_proc.gcache.ToCmdline
algo::tempstr        gcache_ToCmdline(command::gcache_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.gcache_proc.gcache.ToArgv
void                 gcache_ToArgv(command::gcache_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.gcache_proc..Init
inline void          gcache_proc_Init(command::gcache_proc& parent);
// func:command.gcache_proc..Uninit
void                 gcache_proc_Uninit(command::gcache_proc& parent) __attribute__((nothrow));

// --- command.gcli
// access: command.gcli_proc.gcli (Exec)
struct gcli { // command.gcli
    algo::cstring       in;                         //   "data"  Input directory or filename, - for stdin
    algo::Smallstr250   selector;                   //   "issue:%"  table:key, where table is issue,repo,mr, etc. and key is a regex.
    algo::cstring*      fields_elems;               // pointer to elements
    u32                 fields_n;                   // number of elements in array
    u32                 fields_max;                 // max. capacity of array before realloc
    bool                accept;                     //   false  (action) accept a slected merge request
    bool                start;                      //   false  (action) start working on a selected issue
    bool                list;                       //   false  (action) show selected table
    bool                create;                     //   false  (action) create a table record(s)
    bool                update;                     //   false  (action) update fields of a selected issue or mergereq
    bool                approve;                    //   false  (action) remove draft desiognation from mergereq
    bool                needs_work;                 //   false  (action) reopen an issue or put a draft designation on mergereq
    bool                stop;                       //   false  (action) closes an issue, or remove mr branch after review
    bool                t;                          //   false  Tree view: expand issue description
    bool                e;                          //   false  edit the input
    algo::cstring       authdir;                    //   ".ssim"  (setup) Input directory for auth data
    bool                dry_run;                    //   false  Print actions, do not perform
    algo::cstring       gitdir;                     //   ""  (setup) Change directory of git repository
    bool                show_gitlab_system_notes;   //   false  (misc) Show issue and mr notes created by gitlab
    // func:command.gcli..AssignOp
    command::gcli&       operator =(const command::gcli &rhs) __attribute__((nothrow));
    // func:command.gcli..Ctor
    inline               gcli() __attribute__((nothrow));
    // func:command.gcli..Dtor
    inline               ~gcli() __attribute__((nothrow));
    // func:command.gcli..CopyCtor
    gcli(const command::gcli &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.gcli.fields.Addary
algo::aryptr<algo::cstring> fields_Addary(command::gcli& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.gcli.fields.Alloc
algo::cstring&       fields_Alloc(command::gcli& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.gcli.fields.AllocAt
algo::cstring&       fields_AllocAt(command::gcli& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.gcli.fields.AllocN
algo::aryptr<algo::cstring> fields_AllocN(command::gcli& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.gcli.fields.EmptyQ
inline bool          fields_EmptyQ(command::gcli& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.gcli.fields.Find
inline algo::cstring* fields_Find(command::gcli& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.gcli.fields.Getary
inline algo::aryptr<algo::cstring> fields_Getary(const command::gcli& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.gcli.fields.Last
inline algo::cstring* fields_Last(command::gcli& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.gcli.fields.Max
inline i32           fields_Max(command::gcli& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.gcli.fields.N
inline i32           fields_N(const command::gcli& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.gcli.fields.Remove
void                 fields_Remove(command::gcli& parent, u32 i) __attribute__((nothrow));
// func:command.gcli.fields.RemoveAll
void                 fields_RemoveAll(command::gcli& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.gcli.fields.RemoveLast
void                 fields_RemoveLast(command::gcli& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.gcli.fields.Reserve
inline void          fields_Reserve(command::gcli& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.gcli.fields.AbsReserve
void                 fields_AbsReserve(command::gcli& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.gcli.fields.Setary
void                 fields_Setary(command::gcli& parent, command::gcli &rhs) __attribute__((nothrow));
// Copy specified array into fields, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.gcli.fields.Setary2
void                 fields_Setary(command::gcli& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.gcli.fields.qFind
inline algo::cstring& fields_qFind(command::gcli& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.gcli.fields.qLast
inline algo::cstring& fields_qLast(command::gcli& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.gcli.fields.rowid_Get
inline u64           fields_rowid_Get(command::gcli& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.gcli.fields.AllocNVal
algo::aryptr<algo::cstring> fields_AllocNVal(command::gcli& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.gcli.fields.ReadStrptrMaybe
bool                 fields_ReadStrptrMaybe(command::gcli& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.gcli.fields_curs.Next
inline void          gcli_fields_curs_Next(gcli_fields_curs &curs) __attribute__((nothrow));
// func:command.gcli.fields_curs.Reset
inline void          gcli_fields_curs_Reset(gcli_fields_curs &curs, command::gcli &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.gcli.fields_curs.ValidQ
inline bool          gcli_fields_curs_ValidQ(gcli_fields_curs &curs) __attribute__((nothrow));
// item access
// func:command.gcli.fields_curs.Access
inline algo::cstring& gcli_fields_curs_Access(gcli_fields_curs &curs) __attribute__((nothrow));
// func:command.gcli..ReadFieldMaybe
bool                 gcli_ReadFieldMaybe(command::gcli& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::gcli from attributes of ascii tuple TUPLE
// func:command.gcli..ReadTupleMaybe
bool                 gcli_ReadTupleMaybe(command::gcli &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.gcli..Init
void                 gcli_Init(command::gcli& parent);
// func:command.gcli..Uninit
void                 gcli_Uninit(command::gcli& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.gcli..ToCmdline
tempstr              gcli_ToCmdline(command::gcli& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.gcli.Argv  printfmt:Tuple
// func:command.gcli..PrintArgv
void                 gcli_PrintArgv(command::gcli& row, algo::cstring& str) __attribute__((nothrow));
// func:command.gcli..GetAnon
algo::strptr         gcli_GetAnon(command::gcli &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.gcli..NArgs
i32                  gcli_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.gcli_proc
struct gcli_proc { // command.gcli_proc: Subprocess: Gcli - gitlab/github command-line client
    algo::cstring   path;      //   "bin/gcli"  path for executable
    command::gcli   cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.gcli_proc..Ctor
    inline               gcli_proc() __attribute__((nothrow));
    // func:command.gcli_proc..Dtor
    inline               ~gcli_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.gcli_proc.gcli.Start
int                  gcli_Start(command::gcli_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.gcli_proc.gcli.StartRead
algo::Fildes         gcli_StartRead(command::gcli_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.gcli_proc.gcli.Kill
void                 gcli_Kill(command::gcli_proc& parent);
// Wait for subprocess to return
// func:command.gcli_proc.gcli.Wait
void                 gcli_Wait(command::gcli_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.gcli_proc.gcli.Exec
int                  gcli_Exec(command::gcli_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.gcli_proc.gcli.ExecX
void                 gcli_ExecX(command::gcli_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.gcli_proc.gcli.Execv
int                  gcli_Execv(command::gcli_proc& parent) __attribute__((nothrow));
// func:command.gcli_proc.gcli.ToCmdline
algo::tempstr        gcli_ToCmdline(command::gcli_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.gcli_proc.gcli.ToArgv
void                 gcli_ToArgv(command::gcli_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.gcli_proc..Init
inline void          gcli_proc_Init(command::gcli_proc& parent);
// func:command.gcli_proc..Uninit
void                 gcli_proc_Uninit(command::gcli_proc& parent) __attribute__((nothrow));

// --- command.mdbg
// access: command.mdbg_proc.mdbg (Exec)
struct mdbg { // command.mdbg
    algo::Smallstr16   target;         // Executable name
    algo::cstring      in;             //   "data"  Input directory or filename, - for stdin
    algo::cstring*     args_elems;     // pointer to elements
    u32                args_n;         // number of elements in array
    u32                args_max;       // max. capacity of array before realloc
    algo::Smallstr50   cfg;            //   "debug"  Configuration to use
    bool               disas;          //   false  Show disassembly (use F12)
    bool               attach;         //   false  Attach to a running process
    algo::cstring*     b_elems;        // pointer to elements
    u32                b_n;            // number of elements in array
    u32                b_max;          // max. capacity of array before realloc
    bool               catchthrow;     //   true  Stop on exceptions
    bool               tui;            //   false  Use gdb -tui as the debugger
    algo::cstring      bcmd;           //   ""  Evaluate command at breakpoint
    bool               emacs;          //   true  Use emacs environment as the debugger
    bool               manywin;        //   false  Use gdb-many-windows emacs mode
    bool               follow_child;   //   false
    bool               py;             //   false  Enable python scripting
    bool               dry_run;        //   false  Print commands but don't execute
    // func:command.mdbg..AssignOp
    command::mdbg&       operator =(const command::mdbg &rhs) __attribute__((nothrow));
    // func:command.mdbg..Ctor
    inline               mdbg() __attribute__((nothrow));
    // func:command.mdbg..Dtor
    inline               ~mdbg() __attribute__((nothrow));
    // func:command.mdbg..CopyCtor
    mdbg(const command::mdbg &rhs) __attribute__((nothrow));
};

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.mdbg.args.Addary
algo::aryptr<algo::cstring> args_Addary(command::mdbg& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.mdbg.args.Alloc
algo::cstring&       args_Alloc(command::mdbg& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.mdbg.args.AllocAt
algo::cstring&       args_AllocAt(command::mdbg& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.mdbg.args.AllocN
algo::aryptr<algo::cstring> args_AllocN(command::mdbg& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.mdbg.args.EmptyQ
inline bool          args_EmptyQ(command::mdbg& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.mdbg.args.Find
inline algo::cstring* args_Find(command::mdbg& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.mdbg.args.Getary
inline algo::aryptr<algo::cstring> args_Getary(const command::mdbg& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.mdbg.args.Last
inline algo::cstring* args_Last(command::mdbg& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.mdbg.args.Max
inline i32           args_Max(command::mdbg& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.mdbg.args.N
inline i32           args_N(const command::mdbg& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.mdbg.args.Remove
void                 args_Remove(command::mdbg& parent, u32 i) __attribute__((nothrow));
// func:command.mdbg.args.RemoveAll
void                 args_RemoveAll(command::mdbg& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.mdbg.args.RemoveLast
void                 args_RemoveLast(command::mdbg& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.mdbg.args.Reserve
inline void          args_Reserve(command::mdbg& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.mdbg.args.AbsReserve
void                 args_AbsReserve(command::mdbg& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.mdbg.args.Setary
void                 args_Setary(command::mdbg& parent, command::mdbg &rhs) __attribute__((nothrow));
// Copy specified array into args, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.mdbg.args.Setary2
void                 args_Setary(command::mdbg& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.mdbg.args.qFind
inline algo::cstring& args_qFind(command::mdbg& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.mdbg.args.qLast
inline algo::cstring& args_qLast(command::mdbg& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.mdbg.args.rowid_Get
inline u64           args_rowid_Get(command::mdbg& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.mdbg.args.AllocNVal
algo::aryptr<algo::cstring> args_AllocNVal(command::mdbg& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.mdbg.args.ReadStrptrMaybe
bool                 args_ReadStrptrMaybe(command::mdbg& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.mdbg.b.Addary
algo::aryptr<algo::cstring> b_Addary(command::mdbg& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.mdbg.b.Alloc
algo::cstring&       b_Alloc(command::mdbg& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.mdbg.b.AllocAt
algo::cstring&       b_AllocAt(command::mdbg& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.mdbg.b.AllocN
algo::aryptr<algo::cstring> b_AllocN(command::mdbg& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.mdbg.b.EmptyQ
inline bool          b_EmptyQ(command::mdbg& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.mdbg.b.Find
inline algo::cstring* b_Find(command::mdbg& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.mdbg.b.Getary
inline algo::aryptr<algo::cstring> b_Getary(const command::mdbg& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.mdbg.b.Last
inline algo::cstring* b_Last(command::mdbg& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.mdbg.b.Max
inline i32           b_Max(command::mdbg& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.mdbg.b.N
inline i32           b_N(const command::mdbg& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.mdbg.b.Remove
void                 b_Remove(command::mdbg& parent, u32 i) __attribute__((nothrow));
// func:command.mdbg.b.RemoveAll
void                 b_RemoveAll(command::mdbg& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.mdbg.b.RemoveLast
void                 b_RemoveLast(command::mdbg& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.mdbg.b.Reserve
inline void          b_Reserve(command::mdbg& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.mdbg.b.AbsReserve
void                 b_AbsReserve(command::mdbg& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.mdbg.b.Setary
void                 b_Setary(command::mdbg& parent, command::mdbg &rhs) __attribute__((nothrow));
// Copy specified array into b, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.mdbg.b.Setary2
void                 b_Setary(command::mdbg& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.mdbg.b.qFind
inline algo::cstring& b_qFind(command::mdbg& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.mdbg.b.qLast
inline algo::cstring& b_qLast(command::mdbg& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.mdbg.b.rowid_Get
inline u64           b_rowid_Get(command::mdbg& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.mdbg.b.AllocNVal
algo::aryptr<algo::cstring> b_AllocNVal(command::mdbg& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.mdbg.b.ReadStrptrMaybe
bool                 b_ReadStrptrMaybe(command::mdbg& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.mdbg.args_curs.Next
inline void          mdbg_args_curs_Next(mdbg_args_curs &curs) __attribute__((nothrow));
// func:command.mdbg.args_curs.Reset
inline void          mdbg_args_curs_Reset(mdbg_args_curs &curs, command::mdbg &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.mdbg.args_curs.ValidQ
inline bool          mdbg_args_curs_ValidQ(mdbg_args_curs &curs) __attribute__((nothrow));
// item access
// func:command.mdbg.args_curs.Access
inline algo::cstring& mdbg_args_curs_Access(mdbg_args_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.mdbg.b_curs.Next
inline void          mdbg_b_curs_Next(mdbg_b_curs &curs) __attribute__((nothrow));
// func:command.mdbg.b_curs.Reset
inline void          mdbg_b_curs_Reset(mdbg_b_curs &curs, command::mdbg &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.mdbg.b_curs.ValidQ
inline bool          mdbg_b_curs_ValidQ(mdbg_b_curs &curs) __attribute__((nothrow));
// item access
// func:command.mdbg.b_curs.Access
inline algo::cstring& mdbg_b_curs_Access(mdbg_b_curs &curs) __attribute__((nothrow));
// func:command.mdbg..ReadFieldMaybe
bool                 mdbg_ReadFieldMaybe(command::mdbg& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::mdbg from attributes of ascii tuple TUPLE
// func:command.mdbg..ReadTupleMaybe
bool                 mdbg_ReadTupleMaybe(command::mdbg &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.mdbg..Init
void                 mdbg_Init(command::mdbg& parent);
// func:command.mdbg..Uninit
void                 mdbg_Uninit(command::mdbg& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.mdbg..ToCmdline
tempstr              mdbg_ToCmdline(command::mdbg& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.mdbg.Argv  printfmt:Auto
// func:command.mdbg..PrintArgv
void                 mdbg_PrintArgv(command::mdbg& row, algo::cstring& str) __attribute__((nothrow));
// func:command.mdbg..GetAnon
algo::strptr         mdbg_GetAnon(command::mdbg &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.mdbg..NArgs
i32                  mdbg_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.mdbg_proc
struct mdbg_proc { // command.mdbg_proc: Subprocess: Gdb front-end
    algo::cstring   path;      //   "bin/mdbg"  path for executable
    command::mdbg   cmd;       // command line for child process
    algo::cstring   fstdin;    // redirect for stdin
    algo::cstring   fstdout;   // redirect for stdout
    algo::cstring   fstderr;   // redirect for stderr
    pid_t           pid;       //   0  pid of running child process
    i32             timeout;   //   0  optional timeout for child process
    i32             status;    //   0  last exit status of child process
    // func:command.mdbg_proc..Ctor
    inline               mdbg_proc() __attribute__((nothrow));
    // func:command.mdbg_proc..Dtor
    inline               ~mdbg_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.mdbg_proc.mdbg.Start
int                  mdbg_Start(command::mdbg_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.mdbg_proc.mdbg.StartRead
algo::Fildes         mdbg_StartRead(command::mdbg_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.mdbg_proc.mdbg.Kill
void                 mdbg_Kill(command::mdbg_proc& parent);
// Wait for subprocess to return
// func:command.mdbg_proc.mdbg.Wait
void                 mdbg_Wait(command::mdbg_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.mdbg_proc.mdbg.Exec
int                  mdbg_Exec(command::mdbg_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.mdbg_proc.mdbg.ExecX
void                 mdbg_ExecX(command::mdbg_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.mdbg_proc.mdbg.Execv
int                  mdbg_Execv(command::mdbg_proc& parent) __attribute__((nothrow));
// func:command.mdbg_proc.mdbg.ToCmdline
algo::tempstr        mdbg_ToCmdline(command::mdbg_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.mdbg_proc.mdbg.ToArgv
void                 mdbg_ToArgv(command::mdbg_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.mdbg_proc..Init
inline void          mdbg_proc_Init(command::mdbg_proc& parent);
// func:command.mdbg_proc..Uninit
void                 mdbg_proc_Uninit(command::mdbg_proc& parent) __attribute__((nothrow));

// --- command.mysql2ssim
// access: command.mysql2ssim_proc.mysql2ssim (Exec)
struct mysql2ssim { // command.mysql2ssim
    bool            writessimfile;   //   false  Write to ssimfile directly
    algo::cstring   url;             // user:pass@host/db or sock:///filename/db
    algo::cstring   tables;          //   ""  comma-separated list of tables. Default is all tables
    bool            schema;          //   false  Generate ssim type definition
    algo::cstring   in;              //   "data"  Input directory or filename, - for stdin
    bool            pretty;          //   false  Format output for the screen
    bool            nologo;          //   false  Don't show copyright notice
    bool            baddbok;         //   false  Don't claim if bad database
    // func:command.mysql2ssim..Ctor
    inline               mysql2ssim() __attribute__((nothrow));
};

// func:command.mysql2ssim..ReadFieldMaybe
bool                 mysql2ssim_ReadFieldMaybe(command::mysql2ssim& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::mysql2ssim from attributes of ascii tuple TUPLE
// func:command.mysql2ssim..ReadTupleMaybe
bool                 mysql2ssim_ReadTupleMaybe(command::mysql2ssim &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.mysql2ssim..Init
inline void          mysql2ssim_Init(command::mysql2ssim& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.mysql2ssim..ToCmdline
tempstr              mysql2ssim_ToCmdline(command::mysql2ssim& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.mysql2ssim.Argv  printfmt:Auto
// func:command.mysql2ssim..PrintArgv
void                 mysql2ssim_PrintArgv(command::mysql2ssim& row, algo::cstring& str) __attribute__((nothrow));
// func:command.mysql2ssim..GetAnon
algo::strptr         mysql2ssim_GetAnon(command::mysql2ssim &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.mysql2ssim..NArgs
i32                  mysql2ssim_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.mysql2ssim_proc
struct mysql2ssim_proc { // command.mysql2ssim_proc: Subprocess: mysql -> ssim conversion tool
    algo::cstring         path;      //   "bin/mysql2ssim"  path for executable
    command::mysql2ssim   cmd;       // command line for child process
    algo::cstring         fstdin;    // redirect for stdin
    algo::cstring         fstdout;   // redirect for stdout
    algo::cstring         fstderr;   // redirect for stderr
    pid_t                 pid;       //   0  pid of running child process
    i32                   timeout;   //   0  optional timeout for child process
    i32                   status;    //   0  last exit status of child process
    // func:command.mysql2ssim_proc..Ctor
    inline               mysql2ssim_proc() __attribute__((nothrow));
    // func:command.mysql2ssim_proc..Dtor
    inline               ~mysql2ssim_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.mysql2ssim_proc.mysql2ssim.Start
int                  mysql2ssim_Start(command::mysql2ssim_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.mysql2ssim_proc.mysql2ssim.StartRead
algo::Fildes         mysql2ssim_StartRead(command::mysql2ssim_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.mysql2ssim_proc.mysql2ssim.Kill
void                 mysql2ssim_Kill(command::mysql2ssim_proc& parent);
// Wait for subprocess to return
// func:command.mysql2ssim_proc.mysql2ssim.Wait
void                 mysql2ssim_Wait(command::mysql2ssim_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.mysql2ssim_proc.mysql2ssim.Exec
int                  mysql2ssim_Exec(command::mysql2ssim_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.mysql2ssim_proc.mysql2ssim.ExecX
void                 mysql2ssim_ExecX(command::mysql2ssim_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.mysql2ssim_proc.mysql2ssim.Execv
int                  mysql2ssim_Execv(command::mysql2ssim_proc& parent) __attribute__((nothrow));
// func:command.mysql2ssim_proc.mysql2ssim.ToCmdline
algo::tempstr        mysql2ssim_ToCmdline(command::mysql2ssim_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.mysql2ssim_proc.mysql2ssim.ToArgv
void                 mysql2ssim_ToArgv(command::mysql2ssim_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.mysql2ssim_proc..Init
inline void          mysql2ssim_proc_Init(command::mysql2ssim_proc& parent);
// func:command.mysql2ssim_proc..Uninit
void                 mysql2ssim_proc_Uninit(command::mysql2ssim_proc& parent) __attribute__((nothrow));

// --- command.orgfile
// access: command.orgfile_proc.orgfile (Exec)
struct orgfile { // command.orgfile
    algo::cstring    in;       //   "data"  Input directory or filename, - for stdin
    algo::cstring    move;     //   ""  Read stdin, rename files based on pattern
    algo_lib::Regx   dedup;    //   ""  Sql Regx
    bool             commit;   //   false  Apply changes
    bool             undo;     //   false  Read previous orgfile output, undoing movement
    algo::cstring    hash;     //   "sha1"  Hash command to use for deduplication
    // func:command.orgfile..Ctor
    inline               orgfile() __attribute__((nothrow));
};

// Print back to string
// func:command.orgfile.dedup.Print
void                 dedup_Print(command::orgfile& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.orgfile.dedup.ReadStrptrMaybe
bool                 dedup_ReadStrptrMaybe(command::orgfile& parent, algo::strptr in) __attribute__((nothrow));

// func:command.orgfile..ReadFieldMaybe
bool                 orgfile_ReadFieldMaybe(command::orgfile& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::orgfile from attributes of ascii tuple TUPLE
// func:command.orgfile..ReadTupleMaybe
bool                 orgfile_ReadTupleMaybe(command::orgfile &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.orgfile..Init
void                 orgfile_Init(command::orgfile& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.orgfile..ToCmdline
tempstr              orgfile_ToCmdline(command::orgfile& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.orgfile.Argv  printfmt:Tuple
// func:command.orgfile..PrintArgv
void                 orgfile_PrintArgv(command::orgfile& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.orgfile..NArgs
i32                  orgfile_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.orgfile_proc
struct orgfile_proc { // command.orgfile_proc: Subprocess: Organize and deduplicate files by timestamp and by contents
    algo::cstring      path;      //   "bin/orgfile"  path for executable
    command::orgfile   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.orgfile_proc..Ctor
    inline               orgfile_proc() __attribute__((nothrow));
    // func:command.orgfile_proc..Dtor
    inline               ~orgfile_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.orgfile_proc.orgfile.Start
int                  orgfile_Start(command::orgfile_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.orgfile_proc.orgfile.StartRead
algo::Fildes         orgfile_StartRead(command::orgfile_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.orgfile_proc.orgfile.Kill
void                 orgfile_Kill(command::orgfile_proc& parent);
// Wait for subprocess to return
// func:command.orgfile_proc.orgfile.Wait
void                 orgfile_Wait(command::orgfile_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.orgfile_proc.orgfile.Exec
int                  orgfile_Exec(command::orgfile_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.orgfile_proc.orgfile.ExecX
void                 orgfile_ExecX(command::orgfile_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.orgfile_proc.orgfile.Execv
int                  orgfile_Execv(command::orgfile_proc& parent) __attribute__((nothrow));
// func:command.orgfile_proc.orgfile.ToCmdline
algo::tempstr        orgfile_ToCmdline(command::orgfile_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.orgfile_proc.orgfile.ToArgv
void                 orgfile_ToArgv(command::orgfile_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.orgfile_proc..Init
inline void          orgfile_proc_Init(command::orgfile_proc& parent);
// func:command.orgfile_proc..Uninit
void                 orgfile_proc_Uninit(command::orgfile_proc& parent) __attribute__((nothrow));

// --- command.samp_meng
// access: command.samp_meng_proc.samp_meng (Exec)
struct samp_meng { // command.samp_meng
    algo::cstring   in;   //   "data"  Input directory or filename, - for stdin
    // func:command.samp_meng..Ctor
    inline               samp_meng() __attribute__((nothrow));
};

// func:command.samp_meng..ReadFieldMaybe
bool                 samp_meng_ReadFieldMaybe(command::samp_meng& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::samp_meng from attributes of ascii tuple TUPLE
// func:command.samp_meng..ReadTupleMaybe
bool                 samp_meng_ReadTupleMaybe(command::samp_meng &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.samp_meng..Init
inline void          samp_meng_Init(command::samp_meng& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.samp_meng..ToCmdline
tempstr              samp_meng_ToCmdline(command::samp_meng& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.samp_meng.Argv  printfmt:Tuple
// func:command.samp_meng..PrintArgv
void                 samp_meng_PrintArgv(command::samp_meng& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.samp_meng..NArgs
i32                  samp_meng_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.samp_meng_proc
struct samp_meng_proc { // command.samp_meng_proc: Subprocess: 
    algo::cstring        path;      //   "bin/samp_meng"  path for executable
    command::samp_meng   cmd;       // command line for child process
    algo::cstring        fstdin;    // redirect for stdin
    algo::cstring        fstdout;   // redirect for stdout
    algo::cstring        fstderr;   // redirect for stderr
    pid_t                pid;       //   0  pid of running child process
    i32                  timeout;   //   0  optional timeout for child process
    i32                  status;    //   0  last exit status of child process
    // func:command.samp_meng_proc..Ctor
    inline               samp_meng_proc() __attribute__((nothrow));
    // func:command.samp_meng_proc..Dtor
    inline               ~samp_meng_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.samp_meng_proc.samp_meng.Start
int                  samp_meng_Start(command::samp_meng_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.samp_meng_proc.samp_meng.StartRead
algo::Fildes         samp_meng_StartRead(command::samp_meng_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.samp_meng_proc.samp_meng.Kill
void                 samp_meng_Kill(command::samp_meng_proc& parent);
// Wait for subprocess to return
// func:command.samp_meng_proc.samp_meng.Wait
void                 samp_meng_Wait(command::samp_meng_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.samp_meng_proc.samp_meng.Exec
int                  samp_meng_Exec(command::samp_meng_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.samp_meng_proc.samp_meng.ExecX
void                 samp_meng_ExecX(command::samp_meng_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.samp_meng_proc.samp_meng.Execv
int                  samp_meng_Execv(command::samp_meng_proc& parent) __attribute__((nothrow));
// func:command.samp_meng_proc.samp_meng.ToCmdline
algo::tempstr        samp_meng_ToCmdline(command::samp_meng_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.samp_meng_proc.samp_meng.ToArgv
void                 samp_meng_ToArgv(command::samp_meng_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.samp_meng_proc..Init
inline void          samp_meng_proc_Init(command::samp_meng_proc& parent);
// func:command.samp_meng_proc..Uninit
void                 samp_meng_proc_Uninit(command::samp_meng_proc& parent) __attribute__((nothrow));

// --- command.samp_regx
// access: command.samp_regx_proc.samp_regx (Exec)
struct samp_regx { // command.samp_regx
    algo::cstring   in;       //   "data"  Input directory or filename, - for stdin
    algo::cstring   expr;     // Expression
    u8              style;    //   0  Regx style
    bool            match;    //   false  Match a string
    algo::cstring   string;   //   ""  String to match
    bool            show;     //   false  Show regx innards
    // func:command.samp_regx..Ctor
    inline               samp_regx() __attribute__((nothrow));
};

// Get value of field as enum type
// func:command.samp_regx.style.GetEnum
inline command_samp_regx_style_Enum style_GetEnum(const command::samp_regx& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:command.samp_regx.style.SetEnum
inline void          style_SetEnum(command::samp_regx& parent, command_samp_regx_style_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:command.samp_regx.style.ToCstr
const char*          style_ToCstr(const command::samp_regx& parent) __attribute__((nothrow));
// Convert style to a string. First, attempt conversion to a known string.
// If no string matches, print style as a numeric value.
// func:command.samp_regx.style.Print
void                 style_Print(const command::samp_regx& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:command.samp_regx.style.SetStrptrMaybe
bool                 style_SetStrptrMaybe(command::samp_regx& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:command.samp_regx.style.SetStrptr
void                 style_SetStrptr(command::samp_regx& parent, algo::strptr rhs, command_samp_regx_style_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:command.samp_regx.style.ReadStrptrMaybe
bool                 style_ReadStrptrMaybe(command::samp_regx& parent, algo::strptr rhs) __attribute__((nothrow));

// func:command.samp_regx..ReadFieldMaybe
bool                 samp_regx_ReadFieldMaybe(command::samp_regx& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::samp_regx from attributes of ascii tuple TUPLE
// func:command.samp_regx..ReadTupleMaybe
bool                 samp_regx_ReadTupleMaybe(command::samp_regx &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.samp_regx..Init
inline void          samp_regx_Init(command::samp_regx& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.samp_regx..ToCmdline
tempstr              samp_regx_ToCmdline(command::samp_regx& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.samp_regx.Argv  printfmt:Tuple
// func:command.samp_regx..PrintArgv
void                 samp_regx_PrintArgv(command::samp_regx& row, algo::cstring& str) __attribute__((nothrow));
// func:command.samp_regx..GetAnon
algo::strptr         samp_regx_GetAnon(command::samp_regx &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.samp_regx..NArgs
i32                  samp_regx_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.samp_regx_proc
struct samp_regx_proc { // command.samp_regx_proc: Subprocess: Test tool for regular expressions
    algo::cstring        path;      //   "bin/samp_regx"  path for executable
    command::samp_regx   cmd;       // command line for child process
    algo::cstring        fstdin;    // redirect for stdin
    algo::cstring        fstdout;   // redirect for stdout
    algo::cstring        fstderr;   // redirect for stderr
    pid_t                pid;       //   0  pid of running child process
    i32                  timeout;   //   0  optional timeout for child process
    i32                  status;    //   0  last exit status of child process
    // func:command.samp_regx_proc..Ctor
    inline               samp_regx_proc() __attribute__((nothrow));
    // func:command.samp_regx_proc..Dtor
    inline               ~samp_regx_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.samp_regx_proc.samp_regx.Start
int                  samp_regx_Start(command::samp_regx_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.samp_regx_proc.samp_regx.StartRead
algo::Fildes         samp_regx_StartRead(command::samp_regx_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.samp_regx_proc.samp_regx.Kill
void                 samp_regx_Kill(command::samp_regx_proc& parent);
// Wait for subprocess to return
// func:command.samp_regx_proc.samp_regx.Wait
void                 samp_regx_Wait(command::samp_regx_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.samp_regx_proc.samp_regx.Exec
int                  samp_regx_Exec(command::samp_regx_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.samp_regx_proc.samp_regx.ExecX
void                 samp_regx_ExecX(command::samp_regx_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.samp_regx_proc.samp_regx.Execv
int                  samp_regx_Execv(command::samp_regx_proc& parent) __attribute__((nothrow));
// func:command.samp_regx_proc.samp_regx.ToCmdline
algo::tempstr        samp_regx_ToCmdline(command::samp_regx_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.samp_regx_proc.samp_regx.ToArgv
void                 samp_regx_ToArgv(command::samp_regx_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.samp_regx_proc..Init
inline void          samp_regx_proc_Init(command::samp_regx_proc& parent);
// func:command.samp_regx_proc..Uninit
void                 samp_regx_proc_Uninit(command::samp_regx_proc& parent) __attribute__((nothrow));

// --- command.sample
// access: command.sample_proc.sample (Exec)
struct sample { // command.sample
    algo::cstring   in;   //   "data"  Input directory or filename, - for stdin
    // func:command.sample..Ctor
    inline               sample() __attribute__((nothrow));
};

// func:command.sample..ReadFieldMaybe
bool                 sample_ReadFieldMaybe(command::sample& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::sample from attributes of ascii tuple TUPLE
// func:command.sample..ReadTupleMaybe
bool                 sample_ReadTupleMaybe(command::sample &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.sample..Init
inline void          sample_Init(command::sample& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.sample..ToCmdline
tempstr              sample_ToCmdline(command::sample& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.sample.Argv  printfmt:Tuple
// func:command.sample..PrintArgv
void                 sample_PrintArgv(command::sample& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.sample..NArgs
i32                  sample_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.sample_proc
struct sample_proc { // command.sample_proc: Subprocess: 
    algo::cstring     path;      //   "bin/sample"  path for executable
    command::sample   cmd;       // command line for child process
    algo::cstring     fstdin;    // redirect for stdin
    algo::cstring     fstdout;   // redirect for stdout
    algo::cstring     fstderr;   // redirect for stderr
    pid_t             pid;       //   0  pid of running child process
    i32               timeout;   //   0  optional timeout for child process
    i32               status;    //   0  last exit status of child process
    // func:command.sample_proc..Ctor
    inline               sample_proc() __attribute__((nothrow));
    // func:command.sample_proc..Dtor
    inline               ~sample_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.sample_proc.sample.Start
int                  sample_Start(command::sample_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.sample_proc.sample.StartRead
algo::Fildes         sample_StartRead(command::sample_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.sample_proc.sample.Kill
void                 sample_Kill(command::sample_proc& parent);
// Wait for subprocess to return
// func:command.sample_proc.sample.Wait
void                 sample_Wait(command::sample_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.sample_proc.sample.Exec
int                  sample_Exec(command::sample_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.sample_proc.sample.ExecX
void                 sample_ExecX(command::sample_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.sample_proc.sample.Execv
int                  sample_Execv(command::sample_proc& parent) __attribute__((nothrow));
// func:command.sample_proc.sample.ToCmdline
algo::tempstr        sample_ToCmdline(command::sample_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.sample_proc.sample.ToArgv
void                 sample_ToArgv(command::sample_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.sample_proc..Init
inline void          sample_proc_Init(command::sample_proc& parent);
// func:command.sample_proc..Uninit
void                 sample_proc_Uninit(command::sample_proc& parent) __attribute__((nothrow));

// --- command.sandbox
// access: command.sandbox_proc.sandbox (Exec)
struct sandbox { // command.sandbox
    algo::cstring    in;            //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   name;          // Sql Regx of dev::Sandbox
    bool             create;        //   false  Create new sandbox and register in dev.sandbox
    bool             list;          //   false  List existing sandboxes
    bool             reset;         //   false  Reset sandbox to match current directory
    bool             clean;         //   false  Remove sandbox contents to save space
    bool             shell;         //   false  Open interactive shell inside sandbox
    bool             del;           //   false  Permanently delete sandbox
    bool             gc;            //   false  Run git gc in target dir
    algo::cstring*   cmd_elems;     // pointer to elements
    u32              cmd_n;         // number of elements in array
    u32              cmd_max;       // max. capacity of array before realloc
    bool             diff;          //   false  Show diff after running command
    algo::cstring*   files_elems;   // pointer to elements
    u32              files_n;       // number of elements in array
    u32              files_max;     // max. capacity of array before realloc
    algo::cstring    refs;          //   "HEAD"  Refs to fetch into sandbox
    bool             q;             //   false  Quiet mode
    // func:command.sandbox..AssignOp
    command::sandbox&    operator =(const command::sandbox &rhs) __attribute__((nothrow));
    // func:command.sandbox..Ctor
    inline               sandbox() __attribute__((nothrow));
    // func:command.sandbox..Dtor
    inline               ~sandbox() __attribute__((nothrow));
    // func:command.sandbox..CopyCtor
    sandbox(const command::sandbox &rhs) __attribute__((nothrow));
};

// Print back to string
// func:command.sandbox.name.Print
void                 name_Print(command::sandbox& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.sandbox.name.ReadStrptrMaybe
bool                 name_ReadStrptrMaybe(command::sandbox& parent, algo::strptr in) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.sandbox.cmd.Addary
algo::aryptr<algo::cstring> cmd_Addary(command::sandbox& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.sandbox.cmd.Alloc
algo::cstring&       cmd_Alloc(command::sandbox& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.sandbox.cmd.AllocAt
algo::cstring&       cmd_AllocAt(command::sandbox& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.sandbox.cmd.AllocN
algo::aryptr<algo::cstring> cmd_AllocN(command::sandbox& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.sandbox.cmd.EmptyQ
inline bool          cmd_EmptyQ(command::sandbox& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.sandbox.cmd.Find
inline algo::cstring* cmd_Find(command::sandbox& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.sandbox.cmd.Getary
inline algo::aryptr<algo::cstring> cmd_Getary(const command::sandbox& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.sandbox.cmd.Last
inline algo::cstring* cmd_Last(command::sandbox& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.sandbox.cmd.Max
inline i32           cmd_Max(command::sandbox& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.sandbox.cmd.N
inline i32           cmd_N(const command::sandbox& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.sandbox.cmd.Remove
void                 cmd_Remove(command::sandbox& parent, u32 i) __attribute__((nothrow));
// func:command.sandbox.cmd.RemoveAll
void                 cmd_RemoveAll(command::sandbox& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.sandbox.cmd.RemoveLast
void                 cmd_RemoveLast(command::sandbox& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.sandbox.cmd.Reserve
inline void          cmd_Reserve(command::sandbox& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.sandbox.cmd.AbsReserve
void                 cmd_AbsReserve(command::sandbox& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.sandbox.cmd.Setary
void                 cmd_Setary(command::sandbox& parent, command::sandbox &rhs) __attribute__((nothrow));
// Copy specified array into cmd, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.sandbox.cmd.Setary2
void                 cmd_Setary(command::sandbox& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.sandbox.cmd.qFind
inline algo::cstring& cmd_qFind(command::sandbox& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.sandbox.cmd.qLast
inline algo::cstring& cmd_qLast(command::sandbox& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.sandbox.cmd.rowid_Get
inline u64           cmd_rowid_Get(command::sandbox& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.sandbox.cmd.AllocNVal
algo::aryptr<algo::cstring> cmd_AllocNVal(command::sandbox& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.sandbox.cmd.ReadStrptrMaybe
bool                 cmd_ReadStrptrMaybe(command::sandbox& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.sandbox.files.Addary
algo::aryptr<algo::cstring> files_Addary(command::sandbox& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.sandbox.files.Alloc
algo::cstring&       files_Alloc(command::sandbox& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.sandbox.files.AllocAt
algo::cstring&       files_AllocAt(command::sandbox& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.sandbox.files.AllocN
algo::aryptr<algo::cstring> files_AllocN(command::sandbox& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.sandbox.files.EmptyQ
inline bool          files_EmptyQ(command::sandbox& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.sandbox.files.Find
inline algo::cstring* files_Find(command::sandbox& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.sandbox.files.Getary
inline algo::aryptr<algo::cstring> files_Getary(const command::sandbox& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.sandbox.files.Last
inline algo::cstring* files_Last(command::sandbox& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.sandbox.files.Max
inline i32           files_Max(command::sandbox& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.sandbox.files.N
inline i32           files_N(const command::sandbox& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.sandbox.files.Remove
void                 files_Remove(command::sandbox& parent, u32 i) __attribute__((nothrow));
// func:command.sandbox.files.RemoveAll
void                 files_RemoveAll(command::sandbox& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.sandbox.files.RemoveLast
void                 files_RemoveLast(command::sandbox& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.sandbox.files.Reserve
inline void          files_Reserve(command::sandbox& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.sandbox.files.AbsReserve
void                 files_AbsReserve(command::sandbox& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.sandbox.files.Setary
void                 files_Setary(command::sandbox& parent, command::sandbox &rhs) __attribute__((nothrow));
// Copy specified array into files, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.sandbox.files.Setary2
void                 files_Setary(command::sandbox& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.sandbox.files.qFind
inline algo::cstring& files_qFind(command::sandbox& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.sandbox.files.qLast
inline algo::cstring& files_qLast(command::sandbox& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.sandbox.files.rowid_Get
inline u64           files_rowid_Get(command::sandbox& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.sandbox.files.AllocNVal
algo::aryptr<algo::cstring> files_AllocNVal(command::sandbox& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.sandbox.files.ReadStrptrMaybe
bool                 files_ReadStrptrMaybe(command::sandbox& parent, algo::strptr in_str) __attribute__((nothrow));

// proceed to next item
// func:command.sandbox.cmd_curs.Next
inline void          sandbox_cmd_curs_Next(sandbox_cmd_curs &curs) __attribute__((nothrow));
// func:command.sandbox.cmd_curs.Reset
inline void          sandbox_cmd_curs_Reset(sandbox_cmd_curs &curs, command::sandbox &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.sandbox.cmd_curs.ValidQ
inline bool          sandbox_cmd_curs_ValidQ(sandbox_cmd_curs &curs) __attribute__((nothrow));
// item access
// func:command.sandbox.cmd_curs.Access
inline algo::cstring& sandbox_cmd_curs_Access(sandbox_cmd_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.sandbox.files_curs.Next
inline void          sandbox_files_curs_Next(sandbox_files_curs &curs) __attribute__((nothrow));
// func:command.sandbox.files_curs.Reset
inline void          sandbox_files_curs_Reset(sandbox_files_curs &curs, command::sandbox &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.sandbox.files_curs.ValidQ
inline bool          sandbox_files_curs_ValidQ(sandbox_files_curs &curs) __attribute__((nothrow));
// item access
// func:command.sandbox.files_curs.Access
inline algo::cstring& sandbox_files_curs_Access(sandbox_files_curs &curs) __attribute__((nothrow));
// func:command.sandbox..ReadFieldMaybe
bool                 sandbox_ReadFieldMaybe(command::sandbox& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::sandbox from attributes of ascii tuple TUPLE
// func:command.sandbox..ReadTupleMaybe
bool                 sandbox_ReadTupleMaybe(command::sandbox &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.sandbox..Init
void                 sandbox_Init(command::sandbox& parent);
// func:command.sandbox..Uninit
void                 sandbox_Uninit(command::sandbox& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.sandbox..ToCmdline
tempstr              sandbox_ToCmdline(command::sandbox& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.sandbox.Argv  printfmt:Tuple
// func:command.sandbox..PrintArgv
void                 sandbox_PrintArgv(command::sandbox& row, algo::cstring& str) __attribute__((nothrow));
// func:command.sandbox..GetAnon
algo::strptr         sandbox_GetAnon(command::sandbox &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.sandbox..NArgs
i32                  sandbox_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.sandbox_proc
struct sandbox_proc { // command.sandbox_proc: Subprocess: Sandbox - sandbox management tool
    algo::cstring      path;      //   "bin/sandbox"  path for executable
    command::sandbox   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.sandbox_proc..Ctor
    inline               sandbox_proc() __attribute__((nothrow));
    // func:command.sandbox_proc..Dtor
    inline               ~sandbox_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.sandbox_proc.sandbox.Start
int                  sandbox_Start(command::sandbox_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.sandbox_proc.sandbox.StartRead
algo::Fildes         sandbox_StartRead(command::sandbox_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.sandbox_proc.sandbox.Kill
void                 sandbox_Kill(command::sandbox_proc& parent);
// Wait for subprocess to return
// func:command.sandbox_proc.sandbox.Wait
void                 sandbox_Wait(command::sandbox_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.sandbox_proc.sandbox.Exec
int                  sandbox_Exec(command::sandbox_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.sandbox_proc.sandbox.ExecX
void                 sandbox_ExecX(command::sandbox_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.sandbox_proc.sandbox.Execv
int                  sandbox_Execv(command::sandbox_proc& parent) __attribute__((nothrow));
// func:command.sandbox_proc.sandbox.ToCmdline
algo::tempstr        sandbox_ToCmdline(command::sandbox_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.sandbox_proc.sandbox.ToArgv
void                 sandbox_ToArgv(command::sandbox_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.sandbox_proc..Init
inline void          sandbox_proc_Init(command::sandbox_proc& parent);
// func:command.sandbox_proc..Uninit
void                 sandbox_proc_Uninit(command::sandbox_proc& parent) __attribute__((nothrow));

// --- command.src_func
// access: command.src_func_proc.src_func (Exec)
struct src_func { // command.src_func
    algo::cstring       in;            //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx      target;        //   "%"  Sql Regx of dev::Target
    algo_lib::Regx      name;          //   "%"  Sql Regx
    algo_lib::Regx      body;          //   "%"  Sql Regx
    algo_lib::Regx      targsrc;       //   ""  Sql Regx of dev::Targsrc
    algo_lib::Regx      func;          //   "%"  Sql Regx
    algo_lib::Regx      comment;       //   "%"  Sql Regx
    algo::Smallstr200   nextfile;      //   ""  Print name of next srcfile in targsrc list
    bool                other;         //   false  (with -nextfile), name of previous file
    bool                updateproto;   //   false  Update prototypes in headers
    bool                listfunc;      //   false  Show functions in target
    bool                iffy;          //   false  Select functions that may contain errors
    bool                proto;         //   false  (with -listfunc) List prototypes only
    bool                gen;           //   false  (with -listfunc) Visit generated files
    bool                showloc;       //   true  (with -listfunc) Show file location
    bool                showstatic;    //   true  (with -listfunc) Show static functions
    bool                showsortkey;   //   false  (with -listfunc) Display function sortkey
    bool                sortname;      //   false  (with -listfunc) Sort functions by name
    bool                e;             //   false  (with -listfunc) Edit found functions
    bool                baddecl;       //   false  Report and fail on bad declarations
    bool                report;        //   false
    // func:command.src_func..Ctor
    inline               src_func() __attribute__((nothrow));
};

// Print back to string
// func:command.src_func.target.Print
void                 target_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.target.ReadStrptrMaybe
bool                 target_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_func.name.Print
void                 name_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.name.ReadStrptrMaybe
bool                 name_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_func.body.Print
void                 body_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.body.ReadStrptrMaybe
bool                 body_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_func.targsrc.Print
void                 targsrc_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.targsrc.ReadStrptrMaybe
bool                 targsrc_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_func.func.Print
void                 func_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.func.ReadStrptrMaybe
bool                 func_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_func.comment.Print
void                 comment_Print(command::src_func& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_func.comment.ReadStrptrMaybe
bool                 comment_ReadStrptrMaybe(command::src_func& parent, algo::strptr in) __attribute__((nothrow));

// func:command.src_func..ReadFieldMaybe
bool                 src_func_ReadFieldMaybe(command::src_func& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::src_func from attributes of ascii tuple TUPLE
// func:command.src_func..ReadTupleMaybe
bool                 src_func_ReadTupleMaybe(command::src_func &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.src_func..Init
void                 src_func_Init(command::src_func& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.src_func..ToCmdline
tempstr              src_func_ToCmdline(command::src_func& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.src_func.Argv  printfmt:Tuple
// func:command.src_func..PrintArgv
void                 src_func_PrintArgv(command::src_func& row, algo::cstring& str) __attribute__((nothrow));
// func:command.src_func..GetAnon
algo::strptr         src_func_GetAnon(command::src_func &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.src_func..NArgs
i32                  src_func_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.src_func_proc
struct src_func_proc { // command.src_func_proc: Subprocess: Access / edit functions
    algo::cstring       path;      //   "bin/src_func"  path for executable
    command::src_func   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.src_func_proc..Ctor
    inline               src_func_proc() __attribute__((nothrow));
    // func:command.src_func_proc..Dtor
    inline               ~src_func_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.src_func_proc.src_func.Start
int                  src_func_Start(command::src_func_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.src_func_proc.src_func.StartRead
algo::Fildes         src_func_StartRead(command::src_func_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.src_func_proc.src_func.Kill
void                 src_func_Kill(command::src_func_proc& parent);
// Wait for subprocess to return
// func:command.src_func_proc.src_func.Wait
void                 src_func_Wait(command::src_func_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.src_func_proc.src_func.Exec
int                  src_func_Exec(command::src_func_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.src_func_proc.src_func.ExecX
void                 src_func_ExecX(command::src_func_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.src_func_proc.src_func.Execv
int                  src_func_Execv(command::src_func_proc& parent) __attribute__((nothrow));
// func:command.src_func_proc.src_func.ToCmdline
algo::tempstr        src_func_ToCmdline(command::src_func_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.src_func_proc.src_func.ToArgv
void                 src_func_ToArgv(command::src_func_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.src_func_proc..Init
inline void          src_func_proc_Init(command::src_func_proc& parent);
// func:command.src_func_proc..Uninit
void                 src_func_proc_Uninit(command::src_func_proc& parent) __attribute__((nothrow));

// --- command.src_hdr
// access: command.src_hdr_proc.src_hdr (Exec)
struct src_hdr { // command.src_hdr
    algo::cstring    in;                 //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   targsrc;            //   ""  Sql Regx of dev::Targsrc
    bool             write;              //   false  Update files in-place
    bool             indent;             //   false  Indent source files
    bool             update_copyright;   //   false  Update copyright year for current company
    algo_lib::Regx   scriptfile;         //   ""  Sql Regx of dev::Scriptfile
    // func:command.src_hdr..Ctor
    inline               src_hdr() __attribute__((nothrow));
};

// Print back to string
// func:command.src_hdr.targsrc.Print
void                 targsrc_Print(command::src_hdr& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_hdr.targsrc.ReadStrptrMaybe
bool                 targsrc_ReadStrptrMaybe(command::src_hdr& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_hdr.scriptfile.Print
void                 scriptfile_Print(command::src_hdr& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_hdr.scriptfile.ReadStrptrMaybe
bool                 scriptfile_ReadStrptrMaybe(command::src_hdr& parent, algo::strptr in) __attribute__((nothrow));

// func:command.src_hdr..ReadFieldMaybe
bool                 src_hdr_ReadFieldMaybe(command::src_hdr& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::src_hdr from attributes of ascii tuple TUPLE
// func:command.src_hdr..ReadTupleMaybe
bool                 src_hdr_ReadTupleMaybe(command::src_hdr &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.src_hdr..Init
void                 src_hdr_Init(command::src_hdr& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.src_hdr..ToCmdline
tempstr              src_hdr_ToCmdline(command::src_hdr& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.src_hdr.Argv  printfmt:Tuple
// func:command.src_hdr..PrintArgv
void                 src_hdr_PrintArgv(command::src_hdr& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.src_hdr..NArgs
i32                  src_hdr_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.src_hdr_proc
struct src_hdr_proc { // command.src_hdr_proc: Subprocess: Manage source copyright+license header in source files and scripts
    algo::cstring      path;      //   "bin/src_hdr"  path for executable
    command::src_hdr   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.src_hdr_proc..Ctor
    inline               src_hdr_proc() __attribute__((nothrow));
    // func:command.src_hdr_proc..Dtor
    inline               ~src_hdr_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.src_hdr_proc.src_hdr.Start
int                  src_hdr_Start(command::src_hdr_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.src_hdr_proc.src_hdr.StartRead
algo::Fildes         src_hdr_StartRead(command::src_hdr_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.src_hdr_proc.src_hdr.Kill
void                 src_hdr_Kill(command::src_hdr_proc& parent);
// Wait for subprocess to return
// func:command.src_hdr_proc.src_hdr.Wait
void                 src_hdr_Wait(command::src_hdr_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.src_hdr_proc.src_hdr.Exec
int                  src_hdr_Exec(command::src_hdr_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.src_hdr_proc.src_hdr.ExecX
void                 src_hdr_ExecX(command::src_hdr_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.src_hdr_proc.src_hdr.Execv
int                  src_hdr_Execv(command::src_hdr_proc& parent) __attribute__((nothrow));
// func:command.src_hdr_proc.src_hdr.ToCmdline
algo::tempstr        src_hdr_ToCmdline(command::src_hdr_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.src_hdr_proc.src_hdr.ToArgv
void                 src_hdr_ToArgv(command::src_hdr_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.src_hdr_proc..Init
inline void          src_hdr_proc_Init(command::src_hdr_proc& parent);
// func:command.src_hdr_proc..Uninit
void                 src_hdr_proc_Uninit(command::src_hdr_proc& parent) __attribute__((nothrow));

// --- command.src_lim
// access: command.src_lim_proc.src_lim (Exec)
struct src_lim { // command.src_lim
    algo::cstring    in;          //   "data"  Input directory or filename, - for stdin
    bool             linelim;     //   false  Check various file limits (line length, function length, etc)
    algo_lib::Regx   srcfile;     //   "%"  Sql Regx of dev::Gitfile
    bool             strayfile;   //   false  Check for unregistered source files
    bool             capture;     //   false  Generate new dev.linelim records
    bool             write;       //   false  Update ssim database (with -capture)
    bool             badchar;     //   false  Check for bad chars in source files
    algo_lib::Regx   badline;     //   ""  Sql Regx of dev::Badline
    // func:command.src_lim..Ctor
    inline               src_lim() __attribute__((nothrow));
};

// Print back to string
// func:command.src_lim.srcfile.Print
void                 srcfile_Print(command::src_lim& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_lim.srcfile.ReadStrptrMaybe
bool                 srcfile_ReadStrptrMaybe(command::src_lim& parent, algo::strptr in) __attribute__((nothrow));

// Print back to string
// func:command.src_lim.badline.Print
void                 badline_Print(command::src_lim& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.src_lim.badline.ReadStrptrMaybe
bool                 badline_ReadStrptrMaybe(command::src_lim& parent, algo::strptr in) __attribute__((nothrow));

// func:command.src_lim..ReadFieldMaybe
bool                 src_lim_ReadFieldMaybe(command::src_lim& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::src_lim from attributes of ascii tuple TUPLE
// func:command.src_lim..ReadTupleMaybe
bool                 src_lim_ReadTupleMaybe(command::src_lim &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.src_lim..Init
void                 src_lim_Init(command::src_lim& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.src_lim..ToCmdline
tempstr              src_lim_ToCmdline(command::src_lim& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.src_lim.Argv  printfmt:Tuple
// func:command.src_lim..PrintArgv
void                 src_lim_PrintArgv(command::src_lim& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.src_lim..NArgs
i32                  src_lim_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.src_lim_proc
struct src_lim_proc { // command.src_lim_proc: Subprocess: Enforce line length, function length, and indentation limits
    algo::cstring      path;      //   "bin/src_lim"  path for executable
    command::src_lim   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.src_lim_proc..Ctor
    inline               src_lim_proc() __attribute__((nothrow));
    // func:command.src_lim_proc..Dtor
    inline               ~src_lim_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.src_lim_proc.src_lim.Start
int                  src_lim_Start(command::src_lim_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.src_lim_proc.src_lim.StartRead
algo::Fildes         src_lim_StartRead(command::src_lim_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.src_lim_proc.src_lim.Kill
void                 src_lim_Kill(command::src_lim_proc& parent);
// Wait for subprocess to return
// func:command.src_lim_proc.src_lim.Wait
void                 src_lim_Wait(command::src_lim_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.src_lim_proc.src_lim.Exec
int                  src_lim_Exec(command::src_lim_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.src_lim_proc.src_lim.ExecX
void                 src_lim_ExecX(command::src_lim_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.src_lim_proc.src_lim.Execv
int                  src_lim_Execv(command::src_lim_proc& parent) __attribute__((nothrow));
// func:command.src_lim_proc.src_lim.ToCmdline
algo::tempstr        src_lim_ToCmdline(command::src_lim_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.src_lim_proc.src_lim.ToArgv
void                 src_lim_ToArgv(command::src_lim_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.src_lim_proc..Init
inline void          src_lim_proc_Init(command::src_lim_proc& parent);
// func:command.src_lim_proc..Uninit
void                 src_lim_proc_Uninit(command::src_lim_proc& parent) __attribute__((nothrow));

// --- command.ssim2csv
// access: command.ssim2csv_proc.ssim2csv (Exec)
struct ssim2csv { // command.ssim2csv
    algo::cstring   expand;        //   ""
    bool            ignoreQuote;   //   false
    // func:command.ssim2csv..Ctor
    inline               ssim2csv() __attribute__((nothrow));
};

// func:command.ssim2csv..ReadFieldMaybe
bool                 ssim2csv_ReadFieldMaybe(command::ssim2csv& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::ssim2csv from attributes of ascii tuple TUPLE
// func:command.ssim2csv..ReadTupleMaybe
bool                 ssim2csv_ReadTupleMaybe(command::ssim2csv &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.ssim2csv..Init
inline void          ssim2csv_Init(command::ssim2csv& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.ssim2csv..ToCmdline
tempstr              ssim2csv_ToCmdline(command::ssim2csv& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.ssim2csv.Argv  printfmt:Auto
// func:command.ssim2csv..PrintArgv
void                 ssim2csv_PrintArgv(command::ssim2csv& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.ssim2csv..NArgs
i32                  ssim2csv_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.ssim2csv_proc
struct ssim2csv_proc { // command.ssim2csv_proc: Subprocess: Ssim -> csv conversion tool
    algo::cstring       path;      //   "bin/ssim2csv"  path for executable
    command::ssim2csv   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.ssim2csv_proc..Ctor
    inline               ssim2csv_proc() __attribute__((nothrow));
    // func:command.ssim2csv_proc..Dtor
    inline               ~ssim2csv_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.ssim2csv_proc.ssim2csv.Start
int                  ssim2csv_Start(command::ssim2csv_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.ssim2csv_proc.ssim2csv.StartRead
algo::Fildes         ssim2csv_StartRead(command::ssim2csv_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.ssim2csv_proc.ssim2csv.Kill
void                 ssim2csv_Kill(command::ssim2csv_proc& parent);
// Wait for subprocess to return
// func:command.ssim2csv_proc.ssim2csv.Wait
void                 ssim2csv_Wait(command::ssim2csv_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.ssim2csv_proc.ssim2csv.Exec
int                  ssim2csv_Exec(command::ssim2csv_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.ssim2csv_proc.ssim2csv.ExecX
void                 ssim2csv_ExecX(command::ssim2csv_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.ssim2csv_proc.ssim2csv.Execv
int                  ssim2csv_Execv(command::ssim2csv_proc& parent) __attribute__((nothrow));
// func:command.ssim2csv_proc.ssim2csv.ToCmdline
algo::tempstr        ssim2csv_ToCmdline(command::ssim2csv_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.ssim2csv_proc.ssim2csv.ToArgv
void                 ssim2csv_ToArgv(command::ssim2csv_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.ssim2csv_proc..Init
inline void          ssim2csv_proc_Init(command::ssim2csv_proc& parent);
// func:command.ssim2csv_proc..Uninit
void                 ssim2csv_proc_Uninit(command::ssim2csv_proc& parent) __attribute__((nothrow));

// --- command.ssim2mysql
// access: command.ssim2mysql_proc.ssim2mysql (Exec)
struct ssim2mysql { // command.ssim2mysql
    algo::cstring   url;         //   ""  URL of mysql server. user:pass@hostb or sock://filename; Empty -> stdout
    algo::cstring   data_dir;    //   "data"  Load dmmeta info from this directory
    i32             maxpacket;   //   100000  Max Mysql packet size
    bool            replace;     //   true  use REPLACE INTO instead of INSERT INTO
    bool            trunc;       //   false  Truncate target table
    bool            dry_run;     //   false  Print SQL commands to the stdout
    bool            fldfunc;     //   false  create columns for fldfuncs
    algo::cstring   in;          //   "-"  Input directory or filename, - for stdin
    algo::cstring   db;          //   ""  Optional database name
    bool            createdb;    //   false  Emit CREATE DATABASE code for namespace specified with <db>
    bool            fkey;        //   false  Enable foreign key constraints (uses InnoDB storage engine)
    // func:command.ssim2mysql..Ctor
    inline               ssim2mysql() __attribute__((nothrow));
};

// func:command.ssim2mysql..ReadFieldMaybe
bool                 ssim2mysql_ReadFieldMaybe(command::ssim2mysql& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::ssim2mysql from attributes of ascii tuple TUPLE
// func:command.ssim2mysql..ReadTupleMaybe
bool                 ssim2mysql_ReadTupleMaybe(command::ssim2mysql &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.ssim2mysql..Init
void                 ssim2mysql_Init(command::ssim2mysql& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.ssim2mysql..ToCmdline
tempstr              ssim2mysql_ToCmdline(command::ssim2mysql& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.ssim2mysql.Argv  printfmt:Auto
// func:command.ssim2mysql..PrintArgv
void                 ssim2mysql_PrintArgv(command::ssim2mysql& row, algo::cstring& str) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.ssim2mysql..NArgs
i32                  ssim2mysql_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.ssim2mysql_proc
struct ssim2mysql_proc { // command.ssim2mysql_proc: Subprocess: Ssim -> mysql
    algo::cstring         path;      //   "bin/ssim2mysql"  path for executable
    command::ssim2mysql   cmd;       // command line for child process
    algo::cstring         fstdin;    // redirect for stdin
    algo::cstring         fstdout;   // redirect for stdout
    algo::cstring         fstderr;   // redirect for stderr
    pid_t                 pid;       //   0  pid of running child process
    i32                   timeout;   //   0  optional timeout for child process
    i32                   status;    //   0  last exit status of child process
    // func:command.ssim2mysql_proc..Ctor
    inline               ssim2mysql_proc() __attribute__((nothrow));
    // func:command.ssim2mysql_proc..Dtor
    inline               ~ssim2mysql_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.ssim2mysql_proc.ssim2mysql.Start
int                  ssim2mysql_Start(command::ssim2mysql_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.ssim2mysql_proc.ssim2mysql.StartRead
algo::Fildes         ssim2mysql_StartRead(command::ssim2mysql_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.ssim2mysql_proc.ssim2mysql.Kill
void                 ssim2mysql_Kill(command::ssim2mysql_proc& parent);
// Wait for subprocess to return
// func:command.ssim2mysql_proc.ssim2mysql.Wait
void                 ssim2mysql_Wait(command::ssim2mysql_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.ssim2mysql_proc.ssim2mysql.Exec
int                  ssim2mysql_Exec(command::ssim2mysql_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.ssim2mysql_proc.ssim2mysql.ExecX
void                 ssim2mysql_ExecX(command::ssim2mysql_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.ssim2mysql_proc.ssim2mysql.Execv
int                  ssim2mysql_Execv(command::ssim2mysql_proc& parent) __attribute__((nothrow));
// func:command.ssim2mysql_proc.ssim2mysql.ToCmdline
algo::tempstr        ssim2mysql_ToCmdline(command::ssim2mysql_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.ssim2mysql_proc.ssim2mysql.ToArgv
void                 ssim2mysql_ToArgv(command::ssim2mysql_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.ssim2mysql_proc..Init
inline void          ssim2mysql_proc_Init(command::ssim2mysql_proc& parent);
// func:command.ssim2mysql_proc..Uninit
void                 ssim2mysql_proc_Uninit(command::ssim2mysql_proc& parent) __attribute__((nothrow));

// --- command.ssimfilt
// access: command.ssimfilt_proc.ssimfilt (Exec)
struct ssimfilt { // command.ssimfilt
    algo::cstring    in;            //   "data"  Input directory or filename, - for stdin
    algo_lib::Regx   typetag;       //   "%"  Sql Regx
    algo::cstring*   match_elems;   // pointer to elements
    u32              match_n;       // number of elements in array
    u32              match_max;     // max. capacity of array before realloc
    algo::cstring*   field_elems;   // pointer to elements
    u32              field_n;       // number of elements in array
    u32              field_max;     // max. capacity of array before realloc
    u8               format;        //   0  Output format for selected tuples
    bool             t;             //   false  Alias for -format:table
    algo::cstring    cmd;           //   ""  Command to output
    // func:command.ssimfilt..AssignOp
    command::ssimfilt&   operator =(const command::ssimfilt &rhs) __attribute__((nothrow));
    // func:command.ssimfilt..Ctor
    inline               ssimfilt() __attribute__((nothrow));
    // func:command.ssimfilt..Dtor
    inline               ~ssimfilt() __attribute__((nothrow));
    // func:command.ssimfilt..CopyCtor
    ssimfilt(const command::ssimfilt &rhs) __attribute__((nothrow));
};

// Print back to string
// func:command.ssimfilt.typetag.Print
void                 typetag_Print(command::ssimfilt& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.ssimfilt.typetag.ReadStrptrMaybe
bool                 typetag_ReadStrptrMaybe(command::ssimfilt& parent, algo::strptr in) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.ssimfilt.match.Addary
algo::aryptr<algo::cstring> match_Addary(command::ssimfilt& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.ssimfilt.match.Alloc
algo::cstring&       match_Alloc(command::ssimfilt& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.ssimfilt.match.AllocAt
algo::cstring&       match_AllocAt(command::ssimfilt& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.ssimfilt.match.AllocN
algo::aryptr<algo::cstring> match_AllocN(command::ssimfilt& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.ssimfilt.match.EmptyQ
inline bool          match_EmptyQ(command::ssimfilt& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.ssimfilt.match.Find
inline algo::cstring* match_Find(command::ssimfilt& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.ssimfilt.match.Getary
inline algo::aryptr<algo::cstring> match_Getary(const command::ssimfilt& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.ssimfilt.match.Last
inline algo::cstring* match_Last(command::ssimfilt& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.ssimfilt.match.Max
inline i32           match_Max(command::ssimfilt& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.ssimfilt.match.N
inline i32           match_N(const command::ssimfilt& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.ssimfilt.match.Remove
void                 match_Remove(command::ssimfilt& parent, u32 i) __attribute__((nothrow));
// func:command.ssimfilt.match.RemoveAll
void                 match_RemoveAll(command::ssimfilt& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.ssimfilt.match.RemoveLast
void                 match_RemoveLast(command::ssimfilt& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.ssimfilt.match.Reserve
inline void          match_Reserve(command::ssimfilt& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.ssimfilt.match.AbsReserve
void                 match_AbsReserve(command::ssimfilt& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.ssimfilt.match.Setary
void                 match_Setary(command::ssimfilt& parent, command::ssimfilt &rhs) __attribute__((nothrow));
// Copy specified array into match, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.ssimfilt.match.Setary2
void                 match_Setary(command::ssimfilt& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.ssimfilt.match.qFind
inline algo::cstring& match_qFind(command::ssimfilt& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.ssimfilt.match.qLast
inline algo::cstring& match_qLast(command::ssimfilt& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.ssimfilt.match.rowid_Get
inline u64           match_rowid_Get(command::ssimfilt& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.ssimfilt.match.AllocNVal
algo::aryptr<algo::cstring> match_AllocNVal(command::ssimfilt& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.ssimfilt.match.ReadStrptrMaybe
bool                 match_ReadStrptrMaybe(command::ssimfilt& parent, algo::strptr in_str) __attribute__((nothrow));

// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
// func:command.ssimfilt.field.Addary
algo::aryptr<algo::cstring> field_Addary(command::ssimfilt& parent, algo::aryptr<algo::cstring> rhs) __attribute__((nothrow));
// Reserve space. Insert element at the end
// The new element is initialized to a default value
// func:command.ssimfilt.field.Alloc
algo::cstring&       field_Alloc(command::ssimfilt& parent) __attribute__((__warn_unused_result__, nothrow));
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
// func:command.ssimfilt.field.AllocAt
algo::cstring&       field_AllocAt(command::ssimfilt& parent, int at) __attribute__((__warn_unused_result__, nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.ssimfilt.field.AllocN
algo::aryptr<algo::cstring> field_AllocN(command::ssimfilt& parent, int n_elems) __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:command.ssimfilt.field.EmptyQ
inline bool          field_EmptyQ(command::ssimfilt& parent) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
// func:command.ssimfilt.field.Find
inline algo::cstring* field_Find(command::ssimfilt& parent, u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return array pointer by value
// func:command.ssimfilt.field.Getary
inline algo::aryptr<algo::cstring> field_Getary(const command::ssimfilt& parent) __attribute__((nothrow));
// Return pointer to last element of array, or NULL if array is empty
// func:command.ssimfilt.field.Last
inline algo::cstring* field_Last(command::ssimfilt& parent) __attribute__((nothrow, pure));
// Return max. number of items in the array
// func:command.ssimfilt.field.Max
inline i32           field_Max(command::ssimfilt& parent) __attribute__((nothrow));
// Return number of items in the array
// func:command.ssimfilt.field.N
inline i32           field_N(const command::ssimfilt& parent) __attribute__((__warn_unused_result__, nothrow, pure));
// Remove item by index. If index outside of range, do nothing.
// func:command.ssimfilt.field.Remove
void                 field_Remove(command::ssimfilt& parent, u32 i) __attribute__((nothrow));
// func:command.ssimfilt.field.RemoveAll
void                 field_RemoveAll(command::ssimfilt& parent) __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:command.ssimfilt.field.RemoveLast
void                 field_RemoveLast(command::ssimfilt& parent) __attribute__((nothrow));
// Make sure N *more* elements will fit in array. Process dies if out of memory
// func:command.ssimfilt.field.Reserve
inline void          field_Reserve(command::ssimfilt& parent, int n) __attribute__((nothrow));
// Make sure N elements fit in array. Process dies if out of memory
// func:command.ssimfilt.field.AbsReserve
void                 field_AbsReserve(command::ssimfilt& parent, int n) __attribute__((nothrow));
// Copy contents of RHS to PARENT.
// func:command.ssimfilt.field.Setary
void                 field_Setary(command::ssimfilt& parent, command::ssimfilt &rhs) __attribute__((nothrow));
// Copy specified array into field, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
// func:command.ssimfilt.field.Setary2
void                 field_Setary(command::ssimfilt& parent, const algo::aryptr<algo::cstring> &rhs) __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:command.ssimfilt.field.qFind
inline algo::cstring& field_qFind(command::ssimfilt& parent, u64 t) __attribute__((nothrow));
// Return reference to last element of array. No bounds checking
// func:command.ssimfilt.field.qLast
inline algo::cstring& field_qLast(command::ssimfilt& parent) __attribute__((nothrow));
// Return row id of specified element
// func:command.ssimfilt.field.rowid_Get
inline u64           field_rowid_Get(command::ssimfilt& parent, algo::cstring &elem) __attribute__((nothrow));
// Reserve space. Insert N elements at the end of the array, return pointer to array
// func:command.ssimfilt.field.AllocNVal
algo::aryptr<algo::cstring> field_AllocNVal(command::ssimfilt& parent, int n_elems, const algo::cstring& val) __attribute__((nothrow));
// A single element is read from input string and appended to the array.
// If the string contains an error, the array is untouched.
// Function returns success value.
// func:command.ssimfilt.field.ReadStrptrMaybe
bool                 field_ReadStrptrMaybe(command::ssimfilt& parent, algo::strptr in_str) __attribute__((nothrow));

// Get value of field as enum type
// func:command.ssimfilt.format.GetEnum
inline command_ssimfilt_format_Enum format_GetEnum(const command::ssimfilt& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:command.ssimfilt.format.SetEnum
inline void          format_SetEnum(command::ssimfilt& parent, command_ssimfilt_format_Enum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:command.ssimfilt.format.ToCstr
const char*          format_ToCstr(const command::ssimfilt& parent) __attribute__((nothrow));
// Convert format to a string. First, attempt conversion to a known string.
// If no string matches, print format as a numeric value.
// func:command.ssimfilt.format.Print
void                 format_Print(const command::ssimfilt& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:command.ssimfilt.format.SetStrptrMaybe
bool                 format_SetStrptrMaybe(command::ssimfilt& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:command.ssimfilt.format.SetStrptr
void                 format_SetStrptr(command::ssimfilt& parent, algo::strptr rhs, command_ssimfilt_format_Enum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:command.ssimfilt.format.ReadStrptrMaybe
bool                 format_ReadStrptrMaybe(command::ssimfilt& parent, algo::strptr rhs) __attribute__((nothrow));

// proceed to next item
// func:command.ssimfilt.match_curs.Next
inline void          ssimfilt_match_curs_Next(ssimfilt_match_curs &curs) __attribute__((nothrow));
// func:command.ssimfilt.match_curs.Reset
inline void          ssimfilt_match_curs_Reset(ssimfilt_match_curs &curs, command::ssimfilt &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.ssimfilt.match_curs.ValidQ
inline bool          ssimfilt_match_curs_ValidQ(ssimfilt_match_curs &curs) __attribute__((nothrow));
// item access
// func:command.ssimfilt.match_curs.Access
inline algo::cstring& ssimfilt_match_curs_Access(ssimfilt_match_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:command.ssimfilt.field_curs.Next
inline void          ssimfilt_field_curs_Next(ssimfilt_field_curs &curs) __attribute__((nothrow));
// func:command.ssimfilt.field_curs.Reset
inline void          ssimfilt_field_curs_Reset(ssimfilt_field_curs &curs, command::ssimfilt &parent) __attribute__((nothrow));
// cursor points to valid item
// func:command.ssimfilt.field_curs.ValidQ
inline bool          ssimfilt_field_curs_ValidQ(ssimfilt_field_curs &curs) __attribute__((nothrow));
// item access
// func:command.ssimfilt.field_curs.Access
inline algo::cstring& ssimfilt_field_curs_Access(ssimfilt_field_curs &curs) __attribute__((nothrow));
// func:command.ssimfilt..ReadFieldMaybe
bool                 ssimfilt_ReadFieldMaybe(command::ssimfilt& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::ssimfilt from attributes of ascii tuple TUPLE
// func:command.ssimfilt..ReadTupleMaybe
bool                 ssimfilt_ReadTupleMaybe(command::ssimfilt &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.ssimfilt..Init
void                 ssimfilt_Init(command::ssimfilt& parent);
// func:command.ssimfilt..Uninit
void                 ssimfilt_Uninit(command::ssimfilt& parent) __attribute__((nothrow));
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.ssimfilt..ToCmdline
tempstr              ssimfilt_ToCmdline(command::ssimfilt& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.ssimfilt.Argv  printfmt:Tuple
// func:command.ssimfilt..PrintArgv
void                 ssimfilt_PrintArgv(command::ssimfilt& row, algo::cstring& str) __attribute__((nothrow));
// func:command.ssimfilt..GetAnon
algo::strptr         ssimfilt_GetAnon(command::ssimfilt &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.ssimfilt..NArgs
i32                  ssimfilt_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.ssimfilt_proc
struct ssimfilt_proc { // command.ssimfilt_proc: Subprocess: Tuple utility
    algo::cstring       path;      //   "bin/ssimfilt"  path for executable
    command::ssimfilt   cmd;       // command line for child process
    algo::cstring       fstdin;    // redirect for stdin
    algo::cstring       fstdout;   // redirect for stdout
    algo::cstring       fstderr;   // redirect for stderr
    pid_t               pid;       //   0  pid of running child process
    i32                 timeout;   //   0  optional timeout for child process
    i32                 status;    //   0  last exit status of child process
    // func:command.ssimfilt_proc..Ctor
    inline               ssimfilt_proc() __attribute__((nothrow));
    // func:command.ssimfilt_proc..Dtor
    inline               ~ssimfilt_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.ssimfilt_proc.ssimfilt.Start
int                  ssimfilt_Start(command::ssimfilt_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.ssimfilt_proc.ssimfilt.StartRead
algo::Fildes         ssimfilt_StartRead(command::ssimfilt_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.ssimfilt_proc.ssimfilt.Kill
void                 ssimfilt_Kill(command::ssimfilt_proc& parent);
// Wait for subprocess to return
// func:command.ssimfilt_proc.ssimfilt.Wait
void                 ssimfilt_Wait(command::ssimfilt_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.ssimfilt_proc.ssimfilt.Exec
int                  ssimfilt_Exec(command::ssimfilt_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.ssimfilt_proc.ssimfilt.ExecX
void                 ssimfilt_ExecX(command::ssimfilt_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.ssimfilt_proc.ssimfilt.Execv
int                  ssimfilt_Execv(command::ssimfilt_proc& parent) __attribute__((nothrow));
// func:command.ssimfilt_proc.ssimfilt.ToCmdline
algo::tempstr        ssimfilt_ToCmdline(command::ssimfilt_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.ssimfilt_proc.ssimfilt.ToArgv
void                 ssimfilt_ToArgv(command::ssimfilt_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.ssimfilt_proc..Init
inline void          ssimfilt_proc_Init(command::ssimfilt_proc& parent);
// func:command.ssimfilt_proc..Uninit
void                 ssimfilt_proc_Uninit(command::ssimfilt_proc& parent) __attribute__((nothrow));

// --- command.strconv
// access: command.strconv_proc.strconv (Exec)
struct strconv { // command.strconv
    algo::cstring       str;            // String parameter
    bool                tocamelcase;    //   false  Convert string to camel case
    bool                tolowerunder;   //   false  Convert string to lower-under
    algo::cstring       in;             //   "data"  Input directory or filename, - for stdin
    algo::Smallstr100   pathcomp;       //   ""  Extract path component from string
    // func:command.strconv..Ctor
    inline               strconv() __attribute__((nothrow));
};

// func:command.strconv..ReadFieldMaybe
bool                 strconv_ReadFieldMaybe(command::strconv& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::strconv from attributes of ascii tuple TUPLE
// func:command.strconv..ReadTupleMaybe
bool                 strconv_ReadTupleMaybe(command::strconv &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.strconv..Init
inline void          strconv_Init(command::strconv& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.strconv..ToCmdline
tempstr              strconv_ToCmdline(command::strconv& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.strconv.Argv  printfmt:Tuple
// func:command.strconv..PrintArgv
void                 strconv_PrintArgv(command::strconv& row, algo::cstring& str) __attribute__((nothrow));
// func:command.strconv..GetAnon
algo::strptr         strconv_GetAnon(command::strconv &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.strconv..NArgs
i32                  strconv_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.strconv_proc
struct strconv_proc { // command.strconv_proc: Subprocess: A simple string utility
    algo::cstring      path;      //   "bin/strconv"  path for executable
    command::strconv   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.strconv_proc..Ctor
    inline               strconv_proc() __attribute__((nothrow));
    // func:command.strconv_proc..Dtor
    inline               ~strconv_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.strconv_proc.strconv.Start
int                  strconv_Start(command::strconv_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.strconv_proc.strconv.StartRead
algo::Fildes         strconv_StartRead(command::strconv_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.strconv_proc.strconv.Kill
void                 strconv_Kill(command::strconv_proc& parent);
// Wait for subprocess to return
// func:command.strconv_proc.strconv.Wait
void                 strconv_Wait(command::strconv_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.strconv_proc.strconv.Exec
int                  strconv_Exec(command::strconv_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.strconv_proc.strconv.ExecX
void                 strconv_ExecX(command::strconv_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.strconv_proc.strconv.Execv
int                  strconv_Execv(command::strconv_proc& parent) __attribute__((nothrow));
// func:command.strconv_proc.strconv.ToCmdline
algo::tempstr        strconv_ToCmdline(command::strconv_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.strconv_proc.strconv.ToArgv
void                 strconv_ToArgv(command::strconv_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.strconv_proc..Init
inline void          strconv_proc_Init(command::strconv_proc& parent);
// func:command.strconv_proc..Uninit
void                 strconv_proc_Uninit(command::strconv_proc& parent) __attribute__((nothrow));

// --- command.sv2ssim
// access: command.sv2ssim_proc.sv2ssim (Exec)
struct sv2ssim { // command.sv2ssim
    algo::cstring    in;              //   "data"  Input directory or filename, - for stdin
    algo::cstring    fname;           // Input file, use - for stdin
    char             separator;       //   ','  Input field separator
    algo::cstring    outseparator;    //   ""  Output separator. Default: ssim
    bool             header;          //   true  File has header line
    algo::cstring    ctype;           //   ""  Type tag for output tuples
    algo::cstring    ssimfile;        //   ""  (with -schema) Create ssimfile definition
    bool             schema;          //   false  (output)Generate schema from input file
    algo_lib::Regx   field;           //   "%"  Sql Regx
    bool             data;            //   false  (output) Convert input file to ssim tuples
    bool             report;          //   true  Print final report
    bool             prefer_signed;   //   false  Prefer signed types when given a choice
    // func:command.sv2ssim..Ctor
    inline               sv2ssim() __attribute__((nothrow));
};

// Print back to string
// func:command.sv2ssim.field.Print
void                 field_Print(command::sv2ssim& parent, algo::cstring &out) __attribute__((nothrow));
// Read Regx from string
// Convert string to field. Return success value
// func:command.sv2ssim.field.ReadStrptrMaybe
bool                 field_ReadStrptrMaybe(command::sv2ssim& parent, algo::strptr in) __attribute__((nothrow));

// func:command.sv2ssim..ReadFieldMaybe
bool                 sv2ssim_ReadFieldMaybe(command::sv2ssim& parent, algo::strptr field, algo::strptr strval) __attribute__((nothrow));
// Read fields of command::sv2ssim from attributes of ascii tuple TUPLE
// func:command.sv2ssim..ReadTupleMaybe
bool                 sv2ssim_ReadTupleMaybe(command::sv2ssim &parent, algo::Tuple &tuple) __attribute__((nothrow));
// Set all fields to initial values.
// func:command.sv2ssim..Init
void                 sv2ssim_Init(command::sv2ssim& parent);
// Convenience function that returns a full command line
// Assume command is in a directory called bin
// func:command.sv2ssim..ToCmdline
tempstr              sv2ssim_ToCmdline(command::sv2ssim& row) __attribute__((nothrow));
// print string representation of ROW to string STR
// cfmt:command.sv2ssim.Argv  printfmt:Tuple
// func:command.sv2ssim..PrintArgv
void                 sv2ssim_PrintArgv(command::sv2ssim& row, algo::cstring& str) __attribute__((nothrow));
// func:command.sv2ssim..GetAnon
algo::strptr         sv2ssim_GetAnon(command::sv2ssim &parent, i32 idx) __attribute__((nothrow));
// Used with command lines
// Return # of command-line arguments that must follow this argument
// If FIELD is invalid, return -1
// func:command.sv2ssim..NArgs
i32                  sv2ssim_NArgs(command::FieldId field, algo::strptr& out_dflt, bool* out_anon) __attribute__((nothrow));

// --- command.sv2ssim_proc
struct sv2ssim_proc { // command.sv2ssim_proc: Subprocess: sv2ssim - Separated Value file processor
    algo::cstring      path;      //   "bin/sv2ssim"  path for executable
    command::sv2ssim   cmd;       // command line for child process
    algo::cstring      fstdin;    // redirect for stdin
    algo::cstring      fstdout;   // redirect for stdout
    algo::cstring      fstderr;   // redirect for stderr
    pid_t              pid;       //   0  pid of running child process
    i32                timeout;   //   0  optional timeout for child process
    i32                status;    //   0  last exit status of child process
    // func:command.sv2ssim_proc..Ctor
    inline               sv2ssim_proc() __attribute__((nothrow));
    // func:command.sv2ssim_proc..Dtor
    inline               ~sv2ssim_proc() __attribute__((nothrow));
};

// Start subprocess
// If subprocess already running, do nothing. Otherwise, start it
// func:command.sv2ssim_proc.sv2ssim.Start
int                  sv2ssim_Start(command::sv2ssim_proc& parent) __attribute__((nothrow));
// Start subprocess & Read output
// func:command.sv2ssim_proc.sv2ssim.StartRead
algo::Fildes         sv2ssim_StartRead(command::sv2ssim_proc& parent, algo_lib::FFildes &read) __attribute__((nothrow));
// Kill subprocess and wait
// func:command.sv2ssim_proc.sv2ssim.Kill
void                 sv2ssim_Kill(command::sv2ssim_proc& parent);
// Wait for subprocess to return
// func:command.sv2ssim_proc.sv2ssim.Wait
void                 sv2ssim_Wait(command::sv2ssim_proc& parent) __attribute__((nothrow));
// Start + Wait
// Execute subprocess and return exit code
// func:command.sv2ssim_proc.sv2ssim.Exec
int                  sv2ssim_Exec(command::sv2ssim_proc& parent) __attribute__((nothrow));
// Start + Wait, throw exception on error
// Execute subprocess; throw human-readable exception on error
// func:command.sv2ssim_proc.sv2ssim.ExecX
void                 sv2ssim_ExecX(command::sv2ssim_proc& parent);
// Call execv()
// Call execv with specified parameters
// func:command.sv2ssim_proc.sv2ssim.Execv
int                  sv2ssim_Execv(command::sv2ssim_proc& parent) __attribute__((nothrow));
// func:command.sv2ssim_proc.sv2ssim.ToCmdline
algo::tempstr        sv2ssim_ToCmdline(command::sv2ssim_proc& parent) __attribute__((nothrow));
// Form array from the command line
// func:command.sv2ssim_proc.sv2ssim.ToArgv
void                 sv2ssim_ToArgv(command::sv2ssim_proc& parent, algo::StringAry& args) __attribute__((nothrow));

// Set all fields to initial values.
// func:command.sv2ssim_proc..Init
inline void          sv2ssim_proc_Init(command::sv2ssim_proc& parent);
// func:command.sv2ssim_proc..Uninit
void                 sv2ssim_proc_Uninit(command::sv2ssim_proc& parent) __attribute__((nothrow));
} // gen:ns_print_struct
namespace command { // gen:ns_curstext

struct acr_where_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    acr_where_curs() { elems=NULL; n_elems=0; index=0; }
};


struct acr_field_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    acr_field_curs() { elems=NULL; n_elems=0; index=0; }
};


struct acr_dm_arg_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    acr_dm_arg_curs() { elems=NULL; n_elems=0; index=0; }
};


struct atf_cmdline_mstr_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    atf_cmdline_mstr_curs() { elems=NULL; n_elems=0; index=0; }
};


struct atf_cmdline_mnum_curs {// cursor
    typedef i32 ChildType;
    i32* elems;
    int n_elems;
    int index;
    atf_cmdline_mnum_curs() { elems=NULL; n_elems=0; index=0; }
};


struct atf_cmdline_mdbl_curs {// cursor
    typedef double ChildType;
    double* elems;
    int n_elems;
    int index;
    atf_cmdline_mdbl_curs() { elems=NULL; n_elems=0; index=0; }
};


struct atf_cmdline_amnum_curs {// cursor
    typedef i32 ChildType;
    i32* elems;
    int n_elems;
    int index;
    atf_cmdline_amnum_curs() { elems=NULL; n_elems=0; index=0; }
};


struct gcache_cmd_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    gcache_cmd_curs() { elems=NULL; n_elems=0; index=0; }
};


struct gcli_fields_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    gcli_fields_curs() { elems=NULL; n_elems=0; index=0; }
};


struct mdbg_args_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    mdbg_args_curs() { elems=NULL; n_elems=0; index=0; }
};


struct mdbg_b_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    mdbg_b_curs() { elems=NULL; n_elems=0; index=0; }
};


struct sandbox_cmd_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    sandbox_cmd_curs() { elems=NULL; n_elems=0; index=0; }
};


struct sandbox_files_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    sandbox_files_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ssimfilt_match_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    ssimfilt_match_curs() { elems=NULL; n_elems=0; index=0; }
};


struct ssimfilt_field_curs {// cursor
    typedef algo::cstring ChildType;
    algo::cstring* elems;
    int n_elems;
    int index;
    ssimfilt_field_curs() { elems=NULL; n_elems=0; index=0; }
};

} // gen:ns_curstext
namespace command { // gen:ns_func
// func:command...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const command::FieldId &row);// cfmt:command.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const command::acr_compl &row);// cfmt:command.acr_compl.String
inline algo::cstring &operator <<(algo::cstring &str, const command::gcache &row);// cfmt:command.gcache.String
}
