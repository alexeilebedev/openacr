//
// include/gen/lib_sqlite_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include <sqlite3.h>
#include "include/gen/algo_gen.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/lib_ctype_gen.h"
#include "include/gen/algo_lib_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- lib_sqlite_FieldIdEnum

enum lib_sqlite_FieldIdEnum {        // lib_sqlite.FieldId.value
     lib_sqlite_FieldId_value   = 0
};

enum { lib_sqlite_FieldIdEnum_N = 1 };


// --- lib_sqlite_TableIdEnum

enum lib_sqlite_TableIdEnum {                 // lib_sqlite.TableId.value
     lib_sqlite_TableId_dmmeta_Substr   = 0   // dmmeta.Substr -> lib_sqlite.FSubstr
    ,lib_sqlite_TableId_dmmeta_substr   = 0   // dmmeta.substr -> lib_sqlite.FSubstr
};

enum { lib_sqlite_TableIdEnum_N = 2 };

namespace lib_sqlite { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace lib_sqlite { // gen:ns_tclass_field
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace lib_sqlite { struct _db_substr_curs; }
namespace lib_sqlite { struct FConn; }
namespace lib_sqlite { struct trace; }
namespace lib_sqlite { struct FDb; }
namespace lib_sqlite { struct FSubstr; }
namespace lib_sqlite { struct FieldId; }
namespace lib_sqlite { struct TableId; }
namespace lib_sqlite { struct Vtab; }
namespace lib_sqlite { struct VtabCurs; }
namespace lib_sqlite { extern struct lib_sqlite::FDb _db; }
namespace lib_sqlite { // gen:ns_print_struct

// --- lib_sqlite.FConn
// create: lib_sqlite.FDb.conn (Tpool)
// global access: ind_conn (Thash)
struct FConn { // lib_sqlite.FConn
    algo::cstring        name;            //
    sqlite3*             db;              // optional pointer
    lib_sqlite::FConn*   conn_next;       // Pointer to next free element int tpool
    lib_sqlite::FConn*   ind_conn_next;   // hash next
private:
    friend lib_sqlite::FConn&   conn_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_sqlite::FConn*   conn_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 conn_Delete(lib_sqlite::FConn &row) __attribute__((nothrow));
    FConn();
    ~FConn();
    FConn(const FConn&){ /*disallow copy constructor */}
    void operator =(const FConn&){ /*disallow direct assignment */}
};

// Declaration for user-defined cleanup function
// User-defined cleanup function invoked for field db of lib_sqlite::FConn
// func:lib_sqlite.FConn.db.Cleanup
// this function is 'extrn' and implemented by user
void                 db_Cleanup(lib_sqlite::FConn& conn) __attribute__((nothrow));

// Set all fields to initial values.
// func:lib_sqlite.FConn..Init
void                 FConn_Init(lib_sqlite::FConn& conn);
// func:lib_sqlite.FConn..Uninit
void                 FConn_Uninit(lib_sqlite::FConn& conn) __attribute__((nothrow));

// --- lib_sqlite.trace
#pragma pack(push,1)
struct trace { // lib_sqlite.trace
    trace();
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:lib_sqlite.trace.String  printfmt:Tuple
// func:lib_sqlite.trace..Print
void                 trace_Print(lib_sqlite::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_sqlite.FDb
// create: lib_sqlite.FDb._db (Global)
struct FDb { // lib_sqlite.FDb
    u64                    conn_blocksize;           // # bytes per block
    lib_sqlite::FConn*     conn_free;                //
    lib_sqlite::FConn**    ind_conn_buckets_elems;   // pointer to bucket array
    i32                    ind_conn_buckets_n;       // number of elements in bucket array
    i32                    ind_conn_n;               // number of elements in the hash table
    lib_sqlite::FSubstr*   substr_lary[32];          // level array
    i32                    substr_n;                 // number of elements in array
    lib_sqlite::trace      trace;                    //
};

// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:lib_sqlite.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:lib_sqlite.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:lib_sqlite.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:lib_sqlite.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:lib_sqlite.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:lib_sqlite.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_sqlite.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:lib_sqlite.FDb.conn.Alloc
lib_sqlite::FConn&   conn_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:lib_sqlite.FDb.conn.AllocMaybe
lib_sqlite::FConn*   conn_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Remove row from all global and cross indices, then deallocate row
// func:lib_sqlite.FDb.conn.Delete
void                 conn_Delete(lib_sqlite::FConn &row) __attribute__((nothrow));
// Allocate space for one element
// If no memory available, return NULL.
// func:lib_sqlite.FDb.conn.AllocMem
void*                conn_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Remove mem from all global and cross indices, then deallocate mem
// func:lib_sqlite.FDb.conn.FreeMem
void                 conn_FreeMem(lib_sqlite::FConn &row) __attribute__((nothrow));
// Preallocate memory for N more elements
// Return number of elements actually reserved.
// func:lib_sqlite.FDb.conn.Reserve
u64                  conn_Reserve(u64 n_elems) __attribute__((nothrow));
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
// func:lib_sqlite.FDb.conn.ReserveMem
u64                  conn_ReserveMem(u64 size) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_sqlite.FDb.conn.XrefMaybe
bool                 conn_XrefMaybe(lib_sqlite::FConn &row);

// Return true if hash is empty
// func:lib_sqlite.FDb.ind_conn.EmptyQ
bool                 ind_conn_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:lib_sqlite.FDb.ind_conn.Find
lib_sqlite::FConn*   ind_conn_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:lib_sqlite.FDb.ind_conn.FindX
lib_sqlite::FConn&   ind_conn_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:lib_sqlite.FDb.ind_conn.GetOrCreate
lib_sqlite::FConn&   ind_conn_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:lib_sqlite.FDb.ind_conn.N
i32                  ind_conn_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:lib_sqlite.FDb.ind_conn.InsertMaybe
bool                 ind_conn_InsertMaybe(lib_sqlite::FConn& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:lib_sqlite.FDb.ind_conn.Remove
void                 ind_conn_Remove(lib_sqlite::FConn& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:lib_sqlite.FDb.ind_conn.Reserve
void                 ind_conn_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:lib_sqlite.FDb.substr.Alloc
lib_sqlite::FSubstr& substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:lib_sqlite.FDb.substr.AllocMaybe
lib_sqlite::FSubstr* substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:lib_sqlite.FDb.substr.InsertMaybe
lib_sqlite::FSubstr* substr_InsertMaybe(const dmmeta::Substr &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:lib_sqlite.FDb.substr.AllocMem
void*                substr_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:lib_sqlite.FDb.substr.EmptyQ
bool                 substr_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:lib_sqlite.FDb.substr.Find
lib_sqlite::FSubstr* substr_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:lib_sqlite.FDb.substr.Last
lib_sqlite::FSubstr* substr_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:lib_sqlite.FDb.substr.N
i32                  substr_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:lib_sqlite.FDb.substr.RemoveAll
void                 substr_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:lib_sqlite.FDb.substr.RemoveLast
void                 substr_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:lib_sqlite.FDb.substr.qFind
lib_sqlite::FSubstr& substr_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:lib_sqlite.FDb.substr.XrefMaybe
bool                 substr_XrefMaybe(lib_sqlite::FSubstr &row);

// cursor points to valid item
// func:lib_sqlite.FDb.substr_curs.Reset
void                 _db_substr_curs_Reset(_db_substr_curs &curs, lib_sqlite::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:lib_sqlite.FDb.substr_curs.ValidQ
bool                 _db_substr_curs_ValidQ(_db_substr_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:lib_sqlite.FDb.substr_curs.Next
void                 _db_substr_curs_Next(_db_substr_curs &curs) __attribute__((nothrow));
// item access
// func:lib_sqlite.FDb.substr_curs.Access
lib_sqlite::FSubstr& _db_substr_curs_Access(_db_substr_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:lib_sqlite.FDb..Init
void                 FDb_Init();
// func:lib_sqlite.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- lib_sqlite.FSubstr
// create: lib_sqlite.FDb.substr (Lary)
struct FSubstr { // lib_sqlite.FSubstr
    algo::Smallstr100   field;      //
    algo::CppExpr       expr;       //
    algo::Smallstr100   srcfield;   //
private:
    friend lib_sqlite::FSubstr& substr_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend lib_sqlite::FSubstr* substr_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 substr_RemoveAll() __attribute__((nothrow));
    friend void                 substr_RemoveLast() __attribute__((nothrow));
    FSubstr();
};

// Copy fields out of row
// func:lib_sqlite.FSubstr.base.CopyOut
void                 substr_CopyOut(lib_sqlite::FSubstr &row, dmmeta::Substr &out) __attribute__((nothrow));
// Copy fields in to row
// func:lib_sqlite.FSubstr.base.CopyIn
void                 substr_CopyIn(lib_sqlite::FSubstr &row, dmmeta::Substr &in) __attribute__((nothrow));


// --- lib_sqlite.FieldId
#pragma pack(push,1)
struct FieldId { // lib_sqlite.FieldId: Field read helper
    i32   value;   //   -1
    inline operator lib_sqlite_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(lib_sqlite_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
// func:lib_sqlite.FieldId.value.GetEnum
lib_sqlite_FieldIdEnum value_GetEnum(const lib_sqlite::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_sqlite.FieldId.value.SetEnum
void                 value_SetEnum(lib_sqlite::FieldId& parent, lib_sqlite_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_sqlite.FieldId.value.ToCstr
const char*          value_ToCstr(const lib_sqlite::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:lib_sqlite.FieldId.value.Print
void                 value_Print(const lib_sqlite::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_sqlite.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(lib_sqlite::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_sqlite.FieldId.value.SetStrptr
void                 value_SetStrptr(lib_sqlite::FieldId& parent, algo::strptr rhs, lib_sqlite_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:lib_sqlite.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(lib_sqlite::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_sqlite::FieldId from an ascii string.
// The format of the string is the format of the lib_sqlite::FieldId's only field
// func:lib_sqlite.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(lib_sqlite::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:lib_sqlite.FieldId..Init
void                 FieldId_Init(lib_sqlite::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:lib_sqlite.FieldId.String  printfmt:Raw
// func:lib_sqlite.FieldId..Print
void                 FieldId_Print(lib_sqlite::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_sqlite.TableId
struct TableId { // lib_sqlite.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator lib_sqlite_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(lib_sqlite_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
// func:lib_sqlite.TableId.value.GetEnum
lib_sqlite_TableIdEnum value_GetEnum(const lib_sqlite::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:lib_sqlite.TableId.value.SetEnum
void                 value_SetEnum(lib_sqlite::TableId& parent, lib_sqlite_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:lib_sqlite.TableId.value.ToCstr
const char*          value_ToCstr(const lib_sqlite::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:lib_sqlite.TableId.value.Print
void                 value_Print(const lib_sqlite::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:lib_sqlite.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(lib_sqlite::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:lib_sqlite.TableId.value.SetStrptr
void                 value_SetStrptr(lib_sqlite::TableId& parent, algo::strptr rhs, lib_sqlite_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:lib_sqlite.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(lib_sqlite::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of lib_sqlite::TableId from an ascii string.
// The format of the string is the format of the lib_sqlite::TableId's only field
// func:lib_sqlite.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(lib_sqlite::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:lib_sqlite.TableId..Init
void                 TableId_Init(lib_sqlite::TableId& parent);
// print string representation of ROW to string STR
// cfmt:lib_sqlite.TableId.String  printfmt:Raw
// func:lib_sqlite.TableId..Print
void                 TableId_Print(lib_sqlite::TableId& row, algo::cstring& str) __attribute__((nothrow));

// --- lib_sqlite.Vtab
struct Vtab { // lib_sqlite.Vtab: An instance of the virtual table
    sqlite3_vtab            base;         //
    algo::cstring           filename;     //
    lib_ctype::FSsimfile*   c_ssimfile;   // optional pointer
    lib_ctype::FCtype*      p_ctype;      // optional pointer
    Vtab();
};

// Set all fields to initial values.
// func:lib_sqlite.Vtab..Init
void                 Vtab_Init(lib_sqlite::Vtab& parent);

// --- lib_sqlite.VtabCurs
struct VtabCurs { // lib_sqlite.VtabCurs: A cursor for the virtual table
    sqlite3_vtab_cursor    base;   // Base class. Must be first
    algo_lib::InTextFile   file;   // current file
    algo::strptr           line;   // current line
    i32                    i;      //   0  current line number
    bool                   eof;    //   false
    algo::Tuple            row;    // Parsed row
    VtabCurs();
private:
    // value field lib_sqlite.VtabCurs.file is not copiable
    // value field lib_sqlite.VtabCurs.row is not copiable
    VtabCurs(const VtabCurs&){ /*disallow copy constructor */}
    void operator =(const VtabCurs&){ /*disallow direct assignment */}
};

// Set all fields to initial values.
// func:lib_sqlite.VtabCurs..Init
void                 VtabCurs_Init(lib_sqlite::VtabCurs& parent);
} // gen:ns_print_struct
namespace lib_sqlite { // gen:ns_curstext

struct _db_substr_curs {// cursor
    typedef lib_sqlite::FSubstr ChildType;
    lib_sqlite::FDb *parent;
    i64 index;
    _db_substr_curs(){ parent=NULL; index=0; }
};

} // gen:ns_curstext
namespace lib_sqlite { // gen:ns_func
// func:lib_sqlite...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const lib_sqlite::trace &row);// cfmt:lib_sqlite.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_sqlite::FieldId &row);// cfmt:lib_sqlite.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const lib_sqlite::TableId &row);// cfmt:lib_sqlite.TableId.String
}
