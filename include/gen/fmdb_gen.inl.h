//
// include/gen/fmdb_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
#include "include/gen/fm_gen.inl.h"
//#pragma endinclude

// --- fmdb.Alarm..Ctor
inline  fmdb::Alarm::Alarm() throw() {
    fmdb::Alarm_Init(*this);
}

// --- fmdb.AlmCode..Ctor
inline  fmdb::AlmCode::AlmCode() throw() {
}

// --- fmdb.AlmObjtype..Ctor
inline  fmdb::AlmObjtype::AlmObjtype() throw() {
}

// --- fmdb.AlmSource..Ctor
inline  fmdb::AlmSource::AlmSource() throw() {
}

// --- fmdb.FieldId.value.GetEnum
// Get value of field as enum type
inline fmdb_FieldIdEnum fmdb::value_GetEnum(const fmdb::FieldId& parent) throw() {
    return fmdb_FieldIdEnum(parent.value);
}

// --- fmdb.FieldId.value.SetEnum
// Set value of field from enum type.
inline void fmdb::value_SetEnum(fmdb::FieldId& parent, fmdb_FieldIdEnum rhs) throw() {
    parent.value = i32(rhs);
}

// --- fmdb.FieldId.value.Cast
inline  fmdb::FieldId::operator fmdb_FieldIdEnum() const throw() {
    return fmdb_FieldIdEnum((*this).value);
}

// --- fmdb.FieldId..Init
// Set all fields to initial values.
inline void fmdb::FieldId_Init(fmdb::FieldId& parent) {
    parent.value = i32(-1);
}

// --- fmdb.FieldId..Ctor
inline  fmdb::FieldId::FieldId() throw() {
    fmdb::FieldId_Init(*this);
}

// --- fmdb.FieldId..FieldwiseCtor
inline  fmdb::FieldId::FieldId(i32 in_value) throw()
    : value(in_value)
 {
}

// --- fmdb.FieldId..EnumCtor
inline  fmdb::FieldId::FieldId(fmdb_FieldIdEnum arg) throw() {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fmdb::Alarm &row) {// cfmt:fmdb.Alarm.String
    fmdb::Alarm_Print(const_cast<fmdb::Alarm&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fmdb::AlmCode &row) {// cfmt:fmdb.AlmCode.String
    fmdb::AlmCode_Print(const_cast<fmdb::AlmCode&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fmdb::AlmObjtype &row) {// cfmt:fmdb.AlmObjtype.String
    fmdb::AlmObjtype_Print(const_cast<fmdb::AlmObjtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fmdb::AlmSource &row) {// cfmt:fmdb.AlmSource.String
    fmdb::AlmSource_Print(const_cast<fmdb::AlmSource&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const fmdb::FieldId &row) {// cfmt:fmdb.FieldId.String
    fmdb::FieldId_Print(const_cast<fmdb::FieldId&>(row), str);
    return str;
}
