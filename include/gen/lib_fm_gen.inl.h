//
// include/gen/lib_fm_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/fmdb_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/fm_gen.inl.h"
//#pragma endinclude
inline lib_fm::FAlarm::FAlarm() {
    lib_fm::FAlarm_Init(*this);
}

inline lib_fm::FAlarm::~FAlarm() {
    lib_fm::FAlarm_Uninit(*this);
}

inline lib_fm::FAlmCode::FAlmCode() {
    lib_fm::FAlmCode_Init(*this);
}

inline lib_fm::FAlmCode::~FAlmCode() {
    lib_fm::FAlmCode_Uninit(*this);
}


// --- lib_fm.FAlmCode..Init
// Set all fields to initial values.
inline void lib_fm::FAlmCode_Init(lib_fm::FAlmCode& alm_code) {
    alm_code.ind_alm_code_next = (lib_fm::FAlmCode*)-1; // (lib_fm.FDb.ind_alm_code) not-in-hash
}
inline lib_fm::FAlmObjtype::FAlmObjtype() {
    lib_fm::FAlmObjtype_Init(*this);
}

inline lib_fm::FAlmObjtype::~FAlmObjtype() {
    lib_fm::FAlmObjtype_Uninit(*this);
}


// --- lib_fm.FAlmObjtype..Init
// Set all fields to initial values.
inline void lib_fm::FAlmObjtype_Init(lib_fm::FAlmObjtype& alm_objtype) {
    alm_objtype.ind_alm_objtype_next = (lib_fm::FAlmObjtype*)-1; // (lib_fm.FDb.ind_alm_objtype) not-in-hash
}
inline lib_fm::trace::trace() {
}


// --- lib_fm.FDb.alarm.EmptyQ
// Return true if index is empty
inline bool lib_fm::alarm_EmptyQ() {
    return _db.alarm_n == 0;
}

// --- lib_fm.FDb.alarm.Find
// Look up row by row id. Return NULL if out of range
inline lib_fm::FAlarm* lib_fm::alarm_Find(u64 t) {
    lib_fm::FAlarm *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.alarm_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.alarm_lary[bsr][index];
    }
    return retval;
}

// --- lib_fm.FDb.alarm.Last
// Return pointer to last element of array, or NULL if array is empty
inline lib_fm::FAlarm* lib_fm::alarm_Last() {
    return alarm_Find(u64(_db.alarm_n-1));
}

// --- lib_fm.FDb.alarm.N
// Return number of items in the pool
inline i32 lib_fm::alarm_N() {
    return _db.alarm_n;
}

// --- lib_fm.FDb.alarm.qFind
// 'quick' Access row by row id. No bounds checking.
inline lib_fm::FAlarm& lib_fm::alarm_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.alarm_lary[bsr][index];
}

// --- lib_fm.FDb.ind_alarm.EmptyQ
// Return true if hash is empty
inline bool lib_fm::ind_alarm_EmptyQ() {
    return _db.ind_alarm_n == 0;
}

// --- lib_fm.FDb.ind_alarm.N
// Return number of items in the hash
inline i32 lib_fm::ind_alarm_N() {
    return _db.ind_alarm_n;
}

// --- lib_fm.FDb.alm_code.EmptyQ
// Return true if index is empty
inline bool lib_fm::alm_code_EmptyQ() {
    return _db.alm_code_n == 0;
}

// --- lib_fm.FDb.alm_code.Find
// Look up row by row id. Return NULL if out of range
inline lib_fm::FAlmCode* lib_fm::alm_code_Find(u64 t) {
    lib_fm::FAlmCode *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.alm_code_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.alm_code_lary[bsr][index];
    }
    return retval;
}

// --- lib_fm.FDb.alm_code.Last
// Return pointer to last element of array, or NULL if array is empty
inline lib_fm::FAlmCode* lib_fm::alm_code_Last() {
    return alm_code_Find(u64(_db.alm_code_n-1));
}

// --- lib_fm.FDb.alm_code.N
// Return number of items in the pool
inline i32 lib_fm::alm_code_N() {
    return _db.alm_code_n;
}

// --- lib_fm.FDb.alm_code.qFind
// 'quick' Access row by row id. No bounds checking.
inline lib_fm::FAlmCode& lib_fm::alm_code_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.alm_code_lary[bsr][index];
}

// --- lib_fm.FDb.ind_alm_code.EmptyQ
// Return true if hash is empty
inline bool lib_fm::ind_alm_code_EmptyQ() {
    return _db.ind_alm_code_n == 0;
}

// --- lib_fm.FDb.ind_alm_code.N
// Return number of items in the hash
inline i32 lib_fm::ind_alm_code_N() {
    return _db.ind_alm_code_n;
}

// --- lib_fm.FDb.alm_objtype.EmptyQ
// Return true if index is empty
inline bool lib_fm::alm_objtype_EmptyQ() {
    return _db.alm_objtype_n == 0;
}

// --- lib_fm.FDb.alm_objtype.Find
// Look up row by row id. Return NULL if out of range
inline lib_fm::FAlmObjtype* lib_fm::alm_objtype_Find(u64 t) {
    lib_fm::FAlmObjtype *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.alm_objtype_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.alm_objtype_lary[bsr][index];
    }
    return retval;
}

// --- lib_fm.FDb.alm_objtype.Last
// Return pointer to last element of array, or NULL if array is empty
inline lib_fm::FAlmObjtype* lib_fm::alm_objtype_Last() {
    return alm_objtype_Find(u64(_db.alm_objtype_n-1));
}

// --- lib_fm.FDb.alm_objtype.N
// Return number of items in the pool
inline i32 lib_fm::alm_objtype_N() {
    return _db.alm_objtype_n;
}

// --- lib_fm.FDb.alm_objtype.qFind
// 'quick' Access row by row id. No bounds checking.
inline lib_fm::FAlmObjtype& lib_fm::alm_objtype_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.alm_objtype_lary[bsr][index];
}

// --- lib_fm.FDb.ind_alm_objtype.EmptyQ
// Return true if hash is empty
inline bool lib_fm::ind_alm_objtype_EmptyQ() {
    return _db.ind_alm_objtype_n == 0;
}

// --- lib_fm.FDb.ind_alm_objtype.N
// Return number of items in the hash
inline i32 lib_fm::ind_alm_objtype_N() {
    return _db.ind_alm_objtype_n;
}

// --- lib_fm.FDb.h_alarm.Call
// Invoke function by pointer
inline void lib_fm::h_alarm_Call(lib_fm::FAlarm& arg) {
    if (_db.h_alarm) {
        _db.h_alarm((void*)_db.h_alarm_ctx, arg);
    }
}

// --- lib_fm.FDb.h_alarm.Set0
// Assign 0-argument hook with no context pointer
inline void lib_fm::h_alarm_Set0(void (*fcn)() ) {
    _db.h_alarm_ctx = 0;
    _db.h_alarm = (lib_fm::_db_h_alarm_hook)fcn;
}

// --- lib_fm.FDb.h_alarm.Set1
// Assign 1-argument hook with context pointer
template<class T> inline void lib_fm::h_alarm_Set1(T& ctx, void (*fcn)(T&) ) {
    _db.h_alarm_ctx = (u64)&ctx;
    _db.h_alarm = (lib_fm::_db_h_alarm_hook)fcn;
}

// --- lib_fm.FDb.h_alarm.Set2
// Assign 2-argument hook with context pointer
template<class T> inline void lib_fm::h_alarm_Set2(T& ctx, void (*fcn)(T&, lib_fm::FAlarm& arg) ) {
    _db.h_alarm_ctx = (u64)&ctx;
    _db.h_alarm = (lib_fm::_db_h_alarm_hook)fcn;
}

// --- lib_fm.FDb.alarm_curs.Reset
// cursor points to valid item
inline void lib_fm::_db_alarm_curs_Reset(_db_alarm_curs &curs, lib_fm::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- lib_fm.FDb.alarm_curs.ValidQ
// cursor points to valid item
inline bool lib_fm::_db_alarm_curs_ValidQ(_db_alarm_curs &curs) {
    return curs.index < _db.alarm_n;
}

// --- lib_fm.FDb.alarm_curs.Next
// proceed to next item
inline void lib_fm::_db_alarm_curs_Next(_db_alarm_curs &curs) {
    curs.index++;
}

// --- lib_fm.FDb.alarm_curs.Access
// item access
inline lib_fm::FAlarm& lib_fm::_db_alarm_curs_Access(_db_alarm_curs &curs) {
    return alarm_qFind(u64(curs.index));
}

// --- lib_fm.FDb.alm_code_curs.Reset
// cursor points to valid item
inline void lib_fm::_db_alm_code_curs_Reset(_db_alm_code_curs &curs, lib_fm::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- lib_fm.FDb.alm_code_curs.ValidQ
// cursor points to valid item
inline bool lib_fm::_db_alm_code_curs_ValidQ(_db_alm_code_curs &curs) {
    return curs.index < _db.alm_code_n;
}

// --- lib_fm.FDb.alm_code_curs.Next
// proceed to next item
inline void lib_fm::_db_alm_code_curs_Next(_db_alm_code_curs &curs) {
    curs.index++;
}

// --- lib_fm.FDb.alm_code_curs.Access
// item access
inline lib_fm::FAlmCode& lib_fm::_db_alm_code_curs_Access(_db_alm_code_curs &curs) {
    return alm_code_qFind(u64(curs.index));
}

// --- lib_fm.FDb.alm_objtype_curs.Reset
// cursor points to valid item
inline void lib_fm::_db_alm_objtype_curs_Reset(_db_alm_objtype_curs &curs, lib_fm::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- lib_fm.FDb.alm_objtype_curs.ValidQ
// cursor points to valid item
inline bool lib_fm::_db_alm_objtype_curs_ValidQ(_db_alm_objtype_curs &curs) {
    return curs.index < _db.alm_objtype_n;
}

// --- lib_fm.FDb.alm_objtype_curs.Next
// proceed to next item
inline void lib_fm::_db_alm_objtype_curs_Next(_db_alm_objtype_curs &curs) {
    curs.index++;
}

// --- lib_fm.FDb.alm_objtype_curs.Access
// item access
inline lib_fm::FAlmObjtype& lib_fm::_db_alm_objtype_curs_Access(_db_alm_objtype_curs &curs) {
    return alm_objtype_qFind(u64(curs.index));
}
inline lib_fm::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline lib_fm::FieldId::FieldId(lib_fm_FieldIdEnum arg) { this->value = i32(arg); }
inline lib_fm::FieldId::FieldId() {
    lib_fm::FieldId_Init(*this);
}


// --- lib_fm.FieldId.value.GetEnum
// Get value of field as enum type
inline lib_fm_FieldIdEnum lib_fm::value_GetEnum(const lib_fm::FieldId& parent) {
    return lib_fm_FieldIdEnum(parent.value);
}

// --- lib_fm.FieldId.value.SetEnum
// Set value of field from enum type.
inline void lib_fm::value_SetEnum(lib_fm::FieldId& parent, lib_fm_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- lib_fm.FieldId.value.Cast
inline lib_fm::FieldId::operator lib_fm_FieldIdEnum () const {
    return lib_fm_FieldIdEnum((*this).value);
}

// --- lib_fm.FieldId..Init
// Set all fields to initial values.
inline void lib_fm::FieldId_Init(lib_fm::FieldId& parent) {
    parent.value = i32(-1);
}
inline lib_fm::TableId::TableId(i32                            in_value)
    : value(in_value)
{
}
inline lib_fm::TableId::TableId(lib_fm_TableIdEnum arg) { this->value = i32(arg); }
inline lib_fm::TableId::TableId() {
    lib_fm::TableId_Init(*this);
}


// --- lib_fm.TableId.value.GetEnum
// Get value of field as enum type
inline lib_fm_TableIdEnum lib_fm::value_GetEnum(const lib_fm::TableId& parent) {
    return lib_fm_TableIdEnum(parent.value);
}

// --- lib_fm.TableId.value.SetEnum
// Set value of field from enum type.
inline void lib_fm::value_SetEnum(lib_fm::TableId& parent, lib_fm_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- lib_fm.TableId.value.Cast
inline lib_fm::TableId::operator lib_fm_TableIdEnum () const {
    return lib_fm_TableIdEnum((*this).value);
}

// --- lib_fm.TableId..Init
// Set all fields to initial values.
inline void lib_fm::TableId_Init(lib_fm::TableId& parent) {
    parent.value = i32(-1);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_fm::trace &row) {// cfmt:lib_fm.trace.String
    lib_fm::trace_Print(const_cast<lib_fm::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_fm::FieldId &row) {// cfmt:lib_fm.FieldId.String
    lib_fm::FieldId_Print(const_cast<lib_fm::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const lib_fm::TableId &row) {// cfmt:lib_fm.TableId.String
    lib_fm::TableId_Print(const_cast<lib_fm::TableId&>(row), str);
    return str;
}
