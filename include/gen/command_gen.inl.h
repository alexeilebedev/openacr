//
// include/gen/command_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline command::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline command::FieldId::FieldId(command_FieldIdEnum arg) { this->value = i32(arg); }
inline command::FieldId::FieldId() {
    command::FieldId_Init(*this);
}


// --- command.FieldId.value.GetEnum
// Get value of field as enum type
inline command_FieldIdEnum command::value_GetEnum(const command::FieldId& parent) {
    return command_FieldIdEnum(parent.value);
}

// --- command.FieldId.value.SetEnum
// Set value of field from enum type.
inline void command::value_SetEnum(command::FieldId& parent, command_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- command.FieldId.value.Cast
inline command::FieldId::operator command_FieldIdEnum () const {
    return command_FieldIdEnum((*this).value);
}

// --- command.FieldId..Init
// Set all fields to initial values.
inline void command::FieldId_Init(command::FieldId& parent) {
    parent.value = i32(-1);
}
inline command::Protocol::Protocol() {
}

inline command::abt::abt() {
    command::abt_Init(*this);
}

inline command::abt_proc::abt_proc() {
    command::abt_proc_Init(*this);
}

inline command::abt_proc::~abt_proc() {
    command::abt_proc_Uninit(*this);
}


// --- command.abt_proc..Init
// Set all fields to initial values.
inline void command::abt_proc_Init(command::abt_proc& parent) {
    parent.path = algo::strptr("bin/abt");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::acr::acr() {
    command::acr_Init(*this);
}

inline command::acr_compl::acr_compl() {
    command::acr_compl_Init(*this);
}


// --- command.acr_compl..Init
// Set all fields to initial values.
inline void command::acr_compl_Init(command::acr_compl& parent) {
    parent.line = algo::strptr("");
    parent.point = algo::strptr("");
    parent.type = algo::strptr("9");
    parent.install = bool(false);
    parent.debug_log = algo::strptr("");
}
inline command::acr_compl_proc::acr_compl_proc() {
    command::acr_compl_proc_Init(*this);
}

inline command::acr_compl_proc::~acr_compl_proc() {
    command::acr_compl_proc_Uninit(*this);
}


// --- command.acr_compl_proc..Init
// Set all fields to initial values.
inline void command::acr_compl_proc_Init(command::acr_compl_proc& parent) {
    parent.path = algo::strptr("bin/acr_compl");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::acr_ed::acr_ed() {
    command::acr_ed_Init(*this);
}

inline command::acr_ed_proc::acr_ed_proc() {
    command::acr_ed_proc_Init(*this);
}

inline command::acr_ed_proc::~acr_ed_proc() {
    command::acr_ed_proc_Uninit(*this);
}


// --- command.acr_ed_proc..Init
// Set all fields to initial values.
inline void command::acr_ed_proc_Init(command::acr_ed_proc& parent) {
    parent.path = algo::strptr("bin/acr_ed");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::acr_in::acr_in() {
    command::acr_in_Init(*this);
}

inline command::acr_in_proc::acr_in_proc() {
    command::acr_in_proc_Init(*this);
}

inline command::acr_in_proc::~acr_in_proc() {
    command::acr_in_proc_Uninit(*this);
}


// --- command.acr_in_proc..Init
// Set all fields to initial values.
inline void command::acr_in_proc_Init(command::acr_in_proc& parent) {
    parent.path = algo::strptr("bin/acr_in");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::acr_my::acr_my() {
    command::acr_my_Init(*this);
}

inline command::acr_my_proc::acr_my_proc() {
    command::acr_my_proc_Init(*this);
}

inline command::acr_my_proc::~acr_my_proc() {
    command::acr_my_proc_Uninit(*this);
}


// --- command.acr_my_proc..Init
// Set all fields to initial values.
inline void command::acr_my_proc_Init(command::acr_my_proc& parent) {
    parent.path = algo::strptr("bin/acr_my");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::acr_proc::acr_proc() {
    command::acr_proc_Init(*this);
}

inline command::acr_proc::~acr_proc() {
    command::acr_proc_Uninit(*this);
}


// --- command.acr_proc..Init
// Set all fields to initial values.
inline void command::acr_proc_Init(command::acr_proc& parent) {
    parent.path = algo::strptr("bin/acr");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::amc::amc() {
    command::amc_Init(*this);
}

inline command::amc_dml::amc_dml() {
    command::amc_dml_Init(*this);
}

inline command::amc_gc::amc_gc() {
    command::amc_gc_Init(*this);
}

inline command::amc_gc_proc::amc_gc_proc() {
    command::amc_gc_proc_Init(*this);
}

inline command::amc_gc_proc::~amc_gc_proc() {
    command::amc_gc_proc_Uninit(*this);
}


// --- command.amc_gc_proc..Init
// Set all fields to initial values.
inline void command::amc_gc_proc_Init(command::amc_gc_proc& parent) {
    parent.path = algo::strptr("bin/amc_gc");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::amc_proc::amc_proc() {
    command::amc_proc_Init(*this);
}

inline command::amc_proc::~amc_proc() {
    command::amc_proc_Uninit(*this);
}


// --- command.amc_proc..Init
// Set all fields to initial values.
inline void command::amc_proc_Init(command::amc_proc& parent) {
    parent.path = algo::strptr("bin/amc");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::amc_vis::amc_vis() {
    command::amc_vis_Init(*this);
}

inline command::amc_vis_proc::amc_vis_proc() {
    command::amc_vis_proc_Init(*this);
}

inline command::amc_vis_proc::~amc_vis_proc() {
    command::amc_vis_proc_Uninit(*this);
}


// --- command.amc_vis_proc..Init
// Set all fields to initial values.
inline void command::amc_vis_proc_Init(command::amc_vis_proc& parent) {
    parent.path = algo::strptr("bin/amc_vis");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::ams_cat::ams_cat() {
    command::ams_cat_Init(*this);
}


// --- command.ams_cat..Init
// Set all fields to initial values.
inline void command::ams_cat_Init(command::ams_cat& parent) {
    parent.in = algo::strptr("data");
}
inline command::ams_cat_proc::ams_cat_proc() {
    command::ams_cat_proc_Init(*this);
}

inline command::ams_cat_proc::~ams_cat_proc() {
    command::ams_cat_proc_Uninit(*this);
}


// --- command.ams_cat_proc..Init
// Set all fields to initial values.
inline void command::ams_cat_proc_Init(command::ams_cat_proc& parent) {
    parent.path = algo::strptr("bin/ams_cat");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::ams_sendtest::ams_sendtest() {
    command::ams_sendtest_Init(*this);
}

inline command::ams_sendtest_proc::ams_sendtest_proc() {
    command::ams_sendtest_proc_Init(*this);
}

inline command::ams_sendtest_proc::~ams_sendtest_proc() {
    command::ams_sendtest_proc_Uninit(*this);
}


// --- command.ams_sendtest_proc..Init
// Set all fields to initial values.
inline void command::ams_sendtest_proc_Init(command::ams_sendtest_proc& parent) {
    parent.path = algo::strptr("bin/ams_sendtest");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_amc::atf_amc() {
    command::atf_amc_Init(*this);
}

inline command::atf_amc_proc::atf_amc_proc() {
    command::atf_amc_proc_Init(*this);
}

inline command::atf_amc_proc::~atf_amc_proc() {
    command::atf_amc_proc_Uninit(*this);
}


// --- command.atf_amc_proc..Init
// Set all fields to initial values.
inline void command::atf_amc_proc_Init(command::atf_amc_proc& parent) {
    parent.path = algo::strptr("bin/atf_amc");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_ci::atf_ci() {
    command::atf_ci_Init(*this);
}

inline command::atf_ci_proc::atf_ci_proc() {
    command::atf_ci_proc_Init(*this);
}

inline command::atf_ci_proc::~atf_ci_proc() {
    command::atf_ci_proc_Uninit(*this);
}


// --- command.atf_ci_proc..Init
// Set all fields to initial values.
inline void command::atf_ci_proc_Init(command::atf_ci_proc& parent) {
    parent.path = algo::strptr("bin/atf_ci");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_comp::atf_comp() {
    command::atf_comp_Init(*this);
}

inline command::atf_comp_proc::atf_comp_proc() {
    command::atf_comp_proc_Init(*this);
}

inline command::atf_comp_proc::~atf_comp_proc() {
    command::atf_comp_proc_Uninit(*this);
}


// --- command.atf_comp_proc..Init
// Set all fields to initial values.
inline void command::atf_comp_proc_Init(command::atf_comp_proc& parent) {
    parent.path = algo::strptr("bin/atf_comp");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_cov::atf_cov() {
    command::atf_cov_Init(*this);
}

inline command::atf_cov_proc::atf_cov_proc() {
    command::atf_cov_proc_Init(*this);
}

inline command::atf_cov_proc::~atf_cov_proc() {
    command::atf_cov_proc_Uninit(*this);
}


// --- command.atf_cov_proc..Init
// Set all fields to initial values.
inline void command::atf_cov_proc_Init(command::atf_cov_proc& parent) {
    parent.path = algo::strptr("bin/atf_cov");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_fuzz::atf_fuzz() {
    command::atf_fuzz_Init(*this);
}

inline command::atf_fuzz_proc::atf_fuzz_proc() {
    command::atf_fuzz_proc_Init(*this);
}

inline command::atf_fuzz_proc::~atf_fuzz_proc() {
    command::atf_fuzz_proc_Uninit(*this);
}


// --- command.atf_fuzz_proc..Init
// Set all fields to initial values.
inline void command::atf_fuzz_proc_Init(command::atf_fuzz_proc& parent) {
    parent.path = algo::strptr("bin/atf_fuzz");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_nrun::atf_nrun() {
    command::atf_nrun_Init(*this);
}


// --- command.atf_nrun..Init
// Set all fields to initial values.
inline void command::atf_nrun_Init(command::atf_nrun& parent) {
    parent.in = algo::strptr("data");
    parent.maxjobs = i32(2);
    parent.ncmd = i32(6);
}
inline command::atf_nrun_proc::atf_nrun_proc() {
    command::atf_nrun_proc_Init(*this);
}

inline command::atf_nrun_proc::~atf_nrun_proc() {
    command::atf_nrun_proc_Uninit(*this);
}


// --- command.atf_nrun_proc..Init
// Set all fields to initial values.
inline void command::atf_nrun_proc_Init(command::atf_nrun_proc& parent) {
    parent.path = algo::strptr("bin/atf_nrun");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::atf_unit::atf_unit() {
    command::atf_unit_Init(*this);
}

inline command::atf_unit_proc::atf_unit_proc() {
    command::atf_unit_proc_Init(*this);
}

inline command::atf_unit_proc::~atf_unit_proc() {
    command::atf_unit_proc_Uninit(*this);
}


// --- command.atf_unit_proc..Init
// Set all fields to initial values.
inline void command::atf_unit_proc_Init(command::atf_unit_proc& parent) {
    parent.path = algo::strptr("bin/atf_unit");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::bash::bash() {
    command::bash_Init(*this);
}


// --- command.bash..Init
// Set all fields to initial values.
inline void command::bash_Init(command::bash& parent) {
    parent.c = algo::strptr("");
}
inline command::bash2html::bash2html() {
    command::bash2html_Init(*this);
}


// --- command.bash2html..Init
// Set all fields to initial values.
inline void command::bash2html_Init(command::bash2html& parent) {
    parent.in = algo::strptr("data");
    parent.test = bool(false);
}
inline command::bash2html_proc::bash2html_proc() {
    command::bash2html_proc_Init(*this);
}

inline command::bash2html_proc::~bash2html_proc() {
    command::bash2html_proc_Uninit(*this);
}


// --- command.bash2html_proc..Init
// Set all fields to initial values.
inline void command::bash2html_proc_Init(command::bash2html_proc& parent) {
    parent.path = algo::strptr("bin/bash2html");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::bash_proc::bash_proc() {
    command::bash_proc_Init(*this);
}

inline command::bash_proc::~bash_proc() {
    command::bash_proc_Uninit(*this);
}


// --- command.bash_proc..Init
// Set all fields to initial values.
inline void command::bash_proc_Init(command::bash_proc& parent) {
    parent.path = algo::strptr("bash");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::gitlab::gitlab() {
    command::gitlab_Init(*this);
}

inline command::gitlab_proc::gitlab_proc() {
    command::gitlab_proc_Init(*this);
}

inline command::gitlab_proc::~gitlab_proc() {
    command::gitlab_proc_Uninit(*this);
}


// --- command.gitlab_proc..Init
// Set all fields to initial values.
inline void command::gitlab_proc_Init(command::gitlab_proc& parent) {
    parent.path = algo::strptr("bin/gitlab");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::lib_ctype::lib_ctype() {
    command::lib_ctype_Init(*this);
}


// --- command.lib_ctype..Init
// Set all fields to initial values.
inline void command::lib_ctype_Init(command::lib_ctype& parent) {
    parent.in = algo::strptr("data");
}
inline command::lib_exec::lib_exec() {
    command::lib_exec_Init(*this);
}


// --- command.lib_exec..Init
// Set all fields to initial values.
inline void command::lib_exec_Init(command::lib_exec& parent) {
    parent.dry_run = bool(false);
    parent.q = bool(true);
    parent.maxjobs = i32(8);
    parent.complooo = bool(false);
}
inline command::mdbg::mdbg() {
    command::mdbg_Init(*this);
}

inline command::mdbg_proc::mdbg_proc() {
    command::mdbg_proc_Init(*this);
}

inline command::mdbg_proc::~mdbg_proc() {
    command::mdbg_proc_Uninit(*this);
}


// --- command.mdbg_proc..Init
// Set all fields to initial values.
inline void command::mdbg_proc_Init(command::mdbg_proc& parent) {
    parent.path = algo::strptr("bin/mdbg");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::mysql2ssim::mysql2ssim() {
    command::mysql2ssim_Init(*this);
}


// --- command.mysql2ssim..Init
// Set all fields to initial values.
inline void command::mysql2ssim_Init(command::mysql2ssim& parent) {
    parent.writessimfile = bool(false);
    parent.tables = algo::strptr("");
    parent.schema = bool(false);
    parent.in = algo::strptr("data");
    parent.pretty = bool(false);
    parent.nologo = bool(false);
    parent.baddbok = bool(false);
}
inline command::mysql2ssim_proc::mysql2ssim_proc() {
    command::mysql2ssim_proc_Init(*this);
}

inline command::mysql2ssim_proc::~mysql2ssim_proc() {
    command::mysql2ssim_proc_Uninit(*this);
}


// --- command.mysql2ssim_proc..Init
// Set all fields to initial values.
inline void command::mysql2ssim_proc_Init(command::mysql2ssim_proc& parent) {
    parent.path = algo::strptr("bin/mysql2ssim");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::ntup::ntup() {
    command::ntup_Init(*this);
}

inline command::ntup_proc::ntup_proc() {
    command::ntup_proc_Init(*this);
}

inline command::ntup_proc::~ntup_proc() {
    command::ntup_proc_Uninit(*this);
}


// --- command.ntup_proc..Init
// Set all fields to initial values.
inline void command::ntup_proc_Init(command::ntup_proc& parent) {
    parent.path = algo::strptr("bin/ntup");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::orgfile::orgfile() {
    command::orgfile_Init(*this);
}

inline command::orgfile_proc::orgfile_proc() {
    command::orgfile_proc_Init(*this);
}

inline command::orgfile_proc::~orgfile_proc() {
    command::orgfile_proc_Uninit(*this);
}


// --- command.orgfile_proc..Init
// Set all fields to initial values.
inline void command::orgfile_proc_Init(command::orgfile_proc& parent) {
    parent.path = algo::strptr("bin/orgfile");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::src_func::src_func() {
    command::src_func_Init(*this);
}

inline command::src_func_proc::src_func_proc() {
    command::src_func_proc_Init(*this);
}

inline command::src_func_proc::~src_func_proc() {
    command::src_func_proc_Uninit(*this);
}


// --- command.src_func_proc..Init
// Set all fields to initial values.
inline void command::src_func_proc_Init(command::src_func_proc& parent) {
    parent.path = algo::strptr("bin/src_func");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::src_hdr::src_hdr() {
    command::src_hdr_Init(*this);
}

inline command::src_hdr_proc::src_hdr_proc() {
    command::src_hdr_proc_Init(*this);
}

inline command::src_hdr_proc::~src_hdr_proc() {
    command::src_hdr_proc_Uninit(*this);
}


// --- command.src_hdr_proc..Init
// Set all fields to initial values.
inline void command::src_hdr_proc_Init(command::src_hdr_proc& parent) {
    parent.path = algo::strptr("bin/src_hdr");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::src_lim::src_lim() {
    command::src_lim_Init(*this);
}

inline command::src_lim_proc::src_lim_proc() {
    command::src_lim_proc_Init(*this);
}

inline command::src_lim_proc::~src_lim_proc() {
    command::src_lim_proc_Uninit(*this);
}


// --- command.src_lim_proc..Init
// Set all fields to initial values.
inline void command::src_lim_proc_Init(command::src_lim_proc& parent) {
    parent.path = algo::strptr("bin/src_lim");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::ssim2csv::ssim2csv() {
    command::ssim2csv_Init(*this);
}


// --- command.ssim2csv..Init
// Set all fields to initial values.
inline void command::ssim2csv_Init(command::ssim2csv& parent) {
    parent.expand = algo::strptr("");
    parent.ignoreQuote = bool(false);
}
inline command::ssim2csv_proc::ssim2csv_proc() {
    command::ssim2csv_proc_Init(*this);
}

inline command::ssim2csv_proc::~ssim2csv_proc() {
    command::ssim2csv_proc_Uninit(*this);
}


// --- command.ssim2csv_proc..Init
// Set all fields to initial values.
inline void command::ssim2csv_proc_Init(command::ssim2csv_proc& parent) {
    parent.path = algo::strptr("bin/ssim2csv");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::ssim2mysql::ssim2mysql() {
    command::ssim2mysql_Init(*this);
}

inline command::ssim2mysql_proc::ssim2mysql_proc() {
    command::ssim2mysql_proc_Init(*this);
}

inline command::ssim2mysql_proc::~ssim2mysql_proc() {
    command::ssim2mysql_proc_Uninit(*this);
}


// --- command.ssim2mysql_proc..Init
// Set all fields to initial values.
inline void command::ssim2mysql_proc_Init(command::ssim2mysql_proc& parent) {
    parent.path = algo::strptr("bin/ssim2mysql");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::strconv::strconv() {
    command::strconv_Init(*this);
}


// --- command.strconv..Init
// Set all fields to initial values.
inline void command::strconv_Init(command::strconv& parent) {
    parent.tocamelcase = bool(false);
    parent.tolowerunder = bool(false);
    parent.in = algo::strptr("data");
    parent.pathcomp = algo::strptr("");
}
inline command::strconv_proc::strconv_proc() {
    command::strconv_proc_Init(*this);
}

inline command::strconv_proc::~strconv_proc() {
    command::strconv_proc_Uninit(*this);
}


// --- command.strconv_proc..Init
// Set all fields to initial values.
inline void command::strconv_proc_Init(command::strconv_proc& parent) {
    parent.path = algo::strptr("bin/strconv");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}
inline command::sv2ssim::sv2ssim() {
    command::sv2ssim_Init(*this);
}

inline command::sv2ssim_proc::sv2ssim_proc() {
    command::sv2ssim_proc_Init(*this);
}

inline command::sv2ssim_proc::~sv2ssim_proc() {
    command::sv2ssim_proc_Uninit(*this);
}


// --- command.sv2ssim_proc..Init
// Set all fields to initial values.
inline void command::sv2ssim_proc_Init(command::sv2ssim_proc& parent) {
    parent.path = algo::strptr("bin/sv2ssim");
    parent.pid = pid_t(0);
    parent.timeout = i32(0);
    parent.status = i32(0);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const command::FieldId &row) {// cfmt:command.FieldId.String
    command::FieldId_Print(const_cast<command::FieldId&>(row), str);
    return str;
}
