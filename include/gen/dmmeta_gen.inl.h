//
// include/gen/dmmeta_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude

// --- dmmeta.Anonfld..Ctor
inline  dmmeta::Anonfld::Anonfld() {
}

// --- dmmeta.Anonfld..FieldwiseCtor
inline  dmmeta::Anonfld::Anonfld(const algo::strptr& in_field, const algo::Comment& in_comment)
    : field(in_field)
    , comment(in_comment)
 {
}

// --- dmmeta.Argvtype..Ctor
inline  dmmeta::Argvtype::Argvtype() {
}

// --- dmmeta.Basepool..Ctor
inline  dmmeta::Basepool::Basepool() {
}

// --- dmmeta.Basepool..FieldwiseCtor
inline  dmmeta::Basepool::Basepool(const algo::strptr& in_field, const algo::strptr& in_base)
    : field(in_field)
    , base(in_base)
 {
}

// --- dmmeta.Bitfld..Init
// Set all fields to initial values.
inline void dmmeta::Bitfld_Init(dmmeta::Bitfld& parent) {
    parent.offset = i32(0);
    parent.width = i32(0);
}

// --- dmmeta.Bitfld..Ctor
inline  dmmeta::Bitfld::Bitfld() {
    dmmeta::Bitfld_Init(*this);
}

// --- dmmeta.Bitfld..FieldwiseCtor
inline  dmmeta::Bitfld::Bitfld(const algo::strptr& in_field, i32 in_offset, i32 in_width, const algo::strptr& in_srcfield, const algo::Comment& in_comment)
    : field(in_field)
    , offset(in_offset)
    , width(in_width)
    , srcfield(in_srcfield)
    , comment(in_comment)
 {
}

// --- dmmeta.Buftype..Ctor
inline  dmmeta::Buftype::Buftype() {
}

// --- dmmeta.Buftype..FieldwiseCtor
inline  dmmeta::Buftype::Buftype(const algo::strptr& in_pnewtype, const algo::Comment& in_comment)
    : pnewtype(in_pnewtype)
    , comment(in_comment)
 {
}

// --- dmmeta.Cafter..Ctor
inline  dmmeta::Cafter::Cafter() {
}

// --- dmmeta.Cascdel..Ctor
inline  dmmeta::Cascdel::Cascdel() {
}

// --- dmmeta.Cascdel..FieldwiseCtor
inline  dmmeta::Cascdel::Cascdel(const algo::strptr& in_field, const algo::Comment& in_comment)
    : field(in_field)
    , comment(in_comment)
 {
}

// --- dmmeta.Ccmp..Init
// Set all fields to initial values.
inline void dmmeta::Ccmp_Init(dmmeta::Ccmp& parent) {
    parent.extrn = bool(false);
    parent.genop = bool(false);
    parent.order = bool(false);
    parent.minmax = bool(false);
}

// --- dmmeta.Ccmp..Ctor
inline  dmmeta::Ccmp::Ccmp() {
    dmmeta::Ccmp_Init(*this);
}

// --- dmmeta.Ccmp..FieldwiseCtor
inline  dmmeta::Ccmp::Ccmp(const algo::strptr& in_ctype, bool in_extrn, bool in_genop, bool in_order, bool in_minmax, const algo::Comment& in_comment)
    : ctype(in_ctype)
    , extrn(in_extrn)
    , genop(in_genop)
    , order(in_order)
    , minmax(in_minmax)
    , comment(in_comment)
 {
}

// --- dmmeta.Cdflt..Ctor
inline  dmmeta::Cdflt::Cdflt() {
}

// --- dmmeta.Cextern..Init
// Set all fields to initial values.
inline void dmmeta::Cextern_Init(dmmeta::Cextern& parent) {
    parent.initmemset = bool(false);
    parent.isstruct = bool(false);
    parent.plaindata = bool(false);
}

// --- dmmeta.Cextern..Ctor
inline  dmmeta::Cextern::Cextern() {
    dmmeta::Cextern_Init(*this);
}

// --- dmmeta.Cextern..FieldwiseCtor
inline  dmmeta::Cextern::Cextern(const algo::strptr& in_ctype, bool in_initmemset, bool in_isstruct, bool in_plaindata)
    : ctype(in_ctype)
    , initmemset(in_initmemset)
    , isstruct(in_isstruct)
    , plaindata(in_plaindata)
 {
}

// --- dmmeta.Cfast..Init
// Set all fields to initial values.
inline void dmmeta::Cfast_Init(dmmeta::Cfast& parent) {
    parent.id = u32(0);
    parent.reset = bool(false);
}

// --- dmmeta.Cfast..Ctor
inline  dmmeta::Cfast::Cfast() {
    dmmeta::Cfast_Init(*this);
}

// --- dmmeta.Cfmt..Init
// Set all fields to initial values.
inline void dmmeta::Cfmt_Init(dmmeta::Cfmt& parent) {
    parent.read = bool(false);
    parent.print = bool(false);
    parent.genop = bool(false);
}

// --- dmmeta.Cfmt..Ctor
inline  dmmeta::Cfmt::Cfmt() {
    dmmeta::Cfmt_Init(*this);
}

// --- dmmeta.Cfmt..FieldwiseCtor
inline  dmmeta::Cfmt::Cfmt(const algo::strptr& in_cfmt, const algo::strptr& in_printfmt, bool in_read, bool in_print, const algo::strptr& in_sep, bool in_genop, const algo::Comment& in_comment)
    : cfmt(in_cfmt)
    , printfmt(in_printfmt)
    , read(in_read)
    , print(in_print)
    , sep(in_sep)
    , genop(in_genop)
    , comment(in_comment)
 {
}

// --- dmmeta.Cget..Ctor
inline  dmmeta::Cget::Cget() {
}

// --- dmmeta.Charset..Init
// Set all fields to initial values.
inline void dmmeta::Charset_Init(dmmeta::Charset& parent) {
    parent.charrange = bool(false);
    parent.calc = bool(false);
}

// --- dmmeta.Charset..Ctor
inline  dmmeta::Charset::Charset() {
    dmmeta::Charset_Init(*this);
}

// --- dmmeta.Chash..Ctor
inline  dmmeta::Chash::Chash() {
}

// --- dmmeta.Chash..FieldwiseCtor
inline  dmmeta::Chash::Chash(const algo::strptr& in_ctype, const algo::strptr& in_hashtype, const algo::Comment& in_comment)
    : ctype(in_ctype)
    , hashtype(in_hashtype)
    , comment(in_comment)
 {
}

// --- dmmeta.Cppfunc..Init
// Set all fields to initial values.
inline void dmmeta::Cppfunc_Init(dmmeta::Cppfunc& parent) {
    parent.print = bool(false);
    parent.set = bool(false);
}

// --- dmmeta.Cppfunc..Ctor
inline  dmmeta::Cppfunc::Cppfunc() {
    dmmeta::Cppfunc_Init(*this);
}

// --- dmmeta.Cppkeyword..Ctor
inline  dmmeta::Cppkeyword::Cppkeyword() {
}

// --- dmmeta.Cppkeyword..FieldwiseCtor
inline  dmmeta::Cppkeyword::Cppkeyword(const algo::strptr& in_cppkeyword)
    : cppkeyword(in_cppkeyword)
 {
}

// --- dmmeta.Cpptype..Init
// Set all fields to initial values.
inline void dmmeta::Cpptype_Init(dmmeta::Cpptype& parent) {
    parent.ctor = bool(false);
    parent.dtor = bool(true);
    parent.cheap_copy = bool(false);
}

// --- dmmeta.Cpptype..Ctor
inline  dmmeta::Cpptype::Cpptype() {
    dmmeta::Cpptype_Init(*this);
}

// --- dmmeta.Cpptype..FieldwiseCtor
inline  dmmeta::Cpptype::Cpptype(const algo::strptr& in_ctype, bool in_ctor, bool in_dtor, bool in_cheap_copy)
    : ctype(in_ctype)
    , ctor(in_ctor)
    , dtor(in_dtor)
    , cheap_copy(in_cheap_copy)
 {
}

// --- dmmeta.Csize..Init
// Set all fields to initial values.
inline void dmmeta::Csize_Init(dmmeta::Csize& parent) {
    parent.size = u32(0);
    parent.alignment = u32(1);
}

// --- dmmeta.Csize..Ctor
inline  dmmeta::Csize::Csize() {
    dmmeta::Csize_Init(*this);
}

// --- dmmeta.Csize..FieldwiseCtor
inline  dmmeta::Csize::Csize(const algo::strptr& in_ctype, u32 in_size, u32 in_alignment, const algo::Comment& in_comment)
    : ctype(in_ctype)
    , size(in_size)
    , alignment(in_alignment)
    , comment(in_comment)
 {
}

// --- dmmeta.Cstr..Init
// Set all fields to initial values.
inline void dmmeta::Cstr_Init(dmmeta::Cstr& parent) {
    parent.strequiv = bool(false);
}

// --- dmmeta.Cstr..Ctor
inline  dmmeta::Cstr::Cstr() {
    dmmeta::Cstr_Init(*this);
}

// --- dmmeta.Ctype..Ctor
inline  dmmeta::Ctype::Ctype() {
}

// --- dmmeta.Ctype..FieldwiseCtor
inline  dmmeta::Ctype::Ctype(const algo::strptr& in_ctype, const algo::Comment& in_comment)
    : ctype(in_ctype)
    , comment(in_comment)
 {
}

// --- dmmeta.Ctypelen..Init
// Set all fields to initial values.
inline void dmmeta::Ctypelen_Init(dmmeta::Ctypelen& parent) {
    parent.len = u32(0);
    parent.alignment = i32(0);
    parent.padbytes = i32(0);
    parent.plaindata = bool(false);
}

// --- dmmeta.Ctypelen..Ctor
inline  dmmeta::Ctypelen::Ctypelen() {
    dmmeta::Ctypelen_Init(*this);
}

// --- dmmeta.Ctypelen..FieldwiseCtor
inline  dmmeta::Ctypelen::Ctypelen(const algo::strptr& in_ctype, u32 in_len, i32 in_alignment, i32 in_padbytes, bool in_plaindata)
    : ctype(in_ctype)
    , len(in_len)
    , alignment(in_alignment)
    , padbytes(in_padbytes)
    , plaindata(in_plaindata)
 {
}

// --- dmmeta.Dispatch..Ctor
inline  dmmeta::Dispatch::Dispatch() {
    dmmeta::Dispatch_Init(*this);
}

// --- dmmeta.Dispatch..FieldwiseCtor
inline  dmmeta::Dispatch::Dispatch(const algo::strptr& in_dispatch, bool in_unk, bool in_read, bool in_print, bool in_haslen, bool in_call, bool in_strict, const algo::Comment& in_comment)
    : dispatch(in_dispatch)
    , unk(in_unk)
    , read(in_read)
    , print(in_print)
    , haslen(in_haslen)
    , call(in_call)
    , strict(in_strict)
    , comment(in_comment)
 {
}

// --- dmmeta.DispatchMsg..Ctor
inline  dmmeta::DispatchMsg::DispatchMsg() {
}

// --- dmmeta.DispatchMsg..FieldwiseCtor
inline  dmmeta::DispatchMsg::DispatchMsg(const algo::strptr& in_dispatch_msg, const algo::Comment& in_comment)
    : dispatch_msg(in_dispatch_msg)
    , comment(in_comment)
 {
}

// --- dmmeta.Dispctx..Ctor
inline  dmmeta::Dispctx::Dispctx() {
}

// --- dmmeta.Dispfilter..Init
// Set all fields to initial values.
inline void dmmeta::Dispfilter_Init(dmmeta::Dispfilter& parent) {
    parent.match_all = bool(false);
}

// --- dmmeta.Dispfilter..Ctor
inline  dmmeta::Dispfilter::Dispfilter() {
    dmmeta::Dispfilter_Init(*this);
}

// --- dmmeta.Dispsig..Ctor
inline  dmmeta::Dispsig::Dispsig() {
}

// --- dmmeta.Dispsigcheck..Ctor
inline  dmmeta::Dispsigcheck::Dispsigcheck() {
}

// --- dmmeta.Dispsigcheck..FieldwiseCtor
inline  dmmeta::Dispsigcheck::Dispsigcheck(const algo::strptr& in_dispsig, const algo::Sha1sig& in_signature)
    : dispsig(in_dispsig)
    , signature(in_signature)
 {
}

// --- dmmeta.Disptrace..Init
// Set all fields to initial values.
inline void dmmeta::Disptrace_Init(dmmeta::Disptrace& parent) {
    parent.cycle = bool(false);
}

// --- dmmeta.Disptrace..Ctor
inline  dmmeta::Disptrace::Disptrace() {
    dmmeta::Disptrace_Init(*this);
}

// --- dmmeta.Falias..Ctor
inline  dmmeta::Falias::Falias() {
}

// --- dmmeta.Fastenc..Ctor
inline  dmmeta::Fastenc::Fastenc() {
}

// --- dmmeta.FastencCase.fastenc.GetEnum
// Get value of field as enum type
inline dmmeta_FastencCaseEnum dmmeta::fastenc_GetEnum(const dmmeta::FastencCase& parent) {
    return dmmeta_FastencCaseEnum(parent.fastenc);
}

// --- dmmeta.FastencCase.fastenc.SetEnum
// Set value of field from enum type.
inline void dmmeta::fastenc_SetEnum(dmmeta::FastencCase& parent, dmmeta_FastencCaseEnum rhs) {
    parent.fastenc = u8(rhs);
}

// --- dmmeta.FastencCase.fastenc.Cast
inline  dmmeta::FastencCase::operator dmmeta_FastencCaseEnum() const {
    return dmmeta_FastencCaseEnum((*this).fastenc);
}

// --- dmmeta.FastencCase..Init
// Set all fields to initial values.
inline void dmmeta::FastencCase_Init(dmmeta::FastencCase& parent) {
    parent.fastenc = u8(0);
}

// --- dmmeta.FastencCase..Ctor
inline  dmmeta::FastencCase::FastencCase() {
    dmmeta::FastencCase_Init(*this);
}

// --- dmmeta.FastencCase..FieldwiseCtor
inline  dmmeta::FastencCase::FastencCase(u8 in_fastenc)
    : fastenc(in_fastenc)
 {
}

// --- dmmeta.FastencCase..EnumCtor
inline  dmmeta::FastencCase::FastencCase(dmmeta_FastencCaseEnum arg) {
    this->fastenc = u8(arg);
}

// --- dmmeta.Fastinstr..Ctor
inline  dmmeta::Fastinstr::Fastinstr() {
}

// --- dmmeta.FastinstrCase.fastinstr.GetEnum
// Get value of field as enum type
inline dmmeta_FastinstrCaseEnum dmmeta::fastinstr_GetEnum(const dmmeta::FastinstrCase& parent) {
    return dmmeta_FastinstrCaseEnum(parent.fastinstr);
}

// --- dmmeta.FastinstrCase.fastinstr.SetEnum
// Set value of field from enum type.
inline void dmmeta::fastinstr_SetEnum(dmmeta::FastinstrCase& parent, dmmeta_FastinstrCaseEnum rhs) {
    parent.fastinstr = u8(rhs);
}

// --- dmmeta.FastinstrCase.fastinstr.Cast
inline  dmmeta::FastinstrCase::operator dmmeta_FastinstrCaseEnum() const {
    return dmmeta_FastinstrCaseEnum((*this).fastinstr);
}

// --- dmmeta.FastinstrCase..Init
// Set all fields to initial values.
inline void dmmeta::FastinstrCase_Init(dmmeta::FastinstrCase& parent) {
    parent.fastinstr = u8(0);
}

// --- dmmeta.FastinstrCase..Ctor
inline  dmmeta::FastinstrCase::FastinstrCase() {
    dmmeta::FastinstrCase_Init(*this);
}

// --- dmmeta.FastinstrCase..FieldwiseCtor
inline  dmmeta::FastinstrCase::FastinstrCase(u8 in_fastinstr)
    : fastinstr(in_fastinstr)
 {
}

// --- dmmeta.FastinstrCase..EnumCtor
inline  dmmeta::FastinstrCase::FastinstrCase(dmmeta_FastinstrCaseEnum arg) {
    this->fastinstr = u8(arg);
}

// --- dmmeta.Fastop..Ctor
inline  dmmeta::Fastop::Fastop() {
}

// --- dmmeta.FastopCase.fastop.GetEnum
// Get value of field as enum type
inline dmmeta_FastopCaseEnum dmmeta::fastop_GetEnum(const dmmeta::FastopCase& parent) {
    return dmmeta_FastopCaseEnum(parent.fastop);
}

// --- dmmeta.FastopCase.fastop.SetEnum
// Set value of field from enum type.
inline void dmmeta::fastop_SetEnum(dmmeta::FastopCase& parent, dmmeta_FastopCaseEnum rhs) {
    parent.fastop = u8(rhs);
}

// --- dmmeta.FastopCase.fastop.Cast
inline  dmmeta::FastopCase::operator dmmeta_FastopCaseEnum() const {
    return dmmeta_FastopCaseEnum((*this).fastop);
}

// --- dmmeta.FastopCase..Init
// Set all fields to initial values.
inline void dmmeta::FastopCase_Init(dmmeta::FastopCase& parent) {
    parent.fastop = u8(0);
}

// --- dmmeta.FastopCase..Ctor
inline  dmmeta::FastopCase::FastopCase() {
    dmmeta::FastopCase_Init(*this);
}

// --- dmmeta.FastopCase..FieldwiseCtor
inline  dmmeta::FastopCase::FastopCase(u8 in_fastop)
    : fastop(in_fastop)
 {
}

// --- dmmeta.FastopCase..EnumCtor
inline  dmmeta::FastopCase::FastopCase(dmmeta_FastopCaseEnum arg) {
    this->fastop = u8(arg);
}

// --- dmmeta.Fbase..Init
// Set all fields to initial values.
inline void dmmeta::Fbase_Init(dmmeta::Fbase& parent) {
    parent.stripcomment = bool(false);
}

// --- dmmeta.Fbase..Ctor
inline  dmmeta::Fbase::Fbase() {
    dmmeta::Fbase_Init(*this);
}

// --- dmmeta.Fbigend..Ctor
inline  dmmeta::Fbigend::Fbigend() {
}

// --- dmmeta.Fbitset..Ctor
inline  dmmeta::Fbitset::Fbitset() {
}

// --- dmmeta.Fbitset..FieldwiseCtor
inline  dmmeta::Fbitset::Fbitset(const algo::strptr& in_field, const algo::Comment& in_comment)
    : field(in_field)
    , comment(in_comment)
 {
}

// --- dmmeta.Fbuf..Init
// Set all fields to initial values.
inline void dmmeta::Fbuf_Init(dmmeta::Fbuf& parent) {
    parent.max = u32(0);
}

// --- dmmeta.Fbuf..Ctor
inline  dmmeta::Fbuf::Fbuf() {
    dmmeta::Fbuf_Init(*this);
}

// --- dmmeta.Fbufdir..Init
// Set all fields to initial values.
inline void dmmeta::Fbufdir_Init(dmmeta::Fbufdir& parent) {
    parent.read = bool(false);
}

// --- dmmeta.Fbufdir..Ctor
inline  dmmeta::Fbufdir::Fbufdir() {
    dmmeta::Fbufdir_Init(*this);
}

// --- dmmeta.Fbuftype..Init
// Set all fields to initial values.
inline void dmmeta::Fbuftype_Init(dmmeta::Fbuftype& parent) {
    parent.getmsg = bool(false);
    parent.skipbytes = bool(false);
    parent.read = bool(false);
}

// --- dmmeta.Fbuftype..Ctor
inline  dmmeta::Fbuftype::Fbuftype() {
    dmmeta::Fbuftype_Init(*this);
}

// --- dmmeta.Fcast..Ctor
inline  dmmeta::Fcast::Fcast() {
}

// --- dmmeta.Fcast..FieldwiseCtor
inline  dmmeta::Fcast::Fcast(const algo::strptr& in_field, const algo::strptr& in_expr, const algo::Comment& in_comment)
    : field(in_field)
    , expr(in_expr)
    , comment(in_comment)
 {
}

// --- dmmeta.Fcleanup..Ctor
inline  dmmeta::Fcleanup::Fcleanup() {
}

// --- dmmeta.Fcmap..Init
// Set all fields to initial values.
inline void dmmeta::Fcmap_Init(dmmeta::Fcmap& parent) {
    parent.bidir = bool(true);
}

// --- dmmeta.Fcmap..Ctor
inline  dmmeta::Fcmap::Fcmap() {
    dmmeta::Fcmap_Init(*this);
}

// --- dmmeta.Fcmdline..Init
// Set all fields to initial values.
inline void dmmeta::Fcmdline_Init(dmmeta::Fcmdline& parent) {
    parent.read = bool(true);
}

// --- dmmeta.Fcmdline..Ctor
inline  dmmeta::Fcmdline::Fcmdline() {
    dmmeta::Fcmdline_Init(*this);
}

// --- dmmeta.Fcmp..Init
// Set all fields to initial values.
inline void dmmeta::Fcmp_Init(dmmeta::Fcmp& parent) {
    parent.versionsort = bool(false);
    parent.casesens = bool(true);
    parent.extrn = bool(false);
}

// --- dmmeta.Fcmp..Ctor
inline  dmmeta::Fcmp::Fcmp() {
    dmmeta::Fcmp_Init(*this);
}

// --- dmmeta.Fcmp..FieldwiseCtor
inline  dmmeta::Fcmp::Fcmp(const algo::strptr& in_field, bool in_versionsort, bool in_casesens, bool in_extrn, const algo::Comment& in_comment)
    : field(in_field)
    , versionsort(in_versionsort)
    , casesens(in_casesens)
    , extrn(in_extrn)
    , comment(in_comment)
 {
}

// --- dmmeta.Fcompact..Ctor
inline  dmmeta::Fcompact::Fcompact() {
}

// --- dmmeta.Fconst.value.Cast
inline  dmmeta::Fconst::operator algo::CppExpr() const {
    return algo::CppExpr((*this).value);
}

// --- dmmeta.Fconst..Ctor
inline  dmmeta::Fconst::Fconst() {
}

// --- dmmeta.Fconst..FieldwiseCtor
inline  dmmeta::Fconst::Fconst(const algo::strptr& in_fconst, const algo::CppExpr& in_value, const algo::Comment& in_comment)
    : fconst(in_fconst)
    , value(in_value)
    , comment(in_comment)
 {
}

// --- dmmeta.Fcurs..Ctor
inline  dmmeta::Fcurs::Fcurs() {
}

// --- dmmeta.Fdec..Init
// Set all fields to initial values.
inline void dmmeta::Fdec_Init(dmmeta::Fdec& parent) {
    parent.nplace = i32(0);
    parent.fixedfmt = bool(false);
}

// --- dmmeta.Fdec..Ctor
inline  dmmeta::Fdec::Fdec() {
    dmmeta::Fdec_Init(*this);
}

// --- dmmeta.Fdelay..Init
// Set all fields to initial values.
inline void dmmeta::Fdelay_Init(dmmeta::Fdelay& parent) {
    parent.scale = bool(false);
}

// --- dmmeta.Fdelay..Ctor
inline  dmmeta::Fdelay::Fdelay() {
    dmmeta::Fdelay_Init(*this);
}

// --- dmmeta.Ffast..Ctor
inline  dmmeta::Ffast::Ffast() {
    dmmeta::Ffast_Init(*this);
}

// --- dmmeta.Fflag..Init
// Set all fields to initial values.
inline void dmmeta::Fflag_Init(dmmeta::Fflag& parent) {
    parent.cumulative = bool(false);
    parent.emptyval = algo::strptr("");
}

// --- dmmeta.Fflag..Ctor
inline  dmmeta::Fflag::Fflag() {
    dmmeta::Fflag_Init(*this);
}

// --- dmmeta.Field..Init
// Set all fields to initial values.
inline void dmmeta::Field_Init(dmmeta::Field& parent) {
    parent.reftype = algo::strptr("Val");
}

// --- dmmeta.Field..Ctor
inline  dmmeta::Field::Field() {
    dmmeta::Field_Init(*this);
}

// --- dmmeta.Field..FieldwiseCtor
inline  dmmeta::Field::Field(const algo::strptr& in_field, const algo::strptr& in_arg, const algo::strptr& in_reftype, const algo::CppExpr& in_dflt, const algo::Comment& in_comment)
    : field(in_field)
    , arg(in_arg)
    , reftype(in_reftype)
    , dflt(in_dflt)
    , comment(in_comment)
 {
}

// --- dmmeta.FieldId.value.GetEnum
// Get value of field as enum type
inline dmmeta_FieldIdEnum dmmeta::value_GetEnum(const dmmeta::FieldId& parent) {
    return dmmeta_FieldIdEnum(parent.value);
}

// --- dmmeta.FieldId.value.SetEnum
// Set value of field from enum type.
inline void dmmeta::value_SetEnum(dmmeta::FieldId& parent, dmmeta_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- dmmeta.FieldId.value.Cast
inline  dmmeta::FieldId::operator dmmeta_FieldIdEnum() const {
    return dmmeta_FieldIdEnum((*this).value);
}

// --- dmmeta.FieldId..Init
// Set all fields to initial values.
inline void dmmeta::FieldId_Init(dmmeta::FieldId& parent) {
    parent.value = i32(-1);
}

// --- dmmeta.FieldId..Ctor
inline  dmmeta::FieldId::FieldId() {
    dmmeta::FieldId_Init(*this);
}

// --- dmmeta.FieldId..FieldwiseCtor
inline  dmmeta::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- dmmeta.FieldId..EnumCtor
inline  dmmeta::FieldId::FieldId(dmmeta_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- dmmeta.Findrem..Ctor
inline  dmmeta::Findrem::Findrem() {
}

// --- dmmeta.Finput..Init
// Set all fields to initial values.
inline void dmmeta::Finput_Init(dmmeta::Finput& parent) {
    parent.extrn = bool(false);
    parent.update = bool(false);
    parent.strict = bool(true);
}

// --- dmmeta.Finput..Ctor
inline  dmmeta::Finput::Finput() {
    dmmeta::Finput_Init(*this);
}

// --- dmmeta.Finput..FieldwiseCtor
inline  dmmeta::Finput::Finput(const algo::strptr& in_field, bool in_extrn, bool in_update, bool in_strict, const algo::Comment& in_comment)
    : field(in_field)
    , extrn(in_extrn)
    , update(in_update)
    , strict(in_strict)
    , comment(in_comment)
 {
}

// --- dmmeta.Fldoffset..Init
// Set all fields to initial values.
inline void dmmeta::Fldoffset_Init(dmmeta::Fldoffset& parent) {
    parent.offset = i32(0);
}

// --- dmmeta.Fldoffset..Ctor
inline  dmmeta::Fldoffset::Fldoffset() {
    dmmeta::Fldoffset_Init(*this);
}

// --- dmmeta.Fldoffset..FieldwiseCtor
inline  dmmeta::Fldoffset::Fldoffset(const algo::strptr& in_field, i32 in_offset)
    : field(in_field)
    , offset(in_offset)
 {
}

// --- dmmeta.Floadtuples..Ctor
inline  dmmeta::Floadtuples::Floadtuples() {
}

// --- dmmeta.Fnoremove..Ctor
inline  dmmeta::Fnoremove::Fnoremove() {
}

// --- dmmeta.Foutput..Ctor
inline  dmmeta::Foutput::Foutput() {
}

// --- dmmeta.Fprefix..Ctor
inline  dmmeta::Fprefix::Fprefix() {
}

// --- dmmeta.Fregx..Init
// Set all fields to initial values.
inline void dmmeta::Fregx_Init(dmmeta::Fregx& parent) {
    parent.partial = bool(false);
}

// --- dmmeta.Fregx..Ctor
inline  dmmeta::Fregx::Fregx() {
    dmmeta::Fregx_Init(*this);
}

// --- dmmeta.Fsort..Ctor
inline  dmmeta::Fsort::Fsort() {
}

// --- dmmeta.Fstep..Ctor
inline  dmmeta::Fstep::Fstep() {
}

// --- dmmeta.Ftrace..Ctor
inline  dmmeta::Ftrace::Ftrace() {
}

// --- dmmeta.Ftuple..Ctor
inline  dmmeta::Ftuple::Ftuple() {
}

// --- dmmeta.Func..Ctor
inline  dmmeta::Func::Func() {
    dmmeta::Func_Init(*this);
}

// --- dmmeta.Funique..Ctor
inline  dmmeta::Funique::Funique() {
}

// --- dmmeta.Fuserinit..Ctor
inline  dmmeta::Fuserinit::Fuserinit() {
}

// --- dmmeta.Fwddecl..Ctor
inline  dmmeta::Fwddecl::Fwddecl() {
}

// --- dmmeta.Gconst..Init
// Set all fields to initial values.
inline void dmmeta::Gconst_Init(dmmeta::Gconst& parent) {
    parent.wantenum = bool(true);
}

// --- dmmeta.Gconst..Ctor
inline  dmmeta::Gconst::Gconst() {
    dmmeta::Gconst_Init(*this);
}

// --- dmmeta.Gconst..FieldwiseCtor
inline  dmmeta::Gconst::Gconst(const algo::strptr& in_field, const algo::strptr& in_namefld, const algo::strptr& in_idfld, bool in_wantenum)
    : field(in_field)
    , namefld(in_namefld)
    , idfld(in_idfld)
    , wantenum(in_wantenum)
 {
}

// --- dmmeta.Gstatic..Ctor
inline  dmmeta::Gstatic::Gstatic() {
}

// --- dmmeta.Gstatic..FieldwiseCtor
inline  dmmeta::Gstatic::Gstatic(const algo::strptr& in_field, const algo::Comment& in_comment)
    : field(in_field)
    , comment(in_comment)
 {
}

// --- dmmeta.Gsymbol..Ctor
inline  dmmeta::Gsymbol::Gsymbol() {
}

// --- dmmeta.Hashtype..Ctor
inline  dmmeta::Hashtype::Hashtype() {
}

// --- dmmeta.Hashtype..FieldwiseCtor
inline  dmmeta::Hashtype::Hashtype(const algo::strptr& in_hashtype, const algo::Comment& in_comment)
    : hashtype(in_hashtype)
    , comment(in_comment)
 {
}

// --- dmmeta.Hook..Ctor
inline  dmmeta::Hook::Hook() {
}

// --- dmmeta.Inlary..Init
// Set all fields to initial values.
inline void dmmeta::Inlary_Init(dmmeta::Inlary& parent) {
    parent.min = i32(0);
    parent.max = i32(0);
}

// --- dmmeta.Inlary..Ctor
inline  dmmeta::Inlary::Inlary() {
    dmmeta::Inlary_Init(*this);
}

// --- dmmeta.Inlary..FieldwiseCtor
inline  dmmeta::Inlary::Inlary(const algo::strptr& in_field, i32 in_min, i32 in_max, const algo::Comment& in_comment)
    : field(in_field)
    , min(in_min)
    , max(in_max)
    , comment(in_comment)
 {
}

// --- dmmeta.Lenfld..Init
// Set all fields to initial values.
inline void dmmeta::Lenfld_Init(dmmeta::Lenfld& parent) {
    parent.extra = i32(0);
}

// --- dmmeta.Lenfld..Ctor
inline  dmmeta::Lenfld::Lenfld() {
    dmmeta::Lenfld_Init(*this);
}

// --- dmmeta.Lenfld..FieldwiseCtor
inline  dmmeta::Lenfld::Lenfld(const algo::strptr& in_field, i32 in_extra)
    : field(in_field)
    , extra(in_extra)
 {
}

// --- dmmeta.Listtype..Init
// Set all fields to initial values.
inline void dmmeta::Listtype_Init(dmmeta::Listtype& parent) {
    parent.circular = bool(false);
    parent.haveprev = bool(false);
    parent.instail = bool(false);
}

// --- dmmeta.Listtype..Ctor
inline  dmmeta::Listtype::Listtype() {
    dmmeta::Listtype_Init(*this);
}

// --- dmmeta.Llist..Init
// Set all fields to initial values.
inline void dmmeta::Llist_Init(dmmeta::Llist& parent) {
    parent.havetail = bool(true);
    parent.havecount = bool(false);
}

// --- dmmeta.Llist..Ctor
inline  dmmeta::Llist::Llist() {
    dmmeta::Llist_Init(*this);
}

// --- dmmeta.Llist..FieldwiseCtor
inline  dmmeta::Llist::Llist(const algo::strptr& in_field, bool in_havetail, bool in_havecount, const algo::Comment& in_comment)
    : field(in_field)
    , havetail(in_havetail)
    , havecount(in_havecount)
    , comment(in_comment)
 {
}

// --- dmmeta.Logcat..Init
// Set all fields to initial values.
inline void dmmeta::Logcat_Init(dmmeta::Logcat& parent) {
    parent.enabled = bool(false);
    parent.builtin = bool(false);
}

// --- dmmeta.Logcat..Ctor
inline  dmmeta::Logcat::Logcat() {
    dmmeta::Logcat_Init(*this);
}

// --- dmmeta.Main..Init
// Set all fields to initial values.
inline void dmmeta::Main_Init(dmmeta::Main& parent) {
    parent.ismodule = bool(false);
}

// --- dmmeta.Main..Ctor
inline  dmmeta::Main::Main() {
    dmmeta::Main_Init(*this);
}

// --- dmmeta.Main..FieldwiseCtor
inline  dmmeta::Main::Main(const algo::strptr& in_ns, bool in_ismodule)
    : ns(in_ns)
    , ismodule(in_ismodule)
 {
}

// --- dmmeta.Msgtype..Ctor
inline  dmmeta::Msgtype::Msgtype() {
}

// --- dmmeta.Msgtype..FieldwiseCtor
inline  dmmeta::Msgtype::Msgtype(const algo::strptr& in_ctype, const algo::CppExpr& in_type)
    : ctype(in_ctype)
    , type(in_type)
 {
}

// --- dmmeta.Nocascdel..Ctor
inline  dmmeta::Nocascdel::Nocascdel() {
}

// --- dmmeta.Nossimfile..Ctor
inline  dmmeta::Nossimfile::Nossimfile() {
}

// --- dmmeta.Noxref..Ctor
inline  dmmeta::Noxref::Noxref() {
}

// --- dmmeta.Ns..Ctor
inline  dmmeta::Ns::Ns() {
}

// --- dmmeta.Ns..FieldwiseCtor
inline  dmmeta::Ns::Ns(const algo::strptr& in_ns, const algo::strptr& in_nstype, const algo::strptr& in_license, const algo::Comment& in_comment)
    : ns(in_ns)
    , nstype(in_nstype)
    , license(in_license)
    , comment(in_comment)
 {
}

// --- dmmeta.Nscpp..Ctor
inline  dmmeta::Nscpp::Nscpp() {
}

// --- dmmeta.Nscpp..FieldwiseCtor
inline  dmmeta::Nscpp::Nscpp(const algo::strptr& in_ns, const algo::Comment& in_comment)
    : ns(in_ns)
    , comment(in_comment)
 {
}

// --- dmmeta.Nsdb..Ctor
inline  dmmeta::Nsdb::Nsdb() {
}

// --- dmmeta.Nsfast..Ctor
inline  dmmeta::Nsfast::Nsfast() {
}

// --- dmmeta.Nsinclude..Init
// Set all fields to initial values.
inline void dmmeta::Nsinclude_Init(dmmeta::Nsinclude& parent) {
    parent.sys = bool(false);
}

// --- dmmeta.Nsinclude..Ctor
inline  dmmeta::Nsinclude::Nsinclude() {
    dmmeta::Nsinclude_Init(*this);
}

// --- dmmeta.Nsproto..Ctor
inline  dmmeta::Nsproto::Nsproto() {
}

// --- dmmeta.Nsproto..FieldwiseCtor
inline  dmmeta::Nsproto::Nsproto(const algo::strptr& in_ns, const algo::Comment& in_comment)
    : ns(in_ns)
    , comment(in_comment)
 {
}

// --- dmmeta.Nstype..Ctor
inline  dmmeta::Nstype::Nstype() {
}

// --- dmmeta.Nstype..FieldwiseCtor
inline  dmmeta::Nstype::Nstype(const algo::strptr& in_nstype, const algo::Comment& in_comment)
    : nstype(in_nstype)
    , comment(in_comment)
 {
}

// --- dmmeta.Nsversion..Ctor
inline  dmmeta::Nsversion::Nsversion() {
}

// --- dmmeta.Nsx..Init
// Set all fields to initial values.
inline void dmmeta::Nsx_Init(dmmeta::Nsx& parent) {
    parent.genthrow = bool(false);
    parent.correct_getorcreate = bool(false);
    parent.sortxref = bool(false);
    parent.pack = bool(false);
}

// --- dmmeta.Nsx..Ctor
inline  dmmeta::Nsx::Nsx() {
    dmmeta::Nsx_Init(*this);
}

// --- dmmeta.Nsx..FieldwiseCtor
inline  dmmeta::Nsx::Nsx(const algo::strptr& in_ns, bool in_genthrow, bool in_correct_getorcreate, const algo::strptr& in_pool, bool in_sortxref, bool in_pack, const algo::Comment& in_comment)
    : ns(in_ns)
    , genthrow(in_genthrow)
    , correct_getorcreate(in_correct_getorcreate)
    , pool(in_pool)
    , sortxref(in_sortxref)
    , pack(in_pack)
    , comment(in_comment)
 {
}

// --- dmmeta.Numstr..Init
// Set all fields to initial values.
inline void dmmeta::Numstr_Init(dmmeta::Numstr& parent) {
    parent.base = i32(0);
    parent.min_len = i32(0);
}

// --- dmmeta.Numstr..Ctor
inline  dmmeta::Numstr::Numstr() {
    dmmeta::Numstr_Init(*this);
}

// --- dmmeta.Numstr..FieldwiseCtor
inline  dmmeta::Numstr::Numstr(const algo::strptr& in_field, const algo::strptr& in_numtype, i32 in_base, i32 in_min_len)
    : field(in_field)
    , numtype(in_numtype)
    , base(in_base)
    , min_len(in_min_len)
 {
}

// --- dmmeta.Pack..Ctor
inline  dmmeta::Pack::Pack() {
}

// --- dmmeta.Pack..FieldwiseCtor
inline  dmmeta::Pack::Pack(const algo::strptr& in_ctype, const algo::Comment& in_comment)
    : ctype(in_ctype)
    , comment(in_comment)
 {
}

// --- dmmeta.Pmaskfld..Init
// Set all fields to initial values.
inline void dmmeta::Pmaskfld_Init(dmmeta::Pmaskfld& parent) {
    parent.filter_print = bool(true);
}

// --- dmmeta.Pmaskfld..Ctor
inline  dmmeta::Pmaskfld::Pmaskfld() {
    dmmeta::Pmaskfld_Init(*this);
}

// --- dmmeta.Pmaskfld..FieldwiseCtor
inline  dmmeta::Pmaskfld::Pmaskfld(const algo::strptr& in_field, bool in_filter_print, const algo::Comment& in_comment)
    : field(in_field)
    , filter_print(in_filter_print)
    , comment(in_comment)
 {
}

// --- dmmeta.PmaskfldMember..Ctor
inline  dmmeta::PmaskfldMember::PmaskfldMember() {
}

// --- dmmeta.Pnew..Ctor
inline  dmmeta::Pnew::Pnew() {
}

// --- dmmeta.Pnew..FieldwiseCtor
inline  dmmeta::Pnew::Pnew(const algo::strptr& in_pnew, const algo::Comment& in_comment)
    : pnew(in_pnew)
    , comment(in_comment)
 {
}

// --- dmmeta.Printfmt..Ctor
inline  dmmeta::Printfmt::Printfmt() {
}

// --- dmmeta.Ptrary..Init
// Set all fields to initial values.
inline void dmmeta::Ptrary_Init(dmmeta::Ptrary& parent) {
    parent.unique = bool(false);
}

// --- dmmeta.Ptrary..Ctor
inline  dmmeta::Ptrary::Ptrary() {
    dmmeta::Ptrary_Init(*this);
}

// --- dmmeta.Ptrary..FieldwiseCtor
inline  dmmeta::Ptrary::Ptrary(const algo::strptr& in_field, bool in_unique)
    : field(in_field)
    , unique(in_unique)
 {
}

// --- dmmeta.Reftype..Ctor
inline  dmmeta::Reftype::Reftype() {
    dmmeta::Reftype_Init(*this);
}

// --- dmmeta.ReftypeCase.reftype.GetEnum
// Get value of field as enum type
inline dmmeta_ReftypeCaseEnum dmmeta::reftype_GetEnum(const dmmeta::ReftypeCase& parent) {
    return dmmeta_ReftypeCaseEnum(parent.reftype);
}

// --- dmmeta.ReftypeCase.reftype.SetEnum
// Set value of field from enum type.
inline void dmmeta::reftype_SetEnum(dmmeta::ReftypeCase& parent, dmmeta_ReftypeCaseEnum rhs) {
    parent.reftype = u8(rhs);
}

// --- dmmeta.ReftypeCase.reftype.Cast
inline  dmmeta::ReftypeCase::operator dmmeta_ReftypeCaseEnum() const {
    return dmmeta_ReftypeCaseEnum((*this).reftype);
}

// --- dmmeta.ReftypeCase..Init
// Set all fields to initial values.
inline void dmmeta::ReftypeCase_Init(dmmeta::ReftypeCase& parent) {
    parent.reftype = u8(0);
}

// --- dmmeta.ReftypeCase..Ctor
inline  dmmeta::ReftypeCase::ReftypeCase() {
    dmmeta::ReftypeCase_Init(*this);
}

// --- dmmeta.ReftypeCase..FieldwiseCtor
inline  dmmeta::ReftypeCase::ReftypeCase(u8 in_reftype)
    : reftype(in_reftype)
 {
}

// --- dmmeta.ReftypeCase..EnumCtor
inline  dmmeta::ReftypeCase::ReftypeCase(dmmeta_ReftypeCaseEnum arg) {
    this->reftype = u8(arg);
}

// --- dmmeta.Rowid..Ctor
inline  dmmeta::Rowid::Rowid() {
}

// --- dmmeta.Smallstr..Init
// Set all fields to initial values.
inline void dmmeta::Smallstr_Init(dmmeta::Smallstr& parent) {
    parent.length = i32(0);
    parent.strict = bool(false);
}

// --- dmmeta.Smallstr..Ctor
inline  dmmeta::Smallstr::Smallstr() {
    dmmeta::Smallstr_Init(*this);
}

// --- dmmeta.Sortfld..Ctor
inline  dmmeta::Sortfld::Sortfld() {
}

// --- dmmeta.Sortfld..FieldwiseCtor
inline  dmmeta::Sortfld::Sortfld(const algo::strptr& in_field, const algo::strptr& in_sortfld)
    : field(in_field)
    , sortfld(in_sortfld)
 {
}

// --- dmmeta.Sorttype..Ctor
inline  dmmeta::Sorttype::Sorttype() {
}

// --- dmmeta.Sqltype..Ctor
inline  dmmeta::Sqltype::Sqltype() {
}

// --- dmmeta.Ssimfile..Ctor
inline  dmmeta::Ssimfile::Ssimfile() {
}

// --- dmmeta.Ssimfile..FieldwiseCtor
inline  dmmeta::Ssimfile::Ssimfile(const algo::strptr& in_ssimfile, const algo::strptr& in_ctype)
    : ssimfile(in_ssimfile)
    , ctype(in_ctype)
 {
}

// --- dmmeta.Ssimreq..Ctor
inline  dmmeta::Ssimreq::Ssimreq() {
    dmmeta::Ssimreq_Init(*this);
}

// --- dmmeta.Ssimsort..Ctor
inline  dmmeta::Ssimsort::Ssimsort() {
}

// --- dmmeta.Ssimvolatile..Ctor
inline  dmmeta::Ssimvolatile::Ssimvolatile() {
}

// --- dmmeta.Steptype..Ctor
inline  dmmeta::Steptype::Steptype() {
}

// --- dmmeta.Steptype..FieldwiseCtor
inline  dmmeta::Steptype::Steptype(const algo::strptr& in_steptype, const algo::Comment& in_comment)
    : steptype(in_steptype)
    , comment(in_comment)
 {
}

// --- dmmeta.Strfmt..Ctor
inline  dmmeta::Strfmt::Strfmt() {
}

// --- dmmeta.Strfmt..FieldwiseCtor
inline  dmmeta::Strfmt::Strfmt(const algo::strptr& in_strfmt, const algo::Comment& in_comment)
    : strfmt(in_strfmt)
    , comment(in_comment)
 {
}

// --- dmmeta.Strtype..Ctor
inline  dmmeta::Strtype::Strtype() {
}

// --- dmmeta.Strtype..FieldwiseCtor
inline  dmmeta::Strtype::Strtype(const algo::strptr& in_strtype, const algo::Comment& in_comment)
    : strtype(in_strtype)
    , comment(in_comment)
 {
}

// --- dmmeta.Substr..Ctor
inline  dmmeta::Substr::Substr() {
}

// --- dmmeta.Substr..FieldwiseCtor
inline  dmmeta::Substr::Substr(const algo::strptr& in_field, const algo::CppExpr& in_expr, const algo::strptr& in_srcfield)
    : field(in_field)
    , expr(in_expr)
    , srcfield(in_srcfield)
 {
}

// --- dmmeta.Svtype..Init
// Set all fields to initial values.
inline void dmmeta::Svtype_Init(dmmeta::Svtype& parent) {
    parent.maxwid = i32(0);
    parent.fixedwid1 = i32(0);
    parent.fixedwid2 = i32(0);
}

// --- dmmeta.Svtype..Ctor
inline  dmmeta::Svtype::Svtype() {
    dmmeta::Svtype_Init(*this);
}

// --- dmmeta.Tary..Init
// Set all fields to initial values.
inline void dmmeta::Tary_Init(dmmeta::Tary& parent) {
    parent.aliased = bool(false);
}

// --- dmmeta.Tary..Ctor
inline  dmmeta::Tary::Tary() {
    dmmeta::Tary_Init(*this);
}

// --- dmmeta.Thash..Init
// Set all fields to initial values.
inline void dmmeta::Thash_Init(dmmeta::Thash& parent) {
    parent.unique = bool(true);
}

// --- dmmeta.Thash..Ctor
inline  dmmeta::Thash::Thash() {
    dmmeta::Thash_Init(*this);
}

// --- dmmeta.Thash..FieldwiseCtor
inline  dmmeta::Thash::Thash(const algo::strptr& in_field, const algo::strptr& in_hashfld, bool in_unique, const algo::Comment& in_comment)
    : field(in_field)
    , hashfld(in_hashfld)
    , unique(in_unique)
    , comment(in_comment)
 {
}

// --- dmmeta.Tracefld..Ctor
inline  dmmeta::Tracefld::Tracefld() {
}

// --- dmmeta.Tracefld..FieldwiseCtor
inline  dmmeta::Tracefld::Tracefld(const algo::strptr& in_tracefld, const algo::Comment& in_comment)
    : tracefld(in_tracefld)
    , comment(in_comment)
 {
}

// --- dmmeta.Tracerec..Ctor
inline  dmmeta::Tracerec::Tracerec() {
}

// --- dmmeta.Tracerec..FieldwiseCtor
inline  dmmeta::Tracerec::Tracerec(const algo::strptr& in_tracerec, const algo::Comment& in_comment)
    : tracerec(in_tracerec)
    , comment(in_comment)
 {
}

// --- dmmeta.Typefld..Ctor
inline  dmmeta::Typefld::Typefld() {
}

// --- dmmeta.Typefld..FieldwiseCtor
inline  dmmeta::Typefld::Typefld(const algo::strptr& in_field, const algo::Comment& in_comment)
    : field(in_field)
    , comment(in_comment)
 {
}

// --- dmmeta.Usertracefld..Ctor
inline  dmmeta::Usertracefld::Usertracefld() {
}

// --- dmmeta.Xref..Init
// Set all fields to initial values.
inline void dmmeta::Xref_Init(dmmeta::Xref& parent) {
    parent.inscond = algo::CppExpr("true");
}

// --- dmmeta.Xref..Ctor
inline  dmmeta::Xref::Xref() {
    dmmeta::Xref_Init(*this);
}

// --- dmmeta.Xref..FieldwiseCtor
inline  dmmeta::Xref::Xref(const algo::strptr& in_field, const algo::CppExpr& in_inscond, const algo::strptr& in_via)
    : field(in_field)
    , inscond(in_inscond)
    , via(in_via)
 {
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Anonfld &row) {// cfmt:dmmeta.Anonfld.String
    dmmeta::Anonfld_Print(const_cast<dmmeta::Anonfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Argvtype &row) {// cfmt:dmmeta.Argvtype.String
    dmmeta::Argvtype_Print(const_cast<dmmeta::Argvtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Basepool &row) {// cfmt:dmmeta.Basepool.String
    dmmeta::Basepool_Print(const_cast<dmmeta::Basepool&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Bitfld &row) {// cfmt:dmmeta.Bitfld.String
    dmmeta::Bitfld_Print(const_cast<dmmeta::Bitfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Buftype &row) {// cfmt:dmmeta.Buftype.String
    dmmeta::Buftype_Print(const_cast<dmmeta::Buftype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cafter &row) {// cfmt:dmmeta.Cafter.String
    dmmeta::Cafter_Print(const_cast<dmmeta::Cafter&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cascdel &row) {// cfmt:dmmeta.Cascdel.String
    dmmeta::Cascdel_Print(const_cast<dmmeta::Cascdel&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ccmp &row) {// cfmt:dmmeta.Ccmp.String
    dmmeta::Ccmp_Print(const_cast<dmmeta::Ccmp&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cdflt &row) {// cfmt:dmmeta.Cdflt.String
    dmmeta::Cdflt_Print(const_cast<dmmeta::Cdflt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cextern &row) {// cfmt:dmmeta.Cextern.String
    dmmeta::Cextern_Print(const_cast<dmmeta::Cextern&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cfast &row) {// cfmt:dmmeta.Cfast.String
    dmmeta::Cfast_Print(const_cast<dmmeta::Cfast&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cfmt &row) {// cfmt:dmmeta.Cfmt.String
    dmmeta::Cfmt_Print(const_cast<dmmeta::Cfmt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cget &row) {// cfmt:dmmeta.Cget.String
    dmmeta::Cget_Print(const_cast<dmmeta::Cget&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Charset &row) {// cfmt:dmmeta.Charset.String
    dmmeta::Charset_Print(const_cast<dmmeta::Charset&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Chash &row) {// cfmt:dmmeta.Chash.String
    dmmeta::Chash_Print(const_cast<dmmeta::Chash&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cppfunc &row) {// cfmt:dmmeta.Cppfunc.String
    dmmeta::Cppfunc_Print(const_cast<dmmeta::Cppfunc&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cppkeyword &row) {// cfmt:dmmeta.Cppkeyword.String
    dmmeta::Cppkeyword_Print(const_cast<dmmeta::Cppkeyword&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cpptype &row) {// cfmt:dmmeta.Cpptype.String
    dmmeta::Cpptype_Print(const_cast<dmmeta::Cpptype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Csize &row) {// cfmt:dmmeta.Csize.String
    dmmeta::Csize_Print(const_cast<dmmeta::Csize&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cstr &row) {// cfmt:dmmeta.Cstr.String
    dmmeta::Cstr_Print(const_cast<dmmeta::Cstr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ctype &row) {// cfmt:dmmeta.Ctype.String
    dmmeta::Ctype_Print(const_cast<dmmeta::Ctype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ctypelen &row) {// cfmt:dmmeta.Ctypelen.String
    dmmeta::Ctypelen_Print(const_cast<dmmeta::Ctypelen&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispatch &row) {// cfmt:dmmeta.Dispatch.String
    dmmeta::Dispatch_Print(const_cast<dmmeta::Dispatch&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::DispatchMsg &row) {// cfmt:dmmeta.DispatchMsg.String
    dmmeta::DispatchMsg_Print(const_cast<dmmeta::DispatchMsg&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispctx &row) {// cfmt:dmmeta.Dispctx.String
    dmmeta::Dispctx_Print(const_cast<dmmeta::Dispctx&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispfilter &row) {// cfmt:dmmeta.Dispfilter.String
    dmmeta::Dispfilter_Print(const_cast<dmmeta::Dispfilter&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispsig &row) {// cfmt:dmmeta.Dispsig.String
    dmmeta::Dispsig_Print(const_cast<dmmeta::Dispsig&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispsigcheck &row) {// cfmt:dmmeta.Dispsigcheck.String
    dmmeta::Dispsigcheck_Print(const_cast<dmmeta::Dispsigcheck&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Disptrace &row) {// cfmt:dmmeta.Disptrace.String
    dmmeta::Disptrace_Print(const_cast<dmmeta::Disptrace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Falias &row) {// cfmt:dmmeta.Falias.String
    dmmeta::Falias_Print(const_cast<dmmeta::Falias&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fastenc &row) {// cfmt:dmmeta.Fastenc.String
    dmmeta::Fastenc_Print(const_cast<dmmeta::Fastenc&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fastinstr &row) {// cfmt:dmmeta.Fastinstr.String
    dmmeta::Fastinstr_Print(const_cast<dmmeta::Fastinstr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fastop &row) {// cfmt:dmmeta.Fastop.String
    dmmeta::Fastop_Print(const_cast<dmmeta::Fastop&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbase &row) {// cfmt:dmmeta.Fbase.String
    dmmeta::Fbase_Print(const_cast<dmmeta::Fbase&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbigend &row) {// cfmt:dmmeta.Fbigend.String
    dmmeta::Fbigend_Print(const_cast<dmmeta::Fbigend&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbitset &row) {// cfmt:dmmeta.Fbitset.String
    dmmeta::Fbitset_Print(const_cast<dmmeta::Fbitset&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbuf &row) {// cfmt:dmmeta.Fbuf.String
    dmmeta::Fbuf_Print(const_cast<dmmeta::Fbuf&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbufdir &row) {// cfmt:dmmeta.Fbufdir.String
    dmmeta::Fbufdir_Print(const_cast<dmmeta::Fbufdir&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbuftype &row) {// cfmt:dmmeta.Fbuftype.String
    dmmeta::Fbuftype_Print(const_cast<dmmeta::Fbuftype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcast &row) {// cfmt:dmmeta.Fcast.String
    dmmeta::Fcast_Print(const_cast<dmmeta::Fcast&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcleanup &row) {// cfmt:dmmeta.Fcleanup.String
    dmmeta::Fcleanup_Print(const_cast<dmmeta::Fcleanup&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcmap &row) {// cfmt:dmmeta.Fcmap.String
    dmmeta::Fcmap_Print(const_cast<dmmeta::Fcmap&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcmdline &row) {// cfmt:dmmeta.Fcmdline.String
    dmmeta::Fcmdline_Print(const_cast<dmmeta::Fcmdline&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcmp &row) {// cfmt:dmmeta.Fcmp.String
    dmmeta::Fcmp_Print(const_cast<dmmeta::Fcmp&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcompact &row) {// cfmt:dmmeta.Fcompact.String
    dmmeta::Fcompact_Print(const_cast<dmmeta::Fcompact&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fconst &row) {// cfmt:dmmeta.Fconst.String
    dmmeta::Fconst_Print(const_cast<dmmeta::Fconst&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fcurs &row) {// cfmt:dmmeta.Fcurs.String
    dmmeta::Fcurs_Print(const_cast<dmmeta::Fcurs&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fdec &row) {// cfmt:dmmeta.Fdec.String
    dmmeta::Fdec_Print(const_cast<dmmeta::Fdec&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fdelay &row) {// cfmt:dmmeta.Fdelay.String
    dmmeta::Fdelay_Print(const_cast<dmmeta::Fdelay&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ffast &row) {// cfmt:dmmeta.Ffast.String
    dmmeta::Ffast_Print(const_cast<dmmeta::Ffast&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fflag &row) {// cfmt:dmmeta.Fflag.String
    dmmeta::Fflag_Print(const_cast<dmmeta::Fflag&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Field &row) {// cfmt:dmmeta.Field.String
    dmmeta::Field_Print(const_cast<dmmeta::Field&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::FieldId &row) {// cfmt:dmmeta.FieldId.String
    dmmeta::FieldId_Print(const_cast<dmmeta::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Findrem &row) {// cfmt:dmmeta.Findrem.String
    dmmeta::Findrem_Print(const_cast<dmmeta::Findrem&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Finput &row) {// cfmt:dmmeta.Finput.String
    dmmeta::Finput_Print(const_cast<dmmeta::Finput&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fldoffset &row) {// cfmt:dmmeta.Fldoffset.String
    dmmeta::Fldoffset_Print(const_cast<dmmeta::Fldoffset&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Floadtuples &row) {// cfmt:dmmeta.Floadtuples.String
    dmmeta::Floadtuples_Print(const_cast<dmmeta::Floadtuples&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fnoremove &row) {// cfmt:dmmeta.Fnoremove.String
    dmmeta::Fnoremove_Print(const_cast<dmmeta::Fnoremove&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Foutput &row) {// cfmt:dmmeta.Foutput.String
    dmmeta::Foutput_Print(const_cast<dmmeta::Foutput&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fprefix &row) {// cfmt:dmmeta.Fprefix.String
    dmmeta::Fprefix_Print(const_cast<dmmeta::Fprefix&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fregx &row) {// cfmt:dmmeta.Fregx.String
    dmmeta::Fregx_Print(const_cast<dmmeta::Fregx&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fsort &row) {// cfmt:dmmeta.Fsort.String
    dmmeta::Fsort_Print(const_cast<dmmeta::Fsort&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fstep &row) {// cfmt:dmmeta.Fstep.String
    dmmeta::Fstep_Print(const_cast<dmmeta::Fstep&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ftrace &row) {// cfmt:dmmeta.Ftrace.String
    dmmeta::Ftrace_Print(const_cast<dmmeta::Ftrace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ftuple &row) {// cfmt:dmmeta.Ftuple.String
    dmmeta::Ftuple_Print(const_cast<dmmeta::Ftuple&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Func &row) {// cfmt:dmmeta.Func.String
    dmmeta::Func_Print(const_cast<dmmeta::Func&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Funique &row) {// cfmt:dmmeta.Funique.String
    dmmeta::Funique_Print(const_cast<dmmeta::Funique&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fuserinit &row) {// cfmt:dmmeta.Fuserinit.String
    dmmeta::Fuserinit_Print(const_cast<dmmeta::Fuserinit&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fwddecl &row) {// cfmt:dmmeta.Fwddecl.String
    dmmeta::Fwddecl_Print(const_cast<dmmeta::Fwddecl&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Gconst &row) {// cfmt:dmmeta.Gconst.String
    dmmeta::Gconst_Print(const_cast<dmmeta::Gconst&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Gstatic &row) {// cfmt:dmmeta.Gstatic.String
    dmmeta::Gstatic_Print(const_cast<dmmeta::Gstatic&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Gsymbol &row) {// cfmt:dmmeta.Gsymbol.String
    dmmeta::Gsymbol_Print(const_cast<dmmeta::Gsymbol&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Hashtype &row) {// cfmt:dmmeta.Hashtype.String
    dmmeta::Hashtype_Print(const_cast<dmmeta::Hashtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Hook &row) {// cfmt:dmmeta.Hook.String
    dmmeta::Hook_Print(const_cast<dmmeta::Hook&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Inlary &row) {// cfmt:dmmeta.Inlary.String
    dmmeta::Inlary_Print(const_cast<dmmeta::Inlary&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Lenfld &row) {// cfmt:dmmeta.Lenfld.String
    dmmeta::Lenfld_Print(const_cast<dmmeta::Lenfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Listtype &row) {// cfmt:dmmeta.Listtype.String
    dmmeta::Listtype_Print(const_cast<dmmeta::Listtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Llist &row) {// cfmt:dmmeta.Llist.String
    dmmeta::Llist_Print(const_cast<dmmeta::Llist&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Logcat &row) {// cfmt:dmmeta.Logcat.String
    dmmeta::Logcat_Print(const_cast<dmmeta::Logcat&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Main &row) {// cfmt:dmmeta.Main.String
    dmmeta::Main_Print(const_cast<dmmeta::Main&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Msgtype &row) {// cfmt:dmmeta.Msgtype.String
    dmmeta::Msgtype_Print(const_cast<dmmeta::Msgtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nocascdel &row) {// cfmt:dmmeta.Nocascdel.String
    dmmeta::Nocascdel_Print(const_cast<dmmeta::Nocascdel&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nossimfile &row) {// cfmt:dmmeta.Nossimfile.String
    dmmeta::Nossimfile_Print(const_cast<dmmeta::Nossimfile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Noxref &row) {// cfmt:dmmeta.Noxref.String
    dmmeta::Noxref_Print(const_cast<dmmeta::Noxref&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ns &row) {// cfmt:dmmeta.Ns.String
    dmmeta::Ns_Print(const_cast<dmmeta::Ns&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nscpp &row) {// cfmt:dmmeta.Nscpp.String
    dmmeta::Nscpp_Print(const_cast<dmmeta::Nscpp&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsdb &row) {// cfmt:dmmeta.Nsdb.String
    dmmeta::Nsdb_Print(const_cast<dmmeta::Nsdb&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsfast &row) {// cfmt:dmmeta.Nsfast.String
    dmmeta::Nsfast_Print(const_cast<dmmeta::Nsfast&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsinclude &row) {// cfmt:dmmeta.Nsinclude.String
    dmmeta::Nsinclude_Print(const_cast<dmmeta::Nsinclude&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsproto &row) {// cfmt:dmmeta.Nsproto.String
    dmmeta::Nsproto_Print(const_cast<dmmeta::Nsproto&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nstype &row) {// cfmt:dmmeta.Nstype.String
    dmmeta::Nstype_Print(const_cast<dmmeta::Nstype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsversion &row) {// cfmt:dmmeta.Nsversion.String
    dmmeta::Nsversion_Print(const_cast<dmmeta::Nsversion&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsx &row) {// cfmt:dmmeta.Nsx.String
    dmmeta::Nsx_Print(const_cast<dmmeta::Nsx&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Numstr &row) {// cfmt:dmmeta.Numstr.String
    dmmeta::Numstr_Print(const_cast<dmmeta::Numstr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Pack &row) {// cfmt:dmmeta.Pack.String
    dmmeta::Pack_Print(const_cast<dmmeta::Pack&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Pmaskfld &row) {// cfmt:dmmeta.Pmaskfld.String
    dmmeta::Pmaskfld_Print(const_cast<dmmeta::Pmaskfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::PmaskfldMember &row) {// cfmt:dmmeta.PmaskfldMember.String
    dmmeta::PmaskfldMember_Print(const_cast<dmmeta::PmaskfldMember&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Pnew &row) {// cfmt:dmmeta.Pnew.String
    dmmeta::Pnew_Print(const_cast<dmmeta::Pnew&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Printfmt &row) {// cfmt:dmmeta.Printfmt.String
    dmmeta::Printfmt_Print(const_cast<dmmeta::Printfmt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ptrary &row) {// cfmt:dmmeta.Ptrary.String
    dmmeta::Ptrary_Print(const_cast<dmmeta::Ptrary&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Reftype &row) {// cfmt:dmmeta.Reftype.String
    dmmeta::Reftype_Print(const_cast<dmmeta::Reftype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Rowid &row) {// cfmt:dmmeta.Rowid.String
    dmmeta::Rowid_Print(const_cast<dmmeta::Rowid&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Smallstr &row) {// cfmt:dmmeta.Smallstr.String
    dmmeta::Smallstr_Print(const_cast<dmmeta::Smallstr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Sortfld &row) {// cfmt:dmmeta.Sortfld.String
    dmmeta::Sortfld_Print(const_cast<dmmeta::Sortfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Sorttype &row) {// cfmt:dmmeta.Sorttype.String
    dmmeta::Sorttype_Print(const_cast<dmmeta::Sorttype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Sqltype &row) {// cfmt:dmmeta.Sqltype.String
    dmmeta::Sqltype_Print(const_cast<dmmeta::Sqltype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimfile &row) {// cfmt:dmmeta.Ssimfile.String
    dmmeta::Ssimfile_Print(const_cast<dmmeta::Ssimfile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimreq &row) {// cfmt:dmmeta.Ssimreq.String
    dmmeta::Ssimreq_Print(const_cast<dmmeta::Ssimreq&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimsort &row) {// cfmt:dmmeta.Ssimsort.String
    dmmeta::Ssimsort_Print(const_cast<dmmeta::Ssimsort&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimvolatile &row) {// cfmt:dmmeta.Ssimvolatile.String
    dmmeta::Ssimvolatile_Print(const_cast<dmmeta::Ssimvolatile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Steptype &row) {// cfmt:dmmeta.Steptype.String
    dmmeta::Steptype_Print(const_cast<dmmeta::Steptype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Strtype &row) {// cfmt:dmmeta.Strtype.String
    dmmeta::Strtype_Print(const_cast<dmmeta::Strtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Substr &row) {// cfmt:dmmeta.Substr.String
    dmmeta::Substr_Print(const_cast<dmmeta::Substr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Svtype &row) {// cfmt:dmmeta.Svtype.String
    dmmeta::Svtype_Print(const_cast<dmmeta::Svtype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Tary &row) {// cfmt:dmmeta.Tary.String
    dmmeta::Tary_Print(const_cast<dmmeta::Tary&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Thash &row) {// cfmt:dmmeta.Thash.String
    dmmeta::Thash_Print(const_cast<dmmeta::Thash&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Tracefld &row) {// cfmt:dmmeta.Tracefld.String
    dmmeta::Tracefld_Print(const_cast<dmmeta::Tracefld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Tracerec &row) {// cfmt:dmmeta.Tracerec.String
    dmmeta::Tracerec_Print(const_cast<dmmeta::Tracerec&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Typefld &row) {// cfmt:dmmeta.Typefld.String
    dmmeta::Typefld_Print(const_cast<dmmeta::Typefld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Usertracefld &row) {// cfmt:dmmeta.Usertracefld.String
    dmmeta::Usertracefld_Print(const_cast<dmmeta::Usertracefld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Xref &row) {// cfmt:dmmeta.Xref.String
    dmmeta::Xref_Print(const_cast<dmmeta::Xref&>(row), str);
    return str;
}
