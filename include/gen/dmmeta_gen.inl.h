//
// include/gen/dmmeta_gen.inl.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/algo_gen.inl.h"
//#pragma endinclude
inline dmmeta::Anonfld::Anonfld(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Anonfld::Anonfld() {
}

inline dmmeta::Argvtype::Argvtype() {
}

inline dmmeta::Basepool::Basepool(const algo::strptr&            in_field
        ,const algo::strptr&            in_base)
    : field(in_field)
    , base(in_base)
{
}
inline dmmeta::Basepool::Basepool() {
}

inline dmmeta::Bitfld::Bitfld(const algo::strptr&            in_field
        ,i32                            in_offset
        ,i32                            in_width
        ,const algo::strptr&            in_srcfield
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , offset(in_offset)
    , width(in_width)
    , srcfield(in_srcfield)
    , comment(in_comment)
{
}
inline dmmeta::Bitfld::Bitfld() {
    dmmeta::Bitfld_Init(*this);
}


// --- dmmeta.Bitfld..Init
// Set all fields to initial values.
inline void dmmeta::Bitfld_Init(dmmeta::Bitfld& parent) {
    parent.offset = i32(0);
    parent.width = i32(0);
}
inline dmmeta::Buftype::Buftype(const algo::strptr&            in_pnewtype
        ,const algo::Comment&           in_comment)
    : pnewtype(in_pnewtype)
    , comment(in_comment)
{
}
inline dmmeta::Buftype::Buftype() {
}

inline dmmeta::BuftypeId::BuftypeId(u8                             in_value)
    : value(in_value)
{
}
inline dmmeta::BuftypeId::BuftypeId(dmmeta_BuftypeIdEnum arg) { this->value = u8(arg); }
inline dmmeta::BuftypeId::BuftypeId() {
    dmmeta::BuftypeId_Init(*this);
}


// --- dmmeta.BuftypeId.value.GetEnum
// Get value of field as enum type
inline dmmeta_BuftypeIdEnum dmmeta::value_GetEnum(const dmmeta::BuftypeId& parent) {
    return dmmeta_BuftypeIdEnum(parent.value);
}

// --- dmmeta.BuftypeId.value.SetEnum
// Set value of field from enum type.
inline void dmmeta::value_SetEnum(dmmeta::BuftypeId& parent, dmmeta_BuftypeIdEnum rhs) {
    parent.value = u8(rhs);
}

// --- dmmeta.BuftypeId.value.Cast
inline dmmeta::BuftypeId::operator dmmeta_BuftypeIdEnum () const {
    return dmmeta_BuftypeIdEnum((*this).value);
}

// --- dmmeta.BuftypeId..Init
// Set all fields to initial values.
inline void dmmeta::BuftypeId_Init(dmmeta::BuftypeId& parent) {
    parent.value = u8(0);
}
inline dmmeta::Cafter::Cafter() {
}

inline dmmeta::Cascdel::Cascdel(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Cascdel::Cascdel() {
}

inline dmmeta::Ccmp::Ccmp(const algo::strptr&            in_ctype
        ,bool                           in_extrn
        ,bool                           in_genop
        ,bool                           in_order
        ,bool                           in_minmax
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , extrn(in_extrn)
    , genop(in_genop)
    , order(in_order)
    , minmax(in_minmax)
    , comment(in_comment)
{
}
inline dmmeta::Ccmp::Ccmp() {
    dmmeta::Ccmp_Init(*this);
}


// --- dmmeta.Ccmp..Init
// Set all fields to initial values.
inline void dmmeta::Ccmp_Init(dmmeta::Ccmp& parent) {
    parent.extrn = bool(false);
    parent.genop = bool(false);
    parent.order = bool(false);
    parent.minmax = bool(false);
}
inline dmmeta::Cdecl::Cdecl() {
    dmmeta::Cdecl_Init(*this);
}


// --- dmmeta.Cdecl..Init
// Set all fields to initial values.
inline void dmmeta::Cdecl_Init(dmmeta::Cdecl& parent) {
    parent.fwddecl = bool(false);
    parent.gen_using = bool(false);
}
inline dmmeta::CppExpr::CppExpr(const algo::strptr&            in_value)
    : value(in_value)
{
}
inline dmmeta::CppExpr::CppExpr() {
}

inline dmmeta::Cdflt::Cdflt() {
}

inline dmmeta::Cextern::Cextern(const algo::strptr&            in_ctype
        ,bool                           in_initmemset
        ,bool                           in_isstruct)
    : ctype(in_ctype)
    , initmemset(in_initmemset)
    , isstruct(in_isstruct)
{
}
inline dmmeta::Cextern::Cextern() {
    dmmeta::Cextern_Init(*this);
}


// --- dmmeta.Cextern..Init
// Set all fields to initial values.
inline void dmmeta::Cextern_Init(dmmeta::Cextern& parent) {
    parent.initmemset = bool(false);
    parent.isstruct = bool(false);
}
inline dmmeta::Cfmt::Cfmt(const algo::strptr&            in_cfmt
        ,const algo::strptr&            in_printfmt
        ,bool                           in_read
        ,bool                           in_print
        ,const algo::strptr&            in_sep
        ,bool                           in_genop
        ,const algo::Comment&           in_comment)
    : cfmt(in_cfmt)
    , printfmt(in_printfmt)
    , read(in_read)
    , print(in_print)
    , sep(in_sep)
    , genop(in_genop)
    , comment(in_comment)
{
}
inline dmmeta::Cfmt::Cfmt() {
    dmmeta::Cfmt_Init(*this);
}


// --- dmmeta.Cfmt..Init
// Set all fields to initial values.
inline void dmmeta::Cfmt_Init(dmmeta::Cfmt& parent) {
    parent.read = bool(false);
    parent.print = bool(false);
    parent.genop = bool(false);
}
inline dmmeta::Cget::Cget() {
}

inline dmmeta::Charset::Charset() {
    dmmeta::Charset_Init(*this);
}


// --- dmmeta.Charset..Init
// Set all fields to initial values.
inline void dmmeta::Charset_Init(dmmeta::Charset& parent) {
    parent.charrange = bool(false);
    parent.calc = bool(false);
}
inline dmmeta::Chash::Chash(const algo::strptr&            in_ctype
        ,const algo::strptr&            in_hashtype
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , hashtype(in_hashtype)
    , comment(in_comment)
{
}
inline dmmeta::Chash::Chash() {
}

inline dmmeta::Cppfunc::Cppfunc() {
}

inline dmmeta::Cppkeyword::Cppkeyword(const algo::strptr&            in_cppkeyword)
    : cppkeyword(in_cppkeyword)
{
}
inline dmmeta::Cppkeyword::Cppkeyword() {
}

inline dmmeta::Cpptype::Cpptype(const algo::strptr&            in_ctype
        ,bool                           in_ctor
        ,bool                           in_dtor
        ,bool                           in_cheap_copy)
    : ctype(in_ctype)
    , ctor(in_ctor)
    , dtor(in_dtor)
    , cheap_copy(in_cheap_copy)
{
}
inline dmmeta::Cpptype::Cpptype() {
    dmmeta::Cpptype_Init(*this);
}


// --- dmmeta.Cpptype..Init
// Set all fields to initial values.
inline void dmmeta::Cpptype_Init(dmmeta::Cpptype& parent) {
    parent.ctor = bool(false);
    parent.dtor = bool(true);
    parent.cheap_copy = bool(false);
}
inline dmmeta::Csize::Csize(const algo::strptr&            in_ctype
        ,u32                            in_size
        ,u32                            in_alignment
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , size(in_size)
    , alignment(in_alignment)
    , comment(in_comment)
{
}
inline dmmeta::Csize::Csize() {
    dmmeta::Csize_Init(*this);
}


// --- dmmeta.Csize..Init
// Set all fields to initial values.
inline void dmmeta::Csize_Init(dmmeta::Csize& parent) {
    parent.size = u32(0);
    parent.alignment = u32(1);
}
inline dmmeta::Cstr::Cstr() {
    dmmeta::Cstr_Init(*this);
}


// --- dmmeta.Cstr..Init
// Set all fields to initial values.
inline void dmmeta::Cstr_Init(dmmeta::Cstr& parent) {
    parent.strequiv = bool(false);
}
inline dmmeta::Ctype::Ctype(const algo::strptr&            in_ctype
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , comment(in_comment)
{
}
inline dmmeta::Ctype::Ctype() {
}

inline dmmeta::Ctypelen::Ctypelen(const algo::strptr&            in_ctype
        ,u32                            in_len
        ,i32                            in_alignment
        ,i32                            in_padbytes)
    : ctype(in_ctype)
    , len(in_len)
    , alignment(in_alignment)
    , padbytes(in_padbytes)
{
}
inline dmmeta::Ctypelen::Ctypelen() {
    dmmeta::Ctypelen_Init(*this);
}


// --- dmmeta.Ctypelen..Init
// Set all fields to initial values.
inline void dmmeta::Ctypelen_Init(dmmeta::Ctypelen& parent) {
    parent.len = u32(0);
    parent.alignment = i32(0);
    parent.padbytes = i32(0);
}
inline dmmeta::Dispatch::Dispatch(const algo::strptr&            in_dispatch
        ,bool                           in_unk
        ,bool                           in_read
        ,bool                           in_print
        ,bool                           in_haslen
        ,bool                           in_call
        ,bool                           in_strict
        ,const algo::Comment&           in_comment)
    : dispatch(in_dispatch)
    , unk(in_unk)
    , read(in_read)
    , print(in_print)
    , haslen(in_haslen)
    , call(in_call)
    , strict(in_strict)
    , comment(in_comment)
{
}
inline dmmeta::Dispatch::Dispatch() {
    dmmeta::Dispatch_Init(*this);
}

inline dmmeta::DispatchMsg::DispatchMsg(const algo::strptr&            in_dispatch_msg
        ,const algo::Comment&           in_comment)
    : dispatch_msg(in_dispatch_msg)
    , comment(in_comment)
{
}
inline dmmeta::DispatchMsg::DispatchMsg() {
}

inline dmmeta::Dispctx::Dispctx() {
}

inline dmmeta::Dispfilter::Dispfilter() {
    dmmeta::Dispfilter_Init(*this);
}


// --- dmmeta.Dispfilter..Init
// Set all fields to initial values.
inline void dmmeta::Dispfilter_Init(dmmeta::Dispfilter& parent) {
    parent.match_all = bool(false);
}
inline dmmeta::Dispsig::Dispsig() {
}

inline dmmeta::Dispsigcheck::Dispsigcheck(const algo::strptr&            in_dispsig
        ,const algo::Sha1sig&           in_signature)
    : dispsig(in_dispsig)
    , signature(in_signature)
{
}
inline dmmeta::Dispsigcheck::Dispsigcheck() {
}

inline dmmeta::Disptrace::Disptrace() {
    dmmeta::Disptrace_Init(*this);
}


// --- dmmeta.Disptrace..Init
// Set all fields to initial values.
inline void dmmeta::Disptrace_Init(dmmeta::Disptrace& parent) {
    parent.cycle = bool(false);
}
inline dmmeta::Fbase::Fbase() {
    dmmeta::Fbase_Init(*this);
}


// --- dmmeta.Fbase..Init
// Set all fields to initial values.
inline void dmmeta::Fbase_Init(dmmeta::Fbase& parent) {
    parent.stripcomment = bool(false);
}
inline dmmeta::Fbigend::Fbigend() {
}

inline dmmeta::Fbitset::Fbitset(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Fbitset::Fbitset() {
}

inline dmmeta::Fbuf::Fbuf() {
    dmmeta::Fbuf_Init(*this);
}


// --- dmmeta.Fbuf..Init
// Set all fields to initial values.
inline void dmmeta::Fbuf_Init(dmmeta::Fbuf& parent) {
    parent.max = u32(0);
}
inline dmmeta::Fbufdir::Fbufdir() {
    dmmeta::Fbufdir_Init(*this);
}


// --- dmmeta.Fbufdir..Init
// Set all fields to initial values.
inline void dmmeta::Fbufdir_Init(dmmeta::Fbufdir& parent) {
    parent.read = bool(false);
}
inline dmmeta::Fbuftype::Fbuftype() {
    dmmeta::Fbuftype_Init(*this);
}


// --- dmmeta.Fbuftype..Init
// Set all fields to initial values.
inline void dmmeta::Fbuftype_Init(dmmeta::Fbuftype& parent) {
    parent.getmsg = bool(false);
    parent.skipbytes = bool(false);
    parent.read = bool(false);
}
inline dmmeta::Fcast::Fcast(const algo::strptr&            in_field
        ,const algo::strptr&            in_expr
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , expr(in_expr)
    , comment(in_comment)
{
}
inline dmmeta::Fcast::Fcast() {
}

inline dmmeta::Fcleanup::Fcleanup() {
}

inline dmmeta::Fcmap::Fcmap() {
    dmmeta::Fcmap_Init(*this);
}


// --- dmmeta.Fcmap..Init
// Set all fields to initial values.
inline void dmmeta::Fcmap_Init(dmmeta::Fcmap& parent) {
    parent.bidir = bool(true);
}
inline dmmeta::Fcmdline::Fcmdline() {
    dmmeta::Fcmdline_Init(*this);
}


// --- dmmeta.Fcmdline..Init
// Set all fields to initial values.
inline void dmmeta::Fcmdline_Init(dmmeta::Fcmdline& parent) {
    parent.read = bool(true);
}
inline dmmeta::Fcmp::Fcmp(const algo::strptr&            in_field
        ,bool                           in_versionsort
        ,bool                           in_casesens
        ,bool                           in_extrn
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , versionsort(in_versionsort)
    , casesens(in_casesens)
    , extrn(in_extrn)
    , comment(in_comment)
{
}
inline dmmeta::Fcmp::Fcmp() {
    dmmeta::Fcmp_Init(*this);
}


// --- dmmeta.Fcmp..Init
// Set all fields to initial values.
inline void dmmeta::Fcmp_Init(dmmeta::Fcmp& parent) {
    parent.versionsort = bool(false);
    parent.casesens = bool(true);
    parent.extrn = bool(false);
}
inline dmmeta::Fcompact::Fcompact() {
}

inline dmmeta::Fconst::Fconst(const algo::strptr&            in_fconst
        ,const dmmeta::CppExpr&         in_value
        ,const algo::Comment&           in_comment)
    : fconst(in_fconst)
    , value(in_value)
    , comment(in_comment)
{
}
inline dmmeta::Fconst::Fconst() {
}


// --- dmmeta.Fconst.value.Cast
inline dmmeta::Fconst::operator dmmeta::CppExpr () const {
    return dmmeta::CppExpr((*this).value);
}
inline dmmeta::Fcurs::Fcurs() {
}

inline dmmeta::Fdec::Fdec() {
    dmmeta::Fdec_Init(*this);
}


// --- dmmeta.Fdec..Init
// Set all fields to initial values.
inline void dmmeta::Fdec_Init(dmmeta::Fdec& parent) {
    parent.nplace = i32(0);
    parent.fixedfmt = bool(false);
}
inline dmmeta::Fdelay::Fdelay() {
    dmmeta::Fdelay_Init(*this);
}


// --- dmmeta.Fdelay..Init
// Set all fields to initial values.
inline void dmmeta::Fdelay_Init(dmmeta::Fdelay& parent) {
    parent.scale = bool(false);
}
inline dmmeta::Field::Field(const algo::strptr&            in_field
        ,const algo::strptr&            in_arg
        ,const algo::strptr&            in_reftype
        ,const dmmeta::CppExpr&         in_dflt
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , arg(in_arg)
    , reftype(in_reftype)
    , dflt(in_dflt)
    , comment(in_comment)
{
}
inline dmmeta::Field::Field() {
    dmmeta::Field_Init(*this);
}


// --- dmmeta.Field..Init
// Set all fields to initial values.
inline void dmmeta::Field_Init(dmmeta::Field& parent) {
    parent.reftype = algo::strptr("Val");
}
inline dmmeta::FieldId::FieldId(i32                            in_value)
    : value(in_value)
{
}
inline dmmeta::FieldId::FieldId(dmmeta_FieldIdEnum arg) { this->value = i32(arg); }
inline dmmeta::FieldId::FieldId() {
    dmmeta::FieldId_Init(*this);
}


// --- dmmeta.FieldId.value.GetEnum
// Get value of field as enum type
inline dmmeta_FieldIdEnum dmmeta::value_GetEnum(const dmmeta::FieldId& parent) {
    return dmmeta_FieldIdEnum(parent.value);
}

// --- dmmeta.FieldId.value.SetEnum
// Set value of field from enum type.
inline void dmmeta::value_SetEnum(dmmeta::FieldId& parent, dmmeta_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- dmmeta.FieldId.value.Cast
inline dmmeta::FieldId::operator dmmeta_FieldIdEnum () const {
    return dmmeta_FieldIdEnum((*this).value);
}

// --- dmmeta.FieldId..Init
// Set all fields to initial values.
inline void dmmeta::FieldId_Init(dmmeta::FieldId& parent) {
    parent.value = i32(-1);
}
inline dmmeta::Findrem::Findrem() {
}

inline dmmeta::Finput::Finput(const algo::strptr&            in_field
        ,bool                           in_extrn
        ,bool                           in_update
        ,bool                           in_strict
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , extrn(in_extrn)
    , update(in_update)
    , strict(in_strict)
    , comment(in_comment)
{
}
inline dmmeta::Finput::Finput() {
    dmmeta::Finput_Init(*this);
}


// --- dmmeta.Finput..Init
// Set all fields to initial values.
inline void dmmeta::Finput_Init(dmmeta::Finput& parent) {
    parent.extrn = bool(false);
    parent.update = bool(false);
    parent.strict = bool(true);
}
inline dmmeta::Fldoffset::Fldoffset(const algo::strptr&            in_field
        ,i32                            in_offset)
    : field(in_field)
    , offset(in_offset)
{
}
inline dmmeta::Fldoffset::Fldoffset() {
    dmmeta::Fldoffset_Init(*this);
}


// --- dmmeta.Fldoffset..Init
// Set all fields to initial values.
inline void dmmeta::Fldoffset_Init(dmmeta::Fldoffset& parent) {
    parent.offset = i32(0);
}
inline dmmeta::Floadtuples::Floadtuples() {
}

inline dmmeta::Fnoremove::Fnoremove() {
}

inline dmmeta::Foutput::Foutput() {
}

inline dmmeta::Fprefix::Fprefix() {
}

inline dmmeta::Fregx::Fregx() {
    dmmeta::Fregx_Init(*this);
}


// --- dmmeta.Fregx..Init
// Set all fields to initial values.
inline void dmmeta::Fregx_Init(dmmeta::Fregx& parent) {
    parent.partial = bool(false);
}
inline dmmeta::Fsort::Fsort() {
}

inline dmmeta::Fstep::Fstep() {
}

inline dmmeta::Ftrace::Ftrace() {
}

inline dmmeta::Ftuple::Ftuple() {
}

inline dmmeta::Func::Func() {
    dmmeta::Func_Init(*this);
}

inline dmmeta::Funique::Funique() {
}

inline dmmeta::Fuserinit::Fuserinit() {
}

inline dmmeta::Fwddecl::Fwddecl() {
}

inline dmmeta::Gconst::Gconst(const algo::strptr&            in_field
        ,const algo::strptr&            in_namefld
        ,const algo::strptr&            in_idfld
        ,bool                           in_wantenum)
    : field(in_field)
    , namefld(in_namefld)
    , idfld(in_idfld)
    , wantenum(in_wantenum)
{
}
inline dmmeta::Gconst::Gconst() {
    dmmeta::Gconst_Init(*this);
}


// --- dmmeta.Gconst..Init
// Set all fields to initial values.
inline void dmmeta::Gconst_Init(dmmeta::Gconst& parent) {
    parent.wantenum = bool(true);
}
inline dmmeta::Gstatic::Gstatic(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Gstatic::Gstatic() {
}

inline dmmeta::Gsymbol::Gsymbol() {
}

inline dmmeta::Hashtype::Hashtype(const algo::strptr&            in_hashtype
        ,const algo::Comment&           in_comment)
    : hashtype(in_hashtype)
    , comment(in_comment)
{
}
inline dmmeta::Hashtype::Hashtype() {
}

inline dmmeta::Hook::Hook() {
}

inline dmmeta::Inlary::Inlary(const algo::strptr&            in_field
        ,i32                            in_min
        ,i32                            in_max
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , min(in_min)
    , max(in_max)
    , comment(in_comment)
{
}
inline dmmeta::Inlary::Inlary() {
    dmmeta::Inlary_Init(*this);
}


// --- dmmeta.Inlary..Init
// Set all fields to initial values.
inline void dmmeta::Inlary_Init(dmmeta::Inlary& parent) {
    parent.min = i32(0);
    parent.max = i32(0);
}
inline dmmeta::Lenfld::Lenfld(const algo::strptr&            in_field
        ,i32                            in_extra)
    : field(in_field)
    , extra(in_extra)
{
}
inline dmmeta::Lenfld::Lenfld() {
    dmmeta::Lenfld_Init(*this);
}


// --- dmmeta.Lenfld..Init
// Set all fields to initial values.
inline void dmmeta::Lenfld_Init(dmmeta::Lenfld& parent) {
    parent.extra = i32(0);
}
inline dmmeta::Listtype::Listtype() {
    dmmeta::Listtype_Init(*this);
}


// --- dmmeta.Listtype..Init
// Set all fields to initial values.
inline void dmmeta::Listtype_Init(dmmeta::Listtype& parent) {
    parent.circular = bool(false);
    parent.haveprev = bool(false);
    parent.instail = bool(false);
}
inline dmmeta::Llist::Llist(const algo::strptr&            in_field
        ,bool                           in_havetail
        ,bool                           in_havecount
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , havetail(in_havetail)
    , havecount(in_havecount)
    , comment(in_comment)
{
}
inline dmmeta::Llist::Llist() {
    dmmeta::Llist_Init(*this);
}


// --- dmmeta.Llist..Init
// Set all fields to initial values.
inline void dmmeta::Llist_Init(dmmeta::Llist& parent) {
    parent.havetail = bool(true);
    parent.havecount = bool(false);
}
inline dmmeta::Main::Main(const algo::strptr&            in_ns
        ,bool                           in_ismodule)
    : ns(in_ns)
    , ismodule(in_ismodule)
{
}
inline dmmeta::Main::Main() {
    dmmeta::Main_Init(*this);
}


// --- dmmeta.Main..Init
// Set all fields to initial values.
inline void dmmeta::Main_Init(dmmeta::Main& parent) {
    parent.ismodule = bool(false);
}
inline dmmeta::Msgtype::Msgtype(const algo::strptr&            in_ctype
        ,const dmmeta::CppExpr&         in_type)
    : ctype(in_ctype)
    , type(in_type)
{
}
inline dmmeta::Msgtype::Msgtype() {
}

inline dmmeta::Nocascdel::Nocascdel() {
}

inline dmmeta::Nossimfile::Nossimfile() {
}

inline dmmeta::Noxref::Noxref() {
}

inline dmmeta::Ns::Ns(const algo::strptr&            in_ns
        ,const algo::strptr&            in_nstype
        ,const algo::Comment&           in_comment)
    : ns(in_ns)
    , nstype(in_nstype)
    , comment(in_comment)
{
}
inline dmmeta::Ns::Ns() {
}

inline dmmeta::Nsdb::Nsdb() {
}

inline dmmeta::Nsinclude::Nsinclude() {
    dmmeta::Nsinclude_Init(*this);
}


// --- dmmeta.Nsinclude..Init
// Set all fields to initial values.
inline void dmmeta::Nsinclude_Init(dmmeta::Nsinclude& parent) {
    parent.sys = bool(false);
}
inline dmmeta::Nsproto::Nsproto(const algo::strptr&            in_ns
        ,const algo::Comment&           in_comment)
    : ns(in_ns)
    , comment(in_comment)
{
}
inline dmmeta::Nsproto::Nsproto() {
}

inline dmmeta::Nstype::Nstype(const algo::strptr&            in_nstype
        ,const algo::Comment&           in_comment)
    : nstype(in_nstype)
    , comment(in_comment)
{
}
inline dmmeta::Nstype::Nstype() {
}

inline dmmeta::Nsversion::Nsversion() {
}

inline dmmeta::Nsx::Nsx(const algo::strptr&            in_ns
        ,bool                           in_genthrow
        ,bool                           in_correct_getorcreate
        ,const algo::strptr&            in_pool
        ,bool                           in_sortxref
        ,bool                           in_pack
        ,bool                           in_fldoffset_asserts
        ,const algo::Comment&           in_comment)
    : ns(in_ns)
    , genthrow(in_genthrow)
    , correct_getorcreate(in_correct_getorcreate)
    , pool(in_pool)
    , sortxref(in_sortxref)
    , pack(in_pack)
    , fldoffset_asserts(in_fldoffset_asserts)
    , comment(in_comment)
{
}
inline dmmeta::Nsx::Nsx() {
    dmmeta::Nsx_Init(*this);
}


// --- dmmeta.Nsx..Init
// Set all fields to initial values.
inline void dmmeta::Nsx_Init(dmmeta::Nsx& parent) {
    parent.genthrow = bool(false);
    parent.correct_getorcreate = bool(false);
    parent.sortxref = bool(false);
    parent.pack = bool(false);
    parent.fldoffset_asserts = bool(false);
}
inline dmmeta::Numstr::Numstr(const algo::strptr&            in_field
        ,const algo::strptr&            in_numtype
        ,i32                            in_base
        ,i32                            in_min_len)
    : field(in_field)
    , numtype(in_numtype)
    , base(in_base)
    , min_len(in_min_len)
{
}
inline dmmeta::Numstr::Numstr() {
    dmmeta::Numstr_Init(*this);
}


// --- dmmeta.Numstr..Init
// Set all fields to initial values.
inline void dmmeta::Numstr_Init(dmmeta::Numstr& parent) {
    parent.base = i32(0);
    parent.min_len = i32(0);
}
inline dmmeta::Pack::Pack(const algo::strptr&            in_ctype
        ,const algo::Comment&           in_comment)
    : ctype(in_ctype)
    , comment(in_comment)
{
}
inline dmmeta::Pack::Pack() {
}

inline dmmeta::Pmaskfld::Pmaskfld(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Pmaskfld::Pmaskfld() {
}

inline dmmeta::Pnew::Pnew(const algo::strptr&            in_pnew
        ,const algo::Comment&           in_comment)
    : pnew(in_pnew)
    , comment(in_comment)
{
}
inline dmmeta::Pnew::Pnew() {
}

inline dmmeta::Printfmt::Printfmt() {
}

inline dmmeta::Ptrary::Ptrary(const algo::strptr&            in_field
        ,bool                           in_unique)
    : field(in_field)
    , unique(in_unique)
{
}
inline dmmeta::Ptrary::Ptrary() {
    dmmeta::Ptrary_Init(*this);
}


// --- dmmeta.Ptrary..Init
// Set all fields to initial values.
inline void dmmeta::Ptrary_Init(dmmeta::Ptrary& parent) {
    parent.unique = bool(false);
}
inline dmmeta::Reftype::Reftype() {
    dmmeta::Reftype_Init(*this);
}

inline dmmeta::ReftypeCase::ReftypeCase(u8                             in_reftype)
    : reftype(in_reftype)
{
}
inline dmmeta::ReftypeCase::ReftypeCase(dmmeta_ReftypeCaseEnum arg) { this->reftype = u8(arg); }
inline dmmeta::ReftypeCase::ReftypeCase() {
    dmmeta::ReftypeCase_Init(*this);
}


// --- dmmeta.ReftypeCase.reftype.GetEnum
// Get value of field as enum type
inline dmmeta_ReftypeCaseEnum dmmeta::reftype_GetEnum(const dmmeta::ReftypeCase& parent) {
    return dmmeta_ReftypeCaseEnum(parent.reftype);
}

// --- dmmeta.ReftypeCase.reftype.SetEnum
// Set value of field from enum type.
inline void dmmeta::reftype_SetEnum(dmmeta::ReftypeCase& parent, dmmeta_ReftypeCaseEnum rhs) {
    parent.reftype = u8(rhs);
}

// --- dmmeta.ReftypeCase.reftype.Cast
inline dmmeta::ReftypeCase::operator dmmeta_ReftypeCaseEnum () const {
    return dmmeta_ReftypeCaseEnum((*this).reftype);
}

// --- dmmeta.ReftypeCase..Init
// Set all fields to initial values.
inline void dmmeta::ReftypeCase_Init(dmmeta::ReftypeCase& parent) {
    parent.reftype = u8(0);
}
inline dmmeta::ReftypeId::ReftypeId(u8                             in_value)
    : value(in_value)
{
}
inline dmmeta::ReftypeId::ReftypeId(dmmeta_ReftypeIdEnum arg) { this->value = u8(arg); }
inline dmmeta::ReftypeId::ReftypeId() {
    dmmeta::ReftypeId_Init(*this);
}


// --- dmmeta.ReftypeId.value.GetEnum
// Get value of field as enum type
inline dmmeta_ReftypeIdEnum dmmeta::value_GetEnum(const dmmeta::ReftypeId& parent) {
    return dmmeta_ReftypeIdEnum(parent.value);
}

// --- dmmeta.ReftypeId.value.SetEnum
// Set value of field from enum type.
inline void dmmeta::value_SetEnum(dmmeta::ReftypeId& parent, dmmeta_ReftypeIdEnum rhs) {
    parent.value = u8(rhs);
}

// --- dmmeta.ReftypeId.value.Cast
inline dmmeta::ReftypeId::operator dmmeta_ReftypeIdEnum () const {
    return dmmeta_ReftypeIdEnum((*this).value);
}

// --- dmmeta.ReftypeId..Hash
inline u32 dmmeta::ReftypeId_Hash(u32 prev, dmmeta::ReftypeId rhs) {
    prev = u8_Hash(prev, rhs.value);
    return prev;
}

// --- dmmeta.ReftypeId..Init
// Set all fields to initial values.
inline void dmmeta::ReftypeId_Init(dmmeta::ReftypeId& parent) {
    parent.value = u8(0);
}
inline dmmeta::Rowid::Rowid() {
}

inline dmmeta::Smallstr::Smallstr() {
    dmmeta::Smallstr_Init(*this);
}


// --- dmmeta.Smallstr..Init
// Set all fields to initial values.
inline void dmmeta::Smallstr_Init(dmmeta::Smallstr& parent) {
    parent.length = i32(0);
    parent.strict = bool(false);
}
inline dmmeta::Sortfld::Sortfld(const algo::strptr&            in_field
        ,const algo::strptr&            in_sortfld)
    : field(in_field)
    , sortfld(in_sortfld)
{
}
inline dmmeta::Sortfld::Sortfld() {
}

inline dmmeta::Sorttype::Sorttype() {
}

inline dmmeta::Sqltype::Sqltype() {
}

inline dmmeta::Ssimfile::Ssimfile(const algo::strptr&            in_ssimfile
        ,const algo::strptr&            in_ctype)
    : ssimfile(in_ssimfile)
    , ctype(in_ctype)
{
}
inline dmmeta::Ssimfile::Ssimfile() {
}

inline dmmeta::Ssimsort::Ssimsort() {
}

inline dmmeta::Ssimvolatile::Ssimvolatile() {
}

inline dmmeta::Steptype::Steptype(const algo::strptr&            in_steptype
        ,const algo::Comment&           in_comment)
    : steptype(in_steptype)
    , comment(in_comment)
{
}
inline dmmeta::Steptype::Steptype() {
}

inline dmmeta::Strfmt::Strfmt(const algo::strptr&            in_strfmt
        ,const algo::Comment&           in_comment)
    : strfmt(in_strfmt)
    , comment(in_comment)
{
}
inline dmmeta::Strfmt::Strfmt() {
}

inline dmmeta::Strtype::Strtype(const algo::strptr&            in_strtype
        ,const algo::Comment&           in_comment)
    : strtype(in_strtype)
    , comment(in_comment)
{
}
inline dmmeta::Strtype::Strtype() {
}

inline dmmeta::Substr::Substr(const algo::strptr&            in_field
        ,const dmmeta::CppExpr&         in_expr
        ,const algo::strptr&            in_srcfield)
    : field(in_field)
    , expr(in_expr)
    , srcfield(in_srcfield)
{
}
inline dmmeta::Substr::Substr() {
}

inline dmmeta::Tary::Tary() {
    dmmeta::Tary_Init(*this);
}


// --- dmmeta.Tary..Init
// Set all fields to initial values.
inline void dmmeta::Tary_Init(dmmeta::Tary& parent) {
    parent.aliased = bool(false);
}
inline dmmeta::Thash::Thash(const algo::strptr&            in_field
        ,const algo::strptr&            in_hashfld
        ,bool                           in_unique
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , hashfld(in_hashfld)
    , unique(in_unique)
    , comment(in_comment)
{
}
inline dmmeta::Thash::Thash() {
    dmmeta::Thash_Init(*this);
}


// --- dmmeta.Thash..Init
// Set all fields to initial values.
inline void dmmeta::Thash_Init(dmmeta::Thash& parent) {
    parent.unique = bool(true);
}
inline dmmeta::Tracefld::Tracefld(const algo::strptr&            in_tracefld
        ,const algo::Comment&           in_comment)
    : tracefld(in_tracefld)
    , comment(in_comment)
{
}
inline dmmeta::Tracefld::Tracefld() {
}

inline dmmeta::Tracerec::Tracerec(const algo::strptr&            in_tracerec
        ,const algo::Comment&           in_comment)
    : tracerec(in_tracerec)
    , comment(in_comment)
{
}
inline dmmeta::Tracerec::Tracerec() {
}

inline dmmeta::Typefld::Typefld(const algo::strptr&            in_field
        ,const algo::Comment&           in_comment)
    : field(in_field)
    , comment(in_comment)
{
}
inline dmmeta::Typefld::Typefld() {
}

inline dmmeta::Usertracefld::Usertracefld() {
}

inline dmmeta::Xref::Xref(const algo::strptr&            in_field
        ,const dmmeta::CppExpr&         in_inscond
        ,const algo::strptr&            in_via)
    : field(in_field)
    , inscond(in_inscond)
    , via(in_via)
{
}
inline dmmeta::Xref::Xref() {
    dmmeta::Xref_Init(*this);
}


// --- dmmeta.Xref..Init
// Set all fields to initial values.
inline void dmmeta::Xref_Init(dmmeta::Xref& parent) {
    parent.inscond = dmmeta::CppExpr("true");
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Anonfld &row) {// cfmt:dmmeta.Anonfld.String
    dmmeta::Anonfld_Print(const_cast<dmmeta::Anonfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::BuftypeId &row) {// cfmt:dmmeta.BuftypeId.String
    dmmeta::BuftypeId_Print(const_cast<dmmeta::BuftypeId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cascdel &row) {// cfmt:dmmeta.Cascdel.String
    dmmeta::Cascdel_Print(const_cast<dmmeta::Cascdel&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cdecl &row) {// cfmt:dmmeta.Cdecl.String
    dmmeta::Cdecl_Print(const_cast<dmmeta::Cdecl&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::CppExpr &row) {// cfmt:dmmeta.CppExpr.String
    dmmeta::CppExpr_Print(const_cast<dmmeta::CppExpr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Cfmt &row) {// cfmt:dmmeta.Cfmt.String
    dmmeta::Cfmt_Print(const_cast<dmmeta::Cfmt&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Charset &row) {// cfmt:dmmeta.Charset.String
    dmmeta::Charset_Print(const_cast<dmmeta::Charset&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ctype &row) {// cfmt:dmmeta.Ctype.String
    dmmeta::Ctype_Print(const_cast<dmmeta::Ctype&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ctypelen &row) {// cfmt:dmmeta.Ctypelen.String
    dmmeta::Ctypelen_Print(const_cast<dmmeta::Ctypelen&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Dispsigcheck &row) {// cfmt:dmmeta.Dispsigcheck.String
    dmmeta::Dispsigcheck_Print(const_cast<dmmeta::Dispsigcheck&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbase &row) {// cfmt:dmmeta.Fbase.String
    dmmeta::Fbase_Print(const_cast<dmmeta::Fbase&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fbigend &row) {// cfmt:dmmeta.Fbigend.String
    dmmeta::Fbigend_Print(const_cast<dmmeta::Fbigend&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fconst &row) {// cfmt:dmmeta.Fconst.String
    dmmeta::Fconst_Print(const_cast<dmmeta::Fconst&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Field &row) {// cfmt:dmmeta.Field.String
    dmmeta::Field_Print(const_cast<dmmeta::Field&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::FieldId &row) {// cfmt:dmmeta.FieldId.String
    dmmeta::FieldId_Print(const_cast<dmmeta::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Finput &row) {// cfmt:dmmeta.Finput.String
    dmmeta::Finput_Print(const_cast<dmmeta::Finput&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fnoremove &row) {// cfmt:dmmeta.Fnoremove.String
    dmmeta::Fnoremove_Print(const_cast<dmmeta::Fnoremove&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fstep &row) {// cfmt:dmmeta.Fstep.String
    dmmeta::Fstep_Print(const_cast<dmmeta::Fstep&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Funique &row) {// cfmt:dmmeta.Funique.String
    dmmeta::Funique_Print(const_cast<dmmeta::Funique&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Fuserinit &row) {// cfmt:dmmeta.Fuserinit.String
    dmmeta::Fuserinit_Print(const_cast<dmmeta::Fuserinit&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Gstatic &row) {// cfmt:dmmeta.Gstatic.String
    dmmeta::Gstatic_Print(const_cast<dmmeta::Gstatic&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Gsymbol &row) {// cfmt:dmmeta.Gsymbol.String
    dmmeta::Gsymbol_Print(const_cast<dmmeta::Gsymbol&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Hook &row) {// cfmt:dmmeta.Hook.String
    dmmeta::Hook_Print(const_cast<dmmeta::Hook&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Llist &row) {// cfmt:dmmeta.Llist.String
    dmmeta::Llist_Print(const_cast<dmmeta::Llist&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Main &row) {// cfmt:dmmeta.Main.String
    dmmeta::Main_Print(const_cast<dmmeta::Main&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nossimfile &row) {// cfmt:dmmeta.Nossimfile.String
    dmmeta::Nossimfile_Print(const_cast<dmmeta::Nossimfile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ns &row) {// cfmt:dmmeta.Ns.String
    dmmeta::Ns_Print(const_cast<dmmeta::Ns&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsinclude &row) {// cfmt:dmmeta.Nsinclude.String
    dmmeta::Nsinclude_Print(const_cast<dmmeta::Nsinclude&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsproto &row) {// cfmt:dmmeta.Nsproto.String
    dmmeta::Nsproto_Print(const_cast<dmmeta::Nsproto&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Nsx &row) {// cfmt:dmmeta.Nsx.String
    dmmeta::Nsx_Print(const_cast<dmmeta::Nsx&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ptrary &row) {// cfmt:dmmeta.Ptrary.String
    dmmeta::Ptrary_Print(const_cast<dmmeta::Ptrary&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::ReftypeId &row) {// cfmt:dmmeta.ReftypeId.String
    dmmeta::ReftypeId_Print(const_cast<dmmeta::ReftypeId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Sortfld &row) {// cfmt:dmmeta.Sortfld.String
    dmmeta::Sortfld_Print(const_cast<dmmeta::Sortfld&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimfile &row) {// cfmt:dmmeta.Ssimfile.String
    dmmeta::Ssimfile_Print(const_cast<dmmeta::Ssimfile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimsort &row) {// cfmt:dmmeta.Ssimsort.String
    dmmeta::Ssimsort_Print(const_cast<dmmeta::Ssimsort&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Ssimvolatile &row) {// cfmt:dmmeta.Ssimvolatile.String
    dmmeta::Ssimvolatile_Print(const_cast<dmmeta::Ssimvolatile&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Substr &row) {// cfmt:dmmeta.Substr.String
    dmmeta::Substr_Print(const_cast<dmmeta::Substr&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Tary &row) {// cfmt:dmmeta.Tary.String
    dmmeta::Tary_Print(const_cast<dmmeta::Tary&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Thash &row) {// cfmt:dmmeta.Thash.String
    dmmeta::Thash_Print(const_cast<dmmeta::Thash&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const dmmeta::Xref &row) {// cfmt:dmmeta.Xref.String
    dmmeta::Xref_Print(const_cast<dmmeta::Xref&>(row), str);
    return str;
}
