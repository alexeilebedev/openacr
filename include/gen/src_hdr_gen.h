//
// include/gen/src_hdr_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/command_gen.h"
#include "include/gen/dev_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/dmmeta_gen.h"
//#pragma endinclude

// --- src_hdr_FieldIdEnum

enum src_hdr_FieldIdEnum {        // src_hdr.FieldId.value
     src_hdr_FieldId_value   = 0
};

enum { src_hdr_FieldIdEnum_N = 1 };


// --- src_hdr_TableIdEnum

enum src_hdr_TableIdEnum {               // src_hdr.TableId.value
     src_hdr_TableId_dev_License   = 0   // dev.License -> src_hdr.FLicense
    ,src_hdr_TableId_dev_license   = 0   // dev.license -> src_hdr.FLicense
    ,src_hdr_TableId_dmmeta_Ns     = 1   // dmmeta.Ns -> src_hdr.FNs
    ,src_hdr_TableId_dmmeta_ns     = 1   // dmmeta.ns -> src_hdr.FNs
    ,src_hdr_TableId_dmmeta_Nsx    = 2   // dmmeta.Nsx -> src_hdr.FNsx
    ,src_hdr_TableId_dmmeta_nsx    = 2   // dmmeta.nsx -> src_hdr.FNsx
    ,src_hdr_TableId_dev_Target    = 3   // dev.Target -> src_hdr.FTarget
    ,src_hdr_TableId_dev_target    = 3   // dev.target -> src_hdr.FTarget
    ,src_hdr_TableId_dev_Targsrc   = 4   // dev.Targsrc -> src_hdr.FTargsrc
    ,src_hdr_TableId_dev_targsrc   = 4   // dev.targsrc -> src_hdr.FTargsrc
};

enum { src_hdr_TableIdEnum_N = 10 };

namespace src_hdr { struct FTargsrc; }
namespace src_hdr { struct FLicense; }
namespace src_hdr { struct FNs; }
namespace src_hdr { struct FTarget; }
namespace src_hdr { struct trace; }
namespace src_hdr { struct FDb; }
namespace src_hdr { struct FNsx; }
namespace src_hdr { struct FSrc; }
namespace src_hdr { struct FieldId; }
namespace src_hdr { struct TableId; }
namespace src_hdr { struct _db_targsrc_curs; }
namespace src_hdr { struct _db_ns_curs; }
namespace src_hdr { struct _db_ind_ns_curs; }
namespace src_hdr { struct _db_nsx_curs; }
namespace src_hdr { struct _db_license_curs; }
namespace src_hdr { struct _db_ind_license_curs; }
namespace src_hdr { struct _db_target_curs; }
namespace src_hdr { struct _db_ind_target_curs; }
namespace src_hdr { struct target_c_targsrc_curs; }
namespace src_hdr {
}//pkey typedefs
namespace src_hdr {
extern const char *src_hdr_help;
extern const char *src_hdr_syntax;
extern FDb _db;
extern const char* dev_scriptfile_bin_git_authors; // "bin/git-authors"

// --- src_hdr.trace
#pragma pack(push,1)
struct trace { // src_hdr.trace
    trace();
};
#pragma pack(pop)

// print string representation of src_hdr::trace to string LHS, no header -- cprint:src_hdr.trace.String
void                 trace_Print(src_hdr::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- src_hdr.FDb
// create: src_hdr.FDb._db (Global)
struct FDb { // src_hdr.FDb
    command::src_hdr      cmdline;                     //
    src_hdr::FTargsrc*    targsrc_lary[32];            // level array
    i32                   targsrc_n;                   // number of elements in array
    src_hdr::FNs*         ns_lary[32];                 // level array
    i32                   ns_n;                        // number of elements in array
    src_hdr::FNs**        ind_ns_buckets_elems;        // pointer to bucket array
    i32                   ind_ns_buckets_n;            // number of elements in bucket array
    i32                   ind_ns_n;                    // number of elements in the hash table
    src_hdr::FNsx*        nsx_lary[32];                // level array
    i32                   nsx_n;                       // number of elements in array
    src_hdr::FLicense*    license_lary[32];            // level array
    i32                   license_n;                   // number of elements in array
    src_hdr::FLicense**   ind_license_buckets_elems;   // pointer to bucket array
    i32                   ind_license_buckets_n;       // number of elements in bucket array
    i32                   ind_license_n;               // number of elements in the hash table
    src_hdr::FTarget*     target_lary[32];             // level array
    i32                   target_n;                    // number of elements in array
    src_hdr::FTarget**    ind_target_buckets_elems;    // pointer to bucket array
    i32                   ind_target_buckets_n;        // number of elements in bucket array
    i32                   ind_target_n;                // number of elements in the hash table
    src_hdr::trace        trace;                       //
};

// Main function
void                 MainArgs(int argc, char **argv);
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FTargsrc&   targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FTargsrc*   targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FTargsrc*   targsrc_InsertMaybe(const dev::Targsrc &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                targsrc_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 targsrc_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FTargsrc*   targsrc_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_hdr::FTargsrc*   targsrc_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  targsrc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 targsrc_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_hdr::FTargsrc&   targsrc_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 targsrc_XrefMaybe(src_hdr::FTargsrc &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FNs&        ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FNs*        ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FNs*        ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 ns_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FNs*        ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_hdr::FNs*        ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_hdr::FNs&        ns_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 ns_XrefMaybe(src_hdr::FNs &row);

// Return true if hash is empty
bool                 ind_ns_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_hdr::FNs*        ind_ns_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_hdr::FNs&        ind_ns_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
src_hdr::FNs&        ind_ns_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_ns_InsertMaybe(src_hdr::FNs& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_ns_Remove(src_hdr::FNs& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_ns_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FNsx&       nsx_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FNsx*       nsx_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FNsx*       nsx_InsertMaybe(const dmmeta::Nsx &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                nsx_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 nsx_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FNsx*       nsx_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_hdr::FNsx*       nsx_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  nsx_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Delete last element of array. Do nothing if array is empty.
void                 nsx_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_hdr::FNsx&       nsx_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 nsx_XrefMaybe(src_hdr::FNsx &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FLicense&   license_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FLicense*   license_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FLicense*   license_InsertMaybe(const dev::License &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                license_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 license_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FLicense*   license_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_hdr::FLicense*   license_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  license_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 license_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 license_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_hdr::FLicense&   license_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 license_XrefMaybe(src_hdr::FLicense &row);

// Return true if hash is empty
bool                 ind_license_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_hdr::FLicense*   ind_license_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_hdr::FLicense&   ind_license_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
src_hdr::FLicense&   ind_license_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
i32                  ind_license_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_license_InsertMaybe(src_hdr::FLicense& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_license_Remove(src_hdr::FLicense& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_license_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FTarget&    target_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FTarget*    target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FTarget*    target_InsertMaybe(const dev::Target &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
void*                target_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
bool                 target_EmptyQ() __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FTarget*    target_Find(u64 t) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to last element of array, or NULL if array is empty
src_hdr::FTarget*    target_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
i32                  target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
void                 target_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
void                 target_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
src_hdr::FTarget&    target_qFind(u64 t) __attribute__((nothrow));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 target_XrefMaybe(src_hdr::FTarget &row);

// Return true if hash is empty
bool                 ind_target_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
src_hdr::FTarget*    ind_target_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
src_hdr::FTarget&    ind_target_FindX(const algo::strptr& key);
// Return number of items in the hash
i32                  ind_target_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool                 ind_target_InsertMaybe(src_hdr::FTarget& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
void                 ind_target_Remove(src_hdr::FTarget& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
void                 ind_target_Reserve(int n) __attribute__((nothrow));

// cursor points to valid item
void                 _db_targsrc_curs_Reset(_db_targsrc_curs &curs, src_hdr::FDb &parent);
// cursor points to valid item
bool                 _db_targsrc_curs_ValidQ(_db_targsrc_curs &curs);
// proceed to next item
void                 _db_targsrc_curs_Next(_db_targsrc_curs &curs);
// item access
src_hdr::FTargsrc&   _db_targsrc_curs_Access(_db_targsrc_curs &curs);
// cursor points to valid item
void                 _db_ns_curs_Reset(_db_ns_curs &curs, src_hdr::FDb &parent);
// cursor points to valid item
bool                 _db_ns_curs_ValidQ(_db_ns_curs &curs);
// proceed to next item
void                 _db_ns_curs_Next(_db_ns_curs &curs);
// item access
src_hdr::FNs&        _db_ns_curs_Access(_db_ns_curs &curs);
// cursor points to valid item
void                 _db_nsx_curs_Reset(_db_nsx_curs &curs, src_hdr::FDb &parent);
// cursor points to valid item
bool                 _db_nsx_curs_ValidQ(_db_nsx_curs &curs);
// proceed to next item
void                 _db_nsx_curs_Next(_db_nsx_curs &curs);
// item access
src_hdr::FNsx&       _db_nsx_curs_Access(_db_nsx_curs &curs);
// cursor points to valid item
void                 _db_license_curs_Reset(_db_license_curs &curs, src_hdr::FDb &parent);
// cursor points to valid item
bool                 _db_license_curs_ValidQ(_db_license_curs &curs);
// proceed to next item
void                 _db_license_curs_Next(_db_license_curs &curs);
// item access
src_hdr::FLicense&   _db_license_curs_Access(_db_license_curs &curs);
// cursor points to valid item
void                 _db_target_curs_Reset(_db_target_curs &curs, src_hdr::FDb &parent);
// cursor points to valid item
bool                 _db_target_curs_ValidQ(_db_target_curs &curs);
// proceed to next item
void                 _db_target_curs_Next(_db_target_curs &curs);
// item access
src_hdr::FTarget&    _db_target_curs_Access(_db_target_curs &curs);
// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- src_hdr.FLicense
// create: src_hdr.FDb.license (Lary)
// global access: ind_license (Thash)
// access: src_hdr.FTarget.p_license (Upptr)
struct FLicense { // src_hdr.FLicense
    src_hdr::FLicense*   ind_license_next;   // hash next
    algo::Smallstr50     license;            //
    algo::Comment        comment;            //
    algo::cstring        text;               //
private:
    friend src_hdr::FLicense&   license_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_hdr::FLicense*   license_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 license_RemoveAll() __attribute__((nothrow));
    friend void                 license_RemoveLast() __attribute__((nothrow));
    FLicense();
    ~FLicense();
    FLicense(const FLicense&){ /*disallow copy constructor */}
    void operator =(const FLicense&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 license_CopyOut(src_hdr::FLicense &row, dev::License &out) __attribute__((nothrow));
// Copy fields in to row
void                 license_CopyIn(src_hdr::FLicense &row, dev::License &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FLicense_Init(src_hdr::FLicense& license);
void                 FLicense_Uninit(src_hdr::FLicense& license) __attribute__((nothrow));

// --- src_hdr.FNs
// create: src_hdr.FDb.ns (Lary)
// global access: ind_ns (Thash)
// access: src_hdr.FTarget.p_ns (Upptr)
struct FNs { // src_hdr.FNs
    src_hdr::FNs*      ind_ns_next;   // hash next
    algo::Smallstr16   ns;            // Namespace name (primary key)
    algo::Smallstr50   nstype;        //
    algo::Comment      comment;       //
    src_hdr::FNsx*     c_nsx;         // optional pointer
private:
    friend src_hdr::FNs&        ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_hdr::FNs*        ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
    FNs();
    ~FNs();
    FNs(const FNs&){ /*disallow copy constructor */}
    void operator =(const FNs&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 ns_CopyOut(src_hdr::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
void                 ns_CopyIn(src_hdr::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));

// Insert row into pointer index. Return final membership status.
bool                 c_nsx_InsertMaybe(src_hdr::FNs& ns, src_hdr::FNsx& row) __attribute__((nothrow));
// Remove element from index. If element is not in index, do nothing.
void                 c_nsx_Remove(src_hdr::FNs& ns, src_hdr::FNsx& row) __attribute__((nothrow));

// Set all fields to initial values.
void                 FNs_Init(src_hdr::FNs& ns);
void                 FNs_Uninit(src_hdr::FNs& ns) __attribute__((nothrow));

// --- src_hdr.FNsx
// create: src_hdr.FDb.nsx (Lary)
// access: src_hdr.FNs.c_nsx (Ptr)
struct FNsx { // src_hdr.FNsx
    algo::Smallstr16    ns;                    //
    bool                genthrow;              //   false
    bool                correct_getorcreate;   //   false
    algo::Smallstr100   pool;                  //
    bool                sortxref;              //   false
    bool                pack;                  //   false
    bool                fldoffset_asserts;     //   false
    algo::Comment       comment;               //
private:
    friend src_hdr::FNsx&       nsx_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_hdr::FNsx*       nsx_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 nsx_RemoveLast() __attribute__((nothrow));
    FNsx();
    ~FNsx();
    FNsx(const FNsx&){ /*disallow copy constructor */}
    void operator =(const FNsx&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 nsx_CopyOut(src_hdr::FNsx &row, dmmeta::Nsx &out) __attribute__((nothrow));
// Copy fields in to row
void                 nsx_CopyIn(src_hdr::FNsx &row, dmmeta::Nsx &in) __attribute__((nothrow));

// Set all fields to initial values.
void                 FNsx_Init(src_hdr::FNsx& nsx);
void                 FNsx_Uninit(src_hdr::FNsx& nsx) __attribute__((nothrow));

// --- src_hdr.FSrc
struct FSrc { // src_hdr.FSrc
    algo::cstring        comment;          //
    algo::cstring        body;             //
    src_hdr::FTargsrc*   p_targsrc;        // reference to parent row
    algo::strptr         text;             //
    algo::cstring        copyright;        //
    algo::cstring        created_by;       //
    algo::cstring        authors;          //
    algo::cstring        recent_changes;   //
    bool                 saw_target;       //   false
    FSrc();
};

// Set all fields to initial values.
void                 FSrc_Init(src_hdr::FSrc& parent);

// --- src_hdr.FTarget
// create: src_hdr.FDb.target (Lary)
// global access: ind_target (Thash)
// access: src_hdr.FTargsrc.p_target (Upptr)
struct FTarget { // src_hdr.FTarget
    src_hdr::FTarget*     ind_target_next;   // hash next
    algo::Smallstr16      target;            //
    algo::Smallstr50      license;           //
    algo::Smallstr50      compat;            //   "Linux-%.%-%"
    src_hdr::FTargsrc**   c_targsrc_elems;   // array of pointers
    u32                   c_targsrc_n;       // array of pointers
    u32                   c_targsrc_max;     // capacity of allocated array
    src_hdr::FLicense*    p_license;         // reference to parent row
    src_hdr::FNs*         p_ns;              // reference to parent row
private:
    friend src_hdr::FTarget&    target_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_hdr::FTarget*    target_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 target_RemoveAll() __attribute__((nothrow));
    friend void                 target_RemoveLast() __attribute__((nothrow));
    FTarget();
    ~FTarget();
    FTarget(const FTarget&){ /*disallow copy constructor */}
    void operator =(const FTarget&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 target_CopyOut(src_hdr::FTarget &row, dev::Target &out) __attribute__((nothrow));
// Copy fields in to row
void                 target_CopyIn(src_hdr::FTarget &row, dev::Target &in) __attribute__((nothrow));

// Return true if index is empty
bool                 c_targsrc_EmptyQ(src_hdr::FTarget& target) __attribute__((nothrow));
// Look up row by row id. Return NULL if out of range
src_hdr::FTargsrc*   c_targsrc_Find(src_hdr::FTarget& target, u32 t) __attribute__((__warn_unused_result__, nothrow));
// Return array of pointers
algo::aryptr<src_hdr::FTargsrc*> c_targsrc_Getary(src_hdr::FTarget& target) __attribute__((nothrow));
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void                 c_targsrc_Insert(src_hdr::FTarget& target, src_hdr::FTargsrc& row) __attribute__((nothrow));
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool                 c_targsrc_InsertMaybe(src_hdr::FTarget& target, src_hdr::FTargsrc& row) __attribute__((nothrow));
// Return number of items in the pointer array
i32                  c_targsrc_N(const src_hdr::FTarget& target) __attribute__((__warn_unused_result__, nothrow, pure));
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void                 c_targsrc_Remove(src_hdr::FTarget& target, src_hdr::FTargsrc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
void                 c_targsrc_RemoveAll(src_hdr::FTarget& target) __attribute__((nothrow));
// Reserve space in index for N more elements;
void                 c_targsrc_Reserve(src_hdr::FTarget& target, u32 n) __attribute__((nothrow));

// Set all fields to initial values.
void                 FTarget_Init(src_hdr::FTarget& target);
void                 target_c_targsrc_curs_Reset(target_c_targsrc_curs &curs, src_hdr::FTarget &parent);
// cursor points to valid item
bool                 target_c_targsrc_curs_ValidQ(target_c_targsrc_curs &curs);
// proceed to next item
void                 target_c_targsrc_curs_Next(target_c_targsrc_curs &curs);
// item access
src_hdr::FTargsrc&   target_c_targsrc_curs_Access(target_c_targsrc_curs &curs);
void                 FTarget_Uninit(src_hdr::FTarget& target) __attribute__((nothrow));

// --- src_hdr.FTargsrc
// create: src_hdr.FDb.targsrc (Lary)
// access: src_hdr.FSrc.p_targsrc (Upptr)
// access: src_hdr.FTarget.c_targsrc (Ptrary)
struct FTargsrc { // src_hdr.FTargsrc
    algo::Smallstr100   targsrc;                   //
    algo::Comment       comment;                   //
    bool                select;                    //   false  Temporary flag
    src_hdr::FTarget*   p_target;                  // reference to parent row
    bool                target_c_targsrc_in_ary;   //   false  membership flag
private:
    friend src_hdr::FTargsrc&   targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend src_hdr::FTargsrc*   targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targsrc_RemoveLast() __attribute__((nothrow));
    FTargsrc();
    ~FTargsrc();
    FTargsrc(const FTargsrc&){ /*disallow copy constructor */}
    void operator =(const FTargsrc&){ /*disallow direct assignment */}
};

// Copy fields out of row
void                 targsrc_CopyOut(src_hdr::FTargsrc &row, dev::Targsrc &out) __attribute__((nothrow));
// Copy fields in to row
void                 targsrc_CopyIn(src_hdr::FTargsrc &row, dev::Targsrc &in) __attribute__((nothrow));

algo::Smallstr16     target_Get(src_hdr::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr200    src_Get(src_hdr::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

algo::Smallstr10     ext_Get(src_hdr::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
void                 FTargsrc_Init(src_hdr::FTargsrc& targsrc);
void                 FTargsrc_Uninit(src_hdr::FTargsrc& targsrc) __attribute__((nothrow));

// --- src_hdr.FieldId
#pragma pack(push,1)
struct FieldId { // src_hdr.FieldId: Field read helper
    i32   value;   //   -1
    inline operator src_hdr_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(src_hdr_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
src_hdr_FieldIdEnum  value_GetEnum(const src_hdr::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(src_hdr::FieldId& parent, src_hdr_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const src_hdr::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const src_hdr::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(src_hdr::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(src_hdr::FieldId& parent, algo::strptr rhs, src_hdr_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(src_hdr::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of src_hdr::FieldId from an ascii string.
// The format of the string is the format of the src_hdr::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(src_hdr::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(src_hdr::FieldId& parent);
// print string representation of src_hdr::FieldId to string LHS, no header -- cprint:src_hdr.FieldId.String
void                 FieldId_Print(src_hdr::FieldId & row, algo::cstring &str) __attribute__((nothrow));

// --- src_hdr.TableId
struct TableId { // src_hdr.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    inline operator src_hdr_TableIdEnum() const;
    explicit TableId(i32                            in_value);
    TableId(src_hdr_TableIdEnum arg);
    TableId();
};

// Get value of field as enum type
src_hdr_TableIdEnum  value_GetEnum(const src_hdr::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(src_hdr::TableId& parent, src_hdr_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const src_hdr::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const src_hdr::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(src_hdr::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(src_hdr::TableId& parent, algo::strptr rhs, src_hdr_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(src_hdr::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of src_hdr::TableId from an ascii string.
// The format of the string is the format of the src_hdr::TableId's only field
bool                 TableId_ReadStrptrMaybe(src_hdr::TableId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 TableId_Init(src_hdr::TableId& parent);
// print string representation of src_hdr::TableId to string LHS, no header -- cprint:src_hdr.TableId.String
void                 TableId_Print(src_hdr::TableId & row, algo::cstring &str) __attribute__((nothrow));

struct _db_targsrc_curs {// cursor
    typedef src_hdr::FTargsrc ChildType;
    src_hdr::FDb *parent;
    i64 index;
    _db_targsrc_curs(){ parent=NULL; index=0; }
};


struct _db_ns_curs {// cursor
    typedef src_hdr::FNs ChildType;
    src_hdr::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};


struct _db_nsx_curs {// cursor
    typedef src_hdr::FNsx ChildType;
    src_hdr::FDb *parent;
    i64 index;
    _db_nsx_curs(){ parent=NULL; index=0; }
};


struct _db_license_curs {// cursor
    typedef src_hdr::FLicense ChildType;
    src_hdr::FDb *parent;
    i64 index;
    _db_license_curs(){ parent=NULL; index=0; }
};


struct _db_target_curs {// cursor
    typedef src_hdr::FTarget ChildType;
    src_hdr::FDb *parent;
    i64 index;
    _db_target_curs(){ parent=NULL; index=0; }
};


struct target_c_targsrc_curs {// cursor
    typedef src_hdr::FTargsrc ChildType;
    src_hdr::FTargsrc** elems;
    u32 n_elems;
    u32 index;
    target_c_targsrc_curs() { elems=NULL; n_elems=0; index=0; }
};

} // end namespace src_hdr
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const src_hdr::trace &row);// cfmt:src_hdr.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const src_hdr::FieldId &row);// cfmt:src_hdr.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const src_hdr::TableId &row);// cfmt:src_hdr.TableId.String
}
