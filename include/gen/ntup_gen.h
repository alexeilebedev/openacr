//
// include/gen/ntup_gen.h
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#pragma once
#include "include/gen/command_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- ntup_FieldIdEnum

enum ntup_FieldIdEnum {        // ntup.FieldId.value
     ntup_FieldId_value   = 0
};

enum { ntup_FieldIdEnum_N = 1 };

namespace ntup { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace ntup { // gen:ns_field
extern const char *ntup_help;
extern const char *ntup_syntax;
} // gen:ns_field
// gen:ns_fwddecl2
namespace ntup { struct trace; }
namespace ntup { struct FDb; }
namespace ntup { struct FieldId; }
namespace ntup { extern struct ntup::FDb _db; }
namespace ntup { // gen:ns_print_struct

// --- ntup.trace
#pragma pack(push,1)
struct trace { // ntup.trace
    trace();
};
#pragma pack(pop)

// print string representation of ntup::trace to string LHS, no header -- cprint:ntup.trace.String
void                 trace_Print(ntup::trace & row, algo::cstring &str) __attribute__((nothrow));

// --- ntup.FDb
// create: ntup.FDb._db (Global)
struct FDb { // ntup.FDb
    command::ntup   cmdline;   //
    ntup::trace     trace;     //
};

// Main function
void                 MainArgs(int argc, char **argv);
// Main loop.
void                 MainLoop();
// Main step
void                 Step();
// Main function
void                 Main();
void                 StaticCheck();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
bool                 LoadTuplesMaybe(algo::strptr root) __attribute__((nothrow));
// Load specified ssimfile.
bool                 LoadSsimfileMaybe(algo::strptr fname) __attribute__((nothrow));
// Calls Step function of dependencies
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool                 _db_XrefMaybe();

// Set all fields to initial values.
void                 FDb_Init();
void                 FDb_Uninit() __attribute__((nothrow));

// --- ntup.FieldId
#pragma pack(push,1)
struct FieldId { // ntup.FieldId: Field read helper
    i32   value;   //   -1
    inline operator ntup_FieldIdEnum() const;
    explicit FieldId(i32                            in_value);
    FieldId(ntup_FieldIdEnum arg);
    FieldId();
};
#pragma pack(pop)

// Get value of field as enum type
ntup_FieldIdEnum     value_GetEnum(const ntup::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
void                 value_SetEnum(ntup::FieldId& parent, ntup_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char*          value_ToCstr(const ntup::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void                 value_Print(const ntup::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool                 value_SetStrptrMaybe(ntup::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void                 value_SetStrptr(ntup::FieldId& parent, algo::strptr rhs, ntup_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
bool                 value_ReadStrptrMaybe(ntup::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of ntup::FieldId from an ascii string.
// The format of the string is the format of the ntup::FieldId's only field
bool                 FieldId_ReadStrptrMaybe(ntup::FieldId &parent, algo::strptr in_str);
// Set all fields to initial values.
void                 FieldId_Init(ntup::FieldId& parent);
// print string representation of ntup::FieldId to string LHS, no header -- cprint:ntup.FieldId.String
void                 FieldId_Print(ntup::FieldId & row, algo::cstring &str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace ntup { // gen:ns_func
} // gen:ns_func
int                  main(int argc, char **argv);
#if defined(WIN32)
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const ntup::trace &row);// cfmt:ntup.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const ntup::FieldId &row);// cfmt:ntup.FieldId.String
}
