//
// cpp/gen/amc_vis_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/amc_vis_gen.h"
#include "include/gen/amc_vis_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
amc_vis::FDb    amc_vis::_db;     // dependency found via dev.targdep

namespace amc_vis {
const char *amc_vis_help =
"amc_vis: Draw access path diagrams\n"
"Usage: amc_vis [[-ctype:]<regx>] [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    [ctype]     regx    \"%\"     Ctype regexp to compute access path diagram\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -dot        string  \"\"      Save dot file with specified filename\n"
"    -xref                       Include all ctypes referenced by selected ones\n"
"    -xns                        Cross namespace boundaries\n"
"    -noinput                    Deselect module inputs\n"
"    -check                      Check model for dependency problems\n"
"    -render             Y       Produce an ascii drawing\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace amc_vis
amc_vis::_db_bh_node_curs::~_db_bh_node_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

amc_vis::_db_bh_link_curs::~_db_bh_link_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace amc_vis { // gen:ns_print_proto
    // func:amc_vis.FDb.ctype.InputMaybe
    static bool          ctype_InputMaybe(dmmeta::Ctype &elem) __attribute__((nothrow));
    // func:amc_vis.FDb.field.InputMaybe
    static bool          field_InputMaybe(dmmeta::Field &elem) __attribute__((nothrow));
    // Load statically available data into tables, register tables and database.
    // func:amc_vis.FDb._db.InitReflection
    static void          InitReflection();
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    // func:amc_vis.FDb.bh_node.Downheap
    static int           bh_node_Downheap(amc_vis::FNode& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    // func:amc_vis.FDb.bh_node.Upheap
    static int           bh_node_Upheap(amc_vis::FNode& row, int idx) __attribute__((nothrow));
    // func:amc_vis.FDb.bh_node.ElemLt
    inline static bool   bh_node_ElemLt(amc_vis::FNode &a, amc_vis::FNode &b) __attribute__((nothrow));
    // func:amc_vis.FDb.bh_node_curs.Add
    static void          _db_bh_node_curs_Add(_db_bh_node_curs &curs, amc_vis::FNode& row);
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    // func:amc_vis.FDb.bh_link.Downheap
    static int           bh_link_Downheap(amc_vis::Link& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    // func:amc_vis.FDb.bh_link.Upheap
    static int           bh_link_Upheap(amc_vis::Link& row, int idx) __attribute__((nothrow));
    // func:amc_vis.FDb.bh_link.ElemLt
    inline static bool   bh_link_ElemLt(amc_vis::Link &a, amc_vis::Link &b) __attribute__((nothrow));
    // func:amc_vis.FDb.bh_link_curs.Add
    static void          _db_bh_link_curs_Add(_db_bh_link_curs &curs, amc_vis::Link& row);
    // func:amc_vis.FDb.reftype.InputMaybe
    static bool          reftype_InputMaybe(dmmeta::Reftype &elem) __attribute__((nothrow));
    // func:amc_vis.FDb.finput.InputMaybe
    static bool          finput_InputMaybe(dmmeta::Finput &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:amc_vis.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:amc_vis.FDb.trace.N
    inline static i32    trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:amc_vis...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- amc_vis.FCtype.msghdr.CopyOut
// Copy fields out of row
void amc_vis::ctype_CopyOut(amc_vis::FCtype &row, dmmeta::Ctype &out) {
    out.ctype = row.ctype;
    out.comment = row.comment;
}

// --- amc_vis.FCtype.msghdr.CopyIn
// Copy fields in to row
void amc_vis::ctype_CopyIn(amc_vis::FCtype &row, dmmeta::Ctype &in) {
    row.ctype = in.ctype;
    row.comment = in.comment;
}

// --- amc_vis.FCtype.ns.Get
algo::Smallstr16 amc_vis::ns_Get(amc_vis::FCtype& ctype) {
    algo::Smallstr16 ret(algo::Pathcomp(ctype.ctype, ".RL"));
    return ret;
}

// --- amc_vis.FCtype.name.Get
algo::Smallstr100 amc_vis::name_Get(amc_vis::FCtype& ctype) {
    algo::Smallstr100 ret(algo::Pathcomp(ctype.ctype, ".RR"));
    return ret;
}

// --- amc_vis.FCtype.c_field.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void amc_vis::c_field_Insert(amc_vis::FCtype& ctype, amc_vis::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,true)) {
        // reserve space
        c_field_Reserve(ctype, 1);
        u32 n  = ctype.c_field_n;
        u32 at = n;
        amc_vis::FField* *elems = ctype.c_field_elems;
        elems[at] = &row;
        ctype.c_field_n = n+1;

    }
}

// --- amc_vis.FCtype.c_field.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool amc_vis::c_field_InsertMaybe(amc_vis::FCtype& ctype, amc_vis::FField& row) {
    bool retval = !row.ctype_c_field_in_ary;
    c_field_Insert(ctype,row); // check is performed in _Insert again
    return retval;
}

// --- amc_vis.FCtype.c_field.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void amc_vis::c_field_Remove(amc_vis::FCtype& ctype, amc_vis::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,false)) {
        int lim = ctype.c_field_n;
        amc_vis::FField* *elems = ctype.c_field_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            amc_vis::FField* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(amc_vis::FField*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                ctype.c_field_n = lim - 1;
                break;
            }
        }
    }
}

// --- amc_vis.FCtype.c_field.Reserve
// Reserve space in index for N more elements;
void amc_vis::c_field_Reserve(amc_vis::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_field_max;
    if (UNLIKELY(ctype.c_field_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(amc_vis::FField*);
        u32 new_size = new_max * sizeof(amc_vis::FField*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_field_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FCtype.c_field");
        }
        ctype.c_field_elems = (amc_vis::FField**)new_mem;
        ctype.c_field_max = new_max;
    }
}

// --- amc_vis.FCtype..Uninit
void amc_vis::FCtype_Uninit(amc_vis::FCtype& ctype) {
    amc_vis::FCtype &row = ctype; (void)row;
    ind_ctype_Remove(row); // remove ctype from index ind_ctype
    zd_select_Remove(row); // remove ctype from index zd_select

    // amc_vis.FCtype.c_field.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(ctype.c_field_elems, sizeof(amc_vis::FField*)*ctype.c_field_max); // (amc_vis.FCtype.c_field)
}

// --- amc_vis.trace..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.trace.String  printfmt:Tuple
void amc_vis::trace_Print(amc_vis::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "amc_vis.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- amc_vis.FDb.lpool.FreeMem
// Free block of memory previously returned by Lpool.
void amc_vis::lpool_FreeMem(void* mem, u64 size) {
    size = u64_Max(size,1ULL<<4);
    u64 cell = algo::u64_BitScanReverse(size-1) + 1 - 4;
    if (mem && cell < 36) {
        lpool_Lpblock *temp = (lpool_Lpblock*)mem; // push  singly linked list
        temp->next = _db.lpool_free[cell];
        _db.lpool_free[cell] = temp;
    }
}

// --- amc_vis.FDb.lpool.AllocMem
// Allocate new piece of memory at least SIZE bytes long.
// If not successful, return NULL
// The allocated block is at least 1<<4
// The maximum allocation size is at most 1<<(36+4)
void* amc_vis::lpool_AllocMem(u64 size) {
    void *retval = NULL;
    size     = u64_Max(size,1<<4); // enforce alignment
    u64 cell = algo::u64_BitScanReverse(size-1) + 1 - 4;
    if (cell < 36) {
        u64 i    = cell;
        // try to find a block that's at least as large as required.
        // if found, remove from free list
        for (; i < 36; i++) {
            lpool_Lpblock *blk = _db.lpool_free[i];
            if (blk) {
                _db.lpool_free[i] = blk->next;
                retval = blk;
                break;
            }
        }
        // if suitable size block is not found, create a new one
        // by requesting a block from the base allocator.
        if (UNLIKELY(!retval)) {
            i = u64_Max(cell, 21-4); // 2MB min -- allow huge page to be used
            retval = algo_lib::sbrk_AllocMem(1ULL<<(i+4));
        }
        if (LIKELY(retval)) {
            // if block is more than 2x as large as needed, return the upper half to the free
            // list (repeatedly). meanwhile, retval doesn't change.
            while (i > cell) {
                i--;
                int half = 1ULL<<(i+4);
                lpool_Lpblock *blk = (lpool_Lpblock*)((u8*)retval + half);
                blk->next = _db.lpool_free[i];
                _db.lpool_free[i] = blk;
            }
        }
    }
    return retval;
}

// --- amc_vis.FDb.lpool.ReserveBuffers
// Add N buffers of some size to the free store
// Reserve NBUF buffers of size BUFSIZE from the base pool (algo_lib::sbrk)
bool amc_vis::lpool_ReserveBuffers(u64 nbuf, u64 bufsize) {
    bool retval = true;
    bufsize = u64_Max(bufsize, 1<<4);
    u64 cell = algo::u64_BitScanReverse(bufsize-1) + 1 - 4;
    if (cell < 36) {
        for (u64 i = 0; i < nbuf; i++) {
            u64 size = 1ULL<<(cell+4);
            lpool_Lpblock *temp = (lpool_Lpblock*)algo_lib::sbrk_AllocMem(size);
            if (temp == NULL) {
                retval = false;
                break;// why continue?
            } else {
                temp->next = _db.lpool_free[cell];
                _db.lpool_free[cell] = temp;
            }
        }
    }
    return retval;
}

// --- amc_vis.FDb.lpool.ReallocMem
// Allocate new block, copy old to new, delete old.
// If the new size is same as old size, do nothing.
// In all other cases, new memory is allocated (i.e. size reduction is not a no-op)
// If no memory, return NULL; old memory remains untouched
void* amc_vis::lpool_ReallocMem(void* oldmem, u64 old_size, u64 new_size) {
    void *ret = oldmem;
    if (new_size != old_size) {
        ret = lpool_AllocMem(new_size);
        if (ret && oldmem) {
            memcpy(ret,oldmem,u64_Min(new_size,old_size));
            lpool_FreeMem(oldmem, old_size);
        }
    }
    return ret;
}

// --- amc_vis.FDb.lpool.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
u8& amc_vis::lpool_Alloc() {
    u8* row = lpool_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.lpool  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.lpool.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
u8* amc_vis::lpool_AllocMaybe() {
    u8 *row = (u8*)lpool_AllocMem(sizeof(u8));
    if (row) {
        new (row) u8; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.lpool.Delete
// Remove row from all global and cross indices, then deallocate row
void amc_vis::lpool_Delete(u8 &row) {
    int length = sizeof(u8);
    lpool_FreeMem(&row, length);
}

// --- amc_vis.FDb.ctype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FCtype& amc_vis::ctype_Alloc() {
    amc_vis::FCtype* row = ctype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.ctype  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.ctype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FCtype* amc_vis::ctype_AllocMaybe() {
    amc_vis::FCtype *row = (amc_vis::FCtype*)ctype_AllocMem();
    if (row) {
        new (row) amc_vis::FCtype; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.ctype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
amc_vis::FCtype* amc_vis::ctype_InsertMaybe(const dmmeta::Ctype &value) {
    amc_vis::FCtype *row = &ctype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ctype_CopyIn(*row,const_cast<dmmeta::Ctype&>(value));
    bool ok = ctype_XrefMaybe(*row); // this may return false
    if (!ok) {
        ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- amc_vis.FDb.ctype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::ctype_AllocMem() {
    u64 new_nelems     = _db.ctype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FCtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ctype_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FCtype*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FCtype) * (u64(1)<<bsr));
            _db.ctype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ctype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.ctype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::ctype_RemoveLast() {
    u64 n = _db.ctype_n;
    if (n > 0) {
        n -= 1;
        ctype_qFind(u64(n)).~FCtype();
        _db.ctype_n = i32(n);
    }
}

// --- amc_vis.FDb.ctype.InputMaybe
static bool amc_vis::ctype_InputMaybe(dmmeta::Ctype &elem) {
    bool retval = true;
    retval = ctype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- amc_vis.FDb.ctype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::ctype_XrefMaybe(amc_vis::FCtype &row) {
    bool retval = true;
    (void)row;
    // insert ctype into index ind_ctype
    if (true) { // user-defined insert condition
        bool success = ind_ctype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FDb.ind_ctype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- amc_vis.FDb.field.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FField& amc_vis::field_Alloc() {
    amc_vis::FField* row = field_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.field  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.field.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FField* amc_vis::field_AllocMaybe() {
    amc_vis::FField *row = (amc_vis::FField*)field_AllocMem();
    if (row) {
        new (row) amc_vis::FField; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.field.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
amc_vis::FField* amc_vis::field_InsertMaybe(const dmmeta::Field &value) {
    amc_vis::FField *row = &field_Alloc(); // if out of memory, process dies. if input error, return NULL.
    field_CopyIn(*row,const_cast<dmmeta::Field&>(value));
    bool ok = field_XrefMaybe(*row); // this may return false
    if (!ok) {
        field_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- amc_vis.FDb.field.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::field_AllocMem() {
    u64 new_nelems     = _db.field_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FField*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.field_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FField*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FField) * (u64(1)<<bsr));
            _db.field_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.field_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.field.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::field_RemoveLast() {
    u64 n = _db.field_n;
    if (n > 0) {
        n -= 1;
        field_qFind(u64(n)).~FField();
        _db.field_n = i32(n);
    }
}

// --- amc_vis.FDb.field.InputMaybe
static bool amc_vis::field_InputMaybe(dmmeta::Field &elem) {
    bool retval = true;
    retval = field_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- amc_vis.FDb.field.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::field_XrefMaybe(amc_vis::FField &row) {
    bool retval = true;
    (void)row;
    // insert field into index ind_field
    if (true) { // user-defined insert condition
        bool success = ind_field_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FDb.ind_field"; // check for duplicate key
            return false;
        }
    }
    amc_vis::FCtype* p_ctype = amc_vis::ind_ctype_Find(ctype_Get(row));
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "amc_vis.bad_xref  index:amc_vis.FDb.ind_ctype" << Keyval("key", ctype_Get(row));
        return false;
    }
    // insert field into index c_field
    if (true) { // user-defined insert condition
        c_field_Insert(*p_ctype, row);
    }
    // field: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    amc_vis::FCtype* p_arg = amc_vis::ind_ctype_Find(row.arg);
    if (UNLIKELY(!p_arg)) {
        algo_lib::ResetErrtext() << "amc_vis.bad_xref  index:amc_vis.FDb.ind_ctype" << Keyval("key", row.arg);
        return false;
    }
    // field: save pointer to arg
    if (true) { // user-defined insert condition
        row.p_arg = p_arg;
    }
    amc_vis::FReftype* p_reftype = amc_vis::ind_reftype_Find(row.reftype);
    if (UNLIKELY(!p_reftype)) {
        algo_lib::ResetErrtext() << "amc_vis.bad_xref  index:amc_vis.FDb.ind_reftype" << Keyval("key", row.reftype);
        return false;
    }
    // field: save pointer to reftype
    if (true) { // user-defined insert condition
        row.p_reftype = p_reftype;
    }
    return retval;
}

// --- amc_vis.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     amc_vis.FDb.cmdline
//     algo_lib.FDb.cmdline
void amc_vis::ReadArgv() {
    command::amc_vis &cmd = amc_vis::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::amc_vis_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::amc_vis_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"amc_vis: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"amc_vis: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::amc_vis_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "amc_vis: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::amc_vis_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"amc_vis: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:amc_vis.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!amc_vis::LoadTuplesMaybe(cmd.in,true)) {
            err << "amc_vis.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(amc_vis_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- amc_vis.FDb._db.MainLoop
// Main loop.
void amc_vis::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        amc_vis::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- amc_vis.FDb._db.Step
// Main step
void amc_vis::Step() {
}

// --- amc_vis.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void amc_vis::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("amc_vis", amc_vis::InsertStrptrMaybe, NULL, amc_vis::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "amc_vis.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(amc_vis::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)amc_vis::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'amc_vis.Input'  signature:'533c01b711e8b6ff9e6268d40b3b5c11331f68b5'");
}

// --- amc_vis.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool amc_vis::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    amc_vis::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case amc_vis_TableId_dmmeta_Ctype: { // finput:amc_vis.FDb.ctype
            dmmeta::Ctype elem;
            retval = dmmeta::Ctype_ReadStrptrMaybe(elem, str);
            retval = retval && ctype_InputMaybe(elem);
            break;
        }
        case amc_vis_TableId_dmmeta_Field: { // finput:amc_vis.FDb.field
            dmmeta::Field elem;
            retval = dmmeta::Field_ReadStrptrMaybe(elem, str);
            retval = retval && field_InputMaybe(elem);
            break;
        }
        case amc_vis_TableId_dmmeta_Reftype: { // finput:amc_vis.FDb.reftype
            dmmeta::Reftype elem;
            retval = dmmeta::Reftype_ReadStrptrMaybe(elem, str);
            retval = retval && reftype_InputMaybe(elem);
            break;
        }
        case amc_vis_TableId_dmmeta_Finput: { // finput:amc_vis.FDb.finput
            dmmeta::Finput elem;
            retval = dmmeta::Finput_ReadStrptrMaybe(elem, str);
            retval = retval && finput_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- amc_vis.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool amc_vis::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = amc_vis::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = amc_vis::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && amc_vis::LoadTuplesFile(algo::SsimFname(root,"dmmeta.reftype"),recursive);
        retval = retval && amc_vis::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ctype"),recursive);
        retval = retval && amc_vis::LoadTuplesFile(algo::SsimFname(root,"dmmeta.field"),recursive);
        retval = retval && amc_vis::LoadTuplesFile(algo::SsimFname(root,"dmmeta.finput"),recursive);
        retval = retval && amc_vis::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- amc_vis.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool amc_vis::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- amc_vis.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool amc_vis::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && amc_vis::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- amc_vis.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool amc_vis::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = amc_vis::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- amc_vis.FDb._db.Steps
// Calls Step function of dependencies
void amc_vis::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- amc_vis.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- amc_vis.FDb.ind_ctype.Find
// Find row by key. Return NULL if not found.
amc_vis::FCtype* amc_vis::ind_ctype_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_ctype_buckets_n - 1);
    amc_vis::FCtype* *e = &_db.ind_ctype_buckets_elems[index];
    amc_vis::FCtype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_ctype_next;
    } while (true);
    return ret;
}

// --- amc_vis.FDb.ind_ctype.FindX
// Look up row by key and return reference. Throw exception if not found
amc_vis::FCtype& amc_vis::ind_ctype_FindX(const algo::strptr& key) {
    amc_vis::FCtype* ret = ind_ctype_Find(key);
    vrfy(ret, tempstr() << "amc_vis.key_error  table:ind_ctype  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- amc_vis.FDb.ind_ctype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
amc_vis::FCtype& amc_vis::ind_ctype_GetOrCreate(const algo::strptr& key) {
    amc_vis::FCtype* ret = ind_ctype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ctype_Alloc();
        (*ret).ctype = key;
        bool good = ctype_XrefMaybe(*ret);
        if (!good) {
            ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "amc_vis.create_error  table:ind_ctype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- amc_vis.FDb.ind_ctype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool amc_vis::ind_ctype_InsertMaybe(amc_vis::FCtype& row) {
    ind_ctype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ctype_next == (amc_vis::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        amc_vis::FCtype* *prev = &_db.ind_ctype_buckets_elems[index];
        do {
            amc_vis::FCtype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ctype_next;
        } while (true);
        if (retval) {
            row.ind_ctype_next = *prev;
            _db.ind_ctype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_ctype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void amc_vis::ind_ctype_Remove(amc_vis::FCtype& row) {
    if (LIKELY(row.ind_ctype_next != (amc_vis::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        amc_vis::FCtype* *prev = &_db.ind_ctype_buckets_elems[index]; // addr of pointer to current element
        while (amc_vis::FCtype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ctype_next; // unlink (singly linked list)
                _db.ind_ctype_n--;
                row.ind_ctype_next = (amc_vis::FCtype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ctype_next;
        }
    }
}

// --- amc_vis.FDb.ind_ctype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void amc_vis::ind_ctype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ctype_buckets_n;
    u32 new_nelems   = _db.ind_ctype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(amc_vis::FCtype*);
        u32 new_size = new_nbuckets * sizeof(amc_vis::FCtype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        amc_vis::FCtype* *new_buckets = (amc_vis::FCtype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.ind_ctype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ctype_buckets_n; i++) {
            amc_vis::FCtype* elem = _db.ind_ctype_buckets_elems[i];
            while (elem) {
                amc_vis::FCtype &row        = *elem;
                amc_vis::FCtype* next       = row.ind_ctype_next;
                u32 index          = algo::Smallstr100_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_ctype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ctype_buckets_elems, old_size);
        _db.ind_ctype_buckets_elems = new_buckets;
        _db.ind_ctype_buckets_n = new_nbuckets;
    }
}

// --- amc_vis.FDb.ind_field.Find
// Find row by key. Return NULL if not found.
amc_vis::FField* amc_vis::ind_field_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_field_buckets_n - 1);
    amc_vis::FField* *e = &_db.ind_field_buckets_elems[index];
    amc_vis::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).field == key;
        if (done) break;
        e         = &ret->ind_field_next;
    } while (true);
    return ret;
}

// --- amc_vis.FDb.ind_field.FindX
// Look up row by key and return reference. Throw exception if not found
amc_vis::FField& amc_vis::ind_field_FindX(const algo::strptr& key) {
    amc_vis::FField* ret = ind_field_Find(key);
    vrfy(ret, tempstr() << "amc_vis.key_error  table:ind_field  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- amc_vis.FDb.ind_field.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool amc_vis::ind_field_InsertMaybe(amc_vis::FField& row) {
    ind_field_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_field_next == (amc_vis::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        amc_vis::FField* *prev = &_db.ind_field_buckets_elems[index];
        do {
            amc_vis::FField* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).field == row.field) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_field_next;
        } while (true);
        if (retval) {
            row.ind_field_next = *prev;
            _db.ind_field_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_field.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void amc_vis::ind_field_Remove(amc_vis::FField& row) {
    if (LIKELY(row.ind_field_next != (amc_vis::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        amc_vis::FField* *prev = &_db.ind_field_buckets_elems[index]; // addr of pointer to current element
        while (amc_vis::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_field_next; // unlink (singly linked list)
                _db.ind_field_n--;
                row.ind_field_next = (amc_vis::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_field_next;
        }
    }
}

// --- amc_vis.FDb.ind_field.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void amc_vis::ind_field_Reserve(int n) {
    u32 old_nbuckets = _db.ind_field_buckets_n;
    u32 new_nelems   = _db.ind_field_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(amc_vis::FField*);
        u32 new_size = new_nbuckets * sizeof(amc_vis::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        amc_vis::FField* *new_buckets = (amc_vis::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.ind_field");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_field_buckets_n; i++) {
            amc_vis::FField* elem = _db.ind_field_buckets_elems[i];
            while (elem) {
                amc_vis::FField &row        = *elem;
                amc_vis::FField* next       = row.ind_field_next;
                u32 index          = algo::Smallstr100_Hash(0, row.field) & (new_nbuckets-1);
                row.ind_field_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_field_buckets_elems, old_size);
        _db.ind_field_buckets_elems = new_buckets;
        _db.ind_field_buckets_n = new_nbuckets;
    }
}

// --- amc_vis.FDb.node.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FNode& amc_vis::node_Alloc() {
    amc_vis::FNode* row = node_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.node  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.node.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FNode* amc_vis::node_AllocMaybe() {
    amc_vis::FNode *row = (amc_vis::FNode*)node_AllocMem();
    if (row) {
        new (row) amc_vis::FNode; // call constructor
        row->rowid = i32(node_N() - 1);
    }
    return row;
}

// --- amc_vis.FDb.node.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::node_AllocMem() {
    u64 new_nelems     = _db.node_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FNode*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.node_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FNode*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FNode) * (u64(1)<<bsr));
            _db.node_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.node_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.node.RemoveAll
// Remove all elements from Lary
void amc_vis::node_RemoveAll() {
    for (u64 n = _db.node_n; n>0; ) {
        n--;
        node_qFind(i32(n)).~FNode(); // destroy last element
        _db.node_n = i32(n);
    }
}

// --- amc_vis.FDb.node.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::node_RemoveLast() {
    u64 n = _db.node_n;
    if (n > 0) {
        n -= 1;
        node_qFind(i32(n)).~FNode();
        _db.node_n = i32(n);
    }
}

// --- amc_vis.FDb.node.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::node_XrefMaybe(amc_vis::FNode &row) {
    bool retval = true;
    (void)row;
    // insert node into index ind_node
    if (true) { // user-defined insert condition
        bool success = ind_node_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FDb.ind_node"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_node.Find
// Find row by key. Return NULL if not found.
amc_vis::FNode* amc_vis::ind_node_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_node_buckets_n - 1);
    amc_vis::FNode* *e = &_db.ind_node_buckets_elems[index];
    amc_vis::FNode* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).node == key;
        if (done) break;
        e         = &ret->ind_node_next;
    } while (true);
    return ret;
}

// --- amc_vis.FDb.ind_node.FindX
// Look up row by key and return reference. Throw exception if not found
amc_vis::FNode& amc_vis::ind_node_FindX(const algo::strptr& key) {
    amc_vis::FNode* ret = ind_node_Find(key);
    vrfy(ret, tempstr() << "amc_vis.key_error  table:ind_node  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- amc_vis.FDb.ind_node.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
amc_vis::FNode& amc_vis::ind_node_GetOrCreate(const algo::strptr& key) {
    amc_vis::FNode* ret = ind_node_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &node_Alloc();
        (*ret).node = key;
        bool good = node_XrefMaybe(*ret);
        if (!good) {
            node_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "amc_vis.create_error  table:ind_node  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- amc_vis.FDb.ind_node.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool amc_vis::ind_node_InsertMaybe(amc_vis::FNode& row) {
    ind_node_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_node_next == (amc_vis::FNode*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.node) & (_db.ind_node_buckets_n - 1);
        amc_vis::FNode* *prev = &_db.ind_node_buckets_elems[index];
        do {
            amc_vis::FNode* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).node == row.node) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_node_next;
        } while (true);
        if (retval) {
            row.ind_node_next = *prev;
            _db.ind_node_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_node.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void amc_vis::ind_node_Remove(amc_vis::FNode& row) {
    if (LIKELY(row.ind_node_next != (amc_vis::FNode*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.node) & (_db.ind_node_buckets_n - 1);
        amc_vis::FNode* *prev = &_db.ind_node_buckets_elems[index]; // addr of pointer to current element
        while (amc_vis::FNode *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_node_next; // unlink (singly linked list)
                _db.ind_node_n--;
                row.ind_node_next = (amc_vis::FNode*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_node_next;
        }
    }
}

// --- amc_vis.FDb.ind_node.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void amc_vis::ind_node_Reserve(int n) {
    u32 old_nbuckets = _db.ind_node_buckets_n;
    u32 new_nelems   = _db.ind_node_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(amc_vis::FNode*);
        u32 new_size = new_nbuckets * sizeof(amc_vis::FNode*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        amc_vis::FNode* *new_buckets = (amc_vis::FNode**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.ind_node");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_node_buckets_n; i++) {
            amc_vis::FNode* elem = _db.ind_node_buckets_elems[i];
            while (elem) {
                amc_vis::FNode &row        = *elem;
                amc_vis::FNode* next       = row.ind_node_next;
                u32 index          = algo::Smallstr100_Hash(0, row.node) & (new_nbuckets-1);
                row.ind_node_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_node_buckets_elems, old_size);
        _db.ind_node_buckets_elems = new_buckets;
        _db.ind_node_buckets_n = new_nbuckets;
    }
}

// --- amc_vis.FDb.link.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::Link& amc_vis::link_Alloc() {
    amc_vis::Link* row = link_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.link  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.link.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::Link* amc_vis::link_AllocMaybe() {
    amc_vis::Link *row = (amc_vis::Link*)link_AllocMem();
    if (row) {
        new (row) amc_vis::Link; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.link.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::link_AllocMem() {
    u64 new_nelems     = _db.link_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::Link*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.link_lary[bsr];
        if (!lev) {
            lev=(amc_vis::Link*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Link) * (u64(1)<<bsr));
            _db.link_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.link_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.link.RemoveAll
// Remove all elements from Lary
void amc_vis::link_RemoveAll() {
    for (u64 n = _db.link_n; n>0; ) {
        n--;
        link_qFind(u64(n)).~Link(); // destroy last element
        _db.link_n = i32(n);
    }
}

// --- amc_vis.FDb.link.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::link_RemoveLast() {
    u64 n = _db.link_n;
    if (n > 0) {
        n -= 1;
        link_qFind(u64(n)).~Link();
        _db.link_n = i32(n);
    }
}

// --- amc_vis.FDb.link.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::link_XrefMaybe(amc_vis::Link &row) {
    bool retval = true;
    (void)row;
    // insert link into index ind_link
    if (true) { // user-defined insert condition
        bool success = ind_link_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FDb.ind_link"; // check for duplicate key
            return false;
        }
    }
    amc_vis::FNode* p_p_node1 = row.p_node1;
    if (UNLIKELY(!p_p_node1)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.FNode.zd_link_out";
        return false;
    }
    // insert link into index zd_link_out
    if (true) { // user-defined insert condition
        zd_link_out_Insert(*p_p_node1, row);
    }
    amc_vis::FNode* p_p_node2 = row.p_node2;
    if (UNLIKELY(!p_p_node2)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.FNode.zd_link_in";
        return false;
    }
    // insert link into index zd_link_in
    if (true) { // user-defined insert condition
        zd_link_in_Insert(*p_p_node2, row);
    }
    return retval;
}

// --- amc_vis.FDb.ind_link.Find
// Find row by key. Return NULL if not found.
amc_vis::Link* amc_vis::ind_link_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_link_buckets_n - 1);
    amc_vis::Link* *e = &_db.ind_link_buckets_elems[index];
    amc_vis::Link* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).link == key;
        if (done) break;
        e         = &ret->ind_link_next;
    } while (true);
    return ret;
}

// --- amc_vis.FDb.ind_link.FindX
// Look up row by key and return reference. Throw exception if not found
amc_vis::Link& amc_vis::ind_link_FindX(const algo::strptr& key) {
    amc_vis::Link* ret = ind_link_Find(key);
    vrfy(ret, tempstr() << "amc_vis.key_error  table:ind_link  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- amc_vis.FDb.ind_link.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool amc_vis::ind_link_InsertMaybe(amc_vis::Link& row) {
    ind_link_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_link_next == (amc_vis::Link*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.link) & (_db.ind_link_buckets_n - 1);
        amc_vis::Link* *prev = &_db.ind_link_buckets_elems[index];
        do {
            amc_vis::Link* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).link == row.link) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_link_next;
        } while (true);
        if (retval) {
            row.ind_link_next = *prev;
            _db.ind_link_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_link.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void amc_vis::ind_link_Remove(amc_vis::Link& row) {
    if (LIKELY(row.ind_link_next != (amc_vis::Link*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.link) & (_db.ind_link_buckets_n - 1);
        amc_vis::Link* *prev = &_db.ind_link_buckets_elems[index]; // addr of pointer to current element
        while (amc_vis::Link *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_link_next; // unlink (singly linked list)
                _db.ind_link_n--;
                row.ind_link_next = (amc_vis::Link*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_link_next;
        }
    }
}

// --- amc_vis.FDb.ind_link.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void amc_vis::ind_link_Reserve(int n) {
    u32 old_nbuckets = _db.ind_link_buckets_n;
    u32 new_nelems   = _db.ind_link_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(amc_vis::Link*);
        u32 new_size = new_nbuckets * sizeof(amc_vis::Link*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        amc_vis::Link* *new_buckets = (amc_vis::Link**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.ind_link");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_link_buckets_n; i++) {
            amc_vis::Link* elem = _db.ind_link_buckets_elems[i];
            while (elem) {
                amc_vis::Link &row        = *elem;
                amc_vis::Link* next       = row.ind_link_next;
                u32 index          = algo::Smallstr100_Hash(0, row.link) & (new_nbuckets-1);
                row.ind_link_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_link_buckets_elems, old_size);
        _db.ind_link_buckets_elems = new_buckets;
        _db.ind_link_buckets_n = new_nbuckets;
    }
}

// --- amc_vis.FDb.linkdep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::Linkdep& amc_vis::linkdep_Alloc() {
    amc_vis::Linkdep* row = linkdep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.linkdep  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.linkdep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::Linkdep* amc_vis::linkdep_AllocMaybe() {
    amc_vis::Linkdep *row = (amc_vis::Linkdep*)linkdep_AllocMem();
    if (row) {
        new (row) amc_vis::Linkdep; // call constructor
        row->rowid = i32(linkdep_N() - 1);
    }
    return row;
}

// --- amc_vis.FDb.linkdep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::linkdep_AllocMem() {
    u64 new_nelems     = _db.linkdep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::Linkdep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.linkdep_lary[bsr];
        if (!lev) {
            lev=(amc_vis::Linkdep*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Linkdep) * (u64(1)<<bsr));
            _db.linkdep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.linkdep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.linkdep.RemoveAll
// Remove all elements from Lary
void amc_vis::linkdep_RemoveAll() {
    for (u64 n = _db.linkdep_n; n>0; ) {
        n--;
        linkdep_qFind(i32(n)).~Linkdep(); // destroy last element
        _db.linkdep_n = i32(n);
    }
}

// --- amc_vis.FDb.linkdep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::linkdep_RemoveLast() {
    u64 n = _db.linkdep_n;
    if (n > 0) {
        n -= 1;
        linkdep_qFind(i32(n)).~Linkdep();
        _db.linkdep_n = i32(n);
    }
}

// --- amc_vis.FDb.linkdep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::linkdep_XrefMaybe(amc_vis::Linkdep &row) {
    bool retval = true;
    (void)row;
    amc_vis::Link* p_p_link_from = row.p_link_from;
    if (UNLIKELY(!p_p_link_from)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.Link.zd_linkdep_out";
        return false;
    }
    // insert linkdep into index zd_linkdep_out
    if (true) { // user-defined insert condition
        zd_linkdep_out_Insert(*p_p_link_from, row);
    }
    amc_vis::Link* p_p_link_to = row.p_link_to;
    if (UNLIKELY(!p_p_link_to)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.Link.zd_linkdep_in";
        return false;
    }
    // insert linkdep into index zd_linkdep_in
    if (true) { // user-defined insert condition
        zd_linkdep_in_Insert(*p_p_link_to, row);
    }
    return retval;
}

// --- amc_vis.FDb.c_linklist.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void amc_vis::c_linklist_Insert(amc_vis::Link& row) {
    if (bool_Update(row._db_c_linklist_in_ary,true)) {
        // reserve space
        c_linklist_Reserve(1);
        u32 n  = _db.c_linklist_n;
        u32 at = n;
        amc_vis::Link* *elems = _db.c_linklist_elems;
        elems[at] = &row;
        _db.c_linklist_n = n+1;

    }
}

// --- amc_vis.FDb.c_linklist.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool amc_vis::c_linklist_InsertMaybe(amc_vis::Link& row) {
    bool retval = !row._db_c_linklist_in_ary;
    c_linklist_Insert(row); // check is performed in _Insert again
    return retval;
}

// --- amc_vis.FDb.c_linklist.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void amc_vis::c_linklist_Remove(amc_vis::Link& row) {
    if (bool_Update(row._db_c_linklist_in_ary,false)) {
        int lim = _db.c_linklist_n;
        amc_vis::Link* *elems = _db.c_linklist_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            amc_vis::Link* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(amc_vis::Link*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                _db.c_linklist_n = lim - 1;
                break;
            }
        }
    }
}

// --- amc_vis.FDb.c_linklist.Reserve
// Reserve space in index for N more elements;
void amc_vis::c_linklist_Reserve(u32 n) {
    u32 old_max = _db.c_linklist_max;
    if (UNLIKELY(_db.c_linklist_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(amc_vis::Link*);
        u32 new_size = new_max * sizeof(amc_vis::Link*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.c_linklist_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.c_linklist");
        }
        _db.c_linklist_elems = (amc_vis::Link**)new_mem;
        _db.c_linklist_max = new_max;
    }
}

// --- amc_vis.FDb.bh_node.Dealloc
// Remove all elements from heap and free memory used by the array.
void amc_vis::bh_node_Dealloc() {
    bh_node_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_node_elems, sizeof(amc_vis::FNode*)*_db.bh_node_max);
    _db.bh_node_max   = 0;
    _db.bh_node_elems = NULL;
}

// --- amc_vis.FDb.bh_node.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int amc_vis::bh_node_Downheap(amc_vis::FNode& row, int idx) {
    amc_vis::FNode* *elems = _db.bh_node_elems;
    int n = _db.bh_node_n;
    int child = idx*2+1;
    while (child < n) {
        amc_vis::FNode* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            amc_vis::FNode* q = elems[rchild]; // right child
            if (bh_node_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_node_ElemLt(*p,row)) {
            break;
        }
        p->bh_node_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- amc_vis.FDb.bh_node.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void amc_vis::bh_node_Insert(amc_vis::FNode& row) {
    if (LIKELY(row.bh_node_idx == -1)) {
        bh_node_Reserve(1);
        int n = _db.bh_node_n;
        _db.bh_node_n = n + 1;
        int new_idx = bh_node_Upheap(row, n);
        row.bh_node_idx = new_idx;
        _db.bh_node_elems[new_idx] = &row;
    }
}

// --- amc_vis.FDb.bh_node.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 amc_vis::bh_node_Reheap(amc_vis::FNode& row) {
    int old_idx = row.bh_node_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_node_Reserve(1);
        old_idx = _db.bh_node_n++;
    }
    int new_idx = bh_node_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_node_Downheap(row, old_idx);
    }
    row.bh_node_idx = new_idx;
    _db.bh_node_elems[new_idx] = &row;
    return new_idx;
}

// --- amc_vis.FDb.bh_node.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 amc_vis::bh_node_ReheapFirst() {
    amc_vis::FNode &row = *_db.bh_node_elems[0];
    i32 new_idx = bh_node_Downheap(row, 0);
    row.bh_node_idx = new_idx;
    _db.bh_node_elems[new_idx] = &row;
    return new_idx;
}

// --- amc_vis.FDb.bh_node.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::bh_node_Remove(amc_vis::FNode& row) {
    if (bh_node_InBheapQ(row)) {
        int old_idx = row.bh_node_idx;
        if (_db.bh_node_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_node_idx = -1;           // mark not in heap
            i32 n = _db.bh_node_n - 1; // index of last element in heap
            _db.bh_node_n = n;         // decrease count
            if (old_idx != n) {
                amc_vis::FNode *elem = _db.bh_node_elems[n];
                int new_idx = bh_node_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_node_Downheap(*elem, old_idx);
                }
                elem->bh_node_idx = new_idx;
                _db.bh_node_elems[new_idx] = elem;
            }
        }
    }
}

// --- amc_vis.FDb.bh_node.RemoveAll
// Remove all elements from binary heap
void amc_vis::bh_node_RemoveAll() {
    int n = _db.bh_node_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_node_elems[i]->bh_node_idx = -1; // mark not-in-heap
    }
    _db.bh_node_n = 0;
}

// --- amc_vis.FDb.bh_node.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
amc_vis::FNode* amc_vis::bh_node_RemoveFirst() {
    amc_vis::FNode *row = NULL;
    if (_db.bh_node_n > 0) {
        row = _db.bh_node_elems[0];
        row->bh_node_idx = -1;           // mark not in heap
        i32 n = _db.bh_node_n - 1; // index of last element in heap
        _db.bh_node_n = n;         // decrease count
        if (n) {
            amc_vis::FNode &elem = *_db.bh_node_elems[n];
            int new_idx = bh_node_Downheap(elem, 0);
            elem.bh_node_idx = new_idx;
            _db.bh_node_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- amc_vis.FDb.bh_node.Reserve
// Reserve space in index for N more elements
void amc_vis::bh_node_Reserve(int n) {
    i32 old_max = _db.bh_node_max;
    if (UNLIKELY(_db.bh_node_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(amc_vis::FNode*);
        u32 new_size = new_max * sizeof(amc_vis::FNode*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_node_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.bh_node");
        }
        _db.bh_node_elems = (amc_vis::FNode**)new_mem;
        _db.bh_node_max = new_max;
    }
}

// --- amc_vis.FDb.bh_node.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int amc_vis::bh_node_Upheap(amc_vis::FNode& row, int idx) {
    amc_vis::FNode* *elems = _db.bh_node_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        amc_vis::FNode* p = elems[j];
        if (!bh_node_ElemLt(row, *p)) {
            break;
        }
        p->bh_node_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- amc_vis.FDb.bh_node.ElemLt
inline static bool amc_vis::bh_node_ElemLt(amc_vis::FNode &a, amc_vis::FNode &b) {
    (void)_db;
    return nodekey_Lt(a, b);
}

// --- amc_vis.FDb.bh_link.Dealloc
// Remove all elements from heap and free memory used by the array.
void amc_vis::bh_link_Dealloc() {
    bh_link_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_link_elems, sizeof(amc_vis::Link*)*_db.bh_link_max);
    _db.bh_link_max   = 0;
    _db.bh_link_elems = NULL;
}

// --- amc_vis.FDb.bh_link.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int amc_vis::bh_link_Downheap(amc_vis::Link& row, int idx) {
    amc_vis::Link* *elems = _db.bh_link_elems;
    int n = _db.bh_link_n;
    int child = idx*2+1;
    while (child < n) {
        amc_vis::Link* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            amc_vis::Link* q = elems[rchild]; // right child
            if (bh_link_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_link_ElemLt(*p,row)) {
            break;
        }
        p->bh_link_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- amc_vis.FDb.bh_link.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void amc_vis::bh_link_Insert(amc_vis::Link& row) {
    if (LIKELY(row.bh_link_idx == -1)) {
        bh_link_Reserve(1);
        int n = _db.bh_link_n;
        _db.bh_link_n = n + 1;
        int new_idx = bh_link_Upheap(row, n);
        row.bh_link_idx = new_idx;
        _db.bh_link_elems[new_idx] = &row;
    }
}

// --- amc_vis.FDb.bh_link.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 amc_vis::bh_link_Reheap(amc_vis::Link& row) {
    int old_idx = row.bh_link_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_link_Reserve(1);
        old_idx = _db.bh_link_n++;
    }
    int new_idx = bh_link_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_link_Downheap(row, old_idx);
    }
    row.bh_link_idx = new_idx;
    _db.bh_link_elems[new_idx] = &row;
    return new_idx;
}

// --- amc_vis.FDb.bh_link.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 amc_vis::bh_link_ReheapFirst() {
    amc_vis::Link &row = *_db.bh_link_elems[0];
    i32 new_idx = bh_link_Downheap(row, 0);
    row.bh_link_idx = new_idx;
    _db.bh_link_elems[new_idx] = &row;
    return new_idx;
}

// --- amc_vis.FDb.bh_link.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::bh_link_Remove(amc_vis::Link& row) {
    if (bh_link_InBheapQ(row)) {
        int old_idx = row.bh_link_idx;
        if (_db.bh_link_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_link_idx = -1;           // mark not in heap
            i32 n = _db.bh_link_n - 1; // index of last element in heap
            _db.bh_link_n = n;         // decrease count
            if (old_idx != n) {
                amc_vis::Link *elem = _db.bh_link_elems[n];
                int new_idx = bh_link_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_link_Downheap(*elem, old_idx);
                }
                elem->bh_link_idx = new_idx;
                _db.bh_link_elems[new_idx] = elem;
            }
        }
    }
}

// --- amc_vis.FDb.bh_link.RemoveAll
// Remove all elements from binary heap
void amc_vis::bh_link_RemoveAll() {
    int n = _db.bh_link_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_link_elems[i]->bh_link_idx = -1; // mark not-in-heap
    }
    _db.bh_link_n = 0;
}

// --- amc_vis.FDb.bh_link.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
amc_vis::Link* amc_vis::bh_link_RemoveFirst() {
    amc_vis::Link *row = NULL;
    if (_db.bh_link_n > 0) {
        row = _db.bh_link_elems[0];
        row->bh_link_idx = -1;           // mark not in heap
        i32 n = _db.bh_link_n - 1; // index of last element in heap
        _db.bh_link_n = n;         // decrease count
        if (n) {
            amc_vis::Link &elem = *_db.bh_link_elems[n];
            int new_idx = bh_link_Downheap(elem, 0);
            elem.bh_link_idx = new_idx;
            _db.bh_link_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- amc_vis.FDb.bh_link.Reserve
// Reserve space in index for N more elements
void amc_vis::bh_link_Reserve(int n) {
    i32 old_max = _db.bh_link_max;
    if (UNLIKELY(_db.bh_link_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(amc_vis::Link*);
        u32 new_size = new_max * sizeof(amc_vis::Link*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_link_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.bh_link");
        }
        _db.bh_link_elems = (amc_vis::Link**)new_mem;
        _db.bh_link_max = new_max;
    }
}

// --- amc_vis.FDb.bh_link.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int amc_vis::bh_link_Upheap(amc_vis::Link& row, int idx) {
    amc_vis::Link* *elems = _db.bh_link_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        amc_vis::Link* p = elems[j];
        if (!bh_link_ElemLt(row, *p)) {
            break;
        }
        p->bh_link_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- amc_vis.FDb.bh_link.ElemLt
inline static bool amc_vis::bh_link_ElemLt(amc_vis::Link &a, amc_vis::Link &b) {
    (void)_db;
    return linkkey_Lt(a, b);
}

// --- amc_vis.FDb.reftype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FReftype& amc_vis::reftype_Alloc() {
    amc_vis::FReftype* row = reftype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.reftype  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.reftype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FReftype* amc_vis::reftype_AllocMaybe() {
    amc_vis::FReftype *row = (amc_vis::FReftype*)reftype_AllocMem();
    if (row) {
        new (row) amc_vis::FReftype; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.reftype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
amc_vis::FReftype* amc_vis::reftype_InsertMaybe(const dmmeta::Reftype &value) {
    amc_vis::FReftype *row = &reftype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    reftype_CopyIn(*row,const_cast<dmmeta::Reftype&>(value));
    bool ok = reftype_XrefMaybe(*row); // this may return false
    if (!ok) {
        reftype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- amc_vis.FDb.reftype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::reftype_AllocMem() {
    u64 new_nelems     = _db.reftype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FReftype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.reftype_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FReftype*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FReftype) * (u64(1)<<bsr));
            _db.reftype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.reftype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.reftype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::reftype_RemoveLast() {
    u64 n = _db.reftype_n;
    if (n > 0) {
        n -= 1;
        reftype_qFind(u64(n)).~FReftype();
        _db.reftype_n = i32(n);
    }
}

// --- amc_vis.FDb.reftype.InputMaybe
static bool amc_vis::reftype_InputMaybe(dmmeta::Reftype &elem) {
    bool retval = true;
    retval = reftype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- amc_vis.FDb.reftype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::reftype_XrefMaybe(amc_vis::FReftype &row) {
    bool retval = true;
    (void)row;
    // insert reftype into index ind_reftype
    if (true) { // user-defined insert condition
        bool success = ind_reftype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FDb.ind_reftype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_reftype.Find
// Find row by key. Return NULL if not found.
amc_vis::FReftype* amc_vis::ind_reftype_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_reftype_buckets_n - 1);
    amc_vis::FReftype* *e = &_db.ind_reftype_buckets_elems[index];
    amc_vis::FReftype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).reftype == key;
        if (done) break;
        e         = &ret->ind_reftype_next;
    } while (true);
    return ret;
}

// --- amc_vis.FDb.ind_reftype.FindX
// Look up row by key and return reference. Throw exception if not found
amc_vis::FReftype& amc_vis::ind_reftype_FindX(const algo::strptr& key) {
    amc_vis::FReftype* ret = ind_reftype_Find(key);
    vrfy(ret, tempstr() << "amc_vis.key_error  table:ind_reftype  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- amc_vis.FDb.ind_reftype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
amc_vis::FReftype& amc_vis::ind_reftype_GetOrCreate(const algo::strptr& key) {
    amc_vis::FReftype* ret = ind_reftype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &reftype_Alloc();
        (*ret).reftype = key;
        bool good = reftype_XrefMaybe(*ret);
        if (!good) {
            reftype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "amc_vis.create_error  table:ind_reftype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- amc_vis.FDb.ind_reftype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool amc_vis::ind_reftype_InsertMaybe(amc_vis::FReftype& row) {
    ind_reftype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_reftype_next == (amc_vis::FReftype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.reftype) & (_db.ind_reftype_buckets_n - 1);
        amc_vis::FReftype* *prev = &_db.ind_reftype_buckets_elems[index];
        do {
            amc_vis::FReftype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).reftype == row.reftype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_reftype_next;
        } while (true);
        if (retval) {
            row.ind_reftype_next = *prev;
            _db.ind_reftype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- amc_vis.FDb.ind_reftype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void amc_vis::ind_reftype_Remove(amc_vis::FReftype& row) {
    if (LIKELY(row.ind_reftype_next != (amc_vis::FReftype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.reftype) & (_db.ind_reftype_buckets_n - 1);
        amc_vis::FReftype* *prev = &_db.ind_reftype_buckets_elems[index]; // addr of pointer to current element
        while (amc_vis::FReftype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_reftype_next; // unlink (singly linked list)
                _db.ind_reftype_n--;
                row.ind_reftype_next = (amc_vis::FReftype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_reftype_next;
        }
    }
}

// --- amc_vis.FDb.ind_reftype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void amc_vis::ind_reftype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_reftype_buckets_n;
    u32 new_nelems   = _db.ind_reftype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(amc_vis::FReftype*);
        u32 new_size = new_nbuckets * sizeof(amc_vis::FReftype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        amc_vis::FReftype* *new_buckets = (amc_vis::FReftype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("amc_vis.out_of_memory  field:amc_vis.FDb.ind_reftype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_reftype_buckets_n; i++) {
            amc_vis::FReftype* elem = _db.ind_reftype_buckets_elems[i];
            while (elem) {
                amc_vis::FReftype &row        = *elem;
                amc_vis::FReftype* next       = row.ind_reftype_next;
                u32 index          = algo::Smallstr50_Hash(0, row.reftype) & (new_nbuckets-1);
                row.ind_reftype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_reftype_buckets_elems, old_size);
        _db.ind_reftype_buckets_elems = new_buckets;
        _db.ind_reftype_buckets_n = new_nbuckets;
    }
}

// --- amc_vis.FDb.nodedep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FNodedep& amc_vis::nodedep_Alloc() {
    amc_vis::FNodedep* row = nodedep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.nodedep  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.nodedep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FNodedep* amc_vis::nodedep_AllocMaybe() {
    amc_vis::FNodedep *row = (amc_vis::FNodedep*)nodedep_AllocMem();
    if (row) {
        new (row) amc_vis::FNodedep; // call constructor
        row->rowid = i32(nodedep_N() - 1);
    }
    return row;
}

// --- amc_vis.FDb.nodedep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::nodedep_AllocMem() {
    u64 new_nelems     = _db.nodedep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FNodedep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.nodedep_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FNodedep*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FNodedep) * (u64(1)<<bsr));
            _db.nodedep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.nodedep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.nodedep.RemoveAll
// Remove all elements from Lary
void amc_vis::nodedep_RemoveAll() {
    for (u64 n = _db.nodedep_n; n>0; ) {
        n--;
        nodedep_qFind(i32(n)).~FNodedep(); // destroy last element
        _db.nodedep_n = i32(n);
    }
}

// --- amc_vis.FDb.nodedep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::nodedep_RemoveLast() {
    u64 n = _db.nodedep_n;
    if (n > 0) {
        n -= 1;
        nodedep_qFind(i32(n)).~FNodedep();
        _db.nodedep_n = i32(n);
    }
}

// --- amc_vis.FDb.nodedep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::nodedep_XrefMaybe(amc_vis::FNodedep &row) {
    bool retval = true;
    (void)row;
    amc_vis::FNode* p_p_node1 = row.p_node1;
    if (UNLIKELY(!p_p_node1)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.FNode.zd_nodedep_out";
        return false;
    }
    // insert nodedep into index zd_nodedep_out
    if (true) { // user-defined insert condition
        zd_nodedep_out_Insert(*p_p_node1, row);
    }
    amc_vis::FNode* p_p_node2 = row.p_node2;
    if (UNLIKELY(!p_p_node2)) {
        algo_lib::ResetErrtext() << "amc_vis.null_ref  xref:amc_vis.FNode.zd_nodedep_in";
        return false;
    }
    // insert nodedep into index zd_nodedep_in
    if (true) { // user-defined insert condition
        zd_nodedep_in_Insert(*p_p_node2, row);
    }
    return retval;
}

// --- amc_vis.FDb.outrow.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::Outrow& amc_vis::outrow_Alloc() {
    amc_vis::Outrow* row = outrow_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.outrow  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.outrow.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::Outrow* amc_vis::outrow_AllocMaybe() {
    amc_vis::Outrow *row = (amc_vis::Outrow*)outrow_AllocMem();
    if (row) {
        new (row) amc_vis::Outrow; // call constructor
        row->rowid = i32(outrow_N() - 1);
    }
    return row;
}

// --- amc_vis.FDb.outrow.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::outrow_AllocMem() {
    u64 new_nelems     = _db.outrow_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::Outrow*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.outrow_lary[bsr];
        if (!lev) {
            lev=(amc_vis::Outrow*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Outrow) * (u64(1)<<bsr));
            _db.outrow_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.outrow_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.outrow.RemoveAll
// Remove all elements from Lary
void amc_vis::outrow_RemoveAll() {
    for (u64 n = _db.outrow_n; n>0; ) {
        n--;
        outrow_qFind(i32(n)).~Outrow(); // destroy last element
        _db.outrow_n = i32(n);
    }
}

// --- amc_vis.FDb.outrow.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::outrow_RemoveLast() {
    u64 n = _db.outrow_n;
    if (n > 0) {
        n -= 1;
        outrow_qFind(i32(n)).~Outrow();
        _db.outrow_n = i32(n);
    }
}

// --- amc_vis.FDb.outrow.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::outrow_XrefMaybe(amc_vis::Outrow &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- amc_vis.FDb.zd_select.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_select_Insert(amc_vis::FCtype& row) {
    if (!zd_select_InLlistQ(row)) {
        amc_vis::FCtype* old_tail = _db.zd_select_tail;
        row.zd_select_next = NULL;
        row.zd_select_prev = old_tail;
        _db.zd_select_tail = &row;
        amc_vis::FCtype **new_row_a = &old_tail->zd_select_next;
        amc_vis::FCtype **new_row_b = &_db.zd_select_head;
        amc_vis::FCtype **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_select_n++;
    }
}

// --- amc_vis.FDb.zd_select.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_select_Remove(amc_vis::FCtype& row) {
    if (zd_select_InLlistQ(row)) {
        amc_vis::FCtype* old_head       = _db.zd_select_head;
        (void)old_head; // in case it's not used
        amc_vis::FCtype* prev = row.zd_select_prev;
        amc_vis::FCtype* next = row.zd_select_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::FCtype **new_next_a = &prev->zd_select_next;
        amc_vis::FCtype **new_next_b = &_db.zd_select_head;
        amc_vis::FCtype **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::FCtype **new_prev_a = &next->zd_select_prev;
        amc_vis::FCtype **new_prev_b = &_db.zd_select_tail;
        amc_vis::FCtype **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_select_n--;
        row.zd_select_next=(amc_vis::FCtype*)-1; // not-in-list
    }
}

// --- amc_vis.FDb.zd_select.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_select_RemoveAll() {
    amc_vis::FCtype* row = _db.zd_select_head;
    _db.zd_select_head = NULL;
    _db.zd_select_tail = NULL;
    _db.zd_select_n = 0;
    while (row) {
        amc_vis::FCtype* row_next = row->zd_select_next;
        row->zd_select_next  = (amc_vis::FCtype*)-1;
        row->zd_select_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.FDb.zd_select.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::FCtype* amc_vis::zd_select_RemoveFirst() {
    amc_vis::FCtype *row = NULL;
    row = _db.zd_select_head;
    if (row) {
        amc_vis::FCtype *next = row->zd_select_next;
        _db.zd_select_head = next;
        amc_vis::FCtype **new_end_a = &next->zd_select_prev;
        amc_vis::FCtype **new_end_b = &_db.zd_select_tail;
        amc_vis::FCtype **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_select_n--;
        row->zd_select_next = (amc_vis::FCtype*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.FDb.finput.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
amc_vis::FFinput& amc_vis::finput_Alloc() {
    amc_vis::FFinput* row = finput_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("amc_vis.out_of_mem  field:amc_vis.FDb.finput  comment:'Alloc failed'");
    }
    return *row;
}

// --- amc_vis.FDb.finput.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
amc_vis::FFinput* amc_vis::finput_AllocMaybe() {
    amc_vis::FFinput *row = (amc_vis::FFinput*)finput_AllocMem();
    if (row) {
        new (row) amc_vis::FFinput; // call constructor
    }
    return row;
}

// --- amc_vis.FDb.finput.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
amc_vis::FFinput* amc_vis::finput_InsertMaybe(const dmmeta::Finput &value) {
    amc_vis::FFinput *row = &finput_Alloc(); // if out of memory, process dies. if input error, return NULL.
    finput_CopyIn(*row,const_cast<dmmeta::Finput&>(value));
    bool ok = finput_XrefMaybe(*row); // this may return false
    if (!ok) {
        finput_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- amc_vis.FDb.finput.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* amc_vis::finput_AllocMem() {
    u64 new_nelems     = _db.finput_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    amc_vis::FFinput*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.finput_lary[bsr];
        if (!lev) {
            lev=(amc_vis::FFinput*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FFinput) * (u64(1)<<bsr));
            _db.finput_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.finput_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- amc_vis.FDb.finput.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::finput_RemoveLast() {
    u64 n = _db.finput_n;
    if (n > 0) {
        n -= 1;
        finput_qFind(u64(n)).~FFinput();
        _db.finput_n = i32(n);
    }
}

// --- amc_vis.FDb.finput.InputMaybe
static bool amc_vis::finput_InputMaybe(dmmeta::Finput &elem) {
    bool retval = true;
    retval = finput_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- amc_vis.FDb.finput.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool amc_vis::finput_XrefMaybe(amc_vis::FFinput &row) {
    bool retval = true;
    (void)row;
    amc_vis::FField* p_field = amc_vis::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "amc_vis.bad_xref  index:amc_vis.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert finput into index c_finput
    if (true) { // user-defined insert condition
        bool success = c_finput_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "amc_vis.duplicate_key  xref:amc_vis.FField.c_finput"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- amc_vis.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr amc_vis::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- amc_vis.FDb.trace.N
// Function return 1
inline static i32 amc_vis::trace_N() {
    return 1;
}

// --- amc_vis.FDb.bh_node_curs.Add
static void amc_vis::_db_bh_node_curs_Add(_db_bh_node_curs &curs, amc_vis::FNode& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    amc_vis::FNode* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        amc_vis::FNode* p = elems[j];
        if (!bh_node_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- amc_vis.FDb.bh_node_curs.Reserve
void amc_vis::_db_bh_node_curs_Reserve(_db_bh_node_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_node_N();
        curs.temp_elems   = (amc_vis::FNode**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("amc_vis.cursor_out_of_memory  func:amc_vis.FDb.bh_node_curs.Reserve");
        }
        curs.temp_max       = bh_node_N();
    }
}

// --- amc_vis.FDb.bh_node_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void amc_vis::_db_bh_node_curs_Reset(_db_bh_node_curs &curs, amc_vis::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_node_curs_Reserve(curs, bh_node_N());
    curs.temp_n = 0;
    if (parent.bh_node_n > 0) {
        amc_vis::FNode &first = *parent.bh_node_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- amc_vis.FDb.bh_node_curs.Next
// Advance cursor.
void amc_vis::_db_bh_node_curs_Next(_db_bh_node_curs &curs) {
    amc_vis::FNode* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        amc_vis::FNode* dead = elems[0];
        int i       = 0;
        amc_vis::FNode* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            amc_vis::FNode* choose = last;
            int l         = i*2+1;
            if (l<n) {
                amc_vis::FNode* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                amc_vis::FNode* er = elems[r];
                if (bh_node_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_node_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_node_idx;
        i = (index*2+1);
        if (i < bh_node_N()) {
            amc_vis::FNode &elem = *curs.parent->bh_node_elems[i];
            _db_bh_node_curs_Add(curs, elem);
        }
        if (i+1 < bh_node_N()) {
            amc_vis::FNode &elem = *curs.parent->bh_node_elems[i + 1];
            _db_bh_node_curs_Add(curs, elem);
        }
    }
}

// --- amc_vis.FDb.bh_link_curs.Add
static void amc_vis::_db_bh_link_curs_Add(_db_bh_link_curs &curs, amc_vis::Link& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    amc_vis::Link* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        amc_vis::Link* p = elems[j];
        if (!bh_link_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- amc_vis.FDb.bh_link_curs.Reserve
void amc_vis::_db_bh_link_curs_Reserve(_db_bh_link_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_link_N();
        curs.temp_elems   = (amc_vis::Link**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("amc_vis.cursor_out_of_memory  func:amc_vis.FDb.bh_link_curs.Reserve");
        }
        curs.temp_max       = bh_link_N();
    }
}

// --- amc_vis.FDb.bh_link_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void amc_vis::_db_bh_link_curs_Reset(_db_bh_link_curs &curs, amc_vis::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_link_curs_Reserve(curs, bh_link_N());
    curs.temp_n = 0;
    if (parent.bh_link_n > 0) {
        amc_vis::Link &first = *parent.bh_link_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- amc_vis.FDb.bh_link_curs.Next
// Advance cursor.
void amc_vis::_db_bh_link_curs_Next(_db_bh_link_curs &curs) {
    amc_vis::Link* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        amc_vis::Link* dead = elems[0];
        int i       = 0;
        amc_vis::Link* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            amc_vis::Link* choose = last;
            int l         = i*2+1;
            if (l<n) {
                amc_vis::Link* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                amc_vis::Link* er = elems[r];
                if (bh_link_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_link_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_link_idx;
        i = (index*2+1);
        if (i < bh_link_N()) {
            amc_vis::Link &elem = *curs.parent->bh_link_elems[i];
            _db_bh_link_curs_Add(curs, elem);
        }
        if (i+1 < bh_link_N()) {
            amc_vis::Link &elem = *curs.parent->bh_link_elems[i + 1];
            _db_bh_link_curs_Add(curs, elem);
        }
    }
}

// --- amc_vis.FDb..Init
// Set all fields to initial values.
void amc_vis::FDb_Init() {
    memset(_db.lpool_free, 0, sizeof(_db.lpool_free));
    // initialize LAry ctype (amc_vis.FDb.ctype)
    _db.ctype_n = 0;
    memset(_db.ctype_lary, 0, sizeof(_db.ctype_lary)); // zero out all level pointers
    amc_vis::FCtype* ctype_first = (amc_vis::FCtype*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FCtype) * (u64(1)<<4));
    if (!ctype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ctype_lary[i]  = ctype_first;
        ctype_first    += 1ULL<<i;
    }
    // initialize LAry field (amc_vis.FDb.field)
    _db.field_n = 0;
    memset(_db.field_lary, 0, sizeof(_db.field_lary)); // zero out all level pointers
    amc_vis::FField* field_first = (amc_vis::FField*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FField) * (u64(1)<<4));
    if (!field_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.field_lary[i]  = field_first;
        field_first    += 1ULL<<i;
    }
    // initialize hash table for amc_vis::FCtype;
    _db.ind_ctype_n             	= 0; // (amc_vis.FDb.ind_ctype)
    _db.ind_ctype_buckets_n     	= 4; // (amc_vis.FDb.ind_ctype)
    _db.ind_ctype_buckets_elems 	= (amc_vis::FCtype**)algo_lib::malloc_AllocMem(sizeof(amc_vis::FCtype*)*_db.ind_ctype_buckets_n); // initial buckets (amc_vis.FDb.ind_ctype)
    if (!_db.ind_ctype_buckets_elems) {
        FatalErrorExit("out of memory"); // (amc_vis.FDb.ind_ctype)
    }
    memset(_db.ind_ctype_buckets_elems, 0, sizeof(amc_vis::FCtype*)*_db.ind_ctype_buckets_n); // (amc_vis.FDb.ind_ctype)
    // initialize hash table for amc_vis::FField;
    _db.ind_field_n             	= 0; // (amc_vis.FDb.ind_field)
    _db.ind_field_buckets_n     	= 4; // (amc_vis.FDb.ind_field)
    _db.ind_field_buckets_elems 	= (amc_vis::FField**)algo_lib::malloc_AllocMem(sizeof(amc_vis::FField*)*_db.ind_field_buckets_n); // initial buckets (amc_vis.FDb.ind_field)
    if (!_db.ind_field_buckets_elems) {
        FatalErrorExit("out of memory"); // (amc_vis.FDb.ind_field)
    }
    memset(_db.ind_field_buckets_elems, 0, sizeof(amc_vis::FField*)*_db.ind_field_buckets_n); // (amc_vis.FDb.ind_field)
    // initialize LAry node (amc_vis.FDb.node)
    _db.node_n = 0;
    memset(_db.node_lary, 0, sizeof(_db.node_lary)); // zero out all level pointers
    amc_vis::FNode* node_first = (amc_vis::FNode*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FNode) * (u64(1)<<4));
    if (!node_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.node_lary[i]  = node_first;
        node_first    += 1ULL<<i;
    }
    // initialize hash table for amc_vis::FNode;
    _db.ind_node_n             	= 0; // (amc_vis.FDb.ind_node)
    _db.ind_node_buckets_n     	= 4; // (amc_vis.FDb.ind_node)
    _db.ind_node_buckets_elems 	= (amc_vis::FNode**)algo_lib::malloc_AllocMem(sizeof(amc_vis::FNode*)*_db.ind_node_buckets_n); // initial buckets (amc_vis.FDb.ind_node)
    if (!_db.ind_node_buckets_elems) {
        FatalErrorExit("out of memory"); // (amc_vis.FDb.ind_node)
    }
    memset(_db.ind_node_buckets_elems, 0, sizeof(amc_vis::FNode*)*_db.ind_node_buckets_n); // (amc_vis.FDb.ind_node)
    // initialize LAry link (amc_vis.FDb.link)
    _db.link_n = 0;
    memset(_db.link_lary, 0, sizeof(_db.link_lary)); // zero out all level pointers
    amc_vis::Link* link_first = (amc_vis::Link*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Link) * (u64(1)<<4));
    if (!link_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.link_lary[i]  = link_first;
        link_first    += 1ULL<<i;
    }
    // initialize hash table for amc_vis::Link;
    _db.ind_link_n             	= 0; // (amc_vis.FDb.ind_link)
    _db.ind_link_buckets_n     	= 4; // (amc_vis.FDb.ind_link)
    _db.ind_link_buckets_elems 	= (amc_vis::Link**)algo_lib::malloc_AllocMem(sizeof(amc_vis::Link*)*_db.ind_link_buckets_n); // initial buckets (amc_vis.FDb.ind_link)
    if (!_db.ind_link_buckets_elems) {
        FatalErrorExit("out of memory"); // (amc_vis.FDb.ind_link)
    }
    memset(_db.ind_link_buckets_elems, 0, sizeof(amc_vis::Link*)*_db.ind_link_buckets_n); // (amc_vis.FDb.ind_link)
    // initialize LAry linkdep (amc_vis.FDb.linkdep)
    _db.linkdep_n = 0;
    memset(_db.linkdep_lary, 0, sizeof(_db.linkdep_lary)); // zero out all level pointers
    amc_vis::Linkdep* linkdep_first = (amc_vis::Linkdep*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Linkdep) * (u64(1)<<4));
    if (!linkdep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.linkdep_lary[i]  = linkdep_first;
        linkdep_first    += 1ULL<<i;
    }
    _db.c_linklist_elems = NULL; // (amc_vis.FDb.c_linklist)
    _db.c_linklist_n = 0; // (amc_vis.FDb.c_linklist)
    _db.c_linklist_max = 0; // (amc_vis.FDb.c_linklist)
    _db.bh_node_max   	= 0; // (amc_vis.FDb.bh_node)
    _db.bh_node_n     	= 0; // (amc_vis.FDb.bh_node)
    _db.bh_node_elems 	= NULL; // (amc_vis.FDb.bh_node)
    _db.bh_link_max   	= 0; // (amc_vis.FDb.bh_link)
    _db.bh_link_n     	= 0; // (amc_vis.FDb.bh_link)
    _db.bh_link_elems 	= NULL; // (amc_vis.FDb.bh_link)
    // initialize LAry reftype (amc_vis.FDb.reftype)
    _db.reftype_n = 0;
    memset(_db.reftype_lary, 0, sizeof(_db.reftype_lary)); // zero out all level pointers
    amc_vis::FReftype* reftype_first = (amc_vis::FReftype*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FReftype) * (u64(1)<<4));
    if (!reftype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.reftype_lary[i]  = reftype_first;
        reftype_first    += 1ULL<<i;
    }
    // initialize hash table for amc_vis::FReftype;
    _db.ind_reftype_n             	= 0; // (amc_vis.FDb.ind_reftype)
    _db.ind_reftype_buckets_n     	= 4; // (amc_vis.FDb.ind_reftype)
    _db.ind_reftype_buckets_elems 	= (amc_vis::FReftype**)algo_lib::malloc_AllocMem(sizeof(amc_vis::FReftype*)*_db.ind_reftype_buckets_n); // initial buckets (amc_vis.FDb.ind_reftype)
    if (!_db.ind_reftype_buckets_elems) {
        FatalErrorExit("out of memory"); // (amc_vis.FDb.ind_reftype)
    }
    memset(_db.ind_reftype_buckets_elems, 0, sizeof(amc_vis::FReftype*)*_db.ind_reftype_buckets_n); // (amc_vis.FDb.ind_reftype)
    // initialize LAry nodedep (amc_vis.FDb.nodedep)
    _db.nodedep_n = 0;
    memset(_db.nodedep_lary, 0, sizeof(_db.nodedep_lary)); // zero out all level pointers
    amc_vis::FNodedep* nodedep_first = (amc_vis::FNodedep*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FNodedep) * (u64(1)<<4));
    if (!nodedep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.nodedep_lary[i]  = nodedep_first;
        nodedep_first    += 1ULL<<i;
    }
    // initialize LAry outrow (amc_vis.FDb.outrow)
    _db.outrow_n = 0;
    memset(_db.outrow_lary, 0, sizeof(_db.outrow_lary)); // zero out all level pointers
    amc_vis::Outrow* outrow_first = (amc_vis::Outrow*)algo_lib::malloc_AllocMem(sizeof(amc_vis::Outrow) * (u64(1)<<4));
    if (!outrow_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.outrow_lary[i]  = outrow_first;
        outrow_first    += 1ULL<<i;
    }
    _db.zd_select_head = NULL; // (amc_vis.FDb.zd_select)
    _db.zd_select_n = 0; // (amc_vis.FDb.zd_select)
    _db.zd_select_tail = NULL; // (amc_vis.FDb.zd_select)
    // initialize LAry finput (amc_vis.FDb.finput)
    _db.finput_n = 0;
    memset(_db.finput_lary, 0, sizeof(_db.finput_lary)); // zero out all level pointers
    amc_vis::FFinput* finput_first = (amc_vis::FFinput*)algo_lib::malloc_AllocMem(sizeof(amc_vis::FFinput) * (u64(1)<<4));
    if (!finput_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.finput_lary[i]  = finput_first;
        finput_first    += 1ULL<<i;
    }

    amc_vis::InitReflection();
}

// --- amc_vis.FDb..Uninit
void amc_vis::FDb_Uninit() {
    amc_vis::FDb &row = _db; (void)row;

    // amc_vis.FDb.finput.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.outrow.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.nodedep.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.ind_reftype.Uninit (Thash)  //
    // skip destruction of ind_reftype in global scope

    // amc_vis.FDb.reftype.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.bh_link.Uninit (Bheap)  //Heap of links, used to place links
    // skip destruction in global scope

    // amc_vis.FDb.bh_node.Uninit (Bheap)  //Heap of ctypes, used to compute columns
    // skip destruction in global scope

    // amc_vis.FDb.c_linklist.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(_db.c_linklist_elems, sizeof(amc_vis::Link*)*_db.c_linklist_max); // (amc_vis.FDb.c_linklist)

    // amc_vis.FDb.linkdep.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.ind_link.Uninit (Thash)  //
    // skip destruction of ind_link in global scope

    // amc_vis.FDb.link.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.ind_node.Uninit (Thash)  //
    // skip destruction of ind_node in global scope

    // amc_vis.FDb.node.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.ind_field.Uninit (Thash)  //
    // skip destruction of ind_field in global scope

    // amc_vis.FDb.ind_ctype.Uninit (Thash)  //
    // skip destruction of ind_ctype in global scope

    // amc_vis.FDb.field.Uninit (Lary)  //
    // skip destruction in global scope

    // amc_vis.FDb.ctype.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- amc_vis.FField.msghdr.CopyOut
// Copy fields out of row
void amc_vis::field_CopyOut(amc_vis::FField &row, dmmeta::Field &out) {
    out.field = row.field;
    out.arg = row.arg;
    out.reftype = row.reftype;
    out.dflt = row.dflt;
    out.comment = row.comment;
}

// --- amc_vis.FField.msghdr.CopyIn
// Copy fields in to row
void amc_vis::field_CopyIn(amc_vis::FField &row, dmmeta::Field &in) {
    row.field = in.field;
    row.arg = in.arg;
    row.reftype = in.reftype;
    row.dflt = in.dflt;
    row.comment = in.comment;
}

// --- amc_vis.FField.ctype.Get
algo::Smallstr100 amc_vis::ctype_Get(amc_vis::FField& field) {
    algo::Smallstr100 ret(algo::Pathcomp(field.field, ".RL"));
    return ret;
}

// --- amc_vis.FField.ns.Get
algo::Smallstr16 amc_vis::ns_Get(amc_vis::FField& field) {
    algo::Smallstr16 ret(algo::Pathcomp(field.field, ".RL.RL"));
    return ret;
}

// --- amc_vis.FField.name.Get
algo::Smallstr50 amc_vis::name_Get(amc_vis::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RR"));
    return ret;
}

// --- amc_vis.FField..Init
// Set all fields to initial values.
void amc_vis::FField_Init(amc_vis::FField& field) {
    field.reftype = algo::strptr("Val");
    field.p_ctype = NULL;
    field.p_arg = NULL;
    field.p_reftype = NULL;
    field.c_finput = NULL;
    field.ctype_c_field_in_ary = bool(false);
    field.ind_field_next = (amc_vis::FField*)-1; // (amc_vis.FDb.ind_field) not-in-hash
}

// --- amc_vis.FField..Uninit
void amc_vis::FField_Uninit(amc_vis::FField& field) {
    amc_vis::FField &row = field; (void)row;
    ind_field_Remove(row); // remove field from index ind_field
    amc_vis::FCtype* p_ctype = amc_vis::ind_ctype_Find(ctype_Get(row));
    if (p_ctype)  {
        c_field_Remove(*p_ctype, row);// remove field from index c_field
    }
}

// --- amc_vis.FFinput.msghdr.CopyOut
// Copy fields out of row
void amc_vis::finput_CopyOut(amc_vis::FFinput &row, dmmeta::Finput &out) {
    out.field = row.field;
    out.extrn = row.extrn;
    out.update = row.update;
    out.strict = row.strict;
    out.comment = row.comment;
}

// --- amc_vis.FFinput.msghdr.CopyIn
// Copy fields in to row
void amc_vis::finput_CopyIn(amc_vis::FFinput &row, dmmeta::Finput &in) {
    row.field = in.field;
    row.extrn = in.extrn;
    row.update = in.update;
    row.strict = in.strict;
    row.comment = in.comment;
}

// --- amc_vis.FFinput.ns.Get
algo::Smallstr16 amc_vis::ns_Get(amc_vis::FFinput& finput) {
    algo::Smallstr16 ret(algo::Pathcomp(finput.field, ".LL"));
    return ret;
}

// --- amc_vis.FFinput..Uninit
void amc_vis::FFinput_Uninit(amc_vis::FFinput& finput) {
    amc_vis::FFinput &row = finput; (void)row;
    amc_vis::FField* p_field = amc_vis::ind_field_Find(row.field);
    if (p_field)  {
        c_finput_Remove(*p_field, row);// remove finput from index c_finput
    }
}

// --- amc_vis.Nodekey..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.Nodekey.String  printfmt:Sep
void amc_vis::Nodekey_Print(amc_vis::Nodekey row, algo::cstring& str) {
    u32_Print(row.n_ct_in, str);
    str << '.';
    i32_Print(row.idx, str);
    str << '.';
    i32_Print(row.prev_xpos, str);
}

// --- amc_vis.FNode.zd_nodedep_out.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_nodedep_out_Insert(amc_vis::FNode& node, amc_vis::FNodedep& row) {
    if (!zd_nodedep_out_InLlistQ(row)) {
        amc_vis::FNodedep* old_tail = node.zd_nodedep_out_tail;
        row.zd_nodedep_out_next = NULL;
        row.zd_nodedep_out_prev = old_tail;
        node.zd_nodedep_out_tail = &row;
        amc_vis::FNodedep **new_row_a = &old_tail->zd_nodedep_out_next;
        amc_vis::FNodedep **new_row_b = &node.zd_nodedep_out_head;
        amc_vis::FNodedep **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
    }
}

// --- amc_vis.FNode.zd_nodedep_out.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_nodedep_out_Remove(amc_vis::FNode& node, amc_vis::FNodedep& row) {
    if (zd_nodedep_out_InLlistQ(row)) {
        amc_vis::FNodedep* old_head       = node.zd_nodedep_out_head;
        (void)old_head; // in case it's not used
        amc_vis::FNodedep* prev = row.zd_nodedep_out_prev;
        amc_vis::FNodedep* next = row.zd_nodedep_out_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::FNodedep **new_next_a = &prev->zd_nodedep_out_next;
        amc_vis::FNodedep **new_next_b = &node.zd_nodedep_out_head;
        amc_vis::FNodedep **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::FNodedep **new_prev_a = &next->zd_nodedep_out_prev;
        amc_vis::FNodedep **new_prev_b = &node.zd_nodedep_out_tail;
        amc_vis::FNodedep **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        row.zd_nodedep_out_next=(amc_vis::FNodedep*)-1; // not-in-list
    }
}

// --- amc_vis.FNode.zd_nodedep_out.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_nodedep_out_RemoveAll(amc_vis::FNode& node) {
    amc_vis::FNodedep* row = node.zd_nodedep_out_head;
    node.zd_nodedep_out_head = NULL;
    node.zd_nodedep_out_tail = NULL;
    while (row) {
        amc_vis::FNodedep* row_next = row->zd_nodedep_out_next;
        row->zd_nodedep_out_next  = (amc_vis::FNodedep*)-1;
        row->zd_nodedep_out_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.FNode.zd_nodedep_out.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::FNodedep* amc_vis::zd_nodedep_out_RemoveFirst(amc_vis::FNode& node) {
    amc_vis::FNodedep *row = NULL;
    row = node.zd_nodedep_out_head;
    if (row) {
        amc_vis::FNodedep *next = row->zd_nodedep_out_next;
        node.zd_nodedep_out_head = next;
        amc_vis::FNodedep **new_end_a = &next->zd_nodedep_out_prev;
        amc_vis::FNodedep **new_end_b = &node.zd_nodedep_out_tail;
        amc_vis::FNodedep **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        row->zd_nodedep_out_next = (amc_vis::FNodedep*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.FNode.zd_nodedep_in.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_nodedep_in_Insert(amc_vis::FNode& node, amc_vis::FNodedep& row) {
    if (!zd_nodedep_in_InLlistQ(row)) {
        amc_vis::FNodedep* old_tail = node.zd_nodedep_in_tail;
        row.zd_nodedep_in_next = NULL;
        row.zd_nodedep_in_prev = old_tail;
        node.zd_nodedep_in_tail = &row;
        amc_vis::FNodedep **new_row_a = &old_tail->zd_nodedep_in_next;
        amc_vis::FNodedep **new_row_b = &node.zd_nodedep_in_head;
        amc_vis::FNodedep **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        node.zd_nodedep_in_n++;
    }
}

// --- amc_vis.FNode.zd_nodedep_in.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_nodedep_in_Remove(amc_vis::FNode& node, amc_vis::FNodedep& row) {
    if (zd_nodedep_in_InLlistQ(row)) {
        amc_vis::FNodedep* old_head       = node.zd_nodedep_in_head;
        (void)old_head; // in case it's not used
        amc_vis::FNodedep* prev = row.zd_nodedep_in_prev;
        amc_vis::FNodedep* next = row.zd_nodedep_in_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::FNodedep **new_next_a = &prev->zd_nodedep_in_next;
        amc_vis::FNodedep **new_next_b = &node.zd_nodedep_in_head;
        amc_vis::FNodedep **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::FNodedep **new_prev_a = &next->zd_nodedep_in_prev;
        amc_vis::FNodedep **new_prev_b = &node.zd_nodedep_in_tail;
        amc_vis::FNodedep **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        node.zd_nodedep_in_n--;
        row.zd_nodedep_in_next=(amc_vis::FNodedep*)-1; // not-in-list
    }
}

// --- amc_vis.FNode.zd_nodedep_in.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_nodedep_in_RemoveAll(amc_vis::FNode& node) {
    amc_vis::FNodedep* row = node.zd_nodedep_in_head;
    node.zd_nodedep_in_head = NULL;
    node.zd_nodedep_in_tail = NULL;
    node.zd_nodedep_in_n = 0;
    while (row) {
        amc_vis::FNodedep* row_next = row->zd_nodedep_in_next;
        row->zd_nodedep_in_next  = (amc_vis::FNodedep*)-1;
        row->zd_nodedep_in_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.FNode.zd_nodedep_in.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::FNodedep* amc_vis::zd_nodedep_in_RemoveFirst(amc_vis::FNode& node) {
    amc_vis::FNodedep *row = NULL;
    row = node.zd_nodedep_in_head;
    if (row) {
        amc_vis::FNodedep *next = row->zd_nodedep_in_next;
        node.zd_nodedep_in_head = next;
        amc_vis::FNodedep **new_end_a = &next->zd_nodedep_in_prev;
        amc_vis::FNodedep **new_end_b = &node.zd_nodedep_in_tail;
        amc_vis::FNodedep **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        node.zd_nodedep_in_n--;
        row->zd_nodedep_in_next = (amc_vis::FNodedep*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.FNode.zd_link_out.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_link_out_Insert(amc_vis::FNode& node, amc_vis::Link& row) {
    if (!zd_link_out_InLlistQ(row)) {
        amc_vis::Link* old_tail = node.zd_link_out_tail;
        row.zd_link_out_next = NULL;
        row.zd_link_out_prev = old_tail;
        node.zd_link_out_tail = &row;
        amc_vis::Link **new_row_a = &old_tail->zd_link_out_next;
        amc_vis::Link **new_row_b = &node.zd_link_out_head;
        amc_vis::Link **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        node.zd_link_out_n++;
    }
}

// --- amc_vis.FNode.zd_link_out.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_link_out_Remove(amc_vis::FNode& node, amc_vis::Link& row) {
    if (zd_link_out_InLlistQ(row)) {
        amc_vis::Link* old_head       = node.zd_link_out_head;
        (void)old_head; // in case it's not used
        amc_vis::Link* prev = row.zd_link_out_prev;
        amc_vis::Link* next = row.zd_link_out_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::Link **new_next_a = &prev->zd_link_out_next;
        amc_vis::Link **new_next_b = &node.zd_link_out_head;
        amc_vis::Link **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::Link **new_prev_a = &next->zd_link_out_prev;
        amc_vis::Link **new_prev_b = &node.zd_link_out_tail;
        amc_vis::Link **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        node.zd_link_out_n--;
        row.zd_link_out_next=(amc_vis::Link*)-1; // not-in-list
    }
}

// --- amc_vis.FNode.zd_link_out.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_link_out_RemoveAll(amc_vis::FNode& node) {
    amc_vis::Link* row = node.zd_link_out_head;
    node.zd_link_out_head = NULL;
    node.zd_link_out_tail = NULL;
    node.zd_link_out_n = 0;
    while (row) {
        amc_vis::Link* row_next = row->zd_link_out_next;
        row->zd_link_out_next  = (amc_vis::Link*)-1;
        row->zd_link_out_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.FNode.zd_link_out.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::Link* amc_vis::zd_link_out_RemoveFirst(amc_vis::FNode& node) {
    amc_vis::Link *row = NULL;
    row = node.zd_link_out_head;
    if (row) {
        amc_vis::Link *next = row->zd_link_out_next;
        node.zd_link_out_head = next;
        amc_vis::Link **new_end_a = &next->zd_link_out_prev;
        amc_vis::Link **new_end_b = &node.zd_link_out_tail;
        amc_vis::Link **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        node.zd_link_out_n--;
        row->zd_link_out_next = (amc_vis::Link*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.FNode.zd_link_in.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_link_in_Insert(amc_vis::FNode& node, amc_vis::Link& row) {
    if (!zd_link_in_InLlistQ(row)) {
        amc_vis::Link* old_tail = node.zd_link_in_tail;
        row.zd_link_in_next = NULL;
        row.zd_link_in_prev = old_tail;
        node.zd_link_in_tail = &row;
        amc_vis::Link **new_row_a = &old_tail->zd_link_in_next;
        amc_vis::Link **new_row_b = &node.zd_link_in_head;
        amc_vis::Link **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        node.zd_link_in_n++;
    }
}

// --- amc_vis.FNode.zd_link_in.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_link_in_Remove(amc_vis::FNode& node, amc_vis::Link& row) {
    if (zd_link_in_InLlistQ(row)) {
        amc_vis::Link* old_head       = node.zd_link_in_head;
        (void)old_head; // in case it's not used
        amc_vis::Link* prev = row.zd_link_in_prev;
        amc_vis::Link* next = row.zd_link_in_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::Link **new_next_a = &prev->zd_link_in_next;
        amc_vis::Link **new_next_b = &node.zd_link_in_head;
        amc_vis::Link **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::Link **new_prev_a = &next->zd_link_in_prev;
        amc_vis::Link **new_prev_b = &node.zd_link_in_tail;
        amc_vis::Link **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        node.zd_link_in_n--;
        row.zd_link_in_next=(amc_vis::Link*)-1; // not-in-list
    }
}

// --- amc_vis.FNode.zd_link_in.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_link_in_RemoveAll(amc_vis::FNode& node) {
    amc_vis::Link* row = node.zd_link_in_head;
    node.zd_link_in_head = NULL;
    node.zd_link_in_tail = NULL;
    node.zd_link_in_n = 0;
    while (row) {
        amc_vis::Link* row_next = row->zd_link_in_next;
        row->zd_link_in_next  = (amc_vis::Link*)-1;
        row->zd_link_in_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.FNode.zd_link_in.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::Link* amc_vis::zd_link_in_RemoveFirst(amc_vis::FNode& node) {
    amc_vis::Link *row = NULL;
    row = node.zd_link_in_head;
    if (row) {
        amc_vis::Link *next = row->zd_link_in_next;
        node.zd_link_in_head = next;
        amc_vis::Link **new_end_a = &next->zd_link_in_prev;
        amc_vis::Link **new_end_b = &node.zd_link_in_tail;
        amc_vis::Link **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        node.zd_link_in_n--;
        row->zd_link_in_next = (amc_vis::Link*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.FNode..Init
// Set all fields to initial values.
void amc_vis::FNode_Init(amc_vis::FNode& node) {
    node.xpos = i32(1);
    node.c_bottom = NULL;
    node.c_top = NULL;
    node.p_ctype = NULL;
    node.rowid = i32(0);
    node.zd_nodedep_out_head = NULL; // (amc_vis.FNode.zd_nodedep_out)
    node.zd_nodedep_out_tail = NULL; // (amc_vis.FNode.zd_nodedep_out)
    node.zd_nodedep_in_head = NULL; // (amc_vis.FNode.zd_nodedep_in)
    node.zd_nodedep_in_n = 0; // (amc_vis.FNode.zd_nodedep_in)
    node.zd_nodedep_in_tail = NULL; // (amc_vis.FNode.zd_nodedep_in)
    node.zd_link_out_head = NULL; // (amc_vis.FNode.zd_link_out)
    node.zd_link_out_n = 0; // (amc_vis.FNode.zd_link_out)
    node.zd_link_out_tail = NULL; // (amc_vis.FNode.zd_link_out)
    node.zd_link_in_head = NULL; // (amc_vis.FNode.zd_link_in)
    node.zd_link_in_n = 0; // (amc_vis.FNode.zd_link_in)
    node.zd_link_in_tail = NULL; // (amc_vis.FNode.zd_link_in)
    node.ind_node_next = (amc_vis::FNode*)-1; // (amc_vis.FDb.ind_node) not-in-hash
    node.bh_node_idx = -1; // (amc_vis.FDb.bh_node) not-in-heap
}

// --- amc_vis.FNode..Uninit
void amc_vis::FNode_Uninit(amc_vis::FNode& node) {
    amc_vis::FNode &row = node; (void)row;
    ind_node_Remove(row); // remove node from index ind_node
    bh_node_Remove(row); // remove node from index bh_node
}

// --- amc_vis.FNodedep..Uninit
void amc_vis::FNodedep_Uninit(amc_vis::FNodedep& nodedep) {
    amc_vis::FNodedep &row = nodedep; (void)row;
    amc_vis::FNode* p_p_node1 = row.p_node1;
    if (p_p_node1)  {
        zd_nodedep_out_Remove(*p_p_node1, row);// remove nodedep from index zd_nodedep_out
    }
    amc_vis::FNode* p_p_node2 = row.p_node2;
    if (p_p_node2)  {
        zd_nodedep_in_Remove(*p_p_node2, row);// remove nodedep from index zd_nodedep_in
    }
}

// --- amc_vis.FReftype.msghdr.CopyOut
// Copy fields out of row
void amc_vis::reftype_CopyOut(amc_vis::FReftype &row, dmmeta::Reftype &out) {
    out.reftype = row.reftype;
    out.isval = row.isval;
    out.cascins = row.cascins;
    out.usebasepool = row.usebasepool;
    out.cancopy = row.cancopy;
    out.isxref = row.isxref;
    out.del = row.del;
    out.up = row.up;
    out.isnew = row.isnew;
    out.hasalloc = row.hasalloc;
    out.inst = row.inst;
    out.varlen = row.varlen;
}

// --- amc_vis.FReftype.msghdr.CopyIn
// Copy fields in to row
void amc_vis::reftype_CopyIn(amc_vis::FReftype &row, dmmeta::Reftype &in) {
    row.reftype = in.reftype;
    row.isval = in.isval;
    row.cascins = in.cascins;
    row.usebasepool = in.usebasepool;
    row.cancopy = in.cancopy;
    row.isxref = in.isxref;
    row.del = in.del;
    row.up = in.up;
    row.isnew = in.isnew;
    row.hasalloc = in.hasalloc;
    row.inst = in.inst;
    row.varlen = in.varlen;
}

// --- amc_vis.FReftype..Init
// Set all fields to initial values.
void amc_vis::FReftype_Init(amc_vis::FReftype& reftype) {
    reftype.reftype = algo::strptr("Val");
    reftype.isval = bool(false);
    reftype.cascins = bool(false);
    reftype.usebasepool = bool(false);
    reftype.cancopy = bool(false);
    reftype.isxref = bool(false);
    reftype.del = bool(false);
    reftype.up = bool(false);
    reftype.isnew = bool(false);
    reftype.hasalloc = bool(false);
    reftype.inst = bool(false);
    reftype.varlen = bool(false);
    reftype.ind_reftype_next = (amc_vis::FReftype*)-1; // (amc_vis.FDb.ind_reftype) not-in-hash
}

// --- amc_vis.FReftype..Uninit
void amc_vis::FReftype_Uninit(amc_vis::FReftype& reftype) {
    amc_vis::FReftype &row = reftype; (void)row;
    ind_reftype_Remove(row); // remove reftype from index ind_reftype
}

// --- amc_vis.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* amc_vis::value_ToCstr(const amc_vis::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case amc_vis_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- amc_vis.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void amc_vis::value_Print(const amc_vis::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- amc_vis.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool amc_vis::value_SetStrptrMaybe(amc_vis::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,amc_vis_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- amc_vis.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void amc_vis::value_SetStrptr(amc_vis::FieldId& parent, algo::strptr rhs, amc_vis_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- amc_vis.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool amc_vis::value_ReadStrptrMaybe(amc_vis::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- amc_vis.FieldId..ReadStrptrMaybe
// Read fields of amc_vis::FieldId from an ascii string.
// The format of the string is the format of the amc_vis::FieldId's only field
bool amc_vis::FieldId_ReadStrptrMaybe(amc_vis::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- amc_vis.FieldId..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.FieldId.String  printfmt:Raw
void amc_vis::FieldId_Print(amc_vis::FieldId& row, algo::cstring& str) {
    amc_vis::value_Print(row, str);
}

// --- amc_vis.Linkkey..Cmp
i32 amc_vis::Linkkey_Cmp(amc_vis::Linkkey lhs, amc_vis::Linkkey rhs) {
    i32 retval = 0;
    retval = u32_Cmp(lhs.n_link_in, rhs.n_link_in);
    if (retval != 0) {
        return retval;
    }
    retval = i32_Cmp(lhs.samecol, rhs.samecol);
    if (retval != 0) {
        return retval;
    }
    retval = i32_Cmp(lhs.colweight, rhs.colweight);
    if (retval != 0) {
        return retval;
    }
    retval = i32_Cmp(lhs.topbot, rhs.topbot);
    return retval;
}

// --- amc_vis.Linkkey..Eq
bool amc_vis::Linkkey_Eq(amc_vis::Linkkey lhs, amc_vis::Linkkey rhs) {
    bool retval = true;
    retval = u32_Eq(lhs.n_link_in, rhs.n_link_in);
    if (!retval) {
        return false;
    }
    retval = i32_Eq(lhs.samecol, rhs.samecol);
    if (!retval) {
        return false;
    }
    retval = i32_Eq(lhs.colweight, rhs.colweight);
    if (!retval) {
        return false;
    }
    retval = i32_Eq(lhs.topbot, rhs.topbot);
    return retval;
}

// --- amc_vis.Linkkey..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.Linkkey.String  printfmt:Tuple
void amc_vis::Linkkey_Print(amc_vis::Linkkey row, algo::cstring& str) {
    algo::tempstr temp;
    str << "amc_vis.Linkkey";

    u32_Print(row.n_link_in, temp);
    PrintAttrSpaceReset(str,"n_link_in", temp);

    i32_Print(row.samecol, temp);
    PrintAttrSpaceReset(str,"samecol", temp);

    i32_Print(row.colweight, temp);
    PrintAttrSpaceReset(str,"colweight", temp);

    i32_Print(row.topbot, temp);
    PrintAttrSpaceReset(str,"topbot", temp);
}

// --- amc_vis.Link.zd_linkdep_out.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_linkdep_out_Insert(amc_vis::Link& link, amc_vis::Linkdep& row) {
    if (!zd_linkdep_out_InLlistQ(row)) {
        amc_vis::Linkdep* old_tail = link.zd_linkdep_out_tail;
        row.zd_linkdep_out_next = NULL;
        row.zd_linkdep_out_prev = old_tail;
        link.zd_linkdep_out_tail = &row;
        amc_vis::Linkdep **new_row_a = &old_tail->zd_linkdep_out_next;
        amc_vis::Linkdep **new_row_b = &link.zd_linkdep_out_head;
        amc_vis::Linkdep **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
    }
}

// --- amc_vis.Link.zd_linkdep_out.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_linkdep_out_Remove(amc_vis::Link& link, amc_vis::Linkdep& row) {
    if (zd_linkdep_out_InLlistQ(row)) {
        amc_vis::Linkdep* old_head       = link.zd_linkdep_out_head;
        (void)old_head; // in case it's not used
        amc_vis::Linkdep* prev = row.zd_linkdep_out_prev;
        amc_vis::Linkdep* next = row.zd_linkdep_out_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::Linkdep **new_next_a = &prev->zd_linkdep_out_next;
        amc_vis::Linkdep **new_next_b = &link.zd_linkdep_out_head;
        amc_vis::Linkdep **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::Linkdep **new_prev_a = &next->zd_linkdep_out_prev;
        amc_vis::Linkdep **new_prev_b = &link.zd_linkdep_out_tail;
        amc_vis::Linkdep **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        row.zd_linkdep_out_next=(amc_vis::Linkdep*)-1; // not-in-list
    }
}

// --- amc_vis.Link.zd_linkdep_out.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_linkdep_out_RemoveAll(amc_vis::Link& link) {
    amc_vis::Linkdep* row = link.zd_linkdep_out_head;
    link.zd_linkdep_out_head = NULL;
    link.zd_linkdep_out_tail = NULL;
    while (row) {
        amc_vis::Linkdep* row_next = row->zd_linkdep_out_next;
        row->zd_linkdep_out_next  = (amc_vis::Linkdep*)-1;
        row->zd_linkdep_out_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.Link.zd_linkdep_out.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::Linkdep* amc_vis::zd_linkdep_out_RemoveFirst(amc_vis::Link& link) {
    amc_vis::Linkdep *row = NULL;
    row = link.zd_linkdep_out_head;
    if (row) {
        amc_vis::Linkdep *next = row->zd_linkdep_out_next;
        link.zd_linkdep_out_head = next;
        amc_vis::Linkdep **new_end_a = &next->zd_linkdep_out_prev;
        amc_vis::Linkdep **new_end_b = &link.zd_linkdep_out_tail;
        amc_vis::Linkdep **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        row->zd_linkdep_out_next = (amc_vis::Linkdep*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.Link.zd_linkdep_in.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void amc_vis::zd_linkdep_in_Insert(amc_vis::Link& link, amc_vis::Linkdep& row) {
    if (!zd_linkdep_in_InLlistQ(row)) {
        amc_vis::Linkdep* old_tail = link.zd_linkdep_in_tail;
        row.zd_linkdep_in_next = NULL;
        row.zd_linkdep_in_prev = old_tail;
        link.zd_linkdep_in_tail = &row;
        amc_vis::Linkdep **new_row_a = &old_tail->zd_linkdep_in_next;
        amc_vis::Linkdep **new_row_b = &link.zd_linkdep_in_head;
        amc_vis::Linkdep **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
    }
}

// --- amc_vis.Link.zd_linkdep_in.Remove
// Remove element from index. If element is not in index, do nothing.
void amc_vis::zd_linkdep_in_Remove(amc_vis::Link& link, amc_vis::Linkdep& row) {
    if (zd_linkdep_in_InLlistQ(row)) {
        amc_vis::Linkdep* old_head       = link.zd_linkdep_in_head;
        (void)old_head; // in case it's not used
        amc_vis::Linkdep* prev = row.zd_linkdep_in_prev;
        amc_vis::Linkdep* next = row.zd_linkdep_in_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        amc_vis::Linkdep **new_next_a = &prev->zd_linkdep_in_next;
        amc_vis::Linkdep **new_next_b = &link.zd_linkdep_in_head;
        amc_vis::Linkdep **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        amc_vis::Linkdep **new_prev_a = &next->zd_linkdep_in_prev;
        amc_vis::Linkdep **new_prev_b = &link.zd_linkdep_in_tail;
        amc_vis::Linkdep **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        row.zd_linkdep_in_next=(amc_vis::Linkdep*)-1; // not-in-list
    }
}

// --- amc_vis.Link.zd_linkdep_in.RemoveAll
// Empty the index. (The rows are not deleted)
void amc_vis::zd_linkdep_in_RemoveAll(amc_vis::Link& link) {
    amc_vis::Linkdep* row = link.zd_linkdep_in_head;
    link.zd_linkdep_in_head = NULL;
    link.zd_linkdep_in_tail = NULL;
    while (row) {
        amc_vis::Linkdep* row_next = row->zd_linkdep_in_next;
        row->zd_linkdep_in_next  = (amc_vis::Linkdep*)-1;
        row->zd_linkdep_in_prev  = NULL;
        row = row_next;
    }
}

// --- amc_vis.Link.zd_linkdep_in.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
amc_vis::Linkdep* amc_vis::zd_linkdep_in_RemoveFirst(amc_vis::Link& link) {
    amc_vis::Linkdep *row = NULL;
    row = link.zd_linkdep_in_head;
    if (row) {
        amc_vis::Linkdep *next = row->zd_linkdep_in_next;
        link.zd_linkdep_in_head = next;
        amc_vis::Linkdep **new_end_a = &next->zd_linkdep_in_prev;
        amc_vis::Linkdep **new_end_b = &link.zd_linkdep_in_tail;
        amc_vis::Linkdep **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        row->zd_linkdep_in_next = (amc_vis::Linkdep*)-1; // mark as not-in-list
    }
    return row;
}

// --- amc_vis.Link..Init
// Set all fields to initial values.
void amc_vis::Link_Init(amc_vis::Link& link) {
    link.outrow = i32(0);
    link.p_node1 = NULL;
    link.p_node2 = NULL;
    link.upptr = bool(false);
    link.zd_linkdep_out_head = NULL; // (amc_vis.Link.zd_linkdep_out)
    link.zd_linkdep_out_tail = NULL; // (amc_vis.Link.zd_linkdep_out)
    link.zd_linkdep_in_head = NULL; // (amc_vis.Link.zd_linkdep_in)
    link.zd_linkdep_in_tail = NULL; // (amc_vis.Link.zd_linkdep_in)
    link._db_c_linklist_in_ary = bool(false);
    link.ind_link_next = (amc_vis::Link*)-1; // (amc_vis.FDb.ind_link) not-in-hash
    link.bh_link_idx = -1; // (amc_vis.FDb.bh_link) not-in-heap
    link.zd_link_out_next = (amc_vis::Link*)-1; // (amc_vis.FNode.zd_link_out) not-in-list
    link.zd_link_out_prev = NULL; // (amc_vis.FNode.zd_link_out)
    link.zd_link_in_next = (amc_vis::Link*)-1; // (amc_vis.FNode.zd_link_in) not-in-list
    link.zd_link_in_prev = NULL; // (amc_vis.FNode.zd_link_in)
}

// --- amc_vis.Link..Uninit
void amc_vis::Link_Uninit(amc_vis::Link& link) {
    amc_vis::Link &row = link; (void)row;
    ind_link_Remove(row); // remove link from index ind_link
    c_linklist_Remove(row); // remove link from index c_linklist
    bh_link_Remove(row); // remove link from index bh_link
    amc_vis::FNode* p_p_node1 = row.p_node1;
    if (p_p_node1)  {
        zd_link_out_Remove(*p_p_node1, row);// remove link from index zd_link_out
    }
    amc_vis::FNode* p_p_node2 = row.p_node2;
    if (p_p_node2)  {
        zd_link_in_Remove(*p_p_node2, row);// remove link from index zd_link_in
    }
}

// --- amc_vis.Link..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.Link.String  printfmt:Tuple
void amc_vis::Link_Print(amc_vis::Link& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "amc_vis.Link";

    algo::Smallstr100_Print(row.link, temp);
    PrintAttrSpaceReset(str,"link", temp);

    algo::Smallstr100_Print(row.label1, temp);
    PrintAttrSpaceReset(str,"label1", temp);

    algo::Smallstr100_Print(row.label2, temp);
    PrintAttrSpaceReset(str,"label2", temp);

    amc_vis::Linkkey_Print(row.linkkey, temp);
    PrintAttrSpaceReset(str,"linkkey", temp);

    i32_Print(row.outrow, temp);
    PrintAttrSpaceReset(str,"outrow", temp);

    bool_Print(row.upptr, temp);
    PrintAttrSpaceReset(str,"upptr", temp);

    bool_Print(row._db_c_linklist_in_ary, temp);
    PrintAttrSpaceReset(str,"_db_c_linklist_in_ary", temp);
}

// --- amc_vis.Linkdep..Uninit
void amc_vis::Linkdep_Uninit(amc_vis::Linkdep& linkdep) {
    amc_vis::Linkdep &row = linkdep; (void)row;
    amc_vis::Link* p_p_link_from = row.p_link_from;
    if (p_p_link_from)  {
        zd_linkdep_out_Remove(*p_p_link_from, row);// remove linkdep from index zd_linkdep_out
    }
    amc_vis::Link* p_p_link_to = row.p_link_to;
    if (p_p_link_to)  {
        zd_linkdep_in_Remove(*p_p_link_to, row);// remove linkdep from index zd_linkdep_in
    }
}

// --- amc_vis.Linkdep..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.Linkdep.String  printfmt:Tuple
void amc_vis::Linkdep_Print(amc_vis::Linkdep& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "amc_vis.Linkdep";

    i32_Print(row.row, temp);
    PrintAttrSpaceReset(str,"row", temp);

    i32_Print(row.rowid, temp);
    PrintAttrSpaceReset(str,"rowid", temp);

    bool_Print(row.up, temp);
    PrintAttrSpaceReset(str,"up", temp);

    bool_Print(row.inst, temp);
    PrintAttrSpaceReset(str,"inst", temp);
}

// --- amc_vis.Outrow.text.Addary
// Reserve space (this may move memory). Insert N element at the end.
// Return aryptr to newly inserted block.
// If the RHS argument aliases the array (refers to the same memory), exit program with fatal error.
algo::aryptr<u8> amc_vis::text_Addary(amc_vis::Outrow& outrow, algo::aryptr<u8> rhs) {
    bool overlaps = rhs.n_elems>0 && rhs.elems >= outrow.text_elems && rhs.elems < outrow.text_elems + outrow.text_max;
    if (UNLIKELY(overlaps)) {
        FatalErrorExit("amc_vis.tary_alias  field:amc_vis.Outrow.text  comment:'alias error: sub-array is being appended to the whole'");
    }
    int nnew = rhs.n_elems;
    text_Reserve(outrow, nnew); // reserve space
    int at = outrow.text_n;
    memcpy(outrow.text_elems + at, rhs.elems, nnew * sizeof(u8));
    outrow.text_n += nnew;
    return algo::aryptr<u8>(outrow.text_elems + at, nnew);
}

// --- amc_vis.Outrow.text.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
u8& amc_vis::text_Alloc(amc_vis::Outrow& outrow) {
    text_Reserve(outrow, 1);
    int n  = outrow.text_n;
    int at = n;
    u8 *elems = outrow.text_elems;
    new (elems + at) u8(0); // construct new element, default initializer
    outrow.text_n = n+1;
    return elems[at];
}

// --- amc_vis.Outrow.text.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
u8& amc_vis::text_AllocAt(amc_vis::Outrow& outrow, int at) {
    text_Reserve(outrow, 1);
    int n  = outrow.text_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("amc_vis.bad_alloc_at  field:amc_vis.Outrow.text  comment:'index out of range'");
    }
    u8 *elems = outrow.text_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(u8));
    new (elems + at) u8(0); // construct element, default initializer
    outrow.text_n = n+1;
    return elems[at];
}

// --- amc_vis.Outrow.text.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8> amc_vis::text_AllocN(amc_vis::Outrow& outrow, int n_elems) {
    text_Reserve(outrow, n_elems);
    int old_n  = outrow.text_n;
    int new_n = old_n + n_elems;
    u8 *elems = outrow.text_elems;
    memset(elems + old_n, 0, new_n - old_n); // initialize new space
    outrow.text_n = new_n;
    return algo::aryptr<u8>(elems + old_n, n_elems);
}

// --- amc_vis.Outrow.text.Remove
// Remove item by index. If index outside of range, do nothing.
void amc_vis::text_Remove(amc_vis::Outrow& outrow, u32 i) {
    u32 lim = outrow.text_n;
    u8 *elems = outrow.text_elems;
    if (i < lim) {
        memmove(elems + i, elems + (i + 1), sizeof(u8) * (lim - (i + 1)));
        outrow.text_n = lim - 1;
    }
}

// --- amc_vis.Outrow.text.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void amc_vis::text_RemoveLast(amc_vis::Outrow& outrow) {
    u64 n = outrow.text_n;
    if (n > 0) {
        n -= 1;
        outrow.text_n = n;
    }
}

// --- amc_vis.Outrow.text.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void amc_vis::text_AbsReserve(amc_vis::Outrow& outrow, int n) {
    u32 old_max  = outrow.text_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(outrow.text_elems, old_max * sizeof(u8), new_max * sizeof(u8));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("amc_vis.tary_nomem  field:amc_vis.Outrow.text  comment:'out of memory'");
        }
        outrow.text_elems = (u8*)new_mem;
        outrow.text_max = new_max;
    }
}

// --- amc_vis.Outrow.text.Print
// Convert text to a string.
// Array is printed as a regular string.
void amc_vis::text_Print(amc_vis::Outrow& outrow, algo::cstring &rhs) {
    rhs << algo::memptr_ToStrptr(text_Getary(outrow));
}

// --- amc_vis.Outrow.text.Setary
// Copy contents of RHS to PARENT.
void amc_vis::text_Setary(amc_vis::Outrow& outrow, amc_vis::Outrow &rhs) {
    text_RemoveAll(outrow);
    int nnew = rhs.text_n;
    text_Reserve(outrow, nnew); // reserve space
    memcpy(outrow.text_elems, rhs.text_elems, nnew * sizeof(u8));
    outrow.text_n = nnew;
}

// --- amc_vis.Outrow.text.Setary2
// Copy specified array into text, discarding previous contents.
// If the RHS argument aliases the array (refers to the same memory), throw exception.
void amc_vis::text_Setary(amc_vis::Outrow& outrow, const algo::aryptr<u8> &rhs) {
    text_RemoveAll(outrow);
    text_Addary(outrow, rhs);
}

// --- amc_vis.Outrow.text.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<u8> amc_vis::text_AllocNVal(amc_vis::Outrow& outrow, int n_elems, const u8& val) {
    text_Reserve(outrow, n_elems);
    int old_n  = outrow.text_n;
    int new_n = old_n + n_elems;
    u8 *elems = outrow.text_elems;
    memset(elems + old_n, val, new_n - old_n); // initialize new space
    outrow.text_n = new_n;
    return algo::aryptr<u8>(elems + old_n, n_elems);
}

// --- amc_vis.Outrow.text.ReadStrptrMaybe
// The array is replaced with the input string. Function always succeeds.
bool amc_vis::text_ReadStrptrMaybe(amc_vis::Outrow& outrow, algo::strptr in_str) {
    bool retval = true;
    text_RemoveAll(outrow);
    text_Addary(outrow,algo::strptr_ToMemptr(in_str));
    return retval;
}

// --- amc_vis.Outrow..Uninit
void amc_vis::Outrow_Uninit(amc_vis::Outrow& outrow) {
    amc_vis::Outrow &row = outrow; (void)row;

    // amc_vis.Outrow.text.Uninit (Tary)  //text
    // remove all elements from amc_vis.Outrow.text
    text_RemoveAll(outrow);
    // free memory for Tary amc_vis.Outrow.text
    algo_lib::malloc_FreeMem(outrow.text_elems, sizeof(u8)*outrow.text_max); // (amc_vis.Outrow.text)
}

// --- amc_vis.Outrow..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.Outrow.String  printfmt:Tuple
void amc_vis::Outrow_Print(amc_vis::Outrow& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "amc_vis.Outrow";

    i32_Print(row.rowid, temp);
    PrintAttrSpaceReset(str,"rowid", temp);

    amc_vis::text_Print(row, temp);
    PrintAttrSpaceReset(str,"text", temp);
}

// --- amc_vis.Outrow..AssignOp
amc_vis::Outrow& amc_vis::Outrow::operator =(const amc_vis::Outrow &rhs) {
    rowid = rhs.rowid;
    text_Setary(*this, text_Getary(const_cast<amc_vis::Outrow&>(rhs)));
    return *this;
}

// --- amc_vis.Outrow..CopyCtor
 amc_vis::Outrow::Outrow(const amc_vis::Outrow &rhs)
    : rowid(rhs.rowid)
 {
    text_elems 	= 0; // (amc_vis.Outrow.text)
    text_n     	= 0; // (amc_vis.Outrow.text)
    text_max   	= 0; // (amc_vis.Outrow.text)
    text_Setary(*this, text_Getary(const_cast<amc_vis::Outrow&>(rhs)));
}

// --- amc_vis.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* amc_vis::value_ToCstr(const amc_vis::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case amc_vis_TableId_dmmeta_Ctype  : ret = "dmmeta.Ctype";  break;
        case amc_vis_TableId_dmmeta_Field  : ret = "dmmeta.Field";  break;
        case amc_vis_TableId_dmmeta_Finput : ret = "dmmeta.Finput";  break;
        case amc_vis_TableId_dmmeta_Reftype: ret = "dmmeta.Reftype";  break;
    }
    return ret;
}

// --- amc_vis.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void amc_vis::value_Print(const amc_vis::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- amc_vis.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool amc_vis::value_SetStrptrMaybe(amc_vis::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_Ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_Field); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_field); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"input",5)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_Finput); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"input",5)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_finput); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','R'): {
                    if (memcmp(rhs.elems+8,"eftype",6)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_Reftype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','r'): {
                    if (memcmp(rhs.elems+8,"eftype",6)==0) { value_SetEnum(parent,amc_vis_TableId_dmmeta_reftype); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- amc_vis.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void amc_vis::value_SetStrptr(amc_vis::TableId& parent, algo::strptr rhs, amc_vis_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- amc_vis.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool amc_vis::value_ReadStrptrMaybe(amc_vis::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- amc_vis.TableId..ReadStrptrMaybe
// Read fields of amc_vis::TableId from an ascii string.
// The format of the string is the format of the amc_vis::TableId's only field
bool amc_vis::TableId_ReadStrptrMaybe(amc_vis::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- amc_vis.TableId..Print
// print string representation of ROW to string STR
// cfmt:amc_vis.TableId.String  printfmt:Raw
void amc_vis::TableId_Print(amc_vis::TableId& row, algo::cstring& str) {
    amc_vis::value_Print(row, str);
}

// --- amc_vis...SizeCheck
inline static void amc_vis::SizeCheck() {
}

// --- amc_vis...StaticCheck
void amc_vis::StaticCheck() {
    algo_assert(_offset_of(amc_vis::FieldId, value) + sizeof(((amc_vis::FieldId*)0)->value) == sizeof(amc_vis::FieldId));
}

// --- amc_vis...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        amc_vis::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        amc_vis::ReadArgv(); // dmmeta.main:amc_vis
        amc_vis::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("amc_vis.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        amc_vis::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- amc_vis...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
