//
// cpp/gen/algo_pch_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/algo_pch_gen.h"
#include "include/gen/algo_pch_gen.inl.h"
//#pragma endinclude
namespace algo_pch { // gen:ns_print_proto
    static void          SizeCheck();
} // gen:ns_print_proto

// --- algo_pch.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* algo_pch::value_ToCstr(const algo_pch::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case algo_pch_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- algo_pch.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void algo_pch::value_Print(const algo_pch::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- algo_pch.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool algo_pch::value_SetStrptrMaybe(algo_pch::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,algo_pch_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- algo_pch.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void algo_pch::value_SetStrptr(algo_pch::FieldId& parent, algo::strptr rhs, algo_pch_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- algo_pch.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool algo_pch::value_ReadStrptrMaybe(algo_pch::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- algo_pch.FieldId..ReadStrptrMaybe
// Read fields of algo_pch::FieldId from an ascii string.
// The format of the string is the format of the algo_pch::FieldId's only field
bool algo_pch::FieldId_ReadStrptrMaybe(algo_pch::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && algo_pch::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- algo_pch.FieldId..Print
// print string representation of algo_pch::FieldId to string LHS, no header -- cprint:algo_pch.FieldId.String
void algo_pch::FieldId_Print(algo_pch::FieldId & row, algo::cstring &str) {
    algo_pch::value_Print(row, str);
}

// --- algo_pch...SizeCheck
inline static void algo_pch::SizeCheck() {
}
