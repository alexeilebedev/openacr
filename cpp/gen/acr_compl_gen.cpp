//
// cpp/gen/acr_compl_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/acr_compl_gen.h"
#include "include/gen/acr_compl_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb    lib_json::_db;     // dependency found via dev.targdep
algo_lib::FDb    algo_lib::_db;     // dependency found via dev.targdep
acr_compl::FDb   acr_compl::_db;    // dependency found via dev.targdep

namespace acr_compl {
const char *acr_compl_help =
"acr_compl: ACR shell auto-complete for all targets\n"
"Usage: acr_compl [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -data       string  \"data\"  Source for completions (dir or file or -)\n"
"    -schema     string  \"data\"  Source for schema information\n"
"    -line       string  \"\"      Simulates COMP_LINE (debug)\n"
"    -point      string  \"\"      Simulates COMP_POINT (debug). default: whole line\n"
"    -type       string  \"9\"     Simulates COMP_TYPE (debug)\n"
"    -install                    Produce bash commands to install the handler\n"
"    -debug_log  string  \"\"      Log file for debug information, overrides ACR_COMPL_DEBUG_LOG\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace acr_compl
acr_compl::_db_bh_completion_curs::~_db_bh_completion_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace acr_compl { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          ctype_InputMaybe(dmmeta::Ctype &elem) __attribute__((nothrow));
    static bool          field_InputMaybe(dmmeta::Field &elem) __attribute__((nothrow));
    static bool          ssimfile_InputMaybe(dmmeta::Ssimfile &elem) __attribute__((nothrow));
    static bool          anonfld_InputMaybe(dmmeta::Anonfld &elem) __attribute__((nothrow));
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    static int           bh_completion_Downheap(acr_compl::FCompletion& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    static int           bh_completion_Upheap(acr_compl::FCompletion& row, int idx) __attribute__((nothrow));
    static bool          bh_completion_ElemLt(acr_compl::FCompletion &a, acr_compl::FCompletion &b) __attribute__((nothrow));
    static void          _db_bh_completion_curs_Add(_db_bh_completion_curs &curs, acr_compl::FCompletion& row);
    static bool          ns_InputMaybe(dmmeta::Ns &elem) __attribute__((nothrow));
    static bool          fconst_InputMaybe(dmmeta::Fconst &elem) __attribute__((nothrow));
    static bool          fcmdline_InputMaybe(dmmeta::Fcmdline &elem) __attribute__((nothrow));
    static bool          fflag_InputMaybe(dmmeta::Fflag &elem) __attribute__((nothrow));
    static bool          argvtype_InputMaybe(dmmeta::Argvtype &elem) __attribute__((nothrow));
    static bool          falias_InputMaybe(dmmeta::Falias &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- acr_compl.Badness.badness.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_compl::badness_ToCstr(const acr_compl::Badness& parent) {
    const char *ret = NULL;
    switch(badness_GetEnum(parent)) {
        case acr_compl_Badness_first       : ret = "first";  break;
        case acr_compl_Badness_last_word   : ret = "last_word";  break;
        case acr_compl_Badness_substring   : ret = "substring";  break;
    }
    return ret;
}

// --- acr_compl.Badness.badness.Print
// Convert badness to a string. First, attempt conversion to a known string.
// If no string matches, print badness as a numeric value.
void acr_compl::badness_Print(const acr_compl::Badness& parent, algo::cstring &lhs) {
    const char *strval = badness_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.badness;
    }
}

// --- acr_compl.Badness.badness.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_compl::badness_SetStrptrMaybe(acr_compl::Badness& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('f','i','r','s','t'): {
                    badness_SetEnum(parent,acr_compl_Badness_first); ret = true; break;
                }
            }
            break;
        }
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('l','a','s','t','_','w','o','r'): {
                    if (memcmp(rhs.elems+8,"d",1)==0) { badness_SetEnum(parent,acr_compl_Badness_last_word); ret = true; break; }
                    break;
                }
                case LE_STR8('s','u','b','s','t','r','i','n'): {
                    if (memcmp(rhs.elems+8,"g",1)==0) { badness_SetEnum(parent,acr_compl_Badness_substring); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_compl.Badness.badness.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_compl::badness_SetStrptr(acr_compl::Badness& parent, algo::strptr rhs, acr_compl_BadnessEnum dflt) {
    if (!badness_SetStrptrMaybe(parent,rhs)) badness_SetEnum(parent,dflt);
}

// --- acr_compl.Badness.badness.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_compl::badness_ReadStrptrMaybe(acr_compl::Badness& parent, algo::strptr rhs) {
    bool retval = false;
    retval = badness_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u8_ReadStrptrMaybe(parent.badness,rhs);
    }
    return retval;
}

// --- acr_compl.Badness..ReadFieldMaybe
bool acr_compl::Badness_ReadFieldMaybe(acr_compl::Badness &parent, algo::strptr field, algo::strptr strval) {
    acr_compl::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case acr_compl_FieldId_badness: retval = badness_ReadStrptrMaybe(parent, strval); break;
        case acr_compl_FieldId_strkey: retval = algo::cstring_ReadStrptrMaybe(parent.strkey, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- acr_compl.Badness..ReadStrptrMaybe
// Read fields of acr_compl::Badness from an ascii string.
// The format of the string is a string with separated values
bool acr_compl::Badness_ReadStrptrMaybe(acr_compl::Badness &parent, algo::strptr in_str) {
    bool retval = true;
    algo::strptr value;

    algo::NextSep(in_str, '.', value);
    retval = retval && badness_ReadStrptrMaybe(parent, value);

    value = in_str;
    retval = retval && algo::cstring_ReadStrptrMaybe(parent.strkey, value);
    return retval;
}

// --- acr_compl.Badness..GetAnon
algo::strptr acr_compl::Badness_GetAnon(acr_compl::Badness &parent, i32 idx) {
    (void)parent;//only to avoid -Wunused-parameter
    switch(idx) {
        case(0): return strptr("badness", 7);
        default: return algo::strptr();
    }
}

// --- acr_compl.Completion..ReadFieldMaybe
bool acr_compl::Completion_ReadFieldMaybe(acr_compl::Completion &parent, algo::strptr field, algo::strptr strval) {
    acr_compl::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case acr_compl_FieldId_value: retval = algo::cstring_ReadStrptrMaybe(parent.value, strval); break;
        case acr_compl_FieldId_nospace: retval = bool_ReadStrptrMaybe(parent.nospace, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- acr_compl.Completion..ReadStrptrMaybe
// Read fields of acr_compl::Completion from an ascii string.
// The format of the string is an ssim Tuple
bool acr_compl::Completion_ReadStrptrMaybe(acr_compl::Completion &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "acr_compl.Completion");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && Completion_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- acr_compl.Completion..Print
// print string representation of acr_compl::Completion to string LHS, no header -- cprint:acr_compl.Completion.String
void acr_compl::Completion_Print(acr_compl::Completion & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.Completion";

    algo::cstring_Print(row.value, temp);
    PrintAttrSpaceReset(str,"value", temp);

    bool_Print(row.nospace, temp);
    PrintAttrSpaceReset(str,"nospace", temp);
}

// --- acr_compl.FAnonfld.msghdr.CopyOut
// Copy fields out of row
void acr_compl::anonfld_CopyOut(acr_compl::FAnonfld &row, dmmeta::Anonfld &out) {
    out.field = row.field;
    out.comment = row.comment;
}

// --- acr_compl.FAnonfld.msghdr.CopyIn
// Copy fields in to row
void acr_compl::anonfld_CopyIn(acr_compl::FAnonfld &row, dmmeta::Anonfld &in) {
    row.field = in.field;
    row.comment = in.comment;
}

// --- acr_compl.FAnonfld..Uninit
void acr_compl::FAnonfld_Uninit(acr_compl::FAnonfld& anonfld) {
    acr_compl::FAnonfld &row = anonfld; (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (p_field)  {
        c_anonfld_Remove(*p_field, row);// remove anonfld from index c_anonfld
    }
}

// --- acr_compl.FAnonfld..Print
// print string representation of acr_compl::FAnonfld to string LHS, no header -- cprint:acr_compl.FAnonfld.String
void acr_compl::FAnonfld_Print(acr_compl::FAnonfld & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.FAnonfld";

    algo::Smallstr100_Print(row.field, temp);
    PrintAttrSpaceReset(str,"field", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);
}

// --- acr_compl.FArgvtype.base.CopyOut
// Copy fields out of row
void acr_compl::argvtype_CopyOut(acr_compl::FArgvtype &row, dmmeta::Argvtype &out) {
    out.ctype = row.ctype;
    out.argvtype = row.argvtype;
    out.comment = row.comment;
}

// --- acr_compl.FArgvtype.base.CopyIn
// Copy fields in to row
void acr_compl::argvtype_CopyIn(acr_compl::FArgvtype &row, dmmeta::Argvtype &in) {
    row.ctype = in.ctype;
    row.argvtype = in.argvtype;
    row.comment = in.comment;
}

// --- acr_compl.FArgvtype..Uninit
void acr_compl::FArgvtype_Uninit(acr_compl::FArgvtype& argvtype) {
    acr_compl::FArgvtype &row = argvtype; (void)row;
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(row.ctype);
    if (p_ctype)  {
        c_argvtype_Remove(*p_ctype, row);// remove argvtype from index c_argvtype
    }
}

// --- acr_compl.FCompletion.msghdr.CopyOut
// Copy fields out of row
void acr_compl::completion_CopyOut(acr_compl::FCompletion &row, acr_compl::Completion &out) {
    out.value = row.value;
    out.nospace = row.nospace;
}

// --- acr_compl.FCompletion.msghdr.CopyIn
// Copy fields in to row
void acr_compl::completion_CopyIn(acr_compl::FCompletion &row, acr_compl::Completion &in) {
    row.value = in.value;
    row.nospace = in.nospace;
}

// --- acr_compl.FCompletion..ReadFieldMaybe
bool acr_compl::FCompletion_ReadFieldMaybe(acr_compl::FCompletion &parent, algo::strptr field, algo::strptr strval) {
    acr_compl::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case acr_compl_FieldId_msghdr: retval = false; break;
        case acr_compl_FieldId_value: retval = algo::cstring_ReadStrptrMaybe(parent.value, strval); break;
        case acr_compl_FieldId_nospace: retval = bool_ReadStrptrMaybe(parent.nospace, strval); break;
        case acr_compl_FieldId_badness: retval = acr_compl::Badness_ReadStrptrMaybe(parent.badness, strval); break;
        case acr_compl_FieldId_field: retval = false; break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- acr_compl.FCompletion..ReadStrptrMaybe
// Read fields of acr_compl::FCompletion from an ascii string.
// The format of the string is an ssim Tuple
bool acr_compl::FCompletion_ReadStrptrMaybe(acr_compl::FCompletion &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "acr_compl.FCompletion");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && FCompletion_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- acr_compl.FCompletion..Uninit
void acr_compl::FCompletion_Uninit(acr_compl::FCompletion& completion) {
    acr_compl::FCompletion &row = completion; (void)row;
    bh_completion_Remove(row); // remove completion from index bh_completion
}

// --- acr_compl.FCompletion..Print
// print string representation of acr_compl::FCompletion to string LHS, no header -- cprint:acr_compl.FCompletion.String
void acr_compl::FCompletion_Print(acr_compl::FCompletion & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.FCompletion";

    algo::cstring_Print(row.value, temp);
    PrintAttrSpaceReset(str,"value", temp);

    bool_Print(row.nospace, temp);
    PrintAttrSpaceReset(str,"nospace", temp);

    u64_PrintHex(u64((const acr_compl::FField*)row.field), temp, 8, true);
    PrintAttrSpaceReset(str,"field", temp);
}

// --- acr_compl.FCtype.msghdr.CopyOut
// Copy fields out of row
void acr_compl::ctype_CopyOut(acr_compl::FCtype &row, dmmeta::Ctype &out) {
    out.ctype = row.ctype;
    out.comment = row.comment;
}

// --- acr_compl.FCtype.msghdr.CopyIn
// Copy fields in to row
void acr_compl::ctype_CopyIn(acr_compl::FCtype &row, dmmeta::Ctype &in) {
    row.ctype = in.ctype;
    row.comment = in.comment;
}

// --- acr_compl.FCtype.ns.Get
algo::Smallstr16 acr_compl::ns_Get(acr_compl::FCtype& ctype) {
    algo::Smallstr16 ret(algo::Pathcomp(ctype.ctype, ".RL"));
    return ret;
}

// --- acr_compl.FCtype.name.Get
algo::Smallstr50 acr_compl::name_Get(acr_compl::FCtype& ctype) {
    algo::Smallstr50 ret(algo::Pathcomp(ctype.ctype, ".RR"));
    return ret;
}

// --- acr_compl.FCtype.c_field.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_compl::c_field_Insert(acr_compl::FCtype& ctype, acr_compl::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,true)) {
        // reserve space
        c_field_Reserve(ctype, 1);
        u32 n  = ctype.c_field_n;
        u32 at = n;
        acr_compl::FField* *elems = ctype.c_field_elems;
        elems[at] = &row;
        ctype.c_field_n = n+1;

    }
}

// --- acr_compl.FCtype.c_field.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool acr_compl::c_field_InsertMaybe(acr_compl::FCtype& ctype, acr_compl::FField& row) {
    bool retval = !row.ctype_c_field_in_ary;
    c_field_Insert(ctype,row); // check is performed in _Insert again
    return retval;
}

// --- acr_compl.FCtype.c_field.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_compl::c_field_Remove(acr_compl::FCtype& ctype, acr_compl::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,false)) {
        int lim = ctype.c_field_n;
        acr_compl::FField* *elems = ctype.c_field_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            acr_compl::FField* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(acr_compl::FField*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                ctype.c_field_n = lim - 1;
                break;
            }
        }
    }
}

// --- acr_compl.FCtype.c_field.Reserve
// Reserve space in index for N more elements;
void acr_compl::c_field_Reserve(acr_compl::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_field_max;
    if (UNLIKELY(ctype.c_field_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_compl::FField*);
        u32 new_size = new_max * sizeof(acr_compl::FField*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_field_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FCtype.c_field");
        }
        ctype.c_field_elems = (acr_compl::FField**)new_mem;
        ctype.c_field_max = new_max;
    }
}

// --- acr_compl.FCtype..Uninit
void acr_compl::FCtype_Uninit(acr_compl::FCtype& ctype) {
    acr_compl::FCtype &row = ctype; (void)row;
    ind_ctype_Remove(row); // remove ctype from index ind_ctype

    // acr_compl.FCtype.c_field.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(ctype.c_field_elems, sizeof(acr_compl::FField*)*ctype.c_field_max); // (acr_compl.FCtype.c_field)
}

// --- acr_compl.FCtype..Print
// print string representation of acr_compl::FCtype to string LHS, no header -- cprint:acr_compl.FCtype.String
void acr_compl::FCtype_Print(acr_compl::FCtype & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.FCtype";

    algo::Smallstr50_Print(row.ctype, temp);
    PrintAttrSpaceReset(str,"ctype", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);

    u64_PrintHex(u64((const acr_compl::FSsimfile*)row.c_ssimfile), temp, 8, true);
    PrintAttrSpaceReset(str,"c_ssimfile", temp);

    u64_PrintHex(u64((const acr_compl::FArgvtype*)row.c_argvtype), temp, 8, true);
    PrintAttrSpaceReset(str,"c_argvtype", temp);
}

// --- acr_compl.trace..Print
// print string representation of acr_compl::trace to string LHS, no header -- cprint:acr_compl.trace.String
void acr_compl::trace_Print(acr_compl::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- acr_compl.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     acr_compl.FDb.cmdline
//     algo_lib.FDb.cmdline
void acr_compl::ReadArgv() {
    command::acr_compl &cmd = acr_compl::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::acr_compl_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"acr_compl: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "acr_compl: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::acr_compl_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"acr_compl: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(acr_compl_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- acr_compl.FDb._db.MainLoop
// Main loop.
void acr_compl::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        acr_compl::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- acr_compl.FDb._db.Step
// Main step
void acr_compl::Step() {
}

// --- acr_compl.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void acr_compl::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("acr_compl", acr_compl::InsertStrptrMaybe, NULL, acr_compl::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "acr_compl.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(acr_compl::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)acr_compl::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'acr_compl.Input'  signature:'dab8aaf9cc440b037ce59d91ffe8aa39f4df4836'");
}

// --- acr_compl.FDb._db.StaticCheck
void acr_compl::StaticCheck() {
    algo_assert(_offset_of(acr_compl::FieldId, value) + sizeof(((acr_compl::FieldId*)0)->value) == sizeof(acr_compl::FieldId));
}

// --- acr_compl.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool acr_compl::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    acr_compl::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case acr_compl_TableId_dmmeta_Ctype: { // finput:acr_compl.FDb.ctype
            dmmeta::Ctype elem;
            retval = dmmeta::Ctype_ReadStrptrMaybe(elem, str);
            retval = retval && ctype_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Field: { // finput:acr_compl.FDb.field
            dmmeta::Field elem;
            retval = dmmeta::Field_ReadStrptrMaybe(elem, str);
            retval = retval && field_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Ssimfile: { // finput:acr_compl.FDb.ssimfile
            dmmeta::Ssimfile elem;
            retval = dmmeta::Ssimfile_ReadStrptrMaybe(elem, str);
            retval = retval && ssimfile_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Anonfld: { // finput:acr_compl.FDb.anonfld
            dmmeta::Anonfld elem;
            retval = dmmeta::Anonfld_ReadStrptrMaybe(elem, str);
            retval = retval && anonfld_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Ns: { // finput:acr_compl.FDb.ns
            dmmeta::Ns elem;
            retval = dmmeta::Ns_ReadStrptrMaybe(elem, str);
            retval = retval && ns_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Fconst: { // finput:acr_compl.FDb.fconst
            dmmeta::Fconst elem;
            retval = dmmeta::Fconst_ReadStrptrMaybe(elem, str);
            retval = retval && fconst_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Fcmdline: { // finput:acr_compl.FDb.fcmdline
            dmmeta::Fcmdline elem;
            retval = dmmeta::Fcmdline_ReadStrptrMaybe(elem, str);
            retval = retval && fcmdline_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Fflag: { // finput:acr_compl.FDb.fflag
            dmmeta::Fflag elem;
            retval = dmmeta::Fflag_ReadStrptrMaybe(elem, str);
            retval = retval && fflag_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Argvtype: { // finput:acr_compl.FDb.argvtype
            dmmeta::Argvtype elem;
            retval = dmmeta::Argvtype_ReadStrptrMaybe(elem, str);
            retval = retval && argvtype_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case acr_compl_TableId_dmmeta_Falias: { // finput:acr_compl.FDb.falias
            dmmeta::Falias elem;
            retval = dmmeta::Falias_ReadStrptrMaybe(elem, str);
            retval = retval && falias_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- acr_compl.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool acr_compl::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = acr_compl::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = acr_compl::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ns"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ctype"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.field"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ssimfile"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.fflag"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.fconst"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.fcmdline"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.falias"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.argvtype"),recursive);
        retval = retval && acr_compl::LoadTuplesFile(algo::SsimFname(root,"dmmeta.anonfld"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- acr_compl.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool acr_compl::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- acr_compl.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool acr_compl::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && acr_compl::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- acr_compl.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool acr_compl::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = acr_compl::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- acr_compl.FDb._db.Steps
// Calls Step function of dependencies
void acr_compl::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- acr_compl.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- acr_compl.FDb.word.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
algo::cstring& acr_compl::word_Alloc() {
    word_Reserve(1);
    int n  = _db.word_n;
    int at = n;
    algo::cstring *elems = _db.word_elems;
    new (elems + at) algo::cstring(); // construct new element, default initializer
    _db.word_n = n+1;
    return elems[at];
}

// --- acr_compl.FDb.word.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
algo::cstring& acr_compl::word_AllocAt(int at) {
    word_Reserve(1);
    int n  = _db.word_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("acr_compl.bad_alloc_at  field:acr_compl.FDb.word  comment:'index out of range'");
    }
    algo::cstring *elems = _db.word_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(algo::cstring));
    new (elems + at) algo::cstring(); // construct element, default initializer
    _db.word_n = n+1;
    return elems[at];
}

// --- acr_compl.FDb.word.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> acr_compl::word_AllocN(int n_elems) {
    word_Reserve(n_elems);
    int old_n  = _db.word_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.word_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(); // construct new element, default initialize
    }
    _db.word_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- acr_compl.FDb.word.Remove
// Remove item by index. If index outside of range, do nothing.
void acr_compl::word_Remove(u32 i) {
    u32 lim = _db.word_n;
    algo::cstring *elems = _db.word_elems;
    if (i < lim) {
        elems[i].~cstring(); // destroy element
        memmove(elems + i, elems + (i + 1), sizeof(algo::cstring) * (lim - (i + 1)));
        _db.word_n = lim - 1;
    }
}

// --- acr_compl.FDb.word.RemoveAll
void acr_compl::word_RemoveAll() {
    u32 n = _db.word_n;
    while (n > 0) {
        n -= 1;
        _db.word_elems[n].~cstring();
        _db.word_n = n;
    }
}

// --- acr_compl.FDb.word.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::word_RemoveLast() {
    u64 n = _db.word_n;
    if (n > 0) {
        n -= 1;
        word_qFind(u64(n)).~cstring();
        _db.word_n = n;
    }
}

// --- acr_compl.FDb.word.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void acr_compl::word_AbsReserve(int n) {
    u32 old_max  = _db.word_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.word_elems, old_max * sizeof(algo::cstring), new_max * sizeof(algo::cstring));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_compl.tary_nomem  field:acr_compl.FDb.word  comment:'out of memory'");
        }
        _db.word_elems = (algo::cstring*)new_mem;
        _db.word_max = new_max;
    }
}

// --- acr_compl.FDb.word.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> acr_compl::word_AllocNVal(int n_elems, const algo::cstring& val) {
    word_Reserve(n_elems);
    int old_n  = _db.word_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.word_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(val);
    }
    _db.word_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- acr_compl.FDb.ctype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FCtype& acr_compl::ctype_Alloc() {
    acr_compl::FCtype* row = ctype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.ctype  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.ctype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FCtype* acr_compl::ctype_AllocMaybe() {
    acr_compl::FCtype *row = (acr_compl::FCtype*)ctype_AllocMem();
    if (row) {
        new (row) acr_compl::FCtype; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.ctype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FCtype* acr_compl::ctype_InsertMaybe(const dmmeta::Ctype &value) {
    acr_compl::FCtype *row = &ctype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ctype_CopyIn(*row,const_cast<dmmeta::Ctype&>(value));
    bool ok = ctype_XrefMaybe(*row); // this may return false
    if (!ok) {
        ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.ctype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::ctype_AllocMem() {
    u64 new_nelems     = _db.ctype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FCtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ctype_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FCtype*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FCtype) * (u64(1)<<bsr));
            _db.ctype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ctype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.ctype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::ctype_RemoveLast() {
    u64 n = _db.ctype_n;
    if (n > 0) {
        n -= 1;
        ctype_qFind(u64(n)).~FCtype();
        _db.ctype_n = i32(n);
    }
}

// --- acr_compl.FDb.ctype.InputMaybe
static bool acr_compl::ctype_InputMaybe(dmmeta::Ctype &elem) {
    bool retval = true;
    retval = ctype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.ctype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::ctype_XrefMaybe(acr_compl::FCtype &row) {
    bool retval = true;
    (void)row;
    // insert ctype into index ind_ctype
    if (true) { // user-defined insert condition
        bool success = ind_ctype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FDb.ind_ctype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_ctype.Find
// Find row by key. Return NULL if not found.
acr_compl::FCtype* acr_compl::ind_ctype_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ctype_buckets_n - 1);
    acr_compl::FCtype* *e = &_db.ind_ctype_buckets_elems[index];
    acr_compl::FCtype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_ctype_next;
    } while (true);
    return ret;
}

// --- acr_compl.FDb.ind_ctype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_compl::FCtype& acr_compl::ind_ctype_GetOrCreate(const algo::strptr& key) {
    acr_compl::FCtype* ret = ind_ctype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ctype_Alloc();
        (*ret).ctype = key;
        bool good = ctype_XrefMaybe(*ret);
        if (!good) {
            ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_compl.create_error  table:ind_ctype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_compl.FDb.ind_ctype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_compl::ind_ctype_InsertMaybe(acr_compl::FCtype& row) {
    ind_ctype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ctype_next == (acr_compl::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        acr_compl::FCtype* *prev = &_db.ind_ctype_buckets_elems[index];
        do {
            acr_compl::FCtype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ctype_next;
        } while (true);
        if (retval) {
            row.ind_ctype_next = *prev;
            _db.ind_ctype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_ctype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_compl::ind_ctype_Remove(acr_compl::FCtype& row) {
    if (LIKELY(row.ind_ctype_next != (acr_compl::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        acr_compl::FCtype* *prev = &_db.ind_ctype_buckets_elems[index]; // addr of pointer to current element
        while (acr_compl::FCtype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ctype_next; // unlink (singly linked list)
                _db.ind_ctype_n--;
                row.ind_ctype_next = (acr_compl::FCtype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ctype_next;
        }
    }
}

// --- acr_compl.FDb.ind_ctype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_compl::ind_ctype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ctype_buckets_n;
    u32 new_nelems   = _db.ind_ctype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_compl::FCtype*);
        u32 new_size = new_nbuckets * sizeof(acr_compl::FCtype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_compl::FCtype* *new_buckets = (acr_compl::FCtype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.ind_ctype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ctype_buckets_n; i++) {
            acr_compl::FCtype* elem = _db.ind_ctype_buckets_elems[i];
            while (elem) {
                acr_compl::FCtype &row        = *elem;
                acr_compl::FCtype* next       = row.ind_ctype_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_ctype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ctype_buckets_elems, old_size);
        _db.ind_ctype_buckets_elems = new_buckets;
        _db.ind_ctype_buckets_n = new_nbuckets;
    }
}

// --- acr_compl.FDb.field.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FField& acr_compl::field_Alloc() {
    acr_compl::FField* row = field_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.field  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.field.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FField* acr_compl::field_AllocMaybe() {
    acr_compl::FField *row = (acr_compl::FField*)field_AllocMem();
    if (row) {
        new (row) acr_compl::FField; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.field.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FField* acr_compl::field_InsertMaybe(const dmmeta::Field &value) {
    acr_compl::FField *row = &field_Alloc(); // if out of memory, process dies. if input error, return NULL.
    field_CopyIn(*row,const_cast<dmmeta::Field&>(value));
    bool ok = field_XrefMaybe(*row); // this may return false
    if (!ok) {
        field_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.field.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::field_AllocMem() {
    u64 new_nelems     = _db.field_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FField*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.field_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FField*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FField) * (u64(1)<<bsr));
            _db.field_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.field_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.field.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::field_RemoveLast() {
    u64 n = _db.field_n;
    if (n > 0) {
        n -= 1;
        field_qFind(u64(n)).~FField();
        _db.field_n = i32(n);
    }
}

// --- acr_compl.FDb.field.InputMaybe
static bool acr_compl::field_InputMaybe(dmmeta::Field &elem) {
    bool retval = true;
    retval = field_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.field.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::field_XrefMaybe(acr_compl::FField &row) {
    bool retval = true;
    (void)row;
    acr_compl::FCtype* p_arg = acr_compl::ind_ctype_Find(row.arg);
    if (UNLIKELY(!p_arg)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_ctype" << Keyval("key", row.arg);
        return false;
    }
    // field: save pointer to arg
    if (true) { // user-defined insert condition
        row.p_arg = p_arg;
    }
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(ctype_Get(row));
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_ctype" << Keyval("key", ctype_Get(row));
        return false;
    }
    // field: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    // insert field into index ind_field
    if (true) { // user-defined insert condition
        bool success = ind_field_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FDb.ind_field"; // check for duplicate key
            return false;
        }
    }
    // insert field into index c_field
    if (true) { // user-defined insert condition
        c_field_Insert(*p_ctype, row);
    }
    return retval;
}

// --- acr_compl.FDb.ind_field.Find
// Find row by key. Return NULL if not found.
acr_compl::FField* acr_compl::ind_field_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_field_buckets_n - 1);
    acr_compl::FField* *e = &_db.ind_field_buckets_elems[index];
    acr_compl::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).field == key;
        if (done) break;
        e         = &ret->ind_field_next;
    } while (true);
    return ret;
}

// --- acr_compl.FDb.ind_field.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_compl::ind_field_InsertMaybe(acr_compl::FField& row) {
    ind_field_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_field_next == (acr_compl::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        acr_compl::FField* *prev = &_db.ind_field_buckets_elems[index];
        do {
            acr_compl::FField* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).field == row.field) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_field_next;
        } while (true);
        if (retval) {
            row.ind_field_next = *prev;
            _db.ind_field_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_field.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_compl::ind_field_Remove(acr_compl::FField& row) {
    if (LIKELY(row.ind_field_next != (acr_compl::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        acr_compl::FField* *prev = &_db.ind_field_buckets_elems[index]; // addr of pointer to current element
        while (acr_compl::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_field_next; // unlink (singly linked list)
                _db.ind_field_n--;
                row.ind_field_next = (acr_compl::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_field_next;
        }
    }
}

// --- acr_compl.FDb.ind_field.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_compl::ind_field_Reserve(int n) {
    u32 old_nbuckets = _db.ind_field_buckets_n;
    u32 new_nelems   = _db.ind_field_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_compl::FField*);
        u32 new_size = new_nbuckets * sizeof(acr_compl::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_compl::FField* *new_buckets = (acr_compl::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.ind_field");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_field_buckets_n; i++) {
            acr_compl::FField* elem = _db.ind_field_buckets_elems[i];
            while (elem) {
                acr_compl::FField &row        = *elem;
                acr_compl::FField* next       = row.ind_field_next;
                u32 index          = algo::Smallstr100_Hash(0, row.field) & (new_nbuckets-1);
                row.ind_field_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_field_buckets_elems, old_size);
        _db.ind_field_buckets_elems = new_buckets;
        _db.ind_field_buckets_n = new_nbuckets;
    }
}

// --- acr_compl.FDb.ssimfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FSsimfile& acr_compl::ssimfile_Alloc() {
    acr_compl::FSsimfile* row = ssimfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.ssimfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.ssimfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FSsimfile* acr_compl::ssimfile_AllocMaybe() {
    acr_compl::FSsimfile *row = (acr_compl::FSsimfile*)ssimfile_AllocMem();
    if (row) {
        new (row) acr_compl::FSsimfile; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.ssimfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FSsimfile* acr_compl::ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) {
    acr_compl::FSsimfile *row = &ssimfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ssimfile_CopyIn(*row,const_cast<dmmeta::Ssimfile&>(value));
    bool ok = ssimfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        ssimfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.ssimfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::ssimfile_AllocMem() {
    u64 new_nelems     = _db.ssimfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FSsimfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ssimfile_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FSsimfile) * (u64(1)<<bsr));
            _db.ssimfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ssimfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.ssimfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::ssimfile_RemoveLast() {
    u64 n = _db.ssimfile_n;
    if (n > 0) {
        n -= 1;
        ssimfile_qFind(u64(n)).~FSsimfile();
        _db.ssimfile_n = i32(n);
    }
}

// --- acr_compl.FDb.ssimfile.InputMaybe
static bool acr_compl::ssimfile_InputMaybe(dmmeta::Ssimfile &elem) {
    bool retval = true;
    retval = ssimfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.ssimfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::ssimfile_XrefMaybe(acr_compl::FSsimfile &row) {
    bool retval = true;
    (void)row;
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(row.ctype);
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_ctype" << Keyval("key", row.ctype);
        return false;
    }
    // ssimfile: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    // insert ssimfile into index ind_ssimfile
    if (true) { // user-defined insert condition
        bool success = ind_ssimfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FDb.ind_ssimfile"; // check for duplicate key
            return false;
        }
    }
    // insert ssimfile into index c_ssimfile
    if (true) { // user-defined insert condition
        bool success = c_ssimfile_InsertMaybe(*p_ctype, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FCtype.c_ssimfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_ssimfile.Find
// Find row by key. Return NULL if not found.
acr_compl::FSsimfile* acr_compl::ind_ssimfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ssimfile_buckets_n - 1);
    acr_compl::FSsimfile* *e = &_db.ind_ssimfile_buckets_elems[index];
    acr_compl::FSsimfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ssimfile == key;
        if (done) break;
        e         = &ret->ind_ssimfile_next;
    } while (true);
    return ret;
}

// --- acr_compl.FDb.ind_ssimfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_compl::ind_ssimfile_InsertMaybe(acr_compl::FSsimfile& row) {
    ind_ssimfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ssimfile_next == (acr_compl::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        acr_compl::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index];
        do {
            acr_compl::FSsimfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ssimfile == row.ssimfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ssimfile_next;
        } while (true);
        if (retval) {
            row.ind_ssimfile_next = *prev;
            _db.ind_ssimfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_ssimfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_compl::ind_ssimfile_Remove(acr_compl::FSsimfile& row) {
    if (LIKELY(row.ind_ssimfile_next != (acr_compl::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        acr_compl::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index]; // addr of pointer to current element
        while (acr_compl::FSsimfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ssimfile_next; // unlink (singly linked list)
                _db.ind_ssimfile_n--;
                row.ind_ssimfile_next = (acr_compl::FSsimfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ssimfile_next;
        }
    }
}

// --- acr_compl.FDb.ind_ssimfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_compl::ind_ssimfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ssimfile_buckets_n;
    u32 new_nelems   = _db.ind_ssimfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_compl::FSsimfile*);
        u32 new_size = new_nbuckets * sizeof(acr_compl::FSsimfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_compl::FSsimfile* *new_buckets = (acr_compl::FSsimfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.ind_ssimfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ssimfile_buckets_n; i++) {
            acr_compl::FSsimfile* elem = _db.ind_ssimfile_buckets_elems[i];
            while (elem) {
                acr_compl::FSsimfile &row        = *elem;
                acr_compl::FSsimfile* next       = row.ind_ssimfile_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ssimfile) & (new_nbuckets-1);
                row.ind_ssimfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ssimfile_buckets_elems, old_size);
        _db.ind_ssimfile_buckets_elems = new_buckets;
        _db.ind_ssimfile_buckets_n = new_nbuckets;
    }
}

// --- acr_compl.FDb.completion.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FCompletion& acr_compl::completion_Alloc() {
    acr_compl::FCompletion* row = completion_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.completion  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.completion.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FCompletion* acr_compl::completion_AllocMaybe() {
    acr_compl::FCompletion *row = (acr_compl::FCompletion*)completion_AllocMem();
    if (row) {
        new (row) acr_compl::FCompletion; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.completion.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FCompletion* acr_compl::completion_InsertMaybe(const acr_compl::Completion &value) {
    acr_compl::FCompletion *row = &completion_Alloc(); // if out of memory, process dies. if input error, return NULL.
    completion_CopyIn(*row,const_cast<acr_compl::Completion&>(value));
    bool ok = completion_XrefMaybe(*row); // this may return false
    if (!ok) {
        completion_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.completion.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::completion_AllocMem() {
    u64 new_nelems     = _db.completion_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FCompletion*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.completion_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FCompletion*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FCompletion) * (u64(1)<<bsr));
            _db.completion_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.completion_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.completion.RemoveAll
// Remove all elements from Lary
void acr_compl::completion_RemoveAll() {
    for (u64 n = _db.completion_n; n>0; ) {
        n--;
        completion_qFind(u64(n)).~FCompletion(); // destroy last element
        _db.completion_n = i32(n);
    }
}

// --- acr_compl.FDb.completion.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::completion_RemoveLast() {
    u64 n = _db.completion_n;
    if (n > 0) {
        n -= 1;
        completion_qFind(u64(n)).~FCompletion();
        _db.completion_n = i32(n);
    }
}

// --- acr_compl.FDb.completion.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::completion_XrefMaybe(acr_compl::FCompletion &row) {
    bool retval = true;
    (void)row;
    // insert completion into index bh_completion
    if (true) { // user-defined insert condition
        bh_completion_Insert(row);
    }
    return retval;
}

// --- acr_compl.FDb.anonfld.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FAnonfld& acr_compl::anonfld_Alloc() {
    acr_compl::FAnonfld* row = anonfld_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.anonfld  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.anonfld.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FAnonfld* acr_compl::anonfld_AllocMaybe() {
    acr_compl::FAnonfld *row = (acr_compl::FAnonfld*)anonfld_AllocMem();
    if (row) {
        new (row) acr_compl::FAnonfld; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.anonfld.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FAnonfld* acr_compl::anonfld_InsertMaybe(const dmmeta::Anonfld &value) {
    acr_compl::FAnonfld *row = &anonfld_Alloc(); // if out of memory, process dies. if input error, return NULL.
    anonfld_CopyIn(*row,const_cast<dmmeta::Anonfld&>(value));
    bool ok = anonfld_XrefMaybe(*row); // this may return false
    if (!ok) {
        anonfld_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.anonfld.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::anonfld_AllocMem() {
    u64 new_nelems     = _db.anonfld_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FAnonfld*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.anonfld_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FAnonfld*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FAnonfld) * (u64(1)<<bsr));
            _db.anonfld_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.anonfld_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.anonfld.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::anonfld_RemoveLast() {
    u64 n = _db.anonfld_n;
    if (n > 0) {
        n -= 1;
        anonfld_qFind(u64(n)).~FAnonfld();
        _db.anonfld_n = i32(n);
    }
}

// --- acr_compl.FDb.anonfld.InputMaybe
static bool acr_compl::anonfld_InputMaybe(dmmeta::Anonfld &elem) {
    bool retval = true;
    retval = anonfld_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.anonfld.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::anonfld_XrefMaybe(acr_compl::FAnonfld &row) {
    bool retval = true;
    (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert anonfld into index c_anonfld
    if (true) { // user-defined insert condition
        bool success = c_anonfld_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FField.c_anonfld"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.bh_completion.Dealloc
// Remove all elements from heap and free memory used by the array.
void acr_compl::bh_completion_Dealloc() {
    bh_completion_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_completion_elems, sizeof(acr_compl::FCompletion*)*_db.bh_completion_max);
    _db.bh_completion_max   = 0;
    _db.bh_completion_elems = NULL;
}

// --- acr_compl.FDb.bh_completion.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int acr_compl::bh_completion_Downheap(acr_compl::FCompletion& row, int idx) {
    acr_compl::FCompletion* *elems = _db.bh_completion_elems;
    int n = _db.bh_completion_n;
    int child = idx*2+1;
    while (child < n) {
        acr_compl::FCompletion* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            acr_compl::FCompletion* q = elems[rchild]; // right child
            if (bh_completion_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_completion_ElemLt(*p,row)) {
            break;
        }
        p->bh_completion_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- acr_compl.FDb.bh_completion.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void acr_compl::bh_completion_Insert(acr_compl::FCompletion& row) {
    if (LIKELY(row.bh_completion_idx == -1)) {
        bh_completion_Reserve(1);
        int n = _db.bh_completion_n;
        _db.bh_completion_n = n + 1;
        int new_idx = bh_completion_Upheap(row, n);
        row.bh_completion_idx = new_idx;
        _db.bh_completion_elems[new_idx] = &row;
    }
}

// --- acr_compl.FDb.bh_completion.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 acr_compl::bh_completion_Reheap(acr_compl::FCompletion& row) {
    int old_idx = row.bh_completion_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_completion_Reserve(1);
        old_idx = _db.bh_completion_n++;
    }
    int new_idx = bh_completion_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_completion_Downheap(row, old_idx);
    }
    row.bh_completion_idx = new_idx;
    _db.bh_completion_elems[new_idx] = &row;
    return new_idx;
}

// --- acr_compl.FDb.bh_completion.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 acr_compl::bh_completion_ReheapFirst() {
    acr_compl::FCompletion &row = *_db.bh_completion_elems[0];
    i32 new_idx = bh_completion_Downheap(row, 0);
    row.bh_completion_idx = new_idx;
    _db.bh_completion_elems[new_idx] = &row;
    return new_idx;
}

// --- acr_compl.FDb.bh_completion.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_compl::bh_completion_Remove(acr_compl::FCompletion& row) {
    if (bh_completion_InBheapQ(row)) {
        int old_idx = row.bh_completion_idx;
        if (_db.bh_completion_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_completion_idx = -1;           // mark not in heap
            i32 n = _db.bh_completion_n - 1; // index of last element in heap
            _db.bh_completion_n = n;         // decrease count
            if (old_idx != n) {
                acr_compl::FCompletion *elem = _db.bh_completion_elems[n];
                int new_idx = bh_completion_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_completion_Downheap(*elem, old_idx);
                }
                elem->bh_completion_idx = new_idx;
                _db.bh_completion_elems[new_idx] = elem;
            }
        }
    }
}

// --- acr_compl.FDb.bh_completion.RemoveAll
// Remove all elements from binary heap
void acr_compl::bh_completion_RemoveAll() {
    int n = _db.bh_completion_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_completion_elems[i]->bh_completion_idx = -1; // mark not-in-heap
    }
    _db.bh_completion_n = 0;
}

// --- acr_compl.FDb.bh_completion.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
acr_compl::FCompletion* acr_compl::bh_completion_RemoveFirst() {
    acr_compl::FCompletion *row = NULL;
    if (_db.bh_completion_n > 0) {
        row = _db.bh_completion_elems[0];
        row->bh_completion_idx = -1;           // mark not in heap
        i32 n = _db.bh_completion_n - 1; // index of last element in heap
        _db.bh_completion_n = n;         // decrease count
        if (n) {
            acr_compl::FCompletion &elem = *_db.bh_completion_elems[n];
            int new_idx = bh_completion_Downheap(elem, 0);
            elem.bh_completion_idx = new_idx;
            _db.bh_completion_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- acr_compl.FDb.bh_completion.Reserve
// Reserve space in index for N more elements
void acr_compl::bh_completion_Reserve(int n) {
    i32 old_max = _db.bh_completion_max;
    if (UNLIKELY(_db.bh_completion_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_compl::FCompletion*);
        u32 new_size = new_max * sizeof(acr_compl::FCompletion*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_completion_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.bh_completion");
        }
        _db.bh_completion_elems = (acr_compl::FCompletion**)new_mem;
        _db.bh_completion_max = new_max;
    }
}

// --- acr_compl.FDb.bh_completion.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int acr_compl::bh_completion_Upheap(acr_compl::FCompletion& row, int idx) {
    acr_compl::FCompletion* *elems = _db.bh_completion_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        acr_compl::FCompletion* p = elems[j];
        if (!bh_completion_ElemLt(row, *p)) {
            break;
        }
        p->bh_completion_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- acr_compl.FDb.bh_completion.ElemLt
inline static bool acr_compl::bh_completion_ElemLt(acr_compl::FCompletion &a, acr_compl::FCompletion &b) {
    (void)_db;
    return badness_Lt(a, b);
}

// --- acr_compl.FDb.ns.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FNs& acr_compl::ns_Alloc() {
    acr_compl::FNs* row = ns_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.ns  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.ns.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FNs* acr_compl::ns_AllocMaybe() {
    acr_compl::FNs *row = (acr_compl::FNs*)ns_AllocMem();
    if (row) {
        new (row) acr_compl::FNs; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.ns.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FNs* acr_compl::ns_InsertMaybe(const dmmeta::Ns &value) {
    acr_compl::FNs *row = &ns_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ns_CopyIn(*row,const_cast<dmmeta::Ns&>(value));
    bool ok = ns_XrefMaybe(*row); // this may return false
    if (!ok) {
        ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.ns.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::ns_AllocMem() {
    u64 new_nelems     = _db.ns_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FNs*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ns_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FNs*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FNs) * (u64(1)<<bsr));
            _db.ns_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ns_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.ns.RemoveAll
// Remove all elements from Lary
void acr_compl::ns_RemoveAll() {
    for (u64 n = _db.ns_n; n>0; ) {
        n--;
        ns_qFind(u64(n)).~FNs(); // destroy last element
        _db.ns_n = i32(n);
    }
}

// --- acr_compl.FDb.ns.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::ns_RemoveLast() {
    u64 n = _db.ns_n;
    if (n > 0) {
        n -= 1;
        ns_qFind(u64(n)).~FNs();
        _db.ns_n = i32(n);
    }
}

// --- acr_compl.FDb.ns.InputMaybe
static bool acr_compl::ns_InputMaybe(dmmeta::Ns &elem) {
    bool retval = true;
    retval = ns_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.ns.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::ns_XrefMaybe(acr_compl::FNs &row) {
    bool retval = true;
    (void)row;
    // insert ns into index ind_ns
    if (true) { // user-defined insert condition
        bool success = ind_ns_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FDb.ind_ns"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.fconst.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FFconst& acr_compl::fconst_Alloc() {
    acr_compl::FFconst* row = fconst_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.fconst  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.fconst.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FFconst* acr_compl::fconst_AllocMaybe() {
    acr_compl::FFconst *row = (acr_compl::FFconst*)fconst_AllocMem();
    if (row) {
        new (row) acr_compl::FFconst; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.fconst.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FFconst* acr_compl::fconst_InsertMaybe(const dmmeta::Fconst &value) {
    acr_compl::FFconst *row = &fconst_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fconst_CopyIn(*row,const_cast<dmmeta::Fconst&>(value));
    bool ok = fconst_XrefMaybe(*row); // this may return false
    if (!ok) {
        fconst_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.fconst.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::fconst_AllocMem() {
    u64 new_nelems     = _db.fconst_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FFconst*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fconst_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FFconst*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFconst) * (u64(1)<<bsr));
            _db.fconst_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fconst_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.fconst.RemoveAll
// Remove all elements from Lary
void acr_compl::fconst_RemoveAll() {
    for (u64 n = _db.fconst_n; n>0; ) {
        n--;
        fconst_qFind(u64(n)).~FFconst(); // destroy last element
        _db.fconst_n = i32(n);
    }
}

// --- acr_compl.FDb.fconst.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::fconst_RemoveLast() {
    u64 n = _db.fconst_n;
    if (n > 0) {
        n -= 1;
        fconst_qFind(u64(n)).~FFconst();
        _db.fconst_n = i32(n);
    }
}

// --- acr_compl.FDb.fconst.InputMaybe
static bool acr_compl::fconst_InputMaybe(dmmeta::Fconst &elem) {
    bool retval = true;
    retval = fconst_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.fconst.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::fconst_XrefMaybe(acr_compl::FFconst &row) {
    bool retval = true;
    (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(field_Get(row));
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", field_Get(row));
        return false;
    }
    // insert fconst into index c_fconst
    if (true) { // user-defined insert condition
        c_fconst_Insert(*p_field, row);
    }
    return retval;
}

// --- acr_compl.FDb.fcmdline.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FFcmdline& acr_compl::fcmdline_Alloc() {
    acr_compl::FFcmdline* row = fcmdline_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.fcmdline  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.fcmdline.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FFcmdline* acr_compl::fcmdline_AllocMaybe() {
    acr_compl::FFcmdline *row = (acr_compl::FFcmdline*)fcmdline_AllocMem();
    if (row) {
        new (row) acr_compl::FFcmdline; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.fcmdline.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FFcmdline* acr_compl::fcmdline_InsertMaybe(const dmmeta::Fcmdline &value) {
    acr_compl::FFcmdline *row = &fcmdline_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fcmdline_CopyIn(*row,const_cast<dmmeta::Fcmdline&>(value));
    bool ok = fcmdline_XrefMaybe(*row); // this may return false
    if (!ok) {
        fcmdline_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.fcmdline.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::fcmdline_AllocMem() {
    u64 new_nelems     = _db.fcmdline_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FFcmdline*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fcmdline_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FFcmdline*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFcmdline) * (u64(1)<<bsr));
            _db.fcmdline_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fcmdline_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.fcmdline.RemoveAll
// Remove all elements from Lary
void acr_compl::fcmdline_RemoveAll() {
    for (u64 n = _db.fcmdline_n; n>0; ) {
        n--;
        fcmdline_qFind(u64(n)).~FFcmdline(); // destroy last element
        _db.fcmdline_n = i32(n);
    }
}

// --- acr_compl.FDb.fcmdline.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::fcmdline_RemoveLast() {
    u64 n = _db.fcmdline_n;
    if (n > 0) {
        n -= 1;
        fcmdline_qFind(u64(n)).~FFcmdline();
        _db.fcmdline_n = i32(n);
    }
}

// --- acr_compl.FDb.fcmdline.InputMaybe
static bool acr_compl::fcmdline_InputMaybe(dmmeta::Fcmdline &elem) {
    bool retval = true;
    retval = fcmdline_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.fcmdline.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::fcmdline_XrefMaybe(acr_compl::FFcmdline &row) {
    bool retval = true;
    (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // fcmdline: save pointer to field
    if (true) { // user-defined insert condition
        row.p_field = p_field;
    }
    acr_compl::FField* p_basecmdline = acr_compl::ind_field_Find(row.basecmdline);
    if (UNLIKELY(!p_basecmdline)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.basecmdline);
        return false;
    }
    // fcmdline: save pointer to basecmdline
    if (true) { // user-defined insert condition
        row.p_basecmdline = p_basecmdline;
    }
    acr_compl::FNs* p_ns = acr_compl::ind_ns_Find(ns_Get(row));
    if (UNLIKELY(!p_ns)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_ns" << Keyval("key", ns_Get(row));
        return false;
    }
    // insert fcmdline into index c_fcmdline
    if (true) { // user-defined insert condition
        bool success = c_fcmdline_InsertMaybe(*p_ns, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FNs.c_fcmdline"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.fflag.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FFflag& acr_compl::fflag_Alloc() {
    acr_compl::FFflag* row = fflag_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.fflag  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.fflag.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FFflag* acr_compl::fflag_AllocMaybe() {
    acr_compl::FFflag *row = (acr_compl::FFflag*)fflag_AllocMem();
    if (row) {
        new (row) acr_compl::FFflag; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.fflag.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FFflag* acr_compl::fflag_InsertMaybe(const dmmeta::Fflag &value) {
    acr_compl::FFflag *row = &fflag_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fflag_CopyIn(*row,const_cast<dmmeta::Fflag&>(value));
    bool ok = fflag_XrefMaybe(*row); // this may return false
    if (!ok) {
        fflag_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.fflag.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::fflag_AllocMem() {
    u64 new_nelems     = _db.fflag_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FFflag*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fflag_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FFflag*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFflag) * (u64(1)<<bsr));
            _db.fflag_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fflag_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.fflag.RemoveAll
// Remove all elements from Lary
void acr_compl::fflag_RemoveAll() {
    for (u64 n = _db.fflag_n; n>0; ) {
        n--;
        fflag_qFind(u64(n)).~FFflag(); // destroy last element
        _db.fflag_n = i32(n);
    }
}

// --- acr_compl.FDb.fflag.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::fflag_RemoveLast() {
    u64 n = _db.fflag_n;
    if (n > 0) {
        n -= 1;
        fflag_qFind(u64(n)).~FFflag();
        _db.fflag_n = i32(n);
    }
}

// --- acr_compl.FDb.fflag.InputMaybe
static bool acr_compl::fflag_InputMaybe(dmmeta::Fflag &elem) {
    bool retval = true;
    retval = fflag_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.fflag.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::fflag_XrefMaybe(acr_compl::FFflag &row) {
    bool retval = true;
    (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert fflag into index c_fflag
    if (true) { // user-defined insert condition
        bool success = c_fflag_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FField.c_fflag"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.zd_cmd_field.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_compl::zd_cmd_field_Insert(acr_compl::FField& row) {
    if (!zd_cmd_field_InLlistQ(row)) {
        acr_compl::FField* old_tail = _db.zd_cmd_field_tail;
        row.zd_cmd_field_next = NULL;
        row.zd_cmd_field_prev = old_tail;
        _db.zd_cmd_field_tail = &row;
        acr_compl::FField **new_row_a = &old_tail->zd_cmd_field_next;
        acr_compl::FField **new_row_b = &_db.zd_cmd_field_head;
        acr_compl::FField **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_cmd_field_n++;
    }
}

// --- acr_compl.FDb.zd_cmd_field.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_compl::zd_cmd_field_Remove(acr_compl::FField& row) {
    if (zd_cmd_field_InLlistQ(row)) {
        acr_compl::FField* old_head       = _db.zd_cmd_field_head;
        (void)old_head; // in case it's not used
        acr_compl::FField* prev = row.zd_cmd_field_prev;
        acr_compl::FField* next = row.zd_cmd_field_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_compl::FField **new_next_a = &prev->zd_cmd_field_next;
        acr_compl::FField **new_next_b = &_db.zd_cmd_field_head;
        acr_compl::FField **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_compl::FField **new_prev_a = &next->zd_cmd_field_prev;
        acr_compl::FField **new_prev_b = &_db.zd_cmd_field_tail;
        acr_compl::FField **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_cmd_field_n--;
        row.zd_cmd_field_next=(acr_compl::FField*)-1; // not-in-list
    }
}

// --- acr_compl.FDb.zd_cmd_field.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_compl::zd_cmd_field_RemoveAll() {
    acr_compl::FField* row = _db.zd_cmd_field_head;
    _db.zd_cmd_field_head = NULL;
    _db.zd_cmd_field_tail = NULL;
    _db.zd_cmd_field_n = 0;
    while (row) {
        acr_compl::FField* row_next = row->zd_cmd_field_next;
        row->zd_cmd_field_next  = (acr_compl::FField*)-1;
        row->zd_cmd_field_prev  = NULL;
        row = row_next;
    }
}

// --- acr_compl.FDb.zd_cmd_field.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_compl::FField* acr_compl::zd_cmd_field_RemoveFirst() {
    acr_compl::FField *row = NULL;
    row = _db.zd_cmd_field_head;
    if (row) {
        acr_compl::FField *next = row->zd_cmd_field_next;
        _db.zd_cmd_field_head = next;
        acr_compl::FField **new_end_a = &next->zd_cmd_field_prev;
        acr_compl::FField **new_end_b = &_db.zd_cmd_field_tail;
        acr_compl::FField **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_cmd_field_n--;
        row->zd_cmd_field_next = (acr_compl::FField*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_compl.FDb.ind_ns.Find
// Find row by key. Return NULL if not found.
acr_compl::FNs* acr_compl::ind_ns_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_ns_buckets_n - 1);
    acr_compl::FNs* *e = &_db.ind_ns_buckets_elems[index];
    acr_compl::FNs* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ns == key;
        if (done) break;
        e         = &ret->ind_ns_next;
    } while (true);
    return ret;
}

// --- acr_compl.FDb.ind_ns.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_compl::FNs& acr_compl::ind_ns_GetOrCreate(const algo::strptr& key) {
    acr_compl::FNs* ret = ind_ns_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ns_Alloc();
        (*ret).ns = key;
        bool good = ns_XrefMaybe(*ret);
        if (!good) {
            ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_compl.create_error  table:ind_ns  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_compl.FDb.ind_ns.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_compl::ind_ns_InsertMaybe(acr_compl::FNs& row) {
    ind_ns_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ns_next == (acr_compl::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        acr_compl::FNs* *prev = &_db.ind_ns_buckets_elems[index];
        do {
            acr_compl::FNs* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ns == row.ns) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ns_next;
        } while (true);
        if (retval) {
            row.ind_ns_next = *prev;
            _db.ind_ns_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_ns.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_compl::ind_ns_Remove(acr_compl::FNs& row) {
    if (LIKELY(row.ind_ns_next != (acr_compl::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        acr_compl::FNs* *prev = &_db.ind_ns_buckets_elems[index]; // addr of pointer to current element
        while (acr_compl::FNs *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ns_next; // unlink (singly linked list)
                _db.ind_ns_n--;
                row.ind_ns_next = (acr_compl::FNs*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ns_next;
        }
    }
}

// --- acr_compl.FDb.ind_ns.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_compl::ind_ns_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ns_buckets_n;
    u32 new_nelems   = _db.ind_ns_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_compl::FNs*);
        u32 new_size = new_nbuckets * sizeof(acr_compl::FNs*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_compl::FNs* *new_buckets = (acr_compl::FNs**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.ind_ns");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ns_buckets_n; i++) {
            acr_compl::FNs* elem = _db.ind_ns_buckets_elems[i];
            while (elem) {
                acr_compl::FNs &row        = *elem;
                acr_compl::FNs* next       = row.ind_ns_next;
                u32 index          = algo::Smallstr16_Hash(0, row.ns) & (new_nbuckets-1);
                row.ind_ns_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ns_buckets_elems, old_size);
        _db.ind_ns_buckets_elems = new_buckets;
        _db.ind_ns_buckets_n = new_nbuckets;
    }
}

// --- acr_compl.FDb.ind_cmd_field_name.Find
// Find row by key. Return NULL if not found.
acr_compl::FField* acr_compl::ind_cmd_field_name_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_cmd_field_name_buckets_n - 1);
    acr_compl::FField* *e = &_db.ind_cmd_field_name_buckets_elems[index];
    acr_compl::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || name_Get((*ret)) == key;
        if (done) break;
        e         = &ret->ind_cmd_field_name_next;
    } while (true);
    return ret;
}

// --- acr_compl.FDb.ind_cmd_field_name.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_compl::ind_cmd_field_name_InsertMaybe(acr_compl::FField& row) {
    ind_cmd_field_name_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_cmd_field_name_next == (acr_compl::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, name_Get(row)) & (_db.ind_cmd_field_name_buckets_n - 1);
        acr_compl::FField* *prev = &_db.ind_cmd_field_name_buckets_elems[index];
        if (retval) {
            row.ind_cmd_field_name_next = *prev;
            _db.ind_cmd_field_name_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_compl.FDb.ind_cmd_field_name.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_compl::ind_cmd_field_name_Remove(acr_compl::FField& row) {
    if (LIKELY(row.ind_cmd_field_name_next != (acr_compl::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, name_Get(row)) & (_db.ind_cmd_field_name_buckets_n - 1);
        acr_compl::FField* *prev = &_db.ind_cmd_field_name_buckets_elems[index]; // addr of pointer to current element
        while (acr_compl::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_cmd_field_name_next; // unlink (singly linked list)
                _db.ind_cmd_field_name_n--;
                row.ind_cmd_field_name_next = (acr_compl::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_cmd_field_name_next;
        }
    }
}

// --- acr_compl.FDb.ind_cmd_field_name.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_compl::ind_cmd_field_name_Reserve(int n) {
    u32 old_nbuckets = _db.ind_cmd_field_name_buckets_n;
    u32 new_nelems   = _db.ind_cmd_field_name_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_compl::FField*);
        u32 new_size = new_nbuckets * sizeof(acr_compl::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_compl::FField* *new_buckets = (acr_compl::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FDb.ind_cmd_field_name");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_cmd_field_name_buckets_n; i++) {
            acr_compl::FField* elem = _db.ind_cmd_field_name_buckets_elems[i];
            while (elem) {
                acr_compl::FField &row        = *elem;
                acr_compl::FField* next       = row.ind_cmd_field_name_next;
                u32 index          = algo::Smallstr50_Hash(0, name_Get(row)) & (new_nbuckets-1);
                row.ind_cmd_field_name_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_cmd_field_name_buckets_elems, old_size);
        _db.ind_cmd_field_name_buckets_elems = new_buckets;
        _db.ind_cmd_field_name_buckets_n = new_nbuckets;
    }
}

// --- acr_compl.FDb.argvtype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FArgvtype& acr_compl::argvtype_Alloc() {
    acr_compl::FArgvtype* row = argvtype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.argvtype  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.argvtype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FArgvtype* acr_compl::argvtype_AllocMaybe() {
    acr_compl::FArgvtype *row = (acr_compl::FArgvtype*)argvtype_AllocMem();
    if (row) {
        new (row) acr_compl::FArgvtype; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.argvtype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FArgvtype* acr_compl::argvtype_InsertMaybe(const dmmeta::Argvtype &value) {
    acr_compl::FArgvtype *row = &argvtype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    argvtype_CopyIn(*row,const_cast<dmmeta::Argvtype&>(value));
    bool ok = argvtype_XrefMaybe(*row); // this may return false
    if (!ok) {
        argvtype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.argvtype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::argvtype_AllocMem() {
    u64 new_nelems     = _db.argvtype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FArgvtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.argvtype_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FArgvtype*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FArgvtype) * (u64(1)<<bsr));
            _db.argvtype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.argvtype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.argvtype.RemoveAll
// Remove all elements from Lary
void acr_compl::argvtype_RemoveAll() {
    for (u64 n = _db.argvtype_n; n>0; ) {
        n--;
        argvtype_qFind(u64(n)).~FArgvtype(); // destroy last element
        _db.argvtype_n = i32(n);
    }
}

// --- acr_compl.FDb.argvtype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::argvtype_RemoveLast() {
    u64 n = _db.argvtype_n;
    if (n > 0) {
        n -= 1;
        argvtype_qFind(u64(n)).~FArgvtype();
        _db.argvtype_n = i32(n);
    }
}

// --- acr_compl.FDb.argvtype.InputMaybe
static bool acr_compl::argvtype_InputMaybe(dmmeta::Argvtype &elem) {
    bool retval = true;
    retval = argvtype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.argvtype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::argvtype_XrefMaybe(acr_compl::FArgvtype &row) {
    bool retval = true;
    (void)row;
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(row.ctype);
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_ctype" << Keyval("key", row.ctype);
        return false;
    }
    // insert argvtype into index c_argvtype
    if (true) { // user-defined insert condition
        bool success = c_argvtype_InsertMaybe(*p_ctype, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FCtype.c_argvtype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_compl.FDb.falias.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FFalias& acr_compl::falias_Alloc() {
    acr_compl::FFalias* row = falias_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.falias  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.falias.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FFalias* acr_compl::falias_AllocMaybe() {
    acr_compl::FFalias *row = (acr_compl::FFalias*)falias_AllocMem();
    if (row) {
        new (row) acr_compl::FFalias; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.falias.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_compl::FFalias* acr_compl::falias_InsertMaybe(const dmmeta::Falias &value) {
    acr_compl::FFalias *row = &falias_Alloc(); // if out of memory, process dies. if input error, return NULL.
    falias_CopyIn(*row,const_cast<dmmeta::Falias&>(value));
    bool ok = falias_XrefMaybe(*row); // this may return false
    if (!ok) {
        falias_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_compl.FDb.falias.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::falias_AllocMem() {
    u64 new_nelems     = _db.falias_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FFalias*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.falias_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FFalias*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFalias) * (u64(1)<<bsr));
            _db.falias_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.falias_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.falias.RemoveAll
// Remove all elements from Lary
void acr_compl::falias_RemoveAll() {
    for (u64 n = _db.falias_n; n>0; ) {
        n--;
        falias_qFind(u64(n)).~FFalias(); // destroy last element
        _db.falias_n = i32(n);
    }
}

// --- acr_compl.FDb.falias.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::falias_RemoveLast() {
    u64 n = _db.falias_n;
    if (n > 0) {
        n -= 1;
        falias_qFind(u64(n)).~FFalias();
        _db.falias_n = i32(n);
    }
}

// --- acr_compl.FDb.falias.InputMaybe
static bool acr_compl::falias_InputMaybe(dmmeta::Falias &elem) {
    bool retval = true;
    retval = falias_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_compl.FDb.falias.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::falias_XrefMaybe(acr_compl::FFalias &row) {
    bool retval = true;
    (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // falias: save pointer to field
    if (true) { // user-defined insert condition
        row.p_field = p_field;
    }
    acr_compl::FField* p_srcfield = acr_compl::ind_field_Find(row.srcfield);
    if (UNLIKELY(!p_srcfield)) {
        algo_lib::ResetErrtext() << "acr_compl.bad_xref  index:acr_compl.FDb.ind_field" << Keyval("key", row.srcfield);
        return false;
    }
    // falias: save pointer to srcfield
    if (true) { // user-defined insert condition
        row.p_srcfield = p_srcfield;
    }
    // insert falias into index c_falias
    if (true) { // user-defined insert condition
        bool success = c_falias_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_compl.duplicate_key  xref:acr_compl.FField.c_falias"; // check for duplicate key
            return false;
        }
    }
    // insert falias into index c_falias_srcfield
    if (true) { // user-defined insert condition
        c_falias_srcfield_Insert(*p_srcfield, row);
    }
    return retval;
}

// --- acr_compl.FDb.complsource.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_compl::FComplsource& acr_compl::complsource_Alloc() {
    acr_compl::FComplsource* row = complsource_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_compl.out_of_mem  field:acr_compl.FDb.complsource  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_compl.FDb.complsource.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_compl::FComplsource* acr_compl::complsource_AllocMaybe() {
    acr_compl::FComplsource *row = (acr_compl::FComplsource*)complsource_AllocMem();
    if (row) {
        new (row) acr_compl::FComplsource; // call constructor
    }
    return row;
}

// --- acr_compl.FDb.complsource.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_compl::complsource_AllocMem() {
    u64 new_nelems     = _db.complsource_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_compl::FComplsource*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.complsource_lary[bsr];
        if (!lev) {
            lev=(acr_compl::FComplsource*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FComplsource) * (u64(1)<<bsr));
            _db.complsource_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.complsource_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_compl.FDb.complsource.RemoveAll
// Remove all elements from Lary
void acr_compl::complsource_RemoveAll() {
    for (u64 n = _db.complsource_n; n>0; ) {
        n--;
        complsource_qFind(u64(n)).~FComplsource(); // destroy last element
        _db.complsource_n = i32(n);
    }
}

// --- acr_compl.FDb.complsource.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_compl::complsource_RemoveLast() {
    u64 n = _db.complsource_n;
    if (n > 0) {
        n -= 1;
        complsource_qFind(u64(n)).~FComplsource();
        _db.complsource_n = i32(n);
    }
}

// --- acr_compl.FDb.complsource.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_compl::complsource_XrefMaybe(acr_compl::FComplsource &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- acr_compl.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr acr_compl::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- acr_compl.FDb.trace.N
// Function return 1
inline static i32 acr_compl::trace_N() {
    return 1;
}

// --- acr_compl.FDb.bh_completion_curs.Add
static void acr_compl::_db_bh_completion_curs_Add(_db_bh_completion_curs &curs, acr_compl::FCompletion& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    acr_compl::FCompletion* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        acr_compl::FCompletion* p = elems[j];
        if (!bh_completion_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- acr_compl.FDb.bh_completion_curs.Reserve
void acr_compl::_db_bh_completion_curs_Reserve(_db_bh_completion_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_completion_N();
        curs.temp_elems   = (acr_compl::FCompletion**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("acr_compl.cursor_out_of_memory  func:acr_compl.FDb.bh_completion_curs.Reserve");
        }
        curs.temp_max       = bh_completion_N();
    }
}

// --- acr_compl.FDb.bh_completion_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void acr_compl::_db_bh_completion_curs_Reset(_db_bh_completion_curs &curs, acr_compl::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_completion_curs_Reserve(curs, bh_completion_N());
    curs.temp_n = 0;
    if (parent.bh_completion_n > 0) {
        acr_compl::FCompletion &first = *parent.bh_completion_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- acr_compl.FDb.bh_completion_curs.Next
// Advance cursor.
void acr_compl::_db_bh_completion_curs_Next(_db_bh_completion_curs &curs) {
    acr_compl::FCompletion* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        acr_compl::FCompletion* dead = elems[0];
        int i       = 0;
        acr_compl::FCompletion* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            acr_compl::FCompletion* choose = last;
            int l         = i*2+1;
            if (l<n) {
                acr_compl::FCompletion* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                acr_compl::FCompletion* er = elems[r];
                if (bh_completion_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_completion_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_completion_idx;
        i = (index*2+1);
        if (i < bh_completion_N()) {
            acr_compl::FCompletion &elem = *curs.parent->bh_completion_elems[i];
            _db_bh_completion_curs_Add(curs, elem);
        }
        if (i+1 < bh_completion_N()) {
            acr_compl::FCompletion &elem = *curs.parent->bh_completion_elems[i + 1];
            _db_bh_completion_curs_Add(curs, elem);
        }
    }
}

// --- acr_compl.FDb..Init
// Set all fields to initial values.
void acr_compl::FDb_Init() {
    _db.point = i32(0);
    _db.word_elems 	= 0; // (acr_compl.FDb.word)
    _db.word_n     	= 0; // (acr_compl.FDb.word)
    _db.word_max   	= 0; // (acr_compl.FDb.word)
    // initialize LAry ctype (acr_compl.FDb.ctype)
    _db.ctype_n = 0;
    memset(_db.ctype_lary, 0, sizeof(_db.ctype_lary)); // zero out all level pointers
    acr_compl::FCtype* ctype_first = (acr_compl::FCtype*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FCtype) * (u64(1)<<4));
    if (!ctype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ctype_lary[i]  = ctype_first;
        ctype_first    += 1ULL<<i;
    }
    // initialize hash table for acr_compl::FCtype;
    _db.ind_ctype_n             	= 0; // (acr_compl.FDb.ind_ctype)
    _db.ind_ctype_buckets_n     	= 4; // (acr_compl.FDb.ind_ctype)
    _db.ind_ctype_buckets_elems 	= (acr_compl::FCtype**)algo_lib::malloc_AllocMem(sizeof(acr_compl::FCtype*)*_db.ind_ctype_buckets_n); // initial buckets (acr_compl.FDb.ind_ctype)
    if (!_db.ind_ctype_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_compl.FDb.ind_ctype)
    }
    memset(_db.ind_ctype_buckets_elems, 0, sizeof(acr_compl::FCtype*)*_db.ind_ctype_buckets_n); // (acr_compl.FDb.ind_ctype)
    // initialize LAry field (acr_compl.FDb.field)
    _db.field_n = 0;
    memset(_db.field_lary, 0, sizeof(_db.field_lary)); // zero out all level pointers
    acr_compl::FField* field_first = (acr_compl::FField*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FField) * (u64(1)<<4));
    if (!field_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.field_lary[i]  = field_first;
        field_first    += 1ULL<<i;
    }
    // initialize hash table for acr_compl::FField;
    _db.ind_field_n             	= 0; // (acr_compl.FDb.ind_field)
    _db.ind_field_buckets_n     	= 4; // (acr_compl.FDb.ind_field)
    _db.ind_field_buckets_elems 	= (acr_compl::FField**)algo_lib::malloc_AllocMem(sizeof(acr_compl::FField*)*_db.ind_field_buckets_n); // initial buckets (acr_compl.FDb.ind_field)
    if (!_db.ind_field_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_compl.FDb.ind_field)
    }
    memset(_db.ind_field_buckets_elems, 0, sizeof(acr_compl::FField*)*_db.ind_field_buckets_n); // (acr_compl.FDb.ind_field)
    // initialize LAry ssimfile (acr_compl.FDb.ssimfile)
    _db.ssimfile_n = 0;
    memset(_db.ssimfile_lary, 0, sizeof(_db.ssimfile_lary)); // zero out all level pointers
    acr_compl::FSsimfile* ssimfile_first = (acr_compl::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FSsimfile) * (u64(1)<<4));
    if (!ssimfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ssimfile_lary[i]  = ssimfile_first;
        ssimfile_first    += 1ULL<<i;
    }
    // initialize hash table for acr_compl::FSsimfile;
    _db.ind_ssimfile_n             	= 0; // (acr_compl.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_n     	= 4; // (acr_compl.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_elems 	= (acr_compl::FSsimfile**)algo_lib::malloc_AllocMem(sizeof(acr_compl::FSsimfile*)*_db.ind_ssimfile_buckets_n); // initial buckets (acr_compl.FDb.ind_ssimfile)
    if (!_db.ind_ssimfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_compl.FDb.ind_ssimfile)
    }
    memset(_db.ind_ssimfile_buckets_elems, 0, sizeof(acr_compl::FSsimfile*)*_db.ind_ssimfile_buckets_n); // (acr_compl.FDb.ind_ssimfile)
    // initialize LAry completion (acr_compl.FDb.completion)
    _db.completion_n = 0;
    memset(_db.completion_lary, 0, sizeof(_db.completion_lary)); // zero out all level pointers
    acr_compl::FCompletion* completion_first = (acr_compl::FCompletion*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FCompletion) * (u64(1)<<4));
    if (!completion_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.completion_lary[i]  = completion_first;
        completion_first    += 1ULL<<i;
    }
    // initialize LAry anonfld (acr_compl.FDb.anonfld)
    _db.anonfld_n = 0;
    memset(_db.anonfld_lary, 0, sizeof(_db.anonfld_lary)); // zero out all level pointers
    acr_compl::FAnonfld* anonfld_first = (acr_compl::FAnonfld*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FAnonfld) * (u64(1)<<4));
    if (!anonfld_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.anonfld_lary[i]  = anonfld_first;
        anonfld_first    += 1ULL<<i;
    }
    _db.bh_completion_max   	= 0; // (acr_compl.FDb.bh_completion)
    _db.bh_completion_n     	= 0; // (acr_compl.FDb.bh_completion)
    _db.bh_completion_elems 	= NULL; // (acr_compl.FDb.bh_completion)
    // initialize LAry ns (acr_compl.FDb.ns)
    _db.ns_n = 0;
    memset(_db.ns_lary, 0, sizeof(_db.ns_lary)); // zero out all level pointers
    acr_compl::FNs* ns_first = (acr_compl::FNs*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FNs) * (u64(1)<<4));
    if (!ns_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ns_lary[i]  = ns_first;
        ns_first    += 1ULL<<i;
    }
    // initialize LAry fconst (acr_compl.FDb.fconst)
    _db.fconst_n = 0;
    memset(_db.fconst_lary, 0, sizeof(_db.fconst_lary)); // zero out all level pointers
    acr_compl::FFconst* fconst_first = (acr_compl::FFconst*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFconst) * (u64(1)<<4));
    if (!fconst_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fconst_lary[i]  = fconst_first;
        fconst_first    += 1ULL<<i;
    }
    // initialize LAry fcmdline (acr_compl.FDb.fcmdline)
    _db.fcmdline_n = 0;
    memset(_db.fcmdline_lary, 0, sizeof(_db.fcmdline_lary)); // zero out all level pointers
    acr_compl::FFcmdline* fcmdline_first = (acr_compl::FFcmdline*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFcmdline) * (u64(1)<<4));
    if (!fcmdline_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fcmdline_lary[i]  = fcmdline_first;
        fcmdline_first    += 1ULL<<i;
    }
    // initialize LAry fflag (acr_compl.FDb.fflag)
    _db.fflag_n = 0;
    memset(_db.fflag_lary, 0, sizeof(_db.fflag_lary)); // zero out all level pointers
    acr_compl::FFflag* fflag_first = (acr_compl::FFflag*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFflag) * (u64(1)<<4));
    if (!fflag_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fflag_lary[i]  = fflag_first;
        fflag_first    += 1ULL<<i;
    }
    _db.zd_cmd_field_head = NULL; // (acr_compl.FDb.zd_cmd_field)
    _db.zd_cmd_field_n = 0; // (acr_compl.FDb.zd_cmd_field)
    _db.zd_cmd_field_tail = NULL; // (acr_compl.FDb.zd_cmd_field)
    // initialize hash table for acr_compl::FNs;
    _db.ind_ns_n             	= 0; // (acr_compl.FDb.ind_ns)
    _db.ind_ns_buckets_n     	= 4; // (acr_compl.FDb.ind_ns)
    _db.ind_ns_buckets_elems 	= (acr_compl::FNs**)algo_lib::malloc_AllocMem(sizeof(acr_compl::FNs*)*_db.ind_ns_buckets_n); // initial buckets (acr_compl.FDb.ind_ns)
    if (!_db.ind_ns_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_compl.FDb.ind_ns)
    }
    memset(_db.ind_ns_buckets_elems, 0, sizeof(acr_compl::FNs*)*_db.ind_ns_buckets_n); // (acr_compl.FDb.ind_ns)
    // initialize hash table for acr_compl::FField;
    _db.ind_cmd_field_name_n             	= 0; // (acr_compl.FDb.ind_cmd_field_name)
    _db.ind_cmd_field_name_buckets_n     	= 4; // (acr_compl.FDb.ind_cmd_field_name)
    _db.ind_cmd_field_name_buckets_elems 	= (acr_compl::FField**)algo_lib::malloc_AllocMem(sizeof(acr_compl::FField*)*_db.ind_cmd_field_name_buckets_n); // initial buckets (acr_compl.FDb.ind_cmd_field_name)
    if (!_db.ind_cmd_field_name_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_compl.FDb.ind_cmd_field_name)
    }
    memset(_db.ind_cmd_field_name_buckets_elems, 0, sizeof(acr_compl::FField*)*_db.ind_cmd_field_name_buckets_n); // (acr_compl.FDb.ind_cmd_field_name)
    _db.need_value = bool(false);
    _db.anon_index = i32(0);
    _db.exact = bool(false);
    _db.anon = bool(false);
    // initialize LAry argvtype (acr_compl.FDb.argvtype)
    _db.argvtype_n = 0;
    memset(_db.argvtype_lary, 0, sizeof(_db.argvtype_lary)); // zero out all level pointers
    acr_compl::FArgvtype* argvtype_first = (acr_compl::FArgvtype*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FArgvtype) * (u64(1)<<4));
    if (!argvtype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.argvtype_lary[i]  = argvtype_first;
        argvtype_first    += 1ULL<<i;
    }
    // initialize LAry falias (acr_compl.FDb.falias)
    _db.falias_n = 0;
    memset(_db.falias_lary, 0, sizeof(_db.falias_lary)); // zero out all level pointers
    acr_compl::FFalias* falias_first = (acr_compl::FFalias*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FFalias) * (u64(1)<<4));
    if (!falias_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.falias_lary[i]  = falias_first;
        falias_first    += 1ULL<<i;
    }
    // initialize LAry complsource (acr_compl.FDb.complsource)
    _db.complsource_n = 0;
    memset(_db.complsource_lary, 0, sizeof(_db.complsource_lary)); // zero out all level pointers
    acr_compl::FComplsource* complsource_first = (acr_compl::FComplsource*)algo_lib::malloc_AllocMem(sizeof(acr_compl::FComplsource) * (u64(1)<<4));
    if (!complsource_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.complsource_lary[i]  = complsource_first;
        complsource_first    += 1ULL<<i;
    }
    _db.is_data_dir = bool(false);

    acr_compl::InitReflection();
}

// --- acr_compl.FDb..Uninit
void acr_compl::FDb_Uninit() {
    acr_compl::FDb &row = _db; (void)row;

    // acr_compl.FDb.complsource.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.falias.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.argvtype.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.ind_cmd_field_name.Uninit (Thash)  //
    // skip destruction of ind_cmd_field_name in global scope

    // acr_compl.FDb.ind_ns.Uninit (Thash)  //
    // skip destruction of ind_ns in global scope

    // acr_compl.FDb.fflag.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.fcmdline.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.fconst.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.ns.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.bh_completion.Uninit (Bheap)  //
    // skip destruction in global scope

    // acr_compl.FDb.anonfld.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.completion.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.ind_ssimfile.Uninit (Thash)  //
    // skip destruction of ind_ssimfile in global scope

    // acr_compl.FDb.ssimfile.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.ind_field.Uninit (Thash)  //
    // skip destruction of ind_field in global scope

    // acr_compl.FDb.field.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.ind_ctype.Uninit (Thash)  //
    // skip destruction of ind_ctype in global scope

    // acr_compl.FDb.ctype.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_compl.FDb.word.Uninit (Tary)  //
    // remove all elements from acr_compl.FDb.word
    word_RemoveAll();
    // free memory for Tary acr_compl.FDb.word
    algo_lib::malloc_FreeMem(_db.word_elems, sizeof(algo::cstring)*_db.word_max); // (acr_compl.FDb.word)
}

// --- acr_compl.FFalias.base.CopyOut
// Copy fields out of row
void acr_compl::falias_CopyOut(acr_compl::FFalias &row, dmmeta::Falias &out) {
    out.field = row.field;
    out.srcfield = row.srcfield;
    out.comment = row.comment;
}

// --- acr_compl.FFalias.base.CopyIn
// Copy fields in to row
void acr_compl::falias_CopyIn(acr_compl::FFalias &row, dmmeta::Falias &in) {
    row.field = in.field;
    row.srcfield = in.srcfield;
    row.comment = in.comment;
}

// --- acr_compl.FFalias..Uninit
void acr_compl::FFalias_Uninit(acr_compl::FFalias& falias) {
    acr_compl::FFalias &row = falias; (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (p_field)  {
        c_falias_Remove(*p_field, row);// remove falias from index c_falias
    }
    acr_compl::FField* p_srcfield = acr_compl::ind_field_Find(row.srcfield);
    if (p_srcfield)  {
        c_falias_srcfield_Remove(*p_srcfield, row);// remove falias from index c_falias_srcfield
    }
}

// --- acr_compl.FFcmdline.base.CopyOut
// Copy fields out of row
void acr_compl::fcmdline_CopyOut(acr_compl::FFcmdline &row, dmmeta::Fcmdline &out) {
    out.field = row.field;
    out.read = row.read;
    out.basecmdline = row.basecmdline;
    out.comment = row.comment;
}

// --- acr_compl.FFcmdline.base.CopyIn
// Copy fields in to row
void acr_compl::fcmdline_CopyIn(acr_compl::FFcmdline &row, dmmeta::Fcmdline &in) {
    row.field = in.field;
    row.read = in.read;
    row.basecmdline = in.basecmdline;
    row.comment = in.comment;
}

// --- acr_compl.FFcmdline.ns.Get
algo::Smallstr16 acr_compl::ns_Get(acr_compl::FFcmdline& fcmdline) {
    algo::Smallstr16 ret(algo::Pathcomp(fcmdline.field, ".RL.RL"));
    return ret;
}

// --- acr_compl.FFcmdline..Uninit
void acr_compl::FFcmdline_Uninit(acr_compl::FFcmdline& fcmdline) {
    acr_compl::FFcmdline &row = fcmdline; (void)row;
    acr_compl::FNs* p_ns = acr_compl::ind_ns_Find(ns_Get(row));
    if (p_ns)  {
        c_fcmdline_Remove(*p_ns, row);// remove fcmdline from index c_fcmdline
    }
}

// --- acr_compl.FFconst.base.CopyOut
// Copy fields out of row
void acr_compl::fconst_CopyOut(acr_compl::FFconst &row, dmmeta::Fconst &out) {
    out.fconst = row.fconst;
    out.value = row.value;
    out.comment = row.comment;
}

// --- acr_compl.FFconst.base.CopyIn
// Copy fields in to row
void acr_compl::fconst_CopyIn(acr_compl::FFconst &row, dmmeta::Fconst &in) {
    row.fconst = in.fconst;
    row.value = in.value;
    row.comment = in.comment;
}

// --- acr_compl.FFconst.field.Get
algo::Smallstr100 acr_compl::field_Get(acr_compl::FFconst& fconst) {
    algo::Smallstr100 ret(algo::Pathcomp(fconst.fconst, "/LL"));
    return ret;
}

// --- acr_compl.FFconst.name.Get
algo::Smallstr100 acr_compl::name_Get(acr_compl::FFconst& fconst) {
    algo::Smallstr100 ret(algo::Pathcomp(fconst.fconst, "/LR"));
    return ret;
}

// --- acr_compl.FFconst..Uninit
void acr_compl::FFconst_Uninit(acr_compl::FFconst& fconst) {
    acr_compl::FFconst &row = fconst; (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(field_Get(row));
    if (p_field)  {
        c_fconst_Remove(*p_field, row);// remove fconst from index c_fconst
    }
}

// --- acr_compl.FFflag.base.CopyOut
// Copy fields out of row
void acr_compl::fflag_CopyOut(acr_compl::FFflag &row, dmmeta::Fflag &out) {
    out.field = row.field;
    out.cumulative = row.cumulative;
    out.emptyval = row.emptyval;
    out.comment = row.comment;
}

// --- acr_compl.FFflag.base.CopyIn
// Copy fields in to row
void acr_compl::fflag_CopyIn(acr_compl::FFflag &row, dmmeta::Fflag &in) {
    row.field = in.field;
    row.cumulative = in.cumulative;
    row.emptyval = in.emptyval;
    row.comment = in.comment;
}

// --- acr_compl.FFflag..Uninit
void acr_compl::FFflag_Uninit(acr_compl::FFflag& fflag) {
    acr_compl::FFflag &row = fflag; (void)row;
    acr_compl::FField* p_field = acr_compl::ind_field_Find(row.field);
    if (p_field)  {
        c_fflag_Remove(*p_field, row);// remove fflag from index c_fflag
    }
}

// --- acr_compl.FField.msghdr.CopyOut
// Copy fields out of row
void acr_compl::field_CopyOut(acr_compl::FField &row, dmmeta::Field &out) {
    out.field = row.field;
    out.arg = row.arg;
    out.reftype = row.reftype;
    out.dflt = row.dflt;
    out.comment = row.comment;
}

// --- acr_compl.FField.msghdr.CopyIn
// Copy fields in to row
void acr_compl::field_CopyIn(acr_compl::FField &row, dmmeta::Field &in) {
    row.field = in.field;
    row.arg = in.arg;
    row.reftype = in.reftype;
    row.dflt = in.dflt;
    row.comment = in.comment;
}

// --- acr_compl.FField.ctype.Get
algo::Smallstr50 acr_compl::ctype_Get(acr_compl::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RL"));
    return ret;
}

// --- acr_compl.FField.ns.Get
algo::Smallstr16 acr_compl::ns_Get(acr_compl::FField& field) {
    algo::Smallstr16 ret(algo::Pathcomp(field.field, ".RL.RL"));
    return ret;
}

// --- acr_compl.FField.name.Get
algo::Smallstr50 acr_compl::name_Get(acr_compl::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RR"));
    return ret;
}

// --- acr_compl.FField.c_fconst.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_compl::c_fconst_Insert(acr_compl::FField& field, acr_compl::FFconst& row) {
    if (bool_Update(row.field_c_fconst_in_ary,true)) {
        // reserve space
        c_fconst_Reserve(field, 1);
        u32 n  = field.c_fconst_n;
        u32 at = n;
        acr_compl::FFconst* *elems = field.c_fconst_elems;
        elems[at] = &row;
        field.c_fconst_n = n+1;

    }
}

// --- acr_compl.FField.c_fconst.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool acr_compl::c_fconst_InsertMaybe(acr_compl::FField& field, acr_compl::FFconst& row) {
    bool retval = !row.field_c_fconst_in_ary;
    c_fconst_Insert(field,row); // check is performed in _Insert again
    return retval;
}

// --- acr_compl.FField.c_fconst.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_compl::c_fconst_Remove(acr_compl::FField& field, acr_compl::FFconst& row) {
    if (bool_Update(row.field_c_fconst_in_ary,false)) {
        int lim = field.c_fconst_n;
        acr_compl::FFconst* *elems = field.c_fconst_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            acr_compl::FFconst* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(acr_compl::FFconst*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                field.c_fconst_n = lim - 1;
                break;
            }
        }
    }
}

// --- acr_compl.FField.c_fconst.Reserve
// Reserve space in index for N more elements;
void acr_compl::c_fconst_Reserve(acr_compl::FField& field, u32 n) {
    u32 old_max = field.c_fconst_max;
    if (UNLIKELY(field.c_fconst_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_compl::FFconst*);
        u32 new_size = new_max * sizeof(acr_compl::FFconst*);
        void *new_mem = algo_lib::malloc_ReallocMem(field.c_fconst_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FField.c_fconst");
        }
        field.c_fconst_elems = (acr_compl::FFconst**)new_mem;
        field.c_fconst_max = new_max;
    }
}

// --- acr_compl.FField.c_falias_srcfield.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_compl::c_falias_srcfield_Insert(acr_compl::FField& field, acr_compl::FFalias& row) {
    // reserve space
    c_falias_srcfield_Reserve(field, 1);
    u32 n  = field.c_falias_srcfield_n;
    u32 at = n;
    acr_compl::FFalias* *elems = field.c_falias_srcfield_elems;
    elems[at] = &row;
    field.c_falias_srcfield_n = n+1;

}

// --- acr_compl.FField.c_falias_srcfield.ScanInsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
bool acr_compl::c_falias_srcfield_ScanInsertMaybe(acr_compl::FField& field, acr_compl::FFalias& row) {
    bool retval = true;
    u32 n  = field.c_falias_srcfield_n;
    for (u32 i = 0; i < n; i++) {
        if (field.c_falias_srcfield_elems[i] == &row) {
            retval = false;
            break;
        }
    }
    if (retval) {
        // reserve space
        c_falias_srcfield_Reserve(field, 1);
        field.c_falias_srcfield_elems[n] = &row;
        field.c_falias_srcfield_n = n+1;
    }
    return retval;
}

// --- acr_compl.FField.c_falias_srcfield.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_compl::c_falias_srcfield_Remove(acr_compl::FField& field, acr_compl::FFalias& row) {
    int lim = field.c_falias_srcfield_n;
    acr_compl::FFalias* *elems = field.c_falias_srcfield_elems;
    // search backward, so that most recently added element is found first.
    // if found, shift array.
    for (int i = lim-1; i>=0; i--) {
        acr_compl::FFalias* elem = elems[i]; // fetch element
        if (elem == &row) {
            int j = i + 1;
            size_t nbytes = sizeof(acr_compl::FFalias*) * (lim - j);
            memmove(elems + i, elems + j, nbytes);
            field.c_falias_srcfield_n = lim - 1;
            break;
        }
    }
}

// --- acr_compl.FField.c_falias_srcfield.Reserve
// Reserve space in index for N more elements;
void acr_compl::c_falias_srcfield_Reserve(acr_compl::FField& field, u32 n) {
    u32 old_max = field.c_falias_srcfield_max;
    if (UNLIKELY(field.c_falias_srcfield_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_compl::FFalias*);
        u32 new_size = new_max * sizeof(acr_compl::FFalias*);
        void *new_mem = algo_lib::malloc_ReallocMem(field.c_falias_srcfield_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_compl.out_of_memory  field:acr_compl.FField.c_falias_srcfield");
        }
        field.c_falias_srcfield_elems = (acr_compl::FFalias**)new_mem;
        field.c_falias_srcfield_max = new_max;
    }
}

// --- acr_compl.FField..Init
// Set all fields to initial values.
void acr_compl::FField_Init(acr_compl::FField& field) {
    field.reftype = algo::strptr("Val");
    field.p_arg = NULL;
    field.c_anonfld = NULL;
    field.c_fconst_elems = NULL; // (acr_compl.FField.c_fconst)
    field.c_fconst_n = 0; // (acr_compl.FField.c_fconst)
    field.c_fconst_max = 0; // (acr_compl.FField.c_fconst)
    field.seen = bool(false);
    field.c_fflag = NULL;
    field.p_ctype = NULL;
    field.c_falias = NULL;
    field.c_falias_srcfield_elems = NULL; // (acr_compl.FField.c_falias_srcfield)
    field.c_falias_srcfield_n = 0; // (acr_compl.FField.c_falias_srcfield)
    field.c_falias_srcfield_max = 0; // (acr_compl.FField.c_falias_srcfield)
    field.ctype_c_field_in_ary = bool(false);
    field.ind_field_next = (acr_compl::FField*)-1; // (acr_compl.FDb.ind_field) not-in-hash
    field.zd_cmd_field_next = (acr_compl::FField*)-1; // (acr_compl.FDb.zd_cmd_field) not-in-list
    field.zd_cmd_field_prev = NULL; // (acr_compl.FDb.zd_cmd_field)
    field.ind_cmd_field_name_next = (acr_compl::FField*)-1; // (acr_compl.FDb.ind_cmd_field_name) not-in-hash
}

// --- acr_compl.FField..Uninit
void acr_compl::FField_Uninit(acr_compl::FField& field) {
    acr_compl::FField &row = field; (void)row;
    ind_field_Remove(row); // remove field from index ind_field
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(ctype_Get(row));
    if (p_ctype)  {
        c_field_Remove(*p_ctype, row);// remove field from index c_field
    }
    zd_cmd_field_Remove(row); // remove field from index zd_cmd_field
    ind_cmd_field_name_Remove(row); // remove field from index ind_cmd_field_name

    // acr_compl.FField.c_falias_srcfield.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(field.c_falias_srcfield_elems, sizeof(acr_compl::FFalias*)*field.c_falias_srcfield_max); // (acr_compl.FField.c_falias_srcfield)

    // acr_compl.FField.c_fconst.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(field.c_fconst_elems, sizeof(acr_compl::FFconst*)*field.c_fconst_max); // (acr_compl.FField.c_fconst)
}

// --- acr_compl.FField..Print
// print string representation of acr_compl::FField to string LHS, no header -- cprint:acr_compl.FField.String
void acr_compl::FField_Print(acr_compl::FField & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.FField";

    algo::Smallstr100_Print(row.field, temp);
    PrintAttrSpaceReset(str,"field", temp);

    algo::Smallstr50_Print(row.arg, temp);
    PrintAttrSpaceReset(str,"arg", temp);

    algo::Smallstr50_Print(row.reftype, temp);
    PrintAttrSpaceReset(str,"reftype", temp);

    algo::CppExpr_Print(row.dflt, temp);
    PrintAttrSpaceReset(str,"dflt", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);

    u64_PrintHex(u64((const acr_compl::FAnonfld*)row.c_anonfld), temp, 8, true);
    PrintAttrSpaceReset(str,"c_anonfld", temp);

    bool_Print(row.seen, temp);
    PrintAttrSpaceReset(str,"seen", temp);

    u64_PrintHex(u64((const acr_compl::FFflag*)row.c_fflag), temp, 8, true);
    PrintAttrSpaceReset(str,"c_fflag", temp);

    u64_PrintHex(u64((const acr_compl::FFalias*)row.c_falias), temp, 8, true);
    PrintAttrSpaceReset(str,"c_falias", temp);

    bool_Print(row.ctype_c_field_in_ary, temp);
    PrintAttrSpaceReset(str,"ctype_c_field_in_ary", temp);
}

// --- acr_compl.FNs.base.CopyOut
// Copy fields out of row
void acr_compl::ns_CopyOut(acr_compl::FNs &row, dmmeta::Ns &out) {
    out.ns = row.ns;
    out.nstype = row.nstype;
    out.license = row.license;
    out.comment = row.comment;
}

// --- acr_compl.FNs.base.CopyIn
// Copy fields in to row
void acr_compl::ns_CopyIn(acr_compl::FNs &row, dmmeta::Ns &in) {
    row.ns = in.ns;
    row.nstype = in.nstype;
    row.license = in.license;
    row.comment = in.comment;
}

// --- acr_compl.FNs..Uninit
void acr_compl::FNs_Uninit(acr_compl::FNs& ns) {
    acr_compl::FNs &row = ns; (void)row;
    ind_ns_Remove(row); // remove ns from index ind_ns
}

// --- acr_compl.FSsimfile.msghdr.CopyOut
// Copy fields out of row
void acr_compl::ssimfile_CopyOut(acr_compl::FSsimfile &row, dmmeta::Ssimfile &out) {
    out.ssimfile = row.ssimfile;
    out.ctype = row.ctype;
}

// --- acr_compl.FSsimfile.msghdr.CopyIn
// Copy fields in to row
void acr_compl::ssimfile_CopyIn(acr_compl::FSsimfile &row, dmmeta::Ssimfile &in) {
    row.ssimfile = in.ssimfile;
    row.ctype = in.ctype;
}

// --- acr_compl.FSsimfile.ssimns.Get
algo::Smallstr16 acr_compl::ssimns_Get(acr_compl::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- acr_compl.FSsimfile.ns.Get
algo::Smallstr16 acr_compl::ns_Get(acr_compl::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- acr_compl.FSsimfile.name.Get
algo::Smallstr50 acr_compl::name_Get(acr_compl::FSsimfile& ssimfile) {
    algo::Smallstr50 ret(algo::Pathcomp(ssimfile.ssimfile, ".RR"));
    return ret;
}

// --- acr_compl.FSsimfile..Uninit
void acr_compl::FSsimfile_Uninit(acr_compl::FSsimfile& ssimfile) {
    acr_compl::FSsimfile &row = ssimfile; (void)row;
    ind_ssimfile_Remove(row); // remove ssimfile from index ind_ssimfile
    acr_compl::FCtype* p_ctype = acr_compl::ind_ctype_Find(row.ctype);
    if (p_ctype)  {
        c_ssimfile_Remove(*p_ctype, row);// remove ssimfile from index c_ssimfile
    }
}

// --- acr_compl.FSsimfile..Print
// print string representation of acr_compl::FSsimfile to string LHS, no header -- cprint:acr_compl.FSsimfile.String
void acr_compl::FSsimfile_Print(acr_compl::FSsimfile & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_compl.FSsimfile";

    algo::Smallstr50_Print(row.ssimfile, temp);
    PrintAttrSpaceReset(str,"ssimfile", temp);

    algo::Smallstr50_Print(row.ctype, temp);
    PrintAttrSpaceReset(str,"ctype", temp);
}

// --- acr_compl.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_compl::value_ToCstr(const acr_compl::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case acr_compl_FieldId_badness     : ret = "badness";  break;
        case acr_compl_FieldId_strkey      : ret = "strkey";  break;
        case acr_compl_FieldId_value       : ret = "value";  break;
        case acr_compl_FieldId_nospace     : ret = "nospace";  break;
        case acr_compl_FieldId_msghdr      : ret = "msghdr";  break;
        case acr_compl_FieldId_field       : ret = "field";  break;
        case acr_compl_FieldId_type        : ret = "type";  break;
    }
    return ret;
}

// --- acr_compl.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void acr_compl::value_Print(const acr_compl::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- acr_compl.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_compl::value_SetStrptrMaybe(acr_compl::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('t','y','p','e'): {
                    value_SetEnum(parent,acr_compl_FieldId_type); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('f','i','e','l','d'): {
                    value_SetEnum(parent,acr_compl_FieldId_field); ret = true; break;
                }
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,acr_compl_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 6: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)) {
                case LE_STR6('m','s','g','h','d','r'): {
                    value_SetEnum(parent,acr_compl_FieldId_msghdr); ret = true; break;
                }
                case LE_STR6('s','t','r','k','e','y'): {
                    value_SetEnum(parent,acr_compl_FieldId_strkey); ret = true; break;
                }
            }
            break;
        }
        case 7: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)|(u64(rhs[6])<<48)) {
                case LE_STR7('b','a','d','n','e','s','s'): {
                    value_SetEnum(parent,acr_compl_FieldId_badness); ret = true; break;
                }
                case LE_STR7('n','o','s','p','a','c','e'): {
                    value_SetEnum(parent,acr_compl_FieldId_nospace); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_compl.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_compl::value_SetStrptr(acr_compl::FieldId& parent, algo::strptr rhs, acr_compl_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- acr_compl.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_compl::value_ReadStrptrMaybe(acr_compl::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- acr_compl.FieldId..ReadStrptrMaybe
// Read fields of acr_compl::FieldId from an ascii string.
// The format of the string is the format of the acr_compl::FieldId's only field
bool acr_compl::FieldId_ReadStrptrMaybe(acr_compl::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_compl.FieldId..Print
// print string representation of acr_compl::FieldId to string LHS, no header -- cprint:acr_compl.FieldId.String
void acr_compl::FieldId_Print(acr_compl::FieldId & row, algo::cstring &str) {
    acr_compl::value_Print(row, str);
}

// --- acr_compl.Shellqtype.type.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_compl::type_ToCstr(const acr_compl::Shellqtype& parent) {
    const char *ret = NULL;
    switch(type_GetEnum(parent)) {
        case acr_compl_Shellqtype_none     : ret = "none";  break;
        case acr_compl_Shellqtype_squote   : ret = "squote";  break;
        case acr_compl_Shellqtype_dquote   : ret = "dquote";  break;
        case acr_compl_Shellqtype_error    : ret = "error";  break;
    }
    return ret;
}

// --- acr_compl.Shellqtype.type.Print
// Convert type to a string. First, attempt conversion to a known string.
// If no string matches, print type as a numeric value.
void acr_compl::type_Print(const acr_compl::Shellqtype& parent, algo::cstring &lhs) {
    const char *strval = type_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.type;
    }
}

// --- acr_compl.Shellqtype.type.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_compl::type_SetStrptrMaybe(acr_compl::Shellqtype& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('n','o','n','e'): {
                    type_SetEnum(parent,acr_compl_Shellqtype_none); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('e','r','r','o','r'): {
                    type_SetEnum(parent,acr_compl_Shellqtype_error); ret = true; break;
                }
            }
            break;
        }
        case 6: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)) {
                case LE_STR6('d','q','u','o','t','e'): {
                    type_SetEnum(parent,acr_compl_Shellqtype_dquote); ret = true; break;
                }
                case LE_STR6('s','q','u','o','t','e'): {
                    type_SetEnum(parent,acr_compl_Shellqtype_squote); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_compl.Shellqtype.type.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_compl::type_SetStrptr(acr_compl::Shellqtype& parent, algo::strptr rhs, acr_compl_ShellqtypeEnum dflt) {
    if (!type_SetStrptrMaybe(parent,rhs)) type_SetEnum(parent,dflt);
}

// --- acr_compl.Shellqtype.type.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_compl::type_ReadStrptrMaybe(acr_compl::Shellqtype& parent, algo::strptr rhs) {
    bool retval = false;
    retval = type_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u8_ReadStrptrMaybe(parent.type,rhs);
    }
    return retval;
}

// --- acr_compl.Shellqtype..ReadStrptrMaybe
// Read fields of acr_compl::Shellqtype from an ascii string.
// The format of the string is the format of the acr_compl::Shellqtype's only field
bool acr_compl::Shellqtype_ReadStrptrMaybe(acr_compl::Shellqtype &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && type_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_compl.Shellqtype..Print
// print string representation of acr_compl::Shellqtype to string LHS, no header -- cprint:acr_compl.Shellqtype.String
void acr_compl::Shellqtype_Print(acr_compl::Shellqtype row, algo::cstring &str) {
    acr_compl::type_Print(row, str);
}

// --- acr_compl.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_compl::value_ToCstr(const acr_compl::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case acr_compl_TableId_dmmeta_Anonfld: ret = "dmmeta.Anonfld";  break;
        case acr_compl_TableId_dmmeta_Argvtype: ret = "dmmeta.Argvtype";  break;
        case acr_compl_TableId_dmmeta_Ctype: ret = "dmmeta.Ctype";  break;
        case acr_compl_TableId_dmmeta_Falias: ret = "dmmeta.Falias";  break;
        case acr_compl_TableId_dmmeta_Fcmdline: ret = "dmmeta.Fcmdline";  break;
        case acr_compl_TableId_dmmeta_Fconst: ret = "dmmeta.Fconst";  break;
        case acr_compl_TableId_dmmeta_Fflag: ret = "dmmeta.Fflag";  break;
        case acr_compl_TableId_dmmeta_Field: ret = "dmmeta.Field";  break;
        case acr_compl_TableId_dmmeta_Ns   : ret = "dmmeta.Ns";  break;
        case acr_compl_TableId_dmmeta_Ssimfile: ret = "dmmeta.Ssimfile";  break;
    }
    return ret;
}

// --- acr_compl.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void acr_compl::value_Print(const acr_compl::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- acr_compl.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_compl::value_SetStrptrMaybe(acr_compl::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Ns); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_ns); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"flag",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Fflag); ret = true; break; }
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Field); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"flag",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_fflag); ret = true; break; }
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_field); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"alias",5)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Falias); ret = true; break; }
                    if (memcmp(rhs.elems+8,"const",5)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Fconst); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"alias",5)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_falias); ret = true; break; }
                    if (memcmp(rhs.elems+8,"const",5)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_fconst); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','A'): {
                    if (memcmp(rhs.elems+8,"nonfld",6)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Anonfld); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','a'): {
                    if (memcmp(rhs.elems+8,"nonfld",6)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_anonfld); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','A'): {
                    if (memcmp(rhs.elems+8,"rgvtype",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Argvtype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"cmdline",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Fcmdline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_Ssimfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','a'): {
                    if (memcmp(rhs.elems+8,"rgvtype",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_argvtype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"cmdline",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_fcmdline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,acr_compl_TableId_dmmeta_ssimfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_compl.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_compl::value_SetStrptr(acr_compl::TableId& parent, algo::strptr rhs, acr_compl_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- acr_compl.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_compl::value_ReadStrptrMaybe(acr_compl::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- acr_compl.TableId..ReadStrptrMaybe
// Read fields of acr_compl::TableId from an ascii string.
// The format of the string is the format of the acr_compl::TableId's only field
bool acr_compl::TableId_ReadStrptrMaybe(acr_compl::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_compl.TableId..Print
// print string representation of acr_compl::TableId to string LHS, no header -- cprint:acr_compl.TableId.String
void acr_compl::TableId_Print(acr_compl::TableId & row, algo::cstring &str) {
    acr_compl::value_Print(row, str);
}

// --- acr_compl...SizeCheck
inline static void acr_compl::SizeCheck() {
}

// --- acr_compl...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        acr_compl::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        acr_compl::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("acr_compl.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        acr_compl::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- acr_compl...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
