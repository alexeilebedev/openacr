//
// cpp/gen/src_lim_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/src_lim_gen.h"
#include "include/gen/src_lim_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
src_lim::FDb    src_lim::_db;     // dependency found via dev.targdep

namespace src_lim {
const char *src_lim_help =
"src_lim: Enforce line length, function length, and indentation limits\n"
"Usage: src_lim [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -linelim                    Check various file limits (line length, function length, etc)\n"
"    -srcfile    regx    \"%\"     Filter for source files to process\n"
"    -strayfile                  Check for unregistered source files\n"
"    -capture                    Generate new dev.linelim records\n"
"    -write                      Update ssim database (with -capture)\n"
"    -badchar                    Check for bad chars in source files\n"
"    -badline    regx    \"\"      Check badline (acr badline)\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace src_lim
namespace src_lim { // gen:ns_print_proto
    // func:src_lim.FDb.include.InputMaybe
    static bool          include_InputMaybe(dev::Include &elem) __attribute__((nothrow));
    // func:src_lim.FDb.linelim.InputMaybe
    static bool          linelim_InputMaybe(dev::Linelim &elem) __attribute__((nothrow));
    // Load statically available data into tables, register tables and database.
    // func:src_lim.FDb._db.InitReflection
    static void          InitReflection();
    // func:src_lim.FDb.targsrc.InputMaybe
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    // func:src_lim.FDb.gitfile.InputMaybe
    static bool          gitfile_InputMaybe(dev::Gitfile &elem) __attribute__((nothrow));
    // func:src_lim.FDb.badline.InputMaybe
    static bool          badline_InputMaybe(dev::Badline &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:src_lim.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:src_lim.FDb.trace.N
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:src_lim...SizeCheck
    static void          SizeCheck();
} // gen:ns_print_proto

// --- src_lim.FBadline.base.CopyOut
// Copy fields out of row
void src_lim::badline_CopyOut(src_lim::FBadline &row, dev::Badline &out) {
    out.badline = row.badline;
    out.expr = row.expr;
    out.targsrc_regx = row.targsrc_regx;
    out.comment = row.comment;
}

// --- src_lim.FBadline.base.CopyIn
// Copy fields in to row
void src_lim::badline_CopyIn(src_lim::FBadline &row, dev::Badline &in) {
    row.badline = in.badline;
    row.expr = in.expr;
    row.targsrc_regx = in.targsrc_regx;
    row.comment = in.comment;
}

// --- src_lim.trace..Print
// print string representation of ROW to string STR
// cfmt:src_lim.trace.String  printfmt:Tuple
void src_lim::trace_Print(src_lim::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "src_lim.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- src_lim.FDb.include.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_lim::FInclude& src_lim::include_Alloc() {
    src_lim::FInclude* row = include_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_lim.out_of_mem  field:src_lim.FDb.include  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_lim.FDb.include.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_lim::FInclude* src_lim::include_AllocMaybe() {
    src_lim::FInclude *row = (src_lim::FInclude*)include_AllocMem();
    if (row) {
        new (row) src_lim::FInclude; // call constructor
    }
    return row;
}

// --- src_lim.FDb.include.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_lim::FInclude* src_lim::include_InsertMaybe(const dev::Include &value) {
    src_lim::FInclude *row = &include_Alloc(); // if out of memory, process dies. if input error, return NULL.
    include_CopyIn(*row,const_cast<dev::Include&>(value));
    bool ok = include_XrefMaybe(*row); // this may return false
    if (!ok) {
        include_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_lim.FDb.include.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_lim::include_AllocMem() {
    u64 new_nelems     = _db.include_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_lim::FInclude*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.include_lary[bsr];
        if (!lev) {
            lev=(src_lim::FInclude*)algo_lib::malloc_AllocMem(sizeof(src_lim::FInclude) * (u64(1)<<bsr));
            _db.include_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.include_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_lim.FDb.include.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_lim::include_RemoveLast() {
    u64 n = _db.include_n;
    if (n > 0) {
        n -= 1;
        include_qFind(u64(n)).~FInclude();
        _db.include_n = i32(n);
    }
}

// --- src_lim.FDb.include.InputMaybe
static bool src_lim::include_InputMaybe(dev::Include &elem) {
    bool retval = true;
    retval = include_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_lim.FDb.include.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::include_XrefMaybe(src_lim::FInclude &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- src_lim.FDb.linelim.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_lim::FLinelim& src_lim::linelim_Alloc() {
    src_lim::FLinelim* row = linelim_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_lim.out_of_mem  field:src_lim.FDb.linelim  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_lim.FDb.linelim.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_lim::FLinelim* src_lim::linelim_AllocMaybe() {
    src_lim::FLinelim *row = (src_lim::FLinelim*)linelim_AllocMem();
    if (row) {
        new (row) src_lim::FLinelim; // call constructor
    }
    return row;
}

// --- src_lim.FDb.linelim.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_lim::FLinelim* src_lim::linelim_InsertMaybe(const dev::Linelim &value) {
    src_lim::FLinelim *row = &linelim_Alloc(); // if out of memory, process dies. if input error, return NULL.
    linelim_CopyIn(*row,const_cast<dev::Linelim&>(value));
    bool ok = linelim_XrefMaybe(*row); // this may return false
    if (!ok) {
        linelim_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_lim.FDb.linelim.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_lim::linelim_AllocMem() {
    u64 new_nelems     = _db.linelim_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_lim::FLinelim*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.linelim_lary[bsr];
        if (!lev) {
            lev=(src_lim::FLinelim*)algo_lib::malloc_AllocMem(sizeof(src_lim::FLinelim) * (u64(1)<<bsr));
            _db.linelim_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.linelim_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_lim.FDb.linelim.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_lim::linelim_RemoveLast() {
    u64 n = _db.linelim_n;
    if (n > 0) {
        n -= 1;
        linelim_qFind(u64(n)).~FLinelim();
        _db.linelim_n = i32(n);
    }
}

// --- src_lim.FDb.linelim.InputMaybe
static bool src_lim::linelim_InputMaybe(dev::Linelim &elem) {
    bool retval = true;
    retval = linelim_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_lim.FDb.linelim.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::linelim_XrefMaybe(src_lim::FLinelim &row) {
    bool retval = true;
    (void)row;
    src_lim::FGitfile* p_gitfile = src_lim::ind_gitfile_Find(row.gitfile);
    if (UNLIKELY(!p_gitfile)) {
        algo_lib::ResetErrtext() << "src_lim.bad_xref  index:src_lim.FDb.ind_gitfile" << Keyval("key", row.gitfile);
        return false;
    }
    // insert linelim into index c_linelim
    if (true) { // user-defined insert condition
        bool success = c_linelim_InsertMaybe(*p_gitfile, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_lim.duplicate_key  xref:src_lim.FGitfile.c_linelim"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_lim.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     src_lim.FDb.cmdline
//     algo_lib.FDb.cmdline
void src_lim::ReadArgv() {
    command::src_lim &cmd = src_lim::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::src_lim_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"src_lim: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "src_lim: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::src_lim_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"src_lim: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:src_lim.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!src_lim::LoadTuplesMaybe(cmd.in,true)) {
            err << "src_lim.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(src_lim_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- src_lim.FDb._db.MainLoop
// Main loop.
void src_lim::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        src_lim::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- src_lim.FDb._db.Step
// Main step
void src_lim::Step() {
}

// --- src_lim.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void src_lim::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("src_lim", src_lim::InsertStrptrMaybe, NULL, src_lim::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "src_lim.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(src_lim::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)src_lim::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'src_lim.Input'  signature:'00ee14baa7bb10e798a9968848e5501b1eba3043'");
}

// --- src_lim.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool src_lim::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    src_lim::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case src_lim_TableId_dev_Include: { // finput:src_lim.FDb.include
            dev::Include elem;
            retval = dev::Include_ReadStrptrMaybe(elem, str);
            retval = retval && include_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case src_lim_TableId_dev_Linelim: { // finput:src_lim.FDb.linelim
            dev::Linelim elem;
            retval = dev::Linelim_ReadStrptrMaybe(elem, str);
            retval = retval && linelim_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case src_lim_TableId_dev_Targsrc: { // finput:src_lim.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case src_lim_TableId_dev_Gitfile: { // finput:src_lim.FDb.gitfile
            dev::Gitfile elem;
            retval = dev::Gitfile_ReadStrptrMaybe(elem, str);
            retval = retval && gitfile_InputMaybe(elem);
            retval = true; // finput strict:N
            break;
        }
        case src_lim_TableId_dev_Badline: { // finput:src_lim.FDb.badline
            dev::Badline elem;
            retval = dev::Badline_ReadStrptrMaybe(elem, str);
            retval = retval && badline_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- src_lim.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool src_lim::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = src_lim::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = src_lim::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dev.gitfile"),recursive);
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dev.targsrc"),recursive);
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dev.linelim"),recursive);
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dev.include"),recursive);
        retval = retval && src_lim::LoadTuplesFile(algo::SsimFname(root,"dev.badline"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- src_lim.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool src_lim::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- src_lim.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool src_lim::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && src_lim::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- src_lim.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool src_lim::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = src_lim::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- src_lim.FDb._db.Steps
// Calls Step function of dependencies
void src_lim::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- src_lim.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- src_lim.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_lim::FTargsrc& src_lim::targsrc_Alloc() {
    src_lim::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_lim.out_of_mem  field:src_lim.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_lim.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_lim::FTargsrc* src_lim::targsrc_AllocMaybe() {
    src_lim::FTargsrc *row = (src_lim::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) src_lim::FTargsrc; // call constructor
    }
    return row;
}

// --- src_lim.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_lim::FTargsrc* src_lim::targsrc_InsertMaybe(const dev::Targsrc &value) {
    src_lim::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_lim.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_lim::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_lim::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(src_lim::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_lim::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_lim.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_lim::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = i32(n);
    }
}

// --- src_lim.FDb.targsrc.InputMaybe
static bool src_lim::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_lim.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::targsrc_XrefMaybe(src_lim::FTargsrc &row) {
    bool retval = true;
    (void)row;
    src_lim::FGitfile* p_src = src_lim::ind_gitfile_Find(src_Get(row));
    if (UNLIKELY(!p_src)) {
        algo_lib::ResetErrtext() << "src_lim.bad_xref  index:src_lim.FDb.ind_gitfile" << Keyval("key", src_Get(row));
        return false;
    }
    // targsrc: save pointer to src
    if (true) { // user-defined insert condition
        row.p_gitfile = p_src;
    }
    // insert targsrc into index c_targsrc
    if (true) { // user-defined insert condition
        bool success = c_targsrc_InsertMaybe(*p_src, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_lim.duplicate_key  xref:src_lim.FGitfile.c_targsrc"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_lim.FDb.gitfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_lim::FGitfile& src_lim::gitfile_Alloc() {
    src_lim::FGitfile* row = gitfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_lim.out_of_mem  field:src_lim.FDb.gitfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_lim.FDb.gitfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_lim::FGitfile* src_lim::gitfile_AllocMaybe() {
    src_lim::FGitfile *row = (src_lim::FGitfile*)gitfile_AllocMem();
    if (row) {
        new (row) src_lim::FGitfile; // call constructor
    }
    return row;
}

// --- src_lim.FDb.gitfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_lim::FGitfile* src_lim::gitfile_InsertMaybe(const dev::Gitfile &value) {
    src_lim::FGitfile *row = &gitfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gitfile_CopyIn(*row,const_cast<dev::Gitfile&>(value));
    bool ok = gitfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_lim.FDb.gitfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_lim::gitfile_AllocMem() {
    u64 new_nelems     = _db.gitfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_lim::FGitfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gitfile_lary[bsr];
        if (!lev) {
            lev=(src_lim::FGitfile*)algo_lib::malloc_AllocMem(sizeof(src_lim::FGitfile) * (u64(1)<<bsr));
            _db.gitfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gitfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_lim.FDb.gitfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_lim::gitfile_RemoveLast() {
    u64 n = _db.gitfile_n;
    if (n > 0) {
        n -= 1;
        gitfile_qFind(u64(n)).~FGitfile();
        _db.gitfile_n = i32(n);
    }
}

// --- src_lim.FDb.gitfile.InputMaybe
static bool src_lim::gitfile_InputMaybe(dev::Gitfile &elem) {
    bool retval = true;
    retval = gitfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_lim.FDb.gitfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::gitfile_XrefMaybe(src_lim::FGitfile &row) {
    bool retval = true;
    (void)row;
    // insert gitfile into index ind_gitfile
    if (true) { // user-defined insert condition
        bool success = ind_gitfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_lim.duplicate_key  xref:src_lim.FDb.ind_gitfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_lim.FDb.ind_gitfile.Find
// Find row by key. Return NULL if not found.
src_lim::FGitfile* src_lim::ind_gitfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_gitfile_buckets_n - 1);
    src_lim::FGitfile* *e = &_db.ind_gitfile_buckets_elems[index];
    src_lim::FGitfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gitfile == key;
        if (done) break;
        e         = &ret->ind_gitfile_next;
    } while (true);
    return ret;
}

// --- src_lim.FDb.ind_gitfile.FindX
// Look up row by key and return reference. Throw exception if not found
src_lim::FGitfile& src_lim::ind_gitfile_FindX(const algo::strptr& key) {
    src_lim::FGitfile* ret = ind_gitfile_Find(key);
    vrfy(ret, tempstr() << "src_lim.key_error  table:ind_gitfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_lim.FDb.ind_gitfile.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_lim::FGitfile& src_lim::ind_gitfile_GetOrCreate(const algo::strptr& key) {
    src_lim::FGitfile* ret = ind_gitfile_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &gitfile_Alloc();
        (*ret).gitfile = key;
        bool good = gitfile_XrefMaybe(*ret);
        if (!good) {
            gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_lim.create_error  table:ind_gitfile  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_lim.FDb.ind_gitfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_lim::ind_gitfile_InsertMaybe(src_lim::FGitfile& row) {
    ind_gitfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gitfile_next == (src_lim::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        src_lim::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index];
        do {
            src_lim::FGitfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gitfile == row.gitfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gitfile_next;
        } while (true);
        if (retval) {
            row.ind_gitfile_next = *prev;
            _db.ind_gitfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_lim.FDb.ind_gitfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_lim::ind_gitfile_Remove(src_lim::FGitfile& row) {
    if (LIKELY(row.ind_gitfile_next != (src_lim::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        src_lim::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index]; // addr of pointer to current element
        while (src_lim::FGitfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gitfile_next; // unlink (singly linked list)
                _db.ind_gitfile_n--;
                row.ind_gitfile_next = (src_lim::FGitfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gitfile_next;
        }
    }
}

// --- src_lim.FDb.ind_gitfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_lim::ind_gitfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gitfile_buckets_n;
    u32 new_nelems   = _db.ind_gitfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_lim::FGitfile*);
        u32 new_size = new_nbuckets * sizeof(src_lim::FGitfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_lim::FGitfile* *new_buckets = (src_lim::FGitfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_lim.out_of_memory  field:src_lim.FDb.ind_gitfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gitfile_buckets_n; i++) {
            src_lim::FGitfile* elem = _db.ind_gitfile_buckets_elems[i];
            while (elem) {
                src_lim::FGitfile &row        = *elem;
                src_lim::FGitfile* next       = row.ind_gitfile_next;
                u32 index          = algo::Smallstr200_Hash(0, row.gitfile) & (new_nbuckets-1);
                row.ind_gitfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gitfile_buckets_elems, old_size);
        _db.ind_gitfile_buckets_elems = new_buckets;
        _db.ind_gitfile_buckets_n = new_nbuckets;
    }
}

// --- src_lim.FDb.badline.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_lim::FBadline& src_lim::badline_Alloc() {
    src_lim::FBadline* row = badline_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_lim.out_of_mem  field:src_lim.FDb.badline  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_lim.FDb.badline.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_lim::FBadline* src_lim::badline_AllocMaybe() {
    src_lim::FBadline *row = (src_lim::FBadline*)badline_AllocMem();
    if (row) {
        new (row) src_lim::FBadline; // call constructor
    }
    return row;
}

// --- src_lim.FDb.badline.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_lim::FBadline* src_lim::badline_InsertMaybe(const dev::Badline &value) {
    src_lim::FBadline *row = &badline_Alloc(); // if out of memory, process dies. if input error, return NULL.
    badline_CopyIn(*row,const_cast<dev::Badline&>(value));
    bool ok = badline_XrefMaybe(*row); // this may return false
    if (!ok) {
        badline_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_lim.FDb.badline.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_lim::badline_AllocMem() {
    u64 new_nelems     = _db.badline_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_lim::FBadline*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.badline_lary[bsr];
        if (!lev) {
            lev=(src_lim::FBadline*)algo_lib::malloc_AllocMem(sizeof(src_lim::FBadline) * (u64(1)<<bsr));
            _db.badline_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.badline_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_lim.FDb.badline.RemoveAll
// Remove all elements from Lary
void src_lim::badline_RemoveAll() {
    for (u64 n = _db.badline_n; n>0; ) {
        n--;
        badline_qFind(u64(n)).~FBadline(); // destroy last element
        _db.badline_n = i32(n);
    }
}

// --- src_lim.FDb.badline.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_lim::badline_RemoveLast() {
    u64 n = _db.badline_n;
    if (n > 0) {
        n -= 1;
        badline_qFind(u64(n)).~FBadline();
        _db.badline_n = i32(n);
    }
}

// --- src_lim.FDb.badline.InputMaybe
static bool src_lim::badline_InputMaybe(dev::Badline &elem) {
    bool retval = true;
    retval = badline_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_lim.FDb.badline.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_lim::badline_XrefMaybe(src_lim::FBadline &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- src_lim.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr src_lim::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- src_lim.FDb.trace.N
// Function return 1
inline static i32 src_lim::trace_N() {
    return 1;
}

// --- src_lim.FDb..Init
// Set all fields to initial values.
void src_lim::FDb_Init() {
    // initialize LAry include (src_lim.FDb.include)
    _db.include_n = 0;
    memset(_db.include_lary, 0, sizeof(_db.include_lary)); // zero out all level pointers
    src_lim::FInclude* include_first = (src_lim::FInclude*)algo_lib::malloc_AllocMem(sizeof(src_lim::FInclude) * (u64(1)<<4));
    if (!include_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.include_lary[i]  = include_first;
        include_first    += 1ULL<<i;
    }
    // initialize LAry linelim (src_lim.FDb.linelim)
    _db.linelim_n = 0;
    memset(_db.linelim_lary, 0, sizeof(_db.linelim_lary)); // zero out all level pointers
    src_lim::FLinelim* linelim_first = (src_lim::FLinelim*)algo_lib::malloc_AllocMem(sizeof(src_lim::FLinelim) * (u64(1)<<4));
    if (!linelim_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.linelim_lary[i]  = linelim_first;
        linelim_first    += 1ULL<<i;
    }
    // initialize LAry targsrc (src_lim.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    src_lim::FTargsrc* targsrc_first = (src_lim::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_lim::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }
    // initialize LAry gitfile (src_lim.FDb.gitfile)
    _db.gitfile_n = 0;
    memset(_db.gitfile_lary, 0, sizeof(_db.gitfile_lary)); // zero out all level pointers
    src_lim::FGitfile* gitfile_first = (src_lim::FGitfile*)algo_lib::malloc_AllocMem(sizeof(src_lim::FGitfile) * (u64(1)<<4));
    if (!gitfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gitfile_lary[i]  = gitfile_first;
        gitfile_first    += 1ULL<<i;
    }
    // initialize hash table for src_lim::FGitfile;
    _db.ind_gitfile_n             	= 0; // (src_lim.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_n     	= 4; // (src_lim.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_elems 	= (src_lim::FGitfile**)algo_lib::malloc_AllocMem(sizeof(src_lim::FGitfile*)*_db.ind_gitfile_buckets_n); // initial buckets (src_lim.FDb.ind_gitfile)
    if (!_db.ind_gitfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_lim.FDb.ind_gitfile)
    }
    memset(_db.ind_gitfile_buckets_elems, 0, sizeof(src_lim::FGitfile*)*_db.ind_gitfile_buckets_n); // (src_lim.FDb.ind_gitfile)
    // initialize LAry badline (src_lim.FDb.badline)
    _db.badline_n = 0;
    memset(_db.badline_lary, 0, sizeof(_db.badline_lary)); // zero out all level pointers
    src_lim::FBadline* badline_first = (src_lim::FBadline*)algo_lib::malloc_AllocMem(sizeof(src_lim::FBadline) * (u64(1)<<4));
    if (!badline_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.badline_lary[i]  = badline_first;
        badline_first    += 1ULL<<i;
    }

    src_lim::InitReflection();
}

// --- src_lim.FDb..Uninit
void src_lim::FDb_Uninit() {
    src_lim::FDb &row = _db; (void)row;

    // src_lim.FDb.badline.Uninit (Lary)  //
    // skip destruction in global scope

    // src_lim.FDb.ind_gitfile.Uninit (Thash)  //
    // skip destruction of ind_gitfile in global scope

    // src_lim.FDb.gitfile.Uninit (Lary)  //
    // skip destruction in global scope

    // src_lim.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope

    // src_lim.FDb.linelim.Uninit (Lary)  //
    // skip destruction in global scope

    // src_lim.FDb.include.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- src_lim.FGitfile.base.CopyOut
// Copy fields out of row
void src_lim::gitfile_CopyOut(src_lim::FGitfile &row, dev::Gitfile &out) {
    out.gitfile = row.gitfile;
}

// --- src_lim.FGitfile.base.CopyIn
// Copy fields in to row
void src_lim::gitfile_CopyIn(src_lim::FGitfile &row, dev::Gitfile &in) {
    row.gitfile = in.gitfile;
}

// --- src_lim.FGitfile.ext.Get
algo::Smallstr50 src_lim::ext_Get(src_lim::FGitfile& gitfile) {
    algo::Smallstr50 ret(algo::Pathcomp(gitfile.gitfile, "/RR.LR.RR"));
    return ret;
}

// --- src_lim.FGitfile.zd_include.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void src_lim::zd_include_Insert(src_lim::FGitfile& gitfile, src_lim::FInclude& row) {
    if (!zd_include_InLlistQ(row)) {
        src_lim::FInclude* old_tail = gitfile.zd_include_tail;
        row.zd_include_next = NULL;
        row.zd_include_prev = old_tail;
        gitfile.zd_include_tail = &row;
        src_lim::FInclude **new_row_a = &old_tail->zd_include_next;
        src_lim::FInclude **new_row_b = &gitfile.zd_include_head;
        src_lim::FInclude **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        gitfile.zd_include_n++;
    }
}

// --- src_lim.FGitfile.zd_include.Remove
// Remove element from index. If element is not in index, do nothing.
void src_lim::zd_include_Remove(src_lim::FGitfile& gitfile, src_lim::FInclude& row) {
    if (zd_include_InLlistQ(row)) {
        src_lim::FInclude* old_head       = gitfile.zd_include_head;
        (void)old_head; // in case it's not used
        src_lim::FInclude* prev = row.zd_include_prev;
        src_lim::FInclude* next = row.zd_include_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        src_lim::FInclude **new_next_a = &prev->zd_include_next;
        src_lim::FInclude **new_next_b = &gitfile.zd_include_head;
        src_lim::FInclude **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        src_lim::FInclude **new_prev_a = &next->zd_include_prev;
        src_lim::FInclude **new_prev_b = &gitfile.zd_include_tail;
        src_lim::FInclude **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        gitfile.zd_include_n--;
        row.zd_include_next=(src_lim::FInclude*)-1; // not-in-list
    }
}

// --- src_lim.FGitfile.zd_include.RemoveAll
// Empty the index. (The rows are not deleted)
void src_lim::zd_include_RemoveAll(src_lim::FGitfile& gitfile) {
    src_lim::FInclude* row = gitfile.zd_include_head;
    gitfile.zd_include_head = NULL;
    gitfile.zd_include_tail = NULL;
    gitfile.zd_include_n = 0;
    while (row) {
        src_lim::FInclude* row_next = row->zd_include_next;
        row->zd_include_next  = (src_lim::FInclude*)-1;
        row->zd_include_prev  = NULL;
        row = row_next;
    }
}

// --- src_lim.FGitfile.zd_include.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
src_lim::FInclude* src_lim::zd_include_RemoveFirst(src_lim::FGitfile& gitfile) {
    src_lim::FInclude *row = NULL;
    row = gitfile.zd_include_head;
    if (row) {
        src_lim::FInclude *next = row->zd_include_next;
        gitfile.zd_include_head = next;
        src_lim::FInclude **new_end_a = &next->zd_include_prev;
        src_lim::FInclude **new_end_b = &gitfile.zd_include_tail;
        src_lim::FInclude **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        gitfile.zd_include_n--;
        row->zd_include_next = (src_lim::FInclude*)-1; // mark as not-in-list
    }
    return row;
}

// --- src_lim.FGitfile..Uninit
void src_lim::FGitfile_Uninit(src_lim::FGitfile& gitfile) {
    src_lim::FGitfile &row = gitfile; (void)row;
    ind_gitfile_Remove(row); // remove gitfile from index ind_gitfile
}

// --- src_lim.FInclude.base.CopyOut
// Copy fields out of row
void src_lim::include_CopyOut(src_lim::FInclude &row, dev::Include &out) {
    out.include = row.include;
    out.sys = row.sys;
    out.comment = row.comment;
}

// --- src_lim.FInclude.base.CopyIn
// Copy fields in to row
void src_lim::include_CopyIn(src_lim::FInclude &row, dev::Include &in) {
    row.include = in.include;
    row.sys = in.sys;
    row.comment = in.comment;
}

// --- src_lim.FInclude.srcfile.Get
algo::Smallstr200 src_lim::srcfile_Get(src_lim::FInclude& include) {
    algo::Smallstr200 ret(algo::Pathcomp(include.include, ":LL"));
    return ret;
}

// --- src_lim.FInclude.filename.Get
algo::Smallstr200 src_lim::filename_Get(src_lim::FInclude& include) {
    algo::Smallstr200 ret(algo::Pathcomp(include.include, ":LR"));
    return ret;
}

// --- src_lim.FInclude..Uninit
void src_lim::FInclude_Uninit(src_lim::FInclude& include) {
    src_lim::FInclude &row = include; (void)row;
    src_lim::FGitfile* p_srcfile = src_lim::ind_gitfile_Find(srcfile_Get(row));
    if (p_srcfile)  {
        zd_include_Remove(*p_srcfile, row);// remove include from index zd_include
    }
}

// --- src_lim.FLinelim.base.CopyOut
// Copy fields out of row
void src_lim::linelim_CopyOut(src_lim::FLinelim &row, dev::Linelim &out) {
    out.gitfile = row.gitfile;
    out.nlongline = row.nlongline;
    out.longestline = row.longestline;
    out.nbadws = row.nbadws;
    out.maxws = row.maxws;
    out.nlongfunc = row.nlongfunc;
    out.longestfunc = row.longestfunc;
    out.nmysteryfunc = row.nmysteryfunc;
    out.badness = row.badness;
}

// --- src_lim.FLinelim.base.CopyIn
// Copy fields in to row
void src_lim::linelim_CopyIn(src_lim::FLinelim &row, dev::Linelim &in) {
    row.gitfile = in.gitfile;
    row.nlongline = in.nlongline;
    row.longestline = in.longestline;
    row.nbadws = in.nbadws;
    row.maxws = in.maxws;
    row.nlongfunc = in.nlongfunc;
    row.longestfunc = in.longestfunc;
    row.nmysteryfunc = in.nmysteryfunc;
    row.badness = in.badness;
}

// --- src_lim.FLinelim..Uninit
void src_lim::FLinelim_Uninit(src_lim::FLinelim& linelim) {
    src_lim::FLinelim &row = linelim; (void)row;
    src_lim::FGitfile* p_gitfile = src_lim::ind_gitfile_Find(row.gitfile);
    if (p_gitfile)  {
        c_linelim_Remove(*p_gitfile, row);// remove linelim from index c_linelim
    }
}

// --- src_lim.FTargsrc.base.CopyOut
// Copy fields out of row
void src_lim::targsrc_CopyOut(src_lim::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- src_lim.FTargsrc.base.CopyIn
// Copy fields in to row
void src_lim::targsrc_CopyIn(src_lim::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- src_lim.FTargsrc.target.Get
algo::Smallstr16 src_lim::target_Get(src_lim::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- src_lim.FTargsrc.src.Get
algo::Smallstr200 src_lim::src_Get(src_lim::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- src_lim.FTargsrc.ext.Get
algo::Smallstr10 src_lim::ext_Get(src_lim::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- src_lim.FTargsrc..Uninit
void src_lim::FTargsrc_Uninit(src_lim::FTargsrc& targsrc) {
    src_lim::FTargsrc &row = targsrc; (void)row;
    src_lim::FGitfile* p_src = src_lim::ind_gitfile_Find(src_Get(row));
    if (p_src)  {
        c_targsrc_Remove(*p_src, row);// remove targsrc from index c_targsrc
    }
}

// --- src_lim.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_lim::value_ToCstr(const src_lim::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_lim_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- src_lim.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_lim::value_Print(const src_lim::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_lim.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_lim::value_SetStrptrMaybe(src_lim::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,src_lim_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_lim.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_lim::value_SetStrptr(src_lim::FieldId& parent, algo::strptr rhs, src_lim_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_lim.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_lim::value_ReadStrptrMaybe(src_lim::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_lim.FieldId..ReadStrptrMaybe
// Read fields of src_lim::FieldId from an ascii string.
// The format of the string is the format of the src_lim::FieldId's only field
bool src_lim::FieldId_ReadStrptrMaybe(src_lim::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_lim.FieldId..Print
// print string representation of ROW to string STR
// cfmt:src_lim.FieldId.String  printfmt:Raw
void src_lim::FieldId_Print(src_lim::FieldId& row, algo::cstring& str) {
    src_lim::value_Print(row, str);
}

// --- src_lim.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_lim::value_ToCstr(const src_lim::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_lim_TableId_dev_Badline   : ret = "dev.Badline";  break;
        case src_lim_TableId_dev_Gitfile   : ret = "dev.Gitfile";  break;
        case src_lim_TableId_dev_Include   : ret = "dev.Include";  break;
        case src_lim_TableId_dev_Linelim   : ret = "dev.Linelim";  break;
        case src_lim_TableId_dev_Targsrc   : ret = "dev.Targsrc";  break;
    }
    return ret;
}

// --- src_lim.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_lim::value_Print(const src_lim::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_lim.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_lim::value_SetStrptrMaybe(src_lim::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','B','a','d','l'): {
                    if (memcmp(rhs.elems+8,"ine",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_Badline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','G','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_Gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','I','n','c','l'): {
                    if (memcmp(rhs.elems+8,"ude",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_Include); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','L','i','n','e'): {
                    if (memcmp(rhs.elems+8,"lim",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_Linelim); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','b','a','d','l'): {
                    if (memcmp(rhs.elems+8,"ine",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_badline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','g','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','i','n','c','l'): {
                    if (memcmp(rhs.elems+8,"ude",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_include); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','l','i','n','e'): {
                    if (memcmp(rhs.elems+8,"lim",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_linelim); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_lim_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_lim.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_lim::value_SetStrptr(src_lim::TableId& parent, algo::strptr rhs, src_lim_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_lim.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_lim::value_ReadStrptrMaybe(src_lim::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_lim.TableId..ReadStrptrMaybe
// Read fields of src_lim::TableId from an ascii string.
// The format of the string is the format of the src_lim::TableId's only field
bool src_lim::TableId_ReadStrptrMaybe(src_lim::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_lim.TableId..Print
// print string representation of ROW to string STR
// cfmt:src_lim.TableId.String  printfmt:Raw
void src_lim::TableId_Print(src_lim::TableId& row, algo::cstring& str) {
    src_lim::value_Print(row, str);
}

// --- src_lim...SizeCheck
inline static void src_lim::SizeCheck() {
}

// --- src_lim...StaticCheck
void src_lim::StaticCheck() {
    algo_assert(_offset_of(src_lim::FieldId, value) + sizeof(((src_lim::FieldId*)0)->value) == sizeof(src_lim::FieldId));
}

// --- src_lim...main
int main(int argc, char **argv) {
    try {
        algo_lib::FDb_Init();
        src_lim::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        src_lim::ReadArgv(); // dmmeta.main:src_lim
        src_lim::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("src_lim.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        src_lim::FDb_Uninit();
        algo_lib::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- src_lim...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
