//
// cpp/gen/acr_in_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/acr_in_gen.h"
#include "include/gen/acr_in_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
acr_in::FDb     acr_in::_db;      // dependency found via dev.targdep

namespace acr_in {
const char *acr_in_help =
"acr_in: ACR Input - compute set of ssimfiles or tuples used by a specific target\n"
"Usage: acr_in [-ns:]<regx> [options]\n"
"    OPTION        TYPE    DFLT    COMMENT\n"
"    [ns]          regx            Regx of matching namespace\n"
"    -data                         List ssimfile contents\n"
"    -sigcheck             Y       Output sigcheck records for schema version mismatch detection\n"
"    -list                         List ssimfile names\n"
"    -data_dir     string  \"data\"  Directory with ssimfiles\n"
"    -schema       string  \"data\"\n"
"    -related      string  \"\"      Select only tuples related to specified acr key\n"
"    -notssimfile  regx    \"\"      Exclude ssimfiles matching regx\n"
"    -checkable                    Ensure output passes acr -check\n"
"    -verbose      int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug        int             Debug level (0..255); alias -d; cumulative\n"
"    -help                         Print help and exit; alias -h\n"
"    -version                      Print version and exit\n"
"    -signature                    Show signatures and exit; alias -sig\n"
;


} // namespace acr_in
namespace acr_in { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          finput_InputMaybe(dmmeta::Finput &elem) __attribute__((nothrow));
    static bool          field_InputMaybe(dmmeta::Field &elem) __attribute__((nothrow));
    static bool          ctype_InputMaybe(dmmeta::Ctype &elem) __attribute__((nothrow));
    static bool          ssimfile_InputMaybe(dmmeta::Ssimfile &elem) __attribute__((nothrow));
    static bool          ns_InputMaybe(dmmeta::Ns &elem) __attribute__((nothrow));
    static bool          substr_InputMaybe(dmmeta::Substr &elem) __attribute__((nothrow));
    static bool          dispsig_InputMaybe(dmmeta::Dispsig &elem) __attribute__((nothrow));
    static bool          target_InputMaybe(dev::Target &elem) __attribute__((nothrow));
    static bool          targdep_InputMaybe(dev::Targdep &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- acr_in.FCtype.msghdr.CopyOut
// Copy fields out of row
void acr_in::ctype_CopyOut(acr_in::FCtype &row, dmmeta::Ctype &out) {
    out.ctype = row.ctype;
    out.comment = row.comment;
}

// --- acr_in.FCtype.msghdr.CopyIn
// Copy fields in to row
void acr_in::ctype_CopyIn(acr_in::FCtype &row, dmmeta::Ctype &in) {
    row.ctype = in.ctype;
    row.comment = in.comment;
}

// --- acr_in.FCtype.ns.Get
algo::Smallstr16 acr_in::ns_Get(acr_in::FCtype& ctype) {
    algo::Smallstr16 ret(algo::Pathcomp(ctype.ctype, ".RL"));
    return ret;
}

// --- acr_in.FCtype.name.Get
algo::Smallstr50 acr_in::name_Get(acr_in::FCtype& ctype) {
    algo::Smallstr50 ret(algo::Pathcomp(ctype.ctype, ".RR"));
    return ret;
}

// --- acr_in.FCtype.c_field.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_in::c_field_Insert(acr_in::FCtype& ctype, acr_in::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,true)) {
        // reserve space
        c_field_Reserve(ctype, 1);
        u32 n  = ctype.c_field_n;
        u32 at = n;
        acr_in::FField* *elems = ctype.c_field_elems;
        elems[at] = &row;
        ctype.c_field_n = n+1;

    }
}

// --- acr_in.FCtype.c_field.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool acr_in::c_field_InsertMaybe(acr_in::FCtype& ctype, acr_in::FField& row) {
    bool retval = !row.ctype_c_field_in_ary;
    c_field_Insert(ctype,row); // check is performed in _Insert again
    return retval;
}

// --- acr_in.FCtype.c_field.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_in::c_field_Remove(acr_in::FCtype& ctype, acr_in::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,false)) {
        int lim = ctype.c_field_n;
        acr_in::FField* *elems = ctype.c_field_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            acr_in::FField* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(acr_in::FField*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                ctype.c_field_n = lim - 1;
                break;
            }
        }
    }
}

// --- acr_in.FCtype.c_field.Reserve
// Reserve space in index for N more elements;
void acr_in::c_field_Reserve(acr_in::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_field_max;
    if (UNLIKELY(ctype.c_field_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_in::FField*);
        u32 new_size = new_max * sizeof(acr_in::FField*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_field_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FCtype.c_field");
        }
        ctype.c_field_elems = (acr_in::FField**)new_mem;
        ctype.c_field_max = new_max;
    }
}

// --- acr_in.FCtype.c_ctype.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_in::c_ctype_Insert(acr_in::FCtype& ctype, acr_in::FCtype& row) {
    // reserve space
    c_ctype_Reserve(ctype, 1);
    u32 n  = ctype.c_ctype_n;
    u32 at = n;
    acr_in::FCtype* *elems = ctype.c_ctype_elems;
    elems[at] = &row;
    ctype.c_ctype_n = n+1;

}

// --- acr_in.FCtype.c_ctype.ScanInsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
bool acr_in::c_ctype_ScanInsertMaybe(acr_in::FCtype& ctype, acr_in::FCtype& row) {
    bool retval = true;
    u32 n  = ctype.c_ctype_n;
    for (u32 i = 0; i < n; i++) {
        if (ctype.c_ctype_elems[i] == &row) {
            retval = false;
            break;
        }
    }
    if (retval) {
        // reserve space
        c_ctype_Reserve(ctype, 1);
        ctype.c_ctype_elems[n] = &row;
        ctype.c_ctype_n = n+1;
    }
    return retval;
}

// --- acr_in.FCtype.c_ctype.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_in::c_ctype_Remove(acr_in::FCtype& ctype, acr_in::FCtype& row) {
    int lim = ctype.c_ctype_n;
    acr_in::FCtype* *elems = ctype.c_ctype_elems;
    // search backward, so that most recently added element is found first.
    // if found, shift array.
    for (int i = lim-1; i>=0; i--) {
        acr_in::FCtype* elem = elems[i]; // fetch element
        if (elem == &row) {
            int j = i + 1;
            size_t nbytes = sizeof(acr_in::FCtype*) * (lim - j);
            memmove(elems + i, elems + j, nbytes);
            ctype.c_ctype_n = lim - 1;
            break;
        }
    }
}

// --- acr_in.FCtype.c_ctype.Reserve
// Reserve space in index for N more elements;
void acr_in::c_ctype_Reserve(acr_in::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_ctype_max;
    if (UNLIKELY(ctype.c_ctype_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_in::FCtype*);
        u32 new_size = new_max * sizeof(acr_in::FCtype*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_ctype_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FCtype.c_ctype");
        }
        ctype.c_ctype_elems = (acr_in::FCtype**)new_mem;
        ctype.c_ctype_max = new_max;
    }
}

// --- acr_in.FCtype..Init
// Set all fields to initial values.
void acr_in::FCtype_Init(acr_in::FCtype& ctype) {
    ctype.c_ssimfile = NULL;
    ctype.related = bool(false);
    ctype.select = bool(false);
    ctype.visit = bool(false);
    ctype.c_field_elems = NULL; // (acr_in.FCtype.c_field)
    ctype.c_field_n = 0; // (acr_in.FCtype.c_field)
    ctype.c_field_max = 0; // (acr_in.FCtype.c_field)
    ctype.c_ctype_elems = NULL; // (acr_in.FCtype.c_ctype)
    ctype.c_ctype_n = 0; // (acr_in.FCtype.c_ctype)
    ctype.c_ctype_max = 0; // (acr_in.FCtype.c_ctype)
    ctype.parent_of_finput = bool(false);
    ctype.ind_ctype_next = (acr_in::FCtype*)-1; // (acr_in.FDb.ind_ctype) not-in-hash
    ctype.zd_todo_next = (acr_in::FCtype*)-1; // (acr_in.FDb.zd_todo) not-in-list
    ctype.zd_todo_prev = NULL; // (acr_in.FDb.zd_todo)
    ctype.zd_related_next = (acr_in::FCtype*)-1; // (acr_in.FDb.zd_related) not-in-list
    ctype.zd_related_prev = NULL; // (acr_in.FDb.zd_related)
}

// --- acr_in.FCtype..Uninit
void acr_in::FCtype_Uninit(acr_in::FCtype& ctype) {
    acr_in::FCtype &row = ctype; (void)row;
    ind_ctype_Remove(row); // remove ctype from index ind_ctype
    zd_related_Remove(row); // remove ctype from index zd_related
    zd_todo_Remove(row); // remove ctype from index zd_todo

    // acr_in.FCtype.c_ctype.Uninit (Ptrary)  //children
    algo_lib::malloc_FreeMem(ctype.c_ctype_elems, sizeof(acr_in::FCtype*)*ctype.c_ctype_max); // (acr_in.FCtype.c_ctype)

    // acr_in.FCtype.c_field.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(ctype.c_field_elems, sizeof(acr_in::FField*)*ctype.c_field_max); // (acr_in.FCtype.c_field)
}

// --- acr_in.trace..Print
// print string representation of acr_in::trace to string LHS, no header -- cprint:acr_in.trace.String
void acr_in::trace_Print(acr_in::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_in.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- acr_in.FDb.tuple.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FTuple& acr_in::tuple_Alloc() {
    acr_in::FTuple* row = tuple_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.tuple  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.tuple.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FTuple* acr_in::tuple_AllocMaybe() {
    acr_in::FTuple *row = (acr_in::FTuple*)tuple_AllocMem();
    if (row) {
        new (row) acr_in::FTuple; // call constructor
    }
    return row;
}

// --- acr_in.FDb.tuple.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::tuple_AllocMem() {
    u64 new_nelems     = _db.tuple_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FTuple*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.tuple_lary[bsr];
        if (!lev) {
            lev=(acr_in::FTuple*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTuple) * (u64(1)<<bsr));
            _db.tuple_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.tuple_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.tuple.RemoveAll
// Remove all elements from Lary
void acr_in::tuple_RemoveAll() {
    for (u64 n = _db.tuple_n; n>0; ) {
        n--;
        tuple_qFind(u64(n)).~FTuple(); // destroy last element
        _db.tuple_n = i32(n);
    }
}

// --- acr_in.FDb.tuple.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::tuple_RemoveLast() {
    u64 n = _db.tuple_n;
    if (n > 0) {
        n -= 1;
        tuple_qFind(u64(n)).~FTuple();
        _db.tuple_n = i32(n);
    }
}

// --- acr_in.FDb.tuple.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::tuple_XrefMaybe(acr_in::FTuple &row) {
    bool retval = true;
    (void)row;
    // insert tuple into index ind_tuple
    if (true) { // user-defined insert condition
        bool success = ind_tuple_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_tuple"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_tuple.Find
// Find row by key. Return NULL if not found.
acr_in::FTuple* acr_in::ind_tuple_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_tuple_buckets_n - 1);
    acr_in::FTuple* *e = &_db.ind_tuple_buckets_elems[index];
    acr_in::FTuple* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).key == key;
        if (done) break;
        e         = &ret->ind_tuple_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_tuple.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FTuple& acr_in::ind_tuple_FindX(const algo::strptr& key) {
    acr_in::FTuple* ret = ind_tuple_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_tuple  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_tuple.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_in::FTuple& acr_in::ind_tuple_GetOrCreate(const algo::strptr& key) {
    acr_in::FTuple* ret = ind_tuple_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &tuple_Alloc();
        (*ret).key = key;
        bool good = tuple_XrefMaybe(*ret);
        if (!good) {
            tuple_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_in.create_error  table:ind_tuple  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_in.FDb.ind_tuple.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_tuple_InsertMaybe(acr_in::FTuple& row) {
    ind_tuple_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_tuple_next == (acr_in::FTuple*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_tuple_buckets_n - 1);
        acr_in::FTuple* *prev = &_db.ind_tuple_buckets_elems[index];
        do {
            acr_in::FTuple* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).key == row.key) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_tuple_next;
        } while (true);
        if (retval) {
            row.ind_tuple_next = *prev;
            _db.ind_tuple_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_tuple.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_tuple_Remove(acr_in::FTuple& row) {
    if (LIKELY(row.ind_tuple_next != (acr_in::FTuple*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_tuple_buckets_n - 1);
        acr_in::FTuple* *prev = &_db.ind_tuple_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FTuple *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_tuple_next; // unlink (singly linked list)
                _db.ind_tuple_n--;
                row.ind_tuple_next = (acr_in::FTuple*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_tuple_next;
        }
    }
}

// --- acr_in.FDb.ind_tuple.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_tuple_Reserve(int n) {
    u32 old_nbuckets = _db.ind_tuple_buckets_n;
    u32 new_nelems   = _db.ind_tuple_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FTuple*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FTuple*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FTuple* *new_buckets = (acr_in::FTuple**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_tuple");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_tuple_buckets_n; i++) {
            acr_in::FTuple* elem = _db.ind_tuple_buckets_elems[i];
            while (elem) {
                acr_in::FTuple &row        = *elem;
                acr_in::FTuple* next       = row.ind_tuple_next;
                u32 index          = algo::cstring_Hash(0, row.key) & (new_nbuckets-1);
                row.ind_tuple_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_tuple_buckets_elems, old_size);
        _db.ind_tuple_buckets_elems = new_buckets;
        _db.ind_tuple_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     acr_in.FDb.cmdline
//     algo_lib.FDb.cmdline
void acr_in::ReadArgv() {
    command::acr_in &cmd = acr_in::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::acr_in_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    bool ns_present = false;
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::acr_in_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"acr_in: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"acr_in: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::acr_in_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "acr_in: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::acr_in_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    case command_FieldId_ns: ns_present=true; break;
                    default:break;
                }
            }
            if (!ret) {
                err<<"acr_in: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
        if (!ns_present) {
            err << "acr_in: Missing value for required argument -ns (see -help)" << eol;
            doexit = true;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(acr_in_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(acr_in::LoadTuplesMaybe(cmd.schema,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- acr_in.FDb._db.MainLoop
// Main loop.
void acr_in::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        acr_in::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- acr_in.FDb._db.Step
// Main step
void acr_in::Step() {
}

// --- acr_in.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void acr_in::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("acr_in", acr_in::InsertStrptrMaybe, NULL, acr_in::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "acr_in.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(acr_in::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)acr_in::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'acr_in.Input'  signature:'174bbc074ebf9646c566c0f8996112785f27f3c9'");
}

// --- acr_in.FDb._db.StaticCheck
void acr_in::StaticCheck() {
    algo_assert(_offset_of(acr_in::FieldId, value) + sizeof(((acr_in::FieldId*)0)->value) == sizeof(acr_in::FieldId));
}

// --- acr_in.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool acr_in::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    acr_in::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case acr_in_TableId_dmmeta_Finput: { // finput:acr_in.FDb.finput
            dmmeta::Finput elem;
            retval = dmmeta::Finput_ReadStrptrMaybe(elem, str);
            retval = retval && finput_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Field: { // finput:acr_in.FDb.field
            dmmeta::Field elem;
            retval = dmmeta::Field_ReadStrptrMaybe(elem, str);
            retval = retval && field_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Ctype: { // finput:acr_in.FDb.ctype
            dmmeta::Ctype elem;
            retval = dmmeta::Ctype_ReadStrptrMaybe(elem, str);
            retval = retval && ctype_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Ssimfile: { // finput:acr_in.FDb.ssimfile
            dmmeta::Ssimfile elem;
            retval = dmmeta::Ssimfile_ReadStrptrMaybe(elem, str);
            retval = retval && ssimfile_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Ns: { // finput:acr_in.FDb.ns
            dmmeta::Ns elem;
            retval = dmmeta::Ns_ReadStrptrMaybe(elem, str);
            retval = retval && ns_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Substr: { // finput:acr_in.FDb.substr
            dmmeta::Substr elem;
            retval = dmmeta::Substr_ReadStrptrMaybe(elem, str);
            retval = retval && substr_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dmmeta_Dispsig: { // finput:acr_in.FDb.dispsig
            dmmeta::Dispsig elem;
            retval = dmmeta::Dispsig_ReadStrptrMaybe(elem, str);
            retval = retval && dispsig_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dev_Target: { // finput:acr_in.FDb.target
            dev::Target elem;
            retval = dev::Target_ReadStrptrMaybe(elem, str);
            retval = retval && target_InputMaybe(elem);
            break;
        }
        case acr_in_TableId_dev_Targdep: { // finput:acr_in.FDb.targdep
            dev::Targdep elem;
            retval = dev::Targdep_ReadStrptrMaybe(elem, str);
            retval = retval && targdep_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- acr_in.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool acr_in::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = acr_in::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = acr_in::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ctype"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ns"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsig"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.field"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.finput"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ssimfile"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dmmeta.substr"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dev.target"),recursive);
        retval = retval && acr_in::LoadTuplesFile(algo::SsimFname(root,"dev.targdep"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- acr_in.FDb._db.LoadTuplesFile
// Load all finputs from given file.
bool acr_in::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo_FileFlags__throw);
    retval = LoadTuplesFd(fildes.fd, fname, recursive);
    return retval;
}

// --- acr_in.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool acr_in::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && acr_in::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- acr_in.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool acr_in::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = acr_in::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- acr_in.FDb._db.Steps
// Calls Step function of dependencies
void acr_in::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- acr_in.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- acr_in.FDb.finput.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FFinput& acr_in::finput_Alloc() {
    acr_in::FFinput* row = finput_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.finput  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.finput.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FFinput* acr_in::finput_AllocMaybe() {
    acr_in::FFinput *row = (acr_in::FFinput*)finput_AllocMem();
    if (row) {
        new (row) acr_in::FFinput; // call constructor
    }
    return row;
}

// --- acr_in.FDb.finput.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FFinput* acr_in::finput_InsertMaybe(const dmmeta::Finput &value) {
    acr_in::FFinput *row = &finput_Alloc(); // if out of memory, process dies. if input error, return NULL.
    finput_CopyIn(*row,const_cast<dmmeta::Finput&>(value));
    bool ok = finput_XrefMaybe(*row); // this may return false
    if (!ok) {
        finput_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.finput.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::finput_AllocMem() {
    u64 new_nelems     = _db.finput_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FFinput*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.finput_lary[bsr];
        if (!lev) {
            lev=(acr_in::FFinput*)algo_lib::malloc_AllocMem(sizeof(acr_in::FFinput) * (u64(1)<<bsr));
            _db.finput_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.finput_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.finput.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::finput_RemoveLast() {
    u64 n = _db.finput_n;
    if (n > 0) {
        n -= 1;
        finput_qFind(u64(n)).~FFinput();
        _db.finput_n = i32(n);
    }
}

// --- acr_in.FDb.finput.InputMaybe
static bool acr_in::finput_InputMaybe(dmmeta::Finput &elem) {
    bool retval = true;
    retval = finput_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.finput.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::finput_XrefMaybe(acr_in::FFinput &row) {
    bool retval = true;
    (void)row;
    acr_in::FNs* p_ns = acr_in::ind_ns_Find(ns_Get(row));
    if (UNLIKELY(!p_ns)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ns" << Keyval("key", ns_Get(row));
        return false;
    }
    // finput: save pointer to ns
    if (true) { // user-defined insert condition
        row.p_ns = p_ns;
    }
    acr_in::FField* p_field = acr_in::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // finput: save pointer to field
    if (true) { // user-defined insert condition
        row.p_field = p_field;
    }
    // insert finput into index ind_finput
    if (true) { // user-defined insert condition
        bool success = ind_finput_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_finput"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.field.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FField& acr_in::field_Alloc() {
    acr_in::FField* row = field_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.field  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.field.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FField* acr_in::field_AllocMaybe() {
    acr_in::FField *row = (acr_in::FField*)field_AllocMem();
    if (row) {
        new (row) acr_in::FField; // call constructor
    }
    return row;
}

// --- acr_in.FDb.field.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FField* acr_in::field_InsertMaybe(const dmmeta::Field &value) {
    acr_in::FField *row = &field_Alloc(); // if out of memory, process dies. if input error, return NULL.
    field_CopyIn(*row,const_cast<dmmeta::Field&>(value));
    bool ok = field_XrefMaybe(*row); // this may return false
    if (!ok) {
        field_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.field.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::field_AllocMem() {
    u64 new_nelems     = _db.field_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FField*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.field_lary[bsr];
        if (!lev) {
            lev=(acr_in::FField*)algo_lib::malloc_AllocMem(sizeof(acr_in::FField) * (u64(1)<<bsr));
            _db.field_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.field_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.field.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::field_RemoveLast() {
    u64 n = _db.field_n;
    if (n > 0) {
        n -= 1;
        field_qFind(u64(n)).~FField();
        _db.field_n = i32(n);
    }
}

// --- acr_in.FDb.field.InputMaybe
static bool acr_in::field_InputMaybe(dmmeta::Field &elem) {
    bool retval = true;
    retval = field_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.field.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::field_XrefMaybe(acr_in::FField &row) {
    bool retval = true;
    (void)row;
    acr_in::FCtype* p_arg = acr_in::ind_ctype_Find(row.arg);
    if (UNLIKELY(!p_arg)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ctype" << Keyval("key", row.arg);
        return false;
    }
    // field: save pointer to arg
    if (true) { // user-defined insert condition
        row.p_arg = p_arg;
    }
    acr_in::FCtype* p_ctype = acr_in::ind_ctype_Find(ctype_Get(row));
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ctype" << Keyval("key", ctype_Get(row));
        return false;
    }
    // field: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    // insert field into index ind_field
    if (true) { // user-defined insert condition
        bool success = ind_field_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_field"; // check for duplicate key
            return false;
        }
    }
    // insert field into index c_field
    if (true) { // user-defined insert condition
        c_field_Insert(*p_ctype, row);
    }
    return retval;
}

// --- acr_in.FDb.ind_field.Find
// Find row by key. Return NULL if not found.
acr_in::FField* acr_in::ind_field_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_field_buckets_n - 1);
    acr_in::FField* *e = &_db.ind_field_buckets_elems[index];
    acr_in::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).field == key;
        if (done) break;
        e         = &ret->ind_field_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_field.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FField& acr_in::ind_field_FindX(const algo::strptr& key) {
    acr_in::FField* ret = ind_field_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_field  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_field.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_field_InsertMaybe(acr_in::FField& row) {
    ind_field_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_field_next == (acr_in::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        acr_in::FField* *prev = &_db.ind_field_buckets_elems[index];
        do {
            acr_in::FField* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).field == row.field) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_field_next;
        } while (true);
        if (retval) {
            row.ind_field_next = *prev;
            _db.ind_field_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_field.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_field_Remove(acr_in::FField& row) {
    if (LIKELY(row.ind_field_next != (acr_in::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        acr_in::FField* *prev = &_db.ind_field_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_field_next; // unlink (singly linked list)
                _db.ind_field_n--;
                row.ind_field_next = (acr_in::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_field_next;
        }
    }
}

// --- acr_in.FDb.ind_field.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_field_Reserve(int n) {
    u32 old_nbuckets = _db.ind_field_buckets_n;
    u32 new_nelems   = _db.ind_field_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FField*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FField* *new_buckets = (acr_in::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_field");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_field_buckets_n; i++) {
            acr_in::FField* elem = _db.ind_field_buckets_elems[i];
            while (elem) {
                acr_in::FField &row        = *elem;
                acr_in::FField* next       = row.ind_field_next;
                u32 index          = algo::Smallstr100_Hash(0, row.field) & (new_nbuckets-1);
                row.ind_field_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_field_buckets_elems, old_size);
        _db.ind_field_buckets_elems = new_buckets;
        _db.ind_field_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.ctype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FCtype& acr_in::ctype_Alloc() {
    acr_in::FCtype* row = ctype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.ctype  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.ctype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FCtype* acr_in::ctype_AllocMaybe() {
    acr_in::FCtype *row = (acr_in::FCtype*)ctype_AllocMem();
    if (row) {
        new (row) acr_in::FCtype; // call constructor
    }
    return row;
}

// --- acr_in.FDb.ctype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FCtype* acr_in::ctype_InsertMaybe(const dmmeta::Ctype &value) {
    acr_in::FCtype *row = &ctype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ctype_CopyIn(*row,const_cast<dmmeta::Ctype&>(value));
    bool ok = ctype_XrefMaybe(*row); // this may return false
    if (!ok) {
        ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.ctype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::ctype_AllocMem() {
    u64 new_nelems     = _db.ctype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FCtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ctype_lary[bsr];
        if (!lev) {
            lev=(acr_in::FCtype*)algo_lib::malloc_AllocMem(sizeof(acr_in::FCtype) * (u64(1)<<bsr));
            _db.ctype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ctype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.ctype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::ctype_RemoveLast() {
    u64 n = _db.ctype_n;
    if (n > 0) {
        n -= 1;
        ctype_qFind(u64(n)).~FCtype();
        _db.ctype_n = i32(n);
    }
}

// --- acr_in.FDb.ctype.InputMaybe
static bool acr_in::ctype_InputMaybe(dmmeta::Ctype &elem) {
    bool retval = true;
    retval = ctype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.ctype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::ctype_XrefMaybe(acr_in::FCtype &row) {
    bool retval = true;
    (void)row;
    // insert ctype into index ind_ctype
    if (true) { // user-defined insert condition
        bool success = ind_ctype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_ctype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_ctype.Find
// Find row by key. Return NULL if not found.
acr_in::FCtype* acr_in::ind_ctype_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ctype_buckets_n - 1);
    acr_in::FCtype* *e = &_db.ind_ctype_buckets_elems[index];
    acr_in::FCtype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_ctype_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_ctype.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FCtype& acr_in::ind_ctype_FindX(const algo::strptr& key) {
    acr_in::FCtype* ret = ind_ctype_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_ctype  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_ctype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_in::FCtype& acr_in::ind_ctype_GetOrCreate(const algo::strptr& key) {
    acr_in::FCtype* ret = ind_ctype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ctype_Alloc();
        (*ret).ctype = key;
        bool good = ctype_XrefMaybe(*ret);
        if (!good) {
            ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_in.create_error  table:ind_ctype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_in.FDb.ind_ctype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_ctype_InsertMaybe(acr_in::FCtype& row) {
    ind_ctype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ctype_next == (acr_in::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        acr_in::FCtype* *prev = &_db.ind_ctype_buckets_elems[index];
        do {
            acr_in::FCtype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ctype_next;
        } while (true);
        if (retval) {
            row.ind_ctype_next = *prev;
            _db.ind_ctype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_ctype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_ctype_Remove(acr_in::FCtype& row) {
    if (LIKELY(row.ind_ctype_next != (acr_in::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        acr_in::FCtype* *prev = &_db.ind_ctype_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FCtype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ctype_next; // unlink (singly linked list)
                _db.ind_ctype_n--;
                row.ind_ctype_next = (acr_in::FCtype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ctype_next;
        }
    }
}

// --- acr_in.FDb.ind_ctype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_ctype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ctype_buckets_n;
    u32 new_nelems   = _db.ind_ctype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FCtype*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FCtype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FCtype* *new_buckets = (acr_in::FCtype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_ctype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ctype_buckets_n; i++) {
            acr_in::FCtype* elem = _db.ind_ctype_buckets_elems[i];
            while (elem) {
                acr_in::FCtype &row        = *elem;
                acr_in::FCtype* next       = row.ind_ctype_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_ctype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ctype_buckets_elems, old_size);
        _db.ind_ctype_buckets_elems = new_buckets;
        _db.ind_ctype_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.ssimfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FSsimfile& acr_in::ssimfile_Alloc() {
    acr_in::FSsimfile* row = ssimfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.ssimfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.ssimfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FSsimfile* acr_in::ssimfile_AllocMaybe() {
    acr_in::FSsimfile *row = (acr_in::FSsimfile*)ssimfile_AllocMem();
    if (row) {
        new (row) acr_in::FSsimfile; // call constructor
    }
    return row;
}

// --- acr_in.FDb.ssimfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FSsimfile* acr_in::ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) {
    acr_in::FSsimfile *row = &ssimfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ssimfile_CopyIn(*row,const_cast<dmmeta::Ssimfile&>(value));
    bool ok = ssimfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        ssimfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.ssimfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::ssimfile_AllocMem() {
    u64 new_nelems     = _db.ssimfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FSsimfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ssimfile_lary[bsr];
        if (!lev) {
            lev=(acr_in::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(acr_in::FSsimfile) * (u64(1)<<bsr));
            _db.ssimfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ssimfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.ssimfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::ssimfile_RemoveLast() {
    u64 n = _db.ssimfile_n;
    if (n > 0) {
        n -= 1;
        ssimfile_qFind(u64(n)).~FSsimfile();
        _db.ssimfile_n = i32(n);
    }
}

// --- acr_in.FDb.ssimfile.InputMaybe
static bool acr_in::ssimfile_InputMaybe(dmmeta::Ssimfile &elem) {
    bool retval = true;
    retval = ssimfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.ssimfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::ssimfile_XrefMaybe(acr_in::FSsimfile &row) {
    bool retval = true;
    (void)row;
    acr_in::FCtype* p_ctype = acr_in::ind_ctype_Find(row.ctype);
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ctype" << Keyval("key", row.ctype);
        return false;
    }
    // ssimfile: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    // insert ssimfile into index c_ssimfile
    if (true) { // user-defined insert condition
        bool success = c_ssimfile_InsertMaybe(*p_ctype, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FCtype.c_ssimfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ns.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FNs& acr_in::ns_Alloc() {
    acr_in::FNs* row = ns_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.ns  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.ns.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FNs* acr_in::ns_AllocMaybe() {
    acr_in::FNs *row = (acr_in::FNs*)ns_AllocMem();
    if (row) {
        new (row) acr_in::FNs; // call constructor
    }
    return row;
}

// --- acr_in.FDb.ns.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FNs* acr_in::ns_InsertMaybe(const dmmeta::Ns &value) {
    acr_in::FNs *row = &ns_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ns_CopyIn(*row,const_cast<dmmeta::Ns&>(value));
    bool ok = ns_XrefMaybe(*row); // this may return false
    if (!ok) {
        ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.ns.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::ns_AllocMem() {
    u64 new_nelems     = _db.ns_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FNs*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ns_lary[bsr];
        if (!lev) {
            lev=(acr_in::FNs*)algo_lib::malloc_AllocMem(sizeof(acr_in::FNs) * (u64(1)<<bsr));
            _db.ns_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ns_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.ns.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::ns_RemoveLast() {
    u64 n = _db.ns_n;
    if (n > 0) {
        n -= 1;
        ns_qFind(u64(n)).~FNs();
        _db.ns_n = i32(n);
    }
}

// --- acr_in.FDb.ns.InputMaybe
static bool acr_in::ns_InputMaybe(dmmeta::Ns &elem) {
    bool retval = true;
    retval = ns_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.ns.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::ns_XrefMaybe(acr_in::FNs &row) {
    bool retval = true;
    (void)row;
    // insert ns into index ind_ns
    if (true) { // user-defined insert condition
        bool success = ind_ns_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_ns"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_ns.Find
// Find row by key. Return NULL if not found.
acr_in::FNs* acr_in::ind_ns_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_ns_buckets_n - 1);
    acr_in::FNs* *e = &_db.ind_ns_buckets_elems[index];
    acr_in::FNs* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ns == key;
        if (done) break;
        e         = &ret->ind_ns_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_ns.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FNs& acr_in::ind_ns_FindX(const algo::strptr& key) {
    acr_in::FNs* ret = ind_ns_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_ns  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_ns.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_in::FNs& acr_in::ind_ns_GetOrCreate(const algo::strptr& key) {
    acr_in::FNs* ret = ind_ns_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ns_Alloc();
        (*ret).ns = key;
        bool good = ns_XrefMaybe(*ret);
        if (!good) {
            ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_in.create_error  table:ind_ns  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_in.FDb.ind_ns.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_ns_InsertMaybe(acr_in::FNs& row) {
    ind_ns_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ns_next == (acr_in::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        acr_in::FNs* *prev = &_db.ind_ns_buckets_elems[index];
        do {
            acr_in::FNs* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ns == row.ns) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ns_next;
        } while (true);
        if (retval) {
            row.ind_ns_next = *prev;
            _db.ind_ns_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_ns.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_ns_Remove(acr_in::FNs& row) {
    if (LIKELY(row.ind_ns_next != (acr_in::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        acr_in::FNs* *prev = &_db.ind_ns_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FNs *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ns_next; // unlink (singly linked list)
                _db.ind_ns_n--;
                row.ind_ns_next = (acr_in::FNs*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ns_next;
        }
    }
}

// --- acr_in.FDb.ind_ns.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_ns_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ns_buckets_n;
    u32 new_nelems   = _db.ind_ns_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FNs*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FNs*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FNs* *new_buckets = (acr_in::FNs**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_ns");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ns_buckets_n; i++) {
            acr_in::FNs* elem = _db.ind_ns_buckets_elems[i];
            while (elem) {
                acr_in::FNs &row        = *elem;
                acr_in::FNs* next       = row.ind_ns_next;
                u32 index          = algo::Smallstr16_Hash(0, row.ns) & (new_nbuckets-1);
                row.ind_ns_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ns_buckets_elems, old_size);
        _db.ind_ns_buckets_elems = new_buckets;
        _db.ind_ns_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.zd_todo.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_todo_Insert(acr_in::FCtype& row) {
    if (!zd_todo_InLlistQ(row)) {
        acr_in::FCtype* old_tail = _db.zd_todo_tail;
        row.zd_todo_next = NULL;
        row.zd_todo_prev = old_tail;
        _db.zd_todo_tail = &row;
        acr_in::FCtype **new_row_a = &old_tail->zd_todo_next;
        acr_in::FCtype **new_row_b = &_db.zd_todo_head;
        acr_in::FCtype **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_todo_n++;
    }
}

// --- acr_in.FDb.zd_todo.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_todo_Remove(acr_in::FCtype& row) {
    if (zd_todo_InLlistQ(row)) {
        acr_in::FCtype* old_head       = _db.zd_todo_head;
        (void)old_head; // in case it's not used
        acr_in::FCtype* prev = row.zd_todo_prev;
        acr_in::FCtype* next = row.zd_todo_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FCtype **new_next_a = &prev->zd_todo_next;
        acr_in::FCtype **new_next_b = &_db.zd_todo_head;
        acr_in::FCtype **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FCtype **new_prev_a = &next->zd_todo_prev;
        acr_in::FCtype **new_prev_b = &_db.zd_todo_tail;
        acr_in::FCtype **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_todo_n--;
        row.zd_todo_next=(acr_in::FCtype*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_todo.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_todo_RemoveAll() {
    acr_in::FCtype* row = _db.zd_todo_head;
    _db.zd_todo_head = NULL;
    _db.zd_todo_tail = NULL;
    _db.zd_todo_n = 0;
    while (row) {
        acr_in::FCtype* row_next = row->zd_todo_next;
        row->zd_todo_next  = (acr_in::FCtype*)-1;
        row->zd_todo_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_todo.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FCtype* acr_in::zd_todo_RemoveFirst() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_todo_head;
    if (row) {
        acr_in::FCtype *next = row->zd_todo_next;
        _db.zd_todo_head = next;
        acr_in::FCtype **new_end_a = &next->zd_todo_prev;
        acr_in::FCtype **new_end_b = &_db.zd_todo_tail;
        acr_in::FCtype **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_todo_n--;
        row->zd_todo_next = (acr_in::FCtype*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.zd_ssimfile.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_ssimfile_Insert(acr_in::FSsimfile& row) {
    if (!zd_ssimfile_InLlistQ(row)) {
        acr_in::FSsimfile* old_tail = _db.zd_ssimfile_tail;
        row.zd_ssimfile_next = NULL;
        row.zd_ssimfile_prev = old_tail;
        _db.zd_ssimfile_tail = &row;
        acr_in::FSsimfile **new_row_a = &old_tail->zd_ssimfile_next;
        acr_in::FSsimfile **new_row_b = &_db.zd_ssimfile_head;
        acr_in::FSsimfile **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_ssimfile_n++;
    }
}

// --- acr_in.FDb.zd_ssimfile.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_ssimfile_Remove(acr_in::FSsimfile& row) {
    if (zd_ssimfile_InLlistQ(row)) {
        acr_in::FSsimfile* old_head       = _db.zd_ssimfile_head;
        (void)old_head; // in case it's not used
        acr_in::FSsimfile* prev = row.zd_ssimfile_prev;
        acr_in::FSsimfile* next = row.zd_ssimfile_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FSsimfile **new_next_a = &prev->zd_ssimfile_next;
        acr_in::FSsimfile **new_next_b = &_db.zd_ssimfile_head;
        acr_in::FSsimfile **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FSsimfile **new_prev_a = &next->zd_ssimfile_prev;
        acr_in::FSsimfile **new_prev_b = &_db.zd_ssimfile_tail;
        acr_in::FSsimfile **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_ssimfile_n--;
        row.zd_ssimfile_next=(acr_in::FSsimfile*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_ssimfile.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_ssimfile_RemoveAll() {
    acr_in::FSsimfile* row = _db.zd_ssimfile_head;
    _db.zd_ssimfile_head = NULL;
    _db.zd_ssimfile_tail = NULL;
    _db.zd_ssimfile_n = 0;
    while (row) {
        acr_in::FSsimfile* row_next = row->zd_ssimfile_next;
        row->zd_ssimfile_next  = (acr_in::FSsimfile*)-1;
        row->zd_ssimfile_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_ssimfile.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FSsimfile* acr_in::zd_ssimfile_RemoveFirst() {
    acr_in::FSsimfile *row = NULL;
    row = _db.zd_ssimfile_head;
    if (row) {
        acr_in::FSsimfile *next = row->zd_ssimfile_next;
        _db.zd_ssimfile_head = next;
        acr_in::FSsimfile **new_end_a = &next->zd_ssimfile_prev;
        acr_in::FSsimfile **new_end_b = &_db.zd_ssimfile_tail;
        acr_in::FSsimfile **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_ssimfile_n--;
        row->zd_ssimfile_next = (acr_in::FSsimfile*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.substr.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FSubstr& acr_in::substr_Alloc() {
    acr_in::FSubstr* row = substr_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.substr  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.substr.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FSubstr* acr_in::substr_AllocMaybe() {
    acr_in::FSubstr *row = (acr_in::FSubstr*)substr_AllocMem();
    if (row) {
        new (row) acr_in::FSubstr; // call constructor
    }
    return row;
}

// --- acr_in.FDb.substr.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FSubstr* acr_in::substr_InsertMaybe(const dmmeta::Substr &value) {
    acr_in::FSubstr *row = &substr_Alloc(); // if out of memory, process dies. if input error, return NULL.
    substr_CopyIn(*row,const_cast<dmmeta::Substr&>(value));
    bool ok = substr_XrefMaybe(*row); // this may return false
    if (!ok) {
        substr_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.substr.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::substr_AllocMem() {
    u64 new_nelems     = _db.substr_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FSubstr*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.substr_lary[bsr];
        if (!lev) {
            lev=(acr_in::FSubstr*)algo_lib::malloc_AllocMem(sizeof(acr_in::FSubstr) * (u64(1)<<bsr));
            _db.substr_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.substr_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.substr.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::substr_RemoveLast() {
    u64 n = _db.substr_n;
    if (n > 0) {
        n -= 1;
        substr_qFind(u64(n)).~FSubstr();
        _db.substr_n = i32(n);
    }
}

// --- acr_in.FDb.substr.InputMaybe
static bool acr_in::substr_InputMaybe(dmmeta::Substr &elem) {
    bool retval = true;
    retval = substr_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.substr.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::substr_XrefMaybe(acr_in::FSubstr &row) {
    bool retval = true;
    (void)row;
    acr_in::FField* p_field = acr_in::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert substr into index c_substr
    if (true) { // user-defined insert condition
        bool success = c_substr_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FField.c_substr"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.dispsig.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FDispsig& acr_in::dispsig_Alloc() {
    acr_in::FDispsig* row = dispsig_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.dispsig  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.dispsig.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FDispsig* acr_in::dispsig_AllocMaybe() {
    acr_in::FDispsig *row = (acr_in::FDispsig*)dispsig_AllocMem();
    if (row) {
        new (row) acr_in::FDispsig; // call constructor
    }
    return row;
}

// --- acr_in.FDb.dispsig.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FDispsig* acr_in::dispsig_InsertMaybe(const dmmeta::Dispsig &value) {
    acr_in::FDispsig *row = &dispsig_Alloc(); // if out of memory, process dies. if input error, return NULL.
    dispsig_CopyIn(*row,const_cast<dmmeta::Dispsig&>(value));
    bool ok = dispsig_XrefMaybe(*row); // this may return false
    if (!ok) {
        dispsig_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.dispsig.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::dispsig_AllocMem() {
    u64 new_nelems     = _db.dispsig_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FDispsig*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.dispsig_lary[bsr];
        if (!lev) {
            lev=(acr_in::FDispsig*)algo_lib::malloc_AllocMem(sizeof(acr_in::FDispsig) * (u64(1)<<bsr));
            _db.dispsig_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.dispsig_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.dispsig.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::dispsig_RemoveLast() {
    u64 n = _db.dispsig_n;
    if (n > 0) {
        n -= 1;
        dispsig_qFind(u64(n)).~FDispsig();
        _db.dispsig_n = i32(n);
    }
}

// --- acr_in.FDb.dispsig.InputMaybe
static bool acr_in::dispsig_InputMaybe(dmmeta::Dispsig &elem) {
    bool retval = true;
    retval = dispsig_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.dispsig.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::dispsig_XrefMaybe(acr_in::FDispsig &row) {
    bool retval = true;
    (void)row;
    acr_in::FNs* p_ns = acr_in::ind_ns_Find(ns_Get(row));
    if (UNLIKELY(!p_ns)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ns" << Keyval("key", ns_Get(row));
        return false;
    }
    // dispsig: save pointer to ns
    if (true) { // user-defined insert condition
        row.p_ns = p_ns;
    }
    // insert dispsig into index ind_dispsig
    if (true) { // user-defined insert condition
        bool success = ind_dispsig_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_dispsig"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_dispsig.Find
// Find row by key. Return NULL if not found.
acr_in::FDispsig* acr_in::ind_dispsig_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_dispsig_buckets_n - 1);
    acr_in::FDispsig* *e = &_db.ind_dispsig_buckets_elems[index];
    acr_in::FDispsig* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).dispsig == key;
        if (done) break;
        e         = &ret->ind_dispsig_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_dispsig.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FDispsig& acr_in::ind_dispsig_FindX(const algo::strptr& key) {
    acr_in::FDispsig* ret = ind_dispsig_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_dispsig  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_dispsig.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_dispsig_InsertMaybe(acr_in::FDispsig& row) {
    ind_dispsig_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_dispsig_next == (acr_in::FDispsig*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.dispsig) & (_db.ind_dispsig_buckets_n - 1);
        acr_in::FDispsig* *prev = &_db.ind_dispsig_buckets_elems[index];
        do {
            acr_in::FDispsig* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).dispsig == row.dispsig) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_dispsig_next;
        } while (true);
        if (retval) {
            row.ind_dispsig_next = *prev;
            _db.ind_dispsig_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_dispsig.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_dispsig_Remove(acr_in::FDispsig& row) {
    if (LIKELY(row.ind_dispsig_next != (acr_in::FDispsig*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.dispsig) & (_db.ind_dispsig_buckets_n - 1);
        acr_in::FDispsig* *prev = &_db.ind_dispsig_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FDispsig *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_dispsig_next; // unlink (singly linked list)
                _db.ind_dispsig_n--;
                row.ind_dispsig_next = (acr_in::FDispsig*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_dispsig_next;
        }
    }
}

// --- acr_in.FDb.ind_dispsig.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_dispsig_Reserve(int n) {
    u32 old_nbuckets = _db.ind_dispsig_buckets_n;
    u32 new_nelems   = _db.ind_dispsig_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FDispsig*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FDispsig*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FDispsig* *new_buckets = (acr_in::FDispsig**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_dispsig");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_dispsig_buckets_n; i++) {
            acr_in::FDispsig* elem = _db.ind_dispsig_buckets_elems[i];
            while (elem) {
                acr_in::FDispsig &row        = *elem;
                acr_in::FDispsig* next       = row.ind_dispsig_next;
                u32 index          = algo::Smallstr50_Hash(0, row.dispsig) & (new_nbuckets-1);
                row.ind_dispsig_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_dispsig_buckets_elems, old_size);
        _db.ind_dispsig_buckets_elems = new_buckets;
        _db.ind_dispsig_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.zd_select.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_select_Insert(acr_in::FTuple& row) {
    if (!zd_select_InLlistQ(row)) {
        acr_in::FTuple* old_tail = _db.zd_select_tail;
        row.zd_select_next = NULL;
        row.zd_select_prev = old_tail;
        _db.zd_select_tail = &row;
        acr_in::FTuple **new_row_a = &old_tail->zd_select_next;
        acr_in::FTuple **new_row_b = &_db.zd_select_head;
        acr_in::FTuple **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_select_n++;
    }
}

// --- acr_in.FDb.zd_select.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_select_Remove(acr_in::FTuple& row) {
    if (zd_select_InLlistQ(row)) {
        acr_in::FTuple* old_head       = _db.zd_select_head;
        (void)old_head; // in case it's not used
        acr_in::FTuple* prev = row.zd_select_prev;
        acr_in::FTuple* next = row.zd_select_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FTuple **new_next_a = &prev->zd_select_next;
        acr_in::FTuple **new_next_b = &_db.zd_select_head;
        acr_in::FTuple **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FTuple **new_prev_a = &next->zd_select_prev;
        acr_in::FTuple **new_prev_b = &_db.zd_select_tail;
        acr_in::FTuple **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_select_n--;
        row.zd_select_next=(acr_in::FTuple*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_select.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_select_RemoveAll() {
    acr_in::FTuple* row = _db.zd_select_head;
    _db.zd_select_head = NULL;
    _db.zd_select_tail = NULL;
    _db.zd_select_n = 0;
    while (row) {
        acr_in::FTuple* row_next = row->zd_select_next;
        row->zd_select_next  = (acr_in::FTuple*)-1;
        row->zd_select_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_select.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FTuple* acr_in::zd_select_RemoveFirst() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_select_head;
    if (row) {
        acr_in::FTuple *next = row->zd_select_next;
        _db.zd_select_head = next;
        acr_in::FTuple **new_end_a = &next->zd_select_prev;
        acr_in::FTuple **new_end_b = &_db.zd_select_tail;
        acr_in::FTuple **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_select_n--;
        row->zd_select_next = (acr_in::FTuple*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.zd_deselect.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_deselect_Insert(acr_in::FTuple& row) {
    if (!zd_deselect_InLlistQ(row)) {
        acr_in::FTuple* old_tail = _db.zd_deselect_tail;
        row.zd_deselect_next = NULL;
        row.zd_deselect_prev = old_tail;
        _db.zd_deselect_tail = &row;
        acr_in::FTuple **new_row_a = &old_tail->zd_deselect_next;
        acr_in::FTuple **new_row_b = &_db.zd_deselect_head;
        acr_in::FTuple **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_deselect_n++;
    }
}

// --- acr_in.FDb.zd_deselect.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_deselect_Remove(acr_in::FTuple& row) {
    if (zd_deselect_InLlistQ(row)) {
        acr_in::FTuple* old_head       = _db.zd_deselect_head;
        (void)old_head; // in case it's not used
        acr_in::FTuple* prev = row.zd_deselect_prev;
        acr_in::FTuple* next = row.zd_deselect_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FTuple **new_next_a = &prev->zd_deselect_next;
        acr_in::FTuple **new_next_b = &_db.zd_deselect_head;
        acr_in::FTuple **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FTuple **new_prev_a = &next->zd_deselect_prev;
        acr_in::FTuple **new_prev_b = &_db.zd_deselect_tail;
        acr_in::FTuple **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_deselect_n--;
        row.zd_deselect_next=(acr_in::FTuple*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_deselect.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_deselect_RemoveAll() {
    acr_in::FTuple* row = _db.zd_deselect_head;
    _db.zd_deselect_head = NULL;
    _db.zd_deselect_tail = NULL;
    _db.zd_deselect_n = 0;
    while (row) {
        acr_in::FTuple* row_next = row->zd_deselect_next;
        row->zd_deselect_next  = (acr_in::FTuple*)-1;
        row->zd_deselect_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_deselect.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FTuple* acr_in::zd_deselect_RemoveFirst() {
    acr_in::FTuple *row = NULL;
    row = _db.zd_deselect_head;
    if (row) {
        acr_in::FTuple *next = row->zd_deselect_next;
        _db.zd_deselect_head = next;
        acr_in::FTuple **new_end_a = &next->zd_deselect_prev;
        acr_in::FTuple **new_end_b = &_db.zd_deselect_tail;
        acr_in::FTuple **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_deselect_n--;
        row->zd_deselect_next = (acr_in::FTuple*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.zd_related.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_related_Insert(acr_in::FCtype& row) {
    if (!zd_related_InLlistQ(row)) {
        acr_in::FCtype* old_tail = _db.zd_related_tail;
        row.zd_related_next = NULL;
        row.zd_related_prev = old_tail;
        _db.zd_related_tail = &row;
        acr_in::FCtype **new_row_a = &old_tail->zd_related_next;
        acr_in::FCtype **new_row_b = &_db.zd_related_head;
        acr_in::FCtype **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_related_n++;
    }
}

// --- acr_in.FDb.zd_related.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_related_Remove(acr_in::FCtype& row) {
    if (zd_related_InLlistQ(row)) {
        acr_in::FCtype* old_head       = _db.zd_related_head;
        (void)old_head; // in case it's not used
        acr_in::FCtype* prev = row.zd_related_prev;
        acr_in::FCtype* next = row.zd_related_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FCtype **new_next_a = &prev->zd_related_next;
        acr_in::FCtype **new_next_b = &_db.zd_related_head;
        acr_in::FCtype **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FCtype **new_prev_a = &next->zd_related_prev;
        acr_in::FCtype **new_prev_b = &_db.zd_related_tail;
        acr_in::FCtype **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_related_n--;
        row.zd_related_next=(acr_in::FCtype*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_related.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_related_RemoveAll() {
    acr_in::FCtype* row = _db.zd_related_head;
    _db.zd_related_head = NULL;
    _db.zd_related_tail = NULL;
    _db.zd_related_n = 0;
    while (row) {
        acr_in::FCtype* row_next = row->zd_related_next;
        row->zd_related_next  = (acr_in::FCtype*)-1;
        row->zd_related_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_related.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FCtype* acr_in::zd_related_RemoveFirst() {
    acr_in::FCtype *row = NULL;
    row = _db.zd_related_head;
    if (row) {
        acr_in::FCtype *next = row->zd_related_next;
        _db.zd_related_head = next;
        acr_in::FCtype **new_end_a = &next->zd_related_prev;
        acr_in::FCtype **new_end_b = &_db.zd_related_tail;
        acr_in::FCtype **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_related_n--;
        row->zd_related_next = (acr_in::FCtype*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.ind_finput.Find
// Find row by key. Return NULL if not found.
acr_in::FFinput* acr_in::ind_finput_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_finput_buckets_n - 1);
    acr_in::FFinput* *e = &_db.ind_finput_buckets_elems[index];
    acr_in::FFinput* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).field == key;
        if (done) break;
        e         = &ret->ind_finput_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_finput.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FFinput& acr_in::ind_finput_FindX(const algo::strptr& key) {
    acr_in::FFinput* ret = ind_finput_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_finput  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_finput.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_finput_InsertMaybe(acr_in::FFinput& row) {
    ind_finput_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_finput_next == (acr_in::FFinput*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_finput_buckets_n - 1);
        acr_in::FFinput* *prev = &_db.ind_finput_buckets_elems[index];
        do {
            acr_in::FFinput* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).field == row.field) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_finput_next;
        } while (true);
        if (retval) {
            row.ind_finput_next = *prev;
            _db.ind_finput_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_finput.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_finput_Remove(acr_in::FFinput& row) {
    if (LIKELY(row.ind_finput_next != (acr_in::FFinput*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_finput_buckets_n - 1);
        acr_in::FFinput* *prev = &_db.ind_finput_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FFinput *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_finput_next; // unlink (singly linked list)
                _db.ind_finput_n--;
                row.ind_finput_next = (acr_in::FFinput*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_finput_next;
        }
    }
}

// --- acr_in.FDb.ind_finput.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_finput_Reserve(int n) {
    u32 old_nbuckets = _db.ind_finput_buckets_n;
    u32 new_nelems   = _db.ind_finput_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FFinput*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FFinput*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FFinput* *new_buckets = (acr_in::FFinput**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_finput");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_finput_buckets_n; i++) {
            acr_in::FFinput* elem = _db.ind_finput_buckets_elems[i];
            while (elem) {
                acr_in::FFinput &row        = *elem;
                acr_in::FFinput* next       = row.ind_finput_next;
                u32 index          = algo::Smallstr100_Hash(0, row.field) & (new_nbuckets-1);
                row.ind_finput_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_finput_buckets_elems, old_size);
        _db.ind_finput_buckets_elems = new_buckets;
        _db.ind_finput_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.target.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FTarget& acr_in::target_Alloc() {
    acr_in::FTarget* row = target_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.target  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.target.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FTarget* acr_in::target_AllocMaybe() {
    acr_in::FTarget *row = (acr_in::FTarget*)target_AllocMem();
    if (row) {
        new (row) acr_in::FTarget; // call constructor
    }
    return row;
}

// --- acr_in.FDb.target.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FTarget* acr_in::target_InsertMaybe(const dev::Target &value) {
    acr_in::FTarget *row = &target_Alloc(); // if out of memory, process dies. if input error, return NULL.
    target_CopyIn(*row,const_cast<dev::Target&>(value));
    bool ok = target_XrefMaybe(*row); // this may return false
    if (!ok) {
        target_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.target.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::target_AllocMem() {
    u64 new_nelems     = _db.target_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FTarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.target_lary[bsr];
        if (!lev) {
            lev=(acr_in::FTarget*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTarget) * (u64(1)<<bsr));
            _db.target_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.target_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.target.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::target_RemoveLast() {
    u64 n = _db.target_n;
    if (n > 0) {
        n -= 1;
        target_qFind(u64(n)).~FTarget();
        _db.target_n = i32(n);
    }
}

// --- acr_in.FDb.target.InputMaybe
static bool acr_in::target_InputMaybe(dev::Target &elem) {
    bool retval = true;
    retval = target_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.target.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::target_XrefMaybe(acr_in::FTarget &row) {
    bool retval = true;
    (void)row;
    acr_in::FNs* p_target = acr_in::ind_ns_Find(row.target);
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_ns" << Keyval("key", row.target);
        return false;
    }
    // target: save pointer to target
    if (true) { // user-defined insert condition
        row.p_ns = p_target;
    }
    // insert target into index ind_target
    if (true) { // user-defined insert condition
        bool success = ind_target_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FDb.ind_target"; // check for duplicate key
            return false;
        }
    }
    // insert target into index c_target
    if (true) { // user-defined insert condition
        bool success = c_target_InsertMaybe(*p_target, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_in.duplicate_key  xref:acr_in.FNs.c_target"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_target.Find
// Find row by key. Return NULL if not found.
acr_in::FTarget* acr_in::ind_target_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_target_buckets_n - 1);
    acr_in::FTarget* *e = &_db.ind_target_buckets_elems[index];
    acr_in::FTarget* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_target_next;
    } while (true);
    return ret;
}

// --- acr_in.FDb.ind_target.FindX
// Look up row by key and return reference. Throw exception if not found
acr_in::FTarget& acr_in::ind_target_FindX(const algo::strptr& key) {
    acr_in::FTarget* ret = ind_target_Find(key);
    vrfy(ret, tempstr() << "acr_in.key_error  table:ind_target  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_in.FDb.ind_target.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_in::ind_target_InsertMaybe(acr_in::FTarget& row) {
    ind_target_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_target_next == (acr_in::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        acr_in::FTarget* *prev = &_db.ind_target_buckets_elems[index];
        do {
            acr_in::FTarget* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_target_next;
        } while (true);
        if (retval) {
            row.ind_target_next = *prev;
            _db.ind_target_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_in.FDb.ind_target.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_in::ind_target_Remove(acr_in::FTarget& row) {
    if (LIKELY(row.ind_target_next != (acr_in::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        acr_in::FTarget* *prev = &_db.ind_target_buckets_elems[index]; // addr of pointer to current element
        while (acr_in::FTarget *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_target_next; // unlink (singly linked list)
                _db.ind_target_n--;
                row.ind_target_next = (acr_in::FTarget*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_target_next;
        }
    }
}

// --- acr_in.FDb.ind_target.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_in::ind_target_Reserve(int n) {
    u32 old_nbuckets = _db.ind_target_buckets_n;
    u32 new_nelems   = _db.ind_target_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_in::FTarget*);
        u32 new_size = new_nbuckets * sizeof(acr_in::FTarget*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_in::FTarget* *new_buckets = (acr_in::FTarget**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FDb.ind_target");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_target_buckets_n; i++) {
            acr_in::FTarget* elem = _db.ind_target_buckets_elems[i];
            while (elem) {
                acr_in::FTarget &row        = *elem;
                acr_in::FTarget* next       = row.ind_target_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_target_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_target_buckets_elems, old_size);
        _db.ind_target_buckets_elems = new_buckets;
        _db.ind_target_buckets_n = new_nbuckets;
    }
}

// --- acr_in.FDb.targdep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_in::FTargdep& acr_in::targdep_Alloc() {
    acr_in::FTargdep* row = targdep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_in.out_of_mem  field:acr_in.FDb.targdep  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_in.FDb.targdep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_in::FTargdep* acr_in::targdep_AllocMaybe() {
    acr_in::FTargdep *row = (acr_in::FTargdep*)targdep_AllocMem();
    if (row) {
        new (row) acr_in::FTargdep; // call constructor
    }
    return row;
}

// --- acr_in.FDb.targdep.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
acr_in::FTargdep* acr_in::targdep_InsertMaybe(const dev::Targdep &value) {
    acr_in::FTargdep *row = &targdep_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targdep_CopyIn(*row,const_cast<dev::Targdep&>(value));
    bool ok = targdep_XrefMaybe(*row); // this may return false
    if (!ok) {
        targdep_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- acr_in.FDb.targdep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_in::targdep_AllocMem() {
    u64 new_nelems     = _db.targdep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_in::FTargdep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targdep_lary[bsr];
        if (!lev) {
            lev=(acr_in::FTargdep*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTargdep) * (u64(1)<<bsr));
            _db.targdep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targdep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_in.FDb.targdep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_in::targdep_RemoveLast() {
    u64 n = _db.targdep_n;
    if (n > 0) {
        n -= 1;
        targdep_qFind(u64(n)).~FTargdep();
        _db.targdep_n = i32(n);
    }
}

// --- acr_in.FDb.targdep.InputMaybe
static bool acr_in::targdep_InputMaybe(dev::Targdep &elem) {
    bool retval = true;
    retval = targdep_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- acr_in.FDb.targdep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_in::targdep_XrefMaybe(acr_in::FTargdep &row) {
    bool retval = true;
    (void)row;
    acr_in::FTarget* p_parent = acr_in::ind_target_Find(parent_Get(row));
    if (UNLIKELY(!p_parent)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_target" << Keyval("key", parent_Get(row));
        return false;
    }
    // targdep: save pointer to parent
    if (true) { // user-defined insert condition
        row.p_parent = p_parent;
    }
    acr_in::FTarget* p_target = acr_in::ind_target_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "acr_in.bad_xref  index:acr_in.FDb.ind_target" << Keyval("key", target_Get(row));
        return false;
    }
    // insert targdep into index c_targdep
    if (true) { // user-defined insert condition
        c_targdep_Insert(*p_target, row);
    }
    return retval;
}

// --- acr_in.FDb.zd_targ_visit.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_in::zd_targ_visit_Insert(acr_in::FTarget& row) {
    if (!zd_targ_visit_InLlistQ(row)) {
        acr_in::FTarget* old_tail = _db.zd_targ_visit_tail;
        row.zd_targ_visit_next = NULL;
        row.zd_targ_visit_prev = old_tail;
        _db.zd_targ_visit_tail = &row;
        acr_in::FTarget **new_row_a = &old_tail->zd_targ_visit_next;
        acr_in::FTarget **new_row_b = &_db.zd_targ_visit_head;
        acr_in::FTarget **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_targ_visit_n++;
    }
}

// --- acr_in.FDb.zd_targ_visit.Remove
// Remove element from index. If element is not in index, do nothing.
void acr_in::zd_targ_visit_Remove(acr_in::FTarget& row) {
    if (zd_targ_visit_InLlistQ(row)) {
        acr_in::FTarget* old_head       = _db.zd_targ_visit_head;
        (void)old_head; // in case it's not used
        acr_in::FTarget* prev = row.zd_targ_visit_prev;
        acr_in::FTarget* next = row.zd_targ_visit_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        acr_in::FTarget **new_next_a = &prev->zd_targ_visit_next;
        acr_in::FTarget **new_next_b = &_db.zd_targ_visit_head;
        acr_in::FTarget **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        acr_in::FTarget **new_prev_a = &next->zd_targ_visit_prev;
        acr_in::FTarget **new_prev_b = &_db.zd_targ_visit_tail;
        acr_in::FTarget **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_targ_visit_n--;
        row.zd_targ_visit_next=(acr_in::FTarget*)-1; // not-in-list
    }
}

// --- acr_in.FDb.zd_targ_visit.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_in::zd_targ_visit_RemoveAll() {
    acr_in::FTarget* row = _db.zd_targ_visit_head;
    _db.zd_targ_visit_head = NULL;
    _db.zd_targ_visit_tail = NULL;
    _db.zd_targ_visit_n = 0;
    while (row) {
        acr_in::FTarget* row_next = row->zd_targ_visit_next;
        row->zd_targ_visit_next  = (acr_in::FTarget*)-1;
        row->zd_targ_visit_prev  = NULL;
        row = row_next;
    }
}

// --- acr_in.FDb.zd_targ_visit.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_in::FTarget* acr_in::zd_targ_visit_RemoveFirst() {
    acr_in::FTarget *row = NULL;
    row = _db.zd_targ_visit_head;
    if (row) {
        acr_in::FTarget *next = row->zd_targ_visit_next;
        _db.zd_targ_visit_head = next;
        acr_in::FTarget **new_end_a = &next->zd_targ_visit_prev;
        acr_in::FTarget **new_end_b = &_db.zd_targ_visit_tail;
        acr_in::FTarget **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_targ_visit_n--;
        row->zd_targ_visit_next = (acr_in::FTarget*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_in.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr acr_in::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- acr_in.FDb.trace.N
// Function return 1
inline static i32 acr_in::trace_N() {
    return 1;
}

// --- acr_in.FDb..Init
// Set all fields to initial values.
void acr_in::FDb_Init() {
    // initialize LAry tuple (acr_in.FDb.tuple)
    _db.tuple_n = 0;
    memset(_db.tuple_lary, 0, sizeof(_db.tuple_lary)); // zero out all level pointers
    acr_in::FTuple* tuple_first = (acr_in::FTuple*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTuple) * (u64(1)<<4));
    if (!tuple_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.tuple_lary[i]  = tuple_first;
        tuple_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FTuple;
    _db.ind_tuple_n             	= 0; // (acr_in.FDb.ind_tuple)
    _db.ind_tuple_buckets_n     	= 4; // (acr_in.FDb.ind_tuple)
    _db.ind_tuple_buckets_elems 	= (acr_in::FTuple**)algo_lib::malloc_AllocMem(sizeof(acr_in::FTuple*)*_db.ind_tuple_buckets_n); // initial buckets (acr_in.FDb.ind_tuple)
    if (!_db.ind_tuple_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_tuple)
    }
    memset(_db.ind_tuple_buckets_elems, 0, sizeof(acr_in::FTuple*)*_db.ind_tuple_buckets_n); // (acr_in.FDb.ind_tuple)
    // initialize LAry finput (acr_in.FDb.finput)
    _db.finput_n = 0;
    memset(_db.finput_lary, 0, sizeof(_db.finput_lary)); // zero out all level pointers
    acr_in::FFinput* finput_first = (acr_in::FFinput*)algo_lib::malloc_AllocMem(sizeof(acr_in::FFinput) * (u64(1)<<4));
    if (!finput_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.finput_lary[i]  = finput_first;
        finput_first    += 1ULL<<i;
    }
    // initialize LAry field (acr_in.FDb.field)
    _db.field_n = 0;
    memset(_db.field_lary, 0, sizeof(_db.field_lary)); // zero out all level pointers
    acr_in::FField* field_first = (acr_in::FField*)algo_lib::malloc_AllocMem(sizeof(acr_in::FField) * (u64(1)<<4));
    if (!field_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.field_lary[i]  = field_first;
        field_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FField;
    _db.ind_field_n             	= 0; // (acr_in.FDb.ind_field)
    _db.ind_field_buckets_n     	= 4; // (acr_in.FDb.ind_field)
    _db.ind_field_buckets_elems 	= (acr_in::FField**)algo_lib::malloc_AllocMem(sizeof(acr_in::FField*)*_db.ind_field_buckets_n); // initial buckets (acr_in.FDb.ind_field)
    if (!_db.ind_field_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_field)
    }
    memset(_db.ind_field_buckets_elems, 0, sizeof(acr_in::FField*)*_db.ind_field_buckets_n); // (acr_in.FDb.ind_field)
    // initialize LAry ctype (acr_in.FDb.ctype)
    _db.ctype_n = 0;
    memset(_db.ctype_lary, 0, sizeof(_db.ctype_lary)); // zero out all level pointers
    acr_in::FCtype* ctype_first = (acr_in::FCtype*)algo_lib::malloc_AllocMem(sizeof(acr_in::FCtype) * (u64(1)<<4));
    if (!ctype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ctype_lary[i]  = ctype_first;
        ctype_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FCtype;
    _db.ind_ctype_n             	= 0; // (acr_in.FDb.ind_ctype)
    _db.ind_ctype_buckets_n     	= 4; // (acr_in.FDb.ind_ctype)
    _db.ind_ctype_buckets_elems 	= (acr_in::FCtype**)algo_lib::malloc_AllocMem(sizeof(acr_in::FCtype*)*_db.ind_ctype_buckets_n); // initial buckets (acr_in.FDb.ind_ctype)
    if (!_db.ind_ctype_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_ctype)
    }
    memset(_db.ind_ctype_buckets_elems, 0, sizeof(acr_in::FCtype*)*_db.ind_ctype_buckets_n); // (acr_in.FDb.ind_ctype)
    // initialize LAry ssimfile (acr_in.FDb.ssimfile)
    _db.ssimfile_n = 0;
    memset(_db.ssimfile_lary, 0, sizeof(_db.ssimfile_lary)); // zero out all level pointers
    acr_in::FSsimfile* ssimfile_first = (acr_in::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(acr_in::FSsimfile) * (u64(1)<<4));
    if (!ssimfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ssimfile_lary[i]  = ssimfile_first;
        ssimfile_first    += 1ULL<<i;
    }
    // initialize LAry ns (acr_in.FDb.ns)
    _db.ns_n = 0;
    memset(_db.ns_lary, 0, sizeof(_db.ns_lary)); // zero out all level pointers
    acr_in::FNs* ns_first = (acr_in::FNs*)algo_lib::malloc_AllocMem(sizeof(acr_in::FNs) * (u64(1)<<4));
    if (!ns_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ns_lary[i]  = ns_first;
        ns_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FNs;
    _db.ind_ns_n             	= 0; // (acr_in.FDb.ind_ns)
    _db.ind_ns_buckets_n     	= 4; // (acr_in.FDb.ind_ns)
    _db.ind_ns_buckets_elems 	= (acr_in::FNs**)algo_lib::malloc_AllocMem(sizeof(acr_in::FNs*)*_db.ind_ns_buckets_n); // initial buckets (acr_in.FDb.ind_ns)
    if (!_db.ind_ns_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_ns)
    }
    memset(_db.ind_ns_buckets_elems, 0, sizeof(acr_in::FNs*)*_db.ind_ns_buckets_n); // (acr_in.FDb.ind_ns)
    _db.zd_todo_head = NULL; // (acr_in.FDb.zd_todo)
    _db.zd_todo_n = 0; // (acr_in.FDb.zd_todo)
    _db.zd_todo_tail = NULL; // (acr_in.FDb.zd_todo)
    _db.zd_ssimfile_head = NULL; // (acr_in.FDb.zd_ssimfile)
    _db.zd_ssimfile_n = 0; // (acr_in.FDb.zd_ssimfile)
    _db.zd_ssimfile_tail = NULL; // (acr_in.FDb.zd_ssimfile)
    // initialize LAry substr (acr_in.FDb.substr)
    _db.substr_n = 0;
    memset(_db.substr_lary, 0, sizeof(_db.substr_lary)); // zero out all level pointers
    acr_in::FSubstr* substr_first = (acr_in::FSubstr*)algo_lib::malloc_AllocMem(sizeof(acr_in::FSubstr) * (u64(1)<<4));
    if (!substr_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.substr_lary[i]  = substr_first;
        substr_first    += 1ULL<<i;
    }
    // initialize LAry dispsig (acr_in.FDb.dispsig)
    _db.dispsig_n = 0;
    memset(_db.dispsig_lary, 0, sizeof(_db.dispsig_lary)); // zero out all level pointers
    acr_in::FDispsig* dispsig_first = (acr_in::FDispsig*)algo_lib::malloc_AllocMem(sizeof(acr_in::FDispsig) * (u64(1)<<4));
    if (!dispsig_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.dispsig_lary[i]  = dispsig_first;
        dispsig_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FDispsig;
    _db.ind_dispsig_n             	= 0; // (acr_in.FDb.ind_dispsig)
    _db.ind_dispsig_buckets_n     	= 4; // (acr_in.FDb.ind_dispsig)
    _db.ind_dispsig_buckets_elems 	= (acr_in::FDispsig**)algo_lib::malloc_AllocMem(sizeof(acr_in::FDispsig*)*_db.ind_dispsig_buckets_n); // initial buckets (acr_in.FDb.ind_dispsig)
    if (!_db.ind_dispsig_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_dispsig)
    }
    memset(_db.ind_dispsig_buckets_elems, 0, sizeof(acr_in::FDispsig*)*_db.ind_dispsig_buckets_n); // (acr_in.FDb.ind_dispsig)
    _db.zd_select_head = NULL; // (acr_in.FDb.zd_select)
    _db.zd_select_n = 0; // (acr_in.FDb.zd_select)
    _db.zd_select_tail = NULL; // (acr_in.FDb.zd_select)
    _db.zd_deselect_head = NULL; // (acr_in.FDb.zd_deselect)
    _db.zd_deselect_n = 0; // (acr_in.FDb.zd_deselect)
    _db.zd_deselect_tail = NULL; // (acr_in.FDb.zd_deselect)
    _db.zd_related_head = NULL; // (acr_in.FDb.zd_related)
    _db.zd_related_n = 0; // (acr_in.FDb.zd_related)
    _db.zd_related_tail = NULL; // (acr_in.FDb.zd_related)
    // initialize hash table for acr_in::FFinput;
    _db.ind_finput_n             	= 0; // (acr_in.FDb.ind_finput)
    _db.ind_finput_buckets_n     	= 4; // (acr_in.FDb.ind_finput)
    _db.ind_finput_buckets_elems 	= (acr_in::FFinput**)algo_lib::malloc_AllocMem(sizeof(acr_in::FFinput*)*_db.ind_finput_buckets_n); // initial buckets (acr_in.FDb.ind_finput)
    if (!_db.ind_finput_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_finput)
    }
    memset(_db.ind_finput_buckets_elems, 0, sizeof(acr_in::FFinput*)*_db.ind_finput_buckets_n); // (acr_in.FDb.ind_finput)
    // initialize LAry target (acr_in.FDb.target)
    _db.target_n = 0;
    memset(_db.target_lary, 0, sizeof(_db.target_lary)); // zero out all level pointers
    acr_in::FTarget* target_first = (acr_in::FTarget*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTarget) * (u64(1)<<4));
    if (!target_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.target_lary[i]  = target_first;
        target_first    += 1ULL<<i;
    }
    // initialize hash table for acr_in::FTarget;
    _db.ind_target_n             	= 0; // (acr_in.FDb.ind_target)
    _db.ind_target_buckets_n     	= 4; // (acr_in.FDb.ind_target)
    _db.ind_target_buckets_elems 	= (acr_in::FTarget**)algo_lib::malloc_AllocMem(sizeof(acr_in::FTarget*)*_db.ind_target_buckets_n); // initial buckets (acr_in.FDb.ind_target)
    if (!_db.ind_target_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_in.FDb.ind_target)
    }
    memset(_db.ind_target_buckets_elems, 0, sizeof(acr_in::FTarget*)*_db.ind_target_buckets_n); // (acr_in.FDb.ind_target)
    // initialize LAry targdep (acr_in.FDb.targdep)
    _db.targdep_n = 0;
    memset(_db.targdep_lary, 0, sizeof(_db.targdep_lary)); // zero out all level pointers
    acr_in::FTargdep* targdep_first = (acr_in::FTargdep*)algo_lib::malloc_AllocMem(sizeof(acr_in::FTargdep) * (u64(1)<<4));
    if (!targdep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targdep_lary[i]  = targdep_first;
        targdep_first    += 1ULL<<i;
    }
    _db.zd_targ_visit_head = NULL; // (acr_in.FDb.zd_targ_visit)
    _db.zd_targ_visit_n = 0; // (acr_in.FDb.zd_targ_visit)
    _db.zd_targ_visit_tail = NULL; // (acr_in.FDb.zd_targ_visit)

    acr_in::InitReflection();
}

// --- acr_in.FDb..Uninit
void acr_in::FDb_Uninit() {
    acr_in::FDb &row = _db; (void)row;

    // acr_in.FDb.targdep.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_target.Uninit (Thash)  //
    // skip destruction of ind_target in global scope

    // acr_in.FDb.target.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_finput.Uninit (Thash)  //
    // skip destruction of ind_finput in global scope

    // acr_in.FDb.ind_dispsig.Uninit (Thash)  //
    // skip destruction of ind_dispsig in global scope

    // acr_in.FDb.dispsig.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.substr.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_ns.Uninit (Thash)  //
    // skip destruction of ind_ns in global scope

    // acr_in.FDb.ns.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ssimfile.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_ctype.Uninit (Thash)  //
    // skip destruction of ind_ctype in global scope

    // acr_in.FDb.ctype.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_field.Uninit (Thash)  //
    // skip destruction of ind_field in global scope

    // acr_in.FDb.field.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.finput.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_in.FDb.ind_tuple.Uninit (Thash)  //
    // skip destruction of ind_tuple in global scope

    // acr_in.FDb.tuple.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- acr_in.FDispsig.msghdr.CopyOut
// Copy fields out of row
void acr_in::dispsig_CopyOut(acr_in::FDispsig &row, dmmeta::Dispsig &out) {
    out.dispsig = row.dispsig;
    out.signature = row.signature;
}

// --- acr_in.FDispsig.msghdr.CopyIn
// Copy fields in to row
void acr_in::dispsig_CopyIn(acr_in::FDispsig &row, dmmeta::Dispsig &in) {
    row.dispsig = in.dispsig;
    row.signature = in.signature;
}

// --- acr_in.FDispsig.ns.Get
algo::Smallstr16 acr_in::ns_Get(acr_in::FDispsig& dispsig) {
    algo::Smallstr16 ret(algo::Pathcomp(dispsig.dispsig, ".RL"));
    return ret;
}

// --- acr_in.FDispsig.name.Get
algo::Smallstr50 acr_in::name_Get(acr_in::FDispsig& dispsig) {
    algo::Smallstr50 ret(algo::Pathcomp(dispsig.dispsig, ".RR"));
    return ret;
}

// --- acr_in.FDispsig..Uninit
void acr_in::FDispsig_Uninit(acr_in::FDispsig& dispsig) {
    acr_in::FDispsig &row = dispsig; (void)row;
    ind_dispsig_Remove(row); // remove dispsig from index ind_dispsig
}

// --- acr_in.FField.msghdr.CopyOut
// Copy fields out of row
void acr_in::field_CopyOut(acr_in::FField &row, dmmeta::Field &out) {
    out.field = row.field;
    out.arg = row.arg;
    out.reftype = row.reftype;
    out.dflt = row.dflt;
    out.comment = row.comment;
}

// --- acr_in.FField.msghdr.CopyIn
// Copy fields in to row
void acr_in::field_CopyIn(acr_in::FField &row, dmmeta::Field &in) {
    row.field = in.field;
    row.arg = in.arg;
    row.reftype = in.reftype;
    row.dflt = in.dflt;
    row.comment = in.comment;
}

// --- acr_in.FField.ctype.Get
algo::Smallstr50 acr_in::ctype_Get(acr_in::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RL"));
    return ret;
}

// --- acr_in.FField.ns.Get
algo::Smallstr16 acr_in::ns_Get(acr_in::FField& field) {
    algo::Smallstr16 ret(algo::Pathcomp(field.field, ".RL.RL"));
    return ret;
}

// --- acr_in.FField.name.Get
algo::Smallstr50 acr_in::name_Get(acr_in::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RR"));
    return ret;
}

// --- acr_in.FField..Init
// Set all fields to initial values.
void acr_in::FField_Init(acr_in::FField& field) {
    field.reftype = algo::strptr("Val");
    field.p_arg = NULL;
    field.p_ctype = NULL;
    field.c_substr = NULL;
    field.ctype_c_field_in_ary = bool(false);
    field.ind_field_next = (acr_in::FField*)-1; // (acr_in.FDb.ind_field) not-in-hash
}

// --- acr_in.FField..Uninit
void acr_in::FField_Uninit(acr_in::FField& field) {
    acr_in::FField &row = field; (void)row;
    ind_field_Remove(row); // remove field from index ind_field
    acr_in::FCtype* p_ctype = acr_in::ind_ctype_Find(ctype_Get(row));
    if (p_ctype)  {
        c_field_Remove(*p_ctype, row);// remove field from index c_field
    }
}

// --- acr_in.FFinput.msghdr.CopyOut
// Copy fields out of row
void acr_in::finput_CopyOut(acr_in::FFinput &row, dmmeta::Finput &out) {
    out.field = row.field;
    out.extrn = row.extrn;
    out.update = row.update;
    out.strict = row.strict;
    out.comment = row.comment;
}

// --- acr_in.FFinput.msghdr.CopyIn
// Copy fields in to row
void acr_in::finput_CopyIn(acr_in::FFinput &row, dmmeta::Finput &in) {
    row.field = in.field;
    row.extrn = in.extrn;
    row.update = in.update;
    row.strict = in.strict;
    row.comment = in.comment;
}

// --- acr_in.FFinput.ns.Get
algo::Smallstr16 acr_in::ns_Get(acr_in::FFinput& finput) {
    algo::Smallstr16 ret(algo::Pathcomp(finput.field, ".LL"));
    return ret;
}

// --- acr_in.FFinput..Uninit
void acr_in::FFinput_Uninit(acr_in::FFinput& finput) {
    acr_in::FFinput &row = finput; (void)row;
    ind_finput_Remove(row); // remove finput from index ind_finput
}

// --- acr_in.FNs.msghdr.CopyOut
// Copy fields out of row
void acr_in::ns_CopyOut(acr_in::FNs &row, dmmeta::Ns &out) {
    out.ns = row.ns;
    out.nstype = row.nstype;
    out.license = row.license;
    out.comment = row.comment;
}

// --- acr_in.FNs.msghdr.CopyIn
// Copy fields in to row
void acr_in::ns_CopyIn(acr_in::FNs &row, dmmeta::Ns &in) {
    row.ns = in.ns;
    row.nstype = in.nstype;
    row.license = in.license;
    row.comment = in.comment;
}

// --- acr_in.FNs..Uninit
void acr_in::FNs_Uninit(acr_in::FNs& ns) {
    acr_in::FNs &row = ns; (void)row;
    ind_ns_Remove(row); // remove ns from index ind_ns
}

// --- acr_in.FSsimfile.msghdr.CopyOut
// Copy fields out of row
void acr_in::ssimfile_CopyOut(acr_in::FSsimfile &row, dmmeta::Ssimfile &out) {
    out.ssimfile = row.ssimfile;
    out.ctype = row.ctype;
}

// --- acr_in.FSsimfile.msghdr.CopyIn
// Copy fields in to row
void acr_in::ssimfile_CopyIn(acr_in::FSsimfile &row, dmmeta::Ssimfile &in) {
    row.ssimfile = in.ssimfile;
    row.ctype = in.ctype;
}

// --- acr_in.FSsimfile.ssimns.Get
algo::Smallstr16 acr_in::ssimns_Get(acr_in::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- acr_in.FSsimfile.ns.Get
algo::Smallstr16 acr_in::ns_Get(acr_in::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- acr_in.FSsimfile.name.Get
algo::Smallstr50 acr_in::name_Get(acr_in::FSsimfile& ssimfile) {
    algo::Smallstr50 ret(algo::Pathcomp(ssimfile.ssimfile, ".RR"));
    return ret;
}

// --- acr_in.FSsimfile..Uninit
void acr_in::FSsimfile_Uninit(acr_in::FSsimfile& ssimfile) {
    acr_in::FSsimfile &row = ssimfile; (void)row;
    acr_in::FCtype* p_ctype = acr_in::ind_ctype_Find(row.ctype);
    if (p_ctype)  {
        c_ssimfile_Remove(*p_ctype, row);// remove ssimfile from index c_ssimfile
    }
    zd_ssimfile_Remove(row); // remove ssimfile from index zd_ssimfile
}

// --- acr_in.FSubstr.msghdr.CopyOut
// Copy fields out of row
void acr_in::substr_CopyOut(acr_in::FSubstr &row, dmmeta::Substr &out) {
    out.field = row.field;
    out.expr = row.expr;
    out.srcfield = row.srcfield;
}

// --- acr_in.FSubstr.msghdr.CopyIn
// Copy fields in to row
void acr_in::substr_CopyIn(acr_in::FSubstr &row, dmmeta::Substr &in) {
    row.field = in.field;
    row.expr = in.expr;
    row.srcfield = in.srcfield;
}

// --- acr_in.FSubstr..Uninit
void acr_in::FSubstr_Uninit(acr_in::FSubstr& substr) {
    acr_in::FSubstr &row = substr; (void)row;
    acr_in::FField* p_field = acr_in::ind_field_Find(row.field);
    if (p_field)  {
        c_substr_Remove(*p_field, row);// remove substr from index c_substr
    }
}

// --- acr_in.FTargdep.msghdr.CopyOut
// Copy fields out of row
void acr_in::targdep_CopyOut(acr_in::FTargdep &row, dev::Targdep &out) {
    out.targdep = row.targdep;
    out.comment = row.comment;
}

// --- acr_in.FTargdep.msghdr.CopyIn
// Copy fields in to row
void acr_in::targdep_CopyIn(acr_in::FTargdep &row, dev::Targdep &in) {
    row.targdep = in.targdep;
    row.comment = in.comment;
}

// --- acr_in.FTargdep.target.Get
algo::Smallstr16 acr_in::target_Get(acr_in::FTargdep& targdep) {
    algo::Smallstr16 ret(algo::Pathcomp(targdep.targdep, ".RL"));
    return ret;
}

// --- acr_in.FTargdep.parent.Get
algo::Smallstr16 acr_in::parent_Get(acr_in::FTargdep& targdep) {
    algo::Smallstr16 ret(algo::Pathcomp(targdep.targdep, ".RR"));
    return ret;
}

// --- acr_in.FTargdep..Uninit
void acr_in::FTargdep_Uninit(acr_in::FTargdep& targdep) {
    acr_in::FTargdep &row = targdep; (void)row;
    acr_in::FTarget* p_target = acr_in::ind_target_Find(target_Get(row));
    if (p_target)  {
        c_targdep_Remove(*p_target, row);// remove targdep from index c_targdep
    }
}

// --- acr_in.FTarget.msghdr.CopyOut
// Copy fields out of row
void acr_in::target_CopyOut(acr_in::FTarget &row, dev::Target &out) {
    out.target = row.target;
    out.compat = row.compat;
}

// --- acr_in.FTarget.msghdr.CopyIn
// Copy fields in to row
void acr_in::target_CopyIn(acr_in::FTarget &row, dev::Target &in) {
    row.target = in.target;
    row.compat = in.compat;
}

// --- acr_in.FTarget.c_targdep.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_in::c_targdep_Insert(acr_in::FTarget& target, acr_in::FTargdep& row) {
    if (bool_Update(row.target_c_targdep_in_ary,true)) {
        // reserve space
        c_targdep_Reserve(target, 1);
        u32 n  = target.c_targdep_n;
        u32 at = n;
        acr_in::FTargdep* *elems = target.c_targdep_elems;
        elems[at] = &row;
        target.c_targdep_n = n+1;

    }
}

// --- acr_in.FTarget.c_targdep.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool acr_in::c_targdep_InsertMaybe(acr_in::FTarget& target, acr_in::FTargdep& row) {
    bool retval = !row.target_c_targdep_in_ary;
    c_targdep_Insert(target,row); // check is performed in _Insert again
    return retval;
}

// --- acr_in.FTarget.c_targdep.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_in::c_targdep_Remove(acr_in::FTarget& target, acr_in::FTargdep& row) {
    if (bool_Update(row.target_c_targdep_in_ary,false)) {
        int lim = target.c_targdep_n;
        acr_in::FTargdep* *elems = target.c_targdep_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            acr_in::FTargdep* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(acr_in::FTargdep*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                target.c_targdep_n = lim - 1;
                break;
            }
        }
    }
}

// --- acr_in.FTarget.c_targdep.Reserve
// Reserve space in index for N more elements;
void acr_in::c_targdep_Reserve(acr_in::FTarget& target, u32 n) {
    u32 old_max = target.c_targdep_max;
    if (UNLIKELY(target.c_targdep_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_in::FTargdep*);
        u32 new_size = new_max * sizeof(acr_in::FTargdep*);
        void *new_mem = algo_lib::malloc_ReallocMem(target.c_targdep_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FTarget.c_targdep");
        }
        target.c_targdep_elems = (acr_in::FTargdep**)new_mem;
        target.c_targdep_max = new_max;
    }
}

// --- acr_in.FTarget..Uninit
void acr_in::FTarget_Uninit(acr_in::FTarget& target) {
    acr_in::FTarget &row = target; (void)row;
    ind_target_Remove(row); // remove target from index ind_target
    zd_targ_visit_Remove(row); // remove target from index zd_targ_visit
    acr_in::FNs* p_target = acr_in::ind_ns_Find(row.target);
    if (p_target)  {
        c_target_Remove(*p_target, row);// remove target from index c_target
    }

    // acr_in.FTarget.c_targdep.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(target.c_targdep_elems, sizeof(acr_in::FTargdep*)*target.c_targdep_max); // (acr_in.FTarget.c_targdep)
}

// --- acr_in.FTuple.c_child.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_in::c_child_Insert(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    // reserve space
    c_child_Reserve(tuple, 1);
    u32 n  = tuple.c_child_n;
    u32 at = n;
    acr_in::FTuple* *elems = tuple.c_child_elems;
    elems[at] = &row;
    tuple.c_child_n = n+1;

}

// --- acr_in.FTuple.c_child.ScanInsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
bool acr_in::c_child_ScanInsertMaybe(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    bool retval = true;
    u32 n  = tuple.c_child_n;
    for (u32 i = 0; i < n; i++) {
        if (tuple.c_child_elems[i] == &row) {
            retval = false;
            break;
        }
    }
    if (retval) {
        // reserve space
        c_child_Reserve(tuple, 1);
        tuple.c_child_elems[n] = &row;
        tuple.c_child_n = n+1;
    }
    return retval;
}

// --- acr_in.FTuple.c_child.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_in::c_child_Remove(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    int lim = tuple.c_child_n;
    acr_in::FTuple* *elems = tuple.c_child_elems;
    // search backward, so that most recently added element is found first.
    // if found, shift array.
    for (int i = lim-1; i>=0; i--) {
        acr_in::FTuple* elem = elems[i]; // fetch element
        if (elem == &row) {
            int j = i + 1;
            size_t nbytes = sizeof(acr_in::FTuple*) * (lim - j);
            memmove(elems + i, elems + j, nbytes);
            tuple.c_child_n = lim - 1;
            break;
        }
    }
}

// --- acr_in.FTuple.c_child.Reserve
// Reserve space in index for N more elements;
void acr_in::c_child_Reserve(acr_in::FTuple& tuple, u32 n) {
    u32 old_max = tuple.c_child_max;
    if (UNLIKELY(tuple.c_child_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_in::FTuple*);
        u32 new_size = new_max * sizeof(acr_in::FTuple*);
        void *new_mem = algo_lib::malloc_ReallocMem(tuple.c_child_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FTuple.c_child");
        }
        tuple.c_child_elems = (acr_in::FTuple**)new_mem;
        tuple.c_child_max = new_max;
    }
}

// --- acr_in.FTuple.c_parent.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void acr_in::c_parent_Insert(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    // reserve space
    c_parent_Reserve(tuple, 1);
    u32 n  = tuple.c_parent_n;
    u32 at = n;
    acr_in::FTuple* *elems = tuple.c_parent_elems;
    elems[at] = &row;
    tuple.c_parent_n = n+1;

}

// --- acr_in.FTuple.c_parent.ScanInsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Linear search is used to locate the element.
// Return value: whether element was inserted into array.
bool acr_in::c_parent_ScanInsertMaybe(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    bool retval = true;
    u32 n  = tuple.c_parent_n;
    for (u32 i = 0; i < n; i++) {
        if (tuple.c_parent_elems[i] == &row) {
            retval = false;
            break;
        }
    }
    if (retval) {
        // reserve space
        c_parent_Reserve(tuple, 1);
        tuple.c_parent_elems[n] = &row;
        tuple.c_parent_n = n+1;
    }
    return retval;
}

// --- acr_in.FTuple.c_parent.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void acr_in::c_parent_Remove(acr_in::FTuple& tuple, acr_in::FTuple& row) {
    int lim = tuple.c_parent_n;
    acr_in::FTuple* *elems = tuple.c_parent_elems;
    // search backward, so that most recently added element is found first.
    // if found, shift array.
    for (int i = lim-1; i>=0; i--) {
        acr_in::FTuple* elem = elems[i]; // fetch element
        if (elem == &row) {
            int j = i + 1;
            size_t nbytes = sizeof(acr_in::FTuple*) * (lim - j);
            memmove(elems + i, elems + j, nbytes);
            tuple.c_parent_n = lim - 1;
            break;
        }
    }
}

// --- acr_in.FTuple.c_parent.Reserve
// Reserve space in index for N more elements;
void acr_in::c_parent_Reserve(acr_in::FTuple& tuple, u32 n) {
    u32 old_max = tuple.c_parent_max;
    if (UNLIKELY(tuple.c_parent_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(acr_in::FTuple*);
        u32 new_size = new_max * sizeof(acr_in::FTuple*);
        void *new_mem = algo_lib::malloc_ReallocMem(tuple.c_parent_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("acr_in.out_of_memory  field:acr_in.FTuple.c_parent");
        }
        tuple.c_parent_elems = (acr_in::FTuple**)new_mem;
        tuple.c_parent_max = new_max;
    }
}

// --- acr_in.FTuple..Uninit
void acr_in::FTuple_Uninit(acr_in::FTuple& tuple) {
    acr_in::FTuple &row = tuple; (void)row;
    ind_tuple_Remove(row); // remove tuple from index ind_tuple
    zd_select_Remove(row); // remove tuple from index zd_select
    zd_deselect_Remove(row); // remove tuple from index zd_deselect

    // acr_in.FTuple.c_parent.Uninit (Ptrary)  //parents
    algo_lib::malloc_FreeMem(tuple.c_parent_elems, sizeof(acr_in::FTuple*)*tuple.c_parent_max); // (acr_in.FTuple.c_parent)

    // acr_in.FTuple.c_child.Uninit (Ptrary)  //children
    algo_lib::malloc_FreeMem(tuple.c_child_elems, sizeof(acr_in::FTuple*)*tuple.c_child_max); // (acr_in.FTuple.c_child)
}

// --- acr_in.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_in::value_ToCstr(const acr_in::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case acr_in_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- acr_in.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void acr_in::value_Print(const acr_in::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- acr_in.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_in::value_SetStrptrMaybe(acr_in::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,acr_in_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_in.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_in::value_SetStrptr(acr_in::FieldId& parent, algo::strptr rhs, acr_in_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- acr_in.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_in::value_ReadStrptrMaybe(acr_in::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- acr_in.FieldId..ReadStrptrMaybe
// Read fields of acr_in::FieldId from an ascii string.
// The format of the string is the format of the acr_in::FieldId's only field
bool acr_in::FieldId_ReadStrptrMaybe(acr_in::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_in.FieldId..Print
// print string representation of acr_in::FieldId to string LHS, no header -- cprint:acr_in.FieldId.String
void acr_in::FieldId_Print(acr_in::FieldId & row, algo::cstring &str) {
    acr_in::value_Print(row, str);
}

// --- acr_in.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_in::value_ToCstr(const acr_in::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case acr_in_TableId_dmmeta_Ctype   : ret = "dmmeta.Ctype";  break;
        case acr_in_TableId_dmmeta_Dispsig : ret = "dmmeta.Dispsig";  break;
        case acr_in_TableId_dmmeta_Field   : ret = "dmmeta.Field";  break;
        case acr_in_TableId_dmmeta_Finput  : ret = "dmmeta.Finput";  break;
        case acr_in_TableId_dmmeta_Ns      : ret = "dmmeta.Ns";  break;
        case acr_in_TableId_dmmeta_Ssimfile: ret = "dmmeta.Ssimfile";  break;
        case acr_in_TableId_dmmeta_Substr  : ret = "dmmeta.Substr";  break;
        case acr_in_TableId_dev_Targdep    : ret = "dev.Targdep";  break;
        case acr_in_TableId_dev_Target     : ret = "dev.Target";  break;
    }
    return ret;
}

// --- acr_in.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void acr_in::value_Print(const acr_in::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- acr_in.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_in::value_SetStrptrMaybe(acr_in::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Ns); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_ns); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,acr_in_TableId_dev_Target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,acr_in_TableId_dev_target); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"dep",3)==0) { value_SetEnum(parent,acr_in_TableId_dev_Targdep); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"dep",3)==0) { value_SetEnum(parent,acr_in_TableId_dev_targdep); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Field); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_field); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"input",5)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Finput); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"ubstr",5)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Substr); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"input",5)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_finput); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"ubstr",5)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_substr); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','D'): {
                    if (memcmp(rhs.elems+8,"ispsig",6)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Dispsig); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','d'): {
                    if (memcmp(rhs.elems+8,"ispsig",6)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_dispsig); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_Ssimfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,acr_in_TableId_dmmeta_ssimfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_in.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_in::value_SetStrptr(acr_in::TableId& parent, algo::strptr rhs, acr_in_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- acr_in.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_in::value_ReadStrptrMaybe(acr_in::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- acr_in.TableId..ReadStrptrMaybe
// Read fields of acr_in::TableId from an ascii string.
// The format of the string is the format of the acr_in::TableId's only field
bool acr_in::TableId_ReadStrptrMaybe(acr_in::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_in.TableId..Print
// print string representation of acr_in::TableId to string LHS, no header -- cprint:acr_in.TableId.String
void acr_in::TableId_Print(acr_in::TableId & row, algo::cstring &str) {
    acr_in::value_Print(row, str);
}

// --- acr_in...SizeCheck
inline static void acr_in::SizeCheck() {
}

// --- acr_in...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        acr_in::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        acr_in::ReadArgv(); // dmmeta.main:acr_in
        acr_in::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("acr_in.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        acr_in::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- acr_in...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
