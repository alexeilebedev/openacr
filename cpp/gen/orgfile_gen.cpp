//
// cpp/gen/orgfile_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/orgfile_gen.h"
#include "include/gen/orgfile_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
orgfile::FDb    orgfile::_db;     // dependency found via dev.targdep

namespace orgfile {
const char *orgfile_help =
"orgfile: OpenACR File deduplicator tool\n"
"Usage: orgfile [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -move       string  \"\"      Read stdin, rename files based on pattern\n"
"    -dedup      regx    \"\"      Only allow deleting files that match this regx\n"
"    -commit                     Apply changes\n"
"    -undo                       Read previous orgfile output, undoing movement\n"
"    -hash       string  \"sha1\"  Hash command to use for deduplication\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help an exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace orgfile
namespace orgfile { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          timefmt_InputMaybe(dev::Timefmt &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- orgfile.trace..Print
// print string representation of orgfile::trace to string LHS, no header -- cprint:orgfile.trace.String
void orgfile::trace_Print(orgfile::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "orgfile.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- orgfile.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     orgfile.FDb.cmdline
//     algo_lib.FDb.cmdline
void orgfile::ReadArgv() {
    command::orgfile &cmd = orgfile::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::orgfile_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"orgfile: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "orgfile: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::orgfile_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"orgfile: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(orgfile_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    vrfy(orgfile::LoadTuplesMaybe(cmd.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- orgfile.FDb._db.MainLoop
// Main loop.
void orgfile::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        orgfile::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- orgfile.FDb._db.Step
// Main step
void orgfile::Step() {
}

// --- orgfile.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void orgfile::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("orgfile", orgfile::InsertStrptrMaybe, NULL, orgfile::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "orgfile.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(orgfile::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)orgfile::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'orgfile.Input'  signature:'dadfcf8accbcc44f5e5443f439ac4024afc89edf'");
}

// --- orgfile.FDb._db.StaticCheck
void orgfile::StaticCheck() {
    algo_assert(_offset_of(orgfile::FieldId, value) + sizeof(((orgfile::FieldId*)0)->value) == sizeof(orgfile::FieldId));
}

// --- orgfile.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool orgfile::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    orgfile::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case orgfile_TableId_dev_Timefmt: { // finput:orgfile.FDb.timefmt
            dev::Timefmt elem;
            retval = dev::Timefmt_ReadStrptrMaybe(elem, str);
            retval = retval && timefmt_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- orgfile.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool orgfile::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "dev.timefmt"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, orgfile::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- orgfile.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool orgfile::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, orgfile::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- orgfile.FDb._db.Steps
// Calls Step function of dependencies
void orgfile::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- orgfile.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool orgfile::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- orgfile.FDb.filename.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
orgfile::FFilename& orgfile::filename_Alloc() {
    orgfile::FFilename* row = filename_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("orgfile.out_of_mem  field:orgfile.FDb.filename  comment:'Alloc failed'");
    }
    return *row;
}

// --- orgfile.FDb.filename.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
orgfile::FFilename* orgfile::filename_AllocMaybe() {
    orgfile::FFilename *row = (orgfile::FFilename*)filename_AllocMem();
    if (row) {
        new (row) orgfile::FFilename; // call constructor
    }
    return row;
}

// --- orgfile.FDb.filename.Delete
// Remove row from all global and cross indices, then deallocate row
void orgfile::filename_Delete(orgfile::FFilename &row) {
    row.~FFilename();
    filename_FreeMem(row);
}

// --- orgfile.FDb.filename.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* orgfile::filename_AllocMem() {
    orgfile::FFilename *row = _db.filename_free;
    if (UNLIKELY(!row)) {
        filename_Reserve(1);
        row = _db.filename_free;
    }
    if (row) {
        _db.filename_free = row->filename_next;
    }
    return row;
}

// --- orgfile.FDb.filename.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void orgfile::filename_FreeMem(orgfile::FFilename &row) {
    if (UNLIKELY(row.filename_next != (orgfile::FFilename*)-1)) {
        FatalErrorExit("orgfile.tpool_double_delete  pool:orgfile.FDb.filename  comment:'double deletion caught'");
    }
    row.filename_next = _db.filename_free; // insert into free list
    _db.filename_free  = &row;
}

// --- orgfile.FDb.filename.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 orgfile::filename_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.filename_blocksize; // underlying allocator is probably Lpool
        u64 reserved = filename_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- orgfile.FDb.filename.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 orgfile::filename_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(orgfile::FFilename)) {
        orgfile::FFilename *mem = (orgfile::FFilename*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(orgfile::FFilename) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].filename_next = _db.filename_free;
            _db.filename_free = mem+i;
        }
    }
    return ret;
}

// --- orgfile.FDb.filename.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool orgfile::filename_XrefMaybe(orgfile::FFilename &row) {
    bool retval = true;
    (void)row;
    orgfile::FFilehash* p_filehash = orgfile::ind_filehash_Find(row.filehash);
    if (UNLIKELY(!p_filehash)) {
        algo_lib::ResetErrtext() << "orgfile.bad_xref  index:orgfile.FDb.ind_filehash" << Keyval("key", row.filehash);
        return false;
    }
    // filename: save pointer to filehash
    if (true) { // user-defined insert condition
        row.p_filehash = p_filehash;
    }
    // insert filename into index ind_filename
    if (true) { // user-defined insert condition
        bool success = ind_filename_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "orgfile.duplicate_key  xref:orgfile.FDb.ind_filename"; // check for duplicate key
            return false;
        }
    }
    // insert filename into index c_filename
    if (true) { // user-defined insert condition
        c_filename_Insert(*p_filehash, row);
    }
    return retval;
}

// --- orgfile.FDb.ind_filename.Find
// Find row by key. Return NULL if not found.
orgfile::FFilename* orgfile::ind_filename_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_filename_buckets_n - 1);
    orgfile::FFilename* *e = &_db.ind_filename_buckets_elems[index];
    orgfile::FFilename* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).filename == key;
        if (done) break;
        e         = &ret->ind_filename_next;
    } while (true);
    return ret;
}

// --- orgfile.FDb.ind_filename.FindX
// Look up row by key and return reference. Throw exception if not found
orgfile::FFilename& orgfile::ind_filename_FindX(const algo::strptr& key) {
    orgfile::FFilename* ret = ind_filename_Find(key);
    vrfy(ret, tempstr() << "orgfile.key_error  table:ind_filename  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- orgfile.FDb.ind_filename.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool orgfile::ind_filename_InsertMaybe(orgfile::FFilename& row) {
    ind_filename_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_filename_next == (orgfile::FFilename*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.filename) & (_db.ind_filename_buckets_n - 1);
        orgfile::FFilename* *prev = &_db.ind_filename_buckets_elems[index];
        do {
            orgfile::FFilename* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).filename == row.filename) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_filename_next;
        } while (true);
        if (retval) {
            row.ind_filename_next = *prev;
            _db.ind_filename_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- orgfile.FDb.ind_filename.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void orgfile::ind_filename_Remove(orgfile::FFilename& row) {
    if (LIKELY(row.ind_filename_next != (orgfile::FFilename*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.filename) & (_db.ind_filename_buckets_n - 1);
        orgfile::FFilename* *prev = &_db.ind_filename_buckets_elems[index]; // addr of pointer to current element
        while (orgfile::FFilename *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_filename_next; // unlink (singly linked list)
                _db.ind_filename_n--;
                row.ind_filename_next = (orgfile::FFilename*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_filename_next;
        }
    }
}

// --- orgfile.FDb.ind_filename.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void orgfile::ind_filename_Reserve(int n) {
    u32 old_nbuckets = _db.ind_filename_buckets_n;
    u32 new_nelems   = _db.ind_filename_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(orgfile::FFilename*);
        u32 new_size = new_nbuckets * sizeof(orgfile::FFilename*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        orgfile::FFilename* *new_buckets = (orgfile::FFilename**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("orgfile.out_of_memory  field:orgfile.FDb.ind_filename");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_filename_buckets_n; i++) {
            orgfile::FFilename* elem = _db.ind_filename_buckets_elems[i];
            while (elem) {
                orgfile::FFilename &row        = *elem;
                orgfile::FFilename* next       = row.ind_filename_next;
                u32 index          = algo::cstring_Hash(0, row.filename) & (new_nbuckets-1);
                row.ind_filename_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_filename_buckets_elems, old_size);
        _db.ind_filename_buckets_elems = new_buckets;
        _db.ind_filename_buckets_n = new_nbuckets;
    }
}

// --- orgfile.FDb.filehash.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
orgfile::FFilehash& orgfile::filehash_Alloc() {
    orgfile::FFilehash* row = filehash_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("orgfile.out_of_mem  field:orgfile.FDb.filehash  comment:'Alloc failed'");
    }
    return *row;
}

// --- orgfile.FDb.filehash.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
orgfile::FFilehash* orgfile::filehash_AllocMaybe() {
    orgfile::FFilehash *row = (orgfile::FFilehash*)filehash_AllocMem();
    if (row) {
        new (row) orgfile::FFilehash; // call constructor
    }
    return row;
}

// --- orgfile.FDb.filehash.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* orgfile::filehash_AllocMem() {
    u64 new_nelems     = _db.filehash_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    orgfile::FFilehash*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.filehash_lary[bsr];
        if (!lev) {
            lev=(orgfile::FFilehash*)algo_lib::malloc_AllocMem(sizeof(orgfile::FFilehash) * (u64(1)<<bsr));
            _db.filehash_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.filehash_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- orgfile.FDb.filehash.RemoveAll
// Remove all elements from Lary
void orgfile::filehash_RemoveAll() {
    for (u64 n = _db.filehash_n; n>0; ) {
        n--;
        filehash_qFind(u64(n)).~FFilehash(); // destroy last element
        _db.filehash_n = i32(n);
    }
}

// --- orgfile.FDb.filehash.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void orgfile::filehash_RemoveLast() {
    u64 n = _db.filehash_n;
    if (n > 0) {
        n -= 1;
        filehash_qFind(u64(n)).~FFilehash();
        _db.filehash_n = i32(n);
    }
}

// --- orgfile.FDb.filehash.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool orgfile::filehash_XrefMaybe(orgfile::FFilehash &row) {
    bool retval = true;
    (void)row;
    // insert filehash into index ind_filehash
    if (true) { // user-defined insert condition
        bool success = ind_filehash_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "orgfile.duplicate_key  xref:orgfile.FDb.ind_filehash"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- orgfile.FDb.ind_filehash.Find
// Find row by key. Return NULL if not found.
orgfile::FFilehash* orgfile::ind_filehash_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr40_Hash(0, key) & (_db.ind_filehash_buckets_n - 1);
    orgfile::FFilehash* *e = &_db.ind_filehash_buckets_elems[index];
    orgfile::FFilehash* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).filehash == key;
        if (done) break;
        e         = &ret->ind_filehash_next;
    } while (true);
    return ret;
}

// --- orgfile.FDb.ind_filehash.FindX
// Look up row by key and return reference. Throw exception if not found
orgfile::FFilehash& orgfile::ind_filehash_FindX(const algo::strptr& key) {
    orgfile::FFilehash* ret = ind_filehash_Find(key);
    vrfy(ret, tempstr() << "orgfile.key_error  table:ind_filehash  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- orgfile.FDb.ind_filehash.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
orgfile::FFilehash& orgfile::ind_filehash_GetOrCreate(const algo::strptr& key) {
    orgfile::FFilehash* ret = ind_filehash_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &filehash_Alloc();
        (*ret).filehash = key;
        bool good = filehash_XrefMaybe(*ret);
        if (!good) {
            filehash_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "orgfile.create_error  table:ind_filehash  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- orgfile.FDb.ind_filehash.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool orgfile::ind_filehash_InsertMaybe(orgfile::FFilehash& row) {
    ind_filehash_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_filehash_next == (orgfile::FFilehash*)-1)) {// check if in hash already
        u32 index = algo::Smallstr40_Hash(0, row.filehash) & (_db.ind_filehash_buckets_n - 1);
        orgfile::FFilehash* *prev = &_db.ind_filehash_buckets_elems[index];
        do {
            orgfile::FFilehash* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).filehash == row.filehash) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_filehash_next;
        } while (true);
        if (retval) {
            row.ind_filehash_next = *prev;
            _db.ind_filehash_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- orgfile.FDb.ind_filehash.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void orgfile::ind_filehash_Remove(orgfile::FFilehash& row) {
    if (LIKELY(row.ind_filehash_next != (orgfile::FFilehash*)-1)) {// check if in hash already
        u32 index = algo::Smallstr40_Hash(0, row.filehash) & (_db.ind_filehash_buckets_n - 1);
        orgfile::FFilehash* *prev = &_db.ind_filehash_buckets_elems[index]; // addr of pointer to current element
        while (orgfile::FFilehash *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_filehash_next; // unlink (singly linked list)
                _db.ind_filehash_n--;
                row.ind_filehash_next = (orgfile::FFilehash*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_filehash_next;
        }
    }
}

// --- orgfile.FDb.ind_filehash.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void orgfile::ind_filehash_Reserve(int n) {
    u32 old_nbuckets = _db.ind_filehash_buckets_n;
    u32 new_nelems   = _db.ind_filehash_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(orgfile::FFilehash*);
        u32 new_size = new_nbuckets * sizeof(orgfile::FFilehash*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        orgfile::FFilehash* *new_buckets = (orgfile::FFilehash**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("orgfile.out_of_memory  field:orgfile.FDb.ind_filehash");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_filehash_buckets_n; i++) {
            orgfile::FFilehash* elem = _db.ind_filehash_buckets_elems[i];
            while (elem) {
                orgfile::FFilehash &row        = *elem;
                orgfile::FFilehash* next       = row.ind_filehash_next;
                u32 index          = algo::Smallstr40_Hash(0, row.filehash) & (new_nbuckets-1);
                row.ind_filehash_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_filehash_buckets_elems, old_size);
        _db.ind_filehash_buckets_elems = new_buckets;
        _db.ind_filehash_buckets_n = new_nbuckets;
    }
}

// --- orgfile.FDb.timefmt.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
orgfile::FTimefmt& orgfile::timefmt_Alloc() {
    orgfile::FTimefmt* row = timefmt_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("orgfile.out_of_mem  field:orgfile.FDb.timefmt  comment:'Alloc failed'");
    }
    return *row;
}

// --- orgfile.FDb.timefmt.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
orgfile::FTimefmt* orgfile::timefmt_AllocMaybe() {
    orgfile::FTimefmt *row = (orgfile::FTimefmt*)timefmt_AllocMem();
    if (row) {
        new (row) orgfile::FTimefmt; // call constructor
    }
    return row;
}

// --- orgfile.FDb.timefmt.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
orgfile::FTimefmt* orgfile::timefmt_InsertMaybe(const dev::Timefmt &value) {
    orgfile::FTimefmt *row = &timefmt_Alloc(); // if out of memory, process dies. if input error, return NULL.
    timefmt_CopyIn(*row,const_cast<dev::Timefmt&>(value));
    bool ok = timefmt_XrefMaybe(*row); // this may return false
    if (!ok) {
        timefmt_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- orgfile.FDb.timefmt.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* orgfile::timefmt_AllocMem() {
    u64 new_nelems     = _db.timefmt_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    orgfile::FTimefmt*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.timefmt_lary[bsr];
        if (!lev) {
            lev=(orgfile::FTimefmt*)algo_lib::malloc_AllocMem(sizeof(orgfile::FTimefmt) * (u64(1)<<bsr));
            _db.timefmt_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.timefmt_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- orgfile.FDb.timefmt.RemoveAll
// Remove all elements from Lary
void orgfile::timefmt_RemoveAll() {
    for (u64 n = _db.timefmt_n; n>0; ) {
        n--;
        timefmt_qFind(u64(n)).~FTimefmt(); // destroy last element
        _db.timefmt_n = i32(n);
    }
}

// --- orgfile.FDb.timefmt.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void orgfile::timefmt_RemoveLast() {
    u64 n = _db.timefmt_n;
    if (n > 0) {
        n -= 1;
        timefmt_qFind(u64(n)).~FTimefmt();
        _db.timefmt_n = i32(n);
    }
}

// --- orgfile.FDb.timefmt.InputMaybe
static bool orgfile::timefmt_InputMaybe(dev::Timefmt &elem) {
    bool retval = true;
    retval = timefmt_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- orgfile.FDb.timefmt.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool orgfile::timefmt_XrefMaybe(orgfile::FTimefmt &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- orgfile.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr orgfile::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- orgfile.FDb.trace.N
// Function return 1
inline static i32 orgfile::trace_N() {
    return 1;
}

// --- orgfile.FDb..Init
// Set all fields to initial values.
void orgfile::FDb_Init() {
    // filename: initialize Tpool
    _db.filename_free      = NULL;
    _db.filename_blocksize = algo::BumpToPow2(64 * sizeof(orgfile::FFilename)); // allocate 64-127 elements at a time
    // initialize hash table for orgfile::FFilename;
    _db.ind_filename_n             	= 0; // (orgfile.FDb.ind_filename)
    _db.ind_filename_buckets_n     	= 4; // (orgfile.FDb.ind_filename)
    _db.ind_filename_buckets_elems 	= (orgfile::FFilename**)algo_lib::malloc_AllocMem(sizeof(orgfile::FFilename*)*_db.ind_filename_buckets_n); // initial buckets (orgfile.FDb.ind_filename)
    if (!_db.ind_filename_buckets_elems) {
        FatalErrorExit("out of memory"); // (orgfile.FDb.ind_filename)
    }
    memset(_db.ind_filename_buckets_elems, 0, sizeof(orgfile::FFilename*)*_db.ind_filename_buckets_n); // (orgfile.FDb.ind_filename)
    // initialize LAry filehash (orgfile.FDb.filehash)
    _db.filehash_n = 0;
    memset(_db.filehash_lary, 0, sizeof(_db.filehash_lary)); // zero out all level pointers
    orgfile::FFilehash* filehash_first = (orgfile::FFilehash*)algo_lib::malloc_AllocMem(sizeof(orgfile::FFilehash) * (u64(1)<<4));
    if (!filehash_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.filehash_lary[i]  = filehash_first;
        filehash_first    += 1ULL<<i;
    }
    // initialize hash table for orgfile::FFilehash;
    _db.ind_filehash_n             	= 0; // (orgfile.FDb.ind_filehash)
    _db.ind_filehash_buckets_n     	= 4; // (orgfile.FDb.ind_filehash)
    _db.ind_filehash_buckets_elems 	= (orgfile::FFilehash**)algo_lib::malloc_AllocMem(sizeof(orgfile::FFilehash*)*_db.ind_filehash_buckets_n); // initial buckets (orgfile.FDb.ind_filehash)
    if (!_db.ind_filehash_buckets_elems) {
        FatalErrorExit("out of memory"); // (orgfile.FDb.ind_filehash)
    }
    memset(_db.ind_filehash_buckets_elems, 0, sizeof(orgfile::FFilehash*)*_db.ind_filehash_buckets_n); // (orgfile.FDb.ind_filehash)
    // initialize LAry timefmt (orgfile.FDb.timefmt)
    _db.timefmt_n = 0;
    memset(_db.timefmt_lary, 0, sizeof(_db.timefmt_lary)); // zero out all level pointers
    orgfile::FTimefmt* timefmt_first = (orgfile::FTimefmt*)algo_lib::malloc_AllocMem(sizeof(orgfile::FTimefmt) * (u64(1)<<4));
    if (!timefmt_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.timefmt_lary[i]  = timefmt_first;
        timefmt_first    += 1ULL<<i;
    }

    orgfile::InitReflection();
}

// --- orgfile.FDb..Uninit
void orgfile::FDb_Uninit() {
    orgfile::FDb &row = _db; (void)row;

    // orgfile.FDb.timefmt.Uninit (Lary)  //
    // skip destruction in global scope

    // orgfile.FDb.ind_filehash.Uninit (Thash)  //
    // skip destruction of ind_filehash in global scope

    // orgfile.FDb.filehash.Uninit (Lary)  //
    // skip destruction in global scope

    // orgfile.FDb.ind_filename.Uninit (Thash)  //
    // skip destruction of ind_filename in global scope
}

// --- orgfile.FFilehash.c_filename.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void orgfile::c_filename_Insert(orgfile::FFilehash& filehash, orgfile::FFilename& row) {
    if (bool_Update(row.filehash_c_filename_in_ary,true)) {
        // reserve space
        c_filename_Reserve(filehash, 1);
        u32 n  = filehash.c_filename_n;
        u32 at = n;
        orgfile::FFilename* *elems = filehash.c_filename_elems;
        elems[at] = &row;
        filehash.c_filename_n = n+1;

    }
}

// --- orgfile.FFilehash.c_filename.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool orgfile::c_filename_InsertMaybe(orgfile::FFilehash& filehash, orgfile::FFilename& row) {
    bool retval = !row.filehash_c_filename_in_ary;
    c_filename_Insert(filehash,row); // check is performed in _Insert again
    return retval;
}

// --- orgfile.FFilehash.c_filename.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void orgfile::c_filename_Remove(orgfile::FFilehash& filehash, orgfile::FFilename& row) {
    if (bool_Update(row.filehash_c_filename_in_ary,false)) {
        int lim = filehash.c_filename_n;
        orgfile::FFilename* *elems = filehash.c_filename_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            orgfile::FFilename* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(orgfile::FFilename*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                filehash.c_filename_n = lim - 1;
                break;
            }
        }
    }
}

// --- orgfile.FFilehash.c_filename.Reserve
// Reserve space in index for N more elements;
void orgfile::c_filename_Reserve(orgfile::FFilehash& filehash, u32 n) {
    u32 old_max = filehash.c_filename_max;
    if (UNLIKELY(filehash.c_filename_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(orgfile::FFilename*);
        u32 new_size = new_max * sizeof(orgfile::FFilename*);
        void *new_mem = algo_lib::malloc_ReallocMem(filehash.c_filename_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("orgfile.out_of_memory  field:orgfile.FFilehash.c_filename");
        }
        filehash.c_filename_elems = (orgfile::FFilename**)new_mem;
        filehash.c_filename_max = new_max;
    }
}

// --- orgfile.FFilehash..Uninit
void orgfile::FFilehash_Uninit(orgfile::FFilehash& filehash) {
    orgfile::FFilehash &row = filehash; (void)row;
    ind_filehash_Remove(row); // remove filehash from index ind_filehash

    // orgfile.FFilehash.c_filename.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(filehash.c_filename_elems, sizeof(orgfile::FFilename*)*filehash.c_filename_max); // (orgfile.FFilehash.c_filename)
}

// --- orgfile.FFilename..Uninit
void orgfile::FFilename_Uninit(orgfile::FFilename& filename) {
    orgfile::FFilename &row = filename; (void)row;
    ind_filename_Remove(row); // remove filename from index ind_filename
    orgfile::FFilehash* p_filehash = orgfile::ind_filehash_Find(row.filehash);
    if (p_filehash)  {
        c_filename_Remove(*p_filehash, row);// remove filename from index c_filename
    }
}

// --- orgfile.FTimefmt.base.CopyOut
// Copy fields out of row
void orgfile::timefmt_CopyOut(orgfile::FTimefmt &row, dev::Timefmt &out) {
    out.timefmt = row.timefmt;
    out.dirname = row.dirname;
    out.comment = row.comment;
}

// --- orgfile.FTimefmt.base.CopyIn
// Copy fields in to row
void orgfile::timefmt_CopyIn(orgfile::FTimefmt &row, dev::Timefmt &in) {
    row.timefmt = in.timefmt;
    row.dirname = in.dirname;
    row.comment = in.comment;
}

// --- orgfile.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* orgfile::value_ToCstr(const orgfile::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case orgfile_FieldId_original      : ret = "original";  break;
        case orgfile_FieldId_duplicate     : ret = "duplicate";  break;
        case orgfile_FieldId_comment       : ret = "comment";  break;
        case orgfile_FieldId_pathname      : ret = "pathname";  break;
        case orgfile_FieldId_tgtfile       : ret = "tgtfile";  break;
        case orgfile_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- orgfile.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void orgfile::value_Print(const orgfile::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- orgfile.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool orgfile::value_SetStrptrMaybe(orgfile::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,orgfile_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 7: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)|(u64(rhs[6])<<48)) {
                case LE_STR7('c','o','m','m','e','n','t'): {
                    value_SetEnum(parent,orgfile_FieldId_comment); ret = true; break;
                }
                case LE_STR7('t','g','t','f','i','l','e'): {
                    value_SetEnum(parent,orgfile_FieldId_tgtfile); ret = true; break;
                }
            }
            break;
        }
        case 8: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('o','r','i','g','i','n','a','l'): {
                    value_SetEnum(parent,orgfile_FieldId_original); ret = true; break;
                }
                case LE_STR8('p','a','t','h','n','a','m','e'): {
                    value_SetEnum(parent,orgfile_FieldId_pathname); ret = true; break;
                }
            }
            break;
        }
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','u','p','l','i','c','a','t'): {
                    if (memcmp(rhs.elems+8,"e",1)==0) { value_SetEnum(parent,orgfile_FieldId_duplicate); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- orgfile.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void orgfile::value_SetStrptr(orgfile::FieldId& parent, algo::strptr rhs, orgfile_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- orgfile.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool orgfile::value_ReadStrptrMaybe(orgfile::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- orgfile.FieldId..ReadStrptrMaybe
// Read fields of orgfile::FieldId from an ascii string.
// The format of the string is the format of the orgfile::FieldId's only field
bool orgfile::FieldId_ReadStrptrMaybe(orgfile::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- orgfile.FieldId..Print
// print string representation of orgfile::FieldId to string LHS, no header -- cprint:orgfile.FieldId.String
void orgfile::FieldId_Print(orgfile::FieldId & row, algo::cstring &str) {
    orgfile::value_Print(row, str);
}

// --- orgfile.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* orgfile::value_ToCstr(const orgfile::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case orgfile_TableId_dev_Timefmt   : ret = "dev.Timefmt";  break;
    }
    return ret;
}

// --- orgfile.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void orgfile::value_Print(const orgfile::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- orgfile.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool orgfile::value_SetStrptrMaybe(orgfile::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','i','m','e'): {
                    if (memcmp(rhs.elems+8,"fmt",3)==0) { value_SetEnum(parent,orgfile_TableId_dev_Timefmt); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','i','m','e'): {
                    if (memcmp(rhs.elems+8,"fmt",3)==0) { value_SetEnum(parent,orgfile_TableId_dev_timefmt); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- orgfile.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void orgfile::value_SetStrptr(orgfile::TableId& parent, algo::strptr rhs, orgfile_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- orgfile.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool orgfile::value_ReadStrptrMaybe(orgfile::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- orgfile.TableId..ReadStrptrMaybe
// Read fields of orgfile::TableId from an ascii string.
// The format of the string is the format of the orgfile::TableId's only field
bool orgfile::TableId_ReadStrptrMaybe(orgfile::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- orgfile.TableId..Print
// print string representation of orgfile::TableId to string LHS, no header -- cprint:orgfile.TableId.String
void orgfile::TableId_Print(orgfile::TableId & row, algo::cstring &str) {
    orgfile::value_Print(row, str);
}

// --- orgfile.dedup..ReadFieldMaybe
bool orgfile::dedup_ReadFieldMaybe(orgfile::dedup &parent, algo::strptr field, algo::strptr strval) {
    orgfile::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case orgfile_FieldId_original: retval = algo::cstring_ReadStrptrMaybe(parent.original, strval); break;
        case orgfile_FieldId_duplicate: retval = algo::cstring_ReadStrptrMaybe(parent.duplicate, strval); break;
        case orgfile_FieldId_comment: retval = algo::cstring_ReadStrptrMaybe(parent.comment, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- orgfile.dedup..ReadStrptrMaybe
// Read fields of orgfile::dedup from an ascii string.
// The format of the string is an ssim Tuple
bool orgfile::dedup_ReadStrptrMaybe(orgfile::dedup &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "orgfile.dedup");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && dedup_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- orgfile.dedup..Print
// print string representation of orgfile::dedup to string LHS, no header -- cprint:orgfile.dedup.String
void orgfile::dedup_Print(orgfile::dedup & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "orgfile.dedup";

    algo::cstring_Print(row.original, temp);
    PrintAttrSpaceReset(str,"original", temp);

    algo::cstring_Print(row.duplicate, temp);
    PrintAttrSpaceReset(str,"duplicate", temp);

    algo::cstring_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);
}

// --- orgfile.move..ReadFieldMaybe
bool orgfile::move_ReadFieldMaybe(orgfile::move &parent, algo::strptr field, algo::strptr strval) {
    orgfile::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case orgfile_FieldId_pathname: retval = algo::cstring_ReadStrptrMaybe(parent.pathname, strval); break;
        case orgfile_FieldId_tgtfile: retval = algo::cstring_ReadStrptrMaybe(parent.tgtfile, strval); break;
        case orgfile_FieldId_comment: retval = algo::cstring_ReadStrptrMaybe(parent.comment, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- orgfile.move..ReadStrptrMaybe
// Read fields of orgfile::move from an ascii string.
// The format of the string is an ssim Tuple
bool orgfile::move_ReadStrptrMaybe(orgfile::move &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "orgfile.move");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && move_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- orgfile.move..Print
// print string representation of orgfile::move to string LHS, no header -- cprint:orgfile.move.String
void orgfile::move_Print(orgfile::move & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "orgfile.move";

    algo::cstring_Print(row.pathname, temp);
    PrintAttrSpaceReset(str,"pathname", temp);

    algo::cstring_Print(row.tgtfile, temp);
    PrintAttrSpaceReset(str,"tgtfile", temp);

    algo::cstring_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);
}

// --- orgfile...SizeCheck
inline static void orgfile::SizeCheck() {
}

// --- orgfile...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        orgfile::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        orgfile::ReadArgv(); // dmmeta.main:orgfile
        orgfile::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("orgfile.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        orgfile::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- orgfile...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
