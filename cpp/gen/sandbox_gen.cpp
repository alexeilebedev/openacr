//
// cpp/gen/sandbox_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/sandbox_gen.h"
#include "include/gen/sandbox_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
sandbox::FDb    sandbox::_db;     // dependency found via dev.targdep

namespace sandbox {
const char *sandbox_help =
"sandbox: Sandbox - sandbox management tool\n"
"Usage: sandbox [-name:]<regx> [[-cmd:]<string>] [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    [name]      regx            Sandbox name\n"
"    -create                     Create new sandbox and register in dev.sandbox\n"
"    -list                       List existing sandboxes\n"
"    -reset                      Reset sandbox to match current directory\n"
"    -clean                      Remove sandbox contents to save space\n"
"    -shell                      Open interactive shell inside sandbox\n"
"    -del                        Permanently delete sandbox\n"
"    -gc                         Run git gc in target dir\n"
"    [cmd]...    string          Command to execute in sandbox\n"
"    -diff                       Show diff after running command\n"
"    -files...   string          Shell regx to diff\n"
"    -refs       string  \"HEAD\"  Refs to fetch into sandbox\n"
"    -q                          Quiet mode\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace sandbox
namespace sandbox { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:sandbox.FDb._db.InitReflection
    static void          InitReflection();
    // func:sandbox.FDb.sandbox.InputMaybe
    static bool          sandbox_InputMaybe(dev::Sandbox &elem) __attribute__((nothrow));
    // func:sandbox.FDb.sbpath.InputMaybe
    static bool          sbpath_InputMaybe(dev::Sbpath &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:sandbox.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:sandbox.FDb.trace.N
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:sandbox...SizeCheck
    static void          SizeCheck();
} // gen:ns_print_proto

// --- sandbox.trace..Print
// print string representation of ROW to string STR
// cfmt:sandbox.trace.String  printfmt:Tuple
void sandbox::trace_Print(sandbox::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "sandbox.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- sandbox.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     sandbox.FDb.cmdline
//     algo_lib.FDb.cmdline
void sandbox::ReadArgv() {
    command::sandbox &cmd = sandbox::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::sandbox_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    bool name_present = false;
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::sandbox_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"sandbox: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"sandbox: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::sandbox_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "sandbox: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::sandbox_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    case command_FieldId_name: name_present=true; break;
                    default:break;
                }
            }
            if (!ret) {
                err<<"sandbox: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
        if (!name_present) {
            err << "sandbox: Missing value for required argument -name (see -help)" << eol;
            doexit = true;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(sandbox_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(sandbox::LoadTuplesMaybe(cmd.in,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- sandbox.FDb._db.MainLoop
// Main loop.
void sandbox::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        sandbox::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- sandbox.FDb._db.Step
// Main step
void sandbox::Step() {
}

// --- sandbox.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void sandbox::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("sandbox", sandbox::InsertStrptrMaybe, NULL, sandbox::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "sandbox.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(sandbox::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)sandbox::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'sandbox.Input'  signature:'cc12803fdb112312e03adeccfcb9535fc5825f85'");
}

// --- sandbox.FDb._db.StaticCheck
void sandbox::StaticCheck() {
    algo_assert(_offset_of(sandbox::FieldId, value) + sizeof(((sandbox::FieldId*)0)->value) == sizeof(sandbox::FieldId));
}

// --- sandbox.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool sandbox::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    sandbox::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case sandbox_TableId_dev_Sandbox: { // finput:sandbox.FDb.sandbox
            dev::Sandbox elem;
            retval = dev::Sandbox_ReadStrptrMaybe(elem, str);
            retval = retval && sandbox_InputMaybe(elem);
            break;
        }
        case sandbox_TableId_dev_Sbpath: { // finput:sandbox.FDb.sbpath
            dev::Sbpath elem;
            retval = dev::Sbpath_ReadStrptrMaybe(elem, str);
            retval = retval && sbpath_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- sandbox.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool sandbox::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = sandbox::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = sandbox::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && sandbox::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && sandbox::LoadTuplesFile(algo::SsimFname(root,"dev.sbpath"),recursive);
        retval = retval && sandbox::LoadTuplesFile(algo::SsimFname(root,"dev.sandbox"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- sandbox.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool sandbox::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- sandbox.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool sandbox::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && sandbox::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- sandbox.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool sandbox::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = sandbox::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- sandbox.FDb._db.Steps
// Calls Step function of dependencies
void sandbox::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- sandbox.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sandbox::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- sandbox.FDb.sandbox.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sandbox::FSandbox& sandbox::sandbox_Alloc() {
    sandbox::FSandbox* row = sandbox_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sandbox.out_of_mem  field:sandbox.FDb.sandbox  comment:'Alloc failed'");
    }
    return *row;
}

// --- sandbox.FDb.sandbox.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sandbox::FSandbox* sandbox::sandbox_AllocMaybe() {
    sandbox::FSandbox *row = (sandbox::FSandbox*)sandbox_AllocMem();
    if (row) {
        new (row) sandbox::FSandbox; // call constructor
    }
    return row;
}

// --- sandbox.FDb.sandbox.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
sandbox::FSandbox* sandbox::sandbox_InsertMaybe(const dev::Sandbox &value) {
    sandbox::FSandbox *row = &sandbox_Alloc(); // if out of memory, process dies. if input error, return NULL.
    sandbox_CopyIn(*row,const_cast<dev::Sandbox&>(value));
    bool ok = sandbox_XrefMaybe(*row); // this may return false
    if (!ok) {
        sandbox_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- sandbox.FDb.sandbox.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* sandbox::sandbox_AllocMem() {
    u64 new_nelems     = _db.sandbox_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    sandbox::FSandbox*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.sandbox_lary[bsr];
        if (!lev) {
            lev=(sandbox::FSandbox*)algo_lib::malloc_AllocMem(sizeof(sandbox::FSandbox) * (u64(1)<<bsr));
            _db.sandbox_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.sandbox_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- sandbox.FDb.sandbox.RemoveAll
// Remove all elements from Lary
void sandbox::sandbox_RemoveAll() {
    for (u64 n = _db.sandbox_n; n>0; ) {
        n--;
        sandbox_qFind(u64(n)).~FSandbox(); // destroy last element
        _db.sandbox_n = i32(n);
    }
}

// --- sandbox.FDb.sandbox.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sandbox::sandbox_RemoveLast() {
    u64 n = _db.sandbox_n;
    if (n > 0) {
        n -= 1;
        sandbox_qFind(u64(n)).~FSandbox();
        _db.sandbox_n = i32(n);
    }
}

// --- sandbox.FDb.sandbox.InputMaybe
static bool sandbox::sandbox_InputMaybe(dev::Sandbox &elem) {
    bool retval = true;
    retval = sandbox_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- sandbox.FDb.sandbox.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sandbox::sandbox_XrefMaybe(sandbox::FSandbox &row) {
    bool retval = true;
    (void)row;
    // insert sandbox into index ind_sandbox
    if (true) { // user-defined insert condition
        bool success = ind_sandbox_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "sandbox.duplicate_key  xref:sandbox.FDb.ind_sandbox"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- sandbox.FDb.ind_sandbox.Find
// Find row by key. Return NULL if not found.
sandbox::FSandbox* sandbox::ind_sandbox_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_sandbox_buckets_n - 1);
    sandbox::FSandbox* *e = &_db.ind_sandbox_buckets_elems[index];
    sandbox::FSandbox* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).sandbox == key;
        if (done) break;
        e         = &ret->ind_sandbox_next;
    } while (true);
    return ret;
}

// --- sandbox.FDb.ind_sandbox.FindX
// Look up row by key and return reference. Throw exception if not found
sandbox::FSandbox& sandbox::ind_sandbox_FindX(const algo::strptr& key) {
    sandbox::FSandbox* ret = ind_sandbox_Find(key);
    vrfy(ret, tempstr() << "sandbox.key_error  table:ind_sandbox  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- sandbox.FDb.ind_sandbox.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
sandbox::FSandbox& sandbox::ind_sandbox_GetOrCreate(const algo::strptr& key) {
    sandbox::FSandbox* ret = ind_sandbox_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &sandbox_Alloc();
        (*ret).sandbox = key;
        bool good = sandbox_XrefMaybe(*ret);
        if (!good) {
            sandbox_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "sandbox.create_error  table:ind_sandbox  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- sandbox.FDb.ind_sandbox.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool sandbox::ind_sandbox_InsertMaybe(sandbox::FSandbox& row) {
    ind_sandbox_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_sandbox_next == (sandbox::FSandbox*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.sandbox) & (_db.ind_sandbox_buckets_n - 1);
        sandbox::FSandbox* *prev = &_db.ind_sandbox_buckets_elems[index];
        do {
            sandbox::FSandbox* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).sandbox == row.sandbox) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_sandbox_next;
        } while (true);
        if (retval) {
            row.ind_sandbox_next = *prev;
            _db.ind_sandbox_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- sandbox.FDb.ind_sandbox.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void sandbox::ind_sandbox_Remove(sandbox::FSandbox& row) {
    if (LIKELY(row.ind_sandbox_next != (sandbox::FSandbox*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.sandbox) & (_db.ind_sandbox_buckets_n - 1);
        sandbox::FSandbox* *prev = &_db.ind_sandbox_buckets_elems[index]; // addr of pointer to current element
        while (sandbox::FSandbox *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_sandbox_next; // unlink (singly linked list)
                _db.ind_sandbox_n--;
                row.ind_sandbox_next = (sandbox::FSandbox*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_sandbox_next;
        }
    }
}

// --- sandbox.FDb.ind_sandbox.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void sandbox::ind_sandbox_Reserve(int n) {
    u32 old_nbuckets = _db.ind_sandbox_buckets_n;
    u32 new_nelems   = _db.ind_sandbox_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(sandbox::FSandbox*);
        u32 new_size = new_nbuckets * sizeof(sandbox::FSandbox*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        sandbox::FSandbox* *new_buckets = (sandbox::FSandbox**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("sandbox.out_of_memory  field:sandbox.FDb.ind_sandbox");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_sandbox_buckets_n; i++) {
            sandbox::FSandbox* elem = _db.ind_sandbox_buckets_elems[i];
            while (elem) {
                sandbox::FSandbox &row        = *elem;
                sandbox::FSandbox* next       = row.ind_sandbox_next;
                u32 index          = algo::Smallstr50_Hash(0, row.sandbox) & (new_nbuckets-1);
                row.ind_sandbox_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_sandbox_buckets_elems, old_size);
        _db.ind_sandbox_buckets_elems = new_buckets;
        _db.ind_sandbox_buckets_n = new_nbuckets;
    }
}

// --- sandbox.FDb.sbpath.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sandbox::FSbpath& sandbox::sbpath_Alloc() {
    sandbox::FSbpath* row = sbpath_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sandbox.out_of_mem  field:sandbox.FDb.sbpath  comment:'Alloc failed'");
    }
    return *row;
}

// --- sandbox.FDb.sbpath.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sandbox::FSbpath* sandbox::sbpath_AllocMaybe() {
    sandbox::FSbpath *row = (sandbox::FSbpath*)sbpath_AllocMem();
    if (row) {
        new (row) sandbox::FSbpath; // call constructor
    }
    return row;
}

// --- sandbox.FDb.sbpath.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
sandbox::FSbpath* sandbox::sbpath_InsertMaybe(const dev::Sbpath &value) {
    sandbox::FSbpath *row = &sbpath_Alloc(); // if out of memory, process dies. if input error, return NULL.
    sbpath_CopyIn(*row,const_cast<dev::Sbpath&>(value));
    bool ok = sbpath_XrefMaybe(*row); // this may return false
    if (!ok) {
        sbpath_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- sandbox.FDb.sbpath.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* sandbox::sbpath_AllocMem() {
    u64 new_nelems     = _db.sbpath_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    sandbox::FSbpath*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.sbpath_lary[bsr];
        if (!lev) {
            lev=(sandbox::FSbpath*)algo_lib::malloc_AllocMem(sizeof(sandbox::FSbpath) * (u64(1)<<bsr));
            _db.sbpath_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.sbpath_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- sandbox.FDb.sbpath.RemoveAll
// Remove all elements from Lary
void sandbox::sbpath_RemoveAll() {
    for (u64 n = _db.sbpath_n; n>0; ) {
        n--;
        sbpath_qFind(u64(n)).~FSbpath(); // destroy last element
        _db.sbpath_n = i32(n);
    }
}

// --- sandbox.FDb.sbpath.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sandbox::sbpath_RemoveLast() {
    u64 n = _db.sbpath_n;
    if (n > 0) {
        n -= 1;
        sbpath_qFind(u64(n)).~FSbpath();
        _db.sbpath_n = i32(n);
    }
}

// --- sandbox.FDb.sbpath.InputMaybe
static bool sandbox::sbpath_InputMaybe(dev::Sbpath &elem) {
    bool retval = true;
    retval = sbpath_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- sandbox.FDb.sbpath.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sandbox::sbpath_XrefMaybe(sandbox::FSbpath &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- sandbox.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr sandbox::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- sandbox.FDb.trace.N
// Function return 1
inline static i32 sandbox::trace_N() {
    return 1;
}

// --- sandbox.FDb..Init
// Set all fields to initial values.
void sandbox::FDb_Init() {
    // initialize LAry sandbox (sandbox.FDb.sandbox)
    _db.sandbox_n = 0;
    memset(_db.sandbox_lary, 0, sizeof(_db.sandbox_lary)); // zero out all level pointers
    sandbox::FSandbox* sandbox_first = (sandbox::FSandbox*)algo_lib::malloc_AllocMem(sizeof(sandbox::FSandbox) * (u64(1)<<4));
    if (!sandbox_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.sandbox_lary[i]  = sandbox_first;
        sandbox_first    += 1ULL<<i;
    }
    // initialize hash table for sandbox::FSandbox;
    _db.ind_sandbox_n             	= 0; // (sandbox.FDb.ind_sandbox)
    _db.ind_sandbox_buckets_n     	= 4; // (sandbox.FDb.ind_sandbox)
    _db.ind_sandbox_buckets_elems 	= (sandbox::FSandbox**)algo_lib::malloc_AllocMem(sizeof(sandbox::FSandbox*)*_db.ind_sandbox_buckets_n); // initial buckets (sandbox.FDb.ind_sandbox)
    if (!_db.ind_sandbox_buckets_elems) {
        FatalErrorExit("out of memory"); // (sandbox.FDb.ind_sandbox)
    }
    memset(_db.ind_sandbox_buckets_elems, 0, sizeof(sandbox::FSandbox*)*_db.ind_sandbox_buckets_n); // (sandbox.FDb.ind_sandbox)
    // initialize LAry sbpath (sandbox.FDb.sbpath)
    _db.sbpath_n = 0;
    memset(_db.sbpath_lary, 0, sizeof(_db.sbpath_lary)); // zero out all level pointers
    sandbox::FSbpath* sbpath_first = (sandbox::FSbpath*)algo_lib::malloc_AllocMem(sizeof(sandbox::FSbpath) * (u64(1)<<4));
    if (!sbpath_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.sbpath_lary[i]  = sbpath_first;
        sbpath_first    += 1ULL<<i;
    }

    sandbox::InitReflection();
}

// --- sandbox.FDb..Uninit
void sandbox::FDb_Uninit() {
    sandbox::FDb &row = _db; (void)row;

    // sandbox.FDb.sbpath.Uninit (Lary)  //
    // skip destruction in global scope

    // sandbox.FDb.ind_sandbox.Uninit (Thash)  //
    // skip destruction of ind_sandbox in global scope

    // sandbox.FDb.sandbox.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- sandbox.FSandbox.base.CopyOut
// Copy fields out of row
void sandbox::sandbox_CopyOut(sandbox::FSandbox &row, dev::Sandbox &out) {
    out.sandbox = row.sandbox;
    out.comment = row.comment;
}

// --- sandbox.FSandbox.base.CopyIn
// Copy fields in to row
void sandbox::sandbox_CopyIn(sandbox::FSandbox &row, dev::Sandbox &in) {
    row.sandbox = in.sandbox;
    row.comment = in.comment;
}

// --- sandbox.FSandbox..Uninit
void sandbox::FSandbox_Uninit(sandbox::FSandbox& sandbox) {
    sandbox::FSandbox &row = sandbox; (void)row;
    ind_sandbox_Remove(row); // remove sandbox from index ind_sandbox
}

// --- sandbox.FSbpath.base.CopyOut
// Copy fields out of row
void sandbox::sbpath_CopyOut(sandbox::FSbpath &row, dev::Sbpath &out) {
    out.sbpath = row.sbpath;
    out.comment = row.comment;
}

// --- sandbox.FSbpath.base.CopyIn
// Copy fields in to row
void sandbox::sbpath_CopyIn(sandbox::FSbpath &row, dev::Sbpath &in) {
    row.sbpath = in.sbpath;
    row.comment = in.comment;
}

// --- sandbox.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* sandbox::value_ToCstr(const sandbox::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case sandbox_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- sandbox.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void sandbox::value_Print(const sandbox::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- sandbox.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool sandbox::value_SetStrptrMaybe(sandbox::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,sandbox_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- sandbox.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void sandbox::value_SetStrptr(sandbox::FieldId& parent, algo::strptr rhs, sandbox_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- sandbox.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool sandbox::value_ReadStrptrMaybe(sandbox::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- sandbox.FieldId..ReadStrptrMaybe
// Read fields of sandbox::FieldId from an ascii string.
// The format of the string is the format of the sandbox::FieldId's only field
bool sandbox::FieldId_ReadStrptrMaybe(sandbox::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- sandbox.FieldId..Print
// print string representation of ROW to string STR
// cfmt:sandbox.FieldId.String  printfmt:Raw
void sandbox::FieldId_Print(sandbox::FieldId& row, algo::cstring& str) {
    sandbox::value_Print(row, str);
}

// --- sandbox.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* sandbox::value_ToCstr(const sandbox::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case sandbox_TableId_dev_Sandbox   : ret = "dev.Sandbox";  break;
        case sandbox_TableId_dev_Sbpath    : ret = "dev.Sbpath";  break;
    }
    return ret;
}

// --- sandbox.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void sandbox::value_Print(const sandbox::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- sandbox.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool sandbox::value_SetStrptrMaybe(sandbox::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','S','b','p','a'): {
                    if (memcmp(rhs.elems+8,"th",2)==0) { value_SetEnum(parent,sandbox_TableId_dev_Sbpath); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','s','b','p','a'): {
                    if (memcmp(rhs.elems+8,"th",2)==0) { value_SetEnum(parent,sandbox_TableId_dev_sbpath); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','S','a','n','d'): {
                    if (memcmp(rhs.elems+8,"box",3)==0) { value_SetEnum(parent,sandbox_TableId_dev_Sandbox); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','s','a','n','d'): {
                    if (memcmp(rhs.elems+8,"box",3)==0) { value_SetEnum(parent,sandbox_TableId_dev_sandbox); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- sandbox.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void sandbox::value_SetStrptr(sandbox::TableId& parent, algo::strptr rhs, sandbox_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- sandbox.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool sandbox::value_ReadStrptrMaybe(sandbox::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- sandbox.TableId..ReadStrptrMaybe
// Read fields of sandbox::TableId from an ascii string.
// The format of the string is the format of the sandbox::TableId's only field
bool sandbox::TableId_ReadStrptrMaybe(sandbox::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- sandbox.TableId..Print
// print string representation of ROW to string STR
// cfmt:sandbox.TableId.String  printfmt:Raw
void sandbox::TableId_Print(sandbox::TableId& row, algo::cstring& str) {
    sandbox::value_Print(row, str);
}

// --- sandbox...SizeCheck
inline static void sandbox::SizeCheck() {
}

// --- sandbox...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        sandbox::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        sandbox::ReadArgv(); // dmmeta.main:sandbox
        sandbox::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("sandbox.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        sandbox::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- sandbox...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
