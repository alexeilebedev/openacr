//
// cpp/gen/acr_dm_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/acr_dm_gen.h"
#include "include/gen/acr_dm_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
acr_dm::FDb     acr_dm::_db;      // dependency found via dev.targdep

namespace acr_dm {
const char *acr_dm_help =
"acr_dm: ACR Diff/Merge\n"
"Usage: acr_dm [[-arg:]<string>] [options]\n"
"    OPTION       TYPE    DFLT    COMMENT\n"
"    -in          string  \"data\"  Input directory or filename, - for stdin\n"
"    [arg]...     string          Files to merge: older ours theirs...\n"
"    -write_ours                  Write result to ours file\n"
"    -msize       int     7       Conflict marker size\n"
"    -verbose     int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug       int             Debug level (0..255); alias -d; cumulative\n"
"    -help                        Print help an exit; alias -h\n"
"    -version                     Print version and exit\n"
"    -signature                   Show signatures and exit; alias -sig\n"
;


} // namespace acr_dm
namespace acr_dm { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- acr_dm.FAttr.zs_value.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_dm::zs_value_Insert(acr_dm::FAttr& attr, acr_dm::FValue& row) {
    if (!zs_value_InLlistQ(row)) {
        acr_dm::FValue* old_tail       = attr.zs_value_tail;
        row.zs_value_next  = NULL;
        attr.zs_value_tail = &row;
        acr_dm::FValue **new_row_a = &old_tail->zs_value_next;
        acr_dm::FValue **new_row_b = &attr.zs_value_head;
        acr_dm::FValue **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        attr.zs_value_n++;
    }
}

// --- acr_dm.FAttr.zs_value.Remove
// Remove element from index. If element is not in index, do nothing.
// Since the list is singly-linked, use linear search to locate the element.
void acr_dm::zs_value_Remove(acr_dm::FAttr& attr, acr_dm::FValue& row) {
    if (zs_value_InLlistQ(row)) {
        acr_dm::FValue* old_head       = attr.zs_value_head;
        (void)old_head; // in case it's not used
        acr_dm::FValue* prev=NULL;
        acr_dm::FValue* cur     = attr.zs_value_head;
        while (cur) {  // search for element by pointer
            acr_dm::FValue* next = cur->zs_value_next;
            if (cur == &row) {
                attr.zs_value_n--;  // adjust count

                if (!next) {
                    attr.zs_value_tail = prev;  // adjust tail pointer
                }
                // disconnect element from linked list
                if (prev) {
                    prev->zs_value_next = next;
                } else {
                    attr.zs_value_head = next;
                }
                row.zs_value_next = (acr_dm::FValue*)-1; // not-in-list
                break;
            }
            prev = cur;
            cur  = next;
        }
    }
}

// --- acr_dm.FAttr.zs_value.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_dm::zs_value_RemoveAll(acr_dm::FAttr& attr) {
    acr_dm::FValue* row = attr.zs_value_head;
    attr.zs_value_head = NULL;
    attr.zs_value_tail = NULL;
    attr.zs_value_n = 0;
    while (row) {
        acr_dm::FValue* row_next = row->zs_value_next;
        row->zs_value_next  = (acr_dm::FValue*)-1;
        row = row_next;
    }
}

// --- acr_dm.FAttr.zs_value.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_dm::FValue* acr_dm::zs_value_RemoveFirst(acr_dm::FAttr& attr) {
    acr_dm::FValue *row = NULL;
    row = attr.zs_value_head;
    if (row) {
        acr_dm::FValue *next = row->zs_value_next;
        attr.zs_value_head = next;
        // clear list's tail pointer if list is empty.
        if (!next) {
            attr.zs_value_tail = NULL;
        }
        attr.zs_value_n--;
        row->zs_value_next = (acr_dm::FValue*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_dm.FAttr..Uninit
void acr_dm::FAttr_Uninit(acr_dm::FAttr& attr) {
    acr_dm::FAttr &row = attr; (void)row;
    acr_dm::FTuple* p_p_tuple = row.p_tuple;
    if (p_p_tuple)  {
        zs_attr_Remove(*p_p_tuple, row);// remove attr from index zs_attr
    }
}

// --- acr_dm.trace..Print
// print string representation of acr_dm::trace to string LHS, no header -- cprint:acr_dm.trace.String
void acr_dm::trace_Print(acr_dm::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "acr_dm.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- acr_dm.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     acr_dm.FDb.cmdline
//     algo_lib.FDb.cmdline
void acr_dm::ReadArgv() {
    command::acr_dm &cmd = acr_dm::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::acr_dm_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::acr_dm_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"acr_dm: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"acr_dm: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::acr_dm_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "acr_dm: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::acr_dm_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"acr_dm: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(acr_dm_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(acr_dm::LoadTuplesMaybe(cmd.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- acr_dm.FDb._db.MainLoop
// Main loop.
void acr_dm::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        acr_dm::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- acr_dm.FDb._db.Step
// Main step
void acr_dm::Step() {
}

// --- acr_dm.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void acr_dm::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("acr_dm", NULL, NULL, acr_dm::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "acr_dm.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(acr_dm::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)acr_dm::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- acr_dm.FDb._db.StaticCheck
void acr_dm::StaticCheck() {
    algo_assert(_offset_of(acr_dm::FieldId, value) + sizeof(((acr_dm::FieldId*)0)->value) == sizeof(acr_dm::FieldId));
}

// --- acr_dm.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool acr_dm::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- acr_dm.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool acr_dm::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    (void)root;//only to avoid -Wunused-parameter
    return retval;
}

// --- acr_dm.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool acr_dm::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, acr_dm::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- acr_dm.FDb._db.Steps
// Calls Step function of dependencies
void acr_dm::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- acr_dm.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_dm::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- acr_dm.FDb.tuple.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FTuple& acr_dm::tuple_Alloc() {
    acr_dm::FTuple* row = tuple_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_dm.out_of_mem  field:acr_dm.FDb.tuple  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_dm.FDb.tuple.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FTuple* acr_dm::tuple_AllocMaybe() {
    acr_dm::FTuple *row = (acr_dm::FTuple*)tuple_AllocMem();
    if (row) {
        new (row) acr_dm::FTuple; // call constructor
    }
    return row;
}

// --- acr_dm.FDb.tuple.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_dm::tuple_AllocMem() {
    u64 new_nelems     = _db.tuple_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_dm::FTuple*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.tuple_lary[bsr];
        if (!lev) {
            lev=(acr_dm::FTuple*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FTuple) * (u64(1)<<bsr));
            _db.tuple_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.tuple_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_dm.FDb.tuple.RemoveAll
// Remove all elements from Lary
void acr_dm::tuple_RemoveAll() {
    for (u64 n = _db.tuple_n; n>0; ) {
        n--;
        tuple_qFind(u64(n)).~FTuple(); // destroy last element
        _db.tuple_n = i32(n);
    }
}

// --- acr_dm.FDb.tuple.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_dm::tuple_RemoveLast() {
    u64 n = _db.tuple_n;
    if (n > 0) {
        n -= 1;
        tuple_qFind(u64(n)).~FTuple();
        _db.tuple_n = i32(n);
    }
}

// --- acr_dm.FDb.tuple.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_dm::tuple_XrefMaybe(acr_dm::FTuple &row) {
    bool retval = true;
    (void)row;
    // insert tuple into index ind_tuple
    if (true) { // user-defined insert condition
        bool success = ind_tuple_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "acr_dm.duplicate_key  xref:acr_dm.FDb.ind_tuple"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- acr_dm.FDb.ind_tuple.Find
// Find row by key. Return NULL if not found.
acr_dm::FTuple* acr_dm::ind_tuple_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_tuple_buckets_n - 1);
    acr_dm::FTuple* *e = &_db.ind_tuple_buckets_elems[index];
    acr_dm::FTuple* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).key == key;
        if (done) break;
        e         = &ret->ind_tuple_next;
    } while (true);
    return ret;
}

// --- acr_dm.FDb.ind_tuple.FindX
// Look up row by key and return reference. Throw exception if not found
acr_dm::FTuple& acr_dm::ind_tuple_FindX(const algo::strptr& key) {
    acr_dm::FTuple* ret = ind_tuple_Find(key);
    vrfy(ret, tempstr() << "acr_dm.key_error  table:ind_tuple  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- acr_dm.FDb.ind_tuple.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
acr_dm::FTuple& acr_dm::ind_tuple_GetOrCreate(const algo::strptr& key) {
    acr_dm::FTuple* ret = ind_tuple_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &tuple_Alloc();
        (*ret).key = key;
        bool good = tuple_XrefMaybe(*ret);
        if (!good) {
            tuple_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "acr_dm.create_error  table:ind_tuple  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- acr_dm.FDb.ind_tuple.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool acr_dm::ind_tuple_InsertMaybe(acr_dm::FTuple& row) {
    ind_tuple_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_tuple_next == (acr_dm::FTuple*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_tuple_buckets_n - 1);
        acr_dm::FTuple* *prev = &_db.ind_tuple_buckets_elems[index];
        do {
            acr_dm::FTuple* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).key == row.key) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_tuple_next;
        } while (true);
        if (retval) {
            row.ind_tuple_next = *prev;
            _db.ind_tuple_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- acr_dm.FDb.ind_tuple.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void acr_dm::ind_tuple_Remove(acr_dm::FTuple& row) {
    if (LIKELY(row.ind_tuple_next != (acr_dm::FTuple*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_tuple_buckets_n - 1);
        acr_dm::FTuple* *prev = &_db.ind_tuple_buckets_elems[index]; // addr of pointer to current element
        while (acr_dm::FTuple *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_tuple_next; // unlink (singly linked list)
                _db.ind_tuple_n--;
                row.ind_tuple_next = (acr_dm::FTuple*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_tuple_next;
        }
    }
}

// --- acr_dm.FDb.ind_tuple.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void acr_dm::ind_tuple_Reserve(int n) {
    u32 old_nbuckets = _db.ind_tuple_buckets_n;
    u32 new_nelems   = _db.ind_tuple_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(acr_dm::FTuple*);
        u32 new_size = new_nbuckets * sizeof(acr_dm::FTuple*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        acr_dm::FTuple* *new_buckets = (acr_dm::FTuple**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("acr_dm.out_of_memory  field:acr_dm.FDb.ind_tuple");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_tuple_buckets_n; i++) {
            acr_dm::FTuple* elem = _db.ind_tuple_buckets_elems[i];
            while (elem) {
                acr_dm::FTuple &row        = *elem;
                acr_dm::FTuple* next       = row.ind_tuple_next;
                u32 index          = algo::cstring_Hash(0, row.key) & (new_nbuckets-1);
                row.ind_tuple_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_tuple_buckets_elems, old_size);
        _db.ind_tuple_buckets_elems = new_buckets;
        _db.ind_tuple_buckets_n = new_nbuckets;
    }
}

// --- acr_dm.FDb.attr.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FAttr& acr_dm::attr_Alloc() {
    acr_dm::FAttr* row = attr_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_dm.out_of_mem  field:acr_dm.FDb.attr  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_dm.FDb.attr.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FAttr* acr_dm::attr_AllocMaybe() {
    acr_dm::FAttr *row = (acr_dm::FAttr*)attr_AllocMem();
    if (row) {
        new (row) acr_dm::FAttr; // call constructor
    }
    return row;
}

// --- acr_dm.FDb.attr.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_dm::attr_AllocMem() {
    u64 new_nelems     = _db.attr_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_dm::FAttr*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.attr_lary[bsr];
        if (!lev) {
            lev=(acr_dm::FAttr*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FAttr) * (u64(1)<<bsr));
            _db.attr_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.attr_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_dm.FDb.attr.RemoveAll
// Remove all elements from Lary
void acr_dm::attr_RemoveAll() {
    for (u64 n = _db.attr_n; n>0; ) {
        n--;
        attr_qFind(u64(n)).~FAttr(); // destroy last element
        _db.attr_n = i32(n);
    }
}

// --- acr_dm.FDb.attr.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_dm::attr_RemoveLast() {
    u64 n = _db.attr_n;
    if (n > 0) {
        n -= 1;
        attr_qFind(u64(n)).~FAttr();
        _db.attr_n = i32(n);
    }
}

// --- acr_dm.FDb.attr.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_dm::attr_XrefMaybe(acr_dm::FAttr &row) {
    bool retval = true;
    (void)row;
    acr_dm::FTuple* p_p_tuple = row.p_tuple;
    if (UNLIKELY(!p_p_tuple)) {
        algo_lib::ResetErrtext() << "acr_dm.null_ref  xref:acr_dm.FTuple.zs_attr";
        return false;
    }
    // insert attr into index zs_attr
    if (true) { // user-defined insert condition
        zs_attr_Insert(*p_p_tuple, row);
    }
    return retval;
}

// --- acr_dm.FDb.value.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
acr_dm::FValue& acr_dm::value_Alloc() {
    acr_dm::FValue* row = value_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("acr_dm.out_of_mem  field:acr_dm.FDb.value  comment:'Alloc failed'");
    }
    return *row;
}

// --- acr_dm.FDb.value.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
acr_dm::FValue* acr_dm::value_AllocMaybe() {
    acr_dm::FValue *row = (acr_dm::FValue*)value_AllocMem();
    if (row) {
        new (row) acr_dm::FValue; // call constructor
    }
    return row;
}

// --- acr_dm.FDb.value.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* acr_dm::value_AllocMem() {
    u64 new_nelems     = _db.value_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    acr_dm::FValue*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.value_lary[bsr];
        if (!lev) {
            lev=(acr_dm::FValue*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FValue) * (u64(1)<<bsr));
            _db.value_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.value_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- acr_dm.FDb.value.RemoveAll
// Remove all elements from Lary
void acr_dm::value_RemoveAll() {
    for (u64 n = _db.value_n; n>0; ) {
        n--;
        value_qFind(u64(n)).~FValue(); // destroy last element
        _db.value_n = i32(n);
    }
}

// --- acr_dm.FDb.value.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void acr_dm::value_RemoveLast() {
    u64 n = _db.value_n;
    if (n > 0) {
        n -= 1;
        value_qFind(u64(n)).~FValue();
        _db.value_n = i32(n);
    }
}

// --- acr_dm.FDb.value.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool acr_dm::value_XrefMaybe(acr_dm::FValue &row) {
    bool retval = true;
    (void)row;
    acr_dm::FAttr* p_p_attr = row.p_attr;
    if (UNLIKELY(!p_p_attr)) {
        algo_lib::ResetErrtext() << "acr_dm.null_ref  xref:acr_dm.FAttr.zs_value";
        return false;
    }
    // insert value into index zs_value
    if (true) { // user-defined insert condition
        zs_value_Insert(*p_p_attr, row);
    }
    return retval;
}

// --- acr_dm.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr acr_dm::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- acr_dm.FDb.trace.N
// Function return 1
inline static i32 acr_dm::trace_N() {
    return 1;
}

// --- acr_dm.FDb..Init
// Set all fields to initial values.
void acr_dm::FDb_Init() {
    // initialize LAry tuple (acr_dm.FDb.tuple)
    _db.tuple_n = 0;
    memset(_db.tuple_lary, 0, sizeof(_db.tuple_lary)); // zero out all level pointers
    acr_dm::FTuple* tuple_first = (acr_dm::FTuple*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FTuple) * (u64(1)<<4));
    if (!tuple_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.tuple_lary[i]  = tuple_first;
        tuple_first    += 1ULL<<i;
    }
    // initialize hash table for acr_dm::FTuple;
    _db.ind_tuple_n             	= 0; // (acr_dm.FDb.ind_tuple)
    _db.ind_tuple_buckets_n     	= 4; // (acr_dm.FDb.ind_tuple)
    _db.ind_tuple_buckets_elems 	= (acr_dm::FTuple**)algo_lib::malloc_AllocMem(sizeof(acr_dm::FTuple*)*_db.ind_tuple_buckets_n); // initial buckets (acr_dm.FDb.ind_tuple)
    if (!_db.ind_tuple_buckets_elems) {
        FatalErrorExit("out of memory"); // (acr_dm.FDb.ind_tuple)
    }
    memset(_db.ind_tuple_buckets_elems, 0, sizeof(acr_dm::FTuple*)*_db.ind_tuple_buckets_n); // (acr_dm.FDb.ind_tuple)
    // initialize LAry attr (acr_dm.FDb.attr)
    _db.attr_n = 0;
    memset(_db.attr_lary, 0, sizeof(_db.attr_lary)); // zero out all level pointers
    acr_dm::FAttr* attr_first = (acr_dm::FAttr*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FAttr) * (u64(1)<<4));
    if (!attr_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.attr_lary[i]  = attr_first;
        attr_first    += 1ULL<<i;
    }
    // initialize LAry value (acr_dm.FDb.value)
    _db.value_n = 0;
    memset(_db.value_lary, 0, sizeof(_db.value_lary)); // zero out all level pointers
    acr_dm::FValue* value_first = (acr_dm::FValue*)algo_lib::malloc_AllocMem(sizeof(acr_dm::FValue) * (u64(1)<<4));
    if (!value_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.value_lary[i]  = value_first;
        value_first    += 1ULL<<i;
    }

    acr_dm::InitReflection();
}

// --- acr_dm.FDb..Uninit
void acr_dm::FDb_Uninit() {
    acr_dm::FDb &row = _db; (void)row;

    // acr_dm.FDb.value.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_dm.FDb.attr.Uninit (Lary)  //
    // skip destruction in global scope

    // acr_dm.FDb.ind_tuple.Uninit (Thash)  //
    // skip destruction of ind_tuple in global scope

    // acr_dm.FDb.tuple.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- acr_dm.Source.source_bitcurs.Next
// proceed to next item
void acr_dm::Source_source_bitcurs_Next(Source_source_bitcurs &curs) {
    ++curs.bit;
    int index = curs.bit / 8;
    int offset = curs.bit % 8;
    for (; index < curs.n_elems; ++index, offset = 0) {
        u64 rest = curs.elems[index] >> offset;
        if (rest) {
            offset += algo::u64_BitScanForward(rest);
            break;
        }
    }
    curs.bit = index * 8 + offset;
}

// --- acr_dm.Source.source_bitcurs.Reset
void acr_dm::Source_source_bitcurs_Reset(Source_source_bitcurs &curs, acr_dm::Source &parent) {
    curs.elems = &source_qFind(parent,0);
    curs.n_elems = source_N(parent);
    curs.bit = -1;
    Source_source_bitcurs_Next(curs);
}

// --- acr_dm.FTuple.zs_attr.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void acr_dm::zs_attr_Insert(acr_dm::FTuple& tuple, acr_dm::FAttr& row) {
    if (!zs_attr_InLlistQ(row)) {
        acr_dm::FAttr* old_tail       = tuple.zs_attr_tail;
        row.zs_attr_next  = NULL;
        tuple.zs_attr_tail = &row;
        acr_dm::FAttr **new_row_a = &old_tail->zs_attr_next;
        acr_dm::FAttr **new_row_b = &tuple.zs_attr_head;
        acr_dm::FAttr **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        tuple.zs_attr_n++;
    }
}

// --- acr_dm.FTuple.zs_attr.Remove
// Remove element from index. If element is not in index, do nothing.
// Since the list is singly-linked, use linear search to locate the element.
void acr_dm::zs_attr_Remove(acr_dm::FTuple& tuple, acr_dm::FAttr& row) {
    if (zs_attr_InLlistQ(row)) {
        acr_dm::FAttr* old_head       = tuple.zs_attr_head;
        (void)old_head; // in case it's not used
        acr_dm::FAttr* prev=NULL;
        acr_dm::FAttr* cur     = tuple.zs_attr_head;
        while (cur) {  // search for element by pointer
            acr_dm::FAttr* next = cur->zs_attr_next;
            if (cur == &row) {
                tuple.zs_attr_n--;  // adjust count

                if (!next) {
                    tuple.zs_attr_tail = prev;  // adjust tail pointer
                }
                // disconnect element from linked list
                if (prev) {
                    prev->zs_attr_next = next;
                } else {
                    tuple.zs_attr_head = next;
                }
                row.zs_attr_next = (acr_dm::FAttr*)-1; // not-in-list
                break;
            }
            prev = cur;
            cur  = next;
        }
    }
}

// --- acr_dm.FTuple.zs_attr.RemoveAll
// Empty the index. (The rows are not deleted)
void acr_dm::zs_attr_RemoveAll(acr_dm::FTuple& tuple) {
    acr_dm::FAttr* row = tuple.zs_attr_head;
    tuple.zs_attr_head = NULL;
    tuple.zs_attr_tail = NULL;
    tuple.zs_attr_n = 0;
    while (row) {
        acr_dm::FAttr* row_next = row->zs_attr_next;
        row->zs_attr_next  = (acr_dm::FAttr*)-1;
        row = row_next;
    }
}

// --- acr_dm.FTuple.zs_attr.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
acr_dm::FAttr* acr_dm::zs_attr_RemoveFirst(acr_dm::FTuple& tuple) {
    acr_dm::FAttr *row = NULL;
    row = tuple.zs_attr_head;
    if (row) {
        acr_dm::FAttr *next = row->zs_attr_next;
        tuple.zs_attr_head = next;
        // clear list's tail pointer if list is empty.
        if (!next) {
            tuple.zs_attr_tail = NULL;
        }
        tuple.zs_attr_n--;
        row->zs_attr_next = (acr_dm::FAttr*)-1; // mark as not-in-list
    }
    return row;
}

// --- acr_dm.FTuple..Uninit
void acr_dm::FTuple_Uninit(acr_dm::FTuple& tuple) {
    acr_dm::FTuple &row = tuple; (void)row;
    ind_tuple_Remove(row); // remove tuple from index ind_tuple
}

// --- acr_dm.FValue..Uninit
void acr_dm::FValue_Uninit(acr_dm::FValue& value) {
    acr_dm::FValue &row = value; (void)row;
    acr_dm::FAttr* p_p_attr = row.p_attr;
    if (p_p_attr)  {
        zs_value_Remove(*p_p_attr, row);// remove value from index zs_value
    }
}

// --- acr_dm.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* acr_dm::value_ToCstr(const acr_dm::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case acr_dm_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- acr_dm.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void acr_dm::value_Print(const acr_dm::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- acr_dm.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool acr_dm::value_SetStrptrMaybe(acr_dm::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,acr_dm_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- acr_dm.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void acr_dm::value_SetStrptr(acr_dm::FieldId& parent, algo::strptr rhs, acr_dm_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- acr_dm.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool acr_dm::value_ReadStrptrMaybe(acr_dm::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- acr_dm.FieldId..ReadStrptrMaybe
// Read fields of acr_dm::FieldId from an ascii string.
// The format of the string is the format of the acr_dm::FieldId's only field
bool acr_dm::FieldId_ReadStrptrMaybe(acr_dm::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- acr_dm.FieldId..Print
// print string representation of acr_dm::FieldId to string LHS, no header -- cprint:acr_dm.FieldId.String
void acr_dm::FieldId_Print(acr_dm::FieldId & row, algo::cstring &str) {
    acr_dm::value_Print(row, str);
}

// --- acr_dm...SizeCheck
inline static void acr_dm::SizeCheck() {
}

// --- acr_dm...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        acr_dm::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        acr_dm::ReadArgv(); // dmmeta.main:acr_dm
        acr_dm::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("acr_dm.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        acr_dm::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- acr_dm...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
