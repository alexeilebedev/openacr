//
// cpp/gen/lib_fm_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lib_fm_gen.h"
#include "include/gen/lib_fm_gen.inl.h"
#include "include/gen/fmdb_gen.h"
#include "include/gen/fmdb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/fm_gen.h"
#include "include/gen/fm_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude
namespace lib_fm { // gen:ns_gsymbol
    const char* fmdb_alm_code_TEST_EXER("TEST-EXER");
} // gen:ns_gsymbol
namespace lib_fm { // gen:ns_gsymbol
    const char* fmdb_alm_objtype_SYS("SYS");
} // gen:ns_gsymbol
namespace lib_fm { // gen:ns_gsymbol
    const char* fmdb_alm_source_UnitTest("UnitTest");
} // gen:ns_gsymbol
namespace lib_fm { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:lib_fm.FDb._db.InitReflection
    static void          InitReflection();
    // func:lib_fm.FDb.alm_code.InputMaybe
    static bool          alm_code_InputMaybe(fmdb::AlmCode &elem) __attribute__((nothrow));
    // func:lib_fm.FDb.alm_objtype.InputMaybe
    static bool          alm_objtype_InputMaybe(fmdb::AlmObjtype &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:lib_fm.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:lib_fm.FDb.trace.N
    inline static i32    trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:lib_fm...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- lib_fm.FAlarm.base.CopyOut
// Copy fields out of row
void lib_fm::alarm_CopyOut(lib_fm::FAlarm &row, fmdb::Alarm &out) {
    out.alarm = row.alarm;
    out.flag = row.flag;
    out.severity = row.severity;
    out.n_occurred = row.n_occurred;
    out.first_time = row.first_time;
    out.last_time = row.last_time;
    out.clear_time = row.clear_time;
    out.update_time = row.update_time;
    out.objtype_summary = row.objtype_summary;
    out.summary = row.summary;
    out.description = row.description;
    out.source = row.source;
}

// --- lib_fm.FAlarm.base.CopyIn
// Copy fields in to row
void lib_fm::alarm_CopyIn(lib_fm::FAlarm &row, fmdb::Alarm &in) {
    row.alarm = in.alarm;
    row.flag = in.flag;
    row.severity = in.severity;
    row.n_occurred = in.n_occurred;
    row.first_time = in.first_time;
    row.last_time = in.last_time;
    row.clear_time = in.clear_time;
    row.update_time = in.update_time;
    row.objtype_summary = in.objtype_summary;
    row.summary = in.summary;
    row.description = in.description;
    row.source = in.source;
}

// --- lib_fm.FAlarm.code.Get
fm::Code lib_fm::code_Get(lib_fm::FAlarm& alarm) {
    fm::Code ret(algo::Pathcomp(alarm.alarm, "@LL"));
    return ret;
}

// --- lib_fm.FAlarm.object.Get
algo::Smallstr200 lib_fm::object_Get(lib_fm::FAlarm& alarm) {
    algo::Smallstr200 ret(algo::Pathcomp(alarm.alarm, "@LR"));
    return ret;
}

// --- lib_fm.FAlarm.objtype.Get
fm::Objtype lib_fm::objtype_Get(lib_fm::FAlarm& alarm) {
    fm::Objtype ret(algo::Pathcomp(object_Get(alarm), ".LL"));
    return ret;
}

// --- lib_fm.FAlarm.objinst.Get
fm::Objinst lib_fm::objinst_Get(lib_fm::FAlarm& alarm) {
    fm::Objinst ret(algo::Pathcomp(object_Get(alarm), ".LR"));
    return ret;
}

// --- lib_fm.FAlarm.objprefix.Get
algo::Smallstr50 lib_fm::objprefix_Get(lib_fm::FAlarm& alarm) {
    algo::Smallstr50 ret(algo::Pathcomp(objinst_Get(alarm), ".LL"));
    return ret;
}

// --- lib_fm.FAlarm..Init
// Set all fields to initial values.
void lib_fm::FAlarm_Init(lib_fm::FAlarm& alarm) {
    alarm.n_occurred = i32(0);
    alarm.ind_alarm_next = (lib_fm::FAlarm*)-1; // (lib_fm.FDb.ind_alarm) not-in-hash
}

// --- lib_fm.FAlarm..Uninit
void lib_fm::FAlarm_Uninit(lib_fm::FAlarm& alarm) {
    lib_fm::FAlarm &row = alarm; (void)row;
    ind_alarm_Remove(row); // remove alarm from index ind_alarm
}

// --- lib_fm.FAlmCode.base.CopyOut
// Copy fields out of row
void lib_fm::alm_code_CopyOut(lib_fm::FAlmCode &row, fmdb::AlmCode &out) {
    out.alm_code = row.alm_code;
    out.severity = row.severity;
    out.source = row.source;
    out.summary = row.summary;
}

// --- lib_fm.FAlmCode.base.CopyIn
// Copy fields in to row
void lib_fm::alm_code_CopyIn(lib_fm::FAlmCode &row, fmdb::AlmCode &in) {
    row.alm_code = in.alm_code;
    row.severity = in.severity;
    row.source = in.source;
    row.summary = in.summary;
}

// --- lib_fm.FAlmCode..Uninit
void lib_fm::FAlmCode_Uninit(lib_fm::FAlmCode& alm_code) {
    lib_fm::FAlmCode &row = alm_code; (void)row;
    ind_alm_code_Remove(row); // remove alm_code from index ind_alm_code
}

// --- lib_fm.FAlmObjtype.base.CopyOut
// Copy fields out of row
void lib_fm::alm_objtype_CopyOut(lib_fm::FAlmObjtype &row, fmdb::AlmObjtype &out) {
    out.alm_objtype = row.alm_objtype;
    out.summary = row.summary;
}

// --- lib_fm.FAlmObjtype.base.CopyIn
// Copy fields in to row
void lib_fm::alm_objtype_CopyIn(lib_fm::FAlmObjtype &row, fmdb::AlmObjtype &in) {
    row.alm_objtype = in.alm_objtype;
    row.summary = in.summary;
}

// --- lib_fm.FAlmObjtype..Uninit
void lib_fm::FAlmObjtype_Uninit(lib_fm::FAlmObjtype& alm_objtype) {
    lib_fm::FAlmObjtype &row = alm_objtype; (void)row;
    ind_alm_objtype_Remove(row); // remove alm_objtype from index ind_alm_objtype
}

// --- lib_fm.trace..Print
// print string representation of ROW to string STR
// cfmt:lib_fm.trace.String  printfmt:Tuple
void lib_fm::trace_Print(lib_fm::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "lib_fm.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- lib_fm.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void lib_fm::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("lib_fm", lib_fm::InsertStrptrMaybe, NULL, NULL, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "lib_fm.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(lib_fm::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)lib_fm::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'lib_fm.Input'  signature:'31fbf0507fb2ed9da38949e132b768cb72b6de2b'");
}

// --- lib_fm.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool lib_fm::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    lib_fm::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case lib_fm_TableId_fmdb_AlmCode: { // finput:lib_fm.FDb.alm_code
            fmdb::AlmCode elem;
            retval = fmdb::AlmCode_ReadStrptrMaybe(elem, str);
            retval = retval && alm_code_InputMaybe(elem);
            break;
        }
        case lib_fm_TableId_fmdb_AlmObjtype: { // finput:lib_fm.FDb.alm_objtype
            fmdb::AlmObjtype elem;
            retval = fmdb::AlmObjtype_ReadStrptrMaybe(elem, str);
            retval = retval && alm_objtype_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- lib_fm.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool lib_fm::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = lib_fm::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = lib_fm::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && lib_fm::LoadTuplesFile(algo::SsimFname(root,"fmdb.alm_objtype"),recursive);
        retval = retval && lib_fm::LoadTuplesFile(algo::SsimFname(root,"fmdb.alm_code"),recursive);
        retval = retval && lib_fm::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- lib_fm.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool lib_fm::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- lib_fm.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool lib_fm::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && lib_fm::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- lib_fm.FDb._db.SaveTuples
// Save ssim data to given directory.
u32 lib_fm::SaveTuples(algo::strptr root) {
    u32 retval = 0;
    u32 nbefore = algo_lib::_db.stringtofile_nwrite;
    (void)alarm_SaveSsimfile(SsimFname(root, "fmdb.alarm"));
    retval = algo_lib::_db.stringtofile_nwrite - nbefore;
    return retval;
}

// --- lib_fm.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool lib_fm::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = lib_fm::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- lib_fm.FDb._db.Steps
// Calls Step function of dependencies
void lib_fm::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- lib_fm.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_fm::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- lib_fm.FDb.alarm.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_fm::FAlarm& lib_fm::alarm_Alloc() {
    lib_fm::FAlarm* row = alarm_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_fm.out_of_mem  field:lib_fm.FDb.alarm  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_fm.FDb.alarm.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_fm::FAlarm* lib_fm::alarm_AllocMaybe() {
    lib_fm::FAlarm *row = (lib_fm::FAlarm*)alarm_AllocMem();
    if (row) {
        new (row) lib_fm::FAlarm; // call constructor
    }
    return row;
}

// --- lib_fm.FDb.alarm.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_fm::FAlarm* lib_fm::alarm_InsertMaybe(const fmdb::Alarm &value) {
    lib_fm::FAlarm *row = &alarm_Alloc(); // if out of memory, process dies. if input error, return NULL.
    alarm_CopyIn(*row,const_cast<fmdb::Alarm&>(value));
    bool ok = alarm_XrefMaybe(*row); // this may return false
    if (!ok) {
        alarm_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_fm.FDb.alarm.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_fm::alarm_AllocMem() {
    u64 new_nelems     = _db.alarm_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_fm::FAlarm*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.alarm_lary[bsr];
        if (!lev) {
            lev=(lib_fm::FAlarm*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlarm) * (u64(1)<<bsr));
            _db.alarm_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.alarm_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_fm.FDb.alarm.RemoveAll
// Remove all elements from Lary
void lib_fm::alarm_RemoveAll() {
    for (u64 n = _db.alarm_n; n>0; ) {
        n--;
        alarm_qFind(u64(n)).~FAlarm(); // destroy last element
        _db.alarm_n = i32(n);
    }
}

// --- lib_fm.FDb.alarm.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_fm::alarm_RemoveLast() {
    u64 n = _db.alarm_n;
    if (n > 0) {
        n -= 1;
        alarm_qFind(u64(n)).~FAlarm();
        _db.alarm_n = i32(n);
    }
}

// --- lib_fm.FDb.alarm.SaveSsimfile
// Save table to ssimfile
bool lib_fm::alarm_SaveSsimfile(algo::strptr fname) {
    cstring text;
    ind_beg(lib_fm::_db_alarm_curs, alarm, lib_fm::_db) {
        fmdb::Alarm out;
        alarm_CopyOut(alarm, out);
        fmdb::Alarm_Print(out, text);
        text << eol;
    }ind_end;
    (void)algo::CreateDirRecurse(algo::GetDirName(fname));
    // it is a silent error if the file cannot be saved.
    return algo::SafeStringToFile(text, fname);
}

// --- lib_fm.FDb.alarm.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_fm::alarm_XrefMaybe(lib_fm::FAlarm &row) {
    bool retval = true;
    (void)row;
    // insert alarm into index ind_alarm
    if (true) { // user-defined insert condition
        bool success = ind_alarm_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_fm.duplicate_key  xref:lib_fm.FDb.ind_alarm"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alarm.Find
// Find row by key. Return NULL if not found.
lib_fm::FAlarm* lib_fm::ind_alarm_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_alarm_buckets_n - 1);
    lib_fm::FAlarm* *e = &_db.ind_alarm_buckets_elems[index];
    lib_fm::FAlarm* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).alarm == key;
        if (done) break;
        e         = &ret->ind_alarm_next;
    } while (true);
    return ret;
}

// --- lib_fm.FDb.ind_alarm.FindX
// Look up row by key and return reference. Throw exception if not found
lib_fm::FAlarm& lib_fm::ind_alarm_FindX(const algo::strptr& key) {
    lib_fm::FAlarm* ret = ind_alarm_Find(key);
    vrfy(ret, tempstr() << "lib_fm.key_error  table:ind_alarm  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_fm.FDb.ind_alarm.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_fm::FAlarm& lib_fm::ind_alarm_GetOrCreate(const algo::strptr& key) {
    lib_fm::FAlarm* ret = ind_alarm_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &alarm_Alloc();
        (*ret).alarm = key;
        bool good = alarm_XrefMaybe(*ret);
        if (!good) {
            alarm_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "lib_fm.create_error  table:ind_alarm  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- lib_fm.FDb.ind_alarm.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_fm::ind_alarm_InsertMaybe(lib_fm::FAlarm& row) {
    ind_alarm_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_alarm_next == (lib_fm::FAlarm*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.alarm) & (_db.ind_alarm_buckets_n - 1);
        lib_fm::FAlarm* *prev = &_db.ind_alarm_buckets_elems[index];
        do {
            lib_fm::FAlarm* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).alarm == row.alarm) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_alarm_next;
        } while (true);
        if (retval) {
            row.ind_alarm_next = *prev;
            _db.ind_alarm_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alarm.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_fm::ind_alarm_Remove(lib_fm::FAlarm& row) {
    if (LIKELY(row.ind_alarm_next != (lib_fm::FAlarm*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.alarm) & (_db.ind_alarm_buckets_n - 1);
        lib_fm::FAlarm* *prev = &_db.ind_alarm_buckets_elems[index]; // addr of pointer to current element
        while (lib_fm::FAlarm *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_alarm_next; // unlink (singly linked list)
                _db.ind_alarm_n--;
                row.ind_alarm_next = (lib_fm::FAlarm*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_alarm_next;
        }
    }
}

// --- lib_fm.FDb.ind_alarm.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_fm::ind_alarm_Reserve(int n) {
    u32 old_nbuckets = _db.ind_alarm_buckets_n;
    u32 new_nelems   = _db.ind_alarm_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_fm::FAlarm*);
        u32 new_size = new_nbuckets * sizeof(lib_fm::FAlarm*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_fm::FAlarm* *new_buckets = (lib_fm::FAlarm**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_fm.out_of_memory  field:lib_fm.FDb.ind_alarm");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_alarm_buckets_n; i++) {
            lib_fm::FAlarm* elem = _db.ind_alarm_buckets_elems[i];
            while (elem) {
                lib_fm::FAlarm &row        = *elem;
                lib_fm::FAlarm* next       = row.ind_alarm_next;
                u32 index          = algo::Smallstr200_Hash(0, row.alarm) & (new_nbuckets-1);
                row.ind_alarm_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_alarm_buckets_elems, old_size);
        _db.ind_alarm_buckets_elems = new_buckets;
        _db.ind_alarm_buckets_n = new_nbuckets;
    }
}

// --- lib_fm.FDb.alm_code.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_fm::FAlmCode& lib_fm::alm_code_Alloc() {
    lib_fm::FAlmCode* row = alm_code_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_fm.out_of_mem  field:lib_fm.FDb.alm_code  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_fm.FDb.alm_code.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_fm::FAlmCode* lib_fm::alm_code_AllocMaybe() {
    lib_fm::FAlmCode *row = (lib_fm::FAlmCode*)alm_code_AllocMem();
    if (row) {
        new (row) lib_fm::FAlmCode; // call constructor
    }
    return row;
}

// --- lib_fm.FDb.alm_code.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_fm::FAlmCode* lib_fm::alm_code_InsertMaybe(const fmdb::AlmCode &value) {
    lib_fm::FAlmCode *row = &alm_code_Alloc(); // if out of memory, process dies. if input error, return NULL.
    alm_code_CopyIn(*row,const_cast<fmdb::AlmCode&>(value));
    bool ok = alm_code_XrefMaybe(*row); // this may return false
    if (!ok) {
        alm_code_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_fm.FDb.alm_code.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_fm::alm_code_AllocMem() {
    u64 new_nelems     = _db.alm_code_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_fm::FAlmCode*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.alm_code_lary[bsr];
        if (!lev) {
            lev=(lib_fm::FAlmCode*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmCode) * (u64(1)<<bsr));
            _db.alm_code_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.alm_code_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_fm.FDb.alm_code.RemoveAll
// Remove all elements from Lary
void lib_fm::alm_code_RemoveAll() {
    for (u64 n = _db.alm_code_n; n>0; ) {
        n--;
        alm_code_qFind(u64(n)).~FAlmCode(); // destroy last element
        _db.alm_code_n = i32(n);
    }
}

// --- lib_fm.FDb.alm_code.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_fm::alm_code_RemoveLast() {
    u64 n = _db.alm_code_n;
    if (n > 0) {
        n -= 1;
        alm_code_qFind(u64(n)).~FAlmCode();
        _db.alm_code_n = i32(n);
    }
}

// --- lib_fm.FDb.alm_code.InputMaybe
static bool lib_fm::alm_code_InputMaybe(fmdb::AlmCode &elem) {
    bool retval = true;
    retval = alm_code_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_fm.FDb.alm_code.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_fm::alm_code_XrefMaybe(lib_fm::FAlmCode &row) {
    bool retval = true;
    (void)row;
    // insert alm_code into index ind_alm_code
    if (true) { // user-defined insert condition
        bool success = ind_alm_code_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_fm.duplicate_key  xref:lib_fm.FDb.ind_alm_code"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alm_code.Find
// Find row by key. Return NULL if not found.
lib_fm::FAlmCode* lib_fm::ind_alm_code_Find(const algo::strptr& key) {
    u32 index = fm::Code_Hash(0, key) & (_db.ind_alm_code_buckets_n - 1);
    lib_fm::FAlmCode* *e = &_db.ind_alm_code_buckets_elems[index];
    lib_fm::FAlmCode* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).alm_code == key;
        if (done) break;
        e         = &ret->ind_alm_code_next;
    } while (true);
    return ret;
}

// --- lib_fm.FDb.ind_alm_code.FindX
// Look up row by key and return reference. Throw exception if not found
lib_fm::FAlmCode& lib_fm::ind_alm_code_FindX(const algo::strptr& key) {
    lib_fm::FAlmCode* ret = ind_alm_code_Find(key);
    vrfy(ret, tempstr() << "lib_fm.key_error  table:ind_alm_code  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_fm.FDb.ind_alm_code.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_fm::FAlmCode& lib_fm::ind_alm_code_GetOrCreate(const algo::strptr& key) {
    lib_fm::FAlmCode* ret = ind_alm_code_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &alm_code_Alloc();
        (*ret).alm_code = key;
        bool good = alm_code_XrefMaybe(*ret);
        if (!good) {
            alm_code_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "lib_fm.create_error  table:ind_alm_code  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- lib_fm.FDb.ind_alm_code.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_fm::ind_alm_code_InsertMaybe(lib_fm::FAlmCode& row) {
    ind_alm_code_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_alm_code_next == (lib_fm::FAlmCode*)-1)) {// check if in hash already
        u32 index = fm::Code_Hash(0, row.alm_code) & (_db.ind_alm_code_buckets_n - 1);
        lib_fm::FAlmCode* *prev = &_db.ind_alm_code_buckets_elems[index];
        do {
            lib_fm::FAlmCode* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).alm_code == row.alm_code) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_alm_code_next;
        } while (true);
        if (retval) {
            row.ind_alm_code_next = *prev;
            _db.ind_alm_code_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alm_code.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_fm::ind_alm_code_Remove(lib_fm::FAlmCode& row) {
    if (LIKELY(row.ind_alm_code_next != (lib_fm::FAlmCode*)-1)) {// check if in hash already
        u32 index = fm::Code_Hash(0, row.alm_code) & (_db.ind_alm_code_buckets_n - 1);
        lib_fm::FAlmCode* *prev = &_db.ind_alm_code_buckets_elems[index]; // addr of pointer to current element
        while (lib_fm::FAlmCode *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_alm_code_next; // unlink (singly linked list)
                _db.ind_alm_code_n--;
                row.ind_alm_code_next = (lib_fm::FAlmCode*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_alm_code_next;
        }
    }
}

// --- lib_fm.FDb.ind_alm_code.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_fm::ind_alm_code_Reserve(int n) {
    u32 old_nbuckets = _db.ind_alm_code_buckets_n;
    u32 new_nelems   = _db.ind_alm_code_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_fm::FAlmCode*);
        u32 new_size = new_nbuckets * sizeof(lib_fm::FAlmCode*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_fm::FAlmCode* *new_buckets = (lib_fm::FAlmCode**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_fm.out_of_memory  field:lib_fm.FDb.ind_alm_code");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_alm_code_buckets_n; i++) {
            lib_fm::FAlmCode* elem = _db.ind_alm_code_buckets_elems[i];
            while (elem) {
                lib_fm::FAlmCode &row        = *elem;
                lib_fm::FAlmCode* next       = row.ind_alm_code_next;
                u32 index          = fm::Code_Hash(0, row.alm_code) & (new_nbuckets-1);
                row.ind_alm_code_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_alm_code_buckets_elems, old_size);
        _db.ind_alm_code_buckets_elems = new_buckets;
        _db.ind_alm_code_buckets_n = new_nbuckets;
    }
}

// --- lib_fm.FDb.alm_objtype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_fm::FAlmObjtype& lib_fm::alm_objtype_Alloc() {
    lib_fm::FAlmObjtype* row = alm_objtype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_fm.out_of_mem  field:lib_fm.FDb.alm_objtype  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_fm.FDb.alm_objtype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_fm::FAlmObjtype* lib_fm::alm_objtype_AllocMaybe() {
    lib_fm::FAlmObjtype *row = (lib_fm::FAlmObjtype*)alm_objtype_AllocMem();
    if (row) {
        new (row) lib_fm::FAlmObjtype; // call constructor
    }
    return row;
}

// --- lib_fm.FDb.alm_objtype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_fm::FAlmObjtype* lib_fm::alm_objtype_InsertMaybe(const fmdb::AlmObjtype &value) {
    lib_fm::FAlmObjtype *row = &alm_objtype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    alm_objtype_CopyIn(*row,const_cast<fmdb::AlmObjtype&>(value));
    bool ok = alm_objtype_XrefMaybe(*row); // this may return false
    if (!ok) {
        alm_objtype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_fm.FDb.alm_objtype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_fm::alm_objtype_AllocMem() {
    u64 new_nelems     = _db.alm_objtype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_fm::FAlmObjtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.alm_objtype_lary[bsr];
        if (!lev) {
            lev=(lib_fm::FAlmObjtype*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmObjtype) * (u64(1)<<bsr));
            _db.alm_objtype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.alm_objtype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_fm.FDb.alm_objtype.RemoveAll
// Remove all elements from Lary
void lib_fm::alm_objtype_RemoveAll() {
    for (u64 n = _db.alm_objtype_n; n>0; ) {
        n--;
        alm_objtype_qFind(u64(n)).~FAlmObjtype(); // destroy last element
        _db.alm_objtype_n = i32(n);
    }
}

// --- lib_fm.FDb.alm_objtype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_fm::alm_objtype_RemoveLast() {
    u64 n = _db.alm_objtype_n;
    if (n > 0) {
        n -= 1;
        alm_objtype_qFind(u64(n)).~FAlmObjtype();
        _db.alm_objtype_n = i32(n);
    }
}

// --- lib_fm.FDb.alm_objtype.InputMaybe
static bool lib_fm::alm_objtype_InputMaybe(fmdb::AlmObjtype &elem) {
    bool retval = true;
    retval = alm_objtype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_fm.FDb.alm_objtype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_fm::alm_objtype_XrefMaybe(lib_fm::FAlmObjtype &row) {
    bool retval = true;
    (void)row;
    // insert alm_objtype into index ind_alm_objtype
    if (true) { // user-defined insert condition
        bool success = ind_alm_objtype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_fm.duplicate_key  xref:lib_fm.FDb.ind_alm_objtype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alm_objtype.Find
// Find row by key. Return NULL if not found.
lib_fm::FAlmObjtype* lib_fm::ind_alm_objtype_Find(const algo::strptr& key) {
    u32 index = fm::Objtype_Hash(0, key) & (_db.ind_alm_objtype_buckets_n - 1);
    lib_fm::FAlmObjtype* *e = &_db.ind_alm_objtype_buckets_elems[index];
    lib_fm::FAlmObjtype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).alm_objtype == key;
        if (done) break;
        e         = &ret->ind_alm_objtype_next;
    } while (true);
    return ret;
}

// --- lib_fm.FDb.ind_alm_objtype.FindX
// Look up row by key and return reference. Throw exception if not found
lib_fm::FAlmObjtype& lib_fm::ind_alm_objtype_FindX(const algo::strptr& key) {
    lib_fm::FAlmObjtype* ret = ind_alm_objtype_Find(key);
    vrfy(ret, tempstr() << "lib_fm.key_error  table:ind_alm_objtype  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_fm.FDb.ind_alm_objtype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_fm::FAlmObjtype& lib_fm::ind_alm_objtype_GetOrCreate(const algo::strptr& key) {
    lib_fm::FAlmObjtype* ret = ind_alm_objtype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &alm_objtype_Alloc();
        (*ret).alm_objtype = key;
        bool good = alm_objtype_XrefMaybe(*ret);
        if (!good) {
            alm_objtype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "lib_fm.create_error  table:ind_alm_objtype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- lib_fm.FDb.ind_alm_objtype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_fm::ind_alm_objtype_InsertMaybe(lib_fm::FAlmObjtype& row) {
    ind_alm_objtype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_alm_objtype_next == (lib_fm::FAlmObjtype*)-1)) {// check if in hash already
        u32 index = fm::Objtype_Hash(0, row.alm_objtype) & (_db.ind_alm_objtype_buckets_n - 1);
        lib_fm::FAlmObjtype* *prev = &_db.ind_alm_objtype_buckets_elems[index];
        do {
            lib_fm::FAlmObjtype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).alm_objtype == row.alm_objtype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_alm_objtype_next;
        } while (true);
        if (retval) {
            row.ind_alm_objtype_next = *prev;
            _db.ind_alm_objtype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_fm.FDb.ind_alm_objtype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_fm::ind_alm_objtype_Remove(lib_fm::FAlmObjtype& row) {
    if (LIKELY(row.ind_alm_objtype_next != (lib_fm::FAlmObjtype*)-1)) {// check if in hash already
        u32 index = fm::Objtype_Hash(0, row.alm_objtype) & (_db.ind_alm_objtype_buckets_n - 1);
        lib_fm::FAlmObjtype* *prev = &_db.ind_alm_objtype_buckets_elems[index]; // addr of pointer to current element
        while (lib_fm::FAlmObjtype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_alm_objtype_next; // unlink (singly linked list)
                _db.ind_alm_objtype_n--;
                row.ind_alm_objtype_next = (lib_fm::FAlmObjtype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_alm_objtype_next;
        }
    }
}

// --- lib_fm.FDb.ind_alm_objtype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_fm::ind_alm_objtype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_alm_objtype_buckets_n;
    u32 new_nelems   = _db.ind_alm_objtype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_fm::FAlmObjtype*);
        u32 new_size = new_nbuckets * sizeof(lib_fm::FAlmObjtype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_fm::FAlmObjtype* *new_buckets = (lib_fm::FAlmObjtype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_fm.out_of_memory  field:lib_fm.FDb.ind_alm_objtype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_alm_objtype_buckets_n; i++) {
            lib_fm::FAlmObjtype* elem = _db.ind_alm_objtype_buckets_elems[i];
            while (elem) {
                lib_fm::FAlmObjtype &row        = *elem;
                lib_fm::FAlmObjtype* next       = row.ind_alm_objtype_next;
                u32 index          = fm::Objtype_Hash(0, row.alm_objtype) & (new_nbuckets-1);
                row.ind_alm_objtype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_alm_objtype_buckets_elems, old_size);
        _db.ind_alm_objtype_buckets_elems = new_buckets;
        _db.ind_alm_objtype_buckets_n = new_nbuckets;
    }
}

// --- lib_fm.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr lib_fm::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- lib_fm.FDb.trace.N
// Function return 1
inline static i32 lib_fm::trace_N() {
    return 1;
}

// --- lib_fm.FDb..Init
// Set all fields to initial values.
void lib_fm::FDb_Init() {
    // initialize LAry alarm (lib_fm.FDb.alarm)
    _db.alarm_n = 0;
    memset(_db.alarm_lary, 0, sizeof(_db.alarm_lary)); // zero out all level pointers
    lib_fm::FAlarm* alarm_first = (lib_fm::FAlarm*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlarm) * (u64(1)<<4));
    if (!alarm_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.alarm_lary[i]  = alarm_first;
        alarm_first    += 1ULL<<i;
    }
    // initialize hash table for lib_fm::FAlarm;
    _db.ind_alarm_n             	= 0; // (lib_fm.FDb.ind_alarm)
    _db.ind_alarm_buckets_n     	= 4; // (lib_fm.FDb.ind_alarm)
    _db.ind_alarm_buckets_elems 	= (lib_fm::FAlarm**)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlarm*)*_db.ind_alarm_buckets_n); // initial buckets (lib_fm.FDb.ind_alarm)
    if (!_db.ind_alarm_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_fm.FDb.ind_alarm)
    }
    memset(_db.ind_alarm_buckets_elems, 0, sizeof(lib_fm::FAlarm*)*_db.ind_alarm_buckets_n); // (lib_fm.FDb.ind_alarm)
    // initialize LAry alm_code (lib_fm.FDb.alm_code)
    _db.alm_code_n = 0;
    memset(_db.alm_code_lary, 0, sizeof(_db.alm_code_lary)); // zero out all level pointers
    lib_fm::FAlmCode* alm_code_first = (lib_fm::FAlmCode*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmCode) * (u64(1)<<4));
    if (!alm_code_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.alm_code_lary[i]  = alm_code_first;
        alm_code_first    += 1ULL<<i;
    }
    // initialize hash table for lib_fm::FAlmCode;
    _db.ind_alm_code_n             	= 0; // (lib_fm.FDb.ind_alm_code)
    _db.ind_alm_code_buckets_n     	= 4; // (lib_fm.FDb.ind_alm_code)
    _db.ind_alm_code_buckets_elems 	= (lib_fm::FAlmCode**)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmCode*)*_db.ind_alm_code_buckets_n); // initial buckets (lib_fm.FDb.ind_alm_code)
    if (!_db.ind_alm_code_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_fm.FDb.ind_alm_code)
    }
    memset(_db.ind_alm_code_buckets_elems, 0, sizeof(lib_fm::FAlmCode*)*_db.ind_alm_code_buckets_n); // (lib_fm.FDb.ind_alm_code)
    // initialize LAry alm_objtype (lib_fm.FDb.alm_objtype)
    _db.alm_objtype_n = 0;
    memset(_db.alm_objtype_lary, 0, sizeof(_db.alm_objtype_lary)); // zero out all level pointers
    lib_fm::FAlmObjtype* alm_objtype_first = (lib_fm::FAlmObjtype*)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmObjtype) * (u64(1)<<4));
    if (!alm_objtype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.alm_objtype_lary[i]  = alm_objtype_first;
        alm_objtype_first    += 1ULL<<i;
    }
    // initialize hash table for lib_fm::FAlmObjtype;
    _db.ind_alm_objtype_n             	= 0; // (lib_fm.FDb.ind_alm_objtype)
    _db.ind_alm_objtype_buckets_n     	= 4; // (lib_fm.FDb.ind_alm_objtype)
    _db.ind_alm_objtype_buckets_elems 	= (lib_fm::FAlmObjtype**)algo_lib::malloc_AllocMem(sizeof(lib_fm::FAlmObjtype*)*_db.ind_alm_objtype_buckets_n); // initial buckets (lib_fm.FDb.ind_alm_objtype)
    if (!_db.ind_alm_objtype_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_fm.FDb.ind_alm_objtype)
    }
    memset(_db.ind_alm_objtype_buckets_elems, 0, sizeof(lib_fm::FAlmObjtype*)*_db.ind_alm_objtype_buckets_n); // (lib_fm.FDb.ind_alm_objtype)

    lib_fm::InitReflection();
    _db.h_alarm = NULL;
    _db.h_alarm_ctx = 0;
}

// --- lib_fm.FDb..Uninit
void lib_fm::FDb_Uninit() {
    lib_fm::FDb &row = _db; (void)row;

    // lib_fm.FDb.ind_alm_objtype.Uninit (Thash)  //
    // skip destruction of ind_alm_objtype in global scope

    // lib_fm.FDb.alm_objtype.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_fm.FDb.ind_alm_code.Uninit (Thash)  //
    // skip destruction of ind_alm_code in global scope

    // lib_fm.FDb.alm_code.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_fm.FDb.ind_alarm.Uninit (Thash)  //
    // skip destruction of ind_alarm in global scope

    // lib_fm.FDb.alarm.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- lib_fm.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_fm::value_ToCstr(const lib_fm::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_fm_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- lib_fm.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_fm::value_Print(const lib_fm::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_fm.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_fm::value_SetStrptrMaybe(lib_fm::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lib_fm_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_fm.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_fm::value_SetStrptr(lib_fm::FieldId& parent, algo::strptr rhs, lib_fm_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_fm.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_fm::value_ReadStrptrMaybe(lib_fm::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_fm.FieldId..ReadStrptrMaybe
// Read fields of lib_fm::FieldId from an ascii string.
// The format of the string is the format of the lib_fm::FieldId's only field
bool lib_fm::FieldId_ReadStrptrMaybe(lib_fm::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_fm.FieldId..Print
// print string representation of ROW to string STR
// cfmt:lib_fm.FieldId.String  printfmt:Raw
void lib_fm::FieldId_Print(lib_fm::FieldId& row, algo::cstring& str) {
    lib_fm::value_Print(row, str);
}

// --- lib_fm.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_fm::value_ToCstr(const lib_fm::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_fm_TableId_fmdb_AlmCode   : ret = "fmdb.AlmCode";  break;
        case lib_fm_TableId_fmdb_AlmObjtype: ret = "fmdb.AlmObjtype";  break;
    }
    return ret;
}

// --- lib_fm.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_fm::value_Print(const lib_fm::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_fm.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_fm::value_SetStrptrMaybe(lib_fm::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('f','m','d','b','.','A','l','m'): {
                    if (memcmp(rhs.elems+8,"Code",4)==0) { value_SetEnum(parent,lib_fm_TableId_fmdb_AlmCode); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('f','m','d','b','.','a','l','m'): {
                    if (memcmp(rhs.elems+8,"_code",5)==0) { value_SetEnum(parent,lib_fm_TableId_fmdb_alm_code); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('f','m','d','b','.','A','l','m'): {
                    if (memcmp(rhs.elems+8,"Objtype",7)==0) { value_SetEnum(parent,lib_fm_TableId_fmdb_AlmObjtype); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 16: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('f','m','d','b','.','a','l','m'): {
                    if (memcmp(rhs.elems+8,"_objtype",8)==0) { value_SetEnum(parent,lib_fm_TableId_fmdb_alm_objtype); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_fm.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_fm::value_SetStrptr(lib_fm::TableId& parent, algo::strptr rhs, lib_fm_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_fm.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_fm::value_ReadStrptrMaybe(lib_fm::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_fm.TableId..ReadStrptrMaybe
// Read fields of lib_fm::TableId from an ascii string.
// The format of the string is the format of the lib_fm::TableId's only field
bool lib_fm::TableId_ReadStrptrMaybe(lib_fm::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_fm.TableId..Print
// print string representation of ROW to string STR
// cfmt:lib_fm.TableId.String  printfmt:Raw
void lib_fm::TableId_Print(lib_fm::TableId& row, algo::cstring& str) {
    lib_fm::value_Print(row, str);
}

// --- lib_fm...SizeCheck
inline static void lib_fm::SizeCheck() {
}

// --- lib_fm...StaticCheck
void lib_fm::StaticCheck() {
    algo_assert(sizeof(lib_fm::_db_h_alarm_hook) == 8); // csize:lib_fm._db_h_alarm_hook
    algo_assert(_offset_of(lib_fm::FieldId, value) + sizeof(((lib_fm::FieldId*)0)->value) == sizeof(lib_fm::FieldId));
}
