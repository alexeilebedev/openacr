//
// cpp/gen/gcache_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/gcache_gen.h"
#include "include/gen/gcache_gen.inl.h"
#include "include/gen/report_gen.h"
#include "include/gen/report_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
gcache::FDb     gcache::_db;      // dependency found via dev.targdep

namespace gcache {
const char *gcache_help =
"gcache: Compiler cache\n"
"Usage: gcache [[-cmd:]<string>] [options]\n"
"    OPTION      TYPE    DFLT           COMMENT\n"
"    -in         string  \"data\"         Input directory or filename, - for stdin\n"
"    [cmd]...    string                 Command to execute\n"
"    -install                           Create gcache directory and enable gcache\n"
"    -stats                             Show cache stats\n"
"    -enable                            Create .gcache link to enable gcache use\n"
"    -disable                           Remove .gcache link to disable gcache\n"
"    -gc                                Clean old files from .gcache\n"
"    -clean                             Clean the entire cache\n"
"    -dir        string  \"/tmp/gcache\"  (With -install,-enable) cache directory\n"
"    -hitrate                           Report hit rate (specify start time with -after)\n"
"    -after      string                 Start time for reporting\n"
"    -report                            Show end-of-run report\n"
"    -force                             Force recompile and update cache\n"
"    -verbose    int                    Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int                    Debug level (0..255); alias -d; cumulative\n"
"    -help                              Print help and exit; alias -h\n"
"    -version                           Print version and exit\n"
"    -signature                         Show signatures and exit; alias -sig\n"
;


} // namespace gcache
namespace gcache { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:gcache.FDb._db.InitReflection
    static void          InitReflection();
    // find trace by row id (used to implement reflection)
    // func:gcache.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:gcache.FDb.trace.N
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:gcache...SizeCheck
    static void          SizeCheck();
} // gen:ns_print_proto

// --- gcache.cleanreport..ReadFieldMaybe
bool gcache::cleanreport_ReadFieldMaybe(gcache::cleanreport& parent, algo::strptr field, algo::strptr strval) {
    bool retval = true;
    gcache::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case gcache_FieldId_n_cachefile: {
            retval = i32_ReadStrptrMaybe(parent.n_cachefile, strval);
            break;
        }
        case gcache_FieldId_n_cachefile_del: {
            retval = i32_ReadStrptrMaybe(parent.n_cachefile_del, strval);
            break;
        }
        case gcache_FieldId_n_cachefile_recent: {
            retval = i32_ReadStrptrMaybe(parent.n_cachefile_recent, strval);
            break;
        }
        case gcache_FieldId_n_logline: {
            retval = i32_ReadStrptrMaybe(parent.n_logline, strval);
            break;
        }
        case gcache_FieldId_n_logline_del: {
            retval = i32_ReadStrptrMaybe(parent.n_logline_del, strval);
            break;
        }
        case gcache_FieldId_new_cachesize_mb: {
            retval = i64_ReadStrptrMaybe(parent.new_cachesize_mb, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- gcache.cleanreport..ReadStrptrMaybe
// Read fields of gcache::cleanreport from an ascii string.
// The format of the string is an ssim Tuple
bool gcache::cleanreport_ReadStrptrMaybe(gcache::cleanreport &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "gcache.cleanreport");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && cleanreport_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- gcache.cleanreport..Print
// print string representation of ROW to string STR
// cfmt:gcache.cleanreport.String  printfmt:Tuple
void gcache::cleanreport_Print(gcache::cleanreport& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "gcache.cleanreport";

    i32_Print(row.n_cachefile, temp);
    PrintAttrSpaceReset(str,"n_cachefile", temp);

    i32_Print(row.n_cachefile_del, temp);
    PrintAttrSpaceReset(str,"n_cachefile_del", temp);

    i32_Print(row.n_cachefile_recent, temp);
    PrintAttrSpaceReset(str,"n_cachefile_recent", temp);

    i32_Print(row.n_logline, temp);
    PrintAttrSpaceReset(str,"n_logline", temp);

    i32_Print(row.n_logline_del, temp);
    PrintAttrSpaceReset(str,"n_logline_del", temp);

    i64_Print(row.new_cachesize_mb, temp);
    PrintAttrSpaceReset(str,"new_cachesize_mb", temp);
}

// --- gcache.trace..Print
// print string representation of ROW to string STR
// cfmt:gcache.trace.String  printfmt:Tuple
void gcache::trace_Print(gcache::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "gcache.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- gcache.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     gcache.FDb.cmdline
//     algo_lib.FDb.cmdline
void gcache::ReadArgv() {
    command::gcache &cmd = gcache::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::gcache_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::gcache_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"gcache: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"gcache: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::gcache_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "gcache: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::gcache_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"gcache: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:gcache.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!gcache::LoadTuplesMaybe(cmd.in,true)) {
            err << "gcache.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(gcache_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- gcache.FDb._db.MainLoop
// Main loop.
void gcache::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        gcache::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- gcache.FDb._db.Step
// Main step
void gcache::Step() {
}

// --- gcache.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void gcache::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("gcache", NULL, NULL, gcache::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "gcache.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(gcache::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)gcache::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- gcache.FDb._db.StaticCheck
void gcache::StaticCheck() {
    algo_assert(_offset_of(gcache::FieldId, value) + sizeof(((gcache::FieldId*)0)->value) == sizeof(gcache::FieldId));
}

// --- gcache.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool gcache::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- gcache.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool gcache::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = gcache::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = gcache::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && gcache::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- gcache.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool gcache::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- gcache.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool gcache::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- gcache.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool gcache::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = gcache::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- gcache.FDb._db.Steps
// Calls Step function of dependencies
void gcache::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- gcache.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool gcache::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- gcache.FDb.header.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
gcache::FHeader& gcache::header_Alloc() {
    gcache::FHeader* row = header_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("gcache.out_of_mem  field:gcache.FDb.header  comment:'Alloc failed'");
    }
    return *row;
}

// --- gcache.FDb.header.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
gcache::FHeader* gcache::header_AllocMaybe() {
    gcache::FHeader *row = (gcache::FHeader*)header_AllocMem();
    if (row) {
        new (row) gcache::FHeader; // call constructor
    }
    return row;
}

// --- gcache.FDb.header.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* gcache::header_AllocMem() {
    u64 new_nelems     = _db.header_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    gcache::FHeader*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.header_lary[bsr];
        if (!lev) {
            lev=(gcache::FHeader*)algo_lib::malloc_AllocMem(sizeof(gcache::FHeader) * (u64(1)<<bsr));
            _db.header_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.header_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- gcache.FDb.header.RemoveAll
// Remove all elements from Lary
void gcache::header_RemoveAll() {
    for (u64 n = _db.header_n; n>0; ) {
        n--;
        header_qFind(u64(n)).~FHeader(); // destroy last element
        _db.header_n = i32(n);
    }
}

// --- gcache.FDb.header.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void gcache::header_RemoveLast() {
    u64 n = _db.header_n;
    if (n > 0) {
        n -= 1;
        header_qFind(u64(n)).~FHeader();
        _db.header_n = i32(n);
    }
}

// --- gcache.FDb.header.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool gcache::header_XrefMaybe(gcache::FHeader &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- gcache.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr gcache::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- gcache.FDb.trace.N
// Function return 1
inline static i32 gcache::trace_N() {
    return 1;
}

// --- gcache.FDb..Init
// Set all fields to initial values.
void gcache::FDb_Init() {
    _db.do_not_compile = bool(false);
    _db.do_not_link = bool(false);
    _db.do_not_assemble = bool(false);
    // initialize LAry header (gcache.FDb.header)
    _db.header_n = 0;
    memset(_db.header_lary, 0, sizeof(_db.header_lary)); // zero out all level pointers
    gcache::FHeader* header_first = (gcache::FHeader*)algo_lib::malloc_AllocMem(sizeof(gcache::FHeader) * (u64(1)<<4));
    if (!header_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.header_lary[i]  = header_first;
        header_first    += 1ULL<<i;
    }

    gcache::InitReflection();
}

// --- gcache.FDb..Uninit
void gcache::FDb_Uninit() {
    gcache::FDb &row = _db; (void)row;

    // gcache.FDb.header.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- gcache.FHeader..Print
// print string representation of ROW to string STR
// cfmt:gcache.FHeader.String  printfmt:Tuple
void gcache::FHeader_Print(gcache::FHeader& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "gcache.FHeader";

    u64_PrintHex(u64(row.parent), temp, 8, true);
    PrintAttrSpaceReset(str,"parent", temp);

    algo::cstring_Print(row.name, temp);
    PrintAttrSpaceReset(str,"name", temp);

    i32_Print(row.begin, temp);
    PrintAttrSpaceReset(str,"begin", temp);

    i32_Print(row.inner_end, temp);
    PrintAttrSpaceReset(str,"inner_end", temp);

    i32_Print(row.outer_end, temp);
    PrintAttrSpaceReset(str,"outer_end", temp);

    bool_Print(row.mlines_before, temp);
    PrintAttrSpaceReset(str,"mlines_before", temp);
}

// --- gcache.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* gcache::value_ToCstr(const gcache::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case gcache_FieldId_n_cachefile    : ret = "n_cachefile";  break;
        case gcache_FieldId_n_cachefile_del: ret = "n_cachefile_del";  break;
        case gcache_FieldId_n_cachefile_recent: ret = "n_cachefile_recent";  break;
        case gcache_FieldId_n_logline      : ret = "n_logline";  break;
        case gcache_FieldId_n_logline_del  : ret = "n_logline_del";  break;
        case gcache_FieldId_new_cachesize_mb: ret = "new_cachesize_mb";  break;
        case gcache_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- gcache.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void gcache::value_Print(const gcache::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- gcache.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool gcache::value_SetStrptrMaybe(gcache::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,gcache_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','_','l','o','g','l','i','n'): {
                    if (memcmp(rhs.elems+8,"e",1)==0) { value_SetEnum(parent,gcache_FieldId_n_logline); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','_','c','a','c','h','e','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,gcache_FieldId_n_cachefile); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','_','l','o','g','l','i','n'): {
                    if (memcmp(rhs.elems+8,"e_del",5)==0) { value_SetEnum(parent,gcache_FieldId_n_logline_del); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','_','c','a','c','h','e','f'): {
                    if (memcmp(rhs.elems+8,"ile_del",7)==0) { value_SetEnum(parent,gcache_FieldId_n_cachefile_del); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 16: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','e','w','_','c','a','c','h'): {
                    if (memcmp(rhs.elems+8,"esize_mb",8)==0) { value_SetEnum(parent,gcache_FieldId_new_cachesize_mb); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 18: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('n','_','c','a','c','h','e','f'): {
                    if (memcmp(rhs.elems+8,"ile_recent",10)==0) { value_SetEnum(parent,gcache_FieldId_n_cachefile_recent); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- gcache.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void gcache::value_SetStrptr(gcache::FieldId& parent, algo::strptr rhs, gcache_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- gcache.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool gcache::value_ReadStrptrMaybe(gcache::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- gcache.FieldId..ReadStrptrMaybe
// Read fields of gcache::FieldId from an ascii string.
// The format of the string is the format of the gcache::FieldId's only field
bool gcache::FieldId_ReadStrptrMaybe(gcache::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- gcache.FieldId..Print
// print string representation of ROW to string STR
// cfmt:gcache.FieldId.String  printfmt:Raw
void gcache::FieldId_Print(gcache::FieldId& row, algo::cstring& str) {
    gcache::value_Print(row, str);
}

// --- gcache...SizeCheck
inline static void gcache::SizeCheck() {
}

// --- gcache...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        gcache::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        gcache::ReadArgv(); // dmmeta.main:gcache
        gcache::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("gcache.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        gcache::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- gcache...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
