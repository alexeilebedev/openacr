//
// cpp/gen/lib_exec_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lib_exec_gen.h"
#include "include/gen/lib_exec_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude
namespace lib_exec {
const char *lib_exec_help =
"lib_exec: Build and run a dag of subprocesses with N parallel jobs\n"
"Usage: lib_exec [options]\n"
"    -dry_run        . default: false\n"
"    -q              Do not print node name. default: true\n"
"    -maxjobs   int  Maximum number of parallel jobs. default: 8\n"
"    -complooo       . default: false\n"
"    -verbose        Enable verbose mode\n"
"    -debug          Enable debug mode\n"
"    -version        Show version information\n"
"    -sig            Print SHA1 signatures for dispatches\n"
"    -help           Print this screen and exit\n"
;


const char *lib_exec_syntax =
"-dry_run:flag\n"
" -q:flag=true\n"
" -maxjobs:int=8\n"
" -complooo:flag\n"
;
} // namespace lib_exec
lib_exec::_db_bh_syscmd_curs::~_db_bh_syscmd_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace lib_exec { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    static int           bh_syscmd_Downheap(lib_exec::FSyscmd& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    static int           bh_syscmd_Upheap(lib_exec::FSyscmd& row, int idx) __attribute__((nothrow));
    static bool          bh_syscmd_ElemLt(lib_exec::FSyscmd &a, lib_exec::FSyscmd &b) __attribute__((nothrow));
    static void          _db_bh_syscmd_curs_Add(_db_bh_syscmd_curs &curs, lib_exec::FSyscmd& row);
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- lib_exec.trace..Print
// print string representation of lib_exec::trace to string LHS, no header -- cprint:lib_exec.trace.String
void lib_exec::trace_Print(lib_exec::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_exec.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- lib_exec.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void lib_exec::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("lib_exec", NULL, NULL, NULL, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "lib_exec.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(lib_exec::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)lib_exec::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- lib_exec.FDb._db.StaticCheck
void lib_exec::StaticCheck() {
    algo_assert(_offset_of(lib_exec::FieldId, value) + sizeof(((lib_exec::FieldId*)0)->value) == sizeof(lib_exec::FieldId));
}

// --- lib_exec.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool lib_exec::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- lib_exec.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool lib_exec::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    (void)root;//only to avoid -Wunused-parameter
    return retval;
}

// --- lib_exec.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool lib_exec::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, lib_exec::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- lib_exec.FDb._db.Steps
// Calls Step function of dependencies
void lib_exec::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- lib_exec.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_exec::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- lib_exec.FDb.syscmddep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_exec::FSyscmddep& lib_exec::syscmddep_Alloc() {
    lib_exec::FSyscmddep* row = syscmddep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_exec.out_of_mem  field:lib_exec.FDb.syscmddep  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_exec.FDb.syscmddep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_exec::FSyscmddep* lib_exec::syscmddep_AllocMaybe() {
    lib_exec::FSyscmddep *row = (lib_exec::FSyscmddep*)syscmddep_AllocMem();
    if (row) {
        new (row) lib_exec::FSyscmddep; // call constructor
    }
    return row;
}

// --- lib_exec.FDb.syscmddep.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_exec::FSyscmddep* lib_exec::syscmddep_InsertMaybe(const dev::Syscmddep &value) {
    lib_exec::FSyscmddep *row = &syscmddep_Alloc(); // if out of memory, process dies. if input error, return NULL.
    syscmddep_CopyIn(*row,const_cast<dev::Syscmddep&>(value));
    bool ok = syscmddep_XrefMaybe(*row); // this may return false
    if (!ok) {
        syscmddep_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_exec.FDb.syscmddep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_exec::syscmddep_AllocMem() {
    u64 new_nelems     = _db.syscmddep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_exec::FSyscmddep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.syscmddep_lary[bsr];
        if (!lev) {
            lev=(lib_exec::FSyscmddep*)algo_lib::malloc_AllocMem(sizeof(lib_exec::FSyscmddep) * (u64(1)<<bsr));
            _db.syscmddep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.syscmddep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_exec.FDb.syscmddep.RemoveAll
// Remove all elements from Lary
void lib_exec::syscmddep_RemoveAll() {
    for (u64 n = _db.syscmddep_n; n>0; ) {
        n--;
        syscmddep_qFind(u64(n)).~FSyscmddep(); // destroy last element
        _db.syscmddep_n = i32(n);
    }
}

// --- lib_exec.FDb.syscmddep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_exec::syscmddep_RemoveLast() {
    u64 n = _db.syscmddep_n;
    if (n > 0) {
        n -= 1;
        syscmddep_qFind(u64(n)).~FSyscmddep();
        _db.syscmddep_n = i32(n);
    }
}

// --- lib_exec.FDb.syscmddep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_exec::syscmddep_XrefMaybe(lib_exec::FSyscmddep &row) {
    bool retval = true;
    (void)row;
    lib_exec::FSyscmd* p_child = lib_exec::syscmd_Find(row.child);
    if (UNLIKELY(!p_child)) {
        algo_lib::ResetErrtext() << "lib_exec.bad_xref  index:lib_exec.FDb.syscmd" << Keyval("key", row.child);
        return false;
    }
    // insert syscmddep into index c_prior
    if (true) { // user-defined insert condition
        c_prior_Insert(*p_child, row);
    }
    lib_exec::FSyscmd* p_parent = lib_exec::syscmd_Find(row.parent);
    if (UNLIKELY(!p_parent)) {
        algo_lib::ResetErrtext() << "lib_exec.bad_xref  index:lib_exec.FDb.syscmd" << Keyval("key", row.parent);
        return false;
    }
    // insert syscmddep into index c_next
    if (true) { // user-defined insert condition
        c_next_Insert(*p_parent, row);
    }
    // syscmddep: save pointer to child
    if (true) { // user-defined insert condition
        row.p_child = p_child;
    }
    // syscmddep: save pointer to parent
    if (true) { // user-defined insert condition
        row.p_parent = p_parent;
    }
    return retval;
}

// --- lib_exec.FDb.syscmd.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_exec::FSyscmd& lib_exec::syscmd_Alloc() {
    lib_exec::FSyscmd* row = syscmd_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_exec.out_of_mem  field:lib_exec.FDb.syscmd  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_exec.FDb.syscmd.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_exec::FSyscmd* lib_exec::syscmd_AllocMaybe() {
    lib_exec::FSyscmd *row = (lib_exec::FSyscmd*)syscmd_AllocMem();
    if (row) {
        new (row) lib_exec::FSyscmd; // call constructor
        row->rowid = i32(syscmd_N() - 1);
    }
    return row;
}

// --- lib_exec.FDb.syscmd.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_exec::FSyscmd* lib_exec::syscmd_InsertMaybe(const dev::Syscmd &value) {
    lib_exec::FSyscmd *row = &syscmd_Alloc(); // if out of memory, process dies. if input error, return NULL.
    syscmd_CopyIn(*row,const_cast<dev::Syscmd&>(value));
    bool ok = syscmd_XrefMaybe(*row); // this may return false
    if (!ok) {
        syscmd_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_exec.FDb.syscmd.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_exec::syscmd_AllocMem() {
    u64 new_nelems     = _db.syscmd_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_exec::FSyscmd*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.syscmd_lary[bsr];
        if (!lev) {
            lev=(lib_exec::FSyscmd*)algo_lib::malloc_AllocMem(sizeof(lib_exec::FSyscmd) * (u64(1)<<bsr));
            _db.syscmd_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.syscmd_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_exec.FDb.syscmd.RemoveAll
// Remove all elements from Lary
void lib_exec::syscmd_RemoveAll() {
    for (u64 n = _db.syscmd_n; n>0; ) {
        n--;
        syscmd_qFind(i32(n)).~FSyscmd(); // destroy last element
        _db.syscmd_n = i32(n);
    }
}

// --- lib_exec.FDb.syscmd.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_exec::syscmd_RemoveLast() {
    u64 n = _db.syscmd_n;
    if (n > 0) {
        n -= 1;
        syscmd_qFind(i32(n)).~FSyscmd();
        _db.syscmd_n = i32(n);
    }
}

// --- lib_exec.FDb.syscmd.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_exec::syscmd_XrefMaybe(lib_exec::FSyscmd &row) {
    bool retval = true;
    (void)row;
    // insert syscmd into index ind_running
    if (row.pid != 0) { // user-defined insert condition
        bool success = ind_running_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_exec.duplicate_key  xref:lib_exec.FDb.ind_running"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_exec.FDb.ind_running.Find
// Find row by key. Return NULL if not found.
lib_exec::FSyscmd* lib_exec::ind_running_Find(i32 key) {
    u32 index = ::i32_Hash(0, key) & (_db.ind_running_buckets_n - 1);
    lib_exec::FSyscmd* *e = &_db.ind_running_buckets_elems[index];
    lib_exec::FSyscmd* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).pid == key;
        if (done) break;
        e         = &ret->ind_running_next;
    } while (true);
    return ret;
}

// --- lib_exec.FDb.ind_running.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_exec::FSyscmd& lib_exec::ind_running_GetOrCreate(i32 key) {
    lib_exec::FSyscmd* ret = ind_running_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &syscmd_Alloc();
        (*ret).pid = key;
        bool good = syscmd_XrefMaybe(*ret);
        if (!good) {
            syscmd_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "lib_exec.create_error  table:ind_running  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- lib_exec.FDb.ind_running.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_exec::ind_running_InsertMaybe(lib_exec::FSyscmd& row) {
    ind_running_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_running_next == (lib_exec::FSyscmd*)-1)) {// check if in hash already
        u32 index = ::i32_Hash(0, row.pid) & (_db.ind_running_buckets_n - 1);
        lib_exec::FSyscmd* *prev = &_db.ind_running_buckets_elems[index];
        do {
            lib_exec::FSyscmd* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).pid == row.pid) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_running_next;
        } while (true);
        if (retval) {
            row.ind_running_next = *prev;
            _db.ind_running_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_exec.FDb.ind_running.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_exec::ind_running_Remove(lib_exec::FSyscmd& row) {
    if (LIKELY(row.ind_running_next != (lib_exec::FSyscmd*)-1)) {// check if in hash already
        u32 index = ::i32_Hash(0, row.pid) & (_db.ind_running_buckets_n - 1);
        lib_exec::FSyscmd* *prev = &_db.ind_running_buckets_elems[index]; // addr of pointer to current element
        while (lib_exec::FSyscmd *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_running_next; // unlink (singly linked list)
                _db.ind_running_n--;
                row.ind_running_next = (lib_exec::FSyscmd*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_running_next;
        }
    }
}

// --- lib_exec.FDb.ind_running.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_exec::ind_running_Reserve(int n) {
    u32 old_nbuckets = _db.ind_running_buckets_n;
    u32 new_nelems   = _db.ind_running_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_exec::FSyscmd*);
        u32 new_size = new_nbuckets * sizeof(lib_exec::FSyscmd*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_exec::FSyscmd* *new_buckets = (lib_exec::FSyscmd**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_exec.out_of_memory  field:lib_exec.FDb.ind_running");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_running_buckets_n; i++) {
            lib_exec::FSyscmd* elem = _db.ind_running_buckets_elems[i];
            while (elem) {
                lib_exec::FSyscmd &row        = *elem;
                lib_exec::FSyscmd* next       = row.ind_running_next;
                u32 index          = ::i32_Hash(0, row.pid) & (new_nbuckets-1);
                row.ind_running_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_running_buckets_elems, old_size);
        _db.ind_running_buckets_elems = new_buckets;
        _db.ind_running_buckets_n = new_nbuckets;
    }
}

// --- lib_exec.FDb.bh_syscmd.Dealloc
// Remove all elements from heap and free memory used by the array.
void lib_exec::bh_syscmd_Dealloc() {
    bh_syscmd_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_syscmd_elems, sizeof(lib_exec::FSyscmd*)*_db.bh_syscmd_max);
    _db.bh_syscmd_max   = 0;
    _db.bh_syscmd_elems = NULL;
}

// --- lib_exec.FDb.bh_syscmd.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int lib_exec::bh_syscmd_Downheap(lib_exec::FSyscmd& row, int idx) {
    lib_exec::FSyscmd* *elems = _db.bh_syscmd_elems;
    int n = _db.bh_syscmd_n;
    int child = idx*2+1;
    while (child < n) {
        lib_exec::FSyscmd* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            lib_exec::FSyscmd* q = elems[rchild]; // right child
            if (bh_syscmd_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_syscmd_ElemLt(*p,row)) {
            break;
        }
        p->bh_syscmd_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- lib_exec.FDb.bh_syscmd.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void lib_exec::bh_syscmd_Insert(lib_exec::FSyscmd& row) {
    if (LIKELY(row.bh_syscmd_idx == -1)) {
        bh_syscmd_Reserve(1);
        int n = _db.bh_syscmd_n;
        _db.bh_syscmd_n = n + 1;
        int new_idx = bh_syscmd_Upheap(row, n);
        row.bh_syscmd_idx = new_idx;
        _db.bh_syscmd_elems[new_idx] = &row;
    }
}

// --- lib_exec.FDb.bh_syscmd.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 lib_exec::bh_syscmd_Reheap(lib_exec::FSyscmd& row) {
    int old_idx = row.bh_syscmd_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_syscmd_Reserve(1);
        old_idx = _db.bh_syscmd_n++;
    }
    int new_idx = bh_syscmd_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_syscmd_Downheap(row, old_idx);
    }
    row.bh_syscmd_idx = new_idx;
    _db.bh_syscmd_elems[new_idx] = &row;
    return new_idx;
}

// --- lib_exec.FDb.bh_syscmd.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 lib_exec::bh_syscmd_ReheapFirst() {
    lib_exec::FSyscmd &row = *_db.bh_syscmd_elems[0];
    i32 new_idx = bh_syscmd_Downheap(row, 0);
    row.bh_syscmd_idx = new_idx;
    _db.bh_syscmd_elems[new_idx] = &row;
    return new_idx;
}

// --- lib_exec.FDb.bh_syscmd.Remove
// Remove element from index. If element is not in index, do nothing.
void lib_exec::bh_syscmd_Remove(lib_exec::FSyscmd& row) {
    if (bh_syscmd_InBheapQ(row)) {
        int old_idx = row.bh_syscmd_idx;
        if (_db.bh_syscmd_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_syscmd_idx = -1;           // mark not in heap
            i32 n = _db.bh_syscmd_n - 1; // index of last element in heap
            _db.bh_syscmd_n = n;         // decrease count
            if (old_idx != n) {
                lib_exec::FSyscmd *elem = _db.bh_syscmd_elems[n];
                int new_idx = bh_syscmd_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_syscmd_Downheap(*elem, old_idx);
                }
                elem->bh_syscmd_idx = new_idx;
                _db.bh_syscmd_elems[new_idx] = elem;
            }
        }
    }
}

// --- lib_exec.FDb.bh_syscmd.RemoveAll
// Remove all elements from binary heap
void lib_exec::bh_syscmd_RemoveAll() {
    int n = _db.bh_syscmd_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_syscmd_elems[i]->bh_syscmd_idx = -1; // mark not-in-heap
    }
    _db.bh_syscmd_n = 0;
}

// --- lib_exec.FDb.bh_syscmd.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
lib_exec::FSyscmd* lib_exec::bh_syscmd_RemoveFirst() {
    lib_exec::FSyscmd *row = NULL;
    if (_db.bh_syscmd_n > 0) {
        row = _db.bh_syscmd_elems[0];
        row->bh_syscmd_idx = -1;           // mark not in heap
        i32 n = _db.bh_syscmd_n - 1; // index of last element in heap
        _db.bh_syscmd_n = n;         // decrease count
        if (n) {
            lib_exec::FSyscmd &elem = *_db.bh_syscmd_elems[n];
            int new_idx = bh_syscmd_Downheap(elem, 0);
            elem.bh_syscmd_idx = new_idx;
            _db.bh_syscmd_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- lib_exec.FDb.bh_syscmd.Reserve
// Reserve space in index for N more elements
void lib_exec::bh_syscmd_Reserve(int n) {
    i32 old_max = _db.bh_syscmd_max;
    if (UNLIKELY(_db.bh_syscmd_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_exec::FSyscmd*);
        u32 new_size = new_max * sizeof(lib_exec::FSyscmd*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_syscmd_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_exec.out_of_memory  field:lib_exec.FDb.bh_syscmd");
        }
        _db.bh_syscmd_elems = (lib_exec::FSyscmd**)new_mem;
        _db.bh_syscmd_max = new_max;
    }
}

// --- lib_exec.FDb.bh_syscmd.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int lib_exec::bh_syscmd_Upheap(lib_exec::FSyscmd& row, int idx) {
    lib_exec::FSyscmd* *elems = _db.bh_syscmd_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        lib_exec::FSyscmd* p = elems[j];
        if (!bh_syscmd_ElemLt(row, *p)) {
            break;
        }
        p->bh_syscmd_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- lib_exec.FDb.bh_syscmd.ElemLt
inline static bool lib_exec::bh_syscmd_ElemLt(lib_exec::FSyscmd &a, lib_exec::FSyscmd &b) {
    (void)_db;
    return execkey_Get(a) < execkey_Get(b);
}

// --- lib_exec.FDb.zd_started.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void lib_exec::zd_started_Insert(lib_exec::FSyscmd& row) {
    if (!zd_started_InLlistQ(row)) {
        lib_exec::FSyscmd* old_tail = _db.zd_started_tail;
        row.zd_started_next = NULL;
        row.zd_started_prev = old_tail;
        _db.zd_started_tail = &row;
        lib_exec::FSyscmd **new_row_a = &old_tail->zd_started_next;
        lib_exec::FSyscmd **new_row_b = &_db.zd_started_head;
        lib_exec::FSyscmd **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_started_n++;
    }
}

// --- lib_exec.FDb.zd_started.Remove
// Remove element from index. If element is not in index, do nothing.
void lib_exec::zd_started_Remove(lib_exec::FSyscmd& row) {
    if (zd_started_InLlistQ(row)) {
        lib_exec::FSyscmd* old_head       = _db.zd_started_head;
        (void)old_head; // in case it's not used
        lib_exec::FSyscmd* prev = row.zd_started_prev;
        lib_exec::FSyscmd* next = row.zd_started_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        lib_exec::FSyscmd **new_next_a = &prev->zd_started_next;
        lib_exec::FSyscmd **new_next_b = &_db.zd_started_head;
        lib_exec::FSyscmd **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        lib_exec::FSyscmd **new_prev_a = &next->zd_started_prev;
        lib_exec::FSyscmd **new_prev_b = &_db.zd_started_tail;
        lib_exec::FSyscmd **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_started_n--;
        row.zd_started_next=(lib_exec::FSyscmd*)-1; // not-in-list
    }
}

// --- lib_exec.FDb.zd_started.RemoveAll
// Empty the index. (The rows are not deleted)
void lib_exec::zd_started_RemoveAll() {
    lib_exec::FSyscmd* row = _db.zd_started_head;
    _db.zd_started_head = NULL;
    _db.zd_started_tail = NULL;
    _db.zd_started_n = 0;
    while (row) {
        lib_exec::FSyscmd* row_next = row->zd_started_next;
        row->zd_started_next  = (lib_exec::FSyscmd*)-1;
        row->zd_started_prev  = NULL;
        row = row_next;
    }
}

// --- lib_exec.FDb.zd_started.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_exec::FSyscmd* lib_exec::zd_started_RemoveFirst() {
    lib_exec::FSyscmd *row = NULL;
    row = _db.zd_started_head;
    if (row) {
        lib_exec::FSyscmd *next = row->zd_started_next;
        _db.zd_started_head = next;
        lib_exec::FSyscmd **new_end_a = &next->zd_started_prev;
        lib_exec::FSyscmd **new_end_b = &_db.zd_started_tail;
        lib_exec::FSyscmd **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_started_n--;
        row->zd_started_next = (lib_exec::FSyscmd*)-1; // mark as not-in-list
    }
    return row;
}

// --- lib_exec.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr lib_exec::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- lib_exec.FDb.trace.N
// Function return 1
inline static i32 lib_exec::trace_N() {
    return 1;
}

// --- lib_exec.FDb.bh_syscmd_curs.Add
static void lib_exec::_db_bh_syscmd_curs_Add(_db_bh_syscmd_curs &curs, lib_exec::FSyscmd& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    lib_exec::FSyscmd* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        lib_exec::FSyscmd* p = elems[j];
        if (!bh_syscmd_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- lib_exec.FDb.bh_syscmd_curs.Reserve
void lib_exec::_db_bh_syscmd_curs_Reserve(_db_bh_syscmd_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_syscmd_N();
        curs.temp_elems   = (lib_exec::FSyscmd**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("lib_exec.cursor_out_of_memory  func:lib_exec.FDb.bh_syscmd_curs.Reserve");
        }
        curs.temp_max       = bh_syscmd_N();
    }
}

// --- lib_exec.FDb.bh_syscmd_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void lib_exec::_db_bh_syscmd_curs_Reset(_db_bh_syscmd_curs &curs, lib_exec::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_syscmd_curs_Reserve(curs, bh_syscmd_N());
    curs.temp_n = 0;
    if (parent.bh_syscmd_n > 0) {
        lib_exec::FSyscmd &first = *parent.bh_syscmd_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- lib_exec.FDb.bh_syscmd_curs.Next
// Advance cursor.
void lib_exec::_db_bh_syscmd_curs_Next(_db_bh_syscmd_curs &curs) {
    lib_exec::FSyscmd* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        lib_exec::FSyscmd* dead = elems[0];
        int i       = 0;
        lib_exec::FSyscmd* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            lib_exec::FSyscmd* choose = last;
            int l         = i*2+1;
            if (l<n) {
                lib_exec::FSyscmd* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                lib_exec::FSyscmd* er = elems[r];
                if (bh_syscmd_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_syscmd_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_syscmd_idx;
        i = (index*2+1);
        if (i < bh_syscmd_N()) {
            lib_exec::FSyscmd &elem = *curs.parent->bh_syscmd_elems[i];
            _db_bh_syscmd_curs_Add(curs, elem);
        }
        if (i+1 < bh_syscmd_N()) {
            lib_exec::FSyscmd &elem = *curs.parent->bh_syscmd_elems[i + 1];
            _db_bh_syscmd_curs_Add(curs, elem);
        }
    }
}

// --- lib_exec.FDb..Init
// Set all fields to initial values.
void lib_exec::FDb_Init() {
    // initialize LAry syscmddep (lib_exec.FDb.syscmddep)
    _db.syscmddep_n = 0;
    memset(_db.syscmddep_lary, 0, sizeof(_db.syscmddep_lary)); // zero out all level pointers
    lib_exec::FSyscmddep* syscmddep_first = (lib_exec::FSyscmddep*)algo_lib::malloc_AllocMem(sizeof(lib_exec::FSyscmddep) * (u64(1)<<4));
    if (!syscmddep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.syscmddep_lary[i]  = syscmddep_first;
        syscmddep_first    += 1ULL<<i;
    }
    _db.next_syscmd = u64(0);
    // initialize LAry syscmd (lib_exec.FDb.syscmd)
    _db.syscmd_n = 0;
    memset(_db.syscmd_lary, 0, sizeof(_db.syscmd_lary)); // zero out all level pointers
    lib_exec::FSyscmd* syscmd_first = (lib_exec::FSyscmd*)algo_lib::malloc_AllocMem(sizeof(lib_exec::FSyscmd) * (u64(1)<<4));
    if (!syscmd_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.syscmd_lary[i]  = syscmd_first;
        syscmd_first    += 1ULL<<i;
    }
    // initialize hash table for lib_exec::FSyscmd;
    _db.ind_running_n             	= 0; // (lib_exec.FDb.ind_running)
    _db.ind_running_buckets_n     	= 4; // (lib_exec.FDb.ind_running)
    _db.ind_running_buckets_elems 	= (lib_exec::FSyscmd**)algo_lib::malloc_AllocMem(sizeof(lib_exec::FSyscmd*)*_db.ind_running_buckets_n); // initial buckets (lib_exec.FDb.ind_running)
    if (!_db.ind_running_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_exec.FDb.ind_running)
    }
    memset(_db.ind_running_buckets_elems, 0, sizeof(lib_exec::FSyscmd*)*_db.ind_running_buckets_n); // (lib_exec.FDb.ind_running)
    _db.bh_syscmd_max   	= 0; // (lib_exec.FDb.bh_syscmd)
    _db.bh_syscmd_n     	= 0; // (lib_exec.FDb.bh_syscmd)
    _db.bh_syscmd_elems 	= NULL; // (lib_exec.FDb.bh_syscmd)
    _db.zd_started_head = NULL; // (lib_exec.FDb.zd_started)
    _db.zd_started_n = 0; // (lib_exec.FDb.zd_started)
    _db.zd_started_tail = NULL; // (lib_exec.FDb.zd_started)

    lib_exec::InitReflection();
}

// --- lib_exec.FDb..Uninit
void lib_exec::FDb_Uninit() {
    lib_exec::FDb &row = _db; (void)row;

    // lib_exec.FDb.bh_syscmd.Uninit (Bheap)  //Heap of all commands in dependency order
    // skip destruction in global scope

    // lib_exec.FDb.ind_running.Uninit (Thash)  //Running subprocesses, hashed by pid
    // skip destruction of ind_running in global scope

    // lib_exec.FDb.syscmd.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_exec.FDb.syscmddep.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- lib_exec.FSyscmd.msghdr.CopyOut
// Copy fields out of row
void lib_exec::syscmd_CopyOut(lib_exec::FSyscmd &row, dev::Syscmd &out) {
    out.syscmd = row.syscmd;
    out.command = row.command;
    out.pid = row.pid;
    out.status = row.status;
    out.nprereq = row.nprereq;
    out.fail_prereq = row.fail_prereq;
    out.completed = row.completed;
    out.maxtime = row.maxtime;
}

// --- lib_exec.FSyscmd.msghdr.CopyIn
// Copy fields in to row
void lib_exec::syscmd_CopyIn(lib_exec::FSyscmd &row, dev::Syscmd &in) {
    row.syscmd = in.syscmd;
    row.command = in.command;
    row.pid = in.pid;
    row.status = in.status;
    row.nprereq = in.nprereq;
    row.fail_prereq = in.fail_prereq;
    row.completed = in.completed;
    row.maxtime = in.maxtime;
}

// --- lib_exec.FSyscmd.c_prior.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void lib_exec::c_prior_Insert(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    if (bool_Update(row.syscmd_c_prior_in_ary,true)) {
        // reserve space
        c_prior_Reserve(syscmd, 1);
        u32 n  = syscmd.c_prior_n;
        u32 at = n;
        lib_exec::FSyscmddep* *elems = syscmd.c_prior_elems;
        elems[at] = &row;
        syscmd.c_prior_n = n+1;

    }
}

// --- lib_exec.FSyscmd.c_prior.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool lib_exec::c_prior_InsertMaybe(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    bool retval = !row.syscmd_c_prior_in_ary;
    c_prior_Insert(syscmd,row); // check is performed in _Insert again
    return retval;
}

// --- lib_exec.FSyscmd.c_prior.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void lib_exec::c_prior_Remove(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    if (bool_Update(row.syscmd_c_prior_in_ary,false)) {
        int lim = syscmd.c_prior_n;
        lib_exec::FSyscmddep* *elems = syscmd.c_prior_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            lib_exec::FSyscmddep* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(lib_exec::FSyscmddep*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                syscmd.c_prior_n = lim - 1;
                break;
            }
        }
    }
}

// --- lib_exec.FSyscmd.c_prior.Reserve
// Reserve space in index for N more elements;
void lib_exec::c_prior_Reserve(lib_exec::FSyscmd& syscmd, u32 n) {
    u32 old_max = syscmd.c_prior_max;
    if (UNLIKELY(syscmd.c_prior_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_exec::FSyscmddep*);
        u32 new_size = new_max * sizeof(lib_exec::FSyscmddep*);
        void *new_mem = algo_lib::malloc_ReallocMem(syscmd.c_prior_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_exec.out_of_memory  field:lib_exec.FSyscmd.c_prior");
        }
        syscmd.c_prior_elems = (lib_exec::FSyscmddep**)new_mem;
        syscmd.c_prior_max = new_max;
    }
}

// --- lib_exec.FSyscmd.c_next.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void lib_exec::c_next_Insert(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    if (bool_Update(row.syscmd_c_next_in_ary,true)) {
        // reserve space
        c_next_Reserve(syscmd, 1);
        u32 n  = syscmd.c_next_n;
        u32 at = n;
        lib_exec::FSyscmddep* *elems = syscmd.c_next_elems;
        elems[at] = &row;
        syscmd.c_next_n = n+1;

    }
}

// --- lib_exec.FSyscmd.c_next.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool lib_exec::c_next_InsertMaybe(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    bool retval = !row.syscmd_c_next_in_ary;
    c_next_Insert(syscmd,row); // check is performed in _Insert again
    return retval;
}

// --- lib_exec.FSyscmd.c_next.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void lib_exec::c_next_Remove(lib_exec::FSyscmd& syscmd, lib_exec::FSyscmddep& row) {
    if (bool_Update(row.syscmd_c_next_in_ary,false)) {
        int lim = syscmd.c_next_n;
        lib_exec::FSyscmddep* *elems = syscmd.c_next_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            lib_exec::FSyscmddep* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(lib_exec::FSyscmddep*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                syscmd.c_next_n = lim - 1;
                break;
            }
        }
    }
}

// --- lib_exec.FSyscmd.c_next.Reserve
// Reserve space in index for N more elements;
void lib_exec::c_next_Reserve(lib_exec::FSyscmd& syscmd, u32 n) {
    u32 old_max = syscmd.c_next_max;
    if (UNLIKELY(syscmd.c_next_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_exec::FSyscmddep*);
        u32 new_size = new_max * sizeof(lib_exec::FSyscmddep*);
        void *new_mem = algo_lib::malloc_ReallocMem(syscmd.c_next_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_exec.out_of_memory  field:lib_exec.FSyscmd.c_next");
        }
        syscmd.c_next_elems = (lib_exec::FSyscmddep**)new_mem;
        syscmd.c_next_max = new_max;
    }
}

// --- lib_exec.FSyscmd..Init
// Set all fields to initial values.
void lib_exec::FSyscmd_Init(lib_exec::FSyscmd& syscmd) {
    syscmd.syscmd = i64(0);
    syscmd.pid = i32(0);
    syscmd.status = i32(0);
    syscmd.nprereq = i32(0);
    syscmd.fail_prereq = bool(false);
    syscmd.completed = bool(false);
    syscmd.maxtime = i32(0);
    syscmd.c_prior_elems = NULL; // (lib_exec.FSyscmd.c_prior)
    syscmd.c_prior_n = 0; // (lib_exec.FSyscmd.c_prior)
    syscmd.c_prior_max = 0; // (lib_exec.FSyscmd.c_prior)
    syscmd.c_next_elems = NULL; // (lib_exec.FSyscmd.c_next)
    syscmd.c_next_n = 0; // (lib_exec.FSyscmd.c_next)
    syscmd.c_next_max = 0; // (lib_exec.FSyscmd.c_next)
    syscmd.rowid = i32(0);
    syscmd.redir_out = bool(true);
    syscmd.show_out = bool(true);
    syscmd.signal = i32(0);
    syscmd.ind_running_next = (lib_exec::FSyscmd*)-1; // (lib_exec.FDb.ind_running) not-in-hash
    syscmd.bh_syscmd_idx = -1; // (lib_exec.FDb.bh_syscmd) not-in-heap
    syscmd.zd_started_next = (lib_exec::FSyscmd*)-1; // (lib_exec.FDb.zd_started) not-in-list
    syscmd.zd_started_prev = NULL; // (lib_exec.FDb.zd_started)
}

// --- lib_exec.FSyscmd..Uninit
void lib_exec::FSyscmd_Uninit(lib_exec::FSyscmd& syscmd) {
    lib_exec::FSyscmd &row = syscmd; (void)row;
    ind_running_Remove(row); // remove syscmd from index ind_running
    bh_syscmd_Remove(row); // remove syscmd from index bh_syscmd
    zd_started_Remove(row); // remove syscmd from index zd_started

    // lib_exec.FSyscmd.c_next.Uninit (Ptrary)  //Set of dependencies where this command is the 'before'
    algo_lib::malloc_FreeMem(syscmd.c_next_elems, sizeof(lib_exec::FSyscmddep*)*syscmd.c_next_max); // (lib_exec.FSyscmd.c_next)

    // lib_exec.FSyscmd.c_prior.Uninit (Ptrary)  //Set of dependencies where this command is the 'after'
    algo_lib::malloc_FreeMem(syscmd.c_prior_elems, sizeof(lib_exec::FSyscmddep*)*syscmd.c_prior_max); // (lib_exec.FSyscmd.c_prior)
}

// --- lib_exec.FSyscmd..Print
// print string representation of lib_exec::FSyscmd to string LHS, no header -- cprint:lib_exec.FSyscmd.String
void lib_exec::FSyscmd_Print(lib_exec::FSyscmd & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_exec.FSyscmd";

    i64_Print(row.syscmd, temp);
    PrintAttrSpaceReset(str,"syscmd", temp);

    algo::cstring_Print(row.command, temp);
    PrintAttrSpaceReset(str,"command", temp);

    i32_Print(row.pid, temp);
    PrintAttrSpaceReset(str,"pid", temp);

    i32_Print(row.status, temp);
    PrintAttrSpaceReset(str,"status", temp);

    i32_Print(row.nprereq, temp);
    PrintAttrSpaceReset(str,"nprereq", temp);

    bool_Print(row.fail_prereq, temp);
    PrintAttrSpaceReset(str,"fail_prereq", temp);

    bool_Print(row.completed, temp);
    PrintAttrSpaceReset(str,"completed", temp);

    i32_Print(row.maxtime, temp);
    PrintAttrSpaceReset(str,"maxtime", temp);

    i32_Print(row.rowid, temp);
    PrintAttrSpaceReset(str,"rowid", temp);

    algo::cstring_Print(row.message, temp);
    PrintAttrSpaceReset(str,"message", temp);

    bool_Print(row.redir_out, temp);
    PrintAttrSpaceReset(str,"redir_out", temp);

    bool_Print(row.show_out, temp);
    PrintAttrSpaceReset(str,"show_out", temp);

    algo_lib::FFildes_Print(row.stdout_fd, temp);
    PrintAttrSpaceReset(str,"stdout_fd", temp);

    algo_lib::FFildes_Print(row.stderr_fd, temp);
    PrintAttrSpaceReset(str,"stderr_fd", temp);

    i32_Print(row.signal, temp);
    PrintAttrSpaceReset(str,"signal", temp);
}

// --- lib_exec.FSyscmddep.msghdr.CopyOut
// Copy fields out of row
void lib_exec::syscmddep_CopyOut(lib_exec::FSyscmddep &row, dev::Syscmddep &out) {
    out.child = row.child;
    out.parent = row.parent;
}

// --- lib_exec.FSyscmddep.msghdr.CopyIn
// Copy fields in to row
void lib_exec::syscmddep_CopyIn(lib_exec::FSyscmddep &row, dev::Syscmddep &in) {
    row.child = in.child;
    row.parent = in.parent;
}

// --- lib_exec.FSyscmddep..Uninit
void lib_exec::FSyscmddep_Uninit(lib_exec::FSyscmddep& syscmddep) {
    lib_exec::FSyscmddep &row = syscmddep; (void)row;
    lib_exec::FSyscmd* p_child = lib_exec::syscmd_Find(row.child);
    if (p_child)  {
        c_prior_Remove(*p_child, row);// remove syscmddep from index c_prior
    }
    lib_exec::FSyscmd* p_parent = lib_exec::syscmd_Find(row.parent);
    if (p_parent)  {
        c_next_Remove(*p_parent, row);// remove syscmddep from index c_next
    }
}

// --- lib_exec.FSyscmddep..Print
// print string representation of lib_exec::FSyscmddep to string LHS, no header -- cprint:lib_exec.FSyscmddep.String
void lib_exec::FSyscmddep_Print(lib_exec::FSyscmddep & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_exec.FSyscmddep";

    i64_Print(row.child, temp);
    PrintAttrSpaceReset(str,"child", temp);

    i64_Print(row.parent, temp);
    PrintAttrSpaceReset(str,"parent", temp);

    bool_Print(row.syscmd_c_next_in_ary, temp);
    PrintAttrSpaceReset(str,"syscmd_c_next_in_ary", temp);

    bool_Print(row.syscmd_c_prior_in_ary, temp);
    PrintAttrSpaceReset(str,"syscmd_c_prior_in_ary", temp);
}

// --- lib_exec.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_exec::value_ToCstr(const lib_exec::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_exec_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- lib_exec.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_exec::value_Print(const lib_exec::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_exec.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_exec::value_SetStrptrMaybe(lib_exec::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lib_exec_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_exec.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_exec::value_SetStrptr(lib_exec::FieldId& parent, algo::strptr rhs, lib_exec_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_exec.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_exec::value_ReadStrptrMaybe(lib_exec::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_exec.FieldId..ReadStrptrMaybe
// Read fields of lib_exec::FieldId from an ascii string.
// The format of the string is the format of the lib_exec::FieldId's only field
bool lib_exec::FieldId_ReadStrptrMaybe(lib_exec::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && lib_exec::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_exec.FieldId..Print
// print string representation of lib_exec::FieldId to string LHS, no header -- cprint:lib_exec.FieldId.String
void lib_exec::FieldId_Print(lib_exec::FieldId & row, algo::cstring &str) {
    lib_exec::value_Print(row, str);
}

// --- lib_exec...SizeCheck
inline static void lib_exec::SizeCheck() {
}
