//
// cpp/gen/sample_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/sample_gen.h"
#include "include/gen/sample_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
sample::FDb     sample::_db;      // dependency found via dev.targdep

namespace sample {
const char *sample_help =
"Usage: sample [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace sample
sample::_db_bh_rec_curs::~_db_bh_rec_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace sample { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:sample.FDb._db.InitReflection
    static void          InitReflection();
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    // func:sample.FDb.bh_rec.Downheap
    static int           bh_rec_Downheap(sample::FRec& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    // func:sample.FDb.bh_rec.Upheap
    static int           bh_rec_Upheap(sample::FRec& row, int idx) __attribute__((nothrow));
    // func:sample.FDb.bh_rec.ElemLt
    inline static bool   bh_rec_ElemLt(sample::FRec &a, sample::FRec &b) __attribute__((nothrow));
    // func:sample.FDb.bh_rec_curs.Add
    static void          _db_bh_rec_curs_Add(_db_bh_rec_curs &curs, sample::FRec& row);
    // Update cycles count from previous clock capture
    // func:sample.FDb.bh_rec.UpdateCycles
    inline static void   bh_rec_UpdateCycles() __attribute__((nothrow));
    // func:sample.FDb.bh_rec.Call
    inline static void   bh_rec_Call() __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:sample.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:sample.FDb.trace.N
    inline static i32    trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:sample...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- sample.trace..Print
// print string representation of ROW to string STR
// cfmt:sample.trace.String  printfmt:Tuple
void sample::trace_Print(sample::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "sample.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- sample.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     sample.FDb.cmdline
//     algo_lib.FDb.cmdline
void sample::ReadArgv() {
    command::sample &cmd = sample::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::sample_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"sample: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "sample: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::sample_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"sample: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:sample.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!sample::LoadTuplesMaybe(cmd.in,true)) {
            err << "sample.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(sample_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- sample.FDb._db.MainLoop
// Main loop.
void sample::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        sample::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- sample.FDb._db.Step
// Main step
void sample::Step() {
    bh_rec_Call();
}

// --- sample.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void sample::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("sample", NULL, sample::Step, sample::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "sample.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(sample::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)sample::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- sample.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool sample::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- sample.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool sample::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = sample::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = sample::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && sample::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- sample.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool sample::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- sample.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool sample::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- sample.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool sample::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = sample::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- sample.FDb._db.Steps
// Calls Step function of dependencies
void sample::Steps() {
    sample::Step(); // dependent namespace specified via (dev.targdep)
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- sample.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sample::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- sample.FDb.rec.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sample::FRec& sample::rec_Alloc() {
    sample::FRec* row = rec_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sample.out_of_mem  field:sample.FDb.rec  comment:'Alloc failed'");
    }
    return *row;
}

// --- sample.FDb.rec.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sample::FRec* sample::rec_AllocMaybe() {
    sample::FRec *row = (sample::FRec*)rec_AllocMem();
    if (row) {
        new (row) sample::FRec; // call constructor
    }
    return row;
}

// --- sample.FDb.rec.Delete
// Remove row from all global and cross indices, then deallocate row
void sample::rec_Delete(sample::FRec &row) {
    row.~FRec();
    rec_FreeMem(row);
}

// --- sample.FDb.rec.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* sample::rec_AllocMem() {
    sample::FRec *row = _db.rec_free;
    if (UNLIKELY(!row)) {
        rec_Reserve(1);
        row = _db.rec_free;
    }
    if (row) {
        _db.rec_free = row->rec_next;
    }
    return row;
}

// --- sample.FDb.rec.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void sample::rec_FreeMem(sample::FRec &row) {
    if (UNLIKELY(row.rec_next != (sample::FRec*)-1)) {
        FatalErrorExit("sample.tpool_double_delete  pool:sample.FDb.rec  comment:'double deletion caught'");
    }
    row.rec_next = _db.rec_free; // insert into free list
    _db.rec_free  = &row;
}

// --- sample.FDb.rec.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 sample::rec_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.rec_blocksize; // underlying allocator is probably Lpool
        u64 reserved = rec_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- sample.FDb.rec.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 sample::rec_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(sample::FRec)) {
        sample::FRec *mem = (sample::FRec*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(sample::FRec) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].rec_next = _db.rec_free;
            _db.rec_free = mem+i;
        }
    }
    return ret;
}

// --- sample.FDb.rec.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sample::rec_XrefMaybe(sample::FRec &row) {
    bool retval = true;
    (void)row;
    // insert rec into index ind_rec
    if (true) { // user-defined insert condition
        bool success = ind_rec_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "sample.duplicate_key  xref:sample.FDb.ind_rec"; // check for duplicate key
            return false;
        }
    }
    // insert rec into index bh_rec
    if (true) { // user-defined insert condition
        bh_rec_Insert(row);
    }
    return retval;
}

// --- sample.FDb.ind_rec.Find
// Find row by key. Return NULL if not found.
sample::FRec* sample::ind_rec_Find(const sample::Reckey& key) {
    u32 index = sample::Reckey_Hash(0, key) & (_db.ind_rec_buckets_n - 1);
    sample::FRec* *e = &_db.ind_rec_buckets_elems[index];
    sample::FRec* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).rec == key;
        if (done) break;
        e         = &ret->ind_rec_next;
    } while (true);
    return ret;
}

// --- sample.FDb.ind_rec.FindX
// Look up row by key and return reference. Throw exception if not found
sample::FRec& sample::ind_rec_FindX(const sample::Reckey& key) {
    sample::FRec* ret = ind_rec_Find(key);
    vrfy(ret, tempstr() << "sample.key_error  table:ind_rec  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- sample.FDb.ind_rec.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool sample::ind_rec_InsertMaybe(sample::FRec& row) {
    ind_rec_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_rec_next == (sample::FRec*)-1)) {// check if in hash already
        u32 index = sample::Reckey_Hash(0, row.rec) & (_db.ind_rec_buckets_n - 1);
        sample::FRec* *prev = &_db.ind_rec_buckets_elems[index];
        do {
            sample::FRec* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).rec == row.rec) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_rec_next;
        } while (true);
        if (retval) {
            row.ind_rec_next = *prev;
            _db.ind_rec_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- sample.FDb.ind_rec.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void sample::ind_rec_Remove(sample::FRec& row) {
    if (LIKELY(row.ind_rec_next != (sample::FRec*)-1)) {// check if in hash already
        u32 index = sample::Reckey_Hash(0, row.rec) & (_db.ind_rec_buckets_n - 1);
        sample::FRec* *prev = &_db.ind_rec_buckets_elems[index]; // addr of pointer to current element
        while (sample::FRec *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_rec_next; // unlink (singly linked list)
                _db.ind_rec_n--;
                row.ind_rec_next = (sample::FRec*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_rec_next;
        }
    }
}

// --- sample.FDb.ind_rec.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void sample::ind_rec_Reserve(int n) {
    u32 old_nbuckets = _db.ind_rec_buckets_n;
    u32 new_nelems   = _db.ind_rec_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(sample::FRec*);
        u32 new_size = new_nbuckets * sizeof(sample::FRec*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        sample::FRec* *new_buckets = (sample::FRec**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("sample.out_of_memory  field:sample.FDb.ind_rec");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_rec_buckets_n; i++) {
            sample::FRec* elem = _db.ind_rec_buckets_elems[i];
            while (elem) {
                sample::FRec &row        = *elem;
                sample::FRec* next       = row.ind_rec_next;
                u32 index          = sample::Reckey_Hash(0, row.rec) & (new_nbuckets-1);
                row.ind_rec_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_rec_buckets_elems, old_size);
        _db.ind_rec_buckets_elems = new_buckets;
        _db.ind_rec_buckets_n = new_nbuckets;
    }
}

// --- sample.FDb.bh_rec.Dealloc
// Remove all elements from heap and free memory used by the array.
void sample::bh_rec_Dealloc() {
    bh_rec_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_rec_elems, sizeof(sample::FRec*)*_db.bh_rec_max);
    _db.bh_rec_max   = 0;
    _db.bh_rec_elems = NULL;
}

// --- sample.FDb.bh_rec.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int sample::bh_rec_Downheap(sample::FRec& row, int idx) {
    sample::FRec* *elems = _db.bh_rec_elems;
    int n = _db.bh_rec_n;
    int child = idx*2+1;
    while (child < n) {
        sample::FRec* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            sample::FRec* q = elems[rchild]; // right child
            if (bh_rec_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_rec_ElemLt(*p,row)) {
            break;
        }
        p->bh_rec_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- sample.FDb.bh_rec.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void sample::bh_rec_Insert(sample::FRec& row) {
    if (LIKELY(row.bh_rec_idx == -1)) {
        bh_rec_Reserve(1);
        int n = _db.bh_rec_n;
        _db.bh_rec_n = n + 1;
        int new_idx = bh_rec_Upheap(row, n);
        row.bh_rec_idx = new_idx;
        _db.bh_rec_elems[new_idx] = &row;
        if (new_idx==0) {
            bh_rec_FirstChanged();
        }
    }
}

// --- sample.FDb.bh_rec.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
// If first item of the is changed, update fstep:sample.FDb.bh_rec
i32 sample::bh_rec_Reheap(sample::FRec& row) {
    int old_idx = row.bh_rec_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_rec_Reserve(1);
        old_idx = _db.bh_rec_n++;
    }
    int new_idx = bh_rec_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_rec_Downheap(row, old_idx);
    }
    row.bh_rec_idx = new_idx;
    _db.bh_rec_elems[new_idx] = &row;
    bool changed = new_idx==0 || old_idx==0;
    if (changed) {
        bh_rec_FirstChanged();
    }
    return new_idx;
}

// --- sample.FDb.bh_rec.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
// Update fstep:sample.FDb.bh_rec
i32 sample::bh_rec_ReheapFirst() {
    sample::FRec &row = *_db.bh_rec_elems[0];
    i32 new_idx = bh_rec_Downheap(row, 0);
    row.bh_rec_idx = new_idx;
    _db.bh_rec_elems[new_idx] = &row;
    if (new_idx != 0) {
        bh_rec_FirstChanged();
    }
    return new_idx;
}

// --- sample.FDb.bh_rec.Remove
// Remove element from index. If element is not in index, do nothing.
void sample::bh_rec_Remove(sample::FRec& row) {
    if (bh_rec_InBheapQ(row)) {
        int old_idx = row.bh_rec_idx;
        if (_db.bh_rec_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_rec_idx = -1;           // mark not in heap
            i32 n = _db.bh_rec_n - 1; // index of last element in heap
            _db.bh_rec_n = n;         // decrease count
            if (old_idx != n) {
                sample::FRec *elem = _db.bh_rec_elems[n];
                int new_idx = bh_rec_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_rec_Downheap(*elem, old_idx);
                }
                elem->bh_rec_idx = new_idx;
                _db.bh_rec_elems[new_idx] = elem;
            }
            if (old_idx == 0) {
                bh_rec_FirstChanged();
            }
        }
    }
}

// --- sample.FDb.bh_rec.RemoveAll
// Remove all elements from binary heap
void sample::bh_rec_RemoveAll() {
    int n = _db.bh_rec_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_rec_elems[i]->bh_rec_idx = -1; // mark not-in-heap
    }
    _db.bh_rec_n = 0;
    if (n > 0) {
        bh_rec_FirstChanged();
    }
}

// --- sample.FDb.bh_rec.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
sample::FRec* sample::bh_rec_RemoveFirst() {
    sample::FRec *row = NULL;
    if (_db.bh_rec_n > 0) {
        row = _db.bh_rec_elems[0];
        row->bh_rec_idx = -1;           // mark not in heap
        i32 n = _db.bh_rec_n - 1; // index of last element in heap
        _db.bh_rec_n = n;         // decrease count
        if (n) {
            sample::FRec &elem = *_db.bh_rec_elems[n];
            int new_idx = bh_rec_Downheap(elem, 0);
            elem.bh_rec_idx = new_idx;
            _db.bh_rec_elems[new_idx] = &elem;
        }
        bh_rec_FirstChanged();
    }
    return row;
}

// --- sample.FDb.bh_rec.Reserve
// Reserve space in index for N more elements
void sample::bh_rec_Reserve(int n) {
    i32 old_max = _db.bh_rec_max;
    if (UNLIKELY(_db.bh_rec_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(sample::FRec*);
        u32 new_size = new_max * sizeof(sample::FRec*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_rec_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("sample.out_of_memory  field:sample.FDb.bh_rec");
        }
        _db.bh_rec_elems = (sample::FRec**)new_mem;
        _db.bh_rec_max = new_max;
    }
}

// --- sample.FDb.bh_rec.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int sample::bh_rec_Upheap(sample::FRec& row, int idx) {
    sample::FRec* *elems = _db.bh_rec_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        sample::FRec* p = elems[j];
        if (!bh_rec_ElemLt(row, *p)) {
            break;
        }
        p->bh_rec_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- sample.FDb.bh_rec.ElemLt
inline static bool sample::bh_rec_ElemLt(sample::FRec &a, sample::FRec &b) {
    (void)_db;
    return rec_Lt(a, b);
}

// --- sample.FDb.bh_rec.FirstChanged
// First element of index changed.
void sample::bh_rec_FirstChanged() {
}

// --- sample.FDb.bh_rec.UpdateCycles
// Update cycles count from previous clock capture
inline static void sample::bh_rec_UpdateCycles() {
    u64 cur_cycles                      = algo::get_cycles();
    algo_lib::_db.clock                 = algo::SchedTime(cur_cycles);
}

// --- sample.FDb.bh_rec.Call
inline static void sample::bh_rec_Call() {
    if (!sample::bh_rec_EmptyQ()) { // fstep:sample.FDb.bh_rec
        if (sample::_db.bh_rec_next < algo_lib::_db.clock) {
            sample::_db.bh_rec_next = algo_lib::_db.clock + sample::_db.bh_rec_delay;
            sample::bh_rec_Step(); // steptype:InlineRecur: call function every N clock cycles
            bh_rec_UpdateCycles();
        }
        algo_lib::_db.next_loop.value = u64_Min(sample::_db.bh_rec_next, algo_lib::_db.next_loop);
    }
}

// --- sample.FDb.bh_rec.SetDelay
// Set inter-step delay to specified value.
// The difference between new delay and current delay is added to the next scheduled time.
void sample::bh_rec_SetDelay(algo::SchedTime delay) {
    i64 diff = delay.value - sample::_db.bh_rec_delay.value;
    sample::_db.bh_rec_delay = delay;
    if (diff > 0) {
        sample::_db.bh_rec_next.value += diff;
    } else {
        sample::_db.bh_rec_next.value = algo::u64_SubClip(sample::_db.bh_rec_next.value,-diff);
    }
}

// --- sample.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr sample::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- sample.FDb.trace.N
// Function return 1
inline static i32 sample::trace_N() {
    return 1;
}

// --- sample.FDb.bh_rec_curs.Add
static void sample::_db_bh_rec_curs_Add(_db_bh_rec_curs &curs, sample::FRec& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    sample::FRec* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        sample::FRec* p = elems[j];
        if (!bh_rec_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- sample.FDb.bh_rec_curs.Reserve
void sample::_db_bh_rec_curs_Reserve(_db_bh_rec_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_rec_N();
        curs.temp_elems   = (sample::FRec**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("sample.cursor_out_of_memory  func:sample.FDb.bh_rec_curs.Reserve");
        }
        curs.temp_max       = bh_rec_N();
    }
}

// --- sample.FDb.bh_rec_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void sample::_db_bh_rec_curs_Reset(_db_bh_rec_curs &curs, sample::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_rec_curs_Reserve(curs, bh_rec_N());
    curs.temp_n = 0;
    if (parent.bh_rec_n > 0) {
        sample::FRec &first = *parent.bh_rec_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- sample.FDb.bh_rec_curs.Next
// Advance cursor.
void sample::_db_bh_rec_curs_Next(_db_bh_rec_curs &curs) {
    sample::FRec* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        sample::FRec* dead = elems[0];
        int i       = 0;
        sample::FRec* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            sample::FRec* choose = last;
            int l         = i*2+1;
            if (l<n) {
                sample::FRec* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                sample::FRec* er = elems[r];
                if (bh_rec_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_rec_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_rec_idx;
        i = (index*2+1);
        if (i < bh_rec_N()) {
            sample::FRec &elem = *curs.parent->bh_rec_elems[i];
            _db_bh_rec_curs_Add(curs, elem);
        }
        if (i+1 < bh_rec_N()) {
            sample::FRec &elem = *curs.parent->bh_rec_elems[i + 1];
            _db_bh_rec_curs_Add(curs, elem);
        }
    }
}

// --- sample.FDb..Init
// Set all fields to initial values.
void sample::FDb_Init() {
    // rec: initialize Tpool
    _db.rec_free      = NULL;
    _db.rec_blocksize = algo::BumpToPow2(64 * sizeof(sample::FRec)); // allocate 64-127 elements at a time
    // initialize hash table for sample::FRec;
    _db.ind_rec_n             	= 0; // (sample.FDb.ind_rec)
    _db.ind_rec_buckets_n     	= 4; // (sample.FDb.ind_rec)
    _db.ind_rec_buckets_elems 	= (sample::FRec**)algo_lib::malloc_AllocMem(sizeof(sample::FRec*)*_db.ind_rec_buckets_n); // initial buckets (sample.FDb.ind_rec)
    if (!_db.ind_rec_buckets_elems) {
        FatalErrorExit("out of memory"); // (sample.FDb.ind_rec)
    }
    memset(_db.ind_rec_buckets_elems, 0, sizeof(sample::FRec*)*_db.ind_rec_buckets_n); // (sample.FDb.ind_rec)
    _db.bh_rec_max   	= 0; // (sample.FDb.bh_rec)
    _db.bh_rec_n     	= 0; // (sample.FDb.bh_rec)
    _db.bh_rec_elems 	= NULL; // (sample.FDb.bh_rec)
    sample::_db.bh_rec_delay = algo::ToSchedTime(1); // initialize fstep delay (sample.FDb.bh_rec)

    sample::InitReflection();
}

// --- sample.FDb..Uninit
void sample::FDb_Uninit() {
    sample::FDb &row = _db; (void)row;

    // sample.FDb.bh_rec.Uninit (Bheap)  //
    // skip destruction in global scope

    // sample.FDb.ind_rec.Uninit (Thash)  //
    // skip destruction of ind_rec in global scope
}

// --- sample.Reckey..ReadFieldMaybe
bool sample::Reckey_ReadFieldMaybe(sample::Reckey& parent, algo::strptr field, algo::strptr strval) {
    bool retval = true;
    sample::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case sample_FieldId_key1: {
            retval = i32_ReadStrptrMaybe(parent.key1, strval);
            break;
        }
        case sample_FieldId_key2: {
            retval = double_ReadStrptrMaybe(parent.key2, strval);
            break;
        }
        case sample_FieldId_key3: {
            retval = algo::Smallstr20_ReadStrptrMaybe(parent.key3, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- sample.Reckey..ReadStrptrMaybe
// Read fields of sample::Reckey from an ascii string.
// The format of the string is a string with separated values
bool sample::Reckey_ReadStrptrMaybe(sample::Reckey &parent, algo::strptr in_str) {
    bool retval = true;
    algo::strptr value;

    algo::NextSep(in_str, '/', value);
    retval = retval && i32_ReadStrptrMaybe(parent.key1, value);

    algo::NextSep(in_str, '/', value);
    retval = retval && double_ReadStrptrMaybe(parent.key2, value);

    value = in_str;
    retval = retval && algo::Smallstr20_ReadStrptrMaybe(parent.key3, value);
    return retval;
}

// --- sample.Reckey..Print
// print string representation of ROW to string STR
// cfmt:sample.Reckey.String  printfmt:Sep
void sample::Reckey_Print(sample::Reckey& row, algo::cstring& str) {
    i32_Print(row.key1, str);
    str << '/';
    double_Print(row.key2, str);
    str << '/';
    algo::Smallstr20_Print(row.key3, str);
}

// --- sample.FRec..Uninit
void sample::FRec_Uninit(sample::FRec& rec) {
    sample::FRec &row = rec; (void)row;
    ind_rec_Remove(row); // remove rec from index ind_rec
    bh_rec_Remove(row); // remove rec from index bh_rec
}

// --- sample.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* sample::value_ToCstr(const sample::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case sample_FieldId_key1           : ret = "key1";  break;
        case sample_FieldId_key2           : ret = "key2";  break;
        case sample_FieldId_key3           : ret = "key3";  break;
        case sample_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- sample.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void sample::value_Print(const sample::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- sample.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool sample::value_SetStrptrMaybe(sample::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('k','e','y','1'): {
                    value_SetEnum(parent,sample_FieldId_key1); ret = true; break;
                }
                case LE_STR4('k','e','y','2'): {
                    value_SetEnum(parent,sample_FieldId_key2); ret = true; break;
                }
                case LE_STR4('k','e','y','3'): {
                    value_SetEnum(parent,sample_FieldId_key3); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,sample_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- sample.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void sample::value_SetStrptr(sample::FieldId& parent, algo::strptr rhs, sample_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- sample.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool sample::value_ReadStrptrMaybe(sample::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- sample.FieldId..ReadStrptrMaybe
// Read fields of sample::FieldId from an ascii string.
// The format of the string is the format of the sample::FieldId's only field
bool sample::FieldId_ReadStrptrMaybe(sample::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- sample.FieldId..Print
// print string representation of ROW to string STR
// cfmt:sample.FieldId.String  printfmt:Raw
void sample::FieldId_Print(sample::FieldId& row, algo::cstring& str) {
    sample::value_Print(row, str);
}

// --- sample...SizeCheck
inline static void sample::SizeCheck() {
}

// --- sample...StaticCheck
void sample::StaticCheck() {
    algo_assert(_offset_of(sample::FieldId, value) + sizeof(((sample::FieldId*)0)->value) == sizeof(sample::FieldId));
}

// --- sample...main
int main(int argc, char **argv) {
    try {
        algo_lib::FDb_Init();
        lib_json::FDb_Init();
        sample::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        sample::ReadArgv(); // dmmeta.main:sample
        sample::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("sample.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        sample::FDb_Uninit();
        lib_json::FDb_Uninit();
        algo_lib::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- sample...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
