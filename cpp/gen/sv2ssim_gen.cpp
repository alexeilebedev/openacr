//
// cpp/gen/sv2ssim_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/sv2ssim_gen.h"
#include "include/gen/sv2ssim_gen.inl.h"
#include "include/gen/amcdb_gen.h"
#include "include/gen/amcdb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_amcdb_gen.h"
#include "include/gen/lib_amcdb_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
sv2ssim::FDb    sv2ssim::_db;     // dependency found via dev.targdep

namespace sv2ssim {
const char *sv2ssim_help =
"sv2ssim: sv2ssim - Separated Value file processor\n"
"Usage: sv2ssim [-fname:]<string> [options]\n"
"    OPTION          TYPE    DFLT    COMMENT\n"
"    -in             string  \"data\"  Input directory or filename, - for stdin\n"
"    [fname]         string          Input file, use - for stdin\n"
"    -separator      string  ','     Input field separator\n"
"    -outseparator   string  \"\"      Output separator. Default: ssim\n"
"    -header                 Y       File has header line\n"
"    -ctype          string  \"\"      Type tag for output tuples\n"
"    -ssimfile       string  \"\"      (with -schema) Create ssimfile definition\n"
"    -schema                         (output)Generate schema from input file\n"
"    -field          regx    \"%\"     (output) Print selected fields\n"
"    -data                           (output) Convert input file to ssim tuples\n"
"    -report                 Y       Print final report\n"
"    -prefer_signed                  Prefer signed types when given a choice\n"
"    -verbose        int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug          int             Debug level (0..255); alias -d; cumulative\n"
"    -help                           Print help and exit; alias -h\n"
"    -version                        Print version and exit\n"
"    -signature                      Show signatures and exit; alias -sig\n"
;


} // namespace sv2ssim
namespace sv2ssim { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          svtype_InputMaybe(dmmeta::Svtype &elem) __attribute__((nothrow));
    static bool          bltin_InputMaybe(amcdb::Bltin &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- sv2ssim.FBltin.base.CopyOut
// Copy fields out of row
void sv2ssim::bltin_CopyOut(sv2ssim::FBltin &row, amcdb::Bltin &out) {
    out.ctype = row.ctype;
    out.likeu64 = row.likeu64;
    out.bigendok = row.bigendok;
    out.issigned = row.issigned;
    out.comment = row.comment;
}

// --- sv2ssim.FBltin.base.CopyIn
// Copy fields in to row
void sv2ssim::bltin_CopyIn(sv2ssim::FBltin &row, amcdb::Bltin &in) {
    row.ctype = in.ctype;
    row.likeu64 = in.likeu64;
    row.bigendok = in.bigendok;
    row.issigned = in.issigned;
    row.comment = in.comment;
}

// --- sv2ssim.FBltin..Uninit
void sv2ssim::FBltin_Uninit(sv2ssim::FBltin& bltin) {
    sv2ssim::FBltin &row = bltin; (void)row;
    ind_bltin_Remove(row); // remove bltin from index ind_bltin
}

// --- sv2ssim.trace..Print
// print string representation of sv2ssim::trace to string LHS, no header -- cprint:sv2ssim.trace.String
void sv2ssim::trace_Print(sv2ssim::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "sv2ssim.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- sv2ssim.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     sv2ssim.FDb.cmdline
//     algo_lib.FDb.cmdline
void sv2ssim::ReadArgv() {
    command::sv2ssim &cmd = sv2ssim::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::sv2ssim_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    bool fname_present = false;
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::sv2ssim_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"sv2ssim: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"sv2ssim: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::sv2ssim_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "sv2ssim: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::sv2ssim_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    case command_FieldId_fname: fname_present=true; break;
                    default:break;
                }
            }
            if (!ret) {
                err<<"sv2ssim: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
        if (!fname_present) {
            err << "sv2ssim: Missing value for required argument -fname (see -help)" << eol;
            doexit = true;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(sv2ssim_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(sv2ssim::LoadTuplesMaybe(cmd.in,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- sv2ssim.FDb._db.MainLoop
// Main loop.
void sv2ssim::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        sv2ssim::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- sv2ssim.FDb._db.Step
// Main step
void sv2ssim::Step() {
}

// --- sv2ssim.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void sv2ssim::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("sv2ssim", sv2ssim::InsertStrptrMaybe, NULL, sv2ssim::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "sv2ssim.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(sv2ssim::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)sv2ssim::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'sv2ssim.Input'  signature:'af79eaf9b4ed5338f63e526d8cc7f32e470fe2ad'");
}

// --- sv2ssim.FDb._db.StaticCheck
void sv2ssim::StaticCheck() {
    algo_assert(_offset_of(sv2ssim::FieldId, value) + sizeof(((sv2ssim::FieldId*)0)->value) == sizeof(sv2ssim::FieldId));
}

// --- sv2ssim.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool sv2ssim::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    sv2ssim::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case sv2ssim_TableId_dmmeta_Svtype: { // finput:sv2ssim.FDb.svtype
            dmmeta::Svtype elem;
            retval = dmmeta::Svtype_ReadStrptrMaybe(elem, str);
            retval = retval && svtype_InputMaybe(elem);
            break;
        }
        case sv2ssim_TableId_amcdb_Bltin: { // finput:sv2ssim.FDb.bltin
            amcdb::Bltin elem;
            retval = amcdb::Bltin_ReadStrptrMaybe(elem, str);
            retval = retval && bltin_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- sv2ssim.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool sv2ssim::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = sv2ssim::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = sv2ssim::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && sv2ssim::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && sv2ssim::LoadTuplesFile(algo::SsimFname(root,"amcdb.bltin"),recursive);
        retval = retval && sv2ssim::LoadTuplesFile(algo::SsimFname(root,"dmmeta.svtype"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- sv2ssim.FDb._db.LoadTuplesFile
// Load all finputs from given file.
bool sv2ssim::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo_FileFlags__throw);
    retval = LoadTuplesFd(fildes.fd, fname, recursive);
    return retval;
}

// --- sv2ssim.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool sv2ssim::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && sv2ssim::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- sv2ssim.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool sv2ssim::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = sv2ssim::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- sv2ssim.FDb._db.Steps
// Calls Step function of dependencies
void sv2ssim::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- sv2ssim.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sv2ssim::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- sv2ssim.FDb.field.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sv2ssim::FField& sv2ssim::field_Alloc() {
    sv2ssim::FField* row = field_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sv2ssim.out_of_mem  field:sv2ssim.FDb.field  comment:'Alloc failed'");
    }
    return *row;
}

// --- sv2ssim.FDb.field.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sv2ssim::FField* sv2ssim::field_AllocMaybe() {
    sv2ssim::FField *row = (sv2ssim::FField*)field_AllocMem();
    if (row) {
        new (row) sv2ssim::FField; // call constructor
        row->rowid = i32(field_N() - 1);
    }
    return row;
}

// --- sv2ssim.FDb.field.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* sv2ssim::field_AllocMem() {
    u64 new_nelems     = _db.field_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    sv2ssim::FField*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.field_lary[bsr];
        if (!lev) {
            lev=(sv2ssim::FField*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FField) * (u64(1)<<bsr));
            _db.field_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.field_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- sv2ssim.FDb.field.RemoveAll
// Remove all elements from Lary
void sv2ssim::field_RemoveAll() {
    for (u64 n = _db.field_n; n>0; ) {
        n--;
        field_qFind(i32(n)).~FField(); // destroy last element
        _db.field_n = i32(n);
    }
}

// --- sv2ssim.FDb.field.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sv2ssim::field_RemoveLast() {
    u64 n = _db.field_n;
    if (n > 0) {
        n -= 1;
        field_qFind(i32(n)).~FField();
        _db.field_n = i32(n);
    }
}

// --- sv2ssim.FDb.field.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sv2ssim::field_XrefMaybe(sv2ssim::FField &row) {
    bool retval = true;
    (void)row;
    // insert field into index ind_field
    if (true) { // user-defined insert condition
        bool success = ind_field_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "sv2ssim.duplicate_key  xref:sv2ssim.FDb.ind_field"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- sv2ssim.FDb.linetok.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
algo::cstring& sv2ssim::linetok_Alloc() {
    linetok_Reserve(1);
    int n  = _db.linetok_n;
    int at = n;
    algo::cstring *elems = _db.linetok_elems;
    new (elems + at) algo::cstring(); // construct new element, default initializer
    _db.linetok_n = n+1;
    return elems[at];
}

// --- sv2ssim.FDb.linetok.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
algo::cstring& sv2ssim::linetok_AllocAt(int at) {
    linetok_Reserve(1);
    int n  = _db.linetok_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("sv2ssim.bad_alloc_at  field:sv2ssim.FDb.linetok  comment:'index out of range'");
    }
    algo::cstring *elems = _db.linetok_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(algo::cstring));
    new (elems + at) algo::cstring(); // construct element, default initializer
    _db.linetok_n = n+1;
    return elems[at];
}

// --- sv2ssim.FDb.linetok.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> sv2ssim::linetok_AllocN(int n_elems) {
    linetok_Reserve(n_elems);
    int old_n  = _db.linetok_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.linetok_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(); // construct new element, default initialize
    }
    _db.linetok_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- sv2ssim.FDb.linetok.Remove
// Remove item by index. If index outside of range, do nothing.
void sv2ssim::linetok_Remove(u32 i) {
    u32 lim = _db.linetok_n;
    algo::cstring *elems = _db.linetok_elems;
    if (i < lim) {
        elems[i].~cstring(); // destroy element
        memmove(elems + i, elems + (i + 1), sizeof(algo::cstring) * (lim - (i + 1)));
        _db.linetok_n = lim - 1;
    }
}

// --- sv2ssim.FDb.linetok.RemoveAll
void sv2ssim::linetok_RemoveAll() {
    u32 n = _db.linetok_n;
    while (n > 0) {
        n -= 1;
        _db.linetok_elems[n].~cstring();
        _db.linetok_n = n;
    }
}

// --- sv2ssim.FDb.linetok.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sv2ssim::linetok_RemoveLast() {
    u64 n = _db.linetok_n;
    if (n > 0) {
        n -= 1;
        linetok_qFind(u64(n)).~cstring();
        _db.linetok_n = n;
    }
}

// --- sv2ssim.FDb.linetok.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void sv2ssim::linetok_AbsReserve(int n) {
    u32 old_max  = _db.linetok_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.linetok_elems, old_max * sizeof(algo::cstring), new_max * sizeof(algo::cstring));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("sv2ssim.tary_nomem  field:sv2ssim.FDb.linetok  comment:'out of memory'");
        }
        _db.linetok_elems = (algo::cstring*)new_mem;
        _db.linetok_max = new_max;
    }
}

// --- sv2ssim.FDb.linetok.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> sv2ssim::linetok_AllocNVal(int n_elems, const algo::cstring& val) {
    linetok_Reserve(n_elems);
    int old_n  = _db.linetok_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.linetok_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(val);
    }
    _db.linetok_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- sv2ssim.FDb.svtype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sv2ssim::FSvtype& sv2ssim::svtype_Alloc() {
    sv2ssim::FSvtype* row = svtype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sv2ssim.out_of_mem  field:sv2ssim.FDb.svtype  comment:'Alloc failed'");
    }
    return *row;
}

// --- sv2ssim.FDb.svtype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sv2ssim::FSvtype* sv2ssim::svtype_AllocMaybe() {
    sv2ssim::FSvtype *row = (sv2ssim::FSvtype*)svtype_AllocMem();
    if (row) {
        new (row) sv2ssim::FSvtype; // call constructor
    }
    return row;
}

// --- sv2ssim.FDb.svtype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
sv2ssim::FSvtype* sv2ssim::svtype_InsertMaybe(const dmmeta::Svtype &value) {
    sv2ssim::FSvtype *row = &svtype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    svtype_CopyIn(*row,const_cast<dmmeta::Svtype&>(value));
    bool ok = svtype_XrefMaybe(*row); // this may return false
    if (!ok) {
        svtype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- sv2ssim.FDb.svtype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* sv2ssim::svtype_AllocMem() {
    u64 new_nelems     = _db.svtype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    sv2ssim::FSvtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.svtype_lary[bsr];
        if (!lev) {
            lev=(sv2ssim::FSvtype*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FSvtype) * (u64(1)<<bsr));
            _db.svtype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.svtype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- sv2ssim.FDb.svtype.RemoveAll
// Remove all elements from Lary
void sv2ssim::svtype_RemoveAll() {
    for (u64 n = _db.svtype_n; n>0; ) {
        n--;
        svtype_qFind(u64(n)).~FSvtype(); // destroy last element
        _db.svtype_n = i32(n);
    }
}

// --- sv2ssim.FDb.svtype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sv2ssim::svtype_RemoveLast() {
    u64 n = _db.svtype_n;
    if (n > 0) {
        n -= 1;
        svtype_qFind(u64(n)).~FSvtype();
        _db.svtype_n = i32(n);
    }
}

// --- sv2ssim.FDb.svtype.InputMaybe
static bool sv2ssim::svtype_InputMaybe(dmmeta::Svtype &elem) {
    bool retval = true;
    retval = svtype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- sv2ssim.FDb.svtype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sv2ssim::svtype_XrefMaybe(sv2ssim::FSvtype &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- sv2ssim.FDb.ind_field.Find
// Find row by key. Return NULL if not found.
sv2ssim::FField* sv2ssim::ind_field_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_field_buckets_n - 1);
    sv2ssim::FField* *e = &_db.ind_field_buckets_elems[index];
    sv2ssim::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).name == key;
        if (done) break;
        e         = &ret->ind_field_next;
    } while (true);
    return ret;
}

// --- sv2ssim.FDb.ind_field.FindX
// Look up row by key and return reference. Throw exception if not found
sv2ssim::FField& sv2ssim::ind_field_FindX(const algo::strptr& key) {
    sv2ssim::FField* ret = ind_field_Find(key);
    vrfy(ret, tempstr() << "sv2ssim.key_error  table:ind_field  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- sv2ssim.FDb.ind_field.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
sv2ssim::FField& sv2ssim::ind_field_GetOrCreate(const algo::strptr& key) {
    sv2ssim::FField* ret = ind_field_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &field_Alloc();
        (*ret).name = key;
        bool good = field_XrefMaybe(*ret);
        if (!good) {
            field_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "sv2ssim.create_error  table:ind_field  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- sv2ssim.FDb.ind_field.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool sv2ssim::ind_field_InsertMaybe(sv2ssim::FField& row) {
    ind_field_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_field_next == (sv2ssim::FField*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.name) & (_db.ind_field_buckets_n - 1);
        sv2ssim::FField* *prev = &_db.ind_field_buckets_elems[index];
        do {
            sv2ssim::FField* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).name == row.name) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_field_next;
        } while (true);
        if (retval) {
            row.ind_field_next = *prev;
            _db.ind_field_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- sv2ssim.FDb.ind_field.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void sv2ssim::ind_field_Remove(sv2ssim::FField& row) {
    if (LIKELY(row.ind_field_next != (sv2ssim::FField*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.name) & (_db.ind_field_buckets_n - 1);
        sv2ssim::FField* *prev = &_db.ind_field_buckets_elems[index]; // addr of pointer to current element
        while (sv2ssim::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_field_next; // unlink (singly linked list)
                _db.ind_field_n--;
                row.ind_field_next = (sv2ssim::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_field_next;
        }
    }
}

// --- sv2ssim.FDb.ind_field.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void sv2ssim::ind_field_Reserve(int n) {
    u32 old_nbuckets = _db.ind_field_buckets_n;
    u32 new_nelems   = _db.ind_field_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(sv2ssim::FField*);
        u32 new_size = new_nbuckets * sizeof(sv2ssim::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        sv2ssim::FField* *new_buckets = (sv2ssim::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("sv2ssim.out_of_memory  field:sv2ssim.FDb.ind_field");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_field_buckets_n; i++) {
            sv2ssim::FField* elem = _db.ind_field_buckets_elems[i];
            while (elem) {
                sv2ssim::FField &row        = *elem;
                sv2ssim::FField* next       = row.ind_field_next;
                u32 index          = algo::cstring_Hash(0, row.name) & (new_nbuckets-1);
                row.ind_field_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_field_buckets_elems, old_size);
        _db.ind_field_buckets_elems = new_buckets;
        _db.ind_field_buckets_n = new_nbuckets;
    }
}

// --- sv2ssim.FDb.zd_selfield.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void sv2ssim::zd_selfield_Insert(sv2ssim::FField& row) {
    if (!zd_selfield_InLlistQ(row)) {
        sv2ssim::FField* old_tail = _db.zd_selfield_tail;
        row.zd_selfield_next = NULL;
        row.zd_selfield_prev = old_tail;
        _db.zd_selfield_tail = &row;
        sv2ssim::FField **new_row_a = &old_tail->zd_selfield_next;
        sv2ssim::FField **new_row_b = &_db.zd_selfield_head;
        sv2ssim::FField **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_selfield_n++;
    }
}

// --- sv2ssim.FDb.zd_selfield.Remove
// Remove element from index. If element is not in index, do nothing.
void sv2ssim::zd_selfield_Remove(sv2ssim::FField& row) {
    if (zd_selfield_InLlistQ(row)) {
        sv2ssim::FField* old_head       = _db.zd_selfield_head;
        (void)old_head; // in case it's not used
        sv2ssim::FField* prev = row.zd_selfield_prev;
        sv2ssim::FField* next = row.zd_selfield_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        sv2ssim::FField **new_next_a = &prev->zd_selfield_next;
        sv2ssim::FField **new_next_b = &_db.zd_selfield_head;
        sv2ssim::FField **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        sv2ssim::FField **new_prev_a = &next->zd_selfield_prev;
        sv2ssim::FField **new_prev_b = &_db.zd_selfield_tail;
        sv2ssim::FField **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_selfield_n--;
        row.zd_selfield_next=(sv2ssim::FField*)-1; // not-in-list
    }
}

// --- sv2ssim.FDb.zd_selfield.RemoveAll
// Empty the index. (The rows are not deleted)
void sv2ssim::zd_selfield_RemoveAll() {
    sv2ssim::FField* row = _db.zd_selfield_head;
    _db.zd_selfield_head = NULL;
    _db.zd_selfield_tail = NULL;
    _db.zd_selfield_n = 0;
    while (row) {
        sv2ssim::FField* row_next = row->zd_selfield_next;
        row->zd_selfield_next  = (sv2ssim::FField*)-1;
        row->zd_selfield_prev  = NULL;
        row = row_next;
    }
}

// --- sv2ssim.FDb.zd_selfield.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
sv2ssim::FField* sv2ssim::zd_selfield_RemoveFirst() {
    sv2ssim::FField *row = NULL;
    row = _db.zd_selfield_head;
    if (row) {
        sv2ssim::FField *next = row->zd_selfield_next;
        _db.zd_selfield_head = next;
        sv2ssim::FField **new_end_a = &next->zd_selfield_prev;
        sv2ssim::FField **new_end_b = &_db.zd_selfield_tail;
        sv2ssim::FField **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_selfield_n--;
        row->zd_selfield_next = (sv2ssim::FField*)-1; // mark as not-in-list
    }
    return row;
}

// --- sv2ssim.FDb.bltin.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
sv2ssim::FBltin& sv2ssim::bltin_Alloc() {
    sv2ssim::FBltin* row = bltin_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("sv2ssim.out_of_mem  field:sv2ssim.FDb.bltin  comment:'Alloc failed'");
    }
    return *row;
}

// --- sv2ssim.FDb.bltin.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
sv2ssim::FBltin* sv2ssim::bltin_AllocMaybe() {
    sv2ssim::FBltin *row = (sv2ssim::FBltin*)bltin_AllocMem();
    if (row) {
        new (row) sv2ssim::FBltin; // call constructor
    }
    return row;
}

// --- sv2ssim.FDb.bltin.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
sv2ssim::FBltin* sv2ssim::bltin_InsertMaybe(const amcdb::Bltin &value) {
    sv2ssim::FBltin *row = &bltin_Alloc(); // if out of memory, process dies. if input error, return NULL.
    bltin_CopyIn(*row,const_cast<amcdb::Bltin&>(value));
    bool ok = bltin_XrefMaybe(*row); // this may return false
    if (!ok) {
        bltin_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- sv2ssim.FDb.bltin.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* sv2ssim::bltin_AllocMem() {
    u64 new_nelems     = _db.bltin_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    sv2ssim::FBltin*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.bltin_lary[bsr];
        if (!lev) {
            lev=(sv2ssim::FBltin*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FBltin) * (u64(1)<<bsr));
            _db.bltin_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.bltin_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- sv2ssim.FDb.bltin.RemoveAll
// Remove all elements from Lary
void sv2ssim::bltin_RemoveAll() {
    for (u64 n = _db.bltin_n; n>0; ) {
        n--;
        bltin_qFind(u64(n)).~FBltin(); // destroy last element
        _db.bltin_n = i32(n);
    }
}

// --- sv2ssim.FDb.bltin.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void sv2ssim::bltin_RemoveLast() {
    u64 n = _db.bltin_n;
    if (n > 0) {
        n -= 1;
        bltin_qFind(u64(n)).~FBltin();
        _db.bltin_n = i32(n);
    }
}

// --- sv2ssim.FDb.bltin.InputMaybe
static bool sv2ssim::bltin_InputMaybe(amcdb::Bltin &elem) {
    bool retval = true;
    retval = bltin_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- sv2ssim.FDb.bltin.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool sv2ssim::bltin_XrefMaybe(sv2ssim::FBltin &row) {
    bool retval = true;
    (void)row;
    // insert bltin into index ind_bltin
    if (true) { // user-defined insert condition
        bool success = ind_bltin_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "sv2ssim.duplicate_key  xref:sv2ssim.FDb.ind_bltin"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- sv2ssim.FDb.ind_bltin.Find
// Find row by key. Return NULL if not found.
sv2ssim::FBltin* sv2ssim::ind_bltin_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_bltin_buckets_n - 1);
    sv2ssim::FBltin* *e = &_db.ind_bltin_buckets_elems[index];
    sv2ssim::FBltin* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_bltin_next;
    } while (true);
    return ret;
}

// --- sv2ssim.FDb.ind_bltin.FindX
// Look up row by key and return reference. Throw exception if not found
sv2ssim::FBltin& sv2ssim::ind_bltin_FindX(const algo::strptr& key) {
    sv2ssim::FBltin* ret = ind_bltin_Find(key);
    vrfy(ret, tempstr() << "sv2ssim.key_error  table:ind_bltin  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- sv2ssim.FDb.ind_bltin.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
sv2ssim::FBltin& sv2ssim::ind_bltin_GetOrCreate(const algo::strptr& key) {
    sv2ssim::FBltin* ret = ind_bltin_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &bltin_Alloc();
        (*ret).ctype = key;
        bool good = bltin_XrefMaybe(*ret);
        if (!good) {
            bltin_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "sv2ssim.create_error  table:ind_bltin  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- sv2ssim.FDb.ind_bltin.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool sv2ssim::ind_bltin_InsertMaybe(sv2ssim::FBltin& row) {
    ind_bltin_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_bltin_next == (sv2ssim::FBltin*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_bltin_buckets_n - 1);
        sv2ssim::FBltin* *prev = &_db.ind_bltin_buckets_elems[index];
        do {
            sv2ssim::FBltin* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_bltin_next;
        } while (true);
        if (retval) {
            row.ind_bltin_next = *prev;
            _db.ind_bltin_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- sv2ssim.FDb.ind_bltin.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void sv2ssim::ind_bltin_Remove(sv2ssim::FBltin& row) {
    if (LIKELY(row.ind_bltin_next != (sv2ssim::FBltin*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_bltin_buckets_n - 1);
        sv2ssim::FBltin* *prev = &_db.ind_bltin_buckets_elems[index]; // addr of pointer to current element
        while (sv2ssim::FBltin *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_bltin_next; // unlink (singly linked list)
                _db.ind_bltin_n--;
                row.ind_bltin_next = (sv2ssim::FBltin*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_bltin_next;
        }
    }
}

// --- sv2ssim.FDb.ind_bltin.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void sv2ssim::ind_bltin_Reserve(int n) {
    u32 old_nbuckets = _db.ind_bltin_buckets_n;
    u32 new_nelems   = _db.ind_bltin_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(sv2ssim::FBltin*);
        u32 new_size = new_nbuckets * sizeof(sv2ssim::FBltin*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        sv2ssim::FBltin* *new_buckets = (sv2ssim::FBltin**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("sv2ssim.out_of_memory  field:sv2ssim.FDb.ind_bltin");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_bltin_buckets_n; i++) {
            sv2ssim::FBltin* elem = _db.ind_bltin_buckets_elems[i];
            while (elem) {
                sv2ssim::FBltin &row        = *elem;
                sv2ssim::FBltin* next       = row.ind_bltin_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_bltin_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_bltin_buckets_elems, old_size);
        _db.ind_bltin_buckets_elems = new_buckets;
        _db.ind_bltin_buckets_n = new_nbuckets;
    }
}

// --- sv2ssim.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr sv2ssim::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- sv2ssim.FDb.trace.N
// Function return 1
inline static i32 sv2ssim::trace_N() {
    return 1;
}

// --- sv2ssim.FDb..Init
// Set all fields to initial values.
void sv2ssim::FDb_Init() {
    // initialize LAry field (sv2ssim.FDb.field)
    _db.field_n = 0;
    memset(_db.field_lary, 0, sizeof(_db.field_lary)); // zero out all level pointers
    sv2ssim::FField* field_first = (sv2ssim::FField*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FField) * (u64(1)<<4));
    if (!field_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.field_lary[i]  = field_first;
        field_first    += 1ULL<<i;
    }
    _db.linetok_elems 	= 0; // (sv2ssim.FDb.linetok)
    _db.linetok_n     	= 0; // (sv2ssim.FDb.linetok)
    _db.linetok_max   	= 0; // (sv2ssim.FDb.linetok)
    _db.n_wideline = i32(true);
    // initialize LAry svtype (sv2ssim.FDb.svtype)
    _db.svtype_n = 0;
    memset(_db.svtype_lary, 0, sizeof(_db.svtype_lary)); // zero out all level pointers
    sv2ssim::FSvtype* svtype_first = (sv2ssim::FSvtype*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FSvtype) * (u64(1)<<4));
    if (!svtype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.svtype_lary[i]  = svtype_first;
        svtype_first    += 1ULL<<i;
    }
    // initialize hash table for sv2ssim::FField;
    _db.ind_field_n             	= 0; // (sv2ssim.FDb.ind_field)
    _db.ind_field_buckets_n     	= 4; // (sv2ssim.FDb.ind_field)
    _db.ind_field_buckets_elems 	= (sv2ssim::FField**)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FField*)*_db.ind_field_buckets_n); // initial buckets (sv2ssim.FDb.ind_field)
    if (!_db.ind_field_buckets_elems) {
        FatalErrorExit("out of memory"); // (sv2ssim.FDb.ind_field)
    }
    memset(_db.ind_field_buckets_elems, 0, sizeof(sv2ssim::FField*)*_db.ind_field_buckets_n); // (sv2ssim.FDb.ind_field)
    _db.zd_selfield_head = NULL; // (sv2ssim.FDb.zd_selfield)
    _db.zd_selfield_n = 0; // (sv2ssim.FDb.zd_selfield)
    _db.zd_selfield_tail = NULL; // (sv2ssim.FDb.zd_selfield)
    // initialize LAry bltin (sv2ssim.FDb.bltin)
    _db.bltin_n = 0;
    memset(_db.bltin_lary, 0, sizeof(_db.bltin_lary)); // zero out all level pointers
    sv2ssim::FBltin* bltin_first = (sv2ssim::FBltin*)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FBltin) * (u64(1)<<4));
    if (!bltin_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.bltin_lary[i]  = bltin_first;
        bltin_first    += 1ULL<<i;
    }
    // initialize hash table for sv2ssim::FBltin;
    _db.ind_bltin_n             	= 0; // (sv2ssim.FDb.ind_bltin)
    _db.ind_bltin_buckets_n     	= 4; // (sv2ssim.FDb.ind_bltin)
    _db.ind_bltin_buckets_elems 	= (sv2ssim::FBltin**)algo_lib::malloc_AllocMem(sizeof(sv2ssim::FBltin*)*_db.ind_bltin_buckets_n); // initial buckets (sv2ssim.FDb.ind_bltin)
    if (!_db.ind_bltin_buckets_elems) {
        FatalErrorExit("out of memory"); // (sv2ssim.FDb.ind_bltin)
    }
    memset(_db.ind_bltin_buckets_elems, 0, sizeof(sv2ssim::FBltin*)*_db.ind_bltin_buckets_n); // (sv2ssim.FDb.ind_bltin)

    sv2ssim::InitReflection();
}

// --- sv2ssim.FDb..Uninit
void sv2ssim::FDb_Uninit() {
    sv2ssim::FDb &row = _db; (void)row;

    // sv2ssim.FDb.ind_bltin.Uninit (Thash)  //
    // skip destruction of ind_bltin in global scope

    // sv2ssim.FDb.bltin.Uninit (Lary)  //
    // skip destruction in global scope

    // sv2ssim.FDb.ind_field.Uninit (Thash)  //
    // skip destruction of ind_field in global scope

    // sv2ssim.FDb.svtype.Uninit (Lary)  //
    // skip destruction in global scope

    // sv2ssim.FDb.linetok.Uninit (Tary)  //Current line, tokenized
    // remove all elements from sv2ssim.FDb.linetok
    linetok_RemoveAll();
    // free memory for Tary sv2ssim.FDb.linetok
    algo_lib::malloc_FreeMem(_db.linetok_elems, sizeof(algo::cstring)*_db.linetok_max); // (sv2ssim.FDb.linetok)

    // sv2ssim.FDb.field.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- sv2ssim.FField..Init
// Set all fields to initial values.
void sv2ssim::FField_Init(sv2ssim::FField& field) {
    field.maxwid = i32(0);
    field.minval = double(1e300);
    field.maxval = double(-1e300);
    field.minwid_fix1 = i32(100000);
    field.maxwid_fix1 = i32(0);
    field.minwid_fix2 = i32(100000);
    field.maxwid_fix2 = i32(0);
    field.couldbe_int = bool(true);
    field.couldbe_bool = bool(true);
    field.couldbe_fixwid = bool(true);
    field.couldbe_double = bool(true);
    field.rowid = i32(0);
    field.ind_field_next = (sv2ssim::FField*)-1; // (sv2ssim.FDb.ind_field) not-in-hash
    field.zd_selfield_next = (sv2ssim::FField*)-1; // (sv2ssim.FDb.zd_selfield) not-in-list
    field.zd_selfield_prev = NULL; // (sv2ssim.FDb.zd_selfield)
}

// --- sv2ssim.FField..ReadFieldMaybe
bool sv2ssim::FField_ReadFieldMaybe(sv2ssim::FField &parent, algo::strptr field, algo::strptr strval) {
    sv2ssim::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case sv2ssim_FieldId_name: retval = algo::cstring_ReadStrptrMaybe(parent.name, strval); break;
        case sv2ssim_FieldId_ctype: retval = algo::Smallstr50_ReadStrptrMaybe(parent.ctype, strval); break;
        case sv2ssim_FieldId_maxwid: retval = i32_ReadStrptrMaybe(parent.maxwid, strval); break;
        case sv2ssim_FieldId_minval: retval = double_ReadStrptrMaybe(parent.minval, strval); break;
        case sv2ssim_FieldId_maxval: retval = double_ReadStrptrMaybe(parent.maxval, strval); break;
        case sv2ssim_FieldId_minwid_fix1: retval = i32_ReadStrptrMaybe(parent.minwid_fix1, strval); break;
        case sv2ssim_FieldId_maxwid_fix1: retval = i32_ReadStrptrMaybe(parent.maxwid_fix1, strval); break;
        case sv2ssim_FieldId_minwid_fix2: retval = i32_ReadStrptrMaybe(parent.minwid_fix2, strval); break;
        case sv2ssim_FieldId_maxwid_fix2: retval = i32_ReadStrptrMaybe(parent.maxwid_fix2, strval); break;
        case sv2ssim_FieldId_couldbe_int: retval = bool_ReadStrptrMaybe(parent.couldbe_int, strval); break;
        case sv2ssim_FieldId_couldbe_bool: retval = bool_ReadStrptrMaybe(parent.couldbe_bool, strval); break;
        case sv2ssim_FieldId_couldbe_fixwid: retval = bool_ReadStrptrMaybe(parent.couldbe_fixwid, strval); break;
        case sv2ssim_FieldId_couldbe_double: retval = bool_ReadStrptrMaybe(parent.couldbe_double, strval); break;
        case sv2ssim_FieldId_rowid: retval = i32_ReadStrptrMaybe(parent.rowid, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- sv2ssim.FField..ReadStrptrMaybe
// Read fields of sv2ssim::FField from an ascii string.
// The format of the string is an ssim Tuple
bool sv2ssim::FField_ReadStrptrMaybe(sv2ssim::FField &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "sv2ssim.FField");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && FField_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- sv2ssim.FField..Uninit
void sv2ssim::FField_Uninit(sv2ssim::FField& field) {
    sv2ssim::FField &row = field; (void)row;
    ind_field_Remove(row); // remove field from index ind_field
    zd_selfield_Remove(row); // remove field from index zd_selfield
}

// --- sv2ssim.FField..Print
// print string representation of sv2ssim::FField to string LHS, no header -- cprint:sv2ssim.FField.String
void sv2ssim::FField_Print(sv2ssim::FField & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "sv2ssim.FField";

    algo::cstring_Print(row.name, temp);
    PrintAttrSpaceReset(str,"name", temp);

    algo::Smallstr50_Print(row.ctype, temp);
    PrintAttrSpaceReset(str,"ctype", temp);

    i32_Print(row.maxwid, temp);
    PrintAttrSpaceReset(str,"maxwid", temp);

    double_Print(row.minval, temp);
    PrintAttrSpaceReset(str,"minval", temp);

    double_Print(row.maxval, temp);
    PrintAttrSpaceReset(str,"maxval", temp);

    i32_Print(row.minwid_fix1, temp);
    PrintAttrSpaceReset(str,"minwid_fix1", temp);

    i32_Print(row.maxwid_fix1, temp);
    PrintAttrSpaceReset(str,"maxwid_fix1", temp);

    i32_Print(row.minwid_fix2, temp);
    PrintAttrSpaceReset(str,"minwid_fix2", temp);

    i32_Print(row.maxwid_fix2, temp);
    PrintAttrSpaceReset(str,"maxwid_fix2", temp);

    bool_Print(row.couldbe_int, temp);
    PrintAttrSpaceReset(str,"couldbe_int", temp);

    bool_Print(row.couldbe_bool, temp);
    PrintAttrSpaceReset(str,"couldbe_bool", temp);

    bool_Print(row.couldbe_fixwid, temp);
    PrintAttrSpaceReset(str,"couldbe_fixwid", temp);

    bool_Print(row.couldbe_double, temp);
    PrintAttrSpaceReset(str,"couldbe_double", temp);

    i32_Print(row.rowid, temp);
    PrintAttrSpaceReset(str,"rowid", temp);
}

// --- sv2ssim.FSvtype.base.CopyOut
// Copy fields out of row
void sv2ssim::svtype_CopyOut(sv2ssim::FSvtype &row, dmmeta::Svtype &out) {
    out.ctype = row.ctype;
    out.maxwid = row.maxwid;
    out.fixedwid1 = row.fixedwid1;
    out.fixedwid2 = row.fixedwid2;
    out.comment = row.comment;
}

// --- sv2ssim.FSvtype.base.CopyIn
// Copy fields in to row
void sv2ssim::svtype_CopyIn(sv2ssim::FSvtype &row, dmmeta::Svtype &in) {
    row.ctype = in.ctype;
    row.maxwid = in.maxwid;
    row.fixedwid1 = in.fixedwid1;
    row.fixedwid2 = in.fixedwid2;
    row.comment = in.comment;
}

// --- sv2ssim.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* sv2ssim::value_ToCstr(const sv2ssim::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case sv2ssim_FieldId_name          : ret = "name";  break;
        case sv2ssim_FieldId_ctype         : ret = "ctype";  break;
        case sv2ssim_FieldId_maxwid        : ret = "maxwid";  break;
        case sv2ssim_FieldId_minval        : ret = "minval";  break;
        case sv2ssim_FieldId_maxval        : ret = "maxval";  break;
        case sv2ssim_FieldId_minwid_fix1   : ret = "minwid_fix1";  break;
        case sv2ssim_FieldId_maxwid_fix1   : ret = "maxwid_fix1";  break;
        case sv2ssim_FieldId_minwid_fix2   : ret = "minwid_fix2";  break;
        case sv2ssim_FieldId_maxwid_fix2   : ret = "maxwid_fix2";  break;
        case sv2ssim_FieldId_couldbe_int   : ret = "couldbe_int";  break;
        case sv2ssim_FieldId_couldbe_bool  : ret = "couldbe_bool";  break;
        case sv2ssim_FieldId_couldbe_fixwid: ret = "couldbe_fixwid";  break;
        case sv2ssim_FieldId_couldbe_double: ret = "couldbe_double";  break;
        case sv2ssim_FieldId_rowid         : ret = "rowid";  break;
        case sv2ssim_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- sv2ssim.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void sv2ssim::value_Print(const sv2ssim::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- sv2ssim.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool sv2ssim::value_SetStrptrMaybe(sv2ssim::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('n','a','m','e'): {
                    value_SetEnum(parent,sv2ssim_FieldId_name); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('c','t','y','p','e'): {
                    value_SetEnum(parent,sv2ssim_FieldId_ctype); ret = true; break;
                }
                case LE_STR5('r','o','w','i','d'): {
                    value_SetEnum(parent,sv2ssim_FieldId_rowid); ret = true; break;
                }
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,sv2ssim_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 6: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)) {
                case LE_STR6('m','a','x','v','a','l'): {
                    value_SetEnum(parent,sv2ssim_FieldId_maxval); ret = true; break;
                }
                case LE_STR6('m','a','x','w','i','d'): {
                    value_SetEnum(parent,sv2ssim_FieldId_maxwid); ret = true; break;
                }
                case LE_STR6('m','i','n','v','a','l'): {
                    value_SetEnum(parent,sv2ssim_FieldId_minval); ret = true; break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('c','o','u','l','d','b','e','_'): {
                    if (memcmp(rhs.elems+8,"int",3)==0) { value_SetEnum(parent,sv2ssim_FieldId_couldbe_int); ret = true; break; }
                    break;
                }
                case LE_STR8('m','a','x','w','i','d','_','f'): {
                    if (memcmp(rhs.elems+8,"ix1",3)==0) { value_SetEnum(parent,sv2ssim_FieldId_maxwid_fix1); ret = true; break; }
                    if (memcmp(rhs.elems+8,"ix2",3)==0) { value_SetEnum(parent,sv2ssim_FieldId_maxwid_fix2); ret = true; break; }
                    break;
                }
                case LE_STR8('m','i','n','w','i','d','_','f'): {
                    if (memcmp(rhs.elems+8,"ix1",3)==0) { value_SetEnum(parent,sv2ssim_FieldId_minwid_fix1); ret = true; break; }
                    if (memcmp(rhs.elems+8,"ix2",3)==0) { value_SetEnum(parent,sv2ssim_FieldId_minwid_fix2); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('c','o','u','l','d','b','e','_'): {
                    if (memcmp(rhs.elems+8,"bool",4)==0) { value_SetEnum(parent,sv2ssim_FieldId_couldbe_bool); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('c','o','u','l','d','b','e','_'): {
                    if (memcmp(rhs.elems+8,"fixwid",6)==0) { value_SetEnum(parent,sv2ssim_FieldId_couldbe_fixwid); ret = true; break; }
                    if (memcmp(rhs.elems+8,"double",6)==0) { value_SetEnum(parent,sv2ssim_FieldId_couldbe_double); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- sv2ssim.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void sv2ssim::value_SetStrptr(sv2ssim::FieldId& parent, algo::strptr rhs, sv2ssim_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- sv2ssim.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool sv2ssim::value_ReadStrptrMaybe(sv2ssim::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- sv2ssim.FieldId..ReadStrptrMaybe
// Read fields of sv2ssim::FieldId from an ascii string.
// The format of the string is the format of the sv2ssim::FieldId's only field
bool sv2ssim::FieldId_ReadStrptrMaybe(sv2ssim::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- sv2ssim.FieldId..Print
// print string representation of sv2ssim::FieldId to string LHS, no header -- cprint:sv2ssim.FieldId.String
void sv2ssim::FieldId_Print(sv2ssim::FieldId & row, algo::cstring &str) {
    sv2ssim::value_Print(row, str);
}

// --- sv2ssim.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* sv2ssim::value_ToCstr(const sv2ssim::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case sv2ssim_TableId_amcdb_Bltin   : ret = "amcdb.Bltin";  break;
        case sv2ssim_TableId_dmmeta_Svtype : ret = "dmmeta.Svtype";  break;
    }
    return ret;
}

// --- sv2ssim.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void sv2ssim::value_Print(const sv2ssim::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- sv2ssim.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool sv2ssim::value_SetStrptrMaybe(sv2ssim::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('a','m','c','d','b','.','B','l'): {
                    if (memcmp(rhs.elems+8,"tin",3)==0) { value_SetEnum(parent,sv2ssim_TableId_amcdb_Bltin); ret = true; break; }
                    break;
                }
                case LE_STR8('a','m','c','d','b','.','b','l'): {
                    if (memcmp(rhs.elems+8,"tin",3)==0) { value_SetEnum(parent,sv2ssim_TableId_amcdb_bltin); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"vtype",5)==0) { value_SetEnum(parent,sv2ssim_TableId_dmmeta_Svtype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"vtype",5)==0) { value_SetEnum(parent,sv2ssim_TableId_dmmeta_svtype); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- sv2ssim.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void sv2ssim::value_SetStrptr(sv2ssim::TableId& parent, algo::strptr rhs, sv2ssim_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- sv2ssim.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool sv2ssim::value_ReadStrptrMaybe(sv2ssim::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- sv2ssim.TableId..ReadStrptrMaybe
// Read fields of sv2ssim::TableId from an ascii string.
// The format of the string is the format of the sv2ssim::TableId's only field
bool sv2ssim::TableId_ReadStrptrMaybe(sv2ssim::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- sv2ssim.TableId..Print
// print string representation of sv2ssim::TableId to string LHS, no header -- cprint:sv2ssim.TableId.String
void sv2ssim::TableId_Print(sv2ssim::TableId & row, algo::cstring &str) {
    sv2ssim::value_Print(row, str);
}

// --- sv2ssim...SizeCheck
inline static void sv2ssim::SizeCheck() {
}

// --- sv2ssim...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        sv2ssim::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        sv2ssim::ReadArgv(); // dmmeta.main:sv2ssim
        sv2ssim::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("sv2ssim.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        sv2ssim::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- sv2ssim...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
