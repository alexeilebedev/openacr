//
// cpp/gen/atf_gcli_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/atf_gcli_gen.h"
#include "include/gen/atf_gcli_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/gclidb_gen.h"
#include "include/gen/gclidb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
atf_gcli::FDb   atf_gcli::_db;    // dependency found via dev.targdep

namespace atf_gcli {
const char *atf_gcli_help =
"atf_gcli: test harness for gcli\n"
"Usage: atf_gcli [options]\n"
"    OPTION          TYPE    DFLT    COMMENT\n"
"    -in             string  \"data\"  Input directory or filename, - for stdin\n"
"    -gtblacttst     regx    \"%\"     gcli tests regx\n"
"    -id             string  \"\"      Use this issue for $ISSUE substitutions\n"
"    -mr             string  \"\"      Use this issue for $MR substitutions\n"
"    -note           string  \"\"      Use this issue for $NOTE substitutions\n"
"    -capture                        Capture test command output into gverbtout\n"
"    -skip_init                      Skip setting local files - already set\n"
"    -skip_git_init                  Skip setting local files - already set\n"
"    -dry_run                        Print actions, do not perform\n"
"    -verbose        int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug          int             Debug level (0..255); alias -d; cumulative\n"
"    -help                           Print help an exit; alias -h\n"
"    -version                        Print version and exit\n"
"    -signature                      Show signatures and exit; alias -sig\n"
;


} // namespace atf_gcli
namespace atf_gcli { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          gtblacttst_InputMaybe(gclidb::Gtblacttst &elem) __attribute__((nothrow));
    static bool          gtblacttstout_InputMaybe(gclidb::Gtblacttstout &elem) __attribute__((nothrow));
    static bool          gclienvsub_InputMaybe(gclidb::Gclienvsub &elem) __attribute__((nothrow));
    static bool          gclienv_InputMaybe(gclidb::Gclienv &elem) __attribute__((nothrow));
    static bool          gtblact_InputMaybe(gclidb::Gtblact &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- atf_gcli.trace..Print
// print string representation of atf_gcli::trace to string LHS, no header -- cprint:atf_gcli.trace.String
void atf_gcli::trace_Print(atf_gcli::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_gcli.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- atf_gcli.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     atf_gcli.FDb.cmdline
//     algo_lib.FDb.cmdline
void atf_gcli::ReadArgv() {
    command::atf_gcli &cmd = atf_gcli::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::atf_gcli_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"atf_gcli: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "atf_gcli: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::atf_gcli_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"atf_gcli: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(atf_gcli_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    vrfy(atf_gcli::LoadTuplesMaybe(cmd.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- atf_gcli.FDb._db.MainLoop
// Main loop.
void atf_gcli::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        atf_gcli::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- atf_gcli.FDb._db.Step
// Main step
void atf_gcli::Step() {
}

// --- atf_gcli.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void atf_gcli::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("atf_gcli", atf_gcli::InsertStrptrMaybe, NULL, atf_gcli::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "atf_gcli.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(atf_gcli::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)atf_gcli::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'atf_gcli.Input'  signature:'74c531ddb4a9d5e2538fda428996756795d56a09'");
}

// --- atf_gcli.FDb._db.StaticCheck
void atf_gcli::StaticCheck() {
    algo_assert(_offset_of(atf_gcli::FieldId, value) + sizeof(((atf_gcli::FieldId*)0)->value) == sizeof(atf_gcli::FieldId));
}

// --- atf_gcli.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool atf_gcli::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    atf_gcli::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case atf_gcli_TableId_gclidb_Gtblacttst: { // finput:atf_gcli.FDb.gtblacttst
            gclidb::Gtblacttst elem;
            retval = gclidb::Gtblacttst_ReadStrptrMaybe(elem, str);
            retval = retval && gtblacttst_InputMaybe(elem);
            break;
        }
        case atf_gcli_TableId_gclidb_Gtblacttstout: { // finput:atf_gcli.FDb.gtblacttstout
            gclidb::Gtblacttstout elem;
            retval = gclidb::Gtblacttstout_ReadStrptrMaybe(elem, str);
            retval = retval && gtblacttstout_InputMaybe(elem);
            break;
        }
        case atf_gcli_TableId_gclidb_Gclienvsub: { // finput:atf_gcli.FDb.gclienvsub
            gclidb::Gclienvsub elem;
            retval = gclidb::Gclienvsub_ReadStrptrMaybe(elem, str);
            retval = retval && gclienvsub_InputMaybe(elem);
            break;
        }
        case atf_gcli_TableId_gclidb_Gclienv: { // finput:atf_gcli.FDb.gclienv
            gclidb::Gclienv elem;
            retval = gclidb::Gclienv_ReadStrptrMaybe(elem, str);
            retval = retval && gclienv_InputMaybe(elem);
            break;
        }
        case atf_gcli_TableId_gclidb_Gtblact: { // finput:atf_gcli.FDb.gtblact
            gclidb::Gtblact elem;
            retval = gclidb::Gtblact_ReadStrptrMaybe(elem, str);
            retval = retval && gtblact_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- atf_gcli.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool atf_gcli::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "gclidb.gclienv", "gclidb.gclienvsub", "gclidb.gtblact", "gclidb.gtblacttst"
        , "gclidb.gtblacttstout"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, atf_gcli::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- atf_gcli.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool atf_gcli::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, atf_gcli::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- atf_gcli.FDb._db.Steps
// Calls Step function of dependencies
void atf_gcli::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- atf_gcli.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- atf_gcli.FDb.gtblacttst.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_gcli::FGtblacttst& atf_gcli::gtblacttst_Alloc() {
    atf_gcli::FGtblacttst* row = gtblacttst_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_gcli.out_of_mem  field:atf_gcli.FDb.gtblacttst  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_gcli.FDb.gtblacttst.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_gcli::FGtblacttst* atf_gcli::gtblacttst_AllocMaybe() {
    atf_gcli::FGtblacttst *row = (atf_gcli::FGtblacttst*)gtblacttst_AllocMem();
    if (row) {
        new (row) atf_gcli::FGtblacttst; // call constructor
    }
    return row;
}

// --- atf_gcli.FDb.gtblacttst.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_gcli::FGtblacttst* atf_gcli::gtblacttst_InsertMaybe(const gclidb::Gtblacttst &value) {
    atf_gcli::FGtblacttst *row = &gtblacttst_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gtblacttst_CopyIn(*row,const_cast<gclidb::Gtblacttst&>(value));
    bool ok = gtblacttst_XrefMaybe(*row); // this may return false
    if (!ok) {
        gtblacttst_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_gcli.FDb.gtblacttst.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_gcli::gtblacttst_AllocMem() {
    u64 new_nelems     = _db.gtblacttst_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_gcli::FGtblacttst*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gtblacttst_lary[bsr];
        if (!lev) {
            lev=(atf_gcli::FGtblacttst*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttst) * (u64(1)<<bsr));
            _db.gtblacttst_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gtblacttst_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_gcli.FDb.gtblacttst.RemoveAll
// Remove all elements from Lary
void atf_gcli::gtblacttst_RemoveAll() {
    for (u64 n = _db.gtblacttst_n; n>0; ) {
        n--;
        gtblacttst_qFind(u64(n)).~FGtblacttst(); // destroy last element
        _db.gtblacttst_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblacttst.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_gcli::gtblacttst_RemoveLast() {
    u64 n = _db.gtblacttst_n;
    if (n > 0) {
        n -= 1;
        gtblacttst_qFind(u64(n)).~FGtblacttst();
        _db.gtblacttst_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblacttst.InputMaybe
static bool atf_gcli::gtblacttst_InputMaybe(gclidb::Gtblacttst &elem) {
    bool retval = true;
    retval = gtblacttst_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_gcli.FDb.gtblacttst.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::gtblacttst_XrefMaybe(atf_gcli::FGtblacttst &row) {
    bool retval = true;
    (void)row;
    atf_gcli::FGclienv* p_gclienv = atf_gcli::ind_gclienv_Find(gclienv_Get(row));
    if (UNLIKELY(!p_gclienv)) {
        algo_lib::ResetErrtext() << "atf_gcli.bad_xref  index:atf_gcli.FDb.ind_gclienv" << Keyval("key", gclienv_Get(row));
        return false;
    }
    // gtblacttst: save pointer to gclienv
    if (true) { // user-defined insert condition
        row.p_gclienv = p_gclienv;
    }
    atf_gcli::FGtblact* p_gtblact = atf_gcli::ind_gtblact_Find(gtblact_Get(row));
    if (UNLIKELY(!p_gtblact)) {
        algo_lib::ResetErrtext() << "atf_gcli.bad_xref  index:atf_gcli.FDb.ind_gtblact" << Keyval("key", gtblact_Get(row));
        return false;
    }
    // gtblacttst: save pointer to gtblact
    if (true) { // user-defined insert condition
        row.p_gtblact = p_gtblact;
    }
    // insert gtblacttst into index ind_gtblacttst
    if (true) { // user-defined insert condition
        bool success = ind_gtblacttst_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_gcli.duplicate_key  xref:atf_gcli.FDb.ind_gtblacttst"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.gtblacttstout.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_gcli::FGtblacttstout& atf_gcli::gtblacttstout_Alloc() {
    atf_gcli::FGtblacttstout* row = gtblacttstout_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_gcli.out_of_mem  field:atf_gcli.FDb.gtblacttstout  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_gcli.FDb.gtblacttstout.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_gcli::FGtblacttstout* atf_gcli::gtblacttstout_AllocMaybe() {
    atf_gcli::FGtblacttstout *row = (atf_gcli::FGtblacttstout*)gtblacttstout_AllocMem();
    if (row) {
        new (row) atf_gcli::FGtblacttstout; // call constructor
    }
    return row;
}

// --- atf_gcli.FDb.gtblacttstout.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_gcli::FGtblacttstout* atf_gcli::gtblacttstout_InsertMaybe(const gclidb::Gtblacttstout &value) {
    atf_gcli::FGtblacttstout *row = &gtblacttstout_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gtblacttstout_CopyIn(*row,const_cast<gclidb::Gtblacttstout&>(value));
    bool ok = gtblacttstout_XrefMaybe(*row); // this may return false
    if (!ok) {
        gtblacttstout_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_gcli.FDb.gtblacttstout.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_gcli::gtblacttstout_AllocMem() {
    u64 new_nelems     = _db.gtblacttstout_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_gcli::FGtblacttstout*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gtblacttstout_lary[bsr];
        if (!lev) {
            lev=(atf_gcli::FGtblacttstout*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttstout) * (u64(1)<<bsr));
            _db.gtblacttstout_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gtblacttstout_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_gcli.FDb.gtblacttstout.RemoveAll
// Remove all elements from Lary
void atf_gcli::gtblacttstout_RemoveAll() {
    for (u64 n = _db.gtblacttstout_n; n>0; ) {
        n--;
        gtblacttstout_qFind(u64(n)).~FGtblacttstout(); // destroy last element
        _db.gtblacttstout_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblacttstout.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_gcli::gtblacttstout_RemoveLast() {
    u64 n = _db.gtblacttstout_n;
    if (n > 0) {
        n -= 1;
        gtblacttstout_qFind(u64(n)).~FGtblacttstout();
        _db.gtblacttstout_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblacttstout.InputMaybe
static bool atf_gcli::gtblacttstout_InputMaybe(gclidb::Gtblacttstout &elem) {
    bool retval = true;
    retval = gtblacttstout_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_gcli.FDb.gtblacttstout.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::gtblacttstout_XrefMaybe(atf_gcli::FGtblacttstout &row) {
    bool retval = true;
    (void)row;
    atf_gcli::FGtblacttst* p_gtblacttst = atf_gcli::ind_gtblacttst_Find(gtblacttst_Get(row));
    if (UNLIKELY(!p_gtblacttst)) {
        algo_lib::ResetErrtext() << "atf_gcli.bad_xref  index:atf_gcli.FDb.ind_gtblacttst" << Keyval("key", gtblacttst_Get(row));
        return false;
    }
    // insert gtblacttstout into index c_gtblacttstout
    if (true) { // user-defined insert condition
        c_gtblacttstout_Insert(*p_gtblacttst, row);
    }
    // insert gtblacttstout into index ind_gtblacttstout
    if (true) { // user-defined insert condition
        bool success = ind_gtblacttstout_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_gcli.duplicate_key  xref:atf_gcli.FDb.ind_gtblacttstout"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gtblacttst.Find
// Find row by key. Return NULL if not found.
atf_gcli::FGtblacttst* atf_gcli::ind_gtblacttst_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr250_Hash(0, key) & (_db.ind_gtblacttst_buckets_n - 1);
    atf_gcli::FGtblacttst* *e = &_db.ind_gtblacttst_buckets_elems[index];
    atf_gcli::FGtblacttst* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gtblacttst == key;
        if (done) break;
        e         = &ret->ind_gtblacttst_next;
    } while (true);
    return ret;
}

// --- atf_gcli.FDb.ind_gtblacttst.FindX
// Look up row by key and return reference. Throw exception if not found
atf_gcli::FGtblacttst& atf_gcli::ind_gtblacttst_FindX(const algo::strptr& key) {
    atf_gcli::FGtblacttst* ret = ind_gtblacttst_Find(key);
    vrfy(ret, tempstr() << "atf_gcli.key_error  table:ind_gtblacttst  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gtblacttst.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_gcli::ind_gtblacttst_InsertMaybe(atf_gcli::FGtblacttst& row) {
    ind_gtblacttst_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gtblacttst_next == (atf_gcli::FGtblacttst*)-1)) {// check if in hash already
        u32 index = algo::Smallstr250_Hash(0, row.gtblacttst) & (_db.ind_gtblacttst_buckets_n - 1);
        atf_gcli::FGtblacttst* *prev = &_db.ind_gtblacttst_buckets_elems[index];
        do {
            atf_gcli::FGtblacttst* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gtblacttst == row.gtblacttst) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gtblacttst_next;
        } while (true);
        if (retval) {
            row.ind_gtblacttst_next = *prev;
            _db.ind_gtblacttst_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gtblacttst.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_gcli::ind_gtblacttst_Remove(atf_gcli::FGtblacttst& row) {
    if (LIKELY(row.ind_gtblacttst_next != (atf_gcli::FGtblacttst*)-1)) {// check if in hash already
        u32 index = algo::Smallstr250_Hash(0, row.gtblacttst) & (_db.ind_gtblacttst_buckets_n - 1);
        atf_gcli::FGtblacttst* *prev = &_db.ind_gtblacttst_buckets_elems[index]; // addr of pointer to current element
        while (atf_gcli::FGtblacttst *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gtblacttst_next; // unlink (singly linked list)
                _db.ind_gtblacttst_n--;
                row.ind_gtblacttst_next = (atf_gcli::FGtblacttst*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gtblacttst_next;
        }
    }
}

// --- atf_gcli.FDb.ind_gtblacttst.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_gcli::ind_gtblacttst_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gtblacttst_buckets_n;
    u32 new_nelems   = _db.ind_gtblacttst_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_gcli::FGtblacttst*);
        u32 new_size = new_nbuckets * sizeof(atf_gcli::FGtblacttst*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_gcli::FGtblacttst* *new_buckets = (atf_gcli::FGtblacttst**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.ind_gtblacttst");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gtblacttst_buckets_n; i++) {
            atf_gcli::FGtblacttst* elem = _db.ind_gtblacttst_buckets_elems[i];
            while (elem) {
                atf_gcli::FGtblacttst &row        = *elem;
                atf_gcli::FGtblacttst* next       = row.ind_gtblacttst_next;
                u32 index          = algo::Smallstr250_Hash(0, row.gtblacttst) & (new_nbuckets-1);
                row.ind_gtblacttst_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gtblacttst_buckets_elems, old_size);
        _db.ind_gtblacttst_buckets_elems = new_buckets;
        _db.ind_gtblacttst_buckets_n = new_nbuckets;
    }
}

// --- atf_gcli.FDb.ind_gtblacttstout.Find
// Find row by key. Return NULL if not found.
atf_gcli::FGtblacttstout* atf_gcli::ind_gtblacttstout_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_gtblacttstout_buckets_n - 1);
    atf_gcli::FGtblacttstout* *e = &_db.ind_gtblacttstout_buckets_elems[index];
    atf_gcli::FGtblacttstout* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gtblacttstout == key;
        if (done) break;
        e         = &ret->ind_gtblacttstout_next;
    } while (true);
    return ret;
}

// --- atf_gcli.FDb.ind_gtblacttstout.FindX
// Look up row by key and return reference. Throw exception if not found
atf_gcli::FGtblacttstout& atf_gcli::ind_gtblacttstout_FindX(const algo::strptr& key) {
    atf_gcli::FGtblacttstout* ret = ind_gtblacttstout_Find(key);
    vrfy(ret, tempstr() << "atf_gcli.key_error  table:ind_gtblacttstout  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gtblacttstout.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_gcli::ind_gtblacttstout_InsertMaybe(atf_gcli::FGtblacttstout& row) {
    ind_gtblacttstout_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gtblacttstout_next == (atf_gcli::FGtblacttstout*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gtblacttstout) & (_db.ind_gtblacttstout_buckets_n - 1);
        atf_gcli::FGtblacttstout* *prev = &_db.ind_gtblacttstout_buckets_elems[index];
        do {
            atf_gcli::FGtblacttstout* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gtblacttstout == row.gtblacttstout) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gtblacttstout_next;
        } while (true);
        if (retval) {
            row.ind_gtblacttstout_next = *prev;
            _db.ind_gtblacttstout_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gtblacttstout.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_gcli::ind_gtblacttstout_Remove(atf_gcli::FGtblacttstout& row) {
    if (LIKELY(row.ind_gtblacttstout_next != (atf_gcli::FGtblacttstout*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gtblacttstout) & (_db.ind_gtblacttstout_buckets_n - 1);
        atf_gcli::FGtblacttstout* *prev = &_db.ind_gtblacttstout_buckets_elems[index]; // addr of pointer to current element
        while (atf_gcli::FGtblacttstout *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gtblacttstout_next; // unlink (singly linked list)
                _db.ind_gtblacttstout_n--;
                row.ind_gtblacttstout_next = (atf_gcli::FGtblacttstout*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gtblacttstout_next;
        }
    }
}

// --- atf_gcli.FDb.ind_gtblacttstout.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_gcli::ind_gtblacttstout_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gtblacttstout_buckets_n;
    u32 new_nelems   = _db.ind_gtblacttstout_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_gcli::FGtblacttstout*);
        u32 new_size = new_nbuckets * sizeof(atf_gcli::FGtblacttstout*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_gcli::FGtblacttstout* *new_buckets = (atf_gcli::FGtblacttstout**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.ind_gtblacttstout");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gtblacttstout_buckets_n; i++) {
            atf_gcli::FGtblacttstout* elem = _db.ind_gtblacttstout_buckets_elems[i];
            while (elem) {
                atf_gcli::FGtblacttstout &row        = *elem;
                atf_gcli::FGtblacttstout* next       = row.ind_gtblacttstout_next;
                u32 index          = algo::Smallstr50_Hash(0, row.gtblacttstout) & (new_nbuckets-1);
                row.ind_gtblacttstout_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gtblacttstout_buckets_elems, old_size);
        _db.ind_gtblacttstout_buckets_elems = new_buckets;
        _db.ind_gtblacttstout_buckets_n = new_nbuckets;
    }
}

// --- atf_gcli.FDb.c_gtblacttst.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void atf_gcli::c_gtblacttst_Insert(atf_gcli::FGtblacttst& row) {
    if (bool_Update(row._db_c_gtblacttst_in_ary,true)) {
        // reserve space
        c_gtblacttst_Reserve(1);
        u32 n  = _db.c_gtblacttst_n;
        u32 at = n;
        atf_gcli::FGtblacttst* *elems = _db.c_gtblacttst_elems;
        elems[at] = &row;
        _db.c_gtblacttst_n = n+1;

    }
}

// --- atf_gcli.FDb.c_gtblacttst.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool atf_gcli::c_gtblacttst_InsertMaybe(atf_gcli::FGtblacttst& row) {
    bool retval = !row._db_c_gtblacttst_in_ary;
    c_gtblacttst_Insert(row); // check is performed in _Insert again
    return retval;
}

// --- atf_gcli.FDb.c_gtblacttst.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void atf_gcli::c_gtblacttst_Remove(atf_gcli::FGtblacttst& row) {
    if (bool_Update(row._db_c_gtblacttst_in_ary,false)) {
        int lim = _db.c_gtblacttst_n;
        atf_gcli::FGtblacttst* *elems = _db.c_gtblacttst_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            atf_gcli::FGtblacttst* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(atf_gcli::FGtblacttst*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                _db.c_gtblacttst_n = lim - 1;
                break;
            }
        }
    }
}

// --- atf_gcli.FDb.c_gtblacttst.Reserve
// Reserve space in index for N more elements;
void atf_gcli::c_gtblacttst_Reserve(u32 n) {
    u32 old_max = _db.c_gtblacttst_max;
    if (UNLIKELY(_db.c_gtblacttst_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(atf_gcli::FGtblacttst*);
        u32 new_size = new_max * sizeof(atf_gcli::FGtblacttst*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.c_gtblacttst_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.c_gtblacttst");
        }
        _db.c_gtblacttst_elems = (atf_gcli::FGtblacttst**)new_mem;
        _db.c_gtblacttst_max = new_max;
    }
}

// --- atf_gcli.FDb.gclienvsub.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_gcli::FGclienvsub& atf_gcli::gclienvsub_Alloc() {
    atf_gcli::FGclienvsub* row = gclienvsub_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_gcli.out_of_mem  field:atf_gcli.FDb.gclienvsub  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_gcli.FDb.gclienvsub.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_gcli::FGclienvsub* atf_gcli::gclienvsub_AllocMaybe() {
    atf_gcli::FGclienvsub *row = (atf_gcli::FGclienvsub*)gclienvsub_AllocMem();
    if (row) {
        new (row) atf_gcli::FGclienvsub; // call constructor
    }
    return row;
}

// --- atf_gcli.FDb.gclienvsub.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_gcli::FGclienvsub* atf_gcli::gclienvsub_InsertMaybe(const gclidb::Gclienvsub &value) {
    atf_gcli::FGclienvsub *row = &gclienvsub_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gclienvsub_CopyIn(*row,const_cast<gclidb::Gclienvsub&>(value));
    bool ok = gclienvsub_XrefMaybe(*row); // this may return false
    if (!ok) {
        gclienvsub_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_gcli.FDb.gclienvsub.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_gcli::gclienvsub_AllocMem() {
    u64 new_nelems     = _db.gclienvsub_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_gcli::FGclienvsub*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gclienvsub_lary[bsr];
        if (!lev) {
            lev=(atf_gcli::FGclienvsub*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienvsub) * (u64(1)<<bsr));
            _db.gclienvsub_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gclienvsub_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_gcli.FDb.gclienvsub.RemoveAll
// Remove all elements from Lary
void atf_gcli::gclienvsub_RemoveAll() {
    for (u64 n = _db.gclienvsub_n; n>0; ) {
        n--;
        gclienvsub_qFind(u64(n)).~FGclienvsub(); // destroy last element
        _db.gclienvsub_n = i32(n);
    }
}

// --- atf_gcli.FDb.gclienvsub.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_gcli::gclienvsub_RemoveLast() {
    u64 n = _db.gclienvsub_n;
    if (n > 0) {
        n -= 1;
        gclienvsub_qFind(u64(n)).~FGclienvsub();
        _db.gclienvsub_n = i32(n);
    }
}

// --- atf_gcli.FDb.gclienvsub.InputMaybe
static bool atf_gcli::gclienvsub_InputMaybe(gclidb::Gclienvsub &elem) {
    bool retval = true;
    retval = gclienvsub_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_gcli.FDb.gclienvsub.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::gclienvsub_XrefMaybe(atf_gcli::FGclienvsub &row) {
    bool retval = true;
    (void)row;
    atf_gcli::FGclienv* p_gclienv = atf_gcli::ind_gclienv_Find(gclienv_Get(row));
    if (UNLIKELY(!p_gclienv)) {
        algo_lib::ResetErrtext() << "atf_gcli.bad_xref  index:atf_gcli.FDb.ind_gclienv" << Keyval("key", gclienv_Get(row));
        return false;
    }
    // insert gclienvsub into index c_gclienvsub
    if (true) { // user-defined insert condition
        c_gclienvsub_Insert(*p_gclienv, row);
    }
    // insert gclienvsub into index ind_gclienvsub
    if (true) { // user-defined insert condition
        bool success = ind_gclienvsub_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_gcli.duplicate_key  xref:atf_gcli.FDb.ind_gclienvsub"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.gclienv.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_gcli::FGclienv& atf_gcli::gclienv_Alloc() {
    atf_gcli::FGclienv* row = gclienv_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_gcli.out_of_mem  field:atf_gcli.FDb.gclienv  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_gcli.FDb.gclienv.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_gcli::FGclienv* atf_gcli::gclienv_AllocMaybe() {
    atf_gcli::FGclienv *row = (atf_gcli::FGclienv*)gclienv_AllocMem();
    if (row) {
        new (row) atf_gcli::FGclienv; // call constructor
    }
    return row;
}

// --- atf_gcli.FDb.gclienv.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_gcli::FGclienv* atf_gcli::gclienv_InsertMaybe(const gclidb::Gclienv &value) {
    atf_gcli::FGclienv *row = &gclienv_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gclienv_CopyIn(*row,const_cast<gclidb::Gclienv&>(value));
    bool ok = gclienv_XrefMaybe(*row); // this may return false
    if (!ok) {
        gclienv_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_gcli.FDb.gclienv.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_gcli::gclienv_AllocMem() {
    u64 new_nelems     = _db.gclienv_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_gcli::FGclienv*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gclienv_lary[bsr];
        if (!lev) {
            lev=(atf_gcli::FGclienv*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienv) * (u64(1)<<bsr));
            _db.gclienv_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gclienv_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_gcli.FDb.gclienv.RemoveAll
// Remove all elements from Lary
void atf_gcli::gclienv_RemoveAll() {
    for (u64 n = _db.gclienv_n; n>0; ) {
        n--;
        gclienv_qFind(u64(n)).~FGclienv(); // destroy last element
        _db.gclienv_n = i32(n);
    }
}

// --- atf_gcli.FDb.gclienv.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_gcli::gclienv_RemoveLast() {
    u64 n = _db.gclienv_n;
    if (n > 0) {
        n -= 1;
        gclienv_qFind(u64(n)).~FGclienv();
        _db.gclienv_n = i32(n);
    }
}

// --- atf_gcli.FDb.gclienv.InputMaybe
static bool atf_gcli::gclienv_InputMaybe(gclidb::Gclienv &elem) {
    bool retval = true;
    retval = gclienv_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_gcli.FDb.gclienv.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::gclienv_XrefMaybe(atf_gcli::FGclienv &row) {
    bool retval = true;
    (void)row;
    // insert gclienv into index ind_gclienv
    if (true) { // user-defined insert condition
        bool success = ind_gclienv_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_gcli.duplicate_key  xref:atf_gcli.FDb.ind_gclienv"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gclienv.Find
// Find row by key. Return NULL if not found.
atf_gcli::FGclienv* atf_gcli::ind_gclienv_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_gclienv_buckets_n - 1);
    atf_gcli::FGclienv* *e = &_db.ind_gclienv_buckets_elems[index];
    atf_gcli::FGclienv* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gclienv == key;
        if (done) break;
        e         = &ret->ind_gclienv_next;
    } while (true);
    return ret;
}

// --- atf_gcli.FDb.ind_gclienv.FindX
// Look up row by key and return reference. Throw exception if not found
atf_gcli::FGclienv& atf_gcli::ind_gclienv_FindX(const algo::strptr& key) {
    atf_gcli::FGclienv* ret = ind_gclienv_Find(key);
    vrfy(ret, tempstr() << "atf_gcli.key_error  table:ind_gclienv  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gclienv.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_gcli::FGclienv& atf_gcli::ind_gclienv_GetOrCreate(const algo::strptr& key) {
    atf_gcli::FGclienv* ret = ind_gclienv_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &gclienv_Alloc();
        (*ret).gclienv = key;
        bool good = gclienv_XrefMaybe(*ret);
        if (!good) {
            gclienv_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_gcli.create_error  table:ind_gclienv  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gclienv.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_gcli::ind_gclienv_InsertMaybe(atf_gcli::FGclienv& row) {
    ind_gclienv_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gclienv_next == (atf_gcli::FGclienv*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gclienv) & (_db.ind_gclienv_buckets_n - 1);
        atf_gcli::FGclienv* *prev = &_db.ind_gclienv_buckets_elems[index];
        do {
            atf_gcli::FGclienv* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gclienv == row.gclienv) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gclienv_next;
        } while (true);
        if (retval) {
            row.ind_gclienv_next = *prev;
            _db.ind_gclienv_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gclienv.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_gcli::ind_gclienv_Remove(atf_gcli::FGclienv& row) {
    if (LIKELY(row.ind_gclienv_next != (atf_gcli::FGclienv*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gclienv) & (_db.ind_gclienv_buckets_n - 1);
        atf_gcli::FGclienv* *prev = &_db.ind_gclienv_buckets_elems[index]; // addr of pointer to current element
        while (atf_gcli::FGclienv *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gclienv_next; // unlink (singly linked list)
                _db.ind_gclienv_n--;
                row.ind_gclienv_next = (atf_gcli::FGclienv*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gclienv_next;
        }
    }
}

// --- atf_gcli.FDb.ind_gclienv.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_gcli::ind_gclienv_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gclienv_buckets_n;
    u32 new_nelems   = _db.ind_gclienv_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_gcli::FGclienv*);
        u32 new_size = new_nbuckets * sizeof(atf_gcli::FGclienv*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_gcli::FGclienv* *new_buckets = (atf_gcli::FGclienv**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.ind_gclienv");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gclienv_buckets_n; i++) {
            atf_gcli::FGclienv* elem = _db.ind_gclienv_buckets_elems[i];
            while (elem) {
                atf_gcli::FGclienv &row        = *elem;
                atf_gcli::FGclienv* next       = row.ind_gclienv_next;
                u32 index          = algo::Smallstr50_Hash(0, row.gclienv) & (new_nbuckets-1);
                row.ind_gclienv_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gclienv_buckets_elems, old_size);
        _db.ind_gclienv_buckets_elems = new_buckets;
        _db.ind_gclienv_buckets_n = new_nbuckets;
    }
}

// --- atf_gcli.FDb.ind_gclienvsub.Find
// Find row by key. Return NULL if not found.
atf_gcli::FGclienvsub* atf_gcli::ind_gclienvsub_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_gclienvsub_buckets_n - 1);
    atf_gcli::FGclienvsub* *e = &_db.ind_gclienvsub_buckets_elems[index];
    atf_gcli::FGclienvsub* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gclienvsub == key;
        if (done) break;
        e         = &ret->ind_gclienvsub_next;
    } while (true);
    return ret;
}

// --- atf_gcli.FDb.ind_gclienvsub.FindX
// Look up row by key and return reference. Throw exception if not found
atf_gcli::FGclienvsub& atf_gcli::ind_gclienvsub_FindX(const algo::strptr& key) {
    atf_gcli::FGclienvsub* ret = ind_gclienvsub_Find(key);
    vrfy(ret, tempstr() << "atf_gcli.key_error  table:ind_gclienvsub  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gclienvsub.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_gcli::ind_gclienvsub_InsertMaybe(atf_gcli::FGclienvsub& row) {
    ind_gclienvsub_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gclienvsub_next == (atf_gcli::FGclienvsub*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gclienvsub) & (_db.ind_gclienvsub_buckets_n - 1);
        atf_gcli::FGclienvsub* *prev = &_db.ind_gclienvsub_buckets_elems[index];
        do {
            atf_gcli::FGclienvsub* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gclienvsub == row.gclienvsub) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gclienvsub_next;
        } while (true);
        if (retval) {
            row.ind_gclienvsub_next = *prev;
            _db.ind_gclienvsub_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gclienvsub.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_gcli::ind_gclienvsub_Remove(atf_gcli::FGclienvsub& row) {
    if (LIKELY(row.ind_gclienvsub_next != (atf_gcli::FGclienvsub*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gclienvsub) & (_db.ind_gclienvsub_buckets_n - 1);
        atf_gcli::FGclienvsub* *prev = &_db.ind_gclienvsub_buckets_elems[index]; // addr of pointer to current element
        while (atf_gcli::FGclienvsub *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gclienvsub_next; // unlink (singly linked list)
                _db.ind_gclienvsub_n--;
                row.ind_gclienvsub_next = (atf_gcli::FGclienvsub*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gclienvsub_next;
        }
    }
}

// --- atf_gcli.FDb.ind_gclienvsub.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_gcli::ind_gclienvsub_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gclienvsub_buckets_n;
    u32 new_nelems   = _db.ind_gclienvsub_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_gcli::FGclienvsub*);
        u32 new_size = new_nbuckets * sizeof(atf_gcli::FGclienvsub*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_gcli::FGclienvsub* *new_buckets = (atf_gcli::FGclienvsub**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.ind_gclienvsub");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gclienvsub_buckets_n; i++) {
            atf_gcli::FGclienvsub* elem = _db.ind_gclienvsub_buckets_elems[i];
            while (elem) {
                atf_gcli::FGclienvsub &row        = *elem;
                atf_gcli::FGclienvsub* next       = row.ind_gclienvsub_next;
                u32 index          = algo::Smallstr50_Hash(0, row.gclienvsub) & (new_nbuckets-1);
                row.ind_gclienvsub_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gclienvsub_buckets_elems, old_size);
        _db.ind_gclienvsub_buckets_elems = new_buckets;
        _db.ind_gclienvsub_buckets_n = new_nbuckets;
    }
}

// --- atf_gcli.FDb.gtblact.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_gcli::FGtblact& atf_gcli::gtblact_Alloc() {
    atf_gcli::FGtblact* row = gtblact_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_gcli.out_of_mem  field:atf_gcli.FDb.gtblact  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_gcli.FDb.gtblact.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_gcli::FGtblact* atf_gcli::gtblact_AllocMaybe() {
    atf_gcli::FGtblact *row = (atf_gcli::FGtblact*)gtblact_AllocMem();
    if (row) {
        new (row) atf_gcli::FGtblact; // call constructor
    }
    return row;
}

// --- atf_gcli.FDb.gtblact.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_gcli::FGtblact* atf_gcli::gtblact_InsertMaybe(const gclidb::Gtblact &value) {
    atf_gcli::FGtblact *row = &gtblact_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gtblact_CopyIn(*row,const_cast<gclidb::Gtblact&>(value));
    bool ok = gtblact_XrefMaybe(*row); // this may return false
    if (!ok) {
        gtblact_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_gcli.FDb.gtblact.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_gcli::gtblact_AllocMem() {
    u64 new_nelems     = _db.gtblact_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_gcli::FGtblact*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gtblact_lary[bsr];
        if (!lev) {
            lev=(atf_gcli::FGtblact*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblact) * (u64(1)<<bsr));
            _db.gtblact_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gtblact_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_gcli.FDb.gtblact.RemoveAll
// Remove all elements from Lary
void atf_gcli::gtblact_RemoveAll() {
    for (u64 n = _db.gtblact_n; n>0; ) {
        n--;
        gtblact_qFind(u64(n)).~FGtblact(); // destroy last element
        _db.gtblact_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblact.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_gcli::gtblact_RemoveLast() {
    u64 n = _db.gtblact_n;
    if (n > 0) {
        n -= 1;
        gtblact_qFind(u64(n)).~FGtblact();
        _db.gtblact_n = i32(n);
    }
}

// --- atf_gcli.FDb.gtblact.InputMaybe
static bool atf_gcli::gtblact_InputMaybe(gclidb::Gtblact &elem) {
    bool retval = true;
    retval = gtblact_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_gcli.FDb.gtblact.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_gcli::gtblact_XrefMaybe(atf_gcli::FGtblact &row) {
    bool retval = true;
    (void)row;
    // insert gtblact into index ind_gtblact
    if (true) { // user-defined insert condition
        bool success = ind_gtblact_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_gcli.duplicate_key  xref:atf_gcli.FDb.ind_gtblact"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gtblact.Find
// Find row by key. Return NULL if not found.
atf_gcli::FGtblact* atf_gcli::ind_gtblact_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_gtblact_buckets_n - 1);
    atf_gcli::FGtblact* *e = &_db.ind_gtblact_buckets_elems[index];
    atf_gcli::FGtblact* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gtblact == key;
        if (done) break;
        e         = &ret->ind_gtblact_next;
    } while (true);
    return ret;
}

// --- atf_gcli.FDb.ind_gtblact.FindX
// Look up row by key and return reference. Throw exception if not found
atf_gcli::FGtblact& atf_gcli::ind_gtblact_FindX(const algo::strptr& key) {
    atf_gcli::FGtblact* ret = ind_gtblact_Find(key);
    vrfy(ret, tempstr() << "atf_gcli.key_error  table:ind_gtblact  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gtblact.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_gcli::FGtblact& atf_gcli::ind_gtblact_GetOrCreate(const algo::strptr& key) {
    atf_gcli::FGtblact* ret = ind_gtblact_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &gtblact_Alloc();
        (*ret).gtblact = key;
        bool good = gtblact_XrefMaybe(*ret);
        if (!good) {
            gtblact_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_gcli.create_error  table:ind_gtblact  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_gcli.FDb.ind_gtblact.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_gcli::ind_gtblact_InsertMaybe(atf_gcli::FGtblact& row) {
    ind_gtblact_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gtblact_next == (atf_gcli::FGtblact*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gtblact) & (_db.ind_gtblact_buckets_n - 1);
        atf_gcli::FGtblact* *prev = &_db.ind_gtblact_buckets_elems[index];
        do {
            atf_gcli::FGtblact* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gtblact == row.gtblact) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gtblact_next;
        } while (true);
        if (retval) {
            row.ind_gtblact_next = *prev;
            _db.ind_gtblact_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_gcli.FDb.ind_gtblact.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_gcli::ind_gtblact_Remove(atf_gcli::FGtblact& row) {
    if (LIKELY(row.ind_gtblact_next != (atf_gcli::FGtblact*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.gtblact) & (_db.ind_gtblact_buckets_n - 1);
        atf_gcli::FGtblact* *prev = &_db.ind_gtblact_buckets_elems[index]; // addr of pointer to current element
        while (atf_gcli::FGtblact *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gtblact_next; // unlink (singly linked list)
                _db.ind_gtblact_n--;
                row.ind_gtblact_next = (atf_gcli::FGtblact*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gtblact_next;
        }
    }
}

// --- atf_gcli.FDb.ind_gtblact.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_gcli::ind_gtblact_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gtblact_buckets_n;
    u32 new_nelems   = _db.ind_gtblact_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_gcli::FGtblact*);
        u32 new_size = new_nbuckets * sizeof(atf_gcli::FGtblact*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_gcli::FGtblact* *new_buckets = (atf_gcli::FGtblact**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FDb.ind_gtblact");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gtblact_buckets_n; i++) {
            atf_gcli::FGtblact* elem = _db.ind_gtblact_buckets_elems[i];
            while (elem) {
                atf_gcli::FGtblact &row        = *elem;
                atf_gcli::FGtblact* next       = row.ind_gtblact_next;
                u32 index          = algo::Smallstr50_Hash(0, row.gtblact) & (new_nbuckets-1);
                row.ind_gtblact_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gtblact_buckets_elems, old_size);
        _db.ind_gtblact_buckets_elems = new_buckets;
        _db.ind_gtblact_buckets_n = new_nbuckets;
    }
}

// --- atf_gcli.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr atf_gcli::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- atf_gcli.FDb.trace.N
// Function return 1
inline static i32 atf_gcli::trace_N() {
    return 1;
}

// --- atf_gcli.FDb..Init
// Set all fields to initial values.
void atf_gcli::FDb_Init() {
    // initialize LAry gtblacttst (atf_gcli.FDb.gtblacttst)
    _db.gtblacttst_n = 0;
    memset(_db.gtblacttst_lary, 0, sizeof(_db.gtblacttst_lary)); // zero out all level pointers
    atf_gcli::FGtblacttst* gtblacttst_first = (atf_gcli::FGtblacttst*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttst) * (u64(1)<<4));
    if (!gtblacttst_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gtblacttst_lary[i]  = gtblacttst_first;
        gtblacttst_first    += 1ULL<<i;
    }
    // initialize LAry gtblacttstout (atf_gcli.FDb.gtblacttstout)
    _db.gtblacttstout_n = 0;
    memset(_db.gtblacttstout_lary, 0, sizeof(_db.gtblacttstout_lary)); // zero out all level pointers
    atf_gcli::FGtblacttstout* gtblacttstout_first = (atf_gcli::FGtblacttstout*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttstout) * (u64(1)<<4));
    if (!gtblacttstout_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gtblacttstout_lary[i]  = gtblacttstout_first;
        gtblacttstout_first    += 1ULL<<i;
    }
    // initialize hash table for atf_gcli::FGtblacttst;
    _db.ind_gtblacttst_n             	= 0; // (atf_gcli.FDb.ind_gtblacttst)
    _db.ind_gtblacttst_buckets_n     	= 4; // (atf_gcli.FDb.ind_gtblacttst)
    _db.ind_gtblacttst_buckets_elems 	= (atf_gcli::FGtblacttst**)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttst*)*_db.ind_gtblacttst_buckets_n); // initial buckets (atf_gcli.FDb.ind_gtblacttst)
    if (!_db.ind_gtblacttst_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_gcli.FDb.ind_gtblacttst)
    }
    memset(_db.ind_gtblacttst_buckets_elems, 0, sizeof(atf_gcli::FGtblacttst*)*_db.ind_gtblacttst_buckets_n); // (atf_gcli.FDb.ind_gtblacttst)
    // initialize hash table for atf_gcli::FGtblacttstout;
    _db.ind_gtblacttstout_n             	= 0; // (atf_gcli.FDb.ind_gtblacttstout)
    _db.ind_gtblacttstout_buckets_n     	= 4; // (atf_gcli.FDb.ind_gtblacttstout)
    _db.ind_gtblacttstout_buckets_elems 	= (atf_gcli::FGtblacttstout**)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblacttstout*)*_db.ind_gtblacttstout_buckets_n); // initial buckets (atf_gcli.FDb.ind_gtblacttstout)
    if (!_db.ind_gtblacttstout_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_gcli.FDb.ind_gtblacttstout)
    }
    memset(_db.ind_gtblacttstout_buckets_elems, 0, sizeof(atf_gcli::FGtblacttstout*)*_db.ind_gtblacttstout_buckets_n); // (atf_gcli.FDb.ind_gtblacttstout)
    _db.c_gtblacttst_elems = NULL; // (atf_gcli.FDb.c_gtblacttst)
    _db.c_gtblacttst_n = 0; // (atf_gcli.FDb.c_gtblacttst)
    _db.c_gtblacttst_max = 0; // (atf_gcli.FDb.c_gtblacttst)
    // initialize LAry gclienvsub (atf_gcli.FDb.gclienvsub)
    _db.gclienvsub_n = 0;
    memset(_db.gclienvsub_lary, 0, sizeof(_db.gclienvsub_lary)); // zero out all level pointers
    atf_gcli::FGclienvsub* gclienvsub_first = (atf_gcli::FGclienvsub*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienvsub) * (u64(1)<<4));
    if (!gclienvsub_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gclienvsub_lary[i]  = gclienvsub_first;
        gclienvsub_first    += 1ULL<<i;
    }
    // initialize LAry gclienv (atf_gcli.FDb.gclienv)
    _db.gclienv_n = 0;
    memset(_db.gclienv_lary, 0, sizeof(_db.gclienv_lary)); // zero out all level pointers
    atf_gcli::FGclienv* gclienv_first = (atf_gcli::FGclienv*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienv) * (u64(1)<<4));
    if (!gclienv_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gclienv_lary[i]  = gclienv_first;
        gclienv_first    += 1ULL<<i;
    }
    // initialize hash table for atf_gcli::FGclienv;
    _db.ind_gclienv_n             	= 0; // (atf_gcli.FDb.ind_gclienv)
    _db.ind_gclienv_buckets_n     	= 4; // (atf_gcli.FDb.ind_gclienv)
    _db.ind_gclienv_buckets_elems 	= (atf_gcli::FGclienv**)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienv*)*_db.ind_gclienv_buckets_n); // initial buckets (atf_gcli.FDb.ind_gclienv)
    if (!_db.ind_gclienv_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_gcli.FDb.ind_gclienv)
    }
    memset(_db.ind_gclienv_buckets_elems, 0, sizeof(atf_gcli::FGclienv*)*_db.ind_gclienv_buckets_n); // (atf_gcli.FDb.ind_gclienv)
    // initialize hash table for atf_gcli::FGclienvsub;
    _db.ind_gclienvsub_n             	= 0; // (atf_gcli.FDb.ind_gclienvsub)
    _db.ind_gclienvsub_buckets_n     	= 4; // (atf_gcli.FDb.ind_gclienvsub)
    _db.ind_gclienvsub_buckets_elems 	= (atf_gcli::FGclienvsub**)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGclienvsub*)*_db.ind_gclienvsub_buckets_n); // initial buckets (atf_gcli.FDb.ind_gclienvsub)
    if (!_db.ind_gclienvsub_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_gcli.FDb.ind_gclienvsub)
    }
    memset(_db.ind_gclienvsub_buckets_elems, 0, sizeof(atf_gcli::FGclienvsub*)*_db.ind_gclienvsub_buckets_n); // (atf_gcli.FDb.ind_gclienvsub)
    // initialize LAry gtblact (atf_gcli.FDb.gtblact)
    _db.gtblact_n = 0;
    memset(_db.gtblact_lary, 0, sizeof(_db.gtblact_lary)); // zero out all level pointers
    atf_gcli::FGtblact* gtblact_first = (atf_gcli::FGtblact*)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblact) * (u64(1)<<4));
    if (!gtblact_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gtblact_lary[i]  = gtblact_first;
        gtblact_first    += 1ULL<<i;
    }
    // initialize hash table for atf_gcli::FGtblact;
    _db.ind_gtblact_n             	= 0; // (atf_gcli.FDb.ind_gtblact)
    _db.ind_gtblact_buckets_n     	= 4; // (atf_gcli.FDb.ind_gtblact)
    _db.ind_gtblact_buckets_elems 	= (atf_gcli::FGtblact**)algo_lib::malloc_AllocMem(sizeof(atf_gcli::FGtblact*)*_db.ind_gtblact_buckets_n); // initial buckets (atf_gcli.FDb.ind_gtblact)
    if (!_db.ind_gtblact_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_gcli.FDb.ind_gtblact)
    }
    memset(_db.ind_gtblact_buckets_elems, 0, sizeof(atf_gcli::FGtblact*)*_db.ind_gtblact_buckets_n); // (atf_gcli.FDb.ind_gtblact)

    atf_gcli::InitReflection();
}

// --- atf_gcli.FDb..Uninit
void atf_gcli::FDb_Uninit() {
    atf_gcli::FDb &row = _db; (void)row;

    // atf_gcli.FDb.ind_gtblact.Uninit (Thash)  //
    // skip destruction of ind_gtblact in global scope

    // atf_gcli.FDb.gtblact.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_gcli.FDb.ind_gclienvsub.Uninit (Thash)  //
    // skip destruction of ind_gclienvsub in global scope

    // atf_gcli.FDb.ind_gclienv.Uninit (Thash)  //
    // skip destruction of ind_gclienv in global scope

    // atf_gcli.FDb.gclienv.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_gcli.FDb.gclienvsub.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_gcli.FDb.c_gtblacttst.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(_db.c_gtblacttst_elems, sizeof(atf_gcli::FGtblacttst*)*_db.c_gtblacttst_max); // (atf_gcli.FDb.c_gtblacttst)

    // atf_gcli.FDb.ind_gtblacttstout.Uninit (Thash)  //
    // skip destruction of ind_gtblacttstout in global scope

    // atf_gcli.FDb.ind_gtblacttst.Uninit (Thash)  //
    // skip destruction of ind_gtblacttst in global scope

    // atf_gcli.FDb.gtblacttstout.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_gcli.FDb.gtblacttst.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- atf_gcli.FGclienv.base.CopyOut
// Copy fields out of row
void atf_gcli::gclienv_CopyOut(atf_gcli::FGclienv &row, gclidb::Gclienv &out) {
    out.gclienv = row.gclienv;
    out.addon = row.addon;
    out.comment = row.comment;
}

// --- atf_gcli.FGclienv.base.CopyIn
// Copy fields in to row
void atf_gcli::gclienv_CopyIn(atf_gcli::FGclienv &row, gclidb::Gclienv &in) {
    row.gclienv = in.gclienv;
    row.addon = in.addon;
    row.comment = in.comment;
}

// --- atf_gcli.FGclienv.c_gclienvsub.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void atf_gcli::c_gclienvsub_Insert(atf_gcli::FGclienv& gclienv, atf_gcli::FGclienvsub& row) {
    if (bool_Update(row.gclienv_c_gclienvsub_in_ary,true)) {
        // reserve space
        c_gclienvsub_Reserve(gclienv, 1);
        u32 n  = gclienv.c_gclienvsub_n;
        u32 at = n;
        atf_gcli::FGclienvsub* *elems = gclienv.c_gclienvsub_elems;
        elems[at] = &row;
        gclienv.c_gclienvsub_n = n+1;

    }
}

// --- atf_gcli.FGclienv.c_gclienvsub.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool atf_gcli::c_gclienvsub_InsertMaybe(atf_gcli::FGclienv& gclienv, atf_gcli::FGclienvsub& row) {
    bool retval = !row.gclienv_c_gclienvsub_in_ary;
    c_gclienvsub_Insert(gclienv,row); // check is performed in _Insert again
    return retval;
}

// --- atf_gcli.FGclienv.c_gclienvsub.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void atf_gcli::c_gclienvsub_Remove(atf_gcli::FGclienv& gclienv, atf_gcli::FGclienvsub& row) {
    if (bool_Update(row.gclienv_c_gclienvsub_in_ary,false)) {
        int lim = gclienv.c_gclienvsub_n;
        atf_gcli::FGclienvsub* *elems = gclienv.c_gclienvsub_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            atf_gcli::FGclienvsub* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(atf_gcli::FGclienvsub*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                gclienv.c_gclienvsub_n = lim - 1;
                break;
            }
        }
    }
}

// --- atf_gcli.FGclienv.c_gclienvsub.Reserve
// Reserve space in index for N more elements;
void atf_gcli::c_gclienvsub_Reserve(atf_gcli::FGclienv& gclienv, u32 n) {
    u32 old_max = gclienv.c_gclienvsub_max;
    if (UNLIKELY(gclienv.c_gclienvsub_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(atf_gcli::FGclienvsub*);
        u32 new_size = new_max * sizeof(atf_gcli::FGclienvsub*);
        void *new_mem = algo_lib::malloc_ReallocMem(gclienv.c_gclienvsub_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FGclienv.c_gclienvsub");
        }
        gclienv.c_gclienvsub_elems = (atf_gcli::FGclienvsub**)new_mem;
        gclienv.c_gclienvsub_max = new_max;
    }
}

// --- atf_gcli.FGclienv..Uninit
void atf_gcli::FGclienv_Uninit(atf_gcli::FGclienv& gclienv) {
    atf_gcli::FGclienv &row = gclienv; (void)row;
    ind_gclienv_Remove(row); // remove gclienv from index ind_gclienv

    // atf_gcli.FGclienv.c_gclienvsub.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(gclienv.c_gclienvsub_elems, sizeof(atf_gcli::FGclienvsub*)*gclienv.c_gclienvsub_max); // (atf_gcli.FGclienv.c_gclienvsub)
}

// --- atf_gcli.FGclienvsub.base.CopyOut
// Copy fields out of row
void atf_gcli::gclienvsub_CopyOut(atf_gcli::FGclienvsub &row, gclidb::Gclienvsub &out) {
    out.gclienvsub = row.gclienvsub;
    out.fwd = row.fwd;
    out.rev = row.rev;
    out.uval = row.uval;
}

// --- atf_gcli.FGclienvsub.base.CopyIn
// Copy fields in to row
void atf_gcli::gclienvsub_CopyIn(atf_gcli::FGclienvsub &row, gclidb::Gclienvsub &in) {
    row.gclienvsub = in.gclienvsub;
    row.fwd = in.fwd;
    row.rev = in.rev;
    row.uval = in.uval;
}

// --- atf_gcli.FGclienvsub.gclienv.Get
algo::Smallstr50 atf_gcli::gclienv_Get(atf_gcli::FGclienvsub& gclienvsub) {
    algo::Smallstr50 ret(algo::Pathcomp(gclienvsub.gclienvsub, ".LL"));
    return ret;
}

// --- atf_gcli.FGclienvsub.sub.Get
algo::Smallstr50 atf_gcli::sub_Get(atf_gcli::FGclienvsub& gclienvsub) {
    algo::Smallstr50 ret(algo::Pathcomp(gclienvsub.gclienvsub, ".LR"));
    return ret;
}

// --- atf_gcli.FGclienvsub..Uninit
void atf_gcli::FGclienvsub_Uninit(atf_gcli::FGclienvsub& gclienvsub) {
    atf_gcli::FGclienvsub &row = gclienvsub; (void)row;
    atf_gcli::FGclienv* p_gclienv = atf_gcli::ind_gclienv_Find(gclienv_Get(row));
    if (p_gclienv)  {
        c_gclienvsub_Remove(*p_gclienv, row);// remove gclienvsub from index c_gclienvsub
    }
    ind_gclienvsub_Remove(row); // remove gclienvsub from index ind_gclienvsub
}

// --- atf_gcli.FGtblact.base.CopyOut
// Copy fields out of row
void atf_gcli::gtblact_CopyOut(atf_gcli::FGtblact &row, gclidb::Gtblact &out) {
    out.gtblact = row.gtblact;
    out.t = row.t;
    out.e = row.e;
    out.auth = row.auth;
}

// --- atf_gcli.FGtblact.base.CopyIn
// Copy fields in to row
void atf_gcli::gtblact_CopyIn(atf_gcli::FGtblact &row, gclidb::Gtblact &in) {
    row.gtblact = in.gtblact;
    row.t = in.t;
    row.e = in.e;
    row.auth = in.auth;
}

// --- atf_gcli.FGtblact.gtbl.Get
algo::Smallstr250 atf_gcli::gtbl_Get(atf_gcli::FGtblact& gtblact) {
    algo::Smallstr250 ret(algo::Pathcomp(gtblact.gtblact, "_LL"));
    return ret;
}

// --- atf_gcli.FGtblact.gact.Get
algo::Smallstr50 atf_gcli::gact_Get(atf_gcli::FGtblact& gtblact) {
    algo::Smallstr50 ret(algo::Pathcomp(gtblact.gtblact, "_LR"));
    return ret;
}

// --- atf_gcli.FGtblact..Init
// Set all fields to initial values.
void atf_gcli::FGtblact_Init(atf_gcli::FGtblact& gtblact) {
    gtblact.t = bool(false);
    gtblact.e = bool(false);
    gtblact.auth = bool(false);
    gtblact.glab_fail = u32(0);
    gtblact.glab_run = u32(0);
    gtblact.ghub_run = u32(0);
    gtblact.ghub_fail = u32(0);
    gtblact.ind_gtblact_next = (atf_gcli::FGtblact*)-1; // (atf_gcli.FDb.ind_gtblact) not-in-hash
}

// --- atf_gcli.FGtblact..Uninit
void atf_gcli::FGtblact_Uninit(atf_gcli::FGtblact& gtblact) {
    atf_gcli::FGtblact &row = gtblact; (void)row;
    ind_gtblact_Remove(row); // remove gtblact from index ind_gtblact
}

// --- atf_gcli.FGtblacttst.base.CopyOut
// Copy fields out of row
void atf_gcli::gtblacttst_CopyOut(atf_gcli::FGtblacttst &row, gclidb::Gtblacttst &out) {
    out.gtblacttst = row.gtblacttst;
    out.working = row.working;
    out.cmd = row.cmd;
    out.comment = row.comment;
}

// --- atf_gcli.FGtblacttst.base.CopyIn
// Copy fields in to row
void atf_gcli::gtblacttst_CopyIn(atf_gcli::FGtblacttst &row, gclidb::Gtblacttst &in) {
    row.gtblacttst = in.gtblacttst;
    row.working = in.working;
    row.cmd = in.cmd;
    row.comment = in.comment;
}

// --- atf_gcli.FGtblacttst.gtblact.Get
algo::Smallstr50 atf_gcli::gtblact_Get(atf_gcli::FGtblacttst& gtblacttst) {
    algo::Smallstr50 ret(algo::Pathcomp(gtblacttst.gtblacttst, ".LL"));
    return ret;
}

// --- atf_gcli.FGtblacttst.gclienv.Get
algo::Smallstr50 atf_gcli::gclienv_Get(atf_gcli::FGtblacttst& gtblacttst) {
    algo::Smallstr50 ret(algo::Pathcomp(gtblacttst.gtblacttst, ".LR.LL"));
    return ret;
}

// --- atf_gcli.FGtblacttst.t.Get
algo::cstring atf_gcli::t_Get(atf_gcli::FGtblacttst& gtblacttst) {
    algo::cstring ret(algo::Pathcomp(gtblacttst.gtblacttst, ".RR"));
    return ret;
}

// --- atf_gcli.FGtblacttst.c_gtblacttstout.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void atf_gcli::c_gtblacttstout_Insert(atf_gcli::FGtblacttst& gtblacttst, atf_gcli::FGtblacttstout& row) {
    if (bool_Update(row.gtblacttst_c_gtblacttstout_in_ary,true)) {
        // reserve space
        c_gtblacttstout_Reserve(gtblacttst, 1);
        u32 n  = gtblacttst.c_gtblacttstout_n;
        u32 at = n;
        atf_gcli::FGtblacttstout* *elems = gtblacttst.c_gtblacttstout_elems;
        elems[at] = &row;
        gtblacttst.c_gtblacttstout_n = n+1;

    }
}

// --- atf_gcli.FGtblacttst.c_gtblacttstout.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool atf_gcli::c_gtblacttstout_InsertMaybe(atf_gcli::FGtblacttst& gtblacttst, atf_gcli::FGtblacttstout& row) {
    bool retval = !row.gtblacttst_c_gtblacttstout_in_ary;
    c_gtblacttstout_Insert(gtblacttst,row); // check is performed in _Insert again
    return retval;
}

// --- atf_gcli.FGtblacttst.c_gtblacttstout.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void atf_gcli::c_gtblacttstout_Remove(atf_gcli::FGtblacttst& gtblacttst, atf_gcli::FGtblacttstout& row) {
    if (bool_Update(row.gtblacttst_c_gtblacttstout_in_ary,false)) {
        int lim = gtblacttst.c_gtblacttstout_n;
        atf_gcli::FGtblacttstout* *elems = gtblacttst.c_gtblacttstout_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            atf_gcli::FGtblacttstout* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(atf_gcli::FGtblacttstout*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                gtblacttst.c_gtblacttstout_n = lim - 1;
                break;
            }
        }
    }
}

// --- atf_gcli.FGtblacttst.c_gtblacttstout.Reserve
// Reserve space in index for N more elements;
void atf_gcli::c_gtblacttstout_Reserve(atf_gcli::FGtblacttst& gtblacttst, u32 n) {
    u32 old_max = gtblacttst.c_gtblacttstout_max;
    if (UNLIKELY(gtblacttst.c_gtblacttstout_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(atf_gcli::FGtblacttstout*);
        u32 new_size = new_max * sizeof(atf_gcli::FGtblacttstout*);
        void *new_mem = algo_lib::malloc_ReallocMem(gtblacttst.c_gtblacttstout_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("atf_gcli.out_of_memory  field:atf_gcli.FGtblacttst.c_gtblacttstout");
        }
        gtblacttst.c_gtblacttstout_elems = (atf_gcli::FGtblacttstout**)new_mem;
        gtblacttst.c_gtblacttstout_max = new_max;
    }
}

// --- atf_gcli.FGtblacttst..Init
// Set all fields to initial values.
void atf_gcli::FGtblacttst_Init(atf_gcli::FGtblacttst& gtblacttst) {
    gtblacttst.working = bool(true);
    gtblacttst.fail = bool(false);
    gtblacttst.c_gtblacttstout_elems = NULL; // (atf_gcli.FGtblacttst.c_gtblacttstout)
    gtblacttst.c_gtblacttstout_n = 0; // (atf_gcli.FGtblacttst.c_gtblacttstout)
    gtblacttst.c_gtblacttstout_max = 0; // (atf_gcli.FGtblacttst.c_gtblacttstout)
    gtblacttst.select = bool(false);
    gtblacttst.p_gclienv = NULL;
    gtblacttst.p_gtblact = NULL;
    gtblacttst._db_c_gtblacttst_in_ary = bool(false);
    gtblacttst.ind_gtblacttst_next = (atf_gcli::FGtblacttst*)-1; // (atf_gcli.FDb.ind_gtblacttst) not-in-hash
}

// --- atf_gcli.FGtblacttst..Uninit
void atf_gcli::FGtblacttst_Uninit(atf_gcli::FGtblacttst& gtblacttst) {
    atf_gcli::FGtblacttst &row = gtblacttst; (void)row;
    ind_gtblacttst_Remove(row); // remove gtblacttst from index ind_gtblacttst

    // atf_gcli.FGtblacttst.c_gtblacttstout.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(gtblacttst.c_gtblacttstout_elems, sizeof(atf_gcli::FGtblacttstout*)*gtblacttst.c_gtblacttstout_max); // (atf_gcli.FGtblacttst.c_gtblacttstout)
}

// --- atf_gcli.FGtblacttstout.base.CopyOut
// Copy fields out of row
void atf_gcli::gtblacttstout_CopyOut(atf_gcli::FGtblacttstout &row, gclidb::Gtblacttstout &out) {
    out.gtblacttstout = row.gtblacttstout;
    out.text = row.text;
}

// --- atf_gcli.FGtblacttstout.base.CopyIn
// Copy fields in to row
void atf_gcli::gtblacttstout_CopyIn(atf_gcli::FGtblacttstout &row, gclidb::Gtblacttstout &in) {
    row.gtblacttstout = in.gtblacttstout;
    row.text = in.text;
}

// --- atf_gcli.FGtblacttstout.gtblacttst.Get
algo::Smallstr250 atf_gcli::gtblacttst_Get(atf_gcli::FGtblacttstout& gtblacttstout) {
    algo::Smallstr250 ret(algo::Pathcomp(gtblacttstout.gtblacttstout, ".RL"));
    return ret;
}

// --- atf_gcli.FGtblacttstout.out.Get
algo::cstring atf_gcli::out_Get(atf_gcli::FGtblacttstout& gtblacttstout) {
    algo::cstring ret(algo::Pathcomp(gtblacttstout.gtblacttstout, ".RR"));
    return ret;
}

// --- atf_gcli.FGtblacttstout..Uninit
void atf_gcli::FGtblacttstout_Uninit(atf_gcli::FGtblacttstout& gtblacttstout) {
    atf_gcli::FGtblacttstout &row = gtblacttstout; (void)row;
    atf_gcli::FGtblacttst* p_gtblacttst = atf_gcli::ind_gtblacttst_Find(gtblacttst_Get(row));
    if (p_gtblacttst)  {
        c_gtblacttstout_Remove(*p_gtblacttst, row);// remove gtblacttstout from index c_gtblacttstout
    }
    ind_gtblacttstout_Remove(row); // remove gtblacttstout from index ind_gtblacttstout
}

// --- atf_gcli.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_gcli::value_ToCstr(const atf_gcli::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_gcli_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- atf_gcli.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_gcli::value_Print(const atf_gcli::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_gcli.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_gcli::value_SetStrptrMaybe(atf_gcli::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,atf_gcli_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_gcli.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_gcli::value_SetStrptr(atf_gcli::FieldId& parent, algo::strptr rhs, atf_gcli_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_gcli.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_gcli::value_ReadStrptrMaybe(atf_gcli::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_gcli.FieldId..ReadStrptrMaybe
// Read fields of atf_gcli::FieldId from an ascii string.
// The format of the string is the format of the atf_gcli::FieldId's only field
bool atf_gcli::FieldId_ReadStrptrMaybe(atf_gcli::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_gcli.FieldId..Print
// print string representation of atf_gcli::FieldId to string LHS, no header -- cprint:atf_gcli.FieldId.String
void atf_gcli::FieldId_Print(atf_gcli::FieldId & row, algo::cstring &str) {
    atf_gcli::value_Print(row, str);
}

// --- atf_gcli.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_gcli::value_ToCstr(const atf_gcli::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_gcli_TableId_gclidb_Gclienv: ret = "gclidb.Gclienv";  break;
        case atf_gcli_TableId_gclidb_Gclienvsub: ret = "gclidb.Gclienvsub";  break;
        case atf_gcli_TableId_gclidb_Gtblact: ret = "gclidb.Gtblact";  break;
        case atf_gcli_TableId_gclidb_Gtblacttst: ret = "gclidb.Gtblacttst";  break;
        case atf_gcli_TableId_gclidb_Gtblacttstout: ret = "gclidb.Gtblacttstout";  break;
    }
    return ret;
}

// --- atf_gcli.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_gcli::value_Print(const atf_gcli::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_gcli.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_gcli::value_SetStrptrMaybe(atf_gcli::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('g','c','l','i','d','b','.','G'): {
                    if (memcmp(rhs.elems+8,"clienv",6)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_Gclienv); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tblact",6)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_Gtblact); ret = true; break; }
                    break;
                }
                case LE_STR8('g','c','l','i','d','b','.','g'): {
                    if (memcmp(rhs.elems+8,"clienv",6)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_gclienv); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tblact",6)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_gtblact); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 17: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('g','c','l','i','d','b','.','G'): {
                    if (memcmp(rhs.elems+8,"clienvsub",9)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_Gclienvsub); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tblacttst",9)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_Gtblacttst); ret = true; break; }
                    break;
                }
                case LE_STR8('g','c','l','i','d','b','.','g'): {
                    if (memcmp(rhs.elems+8,"clienvsub",9)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_gclienvsub); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tblacttst",9)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_gtblacttst); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 20: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('g','c','l','i','d','b','.','G'): {
                    if (memcmp(rhs.elems+8,"tblacttstout",12)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_Gtblacttstout); ret = true; break; }
                    break;
                }
                case LE_STR8('g','c','l','i','d','b','.','g'): {
                    if (memcmp(rhs.elems+8,"tblacttstout",12)==0) { value_SetEnum(parent,atf_gcli_TableId_gclidb_gtblacttstout); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_gcli.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_gcli::value_SetStrptr(atf_gcli::TableId& parent, algo::strptr rhs, atf_gcli_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_gcli.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_gcli::value_ReadStrptrMaybe(atf_gcli::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_gcli.TableId..ReadStrptrMaybe
// Read fields of atf_gcli::TableId from an ascii string.
// The format of the string is the format of the atf_gcli::TableId's only field
bool atf_gcli::TableId_ReadStrptrMaybe(atf_gcli::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_gcli.TableId..Print
// print string representation of atf_gcli::TableId to string LHS, no header -- cprint:atf_gcli.TableId.String
void atf_gcli::TableId_Print(atf_gcli::TableId & row, algo::cstring &str) {
    atf_gcli::value_Print(row, str);
}

// --- atf_gcli...SizeCheck
inline static void atf_gcli::SizeCheck() {
}

// --- atf_gcli...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        atf_gcli::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        atf_gcli::ReadArgv(); // dmmeta.main:atf_gcli
        atf_gcli::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("atf_gcli.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        atf_gcli::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- atf_gcli...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
