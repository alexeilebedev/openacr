//
// cpp/gen/abt_md_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/abt_md_gen.h"
#include "include/gen/abt_md_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
abt_md::FDb     abt_md::_db;      // dependency found via dev.targdep

namespace abt_md {
const char *abt_md_help =
"Usage: abt_md [[-readme:]<regx>] [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    [readme]    regx    \"%\"     Re-inline these readmes\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help an exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace abt_md
namespace abt_md { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          readme_InputMaybe(dev::Readme &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- abt_md.trace..Print
// print string representation of abt_md::trace to string LHS, no header -- cprint:abt_md.trace.String
void abt_md::trace_Print(abt_md::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "abt_md.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- abt_md.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     abt_md.FDb.cmdline
//     algo_lib.FDb.cmdline
void abt_md::ReadArgv() {
    command::abt_md &cmd = abt_md::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::abt_md_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::abt_md_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"abt_md: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"abt_md: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::abt_md_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "abt_md: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::abt_md_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"abt_md: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(abt_md_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    vrfy(abt_md::LoadTuplesMaybe(cmd.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- abt_md.FDb._db.MainLoop
// Main loop.
void abt_md::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        abt_md::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- abt_md.FDb._db.Step
// Main step
void abt_md::Step() {
}

// --- abt_md.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void abt_md::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("abt_md", abt_md::InsertStrptrMaybe, NULL, abt_md::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "abt_md.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(abt_md::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)abt_md::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'abt_md.Input'  signature:'9ee307dd6f08e1caafb902967e323b41be77ef00'");
}

// --- abt_md.FDb._db.StaticCheck
void abt_md::StaticCheck() {
    algo_assert(_offset_of(abt_md::FieldId, value) + sizeof(((abt_md::FieldId*)0)->value) == sizeof(abt_md::FieldId));
}

// --- abt_md.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool abt_md::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    abt_md::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case abt_md_TableId_dev_Readme: { // finput:abt_md.FDb.readme
            dev::Readme elem;
            retval = dev::Readme_ReadStrptrMaybe(elem, str);
            retval = retval && readme_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- abt_md.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool abt_md::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "dev.readme"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, abt_md::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- abt_md.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool abt_md::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, abt_md::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- abt_md.FDb._db.Steps
// Calls Step function of dependencies
void abt_md::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- abt_md.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool abt_md::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- abt_md.FDb.readme.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
abt_md::FReadme& abt_md::readme_Alloc() {
    abt_md::FReadme* row = readme_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("abt_md.out_of_mem  field:abt_md.FDb.readme  comment:'Alloc failed'");
    }
    return *row;
}

// --- abt_md.FDb.readme.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
abt_md::FReadme* abt_md::readme_AllocMaybe() {
    abt_md::FReadme *row = (abt_md::FReadme*)readme_AllocMem();
    if (row) {
        new (row) abt_md::FReadme; // call constructor
    }
    return row;
}

// --- abt_md.FDb.readme.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
abt_md::FReadme* abt_md::readme_InsertMaybe(const dev::Readme &value) {
    abt_md::FReadme *row = &readme_Alloc(); // if out of memory, process dies. if input error, return NULL.
    readme_CopyIn(*row,const_cast<dev::Readme&>(value));
    bool ok = readme_XrefMaybe(*row); // this may return false
    if (!ok) {
        readme_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- abt_md.FDb.readme.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* abt_md::readme_AllocMem() {
    u64 new_nelems     = _db.readme_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    abt_md::FReadme*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.readme_lary[bsr];
        if (!lev) {
            lev=(abt_md::FReadme*)algo_lib::malloc_AllocMem(sizeof(abt_md::FReadme) * (u64(1)<<bsr));
            _db.readme_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.readme_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- abt_md.FDb.readme.RemoveAll
// Remove all elements from Lary
void abt_md::readme_RemoveAll() {
    for (u64 n = _db.readme_n; n>0; ) {
        n--;
        readme_qFind(u64(n)).~FReadme(); // destroy last element
        _db.readme_n = i32(n);
    }
}

// --- abt_md.FDb.readme.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void abt_md::readme_RemoveLast() {
    u64 n = _db.readme_n;
    if (n > 0) {
        n -= 1;
        readme_qFind(u64(n)).~FReadme();
        _db.readme_n = i32(n);
    }
}

// --- abt_md.FDb.readme.InputMaybe
static bool abt_md::readme_InputMaybe(dev::Readme &elem) {
    bool retval = true;
    retval = readme_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- abt_md.FDb.readme.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool abt_md::readme_XrefMaybe(abt_md::FReadme &row) {
    bool retval = true;
    (void)row;
    // insert readme into index ind_readme
    if (true) { // user-defined insert condition
        bool success = ind_readme_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "abt_md.duplicate_key  xref:abt_md.FDb.ind_readme"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- abt_md.FDb.ind_readme.Find
// Find row by key. Return NULL if not found.
abt_md::FReadme* abt_md::ind_readme_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_readme_buckets_n - 1);
    abt_md::FReadme* *e = &_db.ind_readme_buckets_elems[index];
    abt_md::FReadme* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gitfile == key;
        if (done) break;
        e         = &ret->ind_readme_next;
    } while (true);
    return ret;
}

// --- abt_md.FDb.ind_readme.FindX
// Look up row by key and return reference. Throw exception if not found
abt_md::FReadme& abt_md::ind_readme_FindX(const algo::strptr& key) {
    abt_md::FReadme* ret = ind_readme_Find(key);
    vrfy(ret, tempstr() << "abt_md.key_error  table:ind_readme  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- abt_md.FDb.ind_readme.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
abt_md::FReadme& abt_md::ind_readme_GetOrCreate(const algo::strptr& key) {
    abt_md::FReadme* ret = ind_readme_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &readme_Alloc();
        (*ret).gitfile = key;
        bool good = readme_XrefMaybe(*ret);
        if (!good) {
            readme_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "abt_md.create_error  table:ind_readme  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- abt_md.FDb.ind_readme.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool abt_md::ind_readme_InsertMaybe(abt_md::FReadme& row) {
    ind_readme_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_readme_next == (abt_md::FReadme*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_readme_buckets_n - 1);
        abt_md::FReadme* *prev = &_db.ind_readme_buckets_elems[index];
        do {
            abt_md::FReadme* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gitfile == row.gitfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_readme_next;
        } while (true);
        if (retval) {
            row.ind_readme_next = *prev;
            _db.ind_readme_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- abt_md.FDb.ind_readme.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void abt_md::ind_readme_Remove(abt_md::FReadme& row) {
    if (LIKELY(row.ind_readme_next != (abt_md::FReadme*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_readme_buckets_n - 1);
        abt_md::FReadme* *prev = &_db.ind_readme_buckets_elems[index]; // addr of pointer to current element
        while (abt_md::FReadme *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_readme_next; // unlink (singly linked list)
                _db.ind_readme_n--;
                row.ind_readme_next = (abt_md::FReadme*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_readme_next;
        }
    }
}

// --- abt_md.FDb.ind_readme.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void abt_md::ind_readme_Reserve(int n) {
    u32 old_nbuckets = _db.ind_readme_buckets_n;
    u32 new_nelems   = _db.ind_readme_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(abt_md::FReadme*);
        u32 new_size = new_nbuckets * sizeof(abt_md::FReadme*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        abt_md::FReadme* *new_buckets = (abt_md::FReadme**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("abt_md.out_of_memory  field:abt_md.FDb.ind_readme");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_readme_buckets_n; i++) {
            abt_md::FReadme* elem = _db.ind_readme_buckets_elems[i];
            while (elem) {
                abt_md::FReadme &row        = *elem;
                abt_md::FReadme* next       = row.ind_readme_next;
                u32 index          = algo::Smallstr200_Hash(0, row.gitfile) & (new_nbuckets-1);
                row.ind_readme_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_readme_buckets_elems, old_size);
        _db.ind_readme_buckets_elems = new_buckets;
        _db.ind_readme_buckets_n = new_nbuckets;
    }
}

// --- abt_md.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr abt_md::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- abt_md.FDb.trace.N
// Function return 1
inline static i32 abt_md::trace_N() {
    return 1;
}

// --- abt_md.FDb..Init
// Set all fields to initial values.
void abt_md::FDb_Init() {
    // initialize LAry readme (abt_md.FDb.readme)
    _db.readme_n = 0;
    memset(_db.readme_lary, 0, sizeof(_db.readme_lary)); // zero out all level pointers
    abt_md::FReadme* readme_first = (abt_md::FReadme*)algo_lib::malloc_AllocMem(sizeof(abt_md::FReadme) * (u64(1)<<4));
    if (!readme_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.readme_lary[i]  = readme_first;
        readme_first    += 1ULL<<i;
    }
    // initialize hash table for abt_md::FReadme;
    _db.ind_readme_n             	= 0; // (abt_md.FDb.ind_readme)
    _db.ind_readme_buckets_n     	= 4; // (abt_md.FDb.ind_readme)
    _db.ind_readme_buckets_elems 	= (abt_md::FReadme**)algo_lib::malloc_AllocMem(sizeof(abt_md::FReadme*)*_db.ind_readme_buckets_n); // initial buckets (abt_md.FDb.ind_readme)
    if (!_db.ind_readme_buckets_elems) {
        FatalErrorExit("out of memory"); // (abt_md.FDb.ind_readme)
    }
    memset(_db.ind_readme_buckets_elems, 0, sizeof(abt_md::FReadme*)*_db.ind_readme_buckets_n); // (abt_md.FDb.ind_readme)

    abt_md::InitReflection();
}

// --- abt_md.FDb..Uninit
void abt_md::FDb_Uninit() {
    abt_md::FDb &row = _db; (void)row;

    // abt_md.FDb.ind_readme.Uninit (Thash)  //
    // skip destruction of ind_readme in global scope

    // abt_md.FDb.readme.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- abt_md.FReadme.base.CopyOut
// Copy fields out of row
void abt_md::readme_CopyOut(abt_md::FReadme &row, dev::Readme &out) {
    out.gitfile = row.gitfile;
    out.inl = row.inl;
    out.sandbox = row.sandbox;
    out.filter = row.filter;
    out.comment = row.comment;
}

// --- abt_md.FReadme.base.CopyIn
// Copy fields in to row
void abt_md::readme_CopyIn(abt_md::FReadme &row, dev::Readme &in) {
    row.gitfile = in.gitfile;
    row.inl = in.inl;
    row.sandbox = in.sandbox;
    row.filter = in.filter;
    row.comment = in.comment;
}

// --- abt_md.FReadme..Uninit
void abt_md::FReadme_Uninit(abt_md::FReadme& readme) {
    abt_md::FReadme &row = readme; (void)row;
    ind_readme_Remove(row); // remove readme from index ind_readme
}

// --- abt_md.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* abt_md::value_ToCstr(const abt_md::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case abt_md_FieldId_value          : ret = "value";  break;
    }
    return ret;
}

// --- abt_md.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void abt_md::value_Print(const abt_md::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- abt_md.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool abt_md::value_SetStrptrMaybe(abt_md::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,abt_md_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- abt_md.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void abt_md::value_SetStrptr(abt_md::FieldId& parent, algo::strptr rhs, abt_md_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- abt_md.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool abt_md::value_ReadStrptrMaybe(abt_md::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- abt_md.FieldId..ReadStrptrMaybe
// Read fields of abt_md::FieldId from an ascii string.
// The format of the string is the format of the abt_md::FieldId's only field
bool abt_md::FieldId_ReadStrptrMaybe(abt_md::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- abt_md.FieldId..Print
// print string representation of abt_md::FieldId to string LHS, no header -- cprint:abt_md.FieldId.String
void abt_md::FieldId_Print(abt_md::FieldId & row, algo::cstring &str) {
    abt_md::value_Print(row, str);
}

// --- abt_md.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* abt_md::value_ToCstr(const abt_md::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case abt_md_TableId_dev_Readme     : ret = "dev.Readme";  break;
    }
    return ret;
}

// --- abt_md.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void abt_md::value_Print(const abt_md::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- abt_md.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool abt_md::value_SetStrptrMaybe(abt_md::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','R','e','a','d'): {
                    if (memcmp(rhs.elems+8,"me",2)==0) { value_SetEnum(parent,abt_md_TableId_dev_Readme); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','r','e','a','d'): {
                    if (memcmp(rhs.elems+8,"me",2)==0) { value_SetEnum(parent,abt_md_TableId_dev_readme); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- abt_md.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void abt_md::value_SetStrptr(abt_md::TableId& parent, algo::strptr rhs, abt_md_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- abt_md.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool abt_md::value_ReadStrptrMaybe(abt_md::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- abt_md.TableId..ReadStrptrMaybe
// Read fields of abt_md::TableId from an ascii string.
// The format of the string is the format of the abt_md::TableId's only field
bool abt_md::TableId_ReadStrptrMaybe(abt_md::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- abt_md.TableId..Print
// print string representation of abt_md::TableId to string LHS, no header -- cprint:abt_md.TableId.String
void abt_md::TableId_Print(abt_md::TableId & row, algo::cstring &str) {
    abt_md::value_Print(row, str);
}

// --- abt_md...SizeCheck
inline static void abt_md::SizeCheck() {
}

// --- abt_md...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        abt_md::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        abt_md::ReadArgv(); // dmmeta.main:abt_md
        abt_md::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("abt_md.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        abt_md::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- abt_md...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
