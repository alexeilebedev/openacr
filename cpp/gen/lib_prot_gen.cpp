//
// cpp/gen/lib_prot_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude
namespace lib_prot { // gen:ns_print_proto
    // func:lib_prot...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- lib_prot.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_prot::value_ToCstr(const lib_prot::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_prot_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- lib_prot.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_prot::value_Print(const lib_prot::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_prot.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_prot::value_SetStrptrMaybe(lib_prot::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lib_prot_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_prot.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_prot::value_SetStrptr(lib_prot::FieldId& parent, algo::strptr rhs, lib_prot_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_prot.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_prot::value_ReadStrptrMaybe(lib_prot::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_prot.FieldId..ReadStrptrMaybe
// Read fields of lib_prot::FieldId from an ascii string.
// The format of the string is the format of the lib_prot::FieldId's only field
bool lib_prot::FieldId_ReadStrptrMaybe(lib_prot::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_prot.FieldId..Print
// print string representation of ROW to string STR
// cfmt:lib_prot.FieldId.String  printfmt:Raw
void lib_prot::FieldId_Print(lib_prot::FieldId& row, algo::cstring& str) {
    lib_prot::value_Print(row, str);
}

// --- lib_prot...SizeCheck
inline static void lib_prot::SizeCheck() {
}
