//
// cpp/gen/atf_comp_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/atf_comp_gen.h"
#include "include/gen/atf_comp_gen.inl.h"
#include "include/gen/atfdb_gen.h"
#include "include/gen/atfdb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/report_gen.h"
#include "include/gen/report_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_ctype_gen.h"
#include "include/gen/lib_ctype_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb    lib_json::_db;     // dependency found via dev.targdep
algo_lib::FDb    algo_lib::_db;     // dependency found via dev.targdep
lib_ctype::FDb   lib_ctype::_db;    // dependency found via dev.targdep
atf_comp::FDb    atf_comp::_db;     // dependency found via dev.targdep

namespace atf_comp {
const char *atf_comp_help =
"atf_comp: Algo Test Framework - Component test execution\n"
"Usage: atf_comp [[-comptest:]<regx>] [options]\n"
"    OPTION            TYPE    DFLT       COMMENT\n"
"    -in               string  \"data\"     Input directory or filename, - for stdin\n"
"    [comptest]        regx    \"%\"        Select comptest (SQL regex)\n"
"    -mdbg                                (action) Run component test under debugger\n"
"    -run                      Y          (action) Run selected component tests\n"
"    -capture                             (action) Re-capture test results\n"
"    -print                               (action) Print testcase\n"
"    -printinput                          (action) Print input of test case\n"
"    -e                                   (action) Open selected testcases in an editor\n"
"    -normalize                           (action) Renumber and normalize tmsgs\n"
"    -covcapture                          (action) Capture new coverage percentages and save back\n"
"    -covcheck                            (action) Check coverage percentages against tgtcov table\n"
"    -compdir          string  \"\"         Component image directory (exe)\n"
"    -cfg              string  \"release\"  Set config\n"
"    -check_untracked          Y          Check for untracked file before allowing test to run\n"
"    -maxerr           int     1          Exit after this many errors\n"
"    -build                               Build given cfg before test\n"
"    -ood                                 Check given cfg for ood before test\n"
"    -memcheck                            Run under memory checker (valgrind)\n"
"    -force                               (With -memcheck) run suppressed memcheck\n"
"    -callgrind                           Run under callgrind profiler (valgrind)\n"
"    -maxjobs          int     1          Maximum number of tests run in parallel\n"
"    -stream                              prints component's output\n"
"    -i                                   Read and execute testcase from stdin\n"
"    -write                    Y          (implied with -e) Write any changes back to ssim tables\n"
"    -report                              Print final report\n"
"    -b                string  \"\"         Breakpoint passed to mdbg as-is\n"
"    -verbose          int                Verbosity level (0..255); alias -v; cumulative\n"
"    -debug            int                Debug level (0..255); alias -d; cumulative\n"
"    -help                                Print help and exit; alias -h\n"
"    -version                             Print version and exit\n"
"    -signature                           Show signatures and exit; alias -sig\n"
;


} // namespace atf_comp
namespace atf_comp { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          comptest_InputMaybe(atfdb::Comptest &elem) __attribute__((nothrow));
    // First element of index changed.
    static void          zd_sel_comptest_FirstChanged() __attribute__((nothrow));
    // Update cycles count from previous clock capture
    static void          zd_sel_comptest_UpdateCycles() __attribute__((nothrow));
    static void          zd_sel_comptest_Call() __attribute__((nothrow));
    static bool          targs_InputMaybe(atfdb::Targs &elem) __attribute__((nothrow));
    static bool          tmsg_InputMaybe(atfdb::Tmsg &elem) __attribute__((nothrow));
    static bool          tfilt_InputMaybe(atfdb::Tfilt &elem) __attribute__((nothrow));
    // Update cycles count from previous clock capture
    static void          zd_run_comptest_UpdateCycles() __attribute__((nothrow));
    static void          zd_run_comptest_Call() __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- atf_comp.FComptest.base.CopyOut
// Copy fields out of row
void atf_comp::comptest_CopyOut(atf_comp::FComptest &row, atfdb::Comptest &out) {
    out.comptest = row.comptest;
    out.timeout = row.timeout;
    out.memcheck = row.memcheck;
    out.exit_code = row.exit_code;
    out.comment = row.comment;
}

// --- atf_comp.FComptest.base.CopyIn
// Copy fields in to row
void atf_comp::comptest_CopyIn(atf_comp::FComptest &row, atfdb::Comptest &in) {
    row.comptest = in.comptest;
    row.timeout = in.timeout;
    row.memcheck = in.memcheck;
    row.exit_code = in.exit_code;
    row.comment = in.comment;
}

// --- atf_comp.FComptest.target.Get
algo::Smallstr16 atf_comp::target_Get(atf_comp::FComptest& comptest) {
    algo::Smallstr16 ret(algo::Pathcomp(comptest.comptest, ".LL"));
    return ret;
}

// --- atf_comp.FComptest.testname.Get
algo::Smallstr50 atf_comp::testname_Get(atf_comp::FComptest& comptest) {
    algo::Smallstr50 ret(algo::Pathcomp(comptest.comptest, ".LR"));
    return ret;
}

// --- atf_comp.FComptest.c_targs.Cascdel
// Delete referred-to items.
// Deleted pointed-to item.
void atf_comp::c_targs_Cascdel(atf_comp::FComptest& comptest) {
    atf_comp::FTargs *ptr = comptest.c_targs;
    if (ptr) {
        targs_Delete(*ptr);
        comptest.c_targs = NULL;
    }
}

// --- atf_comp.FComptest.c_tfilt.Cascdel
// Delete referred-to items.
// Deleted pointed-to item.
void atf_comp::c_tfilt_Cascdel(atf_comp::FComptest& comptest) {
    atf_comp::FTfilt *ptr = comptest.c_tfilt;
    if (ptr) {
        tfilt_Delete(*ptr);
        comptest.c_tfilt = NULL;
    }
}

// --- atf_comp.FComptest.zd_tmsg.Cascdel
// Delete all elements in the linked list.
void atf_comp::zd_tmsg_Cascdel(atf_comp::FComptest& comptest) {
    while (atf_comp::FTmsg *zd_tmsg_first = zd_tmsg_First(comptest)) {
        tmsg_Delete(*zd_tmsg_first);
    }
}

// --- atf_comp.FComptest.zd_tmsg.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_tmsg_Insert(atf_comp::FComptest& comptest, atf_comp::FTmsg& row) {
    if (!zd_tmsg_InLlistQ(row)) {
        atf_comp::FTmsg* old_tail = comptest.zd_tmsg_tail;
        row.zd_tmsg_next = NULL;
        row.zd_tmsg_prev = old_tail;
        comptest.zd_tmsg_tail = &row;
        atf_comp::FTmsg **new_row_a = &old_tail->zd_tmsg_next;
        atf_comp::FTmsg **new_row_b = &comptest.zd_tmsg_head;
        atf_comp::FTmsg **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        comptest.zd_tmsg_n++;
    }
}

// --- atf_comp.FComptest.zd_tmsg.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_tmsg_Remove(atf_comp::FComptest& comptest, atf_comp::FTmsg& row) {
    if (zd_tmsg_InLlistQ(row)) {
        atf_comp::FTmsg* old_head       = comptest.zd_tmsg_head;
        (void)old_head; // in case it's not used
        atf_comp::FTmsg* prev = row.zd_tmsg_prev;
        atf_comp::FTmsg* next = row.zd_tmsg_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FTmsg **new_next_a = &prev->zd_tmsg_next;
        atf_comp::FTmsg **new_next_b = &comptest.zd_tmsg_head;
        atf_comp::FTmsg **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FTmsg **new_prev_a = &next->zd_tmsg_prev;
        atf_comp::FTmsg **new_prev_b = &comptest.zd_tmsg_tail;
        atf_comp::FTmsg **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        comptest.zd_tmsg_n--;
        row.zd_tmsg_next=(atf_comp::FTmsg*)-1; // not-in-list
    }
}

// --- atf_comp.FComptest.zd_tmsg.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_tmsg_RemoveAll(atf_comp::FComptest& comptest) {
    atf_comp::FTmsg* row = comptest.zd_tmsg_head;
    comptest.zd_tmsg_head = NULL;
    comptest.zd_tmsg_tail = NULL;
    comptest.zd_tmsg_n = 0;
    while (row) {
        atf_comp::FTmsg* row_next = row->zd_tmsg_next;
        row->zd_tmsg_next  = (atf_comp::FTmsg*)-1;
        row->zd_tmsg_prev  = NULL;
        row = row_next;
    }
}

// --- atf_comp.FComptest.zd_tmsg.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
atf_comp::FTmsg* atf_comp::zd_tmsg_RemoveFirst(atf_comp::FComptest& comptest) {
    atf_comp::FTmsg *row = NULL;
    row = comptest.zd_tmsg_head;
    if (row) {
        atf_comp::FTmsg *next = row->zd_tmsg_next;
        comptest.zd_tmsg_head = next;
        atf_comp::FTmsg **new_end_a = &next->zd_tmsg_prev;
        atf_comp::FTmsg **new_end_b = &comptest.zd_tmsg_tail;
        atf_comp::FTmsg **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        comptest.zd_tmsg_n--;
        row->zd_tmsg_next = (atf_comp::FTmsg*)-1; // mark as not-in-list
    }
    return row;
}

// --- atf_comp.FComptest..Init
// Set all fields to initial values.
void atf_comp::FComptest_Init(atf_comp::FComptest& comptest) {
    comptest.timeout = i32(10);
    comptest.memcheck = bool(true);
    comptest.exit_code = u8(0);
    comptest.c_targs = NULL;
    comptest.msg_index = i32(0);
    comptest.c_tfilt = NULL;
    comptest.elapsed = double(0.0);
    comptest.success = bool(false);
    comptest.zd_tmsg_head = NULL; // (atf_comp.FComptest.zd_tmsg)
    comptest.zd_tmsg_n = 0; // (atf_comp.FComptest.zd_tmsg)
    comptest.zd_tmsg_tail = NULL; // (atf_comp.FComptest.zd_tmsg)
    comptest.need_write = bool(false);
    comptest.ind_comptest_next = (atf_comp::FComptest*)-1; // (atf_comp.FDb.ind_comptest) not-in-hash
    comptest.zd_sel_comptest_next = (atf_comp::FComptest*)-1; // (atf_comp.FDb.zd_sel_comptest) not-in-list
    comptest.zd_sel_comptest_prev = NULL; // (atf_comp.FDb.zd_sel_comptest)
    comptest.zd_run_comptest_next = (atf_comp::FComptest*)-1; // (atf_comp.FDb.zd_run_comptest) not-in-list
    comptest.zd_run_comptest_prev = NULL; // (atf_comp.FDb.zd_run_comptest)
    comptest.zd_out_comptest_next = (atf_comp::FComptest*)-1; // (atf_comp.FDb.zd_out_comptest) not-in-list
    comptest.zd_out_comptest_prev = NULL; // (atf_comp.FDb.zd_out_comptest)
}

// --- atf_comp.FComptest..Uninit
void atf_comp::FComptest_Uninit(atf_comp::FComptest& comptest) {
    atf_comp::FComptest &row = comptest; (void)row;
    zd_tmsg_Cascdel(comptest); // dmmeta.cascdel:atf_comp.FComptest.zd_tmsg
    c_tfilt_Cascdel(comptest); // dmmeta.cascdel:atf_comp.FComptest.c_tfilt
    c_targs_Cascdel(comptest); // dmmeta.cascdel:atf_comp.FComptest.c_targs
    zd_run_comptest_Remove(row); // remove comptest from index zd_run_comptest
    ind_comptest_Remove(row); // remove comptest from index ind_comptest
    zd_sel_comptest_Remove(row); // remove comptest from index zd_sel_comptest
    zd_out_comptest_Remove(row); // remove comptest from index zd_out_comptest
}

// --- atf_comp.trace..Print
// print string representation of atf_comp::trace to string LHS, no header -- cprint:atf_comp.trace.String
void atf_comp::trace_Print(atf_comp::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_comp.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- atf_comp.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     atf_comp.FDb.cmdline
//     algo_lib.FDb.cmdline
void atf_comp::ReadArgv() {
    command::atf_comp &cmd = atf_comp::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::atf_comp_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::atf_comp_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"atf_comp: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"atf_comp: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::atf_comp_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "atf_comp: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::atf_comp_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"atf_comp: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(atf_comp_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(atf_comp::LoadTuplesMaybe(cmd.in,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- atf_comp.FDb._db.MainLoop
// Main loop.
void atf_comp::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        atf_comp::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- atf_comp.FDb._db.Step
// Main step
void atf_comp::Step() {
    zd_sel_comptest_Call();
    zd_run_comptest_Call();
}

// --- atf_comp.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void atf_comp::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("atf_comp", atf_comp::InsertStrptrMaybe, atf_comp::Step, atf_comp::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "atf_comp.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(atf_comp::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)atf_comp::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'atf_comp.Input'  signature:'992a7c431c3ffd5c6fb80d9918b452d5a2b4b9f8'");
}

// --- atf_comp.FDb._db.StaticCheck
void atf_comp::StaticCheck() {
    algo_assert(_offset_of(atf_comp::FieldId, value) + sizeof(((atf_comp::FieldId*)0)->value) == sizeof(atf_comp::FieldId));
}

// --- atf_comp.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool atf_comp::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    atf_comp::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case atf_comp_TableId_atfdb_Comptest: { // finput:atf_comp.FDb.comptest
            atfdb::Comptest elem;
            retval = atfdb::Comptest_ReadStrptrMaybe(elem, str);
            retval = retval && comptest_InputMaybe(elem);
            break;
        }
        case atf_comp_TableId_atfdb_Targs: { // finput:atf_comp.FDb.targs
            atfdb::Targs elem;
            retval = atfdb::Targs_ReadStrptrMaybe(elem, str);
            retval = retval && targs_InputMaybe(elem);
            break;
        }
        case atf_comp_TableId_atfdb_Tmsg: { // finput:atf_comp.FDb.tmsg
            atfdb::Tmsg elem;
            retval = atfdb::Tmsg_ReadStrptrMaybe(elem, str);
            retval = retval && tmsg_InputMaybe(elem);
            break;
        }
        case atf_comp_TableId_atfdb_Tfilt: { // finput:atf_comp.FDb.tfilt
            atfdb::Tfilt elem;
            retval = atfdb::Tfilt_ReadStrptrMaybe(elem, str);
            retval = retval && tfilt_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- atf_comp.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool atf_comp::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = atf_comp::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = atf_comp::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ctype"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.field"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dev.unstablefld"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ftuple"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"atfdb.comptest"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"atfdb.tmsg"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"atfdb.tfilt"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"atfdb.targs"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ssimfile"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.cfmt"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.fconst"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.substr"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.cppfunc"),recursive);
        retval = retval && atf_comp::LoadTuplesFile(algo::SsimFname(root,"dmmeta.cdflt"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- atf_comp.FDb._db.LoadTuplesFile
// Load all finputs from given file.
bool atf_comp::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo_FileFlags__throw);
    retval = LoadTuplesFd(fildes.fd, fname, recursive);
    return retval;
}

// --- atf_comp.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool atf_comp::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
            retval = retval && lib_ctype::InsertStrptrMaybe(line);
        }
        retval = retval && atf_comp::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- atf_comp.FDb._db.SaveTuples
// Save ssim data to given directory.
u32 atf_comp::SaveTuples(algo::strptr root) {
    u32 retval = 0;
    u32 nbefore = algo_lib::_db.stringtofile_nwrite;
    (void)zd_out_tmsg_SaveSsimfile(SsimFname(root, "atfdb.tmsg"));
    (void)zd_out_comptest_SaveSsimfile(SsimFname(root, "atfdb.comptest"));
    (void)zd_out_tfilt_SaveSsimfile(SsimFname(root, "atfdb.tfilt"));
    (void)zd_out_targs_SaveSsimfile(SsimFname(root, "atfdb.targs"));
    retval = algo_lib::_db.stringtofile_nwrite - nbefore;
    return retval;
}

// --- atf_comp.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool atf_comp::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = atf_comp::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- atf_comp.FDb._db.Steps
// Calls Step function of dependencies
void atf_comp::Steps() {
    atf_comp::Step(); // dependent namespace specified via (dev.targdep)
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- atf_comp.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_comp::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- atf_comp.FDb.comptest.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_comp::FComptest& atf_comp::comptest_Alloc() {
    atf_comp::FComptest* row = comptest_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_comp.out_of_mem  field:atf_comp.FDb.comptest  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_comp.FDb.comptest.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_comp::FComptest* atf_comp::comptest_AllocMaybe() {
    atf_comp::FComptest *row = (atf_comp::FComptest*)comptest_AllocMem();
    if (row) {
        new (row) atf_comp::FComptest; // call constructor
    }
    return row;
}

// --- atf_comp.FDb.comptest.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_comp::FComptest* atf_comp::comptest_InsertMaybe(const atfdb::Comptest &value) {
    atf_comp::FComptest *row = &comptest_Alloc(); // if out of memory, process dies. if input error, return NULL.
    comptest_CopyIn(*row,const_cast<atfdb::Comptest&>(value));
    bool ok = comptest_XrefMaybe(*row); // this may return false
    if (!ok) {
        comptest_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_comp.FDb.comptest.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_comp::comptest_AllocMem() {
    u64 new_nelems     = _db.comptest_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_comp::FComptest*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.comptest_lary[bsr];
        if (!lev) {
            lev=(atf_comp::FComptest*)algo_lib::malloc_AllocMem(sizeof(atf_comp::FComptest) * (u64(1)<<bsr));
            _db.comptest_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.comptest_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_comp.FDb.comptest.RemoveAll
// Remove all elements from Lary
void atf_comp::comptest_RemoveAll() {
    for (u64 n = _db.comptest_n; n>0; ) {
        n--;
        comptest_qFind(u64(n)).~FComptest(); // destroy last element
        _db.comptest_n = i32(n);
    }
}

// --- atf_comp.FDb.comptest.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_comp::comptest_RemoveLast() {
    u64 n = _db.comptest_n;
    if (n > 0) {
        n -= 1;
        comptest_qFind(u64(n)).~FComptest();
        _db.comptest_n = i32(n);
    }
}

// --- atf_comp.FDb.comptest.InputMaybe
static bool atf_comp::comptest_InputMaybe(atfdb::Comptest &elem) {
    bool retval = true;
    retval = comptest_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_comp.FDb.comptest.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_comp::comptest_XrefMaybe(atf_comp::FComptest &row) {
    bool retval = true;
    (void)row;
    // insert comptest into index ind_comptest
    if (true) { // user-defined insert condition
        bool success = ind_comptest_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_comp.duplicate_key  xref:atf_comp.FDb.ind_comptest"; // check for duplicate key
            return false;
        }
    }
    // insert comptest into index zd_out_comptest
    if (true) { // user-defined insert condition
        zd_out_comptest_Insert(row);
    }
    return retval;
}

// --- atf_comp.FDb.ind_comptest.Find
// Find row by key. Return NULL if not found.
atf_comp::FComptest* atf_comp::ind_comptest_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_comptest_buckets_n - 1);
    atf_comp::FComptest* *e = &_db.ind_comptest_buckets_elems[index];
    atf_comp::FComptest* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).comptest == key;
        if (done) break;
        e         = &ret->ind_comptest_next;
    } while (true);
    return ret;
}

// --- atf_comp.FDb.ind_comptest.FindX
// Look up row by key and return reference. Throw exception if not found
atf_comp::FComptest& atf_comp::ind_comptest_FindX(const algo::strptr& key) {
    atf_comp::FComptest* ret = ind_comptest_Find(key);
    vrfy(ret, tempstr() << "atf_comp.key_error  table:ind_comptest  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_comp.FDb.ind_comptest.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_comp::FComptest& atf_comp::ind_comptest_GetOrCreate(const algo::strptr& key) {
    atf_comp::FComptest* ret = ind_comptest_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &comptest_Alloc();
        (*ret).comptest = key;
        bool good = comptest_XrefMaybe(*ret);
        if (!good) {
            comptest_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_comp.create_error  table:ind_comptest  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_comp.FDb.ind_comptest.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_comp::ind_comptest_InsertMaybe(atf_comp::FComptest& row) {
    ind_comptest_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_comptest_next == (atf_comp::FComptest*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.comptest) & (_db.ind_comptest_buckets_n - 1);
        atf_comp::FComptest* *prev = &_db.ind_comptest_buckets_elems[index];
        do {
            atf_comp::FComptest* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).comptest == row.comptest) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_comptest_next;
        } while (true);
        if (retval) {
            row.ind_comptest_next = *prev;
            _db.ind_comptest_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_comp.FDb.ind_comptest.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_comp::ind_comptest_Remove(atf_comp::FComptest& row) {
    if (LIKELY(row.ind_comptest_next != (atf_comp::FComptest*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.comptest) & (_db.ind_comptest_buckets_n - 1);
        atf_comp::FComptest* *prev = &_db.ind_comptest_buckets_elems[index]; // addr of pointer to current element
        while (atf_comp::FComptest *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_comptest_next; // unlink (singly linked list)
                _db.ind_comptest_n--;
                row.ind_comptest_next = (atf_comp::FComptest*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_comptest_next;
        }
    }
}

// --- atf_comp.FDb.ind_comptest.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_comp::ind_comptest_Reserve(int n) {
    u32 old_nbuckets = _db.ind_comptest_buckets_n;
    u32 new_nelems   = _db.ind_comptest_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_comp::FComptest*);
        u32 new_size = new_nbuckets * sizeof(atf_comp::FComptest*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_comp::FComptest* *new_buckets = (atf_comp::FComptest**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_comp.out_of_memory  field:atf_comp.FDb.ind_comptest");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_comptest_buckets_n; i++) {
            atf_comp::FComptest* elem = _db.ind_comptest_buckets_elems[i];
            while (elem) {
                atf_comp::FComptest &row        = *elem;
                atf_comp::FComptest* next       = row.ind_comptest_next;
                u32 index          = algo::Smallstr50_Hash(0, row.comptest) & (new_nbuckets-1);
                row.ind_comptest_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_comptest_buckets_elems, old_size);
        _db.ind_comptest_buckets_elems = new_buckets;
        _db.ind_comptest_buckets_n = new_nbuckets;
    }
}

// --- atf_comp.FDb.zd_sel_comptest.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_sel_comptest_Insert(atf_comp::FComptest& row) {
    if (!zd_sel_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_tail = _db.zd_sel_comptest_tail;
        row.zd_sel_comptest_next = NULL;
        row.zd_sel_comptest_prev = old_tail;
        _db.zd_sel_comptest_tail = &row;
        atf_comp::FComptest **new_row_a = &old_tail->zd_sel_comptest_next;
        atf_comp::FComptest **new_row_b = &_db.zd_sel_comptest_head;
        atf_comp::FComptest **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_sel_comptest_n++;
        if (_db.zd_sel_comptest_head == &row) {
            zd_sel_comptest_FirstChanged();
        }
    }
}

// --- atf_comp.FDb.zd_sel_comptest.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_sel_comptest_Remove(atf_comp::FComptest& row) {
    if (zd_sel_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_head       = _db.zd_sel_comptest_head;
        (void)old_head; // in case it's not used
        atf_comp::FComptest* prev = row.zd_sel_comptest_prev;
        atf_comp::FComptest* next = row.zd_sel_comptest_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FComptest **new_next_a = &prev->zd_sel_comptest_next;
        atf_comp::FComptest **new_next_b = &_db.zd_sel_comptest_head;
        atf_comp::FComptest **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FComptest **new_prev_a = &next->zd_sel_comptest_prev;
        atf_comp::FComptest **new_prev_b = &_db.zd_sel_comptest_tail;
        atf_comp::FComptest **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_sel_comptest_n--;
        row.zd_sel_comptest_next=(atf_comp::FComptest*)-1; // not-in-list
        if (old_head != _db.zd_sel_comptest_head) {
            zd_sel_comptest_FirstChanged();
        }
    }
}

// --- atf_comp.FDb.zd_sel_comptest.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_sel_comptest_RemoveAll() {
    atf_comp::FComptest* row = _db.zd_sel_comptest_head;
    _db.zd_sel_comptest_head = NULL;
    _db.zd_sel_comptest_tail = NULL;
    _db.zd_sel_comptest_n = 0;
    bool do_fire = (NULL != row);
    while (row) {
        atf_comp::FComptest* row_next = row->zd_sel_comptest_next;
        row->zd_sel_comptest_next  = (atf_comp::FComptest*)-1;
        row->zd_sel_comptest_prev  = NULL;
        row = row_next;
    }
    if (do_fire) {
        zd_sel_comptest_FirstChanged();
    }
}

// --- atf_comp.FDb.zd_sel_comptest.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
atf_comp::FComptest* atf_comp::zd_sel_comptest_RemoveFirst() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_sel_comptest_head;
    if (row) {
        atf_comp::FComptest *next = row->zd_sel_comptest_next;
        _db.zd_sel_comptest_head = next;
        atf_comp::FComptest **new_end_a = &next->zd_sel_comptest_prev;
        atf_comp::FComptest **new_end_b = &_db.zd_sel_comptest_tail;
        atf_comp::FComptest **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_sel_comptest_n--;
        row->zd_sel_comptest_next = (atf_comp::FComptest*)-1; // mark as not-in-list
        zd_sel_comptest_FirstChanged();
    }
    return row;
}

// --- atf_comp.FDb.zd_sel_comptest.FirstChanged
// First element of index changed.
static void atf_comp::zd_sel_comptest_FirstChanged() {
}

// --- atf_comp.FDb.zd_sel_comptest.UpdateCycles
// Update cycles count from previous clock capture
inline static void atf_comp::zd_sel_comptest_UpdateCycles() {
    u64 cur_cycles                      = algo::get_cycles();
    algo_lib::_db.clock                 = algo::SchedTime(cur_cycles);
}

// --- atf_comp.FDb.zd_sel_comptest.Call
inline static void atf_comp::zd_sel_comptest_Call() {
    if (!atf_comp::zd_sel_comptest_EmptyQ()) { // fstep:atf_comp.FDb.zd_sel_comptest
        atf_comp::zd_sel_comptest_Step(); // steptype:Inline: call function on every step
        zd_sel_comptest_UpdateCycles();
        algo_lib::_db.next_loop = algo_lib::_db.clock;
    }
}

// --- atf_comp.FDb.targs.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_comp::FTargs& atf_comp::targs_Alloc() {
    atf_comp::FTargs* row = targs_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_comp.out_of_mem  field:atf_comp.FDb.targs  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_comp.FDb.targs.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_comp::FTargs* atf_comp::targs_AllocMaybe() {
    atf_comp::FTargs *row = (atf_comp::FTargs*)targs_AllocMem();
    if (row) {
        new (row) atf_comp::FTargs; // call constructor
    }
    return row;
}

// --- atf_comp.FDb.targs.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_comp::FTargs* atf_comp::targs_InsertMaybe(const atfdb::Targs &value) {
    atf_comp::FTargs *row = &targs_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targs_CopyIn(*row,const_cast<atfdb::Targs&>(value));
    bool ok = targs_XrefMaybe(*row); // this may return false
    if (!ok) {
        targs_Delete(*row); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_comp.FDb.targs.Delete
// Remove row from all global and cross indices, then deallocate row
void atf_comp::targs_Delete(atf_comp::FTargs &row) {
    row.~FTargs();
    targs_FreeMem(row);
}

// --- atf_comp.FDb.targs.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* atf_comp::targs_AllocMem() {
    atf_comp::FTargs *row = _db.targs_free;
    if (UNLIKELY(!row)) {
        targs_Reserve(1);
        row = _db.targs_free;
    }
    if (row) {
        _db.targs_free = row->targs_next;
    }
    return row;
}

// --- atf_comp.FDb.targs.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void atf_comp::targs_FreeMem(atf_comp::FTargs &row) {
    if (UNLIKELY(row.targs_next != (atf_comp::FTargs*)-1)) {
        FatalErrorExit("atf_comp.tpool_double_delete  pool:atf_comp.FDb.targs  comment:'double deletion caught'");
    }
    row.targs_next = _db.targs_free; // insert into free list
    _db.targs_free  = &row;
}

// --- atf_comp.FDb.targs.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 atf_comp::targs_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.targs_blocksize; // underlying allocator is probably Lpool
        u64 reserved = targs_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- atf_comp.FDb.targs.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 atf_comp::targs_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(atf_comp::FTargs)) {
        atf_comp::FTargs *mem = (atf_comp::FTargs*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(atf_comp::FTargs) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].targs_next = _db.targs_free;
            _db.targs_free = mem+i;
        }
    }
    return ret;
}

// --- atf_comp.FDb.targs.InputMaybe
static bool atf_comp::targs_InputMaybe(atfdb::Targs &elem) {
    bool retval = true;
    retval = targs_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_comp.FDb.targs.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_comp::targs_XrefMaybe(atf_comp::FTargs &row) {
    bool retval = true;
    (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(row.comptest);
    if (UNLIKELY(!p_comptest)) {
        algo_lib::ResetErrtext() << "atf_comp.bad_xref  index:atf_comp.FDb.ind_comptest" << Keyval("key", row.comptest);
        return false;
    }
    // insert targs into index c_targs
    if (true) { // user-defined insert condition
        bool success = c_targs_InsertMaybe(*p_comptest, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_comp.duplicate_key  xref:atf_comp.FComptest.c_targs"; // check for duplicate key
            return false;
        }
    }
    // insert targs into index zd_out_targs
    if (true) { // user-defined insert condition
        zd_out_targs_Insert(row);
    }
    return retval;
}

// --- atf_comp.FDb.tmsg.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_comp::FTmsg& atf_comp::tmsg_Alloc() {
    atf_comp::FTmsg* row = tmsg_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_comp.out_of_mem  field:atf_comp.FDb.tmsg  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_comp.FDb.tmsg.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_comp::FTmsg* atf_comp::tmsg_AllocMaybe() {
    atf_comp::FTmsg *row = (atf_comp::FTmsg*)tmsg_AllocMem();
    if (row) {
        new (row) atf_comp::FTmsg; // call constructor
    }
    return row;
}

// --- atf_comp.FDb.tmsg.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_comp::FTmsg* atf_comp::tmsg_InsertMaybe(const atfdb::Tmsg &value) {
    atf_comp::FTmsg *row = &tmsg_Alloc(); // if out of memory, process dies. if input error, return NULL.
    tmsg_CopyIn(*row,const_cast<atfdb::Tmsg&>(value));
    bool ok = tmsg_XrefMaybe(*row); // this may return false
    if (!ok) {
        tmsg_Delete(*row); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_comp.FDb.tmsg.Delete
// Remove row from all global and cross indices, then deallocate row
void atf_comp::tmsg_Delete(atf_comp::FTmsg &row) {
    row.~FTmsg();
    tmsg_FreeMem(row);
}

// --- atf_comp.FDb.tmsg.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* atf_comp::tmsg_AllocMem() {
    atf_comp::FTmsg *row = _db.tmsg_free;
    if (UNLIKELY(!row)) {
        tmsg_Reserve(1);
        row = _db.tmsg_free;
    }
    if (row) {
        _db.tmsg_free = row->tmsg_next;
    }
    return row;
}

// --- atf_comp.FDb.tmsg.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void atf_comp::tmsg_FreeMem(atf_comp::FTmsg &row) {
    if (UNLIKELY(row.tmsg_next != (atf_comp::FTmsg*)-1)) {
        FatalErrorExit("atf_comp.tpool_double_delete  pool:atf_comp.FDb.tmsg  comment:'double deletion caught'");
    }
    row.tmsg_next = _db.tmsg_free; // insert into free list
    _db.tmsg_free  = &row;
}

// --- atf_comp.FDb.tmsg.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 atf_comp::tmsg_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.tmsg_blocksize; // underlying allocator is probably Lpool
        u64 reserved = tmsg_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- atf_comp.FDb.tmsg.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 atf_comp::tmsg_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(atf_comp::FTmsg)) {
        atf_comp::FTmsg *mem = (atf_comp::FTmsg*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(atf_comp::FTmsg) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].tmsg_next = _db.tmsg_free;
            _db.tmsg_free = mem+i;
        }
    }
    return ret;
}

// --- atf_comp.FDb.tmsg.InputMaybe
static bool atf_comp::tmsg_InputMaybe(atfdb::Tmsg &elem) {
    bool retval = true;
    retval = tmsg_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_comp.FDb.tmsg.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_comp::tmsg_XrefMaybe(atf_comp::FTmsg &row) {
    bool retval = true;
    (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(comptest_Get(row));
    if (UNLIKELY(!p_comptest)) {
        algo_lib::ResetErrtext() << "atf_comp.bad_xref  index:atf_comp.FDb.ind_comptest" << Keyval("key", comptest_Get(row));
        return false;
    }
    // insert tmsg into index zd_tmsg
    if (true) { // user-defined insert condition
        zd_tmsg_Insert(*p_comptest, row);
    }
    // insert tmsg into index zd_out_tmsg
    if (true) { // user-defined insert condition
        zd_out_tmsg_Insert(row);
    }
    return retval;
}

// --- atf_comp.FDb.tfilt.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_comp::FTfilt& atf_comp::tfilt_Alloc() {
    atf_comp::FTfilt* row = tfilt_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_comp.out_of_mem  field:atf_comp.FDb.tfilt  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_comp.FDb.tfilt.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_comp::FTfilt* atf_comp::tfilt_AllocMaybe() {
    atf_comp::FTfilt *row = (atf_comp::FTfilt*)tfilt_AllocMem();
    if (row) {
        new (row) atf_comp::FTfilt; // call constructor
    }
    return row;
}

// --- atf_comp.FDb.tfilt.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_comp::FTfilt* atf_comp::tfilt_InsertMaybe(const atfdb::Tfilt &value) {
    atf_comp::FTfilt *row = &tfilt_Alloc(); // if out of memory, process dies. if input error, return NULL.
    tfilt_CopyIn(*row,const_cast<atfdb::Tfilt&>(value));
    bool ok = tfilt_XrefMaybe(*row); // this may return false
    if (!ok) {
        tfilt_Delete(*row); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_comp.FDb.tfilt.Delete
// Remove row from all global and cross indices, then deallocate row
void atf_comp::tfilt_Delete(atf_comp::FTfilt &row) {
    row.~FTfilt();
    tfilt_FreeMem(row);
}

// --- atf_comp.FDb.tfilt.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* atf_comp::tfilt_AllocMem() {
    atf_comp::FTfilt *row = _db.tfilt_free;
    if (UNLIKELY(!row)) {
        tfilt_Reserve(1);
        row = _db.tfilt_free;
    }
    if (row) {
        _db.tfilt_free = row->tfilt_next;
    }
    return row;
}

// --- atf_comp.FDb.tfilt.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void atf_comp::tfilt_FreeMem(atf_comp::FTfilt &row) {
    if (UNLIKELY(row.tfilt_next != (atf_comp::FTfilt*)-1)) {
        FatalErrorExit("atf_comp.tpool_double_delete  pool:atf_comp.FDb.tfilt  comment:'double deletion caught'");
    }
    row.tfilt_next = _db.tfilt_free; // insert into free list
    _db.tfilt_free  = &row;
}

// --- atf_comp.FDb.tfilt.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 atf_comp::tfilt_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.tfilt_blocksize; // underlying allocator is probably Lpool
        u64 reserved = tfilt_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- atf_comp.FDb.tfilt.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 atf_comp::tfilt_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(atf_comp::FTfilt)) {
        atf_comp::FTfilt *mem = (atf_comp::FTfilt*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(atf_comp::FTfilt) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].tfilt_next = _db.tfilt_free;
            _db.tfilt_free = mem+i;
        }
    }
    return ret;
}

// --- atf_comp.FDb.tfilt.InputMaybe
static bool atf_comp::tfilt_InputMaybe(atfdb::Tfilt &elem) {
    bool retval = true;
    retval = tfilt_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_comp.FDb.tfilt.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_comp::tfilt_XrefMaybe(atf_comp::FTfilt &row) {
    bool retval = true;
    (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(row.comptest);
    if (UNLIKELY(!p_comptest)) {
        algo_lib::ResetErrtext() << "atf_comp.bad_xref  index:atf_comp.FDb.ind_comptest" << Keyval("key", row.comptest);
        return false;
    }
    // insert tfilt into index c_tfilt
    if (true) { // user-defined insert condition
        bool success = c_tfilt_InsertMaybe(*p_comptest, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_comp.duplicate_key  xref:atf_comp.FComptest.c_tfilt"; // check for duplicate key
            return false;
        }
    }
    // insert tfilt into index zd_out_tfilt
    if (true) { // user-defined insert condition
        zd_out_tfilt_Insert(row);
    }
    return retval;
}

// --- atf_comp.FDb.zd_run_comptest.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_run_comptest_Insert(atf_comp::FComptest& row) {
    if (!zd_run_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_tail = _db.zd_run_comptest_tail;
        row.zd_run_comptest_next = NULL;
        row.zd_run_comptest_prev = old_tail;
        _db.zd_run_comptest_tail = &row;
        atf_comp::FComptest **new_row_a = &old_tail->zd_run_comptest_next;
        atf_comp::FComptest **new_row_b = &_db.zd_run_comptest_head;
        atf_comp::FComptest **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_run_comptest_n++;
        if (_db.zd_run_comptest_head == &row) {
            zd_run_comptest_FirstChanged();
        }
    }
}

// --- atf_comp.FDb.zd_run_comptest.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_run_comptest_Remove(atf_comp::FComptest& row) {
    if (zd_run_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_head       = _db.zd_run_comptest_head;
        (void)old_head; // in case it's not used
        atf_comp::FComptest* prev = row.zd_run_comptest_prev;
        atf_comp::FComptest* next = row.zd_run_comptest_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FComptest **new_next_a = &prev->zd_run_comptest_next;
        atf_comp::FComptest **new_next_b = &_db.zd_run_comptest_head;
        atf_comp::FComptest **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FComptest **new_prev_a = &next->zd_run_comptest_prev;
        atf_comp::FComptest **new_prev_b = &_db.zd_run_comptest_tail;
        atf_comp::FComptest **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_run_comptest_n--;
        row.zd_run_comptest_next=(atf_comp::FComptest*)-1; // not-in-list
        if (old_head != _db.zd_run_comptest_head) {
            zd_run_comptest_FirstChanged();
        }
    }
}

// --- atf_comp.FDb.zd_run_comptest.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_run_comptest_RemoveAll() {
    atf_comp::FComptest* row = _db.zd_run_comptest_head;
    _db.zd_run_comptest_head = NULL;
    _db.zd_run_comptest_tail = NULL;
    _db.zd_run_comptest_n = 0;
    bool do_fire = (NULL != row);
    while (row) {
        atf_comp::FComptest* row_next = row->zd_run_comptest_next;
        row->zd_run_comptest_next  = (atf_comp::FComptest*)-1;
        row->zd_run_comptest_prev  = NULL;
        row = row_next;
    }
    if (do_fire) {
        zd_run_comptest_FirstChanged();
    }
}

// --- atf_comp.FDb.zd_run_comptest.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
atf_comp::FComptest* atf_comp::zd_run_comptest_RemoveFirst() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_run_comptest_head;
    if (row) {
        atf_comp::FComptest *next = row->zd_run_comptest_next;
        _db.zd_run_comptest_head = next;
        atf_comp::FComptest **new_end_a = &next->zd_run_comptest_prev;
        atf_comp::FComptest **new_end_b = &_db.zd_run_comptest_tail;
        atf_comp::FComptest **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_run_comptest_n--;
        row->zd_run_comptest_next = (atf_comp::FComptest*)-1; // mark as not-in-list
        zd_run_comptest_FirstChanged();
    }
    return row;
}

// --- atf_comp.FDb.zd_run_comptest.FirstChanged
// First element of index changed.
void atf_comp::zd_run_comptest_FirstChanged() {
}

// --- atf_comp.FDb.zd_run_comptest.UpdateCycles
// Update cycles count from previous clock capture
inline static void atf_comp::zd_run_comptest_UpdateCycles() {
    u64 cur_cycles                      = algo::get_cycles();
    algo_lib::_db.clock                 = algo::SchedTime(cur_cycles);
}

// --- atf_comp.FDb.zd_run_comptest.Call
inline static void atf_comp::zd_run_comptest_Call() {
    if (!atf_comp::zd_run_comptest_EmptyQ()) { // fstep:atf_comp.FDb.zd_run_comptest
        if (atf_comp::_db.zd_run_comptest_next < algo_lib::_db.clock) {
            atf_comp::_db.zd_run_comptest_next = algo_lib::_db.clock + atf_comp::_db.zd_run_comptest_delay;
            atf_comp::zd_run_comptest_Step(); // steptype:InlineRecur: call function every N clock cycles
            zd_run_comptest_UpdateCycles();
        }
        algo_lib::_db.next_loop.value = u64_Min(atf_comp::_db.zd_run_comptest_next, algo_lib::_db.next_loop);
    }
}

// --- atf_comp.FDb.zd_run_comptest.SetDelay
// Set inter-step delay to specified value.
// The difference between new delay and current delay is added to the next scheduled time.
void atf_comp::zd_run_comptest_SetDelay(algo::SchedTime delay) {
    i64 diff = delay.value - atf_comp::_db.zd_run_comptest_delay.value;
    atf_comp::_db.zd_run_comptest_delay = delay;
    if (diff > 0) {
        atf_comp::_db.zd_run_comptest_next.value += diff;
    } else {
        atf_comp::_db.zd_run_comptest_next.value = algo::u64_SubClip(atf_comp::_db.zd_run_comptest_next.value,-diff);
    }
}

// --- atf_comp.FDb.zd_out_tmsg.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_out_tmsg_Insert(atf_comp::FTmsg& row) {
    if (!zd_out_tmsg_InLlistQ(row)) {
        atf_comp::FTmsg* old_tail = _db.zd_out_tmsg_tail;
        row.zd_out_tmsg_next = NULL;
        row.zd_out_tmsg_prev = old_tail;
        _db.zd_out_tmsg_tail = &row;
        atf_comp::FTmsg **new_row_a = &old_tail->zd_out_tmsg_next;
        atf_comp::FTmsg **new_row_b = &_db.zd_out_tmsg_head;
        atf_comp::FTmsg **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_out_tmsg_n++;
    }
}

// --- atf_comp.FDb.zd_out_tmsg.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_out_tmsg_Remove(atf_comp::FTmsg& row) {
    if (zd_out_tmsg_InLlistQ(row)) {
        atf_comp::FTmsg* old_head       = _db.zd_out_tmsg_head;
        (void)old_head; // in case it's not used
        atf_comp::FTmsg* prev = row.zd_out_tmsg_prev;
        atf_comp::FTmsg* next = row.zd_out_tmsg_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FTmsg **new_next_a = &prev->zd_out_tmsg_next;
        atf_comp::FTmsg **new_next_b = &_db.zd_out_tmsg_head;
        atf_comp::FTmsg **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FTmsg **new_prev_a = &next->zd_out_tmsg_prev;
        atf_comp::FTmsg **new_prev_b = &_db.zd_out_tmsg_tail;
        atf_comp::FTmsg **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_out_tmsg_n--;
        row.zd_out_tmsg_next=(atf_comp::FTmsg*)-1; // not-in-list
    }
}

// --- atf_comp.FDb.zd_out_tmsg.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_out_tmsg_RemoveAll() {
    atf_comp::FTmsg* row = _db.zd_out_tmsg_head;
    _db.zd_out_tmsg_head = NULL;
    _db.zd_out_tmsg_tail = NULL;
    _db.zd_out_tmsg_n = 0;
    while (row) {
        atf_comp::FTmsg* row_next = row->zd_out_tmsg_next;
        row->zd_out_tmsg_next  = (atf_comp::FTmsg*)-1;
        row->zd_out_tmsg_prev  = NULL;
        row = row_next;
    }
}

// --- atf_comp.FDb.zd_out_tmsg.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
atf_comp::FTmsg* atf_comp::zd_out_tmsg_RemoveFirst() {
    atf_comp::FTmsg *row = NULL;
    row = _db.zd_out_tmsg_head;
    if (row) {
        atf_comp::FTmsg *next = row->zd_out_tmsg_next;
        _db.zd_out_tmsg_head = next;
        atf_comp::FTmsg **new_end_a = &next->zd_out_tmsg_prev;
        atf_comp::FTmsg **new_end_b = &_db.zd_out_tmsg_tail;
        atf_comp::FTmsg **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_out_tmsg_n--;
        row->zd_out_tmsg_next = (atf_comp::FTmsg*)-1; // mark as not-in-list
    }
    return row;
}

// --- atf_comp.FDb.zd_out_tmsg.SaveSsimfile
// Save table to ssimfile
bool atf_comp::zd_out_tmsg_SaveSsimfile(algo::strptr fname) {
    cstring text;
    ind_beg(atf_comp::_db_zd_out_tmsg_curs, zd_out_tmsg, atf_comp::_db) {
        atfdb::Tmsg out;
        tmsg_CopyOut(zd_out_tmsg, out);
        atfdb::Tmsg_Print(out, text);
        text << eol;
    }ind_end;
    (void)algo::CreateDirRecurse(algo::GetDirName(fname));
    // it is a silent error if the file cannot be saved.
    return algo::SafeStringToFile(text, fname);
}

// --- atf_comp.FDb.zd_out_comptest.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_out_comptest_Insert(atf_comp::FComptest& row) {
    if (!zd_out_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_tail = _db.zd_out_comptest_tail;
        row.zd_out_comptest_next = NULL;
        row.zd_out_comptest_prev = old_tail;
        _db.zd_out_comptest_tail = &row;
        atf_comp::FComptest **new_row_a = &old_tail->zd_out_comptest_next;
        atf_comp::FComptest **new_row_b = &_db.zd_out_comptest_head;
        atf_comp::FComptest **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_out_comptest_n++;
    }
}

// --- atf_comp.FDb.zd_out_comptest.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_out_comptest_Remove(atf_comp::FComptest& row) {
    if (zd_out_comptest_InLlistQ(row)) {
        atf_comp::FComptest* old_head       = _db.zd_out_comptest_head;
        (void)old_head; // in case it's not used
        atf_comp::FComptest* prev = row.zd_out_comptest_prev;
        atf_comp::FComptest* next = row.zd_out_comptest_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FComptest **new_next_a = &prev->zd_out_comptest_next;
        atf_comp::FComptest **new_next_b = &_db.zd_out_comptest_head;
        atf_comp::FComptest **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FComptest **new_prev_a = &next->zd_out_comptest_prev;
        atf_comp::FComptest **new_prev_b = &_db.zd_out_comptest_tail;
        atf_comp::FComptest **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_out_comptest_n--;
        row.zd_out_comptest_next=(atf_comp::FComptest*)-1; // not-in-list
    }
}

// --- atf_comp.FDb.zd_out_comptest.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_out_comptest_RemoveAll() {
    atf_comp::FComptest* row = _db.zd_out_comptest_head;
    _db.zd_out_comptest_head = NULL;
    _db.zd_out_comptest_tail = NULL;
    _db.zd_out_comptest_n = 0;
    while (row) {
        atf_comp::FComptest* row_next = row->zd_out_comptest_next;
        row->zd_out_comptest_next  = (atf_comp::FComptest*)-1;
        row->zd_out_comptest_prev  = NULL;
        row = row_next;
    }
}

// --- atf_comp.FDb.zd_out_comptest.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
atf_comp::FComptest* atf_comp::zd_out_comptest_RemoveFirst() {
    atf_comp::FComptest *row = NULL;
    row = _db.zd_out_comptest_head;
    if (row) {
        atf_comp::FComptest *next = row->zd_out_comptest_next;
        _db.zd_out_comptest_head = next;
        atf_comp::FComptest **new_end_a = &next->zd_out_comptest_prev;
        atf_comp::FComptest **new_end_b = &_db.zd_out_comptest_tail;
        atf_comp::FComptest **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_out_comptest_n--;
        row->zd_out_comptest_next = (atf_comp::FComptest*)-1; // mark as not-in-list
    }
    return row;
}

// --- atf_comp.FDb.zd_out_comptest.SaveSsimfile
// Save table to ssimfile
bool atf_comp::zd_out_comptest_SaveSsimfile(algo::strptr fname) {
    cstring text;
    ind_beg(atf_comp::_db_zd_out_comptest_curs, zd_out_comptest, atf_comp::_db) {
        atfdb::Comptest out;
        comptest_CopyOut(zd_out_comptest, out);
        atfdb::Comptest_Print(out, text);
        text << eol;
    }ind_end;
    (void)algo::CreateDirRecurse(algo::GetDirName(fname));
    // it is a silent error if the file cannot be saved.
    return algo::SafeStringToFile(text, fname);
}

// --- atf_comp.FDb.zd_out_tfilt.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_out_tfilt_Insert(atf_comp::FTfilt& row) {
    if (!zd_out_tfilt_InLlistQ(row)) {
        atf_comp::FTfilt* old_tail = _db.zd_out_tfilt_tail;
        row.zd_out_tfilt_next = NULL;
        row.zd_out_tfilt_prev = old_tail;
        _db.zd_out_tfilt_tail = &row;
        atf_comp::FTfilt **new_row_a = &old_tail->zd_out_tfilt_next;
        atf_comp::FTfilt **new_row_b = &_db.zd_out_tfilt_head;
        atf_comp::FTfilt **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_out_tfilt_n++;
    }
}

// --- atf_comp.FDb.zd_out_tfilt.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_out_tfilt_Remove(atf_comp::FTfilt& row) {
    if (zd_out_tfilt_InLlistQ(row)) {
        atf_comp::FTfilt* old_head       = _db.zd_out_tfilt_head;
        (void)old_head; // in case it's not used
        atf_comp::FTfilt* prev = row.zd_out_tfilt_prev;
        atf_comp::FTfilt* next = row.zd_out_tfilt_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FTfilt **new_next_a = &prev->zd_out_tfilt_next;
        atf_comp::FTfilt **new_next_b = &_db.zd_out_tfilt_head;
        atf_comp::FTfilt **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FTfilt **new_prev_a = &next->zd_out_tfilt_prev;
        atf_comp::FTfilt **new_prev_b = &_db.zd_out_tfilt_tail;
        atf_comp::FTfilt **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_out_tfilt_n--;
        row.zd_out_tfilt_next=(atf_comp::FTfilt*)-1; // not-in-list
    }
}

// --- atf_comp.FDb.zd_out_tfilt.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_out_tfilt_RemoveAll() {
    atf_comp::FTfilt* row = _db.zd_out_tfilt_head;
    _db.zd_out_tfilt_head = NULL;
    _db.zd_out_tfilt_tail = NULL;
    _db.zd_out_tfilt_n = 0;
    while (row) {
        atf_comp::FTfilt* row_next = row->zd_out_tfilt_next;
        row->zd_out_tfilt_next  = (atf_comp::FTfilt*)-1;
        row->zd_out_tfilt_prev  = NULL;
        row = row_next;
    }
}

// --- atf_comp.FDb.zd_out_tfilt.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
atf_comp::FTfilt* atf_comp::zd_out_tfilt_RemoveFirst() {
    atf_comp::FTfilt *row = NULL;
    row = _db.zd_out_tfilt_head;
    if (row) {
        atf_comp::FTfilt *next = row->zd_out_tfilt_next;
        _db.zd_out_tfilt_head = next;
        atf_comp::FTfilt **new_end_a = &next->zd_out_tfilt_prev;
        atf_comp::FTfilt **new_end_b = &_db.zd_out_tfilt_tail;
        atf_comp::FTfilt **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_out_tfilt_n--;
        row->zd_out_tfilt_next = (atf_comp::FTfilt*)-1; // mark as not-in-list
    }
    return row;
}

// --- atf_comp.FDb.zd_out_tfilt.SaveSsimfile
// Save table to ssimfile
bool atf_comp::zd_out_tfilt_SaveSsimfile(algo::strptr fname) {
    cstring text;
    ind_beg(atf_comp::_db_zd_out_tfilt_curs, zd_out_tfilt, atf_comp::_db) {
        atfdb::Tfilt out;
        tfilt_CopyOut(zd_out_tfilt, out);
        atfdb::Tfilt_Print(out, text);
        text << eol;
    }ind_end;
    (void)algo::CreateDirRecurse(algo::GetDirName(fname));
    // it is a silent error if the file cannot be saved.
    return algo::SafeStringToFile(text, fname);
}

// --- atf_comp.FDb.zd_out_targs.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void atf_comp::zd_out_targs_Insert(atf_comp::FTargs& row) {
    if (!zd_out_targs_InLlistQ(row)) {
        atf_comp::FTargs* old_tail = _db.zd_out_targs_tail;
        row.zd_out_targs_next = NULL;
        row.zd_out_targs_prev = old_tail;
        _db.zd_out_targs_tail = &row;
        atf_comp::FTargs **new_row_a = &old_tail->zd_out_targs_next;
        atf_comp::FTargs **new_row_b = &_db.zd_out_targs_head;
        atf_comp::FTargs **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        _db.zd_out_targs_n++;
    }
}

// --- atf_comp.FDb.zd_out_targs.Remove
// Remove element from index. If element is not in index, do nothing.
void atf_comp::zd_out_targs_Remove(atf_comp::FTargs& row) {
    if (zd_out_targs_InLlistQ(row)) {
        atf_comp::FTargs* old_head       = _db.zd_out_targs_head;
        (void)old_head; // in case it's not used
        atf_comp::FTargs* prev = row.zd_out_targs_prev;
        atf_comp::FTargs* next = row.zd_out_targs_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        atf_comp::FTargs **new_next_a = &prev->zd_out_targs_next;
        atf_comp::FTargs **new_next_b = &_db.zd_out_targs_head;
        atf_comp::FTargs **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        atf_comp::FTargs **new_prev_a = &next->zd_out_targs_prev;
        atf_comp::FTargs **new_prev_b = &_db.zd_out_targs_tail;
        atf_comp::FTargs **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        _db.zd_out_targs_n--;
        row.zd_out_targs_next=(atf_comp::FTargs*)-1; // not-in-list
    }
}

// --- atf_comp.FDb.zd_out_targs.RemoveAll
// Empty the index. (The rows are not deleted)
void atf_comp::zd_out_targs_RemoveAll() {
    atf_comp::FTargs* row = _db.zd_out_targs_head;
    _db.zd_out_targs_head = NULL;
    _db.zd_out_targs_tail = NULL;
    _db.zd_out_targs_n = 0;
    while (row) {
        atf_comp::FTargs* row_next = row->zd_out_targs_next;
        row->zd_out_targs_next  = (atf_comp::FTargs*)-1;
        row->zd_out_targs_prev  = NULL;
        row = row_next;
    }
}

// --- atf_comp.FDb.zd_out_targs.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
atf_comp::FTargs* atf_comp::zd_out_targs_RemoveFirst() {
    atf_comp::FTargs *row = NULL;
    row = _db.zd_out_targs_head;
    if (row) {
        atf_comp::FTargs *next = row->zd_out_targs_next;
        _db.zd_out_targs_head = next;
        atf_comp::FTargs **new_end_a = &next->zd_out_targs_prev;
        atf_comp::FTargs **new_end_b = &_db.zd_out_targs_tail;
        atf_comp::FTargs **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        _db.zd_out_targs_n--;
        row->zd_out_targs_next = (atf_comp::FTargs*)-1; // mark as not-in-list
    }
    return row;
}

// --- atf_comp.FDb.zd_out_targs.SaveSsimfile
// Save table to ssimfile
bool atf_comp::zd_out_targs_SaveSsimfile(algo::strptr fname) {
    cstring text;
    ind_beg(atf_comp::_db_zd_out_targs_curs, zd_out_targs, atf_comp::_db) {
        atfdb::Targs out;
        targs_CopyOut(zd_out_targs, out);
        atfdb::Targs_Print(out, text);
        text << eol;
    }ind_end;
    (void)algo::CreateDirRecurse(algo::GetDirName(fname));
    // it is a silent error if the file cannot be saved.
    return algo::SafeStringToFile(text, fname);
}

// --- atf_comp.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr atf_comp::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- atf_comp.FDb.trace.N
// Function return 1
inline static i32 atf_comp::trace_N() {
    return 1;
}

// --- atf_comp.FDb..Init
// Set all fields to initial values.
void atf_comp::FDb_Init() {
    _db.tempdir = algo::strptr("temp/atf_comp");
    // initialize LAry comptest (atf_comp.FDb.comptest)
    _db.comptest_n = 0;
    memset(_db.comptest_lary, 0, sizeof(_db.comptest_lary)); // zero out all level pointers
    atf_comp::FComptest* comptest_first = (atf_comp::FComptest*)algo_lib::malloc_AllocMem(sizeof(atf_comp::FComptest) * (u64(1)<<4));
    if (!comptest_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.comptest_lary[i]  = comptest_first;
        comptest_first    += 1ULL<<i;
    }
    // initialize hash table for atf_comp::FComptest;
    _db.ind_comptest_n             	= 0; // (atf_comp.FDb.ind_comptest)
    _db.ind_comptest_buckets_n     	= 4; // (atf_comp.FDb.ind_comptest)
    _db.ind_comptest_buckets_elems 	= (atf_comp::FComptest**)algo_lib::malloc_AllocMem(sizeof(atf_comp::FComptest*)*_db.ind_comptest_buckets_n); // initial buckets (atf_comp.FDb.ind_comptest)
    if (!_db.ind_comptest_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_comp.FDb.ind_comptest)
    }
    memset(_db.ind_comptest_buckets_elems, 0, sizeof(atf_comp::FComptest*)*_db.ind_comptest_buckets_n); // (atf_comp.FDb.ind_comptest)
    _db.zd_sel_comptest_head = NULL; // (atf_comp.FDb.zd_sel_comptest)
    _db.zd_sel_comptest_n = 0; // (atf_comp.FDb.zd_sel_comptest)
    _db.zd_sel_comptest_tail = NULL; // (atf_comp.FDb.zd_sel_comptest)
    // targs: initialize Tpool
    _db.targs_free      = NULL;
    _db.targs_blocksize = algo::BumpToPow2(64 * sizeof(atf_comp::FTargs)); // allocate 64-127 elements at a time
    // tmsg: initialize Tpool
    _db.tmsg_free      = NULL;
    _db.tmsg_blocksize = algo::BumpToPow2(64 * sizeof(atf_comp::FTmsg)); // allocate 64-127 elements at a time
    // tfilt: initialize Tpool
    _db.tfilt_free      = NULL;
    _db.tfilt_blocksize = algo::BumpToPow2(64 * sizeof(atf_comp::FTfilt)); // allocate 64-127 elements at a time
    _db.zd_run_comptest_head = NULL; // (atf_comp.FDb.zd_run_comptest)
    _db.zd_run_comptest_n = 0; // (atf_comp.FDb.zd_run_comptest)
    _db.zd_run_comptest_tail = NULL; // (atf_comp.FDb.zd_run_comptest)
    _db.zd_out_tmsg_head = NULL; // (atf_comp.FDb.zd_out_tmsg)
    _db.zd_out_tmsg_n = 0; // (atf_comp.FDb.zd_out_tmsg)
    _db.zd_out_tmsg_tail = NULL; // (atf_comp.FDb.zd_out_tmsg)
    _db.zd_out_comptest_head = NULL; // (atf_comp.FDb.zd_out_comptest)
    _db.zd_out_comptest_n = 0; // (atf_comp.FDb.zd_out_comptest)
    _db.zd_out_comptest_tail = NULL; // (atf_comp.FDb.zd_out_comptest)
    _db.nchange = i32(0);
    _db.zd_out_tfilt_head = NULL; // (atf_comp.FDb.zd_out_tfilt)
    _db.zd_out_tfilt_n = 0; // (atf_comp.FDb.zd_out_tfilt)
    _db.zd_out_tfilt_tail = NULL; // (atf_comp.FDb.zd_out_tfilt)
    _db.zd_out_targs_head = NULL; // (atf_comp.FDb.zd_out_targs)
    _db.zd_out_targs_n = 0; // (atf_comp.FDb.zd_out_targs)
    _db.zd_out_targs_tail = NULL; // (atf_comp.FDb.zd_out_targs)

    atf_comp::InitReflection();
}

// --- atf_comp.FDb..Uninit
void atf_comp::FDb_Uninit() {
    atf_comp::FDb &row = _db; (void)row;

    // atf_comp.FDb.ind_comptest.Uninit (Thash)  //
    // skip destruction of ind_comptest in global scope

    // atf_comp.FDb.comptest.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- atf_comp.FTargs.base.CopyOut
// Copy fields out of row
void atf_comp::targs_CopyOut(atf_comp::FTargs &row, atfdb::Targs &out) {
    out.comptest = row.comptest;
    out.args = row.args;
}

// --- atf_comp.FTargs.base.CopyIn
// Copy fields in to row
void atf_comp::targs_CopyIn(atf_comp::FTargs &row, atfdb::Targs &in) {
    row.comptest = in.comptest;
    row.args = in.args;
}

// --- atf_comp.FTargs..Uninit
void atf_comp::FTargs_Uninit(atf_comp::FTargs& targs) {
    atf_comp::FTargs &row = targs; (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(row.comptest);
    if (p_comptest)  {
        c_targs_Remove(*p_comptest, row);// remove targs from index c_targs
    }
    zd_out_targs_Remove(row); // remove targs from index zd_out_targs
}

// --- atf_comp.FTfilt.base.CopyOut
// Copy fields out of row
void atf_comp::tfilt_CopyOut(atf_comp::FTfilt &row, atfdb::Tfilt &out) {
    out.comptest = row.comptest;
    out.filter = row.filter;
    out.comment = row.comment;
}

// --- atf_comp.FTfilt.base.CopyIn
// Copy fields in to row
void atf_comp::tfilt_CopyIn(atf_comp::FTfilt &row, atfdb::Tfilt &in) {
    row.comptest = in.comptest;
    row.filter = in.filter;
    row.comment = in.comment;
}

// --- atf_comp.FTfilt..Uninit
void atf_comp::FTfilt_Uninit(atf_comp::FTfilt& tfilt) {
    atf_comp::FTfilt &row = tfilt; (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(row.comptest);
    if (p_comptest)  {
        c_tfilt_Remove(*p_comptest, row);// remove tfilt from index c_tfilt
    }
    zd_out_tfilt_Remove(row); // remove tfilt from index zd_out_tfilt
}

// --- atf_comp.FTmsg.base.CopyOut
// Copy fields out of row
void atf_comp::tmsg_CopyOut(atf_comp::FTmsg &row, atfdb::Tmsg &out) {
    out.tmsg = row.tmsg;
    out.istuple = row.istuple;
    out.msg = row.msg;
}

// --- atf_comp.FTmsg.base.CopyIn
// Copy fields in to row
void atf_comp::tmsg_CopyIn(atf_comp::FTmsg &row, atfdb::Tmsg &in) {
    row.tmsg = in.tmsg;
    row.istuple = in.istuple;
    row.msg = in.msg;
}

// --- atf_comp.FTmsg.comptest.Get
algo::Smallstr50 atf_comp::comptest_Get(atf_comp::FTmsg& tmsg) {
    algo::Smallstr50 ret(algo::Pathcomp(tmsg.tmsg, "/LL"));
    return ret;
}

// --- atf_comp.FTmsg.rank.Get
i32 atf_comp::rank_Get(atf_comp::FTmsg& tmsg) {
    i32 ret;
    ret = 0; // default value
    (void)i32_ReadStrptrMaybe(ret, algo::Pathcomp(tmsg.tmsg, "/LR.LL"));
    return ret;
}

// --- atf_comp.FTmsg.dir.Get
algo::Smallstr50 atf_comp::dir_Get(atf_comp::FTmsg& tmsg) {
    algo::Smallstr50 ret(algo::Pathcomp(tmsg.tmsg, "/LR.LR"));
    return ret;
}

// --- atf_comp.FTmsg..Uninit
void atf_comp::FTmsg_Uninit(atf_comp::FTmsg& tmsg) {
    atf_comp::FTmsg &row = tmsg; (void)row;
    atf_comp::FComptest* p_comptest = atf_comp::ind_comptest_Find(comptest_Get(row));
    if (p_comptest)  {
        zd_tmsg_Remove(*p_comptest, row);// remove tmsg from index zd_tmsg
    }
    zd_out_tmsg_Remove(row); // remove tmsg from index zd_out_tmsg
}

// --- atf_comp.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_comp::value_ToCstr(const atf_comp::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_comp_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- atf_comp.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_comp::value_Print(const atf_comp::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_comp.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_comp::value_SetStrptrMaybe(atf_comp::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,atf_comp_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_comp.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_comp::value_SetStrptr(atf_comp::FieldId& parent, algo::strptr rhs, atf_comp_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_comp.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_comp::value_ReadStrptrMaybe(atf_comp::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_comp.FieldId..ReadStrptrMaybe
// Read fields of atf_comp::FieldId from an ascii string.
// The format of the string is the format of the atf_comp::FieldId's only field
bool atf_comp::FieldId_ReadStrptrMaybe(atf_comp::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_comp.FieldId..Print
// print string representation of atf_comp::FieldId to string LHS, no header -- cprint:atf_comp.FieldId.String
void atf_comp::FieldId_Print(atf_comp::FieldId & row, algo::cstring &str) {
    atf_comp::value_Print(row, str);
}

// --- atf_comp.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_comp::value_ToCstr(const atf_comp::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_comp_TableId_atfdb_Comptest: ret = "atfdb.Comptest";  break;
        case atf_comp_TableId_atfdb_Targs  : ret = "atfdb.Targs";  break;
        case atf_comp_TableId_atfdb_Tfilt  : ret = "atfdb.Tfilt";  break;
        case atf_comp_TableId_atfdb_Tmsg   : ret = "atfdb.Tmsg";  break;
    }
    return ret;
}

// --- atf_comp.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_comp::value_Print(const atf_comp::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_comp.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_comp::value_SetStrptrMaybe(atf_comp::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('a','t','f','d','b','.','T','m'): {
                    if (memcmp(rhs.elems+8,"sg",2)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_Tmsg); ret = true; break; }
                    break;
                }
                case LE_STR8('a','t','f','d','b','.','t','m'): {
                    if (memcmp(rhs.elems+8,"sg",2)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_tmsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('a','t','f','d','b','.','T','a'): {
                    if (memcmp(rhs.elems+8,"rgs",3)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_Targs); ret = true; break; }
                    break;
                }
                case LE_STR8('a','t','f','d','b','.','T','f'): {
                    if (memcmp(rhs.elems+8,"ilt",3)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_Tfilt); ret = true; break; }
                    break;
                }
                case LE_STR8('a','t','f','d','b','.','t','a'): {
                    if (memcmp(rhs.elems+8,"rgs",3)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_targs); ret = true; break; }
                    break;
                }
                case LE_STR8('a','t','f','d','b','.','t','f'): {
                    if (memcmp(rhs.elems+8,"ilt",3)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_tfilt); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('a','t','f','d','b','.','C','o'): {
                    if (memcmp(rhs.elems+8,"mptest",6)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_Comptest); ret = true; break; }
                    break;
                }
                case LE_STR8('a','t','f','d','b','.','c','o'): {
                    if (memcmp(rhs.elems+8,"mptest",6)==0) { value_SetEnum(parent,atf_comp_TableId_atfdb_comptest); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_comp.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_comp::value_SetStrptr(atf_comp::TableId& parent, algo::strptr rhs, atf_comp_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_comp.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_comp::value_ReadStrptrMaybe(atf_comp::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_comp.TableId..ReadStrptrMaybe
// Read fields of atf_comp::TableId from an ascii string.
// The format of the string is the format of the atf_comp::TableId's only field
bool atf_comp::TableId_ReadStrptrMaybe(atf_comp::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_comp.TableId..Print
// print string representation of atf_comp::TableId to string LHS, no header -- cprint:atf_comp.TableId.String
void atf_comp::TableId_Print(atf_comp::TableId & row, algo::cstring &str) {
    atf_comp::value_Print(row, str);
}

// --- atf_comp...SizeCheck
inline static void atf_comp::SizeCheck() {
}

// --- atf_comp...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        lib_ctype::FDb_Init();
        atf_comp::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        atf_comp::ReadArgv(); // dmmeta.main:atf_comp
        atf_comp::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("atf_comp.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        atf_comp::FDb_Uninit();
        lib_ctype::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- atf_comp...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
