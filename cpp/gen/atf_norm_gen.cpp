//
// cpp/gen/atf_norm_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/atf_norm_gen.h"
#include "include/gen/atf_norm_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/atfdb_gen.h"
#include "include/gen/atfdb_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_git_gen.h"
#include "include/gen/lib_git_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
lib_git::FDb    lib_git::_db;     // dependency found via dev.targdep
atf_norm::FDb   atf_norm::_db;    // dependency found via dev.targdep

namespace atf_norm {
const char *atf_norm_help =
"atf_norm: Normalization tests (see normcheck table)\n"
"Usage: atf_norm [options]\n"
"    -in          string  Input directory or filename, - for stdin. default: \"data\"\n"
"    [normcheck]  string  Normalization checks to run. default: \"%\"\n"
"    -verbose             Enable verbose mode\n"
"    -debug               Enable debug mode\n"
"    -version             Show version information\n"
"    -sig                 Print SHA1 signatures for dispatches\n"
"    -help                Print this screen and exit\n"
;


const char *atf_norm_syntax =
"-in:string=\"data\"\n"
" [normcheck]:string=\"%\"\n"
;
} // namespace atf_norm
namespace atf_norm { // gsymbol:atf_norm/dev.scriptfile
    const char *dev_scriptfile_bin_update_gitfile = "bin/update-gitfile";
    const char *dev_scriptfile_bin_update_scriptfile = "bin/update-scriptfile";
}
namespace atf_norm {
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static void          normcheck_LoadStatic() __attribute__((nothrow));
    static bool          ssimfile_InputMaybe(dmmeta::Ssimfile &elem) __attribute__((nothrow));
    static bool          scriptfile_InputMaybe(dev::Scriptfile &elem) __attribute__((nothrow));
    static bool          ns_InputMaybe(dmmeta::Ns &elem) __attribute__((nothrow));
    static bool          readme_InputMaybe(dev::Readme &elem) __attribute__((nothrow));
    static bool          builddir_InputMaybe(dev::Builddir &elem) __attribute__((nothrow));
    static bool          cfg_InputMaybe(dev::Cfg &elem) __attribute__((nothrow));
    static bool          gitfile_InputMaybe(dev::Gitfile &elem) __attribute__((nothrow));
    static bool          noindent_InputMaybe(dev::Noindent &elem) __attribute__((nothrow));
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // end namespace atf_norm

// --- atf_norm.FBuilddir.base.CopyOut
// Copy fields out of row
void atf_norm::builddir_CopyOut(atf_norm::FBuilddir &row, dev::Builddir &out) {
    out.builddir = row.builddir;
    out.comment = row.comment;
}

// --- atf_norm.FBuilddir.base.CopyIn
// Copy fields in to row
void atf_norm::builddir_CopyIn(atf_norm::FBuilddir &row, dev::Builddir &in) {
    row.builddir = in.builddir;
    row.comment = in.comment;
}

// --- atf_norm.FBuilddir.uname.Get
algo::Smallstr50 atf_norm::uname_Get(atf_norm::FBuilddir& builddir) {
    algo::Smallstr50 ret(algo::Pathcomp(builddir.builddir, ".LL-LL"));
    return ret;
}

// --- atf_norm.FBuilddir.compiler.Get
algo::Smallstr50 atf_norm::compiler_Get(atf_norm::FBuilddir& builddir) {
    algo::Smallstr50 ret(algo::Pathcomp(builddir.builddir, ".LL-LR"));
    return ret;
}

// --- atf_norm.FBuilddir.cfg.Get
algo::Smallstr50 atf_norm::cfg_Get(atf_norm::FBuilddir& builddir) {
    algo::Smallstr50 ret(algo::Pathcomp(builddir.builddir, ".LR-LL"));
    return ret;
}

// --- atf_norm.FBuilddir.arch.Get
algo::Smallstr50 atf_norm::arch_Get(atf_norm::FBuilddir& builddir) {
    algo::Smallstr50 ret(algo::Pathcomp(builddir.builddir, ".LR-LR"));
    return ret;
}

// --- atf_norm.FBuilddir..Uninit
void atf_norm::FBuilddir_Uninit(atf_norm::FBuilddir& builddir) {
    atf_norm::FBuilddir &row = builddir; (void)row;
    ind_builddir_Remove(row); // remove builddir from index ind_builddir
}

// --- atf_norm.FCfg.base.CopyOut
// Copy fields out of row
void atf_norm::cfg_CopyOut(atf_norm::FCfg &row, dev::Cfg &out) {
    out.cfg = row.cfg;
    out.suffix = row.suffix;
    out.comment = row.comment;
}

// --- atf_norm.FCfg.base.CopyIn
// Copy fields in to row
void atf_norm::cfg_CopyIn(atf_norm::FCfg &row, dev::Cfg &in) {
    row.cfg = in.cfg;
    row.suffix = in.suffix;
    row.comment = in.comment;
}

// --- atf_norm.trace..Print
// print string representation of atf_norm::trace to string LHS, no header -- cprint:atf_norm.trace.String
void atf_norm::trace_Print(atf_norm::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_norm.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- atf_norm.FDb._db.MainArgs
// Main function
void atf_norm::MainArgs(int argc, char **argv) {
    Argtuple argtuple;
    Argtuple_ReadArgv(argtuple, argc,argv,atf_norm_syntax, atf_norm_help);
    vrfy(atf_norm_ReadTupleMaybe(atf_norm::_db.cmdline, argtuple.tuple),"where:read_cmdline");
    vrfy(atf_norm::LoadTuplesMaybe(atf_norm::_db.cmdline.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
    atf_norm::Main(); // call through to user-defined main
}

// --- atf_norm.FDb._db.MainLoop
// Main loop.
void atf_norm::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        algo_lib::Step(); // dependent namespace specified via (dev.targdep)
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- atf_norm.FDb._db.Step
// Main step
void atf_norm::Step() {
}

// --- atf_norm.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void atf_norm::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("atf_norm", atf_norm::InsertStrptrMaybe, NULL, atf_norm::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "atf_norm.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(atf_norm::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)atf_norm::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'atf_norm.Input'  signature:'3c2fccbb207224c170fcfd01c0692912424c20aa'");
}

// --- atf_norm.FDb._db.StaticCheck
void atf_norm::StaticCheck() {
    algo_assert(sizeof(atf_norm::normcheck_step_hook) == 8); // csize:atf_norm.normcheck_step_hook
    algo_assert(_offset_of(atf_norm::FieldId, value) + sizeof(((atf_norm::FieldId*)0)->value) == sizeof(atf_norm::FieldId));
}

// --- atf_norm.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool atf_norm::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    atf_norm::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case atf_norm_TableId_dmmeta_Ssimfile: { // finput:atf_norm.FDb.ssimfile
            dmmeta::Ssimfile elem;
            retval = dmmeta::Ssimfile_ReadStrptrMaybe(elem, str);
            retval = retval && ssimfile_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Scriptfile: { // finput:atf_norm.FDb.scriptfile
            dev::Scriptfile elem;
            retval = dev::Scriptfile_ReadStrptrMaybe(elem, str);
            retval = retval && scriptfile_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dmmeta_Ns: { // finput:atf_norm.FDb.ns
            dmmeta::Ns elem;
            retval = dmmeta::Ns_ReadStrptrMaybe(elem, str);
            retval = retval && ns_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Readme: { // finput:atf_norm.FDb.readme
            dev::Readme elem;
            retval = dev::Readme_ReadStrptrMaybe(elem, str);
            retval = retval && readme_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Builddir: { // finput:atf_norm.FDb.builddir
            dev::Builddir elem;
            retval = dev::Builddir_ReadStrptrMaybe(elem, str);
            retval = retval && builddir_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Cfg: { // finput:atf_norm.FDb.cfg
            dev::Cfg elem;
            retval = dev::Cfg_ReadStrptrMaybe(elem, str);
            retval = retval && cfg_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Gitfile: { // finput:atf_norm.FDb.gitfile
            dev::Gitfile elem;
            retval = dev::Gitfile_ReadStrptrMaybe(elem, str);
            retval = retval && gitfile_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Noindent: { // finput:atf_norm.FDb.noindent
            dev::Noindent elem;
            retval = dev::Noindent_ReadStrptrMaybe(elem, str);
            retval = retval && noindent_InputMaybe(elem);
            break;
        }
        case atf_norm_TableId_dev_Targsrc: { // finput:atf_norm.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- atf_norm.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool atf_norm::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "dev.builddir", "dev.cfg", "dev.gitfile", "dev.noindent"
        , "dmmeta.ns", "dev.readme", "dev.scriptfile", "dmmeta.ssimfile"
        , "dev.targsrc"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, atf_norm::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- atf_norm.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool atf_norm::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, atf_norm::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- atf_norm.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- atf_norm.FDb.normcheck.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FNormcheck& atf_norm::normcheck_Alloc() {
    atf_norm::FNormcheck* row = normcheck_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.normcheck  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.normcheck.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FNormcheck* atf_norm::normcheck_AllocMaybe() {
    atf_norm::FNormcheck *row = (atf_norm::FNormcheck*)normcheck_AllocMem();
    if (row) {
        new (row) atf_norm::FNormcheck; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.normcheck.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FNormcheck* atf_norm::normcheck_InsertMaybe(const atfdb::Normcheck &value) {
    atf_norm::FNormcheck *row = &normcheck_Alloc(); // if out of memory, process dies. if input error, return NULL.
    normcheck_CopyIn(*row,const_cast<atfdb::Normcheck&>(value));
    bool ok = normcheck_XrefMaybe(*row); // this may return false
    if (!ok) {
        normcheck_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.normcheck.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::normcheck_AllocMem() {
    u64 new_nelems     = _db.normcheck_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FNormcheck*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.normcheck_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FNormcheck*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNormcheck) * (u64(1)<<bsr));
            _db.normcheck_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.normcheck_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.normcheck.RemoveAll
// Remove all elements from Lary
void atf_norm::normcheck_RemoveAll() {
    for (u64 n = _db.normcheck_n; n>0; ) {
        n--;
        normcheck_qFind(u64(n)).~FNormcheck(); // destroy last element
        _db.normcheck_n = n;
    }
}

// --- atf_norm.FDb.normcheck.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::normcheck_RemoveLast() {
    u64 n = _db.normcheck_n;
    if (n > 0) {
        n -= 1;
        normcheck_qFind(u64(n)).~FNormcheck();
        _db.normcheck_n = n;
    }
}

// --- atf_norm.FDb.normcheck.LoadStatic
static void atf_norm::normcheck_LoadStatic() {
    static struct _t {
        const char *s;
        void (*step)();
    } data[] = {
        { "atfdb.normcheck  normcheck:checkclean  comment:\"Check that no files are modified\"", atf_norm::normcheck_checkclean }
        ,{ "atfdb.normcheck  normcheck:gitfile  comment:\"Update gitfile tables by scanning filesystem\"", atf_norm::normcheck_gitfile }
        ,{ "atfdb.normcheck  normcheck:normalize_acr  comment:\"Read ssim databases into memory and write back\"", atf_norm::normcheck_normalize_acr }
        ,{ "atfdb.normcheck  normcheck:src_lim  comment:\"Source code police\"", atf_norm::normcheck_src_lim }
        ,{ "atfdb.normcheck  normcheck:cppcheck  comment:\"Cppcheck static code analysis\"", atf_norm::normcheck_cppcheck }
        ,{ "atfdb.normcheck  normcheck:amc  comment:\"Run amc\"", atf_norm::normcheck_amc }
        ,{ "atfdb.normcheck  normcheck:bootstrap  comment:\"Re-generate bootstrap files\"", atf_norm::normcheck_bootstrap }
        ,{ "atfdb.normcheck  normcheck:shebang  comment:\"\"", atf_norm::normcheck_shebang }
        ,{ "atfdb.normcheck  normcheck:encoding  comment:\"Check Encoding of h/cpp files\"", atf_norm::normcheck_encoding }
        ,{ "atfdb.normcheck  normcheck:inline_readme  comment:\"Re-generate inline blocks for txt/*.md files\"", atf_norm::normcheck_inline_readme }
        ,{ "atfdb.normcheck  normcheck:readme  comment:\"Re-generate README.md table of contents\"", atf_norm::normcheck_readme }
        ,{ "atfdb.normcheck  normcheck:bintests  comment:\"Run bin/test-* scripts\"", atf_norm::normcheck_bintests }
        ,{ "atfdb.normcheck  normcheck:copyright  comment:\"Update copyrights in source files\"", atf_norm::normcheck_copyright }
        ,{ "atfdb.normcheck  normcheck:iffy_src  comment:\"Check for iffy source constructs with src_func\"", atf_norm::normcheck_iffy_src }
        ,{ "atfdb.normcheck  normcheck:stray_gen  comment:\"*/gen/* file that doesn't appear to be generated by amc\"", atf_norm::normcheck_stray_gen }
        ,{ "atfdb.normcheck  normcheck:tempcode  comment:\"Check for temp code inserted for testing only\"", atf_norm::normcheck_tempcode }
        ,{ "atfdb.normcheck  normcheck:lineendings  comment:\"Correct windows-style line endings in known text files\"", atf_norm::normcheck_lineendings }
        ,{ "atfdb.normcheck  normcheck:indent_srcfile  comment:\"Indent any source files modified in last commit\"", atf_norm::normcheck_indent_srcfile }
        ,{ "atfdb.normcheck  normcheck:indent_script  comment:\"Indent any bash script file\"", atf_norm::normcheck_indent_script }
        ,{ "atfdb.normcheck  normcheck:normalize_amc_vis  comment:\"Check that amc_vis doesn't see any circular dependencies\"", atf_norm::normcheck_normalize_amc_vis }
        ,{ "atfdb.normcheck  normcheck:ssimfile  comment:\"Check for .ssim files with no corresponding ssimfile entry\"", atf_norm::normcheck_ssimfile }
        ,{ "atfdb.normcheck  normcheck:normalize_acr_my  comment:\"Round trip ssim databases through MariaDB and back\"", atf_norm::normcheck_normalize_acr_my }
        ,{ "atfdb.normcheck  normcheck:atf_unit  comment:\"Run unit tests\"", atf_norm::normcheck_atf_unit }
        ,{ "atfdb.normcheck  normcheck:build_clang  comment:\"Build everything under clang\"", atf_norm::normcheck_build_clang }
        ,{ "atfdb.normcheck  normcheck:build_gcc9  comment:\"Build everything under g++-9\"", atf_norm::normcheck_build_gcc9 }
        ,{ "atfdb.normcheck  normcheck:acr_ed_ssimfile  comment:\"Create a new ssimfile\"", atf_norm::normcheck_acr_ed_ssimfile }
        ,{ "atfdb.normcheck  normcheck:acr_ed_ssimdb  comment:\"Create a new ssimdb\"", atf_norm::normcheck_acr_ed_ssimdb }
        ,{ "atfdb.normcheck  normcheck:acr_ed_target  comment:\"Takes a while - do it last\"", atf_norm::normcheck_acr_ed_target }
        ,{ "atfdb.normcheck  normcheck:atf_amc  comment:\"Test amc (run atf_amc)\"", atf_norm::normcheck_atf_amc }
        ,{NULL, NULL}
    };
    (void)data;
    atfdb::Normcheck normcheck;
    for (int i=0; data[i].s; i++) {
        (void)atfdb::Normcheck_ReadStrptrMaybe(normcheck, algo::strptr(data[i].s));
        atf_norm::FNormcheck *elem = normcheck_InsertMaybe(normcheck);
        vrfy(elem, tempstr("atf_norm.static_insert_fatal_error")
        << Keyval("tuple",algo::strptr(data[i].s))
        << Keyval("comment",algo_lib::DetachBadTags()));
        elem->step = data[i].step;
    }
}

// --- atf_norm.FDb.normcheck.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::normcheck_XrefMaybe(atf_norm::FNormcheck &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- atf_norm.FDb.ssimfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FSsimfile& atf_norm::ssimfile_Alloc() {
    atf_norm::FSsimfile* row = ssimfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.ssimfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.ssimfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FSsimfile* atf_norm::ssimfile_AllocMaybe() {
    atf_norm::FSsimfile *row = (atf_norm::FSsimfile*)ssimfile_AllocMem();
    if (row) {
        new (row) atf_norm::FSsimfile; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.ssimfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FSsimfile* atf_norm::ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) {
    atf_norm::FSsimfile *row = &ssimfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ssimfile_CopyIn(*row,const_cast<dmmeta::Ssimfile&>(value));
    bool ok = ssimfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        ssimfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.ssimfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::ssimfile_AllocMem() {
    u64 new_nelems     = _db.ssimfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FSsimfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ssimfile_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FSsimfile) * (u64(1)<<bsr));
            _db.ssimfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ssimfile_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.ssimfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::ssimfile_RemoveLast() {
    u64 n = _db.ssimfile_n;
    if (n > 0) {
        n -= 1;
        ssimfile_qFind(u64(n)).~FSsimfile();
        _db.ssimfile_n = n;
    }
}

// --- atf_norm.FDb.ssimfile.InputMaybe
static bool atf_norm::ssimfile_InputMaybe(dmmeta::Ssimfile &elem) {
    bool retval = true;
    retval = ssimfile_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.ssimfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::ssimfile_XrefMaybe(atf_norm::FSsimfile &row) {
    bool retval = true;
    (void)row;
    // insert ssimfile into index ind_ssimfile
    if (true) { // user-defined insert condition
        bool success = ind_ssimfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FDb.ind_ssimfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_ssimfile.Find
// Find row by key. Return NULL if not found.
atf_norm::FSsimfile* atf_norm::ind_ssimfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ssimfile_buckets_n - 1);
    atf_norm::FSsimfile* *e = &_db.ind_ssimfile_buckets_elems[index];
    atf_norm::FSsimfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ssimfile == key;
        if (done) break;
        e         = &ret->ind_ssimfile_next;
    } while (true);
    return ret;
}

// --- atf_norm.FDb.ind_ssimfile.FindX
// Look up row by key and return reference. Throw exception if not found
atf_norm::FSsimfile& atf_norm::ind_ssimfile_FindX(const algo::strptr& key) {
    atf_norm::FSsimfile* ret = ind_ssimfile_Find(key);
    vrfy(ret, tempstr() << "atf_norm.key_error  table:ind_ssimfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_norm.FDb.ind_ssimfile.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_norm::FSsimfile& atf_norm::ind_ssimfile_GetOrCreate(const algo::strptr& key) {
    atf_norm::FSsimfile* ret = ind_ssimfile_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ssimfile_Alloc();
        (*ret).ssimfile = key;
        bool good = ssimfile_XrefMaybe(*ret);
        if (!good) {
            ssimfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    return *ret;
}

// --- atf_norm.FDb.ind_ssimfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_norm::ind_ssimfile_InsertMaybe(atf_norm::FSsimfile& row) {
    ind_ssimfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ssimfile_next == (atf_norm::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        atf_norm::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index];
        do {
            atf_norm::FSsimfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ssimfile == row.ssimfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ssimfile_next;
        } while (true);
        if (retval) {
            row.ind_ssimfile_next = *prev;
            _db.ind_ssimfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_ssimfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_norm::ind_ssimfile_Remove(atf_norm::FSsimfile& row) {
    if (LIKELY(row.ind_ssimfile_next != (atf_norm::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        atf_norm::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index]; // addr of pointer to current element
        while (atf_norm::FSsimfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ssimfile_next; // unlink (singly linked list)
                _db.ind_ssimfile_n--;
                row.ind_ssimfile_next = (atf_norm::FSsimfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ssimfile_next;
        }
    }
}

// --- atf_norm.FDb.ind_ssimfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_norm::ind_ssimfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ssimfile_buckets_n;
    u32 new_nelems   = _db.ind_ssimfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_norm::FSsimfile*);
        u32 new_size = new_nbuckets * sizeof(atf_norm::FSsimfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_norm::FSsimfile* *new_buckets = (atf_norm::FSsimfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_norm.out_of_memory  field:atf_norm.FDb.ind_ssimfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ssimfile_buckets_n; i++) {
            atf_norm::FSsimfile* elem = _db.ind_ssimfile_buckets_elems[i];
            while (elem) {
                atf_norm::FSsimfile &row        = *elem;
                atf_norm::FSsimfile* next       = row.ind_ssimfile_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ssimfile) & (new_nbuckets-1);
                row.ind_ssimfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ssimfile_buckets_elems, old_size);
        _db.ind_ssimfile_buckets_elems = new_buckets;
        _db.ind_ssimfile_buckets_n = new_nbuckets;
    }
}

// --- atf_norm.FDb.scriptfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FScriptfile& atf_norm::scriptfile_Alloc() {
    atf_norm::FScriptfile* row = scriptfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.scriptfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.scriptfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FScriptfile* atf_norm::scriptfile_AllocMaybe() {
    atf_norm::FScriptfile *row = (atf_norm::FScriptfile*)scriptfile_AllocMem();
    if (row) {
        new (row) atf_norm::FScriptfile; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.scriptfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FScriptfile* atf_norm::scriptfile_InsertMaybe(const dev::Scriptfile &value) {
    atf_norm::FScriptfile *row = &scriptfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    scriptfile_CopyIn(*row,const_cast<dev::Scriptfile&>(value));
    bool ok = scriptfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        scriptfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.scriptfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::scriptfile_AllocMem() {
    u64 new_nelems     = _db.scriptfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FScriptfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.scriptfile_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FScriptfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FScriptfile) * (u64(1)<<bsr));
            _db.scriptfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.scriptfile_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.scriptfile.RemoveAll
// Remove all elements from Lary
void atf_norm::scriptfile_RemoveAll() {
    for (u64 n = _db.scriptfile_n; n>0; ) {
        n--;
        scriptfile_qFind(u64(n)).~FScriptfile(); // destroy last element
        _db.scriptfile_n = n;
    }
}

// --- atf_norm.FDb.scriptfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::scriptfile_RemoveLast() {
    u64 n = _db.scriptfile_n;
    if (n > 0) {
        n -= 1;
        scriptfile_qFind(u64(n)).~FScriptfile();
        _db.scriptfile_n = n;
    }
}

// --- atf_norm.FDb.scriptfile.InputMaybe
static bool atf_norm::scriptfile_InputMaybe(dev::Scriptfile &elem) {
    bool retval = true;
    retval = scriptfile_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.scriptfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::scriptfile_XrefMaybe(atf_norm::FScriptfile &row) {
    bool retval = true;
    (void)row;
    // insert scriptfile into index ind_scriptfile
    if (true) { // user-defined insert condition
        bool success = ind_scriptfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FDb.ind_scriptfile"; // check for duplicate key
            return false;
        }
    }
    atf_norm::FGitfile* p_gitfile = atf_norm::ind_gitfile_Find(row.gitfile);
    if (UNLIKELY(!p_gitfile)) {
        algo_lib::ResetErrtext() << "atf_norm.bad_xref  index:atf_norm.FDb.ind_gitfile" << Keyval("key", row.gitfile);
        return false;
    }
    // insert scriptfile into index c_scriptfile
    if (true) { // user-defined insert condition
        bool success = c_scriptfile_InsertMaybe(*p_gitfile, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FGitfile.c_scriptfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_scriptfile.Find
// Find row by key. Return NULL if not found.
atf_norm::FScriptfile* atf_norm::ind_scriptfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_scriptfile_buckets_n - 1);
    atf_norm::FScriptfile* *e = &_db.ind_scriptfile_buckets_elems[index];
    atf_norm::FScriptfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gitfile == key;
        if (done) break;
        e         = &ret->ind_scriptfile_next;
    } while (true);
    return ret;
}

// --- atf_norm.FDb.ind_scriptfile.FindX
// Look up row by key and return reference. Throw exception if not found
atf_norm::FScriptfile& atf_norm::ind_scriptfile_FindX(const algo::strptr& key) {
    atf_norm::FScriptfile* ret = ind_scriptfile_Find(key);
    vrfy(ret, tempstr() << "atf_norm.key_error  table:ind_scriptfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_norm.FDb.ind_scriptfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_norm::ind_scriptfile_InsertMaybe(atf_norm::FScriptfile& row) {
    ind_scriptfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_scriptfile_next == (atf_norm::FScriptfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_scriptfile_buckets_n - 1);
        atf_norm::FScriptfile* *prev = &_db.ind_scriptfile_buckets_elems[index];
        do {
            atf_norm::FScriptfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gitfile == row.gitfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_scriptfile_next;
        } while (true);
        if (retval) {
            row.ind_scriptfile_next = *prev;
            _db.ind_scriptfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_scriptfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_norm::ind_scriptfile_Remove(atf_norm::FScriptfile& row) {
    if (LIKELY(row.ind_scriptfile_next != (atf_norm::FScriptfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_scriptfile_buckets_n - 1);
        atf_norm::FScriptfile* *prev = &_db.ind_scriptfile_buckets_elems[index]; // addr of pointer to current element
        while (atf_norm::FScriptfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_scriptfile_next; // unlink (singly linked list)
                _db.ind_scriptfile_n--;
                row.ind_scriptfile_next = (atf_norm::FScriptfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_scriptfile_next;
        }
    }
}

// --- atf_norm.FDb.ind_scriptfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_norm::ind_scriptfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_scriptfile_buckets_n;
    u32 new_nelems   = _db.ind_scriptfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_norm::FScriptfile*);
        u32 new_size = new_nbuckets * sizeof(atf_norm::FScriptfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_norm::FScriptfile* *new_buckets = (atf_norm::FScriptfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_norm.out_of_memory  field:atf_norm.FDb.ind_scriptfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_scriptfile_buckets_n; i++) {
            atf_norm::FScriptfile* elem = _db.ind_scriptfile_buckets_elems[i];
            while (elem) {
                atf_norm::FScriptfile &row        = *elem;
                atf_norm::FScriptfile* next       = row.ind_scriptfile_next;
                u32 index          = algo::Smallstr200_Hash(0, row.gitfile) & (new_nbuckets-1);
                row.ind_scriptfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_scriptfile_buckets_elems, old_size);
        _db.ind_scriptfile_buckets_elems = new_buckets;
        _db.ind_scriptfile_buckets_n = new_nbuckets;
    }
}

// --- atf_norm.FDb.ns.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FNs& atf_norm::ns_Alloc() {
    atf_norm::FNs* row = ns_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.ns  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.ns.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FNs* atf_norm::ns_AllocMaybe() {
    atf_norm::FNs *row = (atf_norm::FNs*)ns_AllocMem();
    if (row) {
        new (row) atf_norm::FNs; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.ns.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FNs* atf_norm::ns_InsertMaybe(const dmmeta::Ns &value) {
    atf_norm::FNs *row = &ns_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ns_CopyIn(*row,const_cast<dmmeta::Ns&>(value));
    bool ok = ns_XrefMaybe(*row); // this may return false
    if (!ok) {
        ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.ns.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::ns_AllocMem() {
    u64 new_nelems     = _db.ns_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FNs*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ns_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FNs*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNs) * (u64(1)<<bsr));
            _db.ns_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ns_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.ns.RemoveAll
// Remove all elements from Lary
void atf_norm::ns_RemoveAll() {
    for (u64 n = _db.ns_n; n>0; ) {
        n--;
        ns_qFind(u64(n)).~FNs(); // destroy last element
        _db.ns_n = n;
    }
}

// --- atf_norm.FDb.ns.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::ns_RemoveLast() {
    u64 n = _db.ns_n;
    if (n > 0) {
        n -= 1;
        ns_qFind(u64(n)).~FNs();
        _db.ns_n = n;
    }
}

// --- atf_norm.FDb.ns.InputMaybe
static bool atf_norm::ns_InputMaybe(dmmeta::Ns &elem) {
    bool retval = true;
    retval = ns_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.ns.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::ns_XrefMaybe(atf_norm::FNs &row) {
    bool retval = true;
    (void)row;
    // insert ns into index ind_ns
    if (true) { // user-defined insert condition
        bool success = ind_ns_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FDb.ind_ns"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_ns.Find
// Find row by key. Return NULL if not found.
atf_norm::FNs* atf_norm::ind_ns_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_ns_buckets_n - 1);
    atf_norm::FNs* *e = &_db.ind_ns_buckets_elems[index];
    atf_norm::FNs* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ns == key;
        if (done) break;
        e         = &ret->ind_ns_next;
    } while (true);
    return ret;
}

// --- atf_norm.FDb.ind_ns.FindX
// Look up row by key and return reference. Throw exception if not found
atf_norm::FNs& atf_norm::ind_ns_FindX(const algo::strptr& key) {
    atf_norm::FNs* ret = ind_ns_Find(key);
    vrfy(ret, tempstr() << "atf_norm.key_error  table:ind_ns  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_norm.FDb.ind_ns.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_norm::FNs& atf_norm::ind_ns_GetOrCreate(const algo::strptr& key) {
    atf_norm::FNs* ret = ind_ns_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ns_Alloc();
        (*ret).ns = key;
        bool good = ns_XrefMaybe(*ret);
        if (!good) {
            ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    return *ret;
}

// --- atf_norm.FDb.ind_ns.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_norm::ind_ns_InsertMaybe(atf_norm::FNs& row) {
    ind_ns_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ns_next == (atf_norm::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        atf_norm::FNs* *prev = &_db.ind_ns_buckets_elems[index];
        do {
            atf_norm::FNs* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ns == row.ns) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ns_next;
        } while (true);
        if (retval) {
            row.ind_ns_next = *prev;
            _db.ind_ns_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_ns.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_norm::ind_ns_Remove(atf_norm::FNs& row) {
    if (LIKELY(row.ind_ns_next != (atf_norm::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        atf_norm::FNs* *prev = &_db.ind_ns_buckets_elems[index]; // addr of pointer to current element
        while (atf_norm::FNs *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ns_next; // unlink (singly linked list)
                _db.ind_ns_n--;
                row.ind_ns_next = (atf_norm::FNs*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ns_next;
        }
    }
}

// --- atf_norm.FDb.ind_ns.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_norm::ind_ns_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ns_buckets_n;
    u32 new_nelems   = _db.ind_ns_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_norm::FNs*);
        u32 new_size = new_nbuckets * sizeof(atf_norm::FNs*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_norm::FNs* *new_buckets = (atf_norm::FNs**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_norm.out_of_memory  field:atf_norm.FDb.ind_ns");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ns_buckets_n; i++) {
            atf_norm::FNs* elem = _db.ind_ns_buckets_elems[i];
            while (elem) {
                atf_norm::FNs &row        = *elem;
                atf_norm::FNs* next       = row.ind_ns_next;
                u32 index          = algo::Smallstr16_Hash(0, row.ns) & (new_nbuckets-1);
                row.ind_ns_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ns_buckets_elems, old_size);
        _db.ind_ns_buckets_elems = new_buckets;
        _db.ind_ns_buckets_n = new_nbuckets;
    }
}

// --- atf_norm.FDb.readme.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FReadme& atf_norm::readme_Alloc() {
    atf_norm::FReadme* row = readme_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.readme  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.readme.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FReadme* atf_norm::readme_AllocMaybe() {
    atf_norm::FReadme *row = (atf_norm::FReadme*)readme_AllocMem();
    if (row) {
        new (row) atf_norm::FReadme; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.readme.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FReadme* atf_norm::readme_InsertMaybe(const dev::Readme &value) {
    atf_norm::FReadme *row = &readme_Alloc(); // if out of memory, process dies. if input error, return NULL.
    readme_CopyIn(*row,const_cast<dev::Readme&>(value));
    bool ok = readme_XrefMaybe(*row); // this may return false
    if (!ok) {
        readme_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.readme.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::readme_AllocMem() {
    u64 new_nelems     = _db.readme_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FReadme*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.readme_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FReadme*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FReadme) * (u64(1)<<bsr));
            _db.readme_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.readme_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.readme.RemoveAll
// Remove all elements from Lary
void atf_norm::readme_RemoveAll() {
    for (u64 n = _db.readme_n; n>0; ) {
        n--;
        readme_qFind(u64(n)).~FReadme(); // destroy last element
        _db.readme_n = n;
    }
}

// --- atf_norm.FDb.readme.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::readme_RemoveLast() {
    u64 n = _db.readme_n;
    if (n > 0) {
        n -= 1;
        readme_qFind(u64(n)).~FReadme();
        _db.readme_n = n;
    }
}

// --- atf_norm.FDb.readme.InputMaybe
static bool atf_norm::readme_InputMaybe(dev::Readme &elem) {
    bool retval = true;
    retval = readme_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.readme.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::readme_XrefMaybe(atf_norm::FReadme &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- atf_norm.FDb.builddir.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FBuilddir& atf_norm::builddir_Alloc() {
    atf_norm::FBuilddir* row = builddir_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.builddir  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.builddir.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FBuilddir* atf_norm::builddir_AllocMaybe() {
    atf_norm::FBuilddir *row = (atf_norm::FBuilddir*)builddir_AllocMem();
    if (row) {
        new (row) atf_norm::FBuilddir; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.builddir.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FBuilddir* atf_norm::builddir_InsertMaybe(const dev::Builddir &value) {
    atf_norm::FBuilddir *row = &builddir_Alloc(); // if out of memory, process dies. if input error, return NULL.
    builddir_CopyIn(*row,const_cast<dev::Builddir&>(value));
    bool ok = builddir_XrefMaybe(*row); // this may return false
    if (!ok) {
        builddir_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.builddir.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::builddir_AllocMem() {
    u64 new_nelems     = _db.builddir_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FBuilddir*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.builddir_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FBuilddir*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FBuilddir) * (u64(1)<<bsr));
            _db.builddir_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.builddir_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.builddir.RemoveAll
// Remove all elements from Lary
void atf_norm::builddir_RemoveAll() {
    for (u64 n = _db.builddir_n; n>0; ) {
        n--;
        builddir_qFind(u64(n)).~FBuilddir(); // destroy last element
        _db.builddir_n = n;
    }
}

// --- atf_norm.FDb.builddir.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::builddir_RemoveLast() {
    u64 n = _db.builddir_n;
    if (n > 0) {
        n -= 1;
        builddir_qFind(u64(n)).~FBuilddir();
        _db.builddir_n = n;
    }
}

// --- atf_norm.FDb.builddir.InputMaybe
static bool atf_norm::builddir_InputMaybe(dev::Builddir &elem) {
    bool retval = true;
    retval = builddir_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.builddir.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::builddir_XrefMaybe(atf_norm::FBuilddir &row) {
    bool retval = true;
    (void)row;
    // insert builddir into index ind_builddir
    if (true) { // user-defined insert condition
        bool success = ind_builddir_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FDb.ind_builddir"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.cfg.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FCfg& atf_norm::cfg_Alloc() {
    atf_norm::FCfg* row = cfg_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.cfg  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.cfg.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FCfg* atf_norm::cfg_AllocMaybe() {
    atf_norm::FCfg *row = (atf_norm::FCfg*)cfg_AllocMem();
    if (row) {
        new (row) atf_norm::FCfg; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.cfg.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FCfg* atf_norm::cfg_InsertMaybe(const dev::Cfg &value) {
    atf_norm::FCfg *row = &cfg_Alloc(); // if out of memory, process dies. if input error, return NULL.
    cfg_CopyIn(*row,const_cast<dev::Cfg&>(value));
    bool ok = cfg_XrefMaybe(*row); // this may return false
    if (!ok) {
        cfg_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.cfg.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::cfg_AllocMem() {
    u64 new_nelems     = _db.cfg_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FCfg*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.cfg_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FCfg*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FCfg) * (u64(1)<<bsr));
            _db.cfg_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.cfg_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.cfg.RemoveAll
// Remove all elements from Lary
void atf_norm::cfg_RemoveAll() {
    for (u64 n = _db.cfg_n; n>0; ) {
        n--;
        cfg_qFind(u64(n)).~FCfg(); // destroy last element
        _db.cfg_n = n;
    }
}

// --- atf_norm.FDb.cfg.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::cfg_RemoveLast() {
    u64 n = _db.cfg_n;
    if (n > 0) {
        n -= 1;
        cfg_qFind(u64(n)).~FCfg();
        _db.cfg_n = n;
    }
}

// --- atf_norm.FDb.cfg.InputMaybe
static bool atf_norm::cfg_InputMaybe(dev::Cfg &elem) {
    bool retval = true;
    retval = cfg_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.cfg.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::cfg_XrefMaybe(atf_norm::FCfg &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- atf_norm.FDb.ind_builddir.Find
// Find row by key. Return NULL if not found.
atf_norm::FBuilddir* atf_norm::ind_builddir_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_builddir_buckets_n - 1);
    atf_norm::FBuilddir* *e = &_db.ind_builddir_buckets_elems[index];
    atf_norm::FBuilddir* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).builddir == key;
        if (done) break;
        e         = &ret->ind_builddir_next;
    } while (true);
    return ret;
}

// --- atf_norm.FDb.ind_builddir.FindX
// Look up row by key and return reference. Throw exception if not found
atf_norm::FBuilddir& atf_norm::ind_builddir_FindX(const algo::strptr& key) {
    atf_norm::FBuilddir* ret = ind_builddir_Find(key);
    vrfy(ret, tempstr() << "atf_norm.key_error  table:ind_builddir  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_norm.FDb.ind_builddir.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_norm::FBuilddir& atf_norm::ind_builddir_GetOrCreate(const algo::strptr& key) {
    atf_norm::FBuilddir* ret = ind_builddir_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &builddir_Alloc();
        (*ret).builddir = key;
        bool good = builddir_XrefMaybe(*ret);
        if (!good) {
            builddir_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    return *ret;
}

// --- atf_norm.FDb.ind_builddir.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_norm::ind_builddir_InsertMaybe(atf_norm::FBuilddir& row) {
    ind_builddir_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_builddir_next == (atf_norm::FBuilddir*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.builddir) & (_db.ind_builddir_buckets_n - 1);
        atf_norm::FBuilddir* *prev = &_db.ind_builddir_buckets_elems[index];
        do {
            atf_norm::FBuilddir* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).builddir == row.builddir) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_builddir_next;
        } while (true);
        if (retval) {
            row.ind_builddir_next = *prev;
            _db.ind_builddir_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_builddir.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_norm::ind_builddir_Remove(atf_norm::FBuilddir& row) {
    if (LIKELY(row.ind_builddir_next != (atf_norm::FBuilddir*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.builddir) & (_db.ind_builddir_buckets_n - 1);
        atf_norm::FBuilddir* *prev = &_db.ind_builddir_buckets_elems[index]; // addr of pointer to current element
        while (atf_norm::FBuilddir *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_builddir_next; // unlink (singly linked list)
                _db.ind_builddir_n--;
                row.ind_builddir_next = (atf_norm::FBuilddir*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_builddir_next;
        }
    }
}

// --- atf_norm.FDb.ind_builddir.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_norm::ind_builddir_Reserve(int n) {
    u32 old_nbuckets = _db.ind_builddir_buckets_n;
    u32 new_nelems   = _db.ind_builddir_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_norm::FBuilddir*);
        u32 new_size = new_nbuckets * sizeof(atf_norm::FBuilddir*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_norm::FBuilddir* *new_buckets = (atf_norm::FBuilddir**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_norm.out_of_memory  field:atf_norm.FDb.ind_builddir");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_builddir_buckets_n; i++) {
            atf_norm::FBuilddir* elem = _db.ind_builddir_buckets_elems[i];
            while (elem) {
                atf_norm::FBuilddir &row        = *elem;
                atf_norm::FBuilddir* next       = row.ind_builddir_next;
                u32 index          = algo::Smallstr50_Hash(0, row.builddir) & (new_nbuckets-1);
                row.ind_builddir_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_builddir_buckets_elems, old_size);
        _db.ind_builddir_buckets_elems = new_buckets;
        _db.ind_builddir_buckets_n = new_nbuckets;
    }
}

// --- atf_norm.FDb.gitfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FGitfile& atf_norm::gitfile_Alloc() {
    atf_norm::FGitfile* row = gitfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.gitfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.gitfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FGitfile* atf_norm::gitfile_AllocMaybe() {
    atf_norm::FGitfile *row = (atf_norm::FGitfile*)gitfile_AllocMem();
    if (row) {
        new (row) atf_norm::FGitfile; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.gitfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FGitfile* atf_norm::gitfile_InsertMaybe(const dev::Gitfile &value) {
    atf_norm::FGitfile *row = &gitfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gitfile_CopyIn(*row,const_cast<dev::Gitfile&>(value));
    bool ok = gitfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.gitfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::gitfile_AllocMem() {
    u64 new_nelems     = _db.gitfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FGitfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gitfile_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FGitfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FGitfile) * (u64(1)<<bsr));
            _db.gitfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gitfile_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.gitfile.RemoveAll
// Remove all elements from Lary
void atf_norm::gitfile_RemoveAll() {
    for (u64 n = _db.gitfile_n; n>0; ) {
        n--;
        gitfile_qFind(u64(n)).~FGitfile(); // destroy last element
        _db.gitfile_n = n;
    }
}

// --- atf_norm.FDb.gitfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::gitfile_RemoveLast() {
    u64 n = _db.gitfile_n;
    if (n > 0) {
        n -= 1;
        gitfile_qFind(u64(n)).~FGitfile();
        _db.gitfile_n = n;
    }
}

// --- atf_norm.FDb.gitfile.InputMaybe
static bool atf_norm::gitfile_InputMaybe(dev::Gitfile &elem) {
    bool retval = true;
    retval = gitfile_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.gitfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::gitfile_XrefMaybe(atf_norm::FGitfile &row) {
    bool retval = true;
    (void)row;
    // insert gitfile into index ind_gitfile
    if (true) { // user-defined insert condition
        bool success = ind_gitfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FDb.ind_gitfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_gitfile.Find
// Find row by key. Return NULL if not found.
atf_norm::FGitfile* atf_norm::ind_gitfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_gitfile_buckets_n - 1);
    atf_norm::FGitfile* *e = &_db.ind_gitfile_buckets_elems[index];
    atf_norm::FGitfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gitfile == key;
        if (done) break;
        e         = &ret->ind_gitfile_next;
    } while (true);
    return ret;
}

// --- atf_norm.FDb.ind_gitfile.FindX
// Look up row by key and return reference. Throw exception if not found
atf_norm::FGitfile& atf_norm::ind_gitfile_FindX(const algo::strptr& key) {
    atf_norm::FGitfile* ret = ind_gitfile_Find(key);
    vrfy(ret, tempstr() << "atf_norm.key_error  table:ind_gitfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_norm.FDb.ind_gitfile.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_norm::FGitfile& atf_norm::ind_gitfile_GetOrCreate(const algo::strptr& key) {
    atf_norm::FGitfile* ret = ind_gitfile_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &gitfile_Alloc();
        (*ret).gitfile = key;
        bool good = gitfile_XrefMaybe(*ret);
        if (!good) {
            gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    return *ret;
}

// --- atf_norm.FDb.ind_gitfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_norm::ind_gitfile_InsertMaybe(atf_norm::FGitfile& row) {
    ind_gitfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gitfile_next == (atf_norm::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        atf_norm::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index];
        do {
            atf_norm::FGitfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gitfile == row.gitfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gitfile_next;
        } while (true);
        if (retval) {
            row.ind_gitfile_next = *prev;
            _db.ind_gitfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_norm.FDb.ind_gitfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_norm::ind_gitfile_Remove(atf_norm::FGitfile& row) {
    if (LIKELY(row.ind_gitfile_next != (atf_norm::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        atf_norm::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index]; // addr of pointer to current element
        while (atf_norm::FGitfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gitfile_next; // unlink (singly linked list)
                _db.ind_gitfile_n--;
                row.ind_gitfile_next = (atf_norm::FGitfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gitfile_next;
        }
    }
}

// --- atf_norm.FDb.ind_gitfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_norm::ind_gitfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gitfile_buckets_n;
    u32 new_nelems   = _db.ind_gitfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_norm::FGitfile*);
        u32 new_size = new_nbuckets * sizeof(atf_norm::FGitfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_norm::FGitfile* *new_buckets = (atf_norm::FGitfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_norm.out_of_memory  field:atf_norm.FDb.ind_gitfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gitfile_buckets_n; i++) {
            atf_norm::FGitfile* elem = _db.ind_gitfile_buckets_elems[i];
            while (elem) {
                atf_norm::FGitfile &row        = *elem;
                atf_norm::FGitfile* next       = row.ind_gitfile_next;
                u32 index          = algo::Smallstr200_Hash(0, row.gitfile) & (new_nbuckets-1);
                row.ind_gitfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gitfile_buckets_elems, old_size);
        _db.ind_gitfile_buckets_elems = new_buckets;
        _db.ind_gitfile_buckets_n = new_nbuckets;
    }
}

// --- atf_norm.FDb.noindent.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FNoindent& atf_norm::noindent_Alloc() {
    atf_norm::FNoindent* row = noindent_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.noindent  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.noindent.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FNoindent* atf_norm::noindent_AllocMaybe() {
    atf_norm::FNoindent *row = (atf_norm::FNoindent*)noindent_AllocMem();
    if (row) {
        new (row) atf_norm::FNoindent; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.noindent.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FNoindent* atf_norm::noindent_InsertMaybe(const dev::Noindent &value) {
    atf_norm::FNoindent *row = &noindent_Alloc(); // if out of memory, process dies. if input error, return NULL.
    noindent_CopyIn(*row,const_cast<dev::Noindent&>(value));
    bool ok = noindent_XrefMaybe(*row); // this may return false
    if (!ok) {
        noindent_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.noindent.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::noindent_AllocMem() {
    u64 new_nelems     = _db.noindent_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FNoindent*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.noindent_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FNoindent*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNoindent) * (u64(1)<<bsr));
            _db.noindent_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.noindent_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.noindent.RemoveAll
// Remove all elements from Lary
void atf_norm::noindent_RemoveAll() {
    for (u64 n = _db.noindent_n; n>0; ) {
        n--;
        noindent_qFind(u64(n)).~FNoindent(); // destroy last element
        _db.noindent_n = n;
    }
}

// --- atf_norm.FDb.noindent.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::noindent_RemoveLast() {
    u64 n = _db.noindent_n;
    if (n > 0) {
        n -= 1;
        noindent_qFind(u64(n)).~FNoindent();
        _db.noindent_n = n;
    }
}

// --- atf_norm.FDb.noindent.InputMaybe
static bool atf_norm::noindent_InputMaybe(dev::Noindent &elem) {
    bool retval = true;
    retval = noindent_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.noindent.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::noindent_XrefMaybe(atf_norm::FNoindent &row) {
    bool retval = true;
    (void)row;
    atf_norm::FGitfile* p_gitfile = atf_norm::ind_gitfile_Find(row.gitfile);
    if (UNLIKELY(!p_gitfile)) {
        algo_lib::ResetErrtext() << "atf_norm.bad_xref  index:atf_norm.FDb.ind_gitfile" << Keyval("key", row.gitfile);
        return false;
    }
    // insert noindent into index c_noindent
    if (true) { // user-defined insert condition
        bool success = c_noindent_InsertMaybe(*p_gitfile, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FGitfile.c_noindent"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_norm::FTargsrc& atf_norm::targsrc_Alloc() {
    atf_norm::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_norm.out_of_mem  field:atf_norm.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_norm.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_norm::FTargsrc* atf_norm::targsrc_AllocMaybe() {
    atf_norm::FTargsrc *row = (atf_norm::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) atf_norm::FTargsrc; // call constructor
    }
    return row;
}

// --- atf_norm.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_norm::FTargsrc* atf_norm::targsrc_InsertMaybe(const dev::Targsrc &value) {
    atf_norm::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_norm.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_norm::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_norm::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(atf_norm::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = new_nelems;
        ret = lev + index;
    }
    return ret;
}

// --- atf_norm.FDb.targsrc.RemoveAll
// Remove all elements from Lary
void atf_norm::targsrc_RemoveAll() {
    for (u64 n = _db.targsrc_n; n>0; ) {
        n--;
        targsrc_qFind(u64(n)).~FTargsrc(); // destroy last element
        _db.targsrc_n = n;
    }
}

// --- atf_norm.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_norm::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = n;
    }
}

// --- atf_norm.FDb.targsrc.InputMaybe
static bool atf_norm::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem);
    return retval;
}

// --- atf_norm.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_norm::targsrc_XrefMaybe(atf_norm::FTargsrc &row) {
    bool retval = true;
    (void)row;
    atf_norm::FGitfile* p_src = atf_norm::ind_gitfile_Find(src_Get(row));
    if (UNLIKELY(!p_src)) {
        algo_lib::ResetErrtext() << "atf_norm.bad_xref  index:atf_norm.FDb.ind_gitfile" << Keyval("key", src_Get(row));
        return false;
    }
    // insert targsrc into index c_targsrc
    if (true) { // user-defined insert condition
        bool success = c_targsrc_InsertMaybe(*p_src, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_norm.duplicate_key  xref:atf_norm.FGitfile.c_targsrc"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_norm.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr atf_norm::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- atf_norm.FDb.trace.N
// Function return 1
inline static i32 atf_norm::trace_N() {
    return 1;
}

// --- atf_norm.FDb..Init
// Set all fields to initial values.
void atf_norm::FDb_Init() {
    // initialize LAry normcheck (atf_norm.FDb.normcheck)
    _db.normcheck_n = 0;
    memset(_db.normcheck_lary, 0, sizeof(_db.normcheck_lary)); // zero out all level pointers
    atf_norm::FNormcheck* normcheck_first = (atf_norm::FNormcheck*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNormcheck) * (u64(1)<<4));
    if (!normcheck_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.normcheck_lary[i]  = normcheck_first;
        normcheck_first    += 1ULL<<i;
    }
    // initialize LAry ssimfile (atf_norm.FDb.ssimfile)
    _db.ssimfile_n = 0;
    memset(_db.ssimfile_lary, 0, sizeof(_db.ssimfile_lary)); // zero out all level pointers
    atf_norm::FSsimfile* ssimfile_first = (atf_norm::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FSsimfile) * (u64(1)<<4));
    if (!ssimfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ssimfile_lary[i]  = ssimfile_first;
        ssimfile_first    += 1ULL<<i;
    }
    // initialize hash table for atf_norm::FSsimfile;
    _db.ind_ssimfile_n             	= 0; // (atf_norm.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_n     	= 4; // (atf_norm.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_elems 	= (atf_norm::FSsimfile**)algo_lib::malloc_AllocMem(sizeof(atf_norm::FSsimfile*)*_db.ind_ssimfile_buckets_n); // initial buckets (atf_norm.FDb.ind_ssimfile)
    if (!_db.ind_ssimfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_norm.FDb.ind_ssimfile)
    }
    memset(_db.ind_ssimfile_buckets_elems, 0, sizeof(atf_norm::FSsimfile*)*_db.ind_ssimfile_buckets_n); // (atf_norm.FDb.ind_ssimfile)
    _db.c_normcheck = NULL;
    // initialize LAry scriptfile (atf_norm.FDb.scriptfile)
    _db.scriptfile_n = 0;
    memset(_db.scriptfile_lary, 0, sizeof(_db.scriptfile_lary)); // zero out all level pointers
    atf_norm::FScriptfile* scriptfile_first = (atf_norm::FScriptfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FScriptfile) * (u64(1)<<4));
    if (!scriptfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.scriptfile_lary[i]  = scriptfile_first;
        scriptfile_first    += 1ULL<<i;
    }
    // initialize hash table for atf_norm::FScriptfile;
    _db.ind_scriptfile_n             	= 0; // (atf_norm.FDb.ind_scriptfile)
    _db.ind_scriptfile_buckets_n     	= 4; // (atf_norm.FDb.ind_scriptfile)
    _db.ind_scriptfile_buckets_elems 	= (atf_norm::FScriptfile**)algo_lib::malloc_AllocMem(sizeof(atf_norm::FScriptfile*)*_db.ind_scriptfile_buckets_n); // initial buckets (atf_norm.FDb.ind_scriptfile)
    if (!_db.ind_scriptfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_norm.FDb.ind_scriptfile)
    }
    memset(_db.ind_scriptfile_buckets_elems, 0, sizeof(atf_norm::FScriptfile*)*_db.ind_scriptfile_buckets_n); // (atf_norm.FDb.ind_scriptfile)
    // initialize LAry ns (atf_norm.FDb.ns)
    _db.ns_n = 0;
    memset(_db.ns_lary, 0, sizeof(_db.ns_lary)); // zero out all level pointers
    atf_norm::FNs* ns_first = (atf_norm::FNs*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNs) * (u64(1)<<4));
    if (!ns_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ns_lary[i]  = ns_first;
        ns_first    += 1ULL<<i;
    }
    // initialize hash table for atf_norm::FNs;
    _db.ind_ns_n             	= 0; // (atf_norm.FDb.ind_ns)
    _db.ind_ns_buckets_n     	= 4; // (atf_norm.FDb.ind_ns)
    _db.ind_ns_buckets_elems 	= (atf_norm::FNs**)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNs*)*_db.ind_ns_buckets_n); // initial buckets (atf_norm.FDb.ind_ns)
    if (!_db.ind_ns_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_norm.FDb.ind_ns)
    }
    memset(_db.ind_ns_buckets_elems, 0, sizeof(atf_norm::FNs*)*_db.ind_ns_buckets_n); // (atf_norm.FDb.ind_ns)
    // initialize LAry readme (atf_norm.FDb.readme)
    _db.readme_n = 0;
    memset(_db.readme_lary, 0, sizeof(_db.readme_lary)); // zero out all level pointers
    atf_norm::FReadme* readme_first = (atf_norm::FReadme*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FReadme) * (u64(1)<<4));
    if (!readme_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.readme_lary[i]  = readme_first;
        readme_first    += 1ULL<<i;
    }
    // initialize LAry builddir (atf_norm.FDb.builddir)
    _db.builddir_n = 0;
    memset(_db.builddir_lary, 0, sizeof(_db.builddir_lary)); // zero out all level pointers
    atf_norm::FBuilddir* builddir_first = (atf_norm::FBuilddir*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FBuilddir) * (u64(1)<<4));
    if (!builddir_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.builddir_lary[i]  = builddir_first;
        builddir_first    += 1ULL<<i;
    }
    // initialize LAry cfg (atf_norm.FDb.cfg)
    _db.cfg_n = 0;
    memset(_db.cfg_lary, 0, sizeof(_db.cfg_lary)); // zero out all level pointers
    atf_norm::FCfg* cfg_first = (atf_norm::FCfg*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FCfg) * (u64(1)<<4));
    if (!cfg_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.cfg_lary[i]  = cfg_first;
        cfg_first    += 1ULL<<i;
    }
    // initialize hash table for atf_norm::FBuilddir;
    _db.ind_builddir_n             	= 0; // (atf_norm.FDb.ind_builddir)
    _db.ind_builddir_buckets_n     	= 4; // (atf_norm.FDb.ind_builddir)
    _db.ind_builddir_buckets_elems 	= (atf_norm::FBuilddir**)algo_lib::malloc_AllocMem(sizeof(atf_norm::FBuilddir*)*_db.ind_builddir_buckets_n); // initial buckets (atf_norm.FDb.ind_builddir)
    if (!_db.ind_builddir_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_norm.FDb.ind_builddir)
    }
    memset(_db.ind_builddir_buckets_elems, 0, sizeof(atf_norm::FBuilddir*)*_db.ind_builddir_buckets_n); // (atf_norm.FDb.ind_builddir)
    // initialize LAry gitfile (atf_norm.FDb.gitfile)
    _db.gitfile_n = 0;
    memset(_db.gitfile_lary, 0, sizeof(_db.gitfile_lary)); // zero out all level pointers
    atf_norm::FGitfile* gitfile_first = (atf_norm::FGitfile*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FGitfile) * (u64(1)<<4));
    if (!gitfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gitfile_lary[i]  = gitfile_first;
        gitfile_first    += 1ULL<<i;
    }
    // initialize hash table for atf_norm::FGitfile;
    _db.ind_gitfile_n             	= 0; // (atf_norm.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_n     	= 4; // (atf_norm.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_elems 	= (atf_norm::FGitfile**)algo_lib::malloc_AllocMem(sizeof(atf_norm::FGitfile*)*_db.ind_gitfile_buckets_n); // initial buckets (atf_norm.FDb.ind_gitfile)
    if (!_db.ind_gitfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_norm.FDb.ind_gitfile)
    }
    memset(_db.ind_gitfile_buckets_elems, 0, sizeof(atf_norm::FGitfile*)*_db.ind_gitfile_buckets_n); // (atf_norm.FDb.ind_gitfile)
    // initialize LAry noindent (atf_norm.FDb.noindent)
    _db.noindent_n = 0;
    memset(_db.noindent_lary, 0, sizeof(_db.noindent_lary)); // zero out all level pointers
    atf_norm::FNoindent* noindent_first = (atf_norm::FNoindent*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FNoindent) * (u64(1)<<4));
    if (!noindent_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.noindent_lary[i]  = noindent_first;
        noindent_first    += 1ULL<<i;
    }
    // initialize LAry targsrc (atf_norm.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    atf_norm::FTargsrc* targsrc_first = (atf_norm::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(atf_norm::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }

    atf_norm::InitReflection();
    normcheck_LoadStatic();
}

// --- atf_norm.FDb..Uninit
void atf_norm::FDb_Uninit() {
    atf_norm::FDb &row = _db; (void)row;

    // atf_norm.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.noindent.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.ind_gitfile.Uninit (Thash)  //
    // skip destruction of ind_gitfile in global scope

    // atf_norm.FDb.gitfile.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.ind_builddir.Uninit (Thash)  //
    // skip destruction of ind_builddir in global scope

    // atf_norm.FDb.cfg.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.builddir.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.readme.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.ind_ns.Uninit (Thash)  //
    // skip destruction of ind_ns in global scope

    // atf_norm.FDb.ns.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.ind_scriptfile.Uninit (Thash)  //
    // skip destruction of ind_scriptfile in global scope

    // atf_norm.FDb.scriptfile.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.ind_ssimfile.Uninit (Thash)  //
    // skip destruction of ind_ssimfile in global scope

    // atf_norm.FDb.ssimfile.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_norm.FDb.normcheck.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- atf_norm.FGitfile.base.CopyOut
// Copy fields out of row
void atf_norm::gitfile_CopyOut(atf_norm::FGitfile &row, dev::Gitfile &out) {
    out.gitfile = row.gitfile;
}

// --- atf_norm.FGitfile.base.CopyIn
// Copy fields in to row
void atf_norm::gitfile_CopyIn(atf_norm::FGitfile &row, dev::Gitfile &in) {
    row.gitfile = in.gitfile;
}

// --- atf_norm.FGitfile.ext.Get
algo::Smallstr50 atf_norm::ext_Get(atf_norm::FGitfile& gitfile) {
    algo::Smallstr50 ret(algo::Pathcomp(gitfile.gitfile, "/RR.LR.RR"));
    return ret;
}

// --- atf_norm.FGitfile..Uninit
void atf_norm::FGitfile_Uninit(atf_norm::FGitfile& gitfile) {
    atf_norm::FGitfile &row = gitfile; (void)row;
    ind_gitfile_Remove(row); // remove gitfile from index ind_gitfile
}

// --- atf_norm.FNoindent.base.CopyOut
// Copy fields out of row
void atf_norm::noindent_CopyOut(atf_norm::FNoindent &row, dev::Noindent &out) {
    out.gitfile = row.gitfile;
    out.comment = row.comment;
}

// --- atf_norm.FNoindent.base.CopyIn
// Copy fields in to row
void atf_norm::noindent_CopyIn(atf_norm::FNoindent &row, dev::Noindent &in) {
    row.gitfile = in.gitfile;
    row.comment = in.comment;
}

// --- atf_norm.FNoindent..Uninit
void atf_norm::FNoindent_Uninit(atf_norm::FNoindent& noindent) {
    atf_norm::FNoindent &row = noindent; (void)row;
    atf_norm::FGitfile* p_gitfile = atf_norm::ind_gitfile_Find(row.gitfile);
    if (p_gitfile)  {
        c_noindent_Remove(*p_gitfile, row);// remove noindent from index c_noindent
    }
}

// --- atf_norm.FNormcheck.base.CopyOut
// Copy fields out of row
void atf_norm::normcheck_CopyOut(atf_norm::FNormcheck &row, atfdb::Normcheck &out) {
    out.normcheck = row.normcheck;
    out.comment = row.comment;
}

// --- atf_norm.FNormcheck.base.CopyIn
// Copy fields in to row
void atf_norm::normcheck_CopyIn(atf_norm::FNormcheck &row, atfdb::Normcheck &in) {
    row.normcheck = in.normcheck;
    row.comment = in.comment;
}

// --- atf_norm.FNs.base.CopyOut
// Copy fields out of row
void atf_norm::ns_CopyOut(atf_norm::FNs &row, dmmeta::Ns &out) {
    out.ns = row.ns;
    out.nstype = row.nstype;
    out.comment = row.comment;
}

// --- atf_norm.FNs.base.CopyIn
// Copy fields in to row
void atf_norm::ns_CopyIn(atf_norm::FNs &row, dmmeta::Ns &in) {
    row.ns = in.ns;
    row.nstype = in.nstype;
    row.comment = in.comment;
}

// --- atf_norm.FNs..Uninit
void atf_norm::FNs_Uninit(atf_norm::FNs& ns) {
    atf_norm::FNs &row = ns; (void)row;
    ind_ns_Remove(row); // remove ns from index ind_ns
}

// --- atf_norm.FReadme.base.CopyOut
// Copy fields out of row
void atf_norm::readme_CopyOut(atf_norm::FReadme &row, dev::Readme &out) {
    out.gitfile = row.gitfile;
    out.inl = row.inl;
    out.comment = row.comment;
}

// --- atf_norm.FReadme.base.CopyIn
// Copy fields in to row
void atf_norm::readme_CopyIn(atf_norm::FReadme &row, dev::Readme &in) {
    row.gitfile = in.gitfile;
    row.inl = in.inl;
    row.comment = in.comment;
}

// --- atf_norm.FScriptfile.base.CopyOut
// Copy fields out of row
void atf_norm::scriptfile_CopyOut(atf_norm::FScriptfile &row, dev::Scriptfile &out) {
    out.gitfile = row.gitfile;
    out.args = row.args;
    out.comment = row.comment;
}

// --- atf_norm.FScriptfile.base.CopyIn
// Copy fields in to row
void atf_norm::scriptfile_CopyIn(atf_norm::FScriptfile &row, dev::Scriptfile &in) {
    row.gitfile = in.gitfile;
    row.args = in.args;
    row.comment = in.comment;
}

// --- atf_norm.FScriptfile..Uninit
void atf_norm::FScriptfile_Uninit(atf_norm::FScriptfile& scriptfile) {
    atf_norm::FScriptfile &row = scriptfile; (void)row;
    ind_scriptfile_Remove(row); // remove scriptfile from index ind_scriptfile
    atf_norm::FGitfile* p_gitfile = atf_norm::ind_gitfile_Find(row.gitfile);
    if (p_gitfile)  {
        c_scriptfile_Remove(*p_gitfile, row);// remove scriptfile from index c_scriptfile
    }
}

// --- atf_norm.FSsimfile.base.CopyOut
// Copy fields out of row
void atf_norm::ssimfile_CopyOut(atf_norm::FSsimfile &row, dmmeta::Ssimfile &out) {
    out.ssimfile = row.ssimfile;
    out.ctype = row.ctype;
}

// --- atf_norm.FSsimfile.base.CopyIn
// Copy fields in to row
void atf_norm::ssimfile_CopyIn(atf_norm::FSsimfile &row, dmmeta::Ssimfile &in) {
    row.ssimfile = in.ssimfile;
    row.ctype = in.ctype;
}

// --- atf_norm.FSsimfile.ssimns.Get
algo::Smallstr16 atf_norm::ssimns_Get(atf_norm::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- atf_norm.FSsimfile.ns.Get
algo::Smallstr16 atf_norm::ns_Get(atf_norm::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- atf_norm.FSsimfile.name.Get
algo::Smallstr50 atf_norm::name_Get(atf_norm::FSsimfile& ssimfile) {
    algo::Smallstr50 ret(algo::Pathcomp(ssimfile.ssimfile, ".RR"));
    return ret;
}

// --- atf_norm.FSsimfile..Uninit
void atf_norm::FSsimfile_Uninit(atf_norm::FSsimfile& ssimfile) {
    atf_norm::FSsimfile &row = ssimfile; (void)row;
    ind_ssimfile_Remove(row); // remove ssimfile from index ind_ssimfile
}

// --- atf_norm.FTargsrc.base.CopyOut
// Copy fields out of row
void atf_norm::targsrc_CopyOut(atf_norm::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- atf_norm.FTargsrc.base.CopyIn
// Copy fields in to row
void atf_norm::targsrc_CopyIn(atf_norm::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- atf_norm.FTargsrc.target.Get
algo::Smallstr16 atf_norm::target_Get(atf_norm::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- atf_norm.FTargsrc.src.Get
algo::Smallstr200 atf_norm::src_Get(atf_norm::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- atf_norm.FTargsrc.ext.Get
algo::Smallstr10 atf_norm::ext_Get(atf_norm::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- atf_norm.FTargsrc..Uninit
void atf_norm::FTargsrc_Uninit(atf_norm::FTargsrc& targsrc) {
    atf_norm::FTargsrc &row = targsrc; (void)row;
    atf_norm::FGitfile* p_src = atf_norm::ind_gitfile_Find(src_Get(row));
    if (p_src)  {
        c_targsrc_Remove(*p_src, row);// remove targsrc from index c_targsrc
    }
}

// --- atf_norm.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_norm::value_ToCstr(const atf_norm::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_norm_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- atf_norm.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_norm::value_Print(const atf_norm::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_norm.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_norm::value_SetStrptrMaybe(atf_norm::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,atf_norm_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_norm.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_norm::value_SetStrptr(atf_norm::FieldId& parent, algo::strptr rhs, atf_norm_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_norm.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_norm::value_ReadStrptrMaybe(atf_norm::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_norm.FieldId..ReadStrptrMaybe
// Read fields of atf_norm::FieldId from an ascii string.
// The format of the string is the format of the atf_norm::FieldId's only field
bool atf_norm::FieldId_ReadStrptrMaybe(atf_norm::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && atf_norm::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_norm.FieldId..Print
// print string representation of atf_norm::FieldId to string LHS, no header -- cprint:atf_norm.FieldId.String
void atf_norm::FieldId_Print(atf_norm::FieldId & row, algo::cstring &str) {
    atf_norm::value_Print(row, str);
}

// --- atf_norm.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_norm::value_ToCstr(const atf_norm::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_norm_TableId_dev_Builddir : ret = "dev.Builddir";  break;
        case atf_norm_TableId_dev_Cfg      : ret = "dev.Cfg";  break;
        case atf_norm_TableId_dev_Gitfile  : ret = "dev.Gitfile";  break;
        case atf_norm_TableId_dev_Noindent : ret = "dev.Noindent";  break;
        case atf_norm_TableId_dmmeta_Ns    : ret = "dmmeta.Ns";  break;
        case atf_norm_TableId_dev_Readme   : ret = "dev.Readme";  break;
        case atf_norm_TableId_dev_Scriptfile: ret = "dev.Scriptfile";  break;
        case atf_norm_TableId_dmmeta_Ssimfile: ret = "dmmeta.Ssimfile";  break;
        case atf_norm_TableId_dev_Targsrc  : ret = "dev.Targsrc";  break;
    }
    return ret;
}

// --- atf_norm.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_norm::value_Print(const atf_norm::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_norm.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_norm::value_SetStrptrMaybe(atf_norm::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 7: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)|(u64(rhs[6])<<48)) {
                case LE_STR7('d','e','v','.','C','f','g'): {
                    value_SetEnum(parent,atf_norm_TableId_dev_Cfg); ret = true; break;
                }
                case LE_STR7('d','e','v','.','c','f','g'): {
                    value_SetEnum(parent,atf_norm_TableId_dev_cfg); ret = true; break;
                }
            }
            break;
        }
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,atf_norm_TableId_dmmeta_Ns); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,atf_norm_TableId_dmmeta_ns); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','R','e','a','d'): {
                    if (memcmp(rhs.elems+8,"me",2)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Readme); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','r','e','a','d'): {
                    if (memcmp(rhs.elems+8,"me",2)==0) { value_SetEnum(parent,atf_norm_TableId_dev_readme); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','G','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','g','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_norm_TableId_dev_gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,atf_norm_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','B','u','i','l'): {
                    if (memcmp(rhs.elems+8,"ddir",4)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Builddir); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','N','o','i','n'): {
                    if (memcmp(rhs.elems+8,"dent",4)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Noindent); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','b','u','i','l'): {
                    if (memcmp(rhs.elems+8,"ddir",4)==0) { value_SetEnum(parent,atf_norm_TableId_dev_builddir); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','n','o','i','n'): {
                    if (memcmp(rhs.elems+8,"dent",4)==0) { value_SetEnum(parent,atf_norm_TableId_dev_noindent); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','S','c','r','i'): {
                    if (memcmp(rhs.elems+8,"ptfile",6)==0) { value_SetEnum(parent,atf_norm_TableId_dev_Scriptfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','s','c','r','i'): {
                    if (memcmp(rhs.elems+8,"ptfile",6)==0) { value_SetEnum(parent,atf_norm_TableId_dev_scriptfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,atf_norm_TableId_dmmeta_Ssimfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,atf_norm_TableId_dmmeta_ssimfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_norm.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_norm::value_SetStrptr(atf_norm::TableId& parent, algo::strptr rhs, atf_norm_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_norm.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_norm::value_ReadStrptrMaybe(atf_norm::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_norm.TableId..ReadStrptrMaybe
// Read fields of atf_norm::TableId from an ascii string.
// The format of the string is the format of the atf_norm::TableId's only field
bool atf_norm::TableId_ReadStrptrMaybe(atf_norm::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && atf_norm::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_norm.TableId..Print
// print string representation of atf_norm::TableId to string LHS, no header -- cprint:atf_norm.TableId.String
void atf_norm::TableId_Print(atf_norm::TableId & row, algo::cstring &str) {
    atf_norm::value_Print(row, str);
}

// --- atf_norm...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        lib_git::FDb_Init();
        atf_norm::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        atf_norm::MainArgs(algo_lib::_db.argc,algo_lib::_db.argv); // dmmeta.main:atf_norm
    } catch(algo_lib::ErrorX &x) {
        prerr("atf_norm.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        atf_norm::FDb_Uninit();
        lib_git::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- atf_norm...SizeCheck
inline static void atf_norm::SizeCheck() {
}
