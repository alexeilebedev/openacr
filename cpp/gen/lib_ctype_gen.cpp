//
// cpp/gen/lib_ctype_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lib_ctype_gen.h"
#include "include/gen/lib_ctype_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude
namespace lib_ctype { // gen:ns_print_proto
    static bool          fconst_InputMaybe(dmmeta::Fconst &elem) __attribute__((nothrow));
    static bool          ssimfile_InputMaybe(dmmeta::Ssimfile &elem) __attribute__((nothrow));
    static bool          ftuple_InputMaybe(dmmeta::Ftuple &elem) __attribute__((nothrow));
    static bool          ctype_InputMaybe(dmmeta::Ctype &elem) __attribute__((nothrow));
    static bool          field_InputMaybe(dmmeta::Field &elem) __attribute__((nothrow));
    static bool          cdflt_InputMaybe(dmmeta::Cdflt &elem) __attribute__((nothrow));
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          cfmt_InputMaybe(dmmeta::Cfmt &elem) __attribute__((nothrow));
    static bool          cppfunc_InputMaybe(dmmeta::Cppfunc &elem) __attribute__((nothrow));
    static bool          substr_InputMaybe(dmmeta::Substr &elem) __attribute__((nothrow));
    static bool          unstablefld_InputMaybe(dev::Unstablefld &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- lib_ctype.FCdflt.base.CopyOut
// Copy fields out of row
void lib_ctype::cdflt_CopyOut(lib_ctype::FCdflt &row, dmmeta::Cdflt &out) {
    out.ctype = row.ctype;
    out.dflt = row.dflt;
    out.cppdflt = row.cppdflt;
    out.ssimdflt = row.ssimdflt;
    out.jsdflt = row.jsdflt;
    out.comment = row.comment;
}

// --- lib_ctype.FCdflt.base.CopyIn
// Copy fields in to row
void lib_ctype::cdflt_CopyIn(lib_ctype::FCdflt &row, dmmeta::Cdflt &in) {
    row.ctype = in.ctype;
    row.dflt = in.dflt;
    row.cppdflt = in.cppdflt;
    row.ssimdflt = in.ssimdflt;
    row.jsdflt = in.jsdflt;
    row.comment = in.comment;
}

// --- lib_ctype.FCdflt..Uninit
void lib_ctype::FCdflt_Uninit(lib_ctype::FCdflt& cdflt) {
    lib_ctype::FCdflt &row = cdflt; (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(row.ctype);
    if (p_ctype)  {
        c_cdflt_Remove(*p_ctype, row);// remove cdflt from index c_cdflt
    }
}

// --- lib_ctype.FCfmt.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::cfmt_CopyOut(lib_ctype::FCfmt &row, dmmeta::Cfmt &out) {
    out.cfmt = row.cfmt;
    out.printfmt = row.printfmt;
    out.read = row.read;
    out.print = row.print;
    out.sep = row.sep;
    out.genop = row.genop;
    out.comment = row.comment;
}

// --- lib_ctype.FCfmt.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::cfmt_CopyIn(lib_ctype::FCfmt &row, dmmeta::Cfmt &in) {
    row.cfmt = in.cfmt;
    row.printfmt = in.printfmt;
    row.read = in.read;
    row.print = in.print;
    row.sep = in.sep;
    row.genop = in.genop;
    row.comment = in.comment;
}

// --- lib_ctype.FCfmt.ctype.Get
algo::Smallstr50 lib_ctype::ctype_Get(lib_ctype::FCfmt& cfmt) {
    algo::Smallstr50 ret(algo::Pathcomp(cfmt.cfmt, ".RL"));
    return ret;
}

// --- lib_ctype.FCfmt.strfmt.Get
algo::Smallstr50 lib_ctype::strfmt_Get(lib_ctype::FCfmt& cfmt) {
    algo::Smallstr50 ret(algo::Pathcomp(cfmt.cfmt, ".RR"));
    return ret;
}

// --- lib_ctype.FCfmt..Init
// Set all fields to initial values.
void lib_ctype::FCfmt_Init(lib_ctype::FCfmt& cfmt) {
    cfmt.read = bool(false);
    cfmt.print = bool(false);
    cfmt.genop = bool(false);
    cfmt.ctype_c_cfmt_in_ary = bool(false);
    cfmt.ind_cfmt_next = (lib_ctype::FCfmt*)-1; // (lib_ctype.FDb.ind_cfmt) not-in-hash
}

// --- lib_ctype.FCfmt..Uninit
void lib_ctype::FCfmt_Uninit(lib_ctype::FCfmt& cfmt) {
    lib_ctype::FCfmt &row = cfmt; (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(ctype_Get(row));
    if (p_ctype)  {
        c_cfmt_Remove(*p_ctype, row);// remove cfmt from index c_cfmt
    }
    ind_cfmt_Remove(row); // remove cfmt from index ind_cfmt
}

// --- lib_ctype.FCfmt..Print
// print string representation of lib_ctype::FCfmt to string LHS, no header -- cprint:lib_ctype.FCfmt.String
void lib_ctype::FCfmt_Print(lib_ctype::FCfmt & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_ctype.FCfmt";

    algo::Smallstr100_Print(row.cfmt, temp);
    PrintAttrSpaceReset(str,"cfmt", temp);

    algo::Smallstr50_Print(row.printfmt, temp);
    PrintAttrSpaceReset(str,"printfmt", temp);

    bool_Print(row.read, temp);
    PrintAttrSpaceReset(str,"read", temp);

    bool_Print(row.print, temp);
    PrintAttrSpaceReset(str,"print", temp);

    algo::Smallstr20_Print(row.sep, temp);
    PrintAttrSpaceReset(str,"sep", temp);

    bool_Print(row.genop, temp);
    PrintAttrSpaceReset(str,"genop", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);

    bool_Print(row.ctype_c_cfmt_in_ary, temp);
    PrintAttrSpaceReset(str,"ctype_c_cfmt_in_ary", temp);
}

// --- lib_ctype.FCppfunc.base.CopyOut
// Copy fields out of row
void lib_ctype::cppfunc_CopyOut(lib_ctype::FCppfunc &row, dmmeta::Cppfunc &out) {
    out.field = row.field;
    out.expr = row.expr;
}

// --- lib_ctype.FCppfunc.base.CopyIn
// Copy fields in to row
void lib_ctype::cppfunc_CopyIn(lib_ctype::FCppfunc &row, dmmeta::Cppfunc &in) {
    row.field = in.field;
    row.expr = in.expr;
}

// --- lib_ctype.FCppfunc..Uninit
void lib_ctype::FCppfunc_Uninit(lib_ctype::FCppfunc& cppfunc) {
    lib_ctype::FCppfunc &row = cppfunc; (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (p_field)  {
        c_cppfunc_Remove(*p_field, row);// remove cppfunc from index c_cppfunc
    }
}

// --- lib_ctype.FCtype.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::ctype_CopyOut(lib_ctype::FCtype &row, dmmeta::Ctype &out) {
    out.ctype = row.ctype;
    out.comment = row.comment;
}

// --- lib_ctype.FCtype.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::ctype_CopyIn(lib_ctype::FCtype &row, dmmeta::Ctype &in) {
    row.ctype = in.ctype;
    row.comment = in.comment;
}

// --- lib_ctype.FCtype.ns.Get
algo::Smallstr16 lib_ctype::ns_Get(lib_ctype::FCtype& ctype) {
    algo::Smallstr16 ret(algo::Pathcomp(ctype.ctype, ".RL"));
    return ret;
}

// --- lib_ctype.FCtype.name.Get
algo::Smallstr50 lib_ctype::name_Get(lib_ctype::FCtype& ctype) {
    algo::Smallstr50 ret(algo::Pathcomp(ctype.ctype, ".RR"));
    return ret;
}

// --- lib_ctype.FCtype.c_field.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void lib_ctype::c_field_Insert(lib_ctype::FCtype& ctype, lib_ctype::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,true)) {
        // reserve space
        c_field_Reserve(ctype, 1);
        u32 n  = ctype.c_field_n;
        u32 at = n;
        lib_ctype::FField* *elems = ctype.c_field_elems;
        elems[at] = &row;
        ctype.c_field_n = n+1;

    }
}

// --- lib_ctype.FCtype.c_field.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool lib_ctype::c_field_InsertMaybe(lib_ctype::FCtype& ctype, lib_ctype::FField& row) {
    bool retval = !row.ctype_c_field_in_ary;
    c_field_Insert(ctype,row); // check is performed in _Insert again
    return retval;
}

// --- lib_ctype.FCtype.c_field.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void lib_ctype::c_field_Remove(lib_ctype::FCtype& ctype, lib_ctype::FField& row) {
    if (bool_Update(row.ctype_c_field_in_ary,false)) {
        int lim = ctype.c_field_n;
        lib_ctype::FField* *elems = ctype.c_field_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            lib_ctype::FField* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(lib_ctype::FField*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                ctype.c_field_n = lim - 1;
                break;
            }
        }
    }
}

// --- lib_ctype.FCtype.c_field.Reserve
// Reserve space in index for N more elements;
void lib_ctype::c_field_Reserve(lib_ctype::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_field_max;
    if (UNLIKELY(ctype.c_field_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_ctype::FField*);
        u32 new_size = new_max * sizeof(lib_ctype::FField*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_field_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FCtype.c_field");
        }
        ctype.c_field_elems = (lib_ctype::FField**)new_mem;
        ctype.c_field_max = new_max;
    }
}

// --- lib_ctype.FCtype.c_cfmt.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void lib_ctype::c_cfmt_Insert(lib_ctype::FCtype& ctype, lib_ctype::FCfmt& row) {
    if (bool_Update(row.ctype_c_cfmt_in_ary,true)) {
        // reserve space
        c_cfmt_Reserve(ctype, 1);
        u32 n  = ctype.c_cfmt_n;
        u32 at = n;
        lib_ctype::FCfmt* *elems = ctype.c_cfmt_elems;
        elems[at] = &row;
        ctype.c_cfmt_n = n+1;

    }
}

// --- lib_ctype.FCtype.c_cfmt.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool lib_ctype::c_cfmt_InsertMaybe(lib_ctype::FCtype& ctype, lib_ctype::FCfmt& row) {
    bool retval = !row.ctype_c_cfmt_in_ary;
    c_cfmt_Insert(ctype,row); // check is performed in _Insert again
    return retval;
}

// --- lib_ctype.FCtype.c_cfmt.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void lib_ctype::c_cfmt_Remove(lib_ctype::FCtype& ctype, lib_ctype::FCfmt& row) {
    if (bool_Update(row.ctype_c_cfmt_in_ary,false)) {
        int lim = ctype.c_cfmt_n;
        lib_ctype::FCfmt* *elems = ctype.c_cfmt_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            lib_ctype::FCfmt* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(lib_ctype::FCfmt*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                ctype.c_cfmt_n = lim - 1;
                break;
            }
        }
    }
}

// --- lib_ctype.FCtype.c_cfmt.Reserve
// Reserve space in index for N more elements;
void lib_ctype::c_cfmt_Reserve(lib_ctype::FCtype& ctype, u32 n) {
    u32 old_max = ctype.c_cfmt_max;
    if (UNLIKELY(ctype.c_cfmt_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_ctype::FCfmt*);
        u32 new_size = new_max * sizeof(lib_ctype::FCfmt*);
        void *new_mem = algo_lib::malloc_ReallocMem(ctype.c_cfmt_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FCtype.c_cfmt");
        }
        ctype.c_cfmt_elems = (lib_ctype::FCfmt**)new_mem;
        ctype.c_cfmt_max = new_max;
    }
}

// --- lib_ctype.FCtype..Uninit
void lib_ctype::FCtype_Uninit(lib_ctype::FCtype& ctype) {
    lib_ctype::FCtype &row = ctype; (void)row;
    ind_ctype_Remove(row); // remove ctype from index ind_ctype

    // lib_ctype.FCtype.c_cfmt.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(ctype.c_cfmt_elems, sizeof(lib_ctype::FCfmt*)*ctype.c_cfmt_max); // (lib_ctype.FCtype.c_cfmt)

    // lib_ctype.FCtype.c_field.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(ctype.c_field_elems, sizeof(lib_ctype::FField*)*ctype.c_field_max); // (lib_ctype.FCtype.c_field)
}

// --- lib_ctype.trace..Print
// print string representation of lib_ctype::trace to string LHS, no header -- cprint:lib_ctype.trace.String
void lib_ctype::trace_Print(lib_ctype::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_ctype.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- lib_ctype.FDb.fconst.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FFconst& lib_ctype::fconst_Alloc() {
    lib_ctype::FFconst* row = fconst_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.fconst  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.fconst.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FFconst* lib_ctype::fconst_AllocMaybe() {
    lib_ctype::FFconst *row = (lib_ctype::FFconst*)fconst_AllocMem();
    if (row) {
        new (row) lib_ctype::FFconst; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.fconst.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FFconst* lib_ctype::fconst_InsertMaybe(const dmmeta::Fconst &value) {
    lib_ctype::FFconst *row = &fconst_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fconst_CopyIn(*row,const_cast<dmmeta::Fconst&>(value));
    bool ok = fconst_XrefMaybe(*row); // this may return false
    if (!ok) {
        fconst_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.fconst.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::fconst_AllocMem() {
    u64 new_nelems     = _db.fconst_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FFconst*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fconst_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FFconst*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFconst) * (u64(1)<<bsr));
            _db.fconst_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fconst_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.fconst.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::fconst_RemoveLast() {
    u64 n = _db.fconst_n;
    if (n > 0) {
        n -= 1;
        fconst_qFind(u64(n)).~FFconst();
        _db.fconst_n = i32(n);
    }
}

// --- lib_ctype.FDb.fconst.InputMaybe
static bool lib_ctype::fconst_InputMaybe(dmmeta::Fconst &elem) {
    bool retval = true;
    retval = fconst_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.fconst.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::fconst_XrefMaybe(lib_ctype::FFconst &row) {
    bool retval = true;
    (void)row;
    // insert fconst into index ind_fconst
    if (true) { // user-defined insert condition
        bool success = ind_fconst_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FDb.ind_fconst"; // check for duplicate key
            return false;
        }
    }
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(field_Get(row));
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", field_Get(row));
        return false;
    }
    // insert fconst into index zd_fconst
    if (true) { // user-defined insert condition
        zd_fconst_Insert(*p_field, row);
    }
    return retval;
}

// --- lib_ctype.FDb.ind_fconst_key.Find
// Find row by key. Return NULL if not found.
lib_ctype::FFconst* lib_ctype::ind_fconst_key_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_fconst_key_buckets_n - 1);
    lib_ctype::FFconst* *e = &_db.ind_fconst_key_buckets_elems[index];
    lib_ctype::FFconst* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).key == key;
        if (done) break;
        e         = &ret->ind_fconst_key_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_fconst_key.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FFconst& lib_ctype::ind_fconst_key_FindX(const algo::strptr& key) {
    lib_ctype::FFconst* ret = ind_fconst_key_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_fconst_key  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_fconst_key.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_fconst_key_InsertMaybe(lib_ctype::FFconst& row) {
    ind_fconst_key_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_fconst_key_next == (lib_ctype::FFconst*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_fconst_key_buckets_n - 1);
        lib_ctype::FFconst* *prev = &_db.ind_fconst_key_buckets_elems[index];
        do {
            lib_ctype::FFconst* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).key == row.key) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_fconst_key_next;
        } while (true);
        if (retval) {
            row.ind_fconst_key_next = *prev;
            _db.ind_fconst_key_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_fconst_key.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_fconst_key_Remove(lib_ctype::FFconst& row) {
    if (LIKELY(row.ind_fconst_key_next != (lib_ctype::FFconst*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.key) & (_db.ind_fconst_key_buckets_n - 1);
        lib_ctype::FFconst* *prev = &_db.ind_fconst_key_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FFconst *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_fconst_key_next; // unlink (singly linked list)
                _db.ind_fconst_key_n--;
                row.ind_fconst_key_next = (lib_ctype::FFconst*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_fconst_key_next;
        }
    }
}

// --- lib_ctype.FDb.ind_fconst_key.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_fconst_key_Reserve(int n) {
    u32 old_nbuckets = _db.ind_fconst_key_buckets_n;
    u32 new_nelems   = _db.ind_fconst_key_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FFconst*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FFconst*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FFconst* *new_buckets = (lib_ctype::FFconst**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_fconst_key");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_fconst_key_buckets_n; i++) {
            lib_ctype::FFconst* elem = _db.ind_fconst_key_buckets_elems[i];
            while (elem) {
                lib_ctype::FFconst &row        = *elem;
                lib_ctype::FFconst* next       = row.ind_fconst_key_next;
                u32 index          = algo::cstring_Hash(0, row.key) & (new_nbuckets-1);
                row.ind_fconst_key_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_fconst_key_buckets_elems, old_size);
        _db.ind_fconst_key_buckets_elems = new_buckets;
        _db.ind_fconst_key_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.ind_fconst.Find
// Find row by key. Return NULL if not found.
lib_ctype::FFconst* lib_ctype::ind_fconst_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_fconst_buckets_n - 1);
    lib_ctype::FFconst* *e = &_db.ind_fconst_buckets_elems[index];
    lib_ctype::FFconst* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).fconst == key;
        if (done) break;
        e         = &ret->ind_fconst_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_fconst.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FFconst& lib_ctype::ind_fconst_FindX(const algo::strptr& key) {
    lib_ctype::FFconst* ret = ind_fconst_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_fconst  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_fconst.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_fconst_InsertMaybe(lib_ctype::FFconst& row) {
    ind_fconst_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_fconst_next == (lib_ctype::FFconst*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.fconst) & (_db.ind_fconst_buckets_n - 1);
        lib_ctype::FFconst* *prev = &_db.ind_fconst_buckets_elems[index];
        do {
            lib_ctype::FFconst* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).fconst == row.fconst) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_fconst_next;
        } while (true);
        if (retval) {
            row.ind_fconst_next = *prev;
            _db.ind_fconst_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_fconst.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_fconst_Remove(lib_ctype::FFconst& row) {
    if (LIKELY(row.ind_fconst_next != (lib_ctype::FFconst*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.fconst) & (_db.ind_fconst_buckets_n - 1);
        lib_ctype::FFconst* *prev = &_db.ind_fconst_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FFconst *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_fconst_next; // unlink (singly linked list)
                _db.ind_fconst_n--;
                row.ind_fconst_next = (lib_ctype::FFconst*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_fconst_next;
        }
    }
}

// --- lib_ctype.FDb.ind_fconst.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_fconst_Reserve(int n) {
    u32 old_nbuckets = _db.ind_fconst_buckets_n;
    u32 new_nelems   = _db.ind_fconst_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FFconst*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FFconst*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FFconst* *new_buckets = (lib_ctype::FFconst**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_fconst");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_fconst_buckets_n; i++) {
            lib_ctype::FFconst* elem = _db.ind_fconst_buckets_elems[i];
            while (elem) {
                lib_ctype::FFconst &row        = *elem;
                lib_ctype::FFconst* next       = row.ind_fconst_next;
                u32 index          = algo::Smallstr100_Hash(0, row.fconst) & (new_nbuckets-1);
                row.ind_fconst_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_fconst_buckets_elems, old_size);
        _db.ind_fconst_buckets_elems = new_buckets;
        _db.ind_fconst_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.ssimfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FSsimfile& lib_ctype::ssimfile_Alloc() {
    lib_ctype::FSsimfile* row = ssimfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.ssimfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.ssimfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FSsimfile* lib_ctype::ssimfile_AllocMaybe() {
    lib_ctype::FSsimfile *row = (lib_ctype::FSsimfile*)ssimfile_AllocMem();
    if (row) {
        new (row) lib_ctype::FSsimfile; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.ssimfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FSsimfile* lib_ctype::ssimfile_InsertMaybe(const dmmeta::Ssimfile &value) {
    lib_ctype::FSsimfile *row = &ssimfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ssimfile_CopyIn(*row,const_cast<dmmeta::Ssimfile&>(value));
    bool ok = ssimfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        ssimfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.ssimfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::ssimfile_AllocMem() {
    u64 new_nelems     = _db.ssimfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FSsimfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ssimfile_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FSsimfile) * (u64(1)<<bsr));
            _db.ssimfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ssimfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.ssimfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::ssimfile_RemoveLast() {
    u64 n = _db.ssimfile_n;
    if (n > 0) {
        n -= 1;
        ssimfile_qFind(u64(n)).~FSsimfile();
        _db.ssimfile_n = i32(n);
    }
}

// --- lib_ctype.FDb.ssimfile.InputMaybe
static bool lib_ctype::ssimfile_InputMaybe(dmmeta::Ssimfile &elem) {
    bool retval = true;
    retval = ssimfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.ssimfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::ssimfile_XrefMaybe(lib_ctype::FSsimfile &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(row.ctype);
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_ctype" << Keyval("key", row.ctype);
        return false;
    }
    // ssimfile: save pointer to ctype
    if (true) { // user-defined insert condition
        row.p_ctype = p_ctype;
    }
    // insert ssimfile into index ind_ssimfile
    if (true) { // user-defined insert condition
        bool success = ind_ssimfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FDb.ind_ssimfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_ssimfile.Find
// Find row by key. Return NULL if not found.
lib_ctype::FSsimfile* lib_ctype::ind_ssimfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ssimfile_buckets_n - 1);
    lib_ctype::FSsimfile* *e = &_db.ind_ssimfile_buckets_elems[index];
    lib_ctype::FSsimfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ssimfile == key;
        if (done) break;
        e         = &ret->ind_ssimfile_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_ssimfile.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FSsimfile& lib_ctype::ind_ssimfile_FindX(const algo::strptr& key) {
    lib_ctype::FSsimfile* ret = ind_ssimfile_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_ssimfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_ssimfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_ssimfile_InsertMaybe(lib_ctype::FSsimfile& row) {
    ind_ssimfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ssimfile_next == (lib_ctype::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        lib_ctype::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index];
        do {
            lib_ctype::FSsimfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ssimfile == row.ssimfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ssimfile_next;
        } while (true);
        if (retval) {
            row.ind_ssimfile_next = *prev;
            _db.ind_ssimfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_ssimfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_ssimfile_Remove(lib_ctype::FSsimfile& row) {
    if (LIKELY(row.ind_ssimfile_next != (lib_ctype::FSsimfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ssimfile) & (_db.ind_ssimfile_buckets_n - 1);
        lib_ctype::FSsimfile* *prev = &_db.ind_ssimfile_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FSsimfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ssimfile_next; // unlink (singly linked list)
                _db.ind_ssimfile_n--;
                row.ind_ssimfile_next = (lib_ctype::FSsimfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ssimfile_next;
        }
    }
}

// --- lib_ctype.FDb.ind_ssimfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_ssimfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ssimfile_buckets_n;
    u32 new_nelems   = _db.ind_ssimfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FSsimfile*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FSsimfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FSsimfile* *new_buckets = (lib_ctype::FSsimfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_ssimfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ssimfile_buckets_n; i++) {
            lib_ctype::FSsimfile* elem = _db.ind_ssimfile_buckets_elems[i];
            while (elem) {
                lib_ctype::FSsimfile &row        = *elem;
                lib_ctype::FSsimfile* next       = row.ind_ssimfile_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ssimfile) & (new_nbuckets-1);
                row.ind_ssimfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ssimfile_buckets_elems, old_size);
        _db.ind_ssimfile_buckets_elems = new_buckets;
        _db.ind_ssimfile_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.ftuple.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FFtuple& lib_ctype::ftuple_Alloc() {
    lib_ctype::FFtuple* row = ftuple_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.ftuple  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.ftuple.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FFtuple* lib_ctype::ftuple_AllocMaybe() {
    lib_ctype::FFtuple *row = (lib_ctype::FFtuple*)ftuple_AllocMem();
    if (row) {
        new (row) lib_ctype::FFtuple; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.ftuple.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FFtuple* lib_ctype::ftuple_InsertMaybe(const dmmeta::Ftuple &value) {
    lib_ctype::FFtuple *row = &ftuple_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ftuple_CopyIn(*row,const_cast<dmmeta::Ftuple&>(value));
    bool ok = ftuple_XrefMaybe(*row); // this may return false
    if (!ok) {
        ftuple_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.ftuple.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::ftuple_AllocMem() {
    u64 new_nelems     = _db.ftuple_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FFtuple*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ftuple_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FFtuple*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFtuple) * (u64(1)<<bsr));
            _db.ftuple_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ftuple_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.ftuple.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::ftuple_RemoveLast() {
    u64 n = _db.ftuple_n;
    if (n > 0) {
        n -= 1;
        ftuple_qFind(u64(n)).~FFtuple();
        _db.ftuple_n = i32(n);
    }
}

// --- lib_ctype.FDb.ftuple.InputMaybe
static bool lib_ctype::ftuple_InputMaybe(dmmeta::Ftuple &elem) {
    bool retval = true;
    retval = ftuple_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.ftuple.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::ftuple_XrefMaybe(lib_ctype::FFtuple &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert ftuple into index c_ftuple
    if (true) { // user-defined insert condition
        bool success = c_ftuple_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FField.c_ftuple"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ctype.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FCtype& lib_ctype::ctype_Alloc() {
    lib_ctype::FCtype* row = ctype_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.ctype  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.ctype.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FCtype* lib_ctype::ctype_AllocMaybe() {
    lib_ctype::FCtype *row = (lib_ctype::FCtype*)ctype_AllocMem();
    if (row) {
        new (row) lib_ctype::FCtype; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.ctype.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FCtype* lib_ctype::ctype_InsertMaybe(const dmmeta::Ctype &value) {
    lib_ctype::FCtype *row = &ctype_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ctype_CopyIn(*row,const_cast<dmmeta::Ctype&>(value));
    bool ok = ctype_XrefMaybe(*row); // this may return false
    if (!ok) {
        ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.ctype.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::ctype_AllocMem() {
    u64 new_nelems     = _db.ctype_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FCtype*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ctype_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FCtype*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCtype) * (u64(1)<<bsr));
            _db.ctype_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ctype_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.ctype.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::ctype_RemoveLast() {
    u64 n = _db.ctype_n;
    if (n > 0) {
        n -= 1;
        ctype_qFind(u64(n)).~FCtype();
        _db.ctype_n = i32(n);
    }
}

// --- lib_ctype.FDb.ctype.InputMaybe
static bool lib_ctype::ctype_InputMaybe(dmmeta::Ctype &elem) {
    bool retval = true;
    retval = ctype_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.ctype.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::ctype_XrefMaybe(lib_ctype::FCtype &row) {
    bool retval = true;
    (void)row;
    // insert ctype into index ind_ctype
    if (true) { // user-defined insert condition
        bool success = ind_ctype_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FDb.ind_ctype"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_ctype.Find
// Find row by key. Return NULL if not found.
lib_ctype::FCtype* lib_ctype::ind_ctype_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_ctype_buckets_n - 1);
    lib_ctype::FCtype* *e = &_db.ind_ctype_buckets_elems[index];
    lib_ctype::FCtype* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_ctype_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_ctype.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FCtype& lib_ctype::ind_ctype_FindX(const algo::strptr& key) {
    lib_ctype::FCtype* ret = ind_ctype_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_ctype  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_ctype.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
lib_ctype::FCtype& lib_ctype::ind_ctype_GetOrCreate(const algo::strptr& key) {
    lib_ctype::FCtype* ret = ind_ctype_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ctype_Alloc();
        (*ret).ctype = key;
        bool good = ctype_XrefMaybe(*ret);
        if (!good) {
            ctype_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "lib_ctype.create_error  table:ind_ctype  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- lib_ctype.FDb.ind_ctype.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_ctype_InsertMaybe(lib_ctype::FCtype& row) {
    ind_ctype_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ctype_next == (lib_ctype::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        lib_ctype::FCtype* *prev = &_db.ind_ctype_buckets_elems[index];
        do {
            lib_ctype::FCtype* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ctype_next;
        } while (true);
        if (retval) {
            row.ind_ctype_next = *prev;
            _db.ind_ctype_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_ctype.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_ctype_Remove(lib_ctype::FCtype& row) {
    if (LIKELY(row.ind_ctype_next != (lib_ctype::FCtype*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.ctype) & (_db.ind_ctype_buckets_n - 1);
        lib_ctype::FCtype* *prev = &_db.ind_ctype_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FCtype *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ctype_next; // unlink (singly linked list)
                _db.ind_ctype_n--;
                row.ind_ctype_next = (lib_ctype::FCtype*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ctype_next;
        }
    }
}

// --- lib_ctype.FDb.ind_ctype.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_ctype_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ctype_buckets_n;
    u32 new_nelems   = _db.ind_ctype_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FCtype*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FCtype*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FCtype* *new_buckets = (lib_ctype::FCtype**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_ctype");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ctype_buckets_n; i++) {
            lib_ctype::FCtype* elem = _db.ind_ctype_buckets_elems[i];
            while (elem) {
                lib_ctype::FCtype &row        = *elem;
                lib_ctype::FCtype* next       = row.ind_ctype_next;
                u32 index          = algo::Smallstr50_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_ctype_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ctype_buckets_elems, old_size);
        _db.ind_ctype_buckets_elems = new_buckets;
        _db.ind_ctype_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.field.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FField& lib_ctype::field_Alloc() {
    lib_ctype::FField* row = field_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.field  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.field.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FField* lib_ctype::field_AllocMaybe() {
    lib_ctype::FField *row = (lib_ctype::FField*)field_AllocMem();
    if (row) {
        new (row) lib_ctype::FField; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.field.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FField* lib_ctype::field_InsertMaybe(const dmmeta::Field &value) {
    lib_ctype::FField *row = &field_Alloc(); // if out of memory, process dies. if input error, return NULL.
    field_CopyIn(*row,const_cast<dmmeta::Field&>(value));
    bool ok = field_XrefMaybe(*row); // this may return false
    if (!ok) {
        field_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.field.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::field_AllocMem() {
    u64 new_nelems     = _db.field_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FField*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.field_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FField*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FField) * (u64(1)<<bsr));
            _db.field_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.field_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.field.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::field_RemoveLast() {
    u64 n = _db.field_n;
    if (n > 0) {
        n -= 1;
        field_qFind(u64(n)).~FField();
        _db.field_n = i32(n);
    }
}

// --- lib_ctype.FDb.field.InputMaybe
static bool lib_ctype::field_InputMaybe(dmmeta::Field &elem) {
    bool retval = true;
    retval = field_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.field.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::field_XrefMaybe(lib_ctype::FField &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FCtype* p_arg = lib_ctype::ind_ctype_Find(row.arg);
    if (UNLIKELY(!p_arg)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_ctype" << Keyval("key", row.arg);
        return false;
    }
    // field: save pointer to arg
    if (true) { // user-defined insert condition
        row.p_arg = p_arg;
    }
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(ctype_Get(row));
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_ctype" << Keyval("key", ctype_Get(row));
        return false;
    }
    // insert field into index c_field
    if (true) { // user-defined insert condition
        c_field_Insert(*p_ctype, row);
    }
    // insert field into index ind_field
    if (true) { // user-defined insert condition
        bool success = ind_field_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FDb.ind_field"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_field.Find
// Find row by key. Return NULL if not found.
lib_ctype::FField* lib_ctype::ind_field_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_field_buckets_n - 1);
    lib_ctype::FField* *e = &_db.ind_field_buckets_elems[index];
    lib_ctype::FField* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).field == key;
        if (done) break;
        e         = &ret->ind_field_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_field.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FField& lib_ctype::ind_field_FindX(const algo::strptr& key) {
    lib_ctype::FField* ret = ind_field_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_field  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_field.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_field_InsertMaybe(lib_ctype::FField& row) {
    ind_field_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_field_next == (lib_ctype::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        lib_ctype::FField* *prev = &_db.ind_field_buckets_elems[index];
        do {
            lib_ctype::FField* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).field == row.field) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_field_next;
        } while (true);
        if (retval) {
            row.ind_field_next = *prev;
            _db.ind_field_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_field.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_field_Remove(lib_ctype::FField& row) {
    if (LIKELY(row.ind_field_next != (lib_ctype::FField*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.field) & (_db.ind_field_buckets_n - 1);
        lib_ctype::FField* *prev = &_db.ind_field_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FField *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_field_next; // unlink (singly linked list)
                _db.ind_field_n--;
                row.ind_field_next = (lib_ctype::FField*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_field_next;
        }
    }
}

// --- lib_ctype.FDb.ind_field.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_field_Reserve(int n) {
    u32 old_nbuckets = _db.ind_field_buckets_n;
    u32 new_nelems   = _db.ind_field_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FField*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FField*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FField* *new_buckets = (lib_ctype::FField**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_field");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_field_buckets_n; i++) {
            lib_ctype::FField* elem = _db.ind_field_buckets_elems[i];
            while (elem) {
                lib_ctype::FField &row        = *elem;
                lib_ctype::FField* next       = row.ind_field_next;
                u32 index          = algo::Smallstr100_Hash(0, row.field) & (new_nbuckets-1);
                row.ind_field_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_field_buckets_elems, old_size);
        _db.ind_field_buckets_elems = new_buckets;
        _db.ind_field_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.cdflt.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FCdflt& lib_ctype::cdflt_Alloc() {
    lib_ctype::FCdflt* row = cdflt_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.cdflt  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.cdflt.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FCdflt* lib_ctype::cdflt_AllocMaybe() {
    lib_ctype::FCdflt *row = (lib_ctype::FCdflt*)cdflt_AllocMem();
    if (row) {
        new (row) lib_ctype::FCdflt; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.cdflt.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FCdflt* lib_ctype::cdflt_InsertMaybe(const dmmeta::Cdflt &value) {
    lib_ctype::FCdflt *row = &cdflt_Alloc(); // if out of memory, process dies. if input error, return NULL.
    cdflt_CopyIn(*row,const_cast<dmmeta::Cdflt&>(value));
    bool ok = cdflt_XrefMaybe(*row); // this may return false
    if (!ok) {
        cdflt_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.cdflt.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::cdflt_AllocMem() {
    u64 new_nelems     = _db.cdflt_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FCdflt*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.cdflt_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FCdflt*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCdflt) * (u64(1)<<bsr));
            _db.cdflt_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.cdflt_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.cdflt.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::cdflt_RemoveLast() {
    u64 n = _db.cdflt_n;
    if (n > 0) {
        n -= 1;
        cdflt_qFind(u64(n)).~FCdflt();
        _db.cdflt_n = i32(n);
    }
}

// --- lib_ctype.FDb.cdflt.InputMaybe
static bool lib_ctype::cdflt_InputMaybe(dmmeta::Cdflt &elem) {
    bool retval = true;
    retval = cdflt_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.cdflt.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::cdflt_XrefMaybe(lib_ctype::FCdflt &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(row.ctype);
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_ctype" << Keyval("key", row.ctype);
        return false;
    }
    // insert cdflt into index c_cdflt
    if (true) { // user-defined insert condition
        bool success = c_cdflt_InsertMaybe(*p_ctype, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FCtype.c_cdflt"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void lib_ctype::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("lib_ctype", lib_ctype::InsertStrptrMaybe, NULL, NULL, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "lib_ctype.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(lib_ctype::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)lib_ctype::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'lib_ctype.Input'  signature:'2a47ece330ef76ad000ddf04b33a7e5a3ee2201b'");
}

// --- lib_ctype.FDb._db.StaticCheck
void lib_ctype::StaticCheck() {
    algo_assert(_offset_of(lib_ctype::FieldId, value) + sizeof(((lib_ctype::FieldId*)0)->value) == sizeof(lib_ctype::FieldId));
}

// --- lib_ctype.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool lib_ctype::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    lib_ctype::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case lib_ctype_TableId_dmmeta_Fconst: { // finput:lib_ctype.FDb.fconst
            dmmeta::Fconst elem;
            retval = dmmeta::Fconst_ReadStrptrMaybe(elem, str);
            retval = retval && fconst_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Ssimfile: { // finput:lib_ctype.FDb.ssimfile
            dmmeta::Ssimfile elem;
            retval = dmmeta::Ssimfile_ReadStrptrMaybe(elem, str);
            retval = retval && ssimfile_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Ftuple: { // finput:lib_ctype.FDb.ftuple
            dmmeta::Ftuple elem;
            retval = dmmeta::Ftuple_ReadStrptrMaybe(elem, str);
            retval = retval && ftuple_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Ctype: { // finput:lib_ctype.FDb.ctype
            dmmeta::Ctype elem;
            retval = dmmeta::Ctype_ReadStrptrMaybe(elem, str);
            retval = retval && ctype_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Field: { // finput:lib_ctype.FDb.field
            dmmeta::Field elem;
            retval = dmmeta::Field_ReadStrptrMaybe(elem, str);
            retval = retval && field_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Cdflt: { // finput:lib_ctype.FDb.cdflt
            dmmeta::Cdflt elem;
            retval = dmmeta::Cdflt_ReadStrptrMaybe(elem, str);
            retval = retval && cdflt_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Cfmt: { // finput:lib_ctype.FDb.cfmt
            dmmeta::Cfmt elem;
            retval = dmmeta::Cfmt_ReadStrptrMaybe(elem, str);
            retval = retval && cfmt_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Cppfunc: { // finput:lib_ctype.FDb.cppfunc
            dmmeta::Cppfunc elem;
            retval = dmmeta::Cppfunc_ReadStrptrMaybe(elem, str);
            retval = retval && cppfunc_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dmmeta_Substr: { // finput:lib_ctype.FDb.substr
            dmmeta::Substr elem;
            retval = dmmeta::Substr_ReadStrptrMaybe(elem, str);
            retval = retval && substr_InputMaybe(elem);
            break;
        }
        case lib_ctype_TableId_dev_Unstablefld: { // finput:lib_ctype.FDb.unstablefld
            dev::Unstablefld elem;
            retval = dev::Unstablefld_ReadStrptrMaybe(elem, str);
            retval = retval && unstablefld_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- lib_ctype.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool lib_ctype::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "dmmeta.ctype", "dmmeta.cdflt", "dmmeta.cfmt", "dmmeta.field"
        , "dmmeta.cppfunc", "dmmeta.fconst", "dmmeta.ftuple", "dmmeta.ssimfile"
        , "dmmeta.substr", "dev.unstablefld"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, lib_ctype::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- lib_ctype.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool lib_ctype::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, lib_ctype::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- lib_ctype.FDb._db.Steps
// Calls Step function of dependencies
void lib_ctype::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- lib_ctype.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- lib_ctype.FDb.cfmt.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FCfmt& lib_ctype::cfmt_Alloc() {
    lib_ctype::FCfmt* row = cfmt_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.cfmt  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.cfmt.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FCfmt* lib_ctype::cfmt_AllocMaybe() {
    lib_ctype::FCfmt *row = (lib_ctype::FCfmt*)cfmt_AllocMem();
    if (row) {
        new (row) lib_ctype::FCfmt; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.cfmt.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FCfmt* lib_ctype::cfmt_InsertMaybe(const dmmeta::Cfmt &value) {
    lib_ctype::FCfmt *row = &cfmt_Alloc(); // if out of memory, process dies. if input error, return NULL.
    cfmt_CopyIn(*row,const_cast<dmmeta::Cfmt&>(value));
    bool ok = cfmt_XrefMaybe(*row); // this may return false
    if (!ok) {
        cfmt_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.cfmt.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::cfmt_AllocMem() {
    u64 new_nelems     = _db.cfmt_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FCfmt*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.cfmt_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FCfmt*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCfmt) * (u64(1)<<bsr));
            _db.cfmt_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.cfmt_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.cfmt.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::cfmt_RemoveLast() {
    u64 n = _db.cfmt_n;
    if (n > 0) {
        n -= 1;
        cfmt_qFind(u64(n)).~FCfmt();
        _db.cfmt_n = i32(n);
    }
}

// --- lib_ctype.FDb.cfmt.InputMaybe
static bool lib_ctype::cfmt_InputMaybe(dmmeta::Cfmt &elem) {
    bool retval = true;
    retval = cfmt_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.cfmt.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::cfmt_XrefMaybe(lib_ctype::FCfmt &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(ctype_Get(row));
    if (UNLIKELY(!p_ctype)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_ctype" << Keyval("key", ctype_Get(row));
        return false;
    }
    // insert cfmt into index c_cfmt
    if (true) { // user-defined insert condition
        c_cfmt_Insert(*p_ctype, row);
    }
    // insert cfmt into index ind_cfmt
    if (true) { // user-defined insert condition
        bool success = ind_cfmt_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FDb.ind_cfmt"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_cfmt.Find
// Find row by key. Return NULL if not found.
lib_ctype::FCfmt* lib_ctype::ind_cfmt_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_cfmt_buckets_n - 1);
    lib_ctype::FCfmt* *e = &_db.ind_cfmt_buckets_elems[index];
    lib_ctype::FCfmt* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).cfmt == key;
        if (done) break;
        e         = &ret->ind_cfmt_next;
    } while (true);
    return ret;
}

// --- lib_ctype.FDb.ind_cfmt.FindX
// Look up row by key and return reference. Throw exception if not found
lib_ctype::FCfmt& lib_ctype::ind_cfmt_FindX(const algo::strptr& key) {
    lib_ctype::FCfmt* ret = ind_cfmt_Find(key);
    vrfy(ret, tempstr() << "lib_ctype.key_error  table:ind_cfmt  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- lib_ctype.FDb.ind_cfmt.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool lib_ctype::ind_cfmt_InsertMaybe(lib_ctype::FCfmt& row) {
    ind_cfmt_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_cfmt_next == (lib_ctype::FCfmt*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.cfmt) & (_db.ind_cfmt_buckets_n - 1);
        lib_ctype::FCfmt* *prev = &_db.ind_cfmt_buckets_elems[index];
        do {
            lib_ctype::FCfmt* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).cfmt == row.cfmt) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_cfmt_next;
        } while (true);
        if (retval) {
            row.ind_cfmt_next = *prev;
            _db.ind_cfmt_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.ind_cfmt.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void lib_ctype::ind_cfmt_Remove(lib_ctype::FCfmt& row) {
    if (LIKELY(row.ind_cfmt_next != (lib_ctype::FCfmt*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.cfmt) & (_db.ind_cfmt_buckets_n - 1);
        lib_ctype::FCfmt* *prev = &_db.ind_cfmt_buckets_elems[index]; // addr of pointer to current element
        while (lib_ctype::FCfmt *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_cfmt_next; // unlink (singly linked list)
                _db.ind_cfmt_n--;
                row.ind_cfmt_next = (lib_ctype::FCfmt*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_cfmt_next;
        }
    }
}

// --- lib_ctype.FDb.ind_cfmt.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void lib_ctype::ind_cfmt_Reserve(int n) {
    u32 old_nbuckets = _db.ind_cfmt_buckets_n;
    u32 new_nelems   = _db.ind_cfmt_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(lib_ctype::FCfmt*);
        u32 new_size = new_nbuckets * sizeof(lib_ctype::FCfmt*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        lib_ctype::FCfmt* *new_buckets = (lib_ctype::FCfmt**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FDb.ind_cfmt");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_cfmt_buckets_n; i++) {
            lib_ctype::FCfmt* elem = _db.ind_cfmt_buckets_elems[i];
            while (elem) {
                lib_ctype::FCfmt &row        = *elem;
                lib_ctype::FCfmt* next       = row.ind_cfmt_next;
                u32 index          = algo::Smallstr100_Hash(0, row.cfmt) & (new_nbuckets-1);
                row.ind_cfmt_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_cfmt_buckets_elems, old_size);
        _db.ind_cfmt_buckets_elems = new_buckets;
        _db.ind_cfmt_buckets_n = new_nbuckets;
    }
}

// --- lib_ctype.FDb.cppfunc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FCppfunc& lib_ctype::cppfunc_Alloc() {
    lib_ctype::FCppfunc* row = cppfunc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.cppfunc  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.cppfunc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FCppfunc* lib_ctype::cppfunc_AllocMaybe() {
    lib_ctype::FCppfunc *row = (lib_ctype::FCppfunc*)cppfunc_AllocMem();
    if (row) {
        new (row) lib_ctype::FCppfunc; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.cppfunc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FCppfunc* lib_ctype::cppfunc_InsertMaybe(const dmmeta::Cppfunc &value) {
    lib_ctype::FCppfunc *row = &cppfunc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    cppfunc_CopyIn(*row,const_cast<dmmeta::Cppfunc&>(value));
    bool ok = cppfunc_XrefMaybe(*row); // this may return false
    if (!ok) {
        cppfunc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.cppfunc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::cppfunc_AllocMem() {
    u64 new_nelems     = _db.cppfunc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FCppfunc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.cppfunc_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FCppfunc*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCppfunc) * (u64(1)<<bsr));
            _db.cppfunc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.cppfunc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.cppfunc.RemoveAll
// Remove all elements from Lary
void lib_ctype::cppfunc_RemoveAll() {
    for (u64 n = _db.cppfunc_n; n>0; ) {
        n--;
        cppfunc_qFind(u64(n)).~FCppfunc(); // destroy last element
        _db.cppfunc_n = i32(n);
    }
}

// --- lib_ctype.FDb.cppfunc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::cppfunc_RemoveLast() {
    u64 n = _db.cppfunc_n;
    if (n > 0) {
        n -= 1;
        cppfunc_qFind(u64(n)).~FCppfunc();
        _db.cppfunc_n = i32(n);
    }
}

// --- lib_ctype.FDb.cppfunc.InputMaybe
static bool lib_ctype::cppfunc_InputMaybe(dmmeta::Cppfunc &elem) {
    bool retval = true;
    retval = cppfunc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.cppfunc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::cppfunc_XrefMaybe(lib_ctype::FCppfunc &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert cppfunc into index c_cppfunc
    if (true) { // user-defined insert condition
        bool success = c_cppfunc_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FField.c_cppfunc"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.substr.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FSubstr& lib_ctype::substr_Alloc() {
    lib_ctype::FSubstr* row = substr_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.substr  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.substr.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FSubstr* lib_ctype::substr_AllocMaybe() {
    lib_ctype::FSubstr *row = (lib_ctype::FSubstr*)substr_AllocMem();
    if (row) {
        new (row) lib_ctype::FSubstr; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.substr.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FSubstr* lib_ctype::substr_InsertMaybe(const dmmeta::Substr &value) {
    lib_ctype::FSubstr *row = &substr_Alloc(); // if out of memory, process dies. if input error, return NULL.
    substr_CopyIn(*row,const_cast<dmmeta::Substr&>(value));
    bool ok = substr_XrefMaybe(*row); // this may return false
    if (!ok) {
        substr_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.substr.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::substr_AllocMem() {
    u64 new_nelems     = _db.substr_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FSubstr*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.substr_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FSubstr*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FSubstr) * (u64(1)<<bsr));
            _db.substr_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.substr_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.substr.RemoveAll
// Remove all elements from Lary
void lib_ctype::substr_RemoveAll() {
    for (u64 n = _db.substr_n; n>0; ) {
        n--;
        substr_qFind(u64(n)).~FSubstr(); // destroy last element
        _db.substr_n = i32(n);
    }
}

// --- lib_ctype.FDb.substr.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::substr_RemoveLast() {
    u64 n = _db.substr_n;
    if (n > 0) {
        n -= 1;
        substr_qFind(u64(n)).~FSubstr();
        _db.substr_n = i32(n);
    }
}

// --- lib_ctype.FDb.substr.InputMaybe
static bool lib_ctype::substr_InputMaybe(dmmeta::Substr &elem) {
    bool retval = true;
    retval = substr_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.substr.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::substr_XrefMaybe(lib_ctype::FSubstr &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // substr: save pointer to field
    if (true) { // user-defined insert condition
        row.p_field = p_field;
    }
    // insert substr into index c_substr
    if (true) { // user-defined insert condition
        bool success = c_substr_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FField.c_substr"; // check for duplicate key
            return false;
        }
    }
    lib_ctype::FField* p_srcfield = lib_ctype::ind_field_Find(row.srcfield);
    if (UNLIKELY(!p_srcfield)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", row.srcfield);
        return false;
    }
    // insert substr into index c_substr_srcfield
    if (true) { // user-defined insert condition
        c_substr_srcfield_Insert(*p_srcfield, row);
    }
    return retval;
}

// --- lib_ctype.FDb.unstablefld.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
lib_ctype::FUnstablefld& lib_ctype::unstablefld_Alloc() {
    lib_ctype::FUnstablefld* row = unstablefld_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("lib_ctype.out_of_mem  field:lib_ctype.FDb.unstablefld  comment:'Alloc failed'");
    }
    return *row;
}

// --- lib_ctype.FDb.unstablefld.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
lib_ctype::FUnstablefld* lib_ctype::unstablefld_AllocMaybe() {
    lib_ctype::FUnstablefld *row = (lib_ctype::FUnstablefld*)unstablefld_AllocMem();
    if (row) {
        new (row) lib_ctype::FUnstablefld; // call constructor
    }
    return row;
}

// --- lib_ctype.FDb.unstablefld.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
lib_ctype::FUnstablefld* lib_ctype::unstablefld_InsertMaybe(const dev::Unstablefld &value) {
    lib_ctype::FUnstablefld *row = &unstablefld_Alloc(); // if out of memory, process dies. if input error, return NULL.
    unstablefld_CopyIn(*row,const_cast<dev::Unstablefld&>(value));
    bool ok = unstablefld_XrefMaybe(*row); // this may return false
    if (!ok) {
        unstablefld_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- lib_ctype.FDb.unstablefld.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* lib_ctype::unstablefld_AllocMem() {
    u64 new_nelems     = _db.unstablefld_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    lib_ctype::FUnstablefld*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.unstablefld_lary[bsr];
        if (!lev) {
            lev=(lib_ctype::FUnstablefld*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FUnstablefld) * (u64(1)<<bsr));
            _db.unstablefld_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.unstablefld_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- lib_ctype.FDb.unstablefld.RemoveAll
// Remove all elements from Lary
void lib_ctype::unstablefld_RemoveAll() {
    for (u64 n = _db.unstablefld_n; n>0; ) {
        n--;
        unstablefld_qFind(u64(n)).~FUnstablefld(); // destroy last element
        _db.unstablefld_n = i32(n);
    }
}

// --- lib_ctype.FDb.unstablefld.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void lib_ctype::unstablefld_RemoveLast() {
    u64 n = _db.unstablefld_n;
    if (n > 0) {
        n -= 1;
        unstablefld_qFind(u64(n)).~FUnstablefld();
        _db.unstablefld_n = i32(n);
    }
}

// --- lib_ctype.FDb.unstablefld.InputMaybe
static bool lib_ctype::unstablefld_InputMaybe(dev::Unstablefld &elem) {
    bool retval = true;
    retval = unstablefld_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- lib_ctype.FDb.unstablefld.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_ctype::unstablefld_XrefMaybe(lib_ctype::FUnstablefld &row) {
    bool retval = true;
    (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (UNLIKELY(!p_field)) {
        algo_lib::ResetErrtext() << "lib_ctype.bad_xref  index:lib_ctype.FDb.ind_field" << Keyval("key", row.field);
        return false;
    }
    // insert unstablefld into index c_unstablefld
    if (true) { // user-defined insert condition
        bool success = c_unstablefld_InsertMaybe(*p_field, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "lib_ctype.duplicate_key  xref:lib_ctype.FField.c_unstablefld"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- lib_ctype.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr lib_ctype::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- lib_ctype.FDb.trace.N
// Function return 1
inline static i32 lib_ctype::trace_N() {
    return 1;
}

// --- lib_ctype.FDb..Init
// Set all fields to initial values.
void lib_ctype::FDb_Init() {
    // initialize LAry fconst (lib_ctype.FDb.fconst)
    _db.fconst_n = 0;
    memset(_db.fconst_lary, 0, sizeof(_db.fconst_lary)); // zero out all level pointers
    lib_ctype::FFconst* fconst_first = (lib_ctype::FFconst*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFconst) * (u64(1)<<4));
    if (!fconst_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fconst_lary[i]  = fconst_first;
        fconst_first    += 1ULL<<i;
    }
    // initialize hash table for lib_ctype::FFconst;
    _db.ind_fconst_key_n             	= 0; // (lib_ctype.FDb.ind_fconst_key)
    _db.ind_fconst_key_buckets_n     	= 4; // (lib_ctype.FDb.ind_fconst_key)
    _db.ind_fconst_key_buckets_elems 	= (lib_ctype::FFconst**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFconst*)*_db.ind_fconst_key_buckets_n); // initial buckets (lib_ctype.FDb.ind_fconst_key)
    if (!_db.ind_fconst_key_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_fconst_key)
    }
    memset(_db.ind_fconst_key_buckets_elems, 0, sizeof(lib_ctype::FFconst*)*_db.ind_fconst_key_buckets_n); // (lib_ctype.FDb.ind_fconst_key)
    // initialize hash table for lib_ctype::FFconst;
    _db.ind_fconst_n             	= 0; // (lib_ctype.FDb.ind_fconst)
    _db.ind_fconst_buckets_n     	= 4; // (lib_ctype.FDb.ind_fconst)
    _db.ind_fconst_buckets_elems 	= (lib_ctype::FFconst**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFconst*)*_db.ind_fconst_buckets_n); // initial buckets (lib_ctype.FDb.ind_fconst)
    if (!_db.ind_fconst_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_fconst)
    }
    memset(_db.ind_fconst_buckets_elems, 0, sizeof(lib_ctype::FFconst*)*_db.ind_fconst_buckets_n); // (lib_ctype.FDb.ind_fconst)
    // initialize LAry ssimfile (lib_ctype.FDb.ssimfile)
    _db.ssimfile_n = 0;
    memset(_db.ssimfile_lary, 0, sizeof(_db.ssimfile_lary)); // zero out all level pointers
    lib_ctype::FSsimfile* ssimfile_first = (lib_ctype::FSsimfile*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FSsimfile) * (u64(1)<<4));
    if (!ssimfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ssimfile_lary[i]  = ssimfile_first;
        ssimfile_first    += 1ULL<<i;
    }
    // initialize hash table for lib_ctype::FSsimfile;
    _db.ind_ssimfile_n             	= 0; // (lib_ctype.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_n     	= 4; // (lib_ctype.FDb.ind_ssimfile)
    _db.ind_ssimfile_buckets_elems 	= (lib_ctype::FSsimfile**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FSsimfile*)*_db.ind_ssimfile_buckets_n); // initial buckets (lib_ctype.FDb.ind_ssimfile)
    if (!_db.ind_ssimfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_ssimfile)
    }
    memset(_db.ind_ssimfile_buckets_elems, 0, sizeof(lib_ctype::FSsimfile*)*_db.ind_ssimfile_buckets_n); // (lib_ctype.FDb.ind_ssimfile)
    // initialize LAry ftuple (lib_ctype.FDb.ftuple)
    _db.ftuple_n = 0;
    memset(_db.ftuple_lary, 0, sizeof(_db.ftuple_lary)); // zero out all level pointers
    lib_ctype::FFtuple* ftuple_first = (lib_ctype::FFtuple*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FFtuple) * (u64(1)<<4));
    if (!ftuple_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ftuple_lary[i]  = ftuple_first;
        ftuple_first    += 1ULL<<i;
    }
    // initialize LAry ctype (lib_ctype.FDb.ctype)
    _db.ctype_n = 0;
    memset(_db.ctype_lary, 0, sizeof(_db.ctype_lary)); // zero out all level pointers
    lib_ctype::FCtype* ctype_first = (lib_ctype::FCtype*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCtype) * (u64(1)<<4));
    if (!ctype_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ctype_lary[i]  = ctype_first;
        ctype_first    += 1ULL<<i;
    }
    // initialize hash table for lib_ctype::FCtype;
    _db.ind_ctype_n             	= 0; // (lib_ctype.FDb.ind_ctype)
    _db.ind_ctype_buckets_n     	= 4; // (lib_ctype.FDb.ind_ctype)
    _db.ind_ctype_buckets_elems 	= (lib_ctype::FCtype**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCtype*)*_db.ind_ctype_buckets_n); // initial buckets (lib_ctype.FDb.ind_ctype)
    if (!_db.ind_ctype_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_ctype)
    }
    memset(_db.ind_ctype_buckets_elems, 0, sizeof(lib_ctype::FCtype*)*_db.ind_ctype_buckets_n); // (lib_ctype.FDb.ind_ctype)
    // initialize LAry field (lib_ctype.FDb.field)
    _db.field_n = 0;
    memset(_db.field_lary, 0, sizeof(_db.field_lary)); // zero out all level pointers
    lib_ctype::FField* field_first = (lib_ctype::FField*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FField) * (u64(1)<<4));
    if (!field_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.field_lary[i]  = field_first;
        field_first    += 1ULL<<i;
    }
    // initialize hash table for lib_ctype::FField;
    _db.ind_field_n             	= 0; // (lib_ctype.FDb.ind_field)
    _db.ind_field_buckets_n     	= 4; // (lib_ctype.FDb.ind_field)
    _db.ind_field_buckets_elems 	= (lib_ctype::FField**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FField*)*_db.ind_field_buckets_n); // initial buckets (lib_ctype.FDb.ind_field)
    if (!_db.ind_field_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_field)
    }
    memset(_db.ind_field_buckets_elems, 0, sizeof(lib_ctype::FField*)*_db.ind_field_buckets_n); // (lib_ctype.FDb.ind_field)
    // initialize LAry cdflt (lib_ctype.FDb.cdflt)
    _db.cdflt_n = 0;
    memset(_db.cdflt_lary, 0, sizeof(_db.cdflt_lary)); // zero out all level pointers
    lib_ctype::FCdflt* cdflt_first = (lib_ctype::FCdflt*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCdflt) * (u64(1)<<4));
    if (!cdflt_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.cdflt_lary[i]  = cdflt_first;
        cdflt_first    += 1ULL<<i;
    }
    // initialize LAry cfmt (lib_ctype.FDb.cfmt)
    _db.cfmt_n = 0;
    memset(_db.cfmt_lary, 0, sizeof(_db.cfmt_lary)); // zero out all level pointers
    lib_ctype::FCfmt* cfmt_first = (lib_ctype::FCfmt*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCfmt) * (u64(1)<<4));
    if (!cfmt_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.cfmt_lary[i]  = cfmt_first;
        cfmt_first    += 1ULL<<i;
    }
    // initialize hash table for lib_ctype::FCfmt;
    _db.ind_cfmt_n             	= 0; // (lib_ctype.FDb.ind_cfmt)
    _db.ind_cfmt_buckets_n     	= 4; // (lib_ctype.FDb.ind_cfmt)
    _db.ind_cfmt_buckets_elems 	= (lib_ctype::FCfmt**)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCfmt*)*_db.ind_cfmt_buckets_n); // initial buckets (lib_ctype.FDb.ind_cfmt)
    if (!_db.ind_cfmt_buckets_elems) {
        FatalErrorExit("out of memory"); // (lib_ctype.FDb.ind_cfmt)
    }
    memset(_db.ind_cfmt_buckets_elems, 0, sizeof(lib_ctype::FCfmt*)*_db.ind_cfmt_buckets_n); // (lib_ctype.FDb.ind_cfmt)
    // initialize LAry cppfunc (lib_ctype.FDb.cppfunc)
    _db.cppfunc_n = 0;
    memset(_db.cppfunc_lary, 0, sizeof(_db.cppfunc_lary)); // zero out all level pointers
    lib_ctype::FCppfunc* cppfunc_first = (lib_ctype::FCppfunc*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FCppfunc) * (u64(1)<<4));
    if (!cppfunc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.cppfunc_lary[i]  = cppfunc_first;
        cppfunc_first    += 1ULL<<i;
    }
    // initialize LAry substr (lib_ctype.FDb.substr)
    _db.substr_n = 0;
    memset(_db.substr_lary, 0, sizeof(_db.substr_lary)); // zero out all level pointers
    lib_ctype::FSubstr* substr_first = (lib_ctype::FSubstr*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FSubstr) * (u64(1)<<4));
    if (!substr_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.substr_lary[i]  = substr_first;
        substr_first    += 1ULL<<i;
    }
    _db.c_axprice = NULL;
    _db.c_fixmsg = NULL;
    _db.c_bool = NULL;
    // initialize LAry unstablefld (lib_ctype.FDb.unstablefld)
    _db.unstablefld_n = 0;
    memset(_db.unstablefld_lary, 0, sizeof(_db.unstablefld_lary)); // zero out all level pointers
    lib_ctype::FUnstablefld* unstablefld_first = (lib_ctype::FUnstablefld*)algo_lib::malloc_AllocMem(sizeof(lib_ctype::FUnstablefld) * (u64(1)<<4));
    if (!unstablefld_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.unstablefld_lary[i]  = unstablefld_first;
        unstablefld_first    += 1ULL<<i;
    }

    lib_ctype::InitReflection();
}

// --- lib_ctype.FDb..Uninit
void lib_ctype::FDb_Uninit() {
    lib_ctype::FDb &row = _db; (void)row;

    // lib_ctype.FDb.unstablefld.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.substr.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.cppfunc.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ind_cfmt.Uninit (Thash)  //
    // skip destruction of ind_cfmt in global scope

    // lib_ctype.FDb.cfmt.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.cdflt.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ind_field.Uninit (Thash)  //
    // skip destruction of ind_field in global scope

    // lib_ctype.FDb.field.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ind_ctype.Uninit (Thash)  //
    // skip destruction of ind_ctype in global scope

    // lib_ctype.FDb.ctype.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ftuple.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ind_ssimfile.Uninit (Thash)  //
    // skip destruction of ind_ssimfile in global scope

    // lib_ctype.FDb.ssimfile.Uninit (Lary)  //
    // skip destruction in global scope

    // lib_ctype.FDb.ind_fconst.Uninit (Thash)  //
    // skip destruction of ind_fconst in global scope

    // lib_ctype.FDb.ind_fconst_key.Uninit (Thash)  //
    // skip destruction of ind_fconst_key in global scope

    // lib_ctype.FDb.fconst.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- lib_ctype.FFconst.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::fconst_CopyOut(lib_ctype::FFconst &row, dmmeta::Fconst &out) {
    out.fconst = row.fconst;
    out.value = row.value;
    out.comment = row.comment;
}

// --- lib_ctype.FFconst.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::fconst_CopyIn(lib_ctype::FFconst &row, dmmeta::Fconst &in) {
    row.fconst = in.fconst;
    row.value = in.value;
    row.comment = in.comment;
}

// --- lib_ctype.FFconst.field.Get
algo::Smallstr100 lib_ctype::field_Get(lib_ctype::FFconst& fconst) {
    algo::Smallstr100 ret(algo::Pathcomp(fconst.fconst, "/LL"));
    return ret;
}

// --- lib_ctype.FFconst.name.Get
algo::Smallstr100 lib_ctype::name_Get(lib_ctype::FFconst& fconst) {
    algo::Smallstr100 ret(algo::Pathcomp(fconst.fconst, "/LR"));
    return ret;
}

// --- lib_ctype.FFconst..Uninit
void lib_ctype::FFconst_Uninit(lib_ctype::FFconst& fconst) {
    lib_ctype::FFconst &row = fconst; (void)row;
    ind_fconst_Remove(row); // remove fconst from index ind_fconst
    ind_fconst_key_Remove(row); // remove fconst from index ind_fconst_key
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(field_Get(row));
    if (p_field)  {
        zd_fconst_Remove(*p_field, row);// remove fconst from index zd_fconst
    }
}

// --- lib_ctype.FFconst..Print
// print string representation of lib_ctype::FFconst to string LHS, no header -- cprint:lib_ctype.FFconst.String
void lib_ctype::FFconst_Print(lib_ctype::FFconst & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_ctype.FFconst";

    algo::Smallstr100_Print(row.fconst, temp);
    PrintAttrSpaceReset(str,"fconst", temp);

    dmmeta::CppExpr_Print(row.value, temp);
    PrintAttrSpaceReset(str,"value", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);

    algo::cstring_Print(row.key, temp);
    PrintAttrSpaceReset(str,"key", temp);
}

// --- lib_ctype.FField.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::field_CopyOut(lib_ctype::FField &row, dmmeta::Field &out) {
    out.field = row.field;
    out.arg = row.arg;
    out.reftype = row.reftype;
    out.dflt = row.dflt;
    out.comment = row.comment;
}

// --- lib_ctype.FField.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::field_CopyIn(lib_ctype::FField &row, dmmeta::Field &in) {
    row.field = in.field;
    row.arg = in.arg;
    row.reftype = in.reftype;
    row.dflt = in.dflt;
    row.comment = in.comment;
}

// --- lib_ctype.FField.ctype.Get
algo::Smallstr50 lib_ctype::ctype_Get(lib_ctype::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RL"));
    return ret;
}

// --- lib_ctype.FField.ns.Get
algo::Smallstr16 lib_ctype::ns_Get(lib_ctype::FField& field) {
    algo::Smallstr16 ret(algo::Pathcomp(field.field, ".RL.RL"));
    return ret;
}

// --- lib_ctype.FField.name.Get
algo::Smallstr50 lib_ctype::name_Get(lib_ctype::FField& field) {
    algo::Smallstr50 ret(algo::Pathcomp(field.field, ".RR"));
    return ret;
}

// --- lib_ctype.FField.zd_fconst.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void lib_ctype::zd_fconst_Insert(lib_ctype::FField& field, lib_ctype::FFconst& row) {
    if (!zd_fconst_InLlistQ(row)) {
        lib_ctype::FFconst* old_tail = field.zd_fconst_tail;
        row.zd_fconst_next = NULL;
        row.zd_fconst_prev = old_tail;
        field.zd_fconst_tail = &row;
        lib_ctype::FFconst **new_row_a = &old_tail->zd_fconst_next;
        lib_ctype::FFconst **new_row_b = &field.zd_fconst_head;
        lib_ctype::FFconst **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        field.zd_fconst_n++;
    }
}

// --- lib_ctype.FField.zd_fconst.Remove
// Remove element from index. If element is not in index, do nothing.
void lib_ctype::zd_fconst_Remove(lib_ctype::FField& field, lib_ctype::FFconst& row) {
    if (zd_fconst_InLlistQ(row)) {
        lib_ctype::FFconst* old_head       = field.zd_fconst_head;
        (void)old_head; // in case it's not used
        lib_ctype::FFconst* prev = row.zd_fconst_prev;
        lib_ctype::FFconst* next = row.zd_fconst_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        lib_ctype::FFconst **new_next_a = &prev->zd_fconst_next;
        lib_ctype::FFconst **new_next_b = &field.zd_fconst_head;
        lib_ctype::FFconst **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        lib_ctype::FFconst **new_prev_a = &next->zd_fconst_prev;
        lib_ctype::FFconst **new_prev_b = &field.zd_fconst_tail;
        lib_ctype::FFconst **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        field.zd_fconst_n--;
        row.zd_fconst_next=(lib_ctype::FFconst*)-1; // not-in-list
    }
}

// --- lib_ctype.FField.zd_fconst.RemoveAll
// Empty the index. (The rows are not deleted)
void lib_ctype::zd_fconst_RemoveAll(lib_ctype::FField& field) {
    lib_ctype::FFconst* row = field.zd_fconst_head;
    field.zd_fconst_head = NULL;
    field.zd_fconst_tail = NULL;
    field.zd_fconst_n = 0;
    while (row) {
        lib_ctype::FFconst* row_next = row->zd_fconst_next;
        row->zd_fconst_next  = (lib_ctype::FFconst*)-1;
        row->zd_fconst_prev  = NULL;
        row = row_next;
    }
}

// --- lib_ctype.FField.zd_fconst.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
lib_ctype::FFconst* lib_ctype::zd_fconst_RemoveFirst(lib_ctype::FField& field) {
    lib_ctype::FFconst *row = NULL;
    row = field.zd_fconst_head;
    if (row) {
        lib_ctype::FFconst *next = row->zd_fconst_next;
        field.zd_fconst_head = next;
        lib_ctype::FFconst **new_end_a = &next->zd_fconst_prev;
        lib_ctype::FFconst **new_end_b = &field.zd_fconst_tail;
        lib_ctype::FFconst **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        field.zd_fconst_n--;
        row->zd_fconst_next = (lib_ctype::FFconst*)-1; // mark as not-in-list
    }
    return row;
}

// --- lib_ctype.FField.c_substr_srcfield.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void lib_ctype::c_substr_srcfield_Insert(lib_ctype::FField& field, lib_ctype::FSubstr& row) {
    if (bool_Update(row.field_c_substr_srcfield_in_ary,true)) {
        // reserve space
        c_substr_srcfield_Reserve(field, 1);
        u32 n  = field.c_substr_srcfield_n;
        u32 at = n;
        lib_ctype::FSubstr* *elems = field.c_substr_srcfield_elems;
        elems[at] = &row;
        field.c_substr_srcfield_n = n+1;

    }
}

// --- lib_ctype.FField.c_substr_srcfield.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool lib_ctype::c_substr_srcfield_InsertMaybe(lib_ctype::FField& field, lib_ctype::FSubstr& row) {
    bool retval = !row.field_c_substr_srcfield_in_ary;
    c_substr_srcfield_Insert(field,row); // check is performed in _Insert again
    return retval;
}

// --- lib_ctype.FField.c_substr_srcfield.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void lib_ctype::c_substr_srcfield_Remove(lib_ctype::FField& field, lib_ctype::FSubstr& row) {
    if (bool_Update(row.field_c_substr_srcfield_in_ary,false)) {
        int lim = field.c_substr_srcfield_n;
        lib_ctype::FSubstr* *elems = field.c_substr_srcfield_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            lib_ctype::FSubstr* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(lib_ctype::FSubstr*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                field.c_substr_srcfield_n = lim - 1;
                break;
            }
        }
    }
}

// --- lib_ctype.FField.c_substr_srcfield.Reserve
// Reserve space in index for N more elements;
void lib_ctype::c_substr_srcfield_Reserve(lib_ctype::FField& field, u32 n) {
    u32 old_max = field.c_substr_srcfield_max;
    if (UNLIKELY(field.c_substr_srcfield_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(lib_ctype::FSubstr*);
        u32 new_size = new_max * sizeof(lib_ctype::FSubstr*);
        void *new_mem = algo_lib::malloc_ReallocMem(field.c_substr_srcfield_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("lib_ctype.out_of_memory  field:lib_ctype.FField.c_substr_srcfield");
        }
        field.c_substr_srcfield_elems = (lib_ctype::FSubstr**)new_mem;
        field.c_substr_srcfield_max = new_max;
    }
}

// --- lib_ctype.FField..Init
// Set all fields to initial values.
void lib_ctype::FField_Init(lib_ctype::FField& field) {
    field.reftype = algo::strptr("Val");
    field.istuple_computed = bool(false);
    field.c_ftuple = NULL;
    field.p_arg = NULL;
    field.has_fconst = bool(false);
    field.istuple = bool(false);
    field.zd_fconst_head = NULL; // (lib_ctype.FField.zd_fconst)
    field.zd_fconst_n = 0; // (lib_ctype.FField.zd_fconst)
    field.zd_fconst_tail = NULL; // (lib_ctype.FField.zd_fconst)
    field.c_cppfunc = NULL;
    field.c_substr = NULL;
    field.c_unstablefld = NULL;
    field.c_substr_srcfield_elems = NULL; // (lib_ctype.FField.c_substr_srcfield)
    field.c_substr_srcfield_n = 0; // (lib_ctype.FField.c_substr_srcfield)
    field.c_substr_srcfield_max = 0; // (lib_ctype.FField.c_substr_srcfield)
    field.ctype_c_field_in_ary = bool(false);
    field.ind_field_next = (lib_ctype::FField*)-1; // (lib_ctype.FDb.ind_field) not-in-hash
}

// --- lib_ctype.FField..Uninit
void lib_ctype::FField_Uninit(lib_ctype::FField& field) {
    lib_ctype::FField &row = field; (void)row;
    lib_ctype::FCtype* p_ctype = lib_ctype::ind_ctype_Find(ctype_Get(row));
    if (p_ctype)  {
        c_field_Remove(*p_ctype, row);// remove field from index c_field
    }
    ind_field_Remove(row); // remove field from index ind_field

    // lib_ctype.FField.c_substr_srcfield.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(field.c_substr_srcfield_elems, sizeof(lib_ctype::FSubstr*)*field.c_substr_srcfield_max); // (lib_ctype.FField.c_substr_srcfield)
}

// --- lib_ctype.FField..Print
// print string representation of lib_ctype::FField to string LHS, no header -- cprint:lib_ctype.FField.String
void lib_ctype::FField_Print(lib_ctype::FField & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_ctype.FField";

    algo::Smallstr100_Print(row.field, temp);
    PrintAttrSpaceReset(str,"field", temp);

    algo::Smallstr50_Print(row.arg, temp);
    PrintAttrSpaceReset(str,"arg", temp);

    algo::Smallstr50_Print(row.reftype, temp);
    PrintAttrSpaceReset(str,"reftype", temp);

    dmmeta::CppExpr_Print(row.dflt, temp);
    PrintAttrSpaceReset(str,"dflt", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);

    bool_Print(row.istuple_computed, temp);
    PrintAttrSpaceReset(str,"istuple_computed", temp);

    u64_PrintHex(u64((const lib_ctype::FFtuple*)row.c_ftuple), temp, 8, true);
    PrintAttrSpaceReset(str,"c_ftuple", temp);

    bool_Print(row.has_fconst, temp);
    PrintAttrSpaceReset(str,"has_fconst", temp);

    bool_Print(row.istuple, temp);
    PrintAttrSpaceReset(str,"istuple", temp);

    u64_PrintHex(u64((const lib_ctype::FCppfunc*)row.c_cppfunc), temp, 8, true);
    PrintAttrSpaceReset(str,"c_cppfunc", temp);

    u64_PrintHex(u64((const lib_ctype::FSubstr*)row.c_substr), temp, 8, true);
    PrintAttrSpaceReset(str,"c_substr", temp);

    u64_PrintHex(u64((const lib_ctype::FUnstablefld*)row.c_unstablefld), temp, 8, true);
    PrintAttrSpaceReset(str,"c_unstablefld", temp);

    bool_Print(row.ctype_c_field_in_ary, temp);
    PrintAttrSpaceReset(str,"ctype_c_field_in_ary", temp);
}

// --- lib_ctype.FFtuple.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::ftuple_CopyOut(lib_ctype::FFtuple &row, dmmeta::Ftuple &out) {
    out.field = row.field;
    out.comment = row.comment;
}

// --- lib_ctype.FFtuple.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::ftuple_CopyIn(lib_ctype::FFtuple &row, dmmeta::Ftuple &in) {
    row.field = in.field;
    row.comment = in.comment;
}

// --- lib_ctype.FFtuple..Uninit
void lib_ctype::FFtuple_Uninit(lib_ctype::FFtuple& ftuple) {
    lib_ctype::FFtuple &row = ftuple; (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (p_field)  {
        c_ftuple_Remove(*p_field, row);// remove ftuple from index c_ftuple
    }
}

// --- lib_ctype.FSsimfile.msghdr.CopyOut
// Copy fields out of row
void lib_ctype::ssimfile_CopyOut(lib_ctype::FSsimfile &row, dmmeta::Ssimfile &out) {
    out.ssimfile = row.ssimfile;
    out.ctype = row.ctype;
}

// --- lib_ctype.FSsimfile.msghdr.CopyIn
// Copy fields in to row
void lib_ctype::ssimfile_CopyIn(lib_ctype::FSsimfile &row, dmmeta::Ssimfile &in) {
    row.ssimfile = in.ssimfile;
    row.ctype = in.ctype;
}

// --- lib_ctype.FSsimfile.ssimns.Get
algo::Smallstr16 lib_ctype::ssimns_Get(lib_ctype::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- lib_ctype.FSsimfile.ns.Get
algo::Smallstr16 lib_ctype::ns_Get(lib_ctype::FSsimfile& ssimfile) {
    algo::Smallstr16 ret(algo::Pathcomp(ssimfile.ssimfile, ".LL"));
    return ret;
}

// --- lib_ctype.FSsimfile.name.Get
algo::Smallstr50 lib_ctype::name_Get(lib_ctype::FSsimfile& ssimfile) {
    algo::Smallstr50 ret(algo::Pathcomp(ssimfile.ssimfile, ".RR"));
    return ret;
}

// --- lib_ctype.FSsimfile..Uninit
void lib_ctype::FSsimfile_Uninit(lib_ctype::FSsimfile& ssimfile) {
    lib_ctype::FSsimfile &row = ssimfile; (void)row;
    ind_ssimfile_Remove(row); // remove ssimfile from index ind_ssimfile
}

// --- lib_ctype.FSubstr.base.CopyOut
// Copy fields out of row
void lib_ctype::substr_CopyOut(lib_ctype::FSubstr &row, dmmeta::Substr &out) {
    out.field = row.field;
    out.expr = row.expr;
    out.srcfield = row.srcfield;
}

// --- lib_ctype.FSubstr.base.CopyIn
// Copy fields in to row
void lib_ctype::substr_CopyIn(lib_ctype::FSubstr &row, dmmeta::Substr &in) {
    row.field = in.field;
    row.expr = in.expr;
    row.srcfield = in.srcfield;
}

// --- lib_ctype.FSubstr..Uninit
void lib_ctype::FSubstr_Uninit(lib_ctype::FSubstr& substr) {
    lib_ctype::FSubstr &row = substr; (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (p_field)  {
        c_substr_Remove(*p_field, row);// remove substr from index c_substr
    }
    lib_ctype::FField* p_srcfield = lib_ctype::ind_field_Find(row.srcfield);
    if (p_srcfield)  {
        c_substr_srcfield_Remove(*p_srcfield, row);// remove substr from index c_substr_srcfield
    }
}

// --- lib_ctype.FUnstablefld.base.CopyOut
// Copy fields out of row
void lib_ctype::unstablefld_CopyOut(lib_ctype::FUnstablefld &row, dev::Unstablefld &out) {
    out.field = row.field;
    out.comment = row.comment;
}

// --- lib_ctype.FUnstablefld.base.CopyIn
// Copy fields in to row
void lib_ctype::unstablefld_CopyIn(lib_ctype::FUnstablefld &row, dev::Unstablefld &in) {
    row.field = in.field;
    row.comment = in.comment;
}

// --- lib_ctype.FUnstablefld..Uninit
void lib_ctype::FUnstablefld_Uninit(lib_ctype::FUnstablefld& unstablefld) {
    lib_ctype::FUnstablefld &row = unstablefld; (void)row;
    lib_ctype::FField* p_field = lib_ctype::ind_field_Find(row.field);
    if (p_field)  {
        c_unstablefld_Remove(*p_field, row);// remove unstablefld from index c_unstablefld
    }
}

// --- lib_ctype.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_ctype::value_ToCstr(const lib_ctype::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_ctype_FieldId_value       : ret = "value";  break;
    }
    return ret;
}

// --- lib_ctype.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_ctype::value_Print(const lib_ctype::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_ctype.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_ctype::value_SetStrptrMaybe(lib_ctype::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lib_ctype_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_ctype.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_ctype::value_SetStrptr(lib_ctype::FieldId& parent, algo::strptr rhs, lib_ctype_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_ctype.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_ctype::value_ReadStrptrMaybe(lib_ctype::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_ctype.FieldId..ReadStrptrMaybe
// Read fields of lib_ctype::FieldId from an ascii string.
// The format of the string is the format of the lib_ctype::FieldId's only field
bool lib_ctype::FieldId_ReadStrptrMaybe(lib_ctype::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_ctype.FieldId..Print
// print string representation of lib_ctype::FieldId to string LHS, no header -- cprint:lib_ctype.FieldId.String
void lib_ctype::FieldId_Print(lib_ctype::FieldId & row, algo::cstring &str) {
    lib_ctype::value_Print(row, str);
}

// --- lib_ctype.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_ctype::value_ToCstr(const lib_ctype::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_ctype_TableId_dmmeta_Cdflt: ret = "dmmeta.Cdflt";  break;
        case lib_ctype_TableId_dmmeta_Cfmt : ret = "dmmeta.Cfmt";  break;
        case lib_ctype_TableId_dmmeta_Cppfunc: ret = "dmmeta.Cppfunc";  break;
        case lib_ctype_TableId_dmmeta_Ctype: ret = "dmmeta.Ctype";  break;
        case lib_ctype_TableId_dmmeta_Fconst: ret = "dmmeta.Fconst";  break;
        case lib_ctype_TableId_dmmeta_Field: ret = "dmmeta.Field";  break;
        case lib_ctype_TableId_dmmeta_Ftuple: ret = "dmmeta.Ftuple";  break;
        case lib_ctype_TableId_dmmeta_Ssimfile: ret = "dmmeta.Ssimfile";  break;
        case lib_ctype_TableId_dmmeta_Substr: ret = "dmmeta.Substr";  break;
        case lib_ctype_TableId_dev_Unstablefld: ret = "dev.Unstablefld";  break;
    }
    return ret;
}

// --- lib_ctype.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_ctype::value_Print(const lib_ctype::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_ctype.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_ctype::value_SetStrptrMaybe(lib_ctype::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"fmt",3)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Cfmt); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"fmt",3)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_cfmt); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"dflt",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Cdflt); ret = true; break; }
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Field); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"dflt",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_cdflt); ret = true; break; }
                    if (memcmp(rhs.elems+8,"type",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_ctype); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"ield",4)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_field); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"const",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Fconst); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tuple",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Ftuple); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"ubstr",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Substr); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"const",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_fconst); ret = true; break; }
                    if (memcmp(rhs.elems+8,"tuple",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_ftuple); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"ubstr",5)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_substr); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"ppfunc",6)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Cppfunc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"ppfunc",6)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_cppfunc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','U','n','s','t'): {
                    if (memcmp(rhs.elems+8,"ablefld",7)==0) { value_SetEnum(parent,lib_ctype_TableId_dev_Unstablefld); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','u','n','s','t'): {
                    if (memcmp(rhs.elems+8,"ablefld",7)==0) { value_SetEnum(parent,lib_ctype_TableId_dev_unstablefld); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','S'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_Ssimfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','s'): {
                    if (memcmp(rhs.elems+8,"simfile",7)==0) { value_SetEnum(parent,lib_ctype_TableId_dmmeta_ssimfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_ctype.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_ctype::value_SetStrptr(lib_ctype::TableId& parent, algo::strptr rhs, lib_ctype_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_ctype.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_ctype::value_ReadStrptrMaybe(lib_ctype::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_ctype.TableId..ReadStrptrMaybe
// Read fields of lib_ctype::TableId from an ascii string.
// The format of the string is the format of the lib_ctype::TableId's only field
bool lib_ctype::TableId_ReadStrptrMaybe(lib_ctype::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_ctype.TableId..Print
// print string representation of lib_ctype::TableId to string LHS, no header -- cprint:lib_ctype.TableId.String
void lib_ctype::TableId_Print(lib_ctype::TableId & row, algo::cstring &str) {
    lib_ctype::value_Print(row, str);
}

// --- lib_ctype...SizeCheck
inline static void lib_ctype::SizeCheck() {
}
