//
// cpp/gen/atf_cov_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/atf_cov_gen.h"
#include "include/gen/atf_cov_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
atf_cov::FDb    atf_cov::_db;     // dependency found via dev.targdep

namespace atf_cov {
const char *atf_cov_help =
"atf_cov: Line coverage\n"
"Usage: atf_cov [options]\n"
"    OPTION      TYPE    DFLT                              COMMENT\n"
"    -in         string  \"data\"                            Input directory or filename, - for stdin\n"
"    -covdir     string  \"temp/covdata\"                    Output directory to save coverage data\n"
"    -logfile    string  \"\"                                Log file\n"
"    -runcmd     string  \"\"                                command to run\n"
"    -exclude    regx    \"(extern|include/gen|cpp/gen)/%\"  Exclude gitfiles (external, generated)\n"
"    -mergepath  string  \"\"                                colon-separated dir list to load .cov.ssim files from\n"
"    -gcov                                                 run gcov\n"
"    -ssim                                                 write out ssim files\n"
"    -report                                               write out all reports\n"
"    -capture                                              Write coverage information into tgtcov table\n"
"    -xmlpretty                                            Generate pretty-formatted XML\n"
"    -summary            Y                                 Show summary figures\n"
"    -check                                                Check coverage information against tgtcov table\n"
"    -verbose    int                                       Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int                                       Debug level (0..255); alias -d; cumulative\n"
"    -help                                                 Print help and exit; alias -h\n"
"    -version                                              Print version and exit\n"
"    -signature                                            Show signatures and exit; alias -sig\n"
;


} // namespace atf_cov
namespace atf_cov { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          covline_InputMaybe(dev::Covline &elem) __attribute__((nothrow));
    static bool          target_InputMaybe(dev::Target &elem) __attribute__((nothrow));
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    static bool          gitfile_InputMaybe(dev::Gitfile &elem) __attribute__((nothrow));
    static bool          covtarget_InputMaybe(dev::Covtarget &elem) __attribute__((nothrow));
    static bool          covfile_InputMaybe(dev::Covfile &elem) __attribute__((nothrow));
    static bool          tgtcov_InputMaybe(dev::Tgtcov &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- atf_cov.FCovfile.base.CopyOut
// Copy fields out of row
void atf_cov::covfile_CopyOut(atf_cov::FCovfile &row, dev::Covfile &out) {
    out.covfile = row.covfile;
    out.total = row.total;
    out.nonexe = row.nonexe;
    out.exe = row.exe;
    out.exer = row.exer;
    out.hit = row.hit;
    out.cov = row.cov;
}

// --- atf_cov.FCovfile.base.CopyIn
// Copy fields in to row
void atf_cov::covfile_CopyIn(atf_cov::FCovfile &row, dev::Covfile &in) {
    row.covfile = in.covfile;
    row.total = in.total;
    row.nonexe = in.nonexe;
    row.exe = in.exe;
    row.exer = in.exer;
    row.hit = in.hit;
    row.cov = in.cov;
}

// --- atf_cov.FCovfile..Uninit
void atf_cov::FCovfile_Uninit(atf_cov::FCovfile& covfile) {
    atf_cov::FCovfile &row = covfile; (void)row;
    atf_cov::FGitfile* p_covfile = atf_cov::ind_gitfile_Find(row.covfile);
    if (p_covfile)  {
        c_covfile_Remove(*p_covfile, row);// remove covfile from index c_covfile
    }
}

// --- atf_cov.FCovline.base.CopyOut
// Copy fields out of row
void atf_cov::covline_CopyOut(atf_cov::FCovline &row, dev::Covline &out) {
    out.covline = row.covline;
    out.flag = row.flag;
    out.hit = row.hit;
    out.text = row.text;
}

// --- atf_cov.FCovline.base.CopyIn
// Copy fields in to row
void atf_cov::covline_CopyIn(atf_cov::FCovline &row, dev::Covline &in) {
    row.covline = in.covline;
    row.flag = in.flag;
    row.hit = in.hit;
    row.text = in.text;
}

// --- atf_cov.FCovline.src.Get
algo::Smallstr200 atf_cov::src_Get(atf_cov::FCovline& covline) {
    algo::Smallstr200 ret(algo::Pathcomp(covline.covline, ":RL"));
    return ret;
}

// --- atf_cov.FCovline.line.Get
u32 atf_cov::line_Get(atf_cov::FCovline& covline) {
    u32 ret;
    ret = 0; // default value
    (void)u32_ReadStrptrMaybe(ret, algo::Pathcomp(covline.covline, ":RR"));
    return ret;
}

// --- atf_cov.FCovline..Uninit
void atf_cov::FCovline_Uninit(atf_cov::FCovline& covline) {
    atf_cov::FCovline &row = covline; (void)row;
    ind_covline_Remove(row); // remove covline from index ind_covline
    atf_cov::FGitfile* p_src = atf_cov::ind_gitfile_Find(src_Get(row));
    if (p_src)  {
        c_covline_Remove(*p_src, row);// remove covline from index c_covline
    }
}

// --- atf_cov.FCovline..Print
// print string representation of atf_cov::FCovline to string LHS, no header -- cprint:atf_cov.FCovline.String
void atf_cov::FCovline_Print(atf_cov::FCovline & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_cov.FCovline";

    algo::Smallstr200_Print(row.covline, temp);
    PrintAttrSpaceReset(str,"covline", temp);

    char_Print(row.flag, temp);
    PrintAttrSpaceReset(str,"flag", temp);

    u32_Print(row.hit, temp);
    PrintAttrSpaceReset(str,"hit", temp);

    algo::cstring_Print(row.text, temp);
    PrintAttrSpaceReset(str,"text", temp);

    bool_Print(row.gitfile_c_covline_in_ary, temp);
    PrintAttrSpaceReset(str,"gitfile_c_covline_in_ary", temp);
}

// --- atf_cov.FCovtarget.base.CopyOut
// Copy fields out of row
void atf_cov::covtarget_CopyOut(atf_cov::FCovtarget &row, dev::Covtarget &out) {
    out.covtarget = row.covtarget;
    out.total = row.total;
    out.nonexe = row.nonexe;
    out.exe = row.exe;
    out.exer = row.exer;
    out.hit = row.hit;
    out.cov = row.cov;
}

// --- atf_cov.FCovtarget.base.CopyIn
// Copy fields in to row
void atf_cov::covtarget_CopyIn(atf_cov::FCovtarget &row, dev::Covtarget &in) {
    row.covtarget = in.covtarget;
    row.total = in.total;
    row.nonexe = in.nonexe;
    row.exe = in.exe;
    row.exer = in.exer;
    row.hit = in.hit;
    row.cov = in.cov;
}

// --- atf_cov.FCovtarget..Uninit
void atf_cov::FCovtarget_Uninit(atf_cov::FCovtarget& covtarget) {
    atf_cov::FCovtarget &row = covtarget; (void)row;
    atf_cov::FTarget* p_covtarget = atf_cov::ind_target_Find(row.covtarget);
    if (p_covtarget)  {
        c_covtarget_Remove(*p_covtarget, row);// remove covtarget from index c_covtarget
    }
}

// --- atf_cov.trace..Print
// print string representation of atf_cov::trace to string LHS, no header -- cprint:atf_cov.trace.String
void atf_cov::trace_Print(atf_cov::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_cov.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- atf_cov.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     atf_cov.FDb.cmdline
//     algo_lib.FDb.cmdline
void atf_cov::ReadArgv() {
    command::atf_cov &cmd = atf_cov::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::atf_cov_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"atf_cov: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "atf_cov: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::atf_cov_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"atf_cov: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(atf_cov_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(atf_cov::LoadTuplesMaybe(cmd.in,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- atf_cov.FDb._db.MainLoop
// Main loop.
void atf_cov::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        atf_cov::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- atf_cov.FDb._db.Step
// Main step
void atf_cov::Step() {
}

// --- atf_cov.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void atf_cov::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("atf_cov", atf_cov::InsertStrptrMaybe, NULL, atf_cov::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "atf_cov.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(atf_cov::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)atf_cov::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'atf_cov.Input'  signature:'774b3462442086aab82bec334fc8af0881956e21'");
}

// --- atf_cov.FDb._db.StaticCheck
void atf_cov::StaticCheck() {
    algo_assert(_offset_of(atf_cov::FieldId, value) + sizeof(((atf_cov::FieldId*)0)->value) == sizeof(atf_cov::FieldId));
}

// --- atf_cov.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool atf_cov::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    atf_cov::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case atf_cov_TableId_dev_Covline: { // finput:atf_cov.FDb.covline
            dev::Covline elem;
            retval = dev::Covline_ReadStrptrMaybe(elem, str);
            retval = retval && covline_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Target: { // finput:atf_cov.FDb.target
            dev::Target elem;
            retval = dev::Target_ReadStrptrMaybe(elem, str);
            retval = retval && target_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Targsrc: { // finput:atf_cov.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Gitfile: { // finput:atf_cov.FDb.gitfile
            dev::Gitfile elem;
            retval = dev::Gitfile_ReadStrptrMaybe(elem, str);
            retval = retval && gitfile_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Covtarget: { // finput:atf_cov.FDb.covtarget
            dev::Covtarget elem;
            retval = dev::Covtarget_ReadStrptrMaybe(elem, str);
            retval = retval && covtarget_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Covfile: { // finput:atf_cov.FDb.covfile
            dev::Covfile elem;
            retval = dev::Covfile_ReadStrptrMaybe(elem, str);
            retval = retval && covfile_InputMaybe(elem);
            break;
        }
        case atf_cov_TableId_dev_Tgtcov: { // finput:atf_cov.FDb.tgtcov
            dev::Tgtcov elem;
            retval = dev::Tgtcov_ReadStrptrMaybe(elem, str);
            retval = retval && tgtcov_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- atf_cov.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool atf_cov::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = atf_cov::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = atf_cov::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.gitfile"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.covfile"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.covline"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.target"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.covtarget"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.targsrc"),recursive);
        retval = retval && atf_cov::LoadTuplesFile(algo::SsimFname(root,"dev.tgtcov"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- atf_cov.FDb._db.LoadTuplesFile
// Load all finputs from given file.
bool atf_cov::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo_FileFlags__throw);
    retval = LoadTuplesFd(fildes.fd, fname, recursive);
    return retval;
}

// --- atf_cov.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool atf_cov::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && atf_cov::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- atf_cov.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool atf_cov::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = atf_cov::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- atf_cov.FDb._db.Steps
// Calls Step function of dependencies
void atf_cov::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- atf_cov.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- atf_cov.FDb.covline.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FCovline& atf_cov::covline_Alloc() {
    atf_cov::FCovline* row = covline_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.covline  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.covline.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FCovline* atf_cov::covline_AllocMaybe() {
    atf_cov::FCovline *row = (atf_cov::FCovline*)covline_AllocMem();
    if (row) {
        new (row) atf_cov::FCovline; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.covline.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FCovline* atf_cov::covline_InsertMaybe(const dev::Covline &value) {
    atf_cov::FCovline *row = &covline_Alloc(); // if out of memory, process dies. if input error, return NULL.
    covline_CopyIn(*row,const_cast<dev::Covline&>(value));
    bool ok = covline_XrefMaybe(*row); // this may return false
    if (!ok) {
        covline_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.covline.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::covline_AllocMem() {
    u64 new_nelems     = _db.covline_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FCovline*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.covline_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FCovline*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovline) * (u64(1)<<bsr));
            _db.covline_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.covline_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.covline.RemoveAll
// Remove all elements from Lary
void atf_cov::covline_RemoveAll() {
    for (u64 n = _db.covline_n; n>0; ) {
        n--;
        covline_qFind(u64(n)).~FCovline(); // destroy last element
        _db.covline_n = i32(n);
    }
}

// --- atf_cov.FDb.covline.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::covline_RemoveLast() {
    u64 n = _db.covline_n;
    if (n > 0) {
        n -= 1;
        covline_qFind(u64(n)).~FCovline();
        _db.covline_n = i32(n);
    }
}

// --- atf_cov.FDb.covline.InputMaybe
static bool atf_cov::covline_InputMaybe(dev::Covline &elem) {
    bool retval = true;
    retval = covline_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.covline.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::covline_XrefMaybe(atf_cov::FCovline &row) {
    bool retval = true;
    (void)row;
    atf_cov::FGitfile* p_src = atf_cov::ind_gitfile_Find(src_Get(row));
    if (UNLIKELY(!p_src)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_gitfile" << Keyval("key", src_Get(row));
        return false;
    }
    // covline: save pointer to src
    if (true) { // user-defined insert condition
        row.p_gitfile = p_src;
    }
    // insert covline into index ind_covline
    if (true) { // user-defined insert condition
        bool success = ind_covline_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FDb.ind_covline"; // check for duplicate key
            return false;
        }
    }
    // insert covline into index c_covline
    if (true) { // user-defined insert condition
        c_covline_Insert(*p_src, row);
    }
    return retval;
}

// --- atf_cov.FDb.ind_covline.Find
// Find row by key. Return NULL if not found.
atf_cov::FCovline* atf_cov::ind_covline_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_covline_buckets_n - 1);
    atf_cov::FCovline* *e = &_db.ind_covline_buckets_elems[index];
    atf_cov::FCovline* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).covline == key;
        if (done) break;
        e         = &ret->ind_covline_next;
    } while (true);
    return ret;
}

// --- atf_cov.FDb.ind_covline.FindX
// Look up row by key and return reference. Throw exception if not found
atf_cov::FCovline& atf_cov::ind_covline_FindX(const algo::strptr& key) {
    atf_cov::FCovline* ret = ind_covline_Find(key);
    vrfy(ret, tempstr() << "atf_cov.key_error  table:ind_covline  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_cov.FDb.ind_covline.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_cov::ind_covline_InsertMaybe(atf_cov::FCovline& row) {
    ind_covline_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_covline_next == (atf_cov::FCovline*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.covline) & (_db.ind_covline_buckets_n - 1);
        atf_cov::FCovline* *prev = &_db.ind_covline_buckets_elems[index];
        do {
            atf_cov::FCovline* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).covline == row.covline) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_covline_next;
        } while (true);
        if (retval) {
            row.ind_covline_next = *prev;
            _db.ind_covline_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_covline.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_cov::ind_covline_Remove(atf_cov::FCovline& row) {
    if (LIKELY(row.ind_covline_next != (atf_cov::FCovline*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.covline) & (_db.ind_covline_buckets_n - 1);
        atf_cov::FCovline* *prev = &_db.ind_covline_buckets_elems[index]; // addr of pointer to current element
        while (atf_cov::FCovline *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_covline_next; // unlink (singly linked list)
                _db.ind_covline_n--;
                row.ind_covline_next = (atf_cov::FCovline*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_covline_next;
        }
    }
}

// --- atf_cov.FDb.ind_covline.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_cov::ind_covline_Reserve(int n) {
    u32 old_nbuckets = _db.ind_covline_buckets_n;
    u32 new_nelems   = _db.ind_covline_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_cov::FCovline*);
        u32 new_size = new_nbuckets * sizeof(atf_cov::FCovline*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_cov::FCovline* *new_buckets = (atf_cov::FCovline**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FDb.ind_covline");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_covline_buckets_n; i++) {
            atf_cov::FCovline* elem = _db.ind_covline_buckets_elems[i];
            while (elem) {
                atf_cov::FCovline &row        = *elem;
                atf_cov::FCovline* next       = row.ind_covline_next;
                u32 index          = algo::Smallstr200_Hash(0, row.covline) & (new_nbuckets-1);
                row.ind_covline_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_covline_buckets_elems, old_size);
        _db.ind_covline_buckets_elems = new_buckets;
        _db.ind_covline_buckets_n = new_nbuckets;
    }
}

// --- atf_cov.FDb.target.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FTarget& atf_cov::target_Alloc() {
    atf_cov::FTarget* row = target_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.target  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.target.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FTarget* atf_cov::target_AllocMaybe() {
    atf_cov::FTarget *row = (atf_cov::FTarget*)target_AllocMem();
    if (row) {
        new (row) atf_cov::FTarget; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.target.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FTarget* atf_cov::target_InsertMaybe(const dev::Target &value) {
    atf_cov::FTarget *row = &target_Alloc(); // if out of memory, process dies. if input error, return NULL.
    target_CopyIn(*row,const_cast<dev::Target&>(value));
    bool ok = target_XrefMaybe(*row); // this may return false
    if (!ok) {
        target_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.target.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::target_AllocMem() {
    u64 new_nelems     = _db.target_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FTarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.target_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FTarget*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTarget) * (u64(1)<<bsr));
            _db.target_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.target_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.target.RemoveAll
// Remove all elements from Lary
void atf_cov::target_RemoveAll() {
    for (u64 n = _db.target_n; n>0; ) {
        n--;
        target_qFind(u64(n)).~FTarget(); // destroy last element
        _db.target_n = i32(n);
    }
}

// --- atf_cov.FDb.target.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::target_RemoveLast() {
    u64 n = _db.target_n;
    if (n > 0) {
        n -= 1;
        target_qFind(u64(n)).~FTarget();
        _db.target_n = i32(n);
    }
}

// --- atf_cov.FDb.target.InputMaybe
static bool atf_cov::target_InputMaybe(dev::Target &elem) {
    bool retval = true;
    retval = target_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.target.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::target_XrefMaybe(atf_cov::FTarget &row) {
    bool retval = true;
    (void)row;
    // insert target into index ind_target
    if (true) { // user-defined insert condition
        bool success = ind_target_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FDb.ind_target"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_target.Find
// Find row by key. Return NULL if not found.
atf_cov::FTarget* atf_cov::ind_target_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_target_buckets_n - 1);
    atf_cov::FTarget* *e = &_db.ind_target_buckets_elems[index];
    atf_cov::FTarget* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_target_next;
    } while (true);
    return ret;
}

// --- atf_cov.FDb.ind_target.FindX
// Look up row by key and return reference. Throw exception if not found
atf_cov::FTarget& atf_cov::ind_target_FindX(const algo::strptr& key) {
    atf_cov::FTarget* ret = ind_target_Find(key);
    vrfy(ret, tempstr() << "atf_cov.key_error  table:ind_target  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_cov.FDb.ind_target.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_cov::FTarget& atf_cov::ind_target_GetOrCreate(const algo::strptr& key) {
    atf_cov::FTarget* ret = ind_target_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &target_Alloc();
        (*ret).target = key;
        bool good = target_XrefMaybe(*ret);
        if (!good) {
            target_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_cov.create_error  table:ind_target  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_cov.FDb.ind_target.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_cov::ind_target_InsertMaybe(atf_cov::FTarget& row) {
    ind_target_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_target_next == (atf_cov::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        atf_cov::FTarget* *prev = &_db.ind_target_buckets_elems[index];
        do {
            atf_cov::FTarget* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_target_next;
        } while (true);
        if (retval) {
            row.ind_target_next = *prev;
            _db.ind_target_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_target.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_cov::ind_target_Remove(atf_cov::FTarget& row) {
    if (LIKELY(row.ind_target_next != (atf_cov::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        atf_cov::FTarget* *prev = &_db.ind_target_buckets_elems[index]; // addr of pointer to current element
        while (atf_cov::FTarget *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_target_next; // unlink (singly linked list)
                _db.ind_target_n--;
                row.ind_target_next = (atf_cov::FTarget*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_target_next;
        }
    }
}

// --- atf_cov.FDb.ind_target.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_cov::ind_target_Reserve(int n) {
    u32 old_nbuckets = _db.ind_target_buckets_n;
    u32 new_nelems   = _db.ind_target_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_cov::FTarget*);
        u32 new_size = new_nbuckets * sizeof(atf_cov::FTarget*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_cov::FTarget* *new_buckets = (atf_cov::FTarget**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FDb.ind_target");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_target_buckets_n; i++) {
            atf_cov::FTarget* elem = _db.ind_target_buckets_elems[i];
            while (elem) {
                atf_cov::FTarget &row        = *elem;
                atf_cov::FTarget* next       = row.ind_target_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_target_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_target_buckets_elems, old_size);
        _db.ind_target_buckets_elems = new_buckets;
        _db.ind_target_buckets_n = new_nbuckets;
    }
}

// --- atf_cov.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FTargsrc& atf_cov::targsrc_Alloc() {
    atf_cov::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FTargsrc* atf_cov::targsrc_AllocMaybe() {
    atf_cov::FTargsrc *row = (atf_cov::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) atf_cov::FTargsrc; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FTargsrc* atf_cov::targsrc_InsertMaybe(const dev::Targsrc &value) {
    atf_cov::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.targsrc.RemoveAll
// Remove all elements from Lary
void atf_cov::targsrc_RemoveAll() {
    for (u64 n = _db.targsrc_n; n>0; ) {
        n--;
        targsrc_qFind(u64(n)).~FTargsrc(); // destroy last element
        _db.targsrc_n = i32(n);
    }
}

// --- atf_cov.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = i32(n);
    }
}

// --- atf_cov.FDb.targsrc.InputMaybe
static bool atf_cov::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::targsrc_XrefMaybe(atf_cov::FTargsrc &row) {
    bool retval = true;
    (void)row;
    atf_cov::FGitfile* p_src = atf_cov::ind_gitfile_Find(src_Get(row));
    if (UNLIKELY(!p_src)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_gitfile" << Keyval("key", src_Get(row));
        return false;
    }
    // targsrc: save pointer to src
    if (true) { // user-defined insert condition
        row.p_gitfile = p_src;
    }
    atf_cov::FTarget* p_target = atf_cov::ind_target_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_target" << Keyval("key", target_Get(row));
        return false;
    }
    // targsrc: save pointer to target
    if (true) { // user-defined insert condition
        row.p_target = p_target;
    }
    // insert targsrc into index ind_targsrc
    if (true) { // user-defined insert condition
        bool success = ind_targsrc_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FDb.ind_targsrc"; // check for duplicate key
            return false;
        }
    }
    // insert targsrc into index c_targsrc
    if (true) { // user-defined insert condition
        c_targsrc_Insert(*p_target, row);
    }
    // insert targsrc into index c_targsrc
    if (true) { // user-defined insert condition
        bool success = c_targsrc_InsertMaybe(*p_src, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FGitfile.c_targsrc"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_targsrc.Find
// Find row by key. Return NULL if not found.
atf_cov::FTargsrc* atf_cov::ind_targsrc_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_targsrc_buckets_n - 1);
    atf_cov::FTargsrc* *e = &_db.ind_targsrc_buckets_elems[index];
    atf_cov::FTargsrc* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).targsrc == key;
        if (done) break;
        e         = &ret->ind_targsrc_next;
    } while (true);
    return ret;
}

// --- atf_cov.FDb.ind_targsrc.FindX
// Look up row by key and return reference. Throw exception if not found
atf_cov::FTargsrc& atf_cov::ind_targsrc_FindX(const algo::strptr& key) {
    atf_cov::FTargsrc* ret = ind_targsrc_Find(key);
    vrfy(ret, tempstr() << "atf_cov.key_error  table:ind_targsrc  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_cov.FDb.ind_targsrc.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_cov::ind_targsrc_InsertMaybe(atf_cov::FTargsrc& row) {
    ind_targsrc_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_targsrc_next == (atf_cov::FTargsrc*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.targsrc) & (_db.ind_targsrc_buckets_n - 1);
        atf_cov::FTargsrc* *prev = &_db.ind_targsrc_buckets_elems[index];
        do {
            atf_cov::FTargsrc* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).targsrc == row.targsrc) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_targsrc_next;
        } while (true);
        if (retval) {
            row.ind_targsrc_next = *prev;
            _db.ind_targsrc_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_targsrc.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_cov::ind_targsrc_Remove(atf_cov::FTargsrc& row) {
    if (LIKELY(row.ind_targsrc_next != (atf_cov::FTargsrc*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.targsrc) & (_db.ind_targsrc_buckets_n - 1);
        atf_cov::FTargsrc* *prev = &_db.ind_targsrc_buckets_elems[index]; // addr of pointer to current element
        while (atf_cov::FTargsrc *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_targsrc_next; // unlink (singly linked list)
                _db.ind_targsrc_n--;
                row.ind_targsrc_next = (atf_cov::FTargsrc*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_targsrc_next;
        }
    }
}

// --- atf_cov.FDb.ind_targsrc.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_cov::ind_targsrc_Reserve(int n) {
    u32 old_nbuckets = _db.ind_targsrc_buckets_n;
    u32 new_nelems   = _db.ind_targsrc_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_cov::FTargsrc*);
        u32 new_size = new_nbuckets * sizeof(atf_cov::FTargsrc*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_cov::FTargsrc* *new_buckets = (atf_cov::FTargsrc**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FDb.ind_targsrc");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_targsrc_buckets_n; i++) {
            atf_cov::FTargsrc* elem = _db.ind_targsrc_buckets_elems[i];
            while (elem) {
                atf_cov::FTargsrc &row        = *elem;
                atf_cov::FTargsrc* next       = row.ind_targsrc_next;
                u32 index          = algo::Smallstr100_Hash(0, row.targsrc) & (new_nbuckets-1);
                row.ind_targsrc_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_targsrc_buckets_elems, old_size);
        _db.ind_targsrc_buckets_elems = new_buckets;
        _db.ind_targsrc_buckets_n = new_nbuckets;
    }
}

// --- atf_cov.FDb.gitfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FGitfile& atf_cov::gitfile_Alloc() {
    atf_cov::FGitfile* row = gitfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.gitfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.gitfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FGitfile* atf_cov::gitfile_AllocMaybe() {
    atf_cov::FGitfile *row = (atf_cov::FGitfile*)gitfile_AllocMem();
    if (row) {
        new (row) atf_cov::FGitfile; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.gitfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FGitfile* atf_cov::gitfile_InsertMaybe(const dev::Gitfile &value) {
    atf_cov::FGitfile *row = &gitfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gitfile_CopyIn(*row,const_cast<dev::Gitfile&>(value));
    bool ok = gitfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.gitfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::gitfile_AllocMem() {
    u64 new_nelems     = _db.gitfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FGitfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gitfile_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FGitfile*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FGitfile) * (u64(1)<<bsr));
            _db.gitfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gitfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.gitfile.RemoveAll
// Remove all elements from Lary
void atf_cov::gitfile_RemoveAll() {
    for (u64 n = _db.gitfile_n; n>0; ) {
        n--;
        gitfile_qFind(u64(n)).~FGitfile(); // destroy last element
        _db.gitfile_n = i32(n);
    }
}

// --- atf_cov.FDb.gitfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::gitfile_RemoveLast() {
    u64 n = _db.gitfile_n;
    if (n > 0) {
        n -= 1;
        gitfile_qFind(u64(n)).~FGitfile();
        _db.gitfile_n = i32(n);
    }
}

// --- atf_cov.FDb.gitfile.InputMaybe
static bool atf_cov::gitfile_InputMaybe(dev::Gitfile &elem) {
    bool retval = true;
    retval = gitfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.gitfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::gitfile_XrefMaybe(atf_cov::FGitfile &row) {
    bool retval = true;
    (void)row;
    // insert gitfile into index ind_gitfile
    if (true) { // user-defined insert condition
        bool success = ind_gitfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FDb.ind_gitfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_gitfile.Find
// Find row by key. Return NULL if not found.
atf_cov::FGitfile* atf_cov::ind_gitfile_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr200_Hash(0, key) & (_db.ind_gitfile_buckets_n - 1);
    atf_cov::FGitfile* *e = &_db.ind_gitfile_buckets_elems[index];
    atf_cov::FGitfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).gitfile == key;
        if (done) break;
        e         = &ret->ind_gitfile_next;
    } while (true);
    return ret;
}

// --- atf_cov.FDb.ind_gitfile.FindX
// Look up row by key and return reference. Throw exception if not found
atf_cov::FGitfile& atf_cov::ind_gitfile_FindX(const algo::strptr& key) {
    atf_cov::FGitfile* ret = ind_gitfile_Find(key);
    vrfy(ret, tempstr() << "atf_cov.key_error  table:ind_gitfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_cov.FDb.ind_gitfile.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_cov::FGitfile& atf_cov::ind_gitfile_GetOrCreate(const algo::strptr& key) {
    atf_cov::FGitfile* ret = ind_gitfile_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &gitfile_Alloc();
        (*ret).gitfile = key;
        bool good = gitfile_XrefMaybe(*ret);
        if (!good) {
            gitfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_cov.create_error  table:ind_gitfile  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_cov.FDb.ind_gitfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_cov::ind_gitfile_InsertMaybe(atf_cov::FGitfile& row) {
    ind_gitfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_gitfile_next == (atf_cov::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        atf_cov::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index];
        do {
            atf_cov::FGitfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).gitfile == row.gitfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_gitfile_next;
        } while (true);
        if (retval) {
            row.ind_gitfile_next = *prev;
            _db.ind_gitfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_gitfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_cov::ind_gitfile_Remove(atf_cov::FGitfile& row) {
    if (LIKELY(row.ind_gitfile_next != (atf_cov::FGitfile*)-1)) {// check if in hash already
        u32 index = algo::Smallstr200_Hash(0, row.gitfile) & (_db.ind_gitfile_buckets_n - 1);
        atf_cov::FGitfile* *prev = &_db.ind_gitfile_buckets_elems[index]; // addr of pointer to current element
        while (atf_cov::FGitfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_gitfile_next; // unlink (singly linked list)
                _db.ind_gitfile_n--;
                row.ind_gitfile_next = (atf_cov::FGitfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_gitfile_next;
        }
    }
}

// --- atf_cov.FDb.ind_gitfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_cov::ind_gitfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_gitfile_buckets_n;
    u32 new_nelems   = _db.ind_gitfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_cov::FGitfile*);
        u32 new_size = new_nbuckets * sizeof(atf_cov::FGitfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_cov::FGitfile* *new_buckets = (atf_cov::FGitfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FDb.ind_gitfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_gitfile_buckets_n; i++) {
            atf_cov::FGitfile* elem = _db.ind_gitfile_buckets_elems[i];
            while (elem) {
                atf_cov::FGitfile &row        = *elem;
                atf_cov::FGitfile* next       = row.ind_gitfile_next;
                u32 index          = algo::Smallstr200_Hash(0, row.gitfile) & (new_nbuckets-1);
                row.ind_gitfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_gitfile_buckets_elems, old_size);
        _db.ind_gitfile_buckets_elems = new_buckets;
        _db.ind_gitfile_buckets_n = new_nbuckets;
    }
}

// --- atf_cov.FDb.covtarget.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FCovtarget& atf_cov::covtarget_Alloc() {
    atf_cov::FCovtarget* row = covtarget_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.covtarget  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.covtarget.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FCovtarget* atf_cov::covtarget_AllocMaybe() {
    atf_cov::FCovtarget *row = (atf_cov::FCovtarget*)covtarget_AllocMem();
    if (row) {
        new (row) atf_cov::FCovtarget; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.covtarget.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FCovtarget* atf_cov::covtarget_InsertMaybe(const dev::Covtarget &value) {
    atf_cov::FCovtarget *row = &covtarget_Alloc(); // if out of memory, process dies. if input error, return NULL.
    covtarget_CopyIn(*row,const_cast<dev::Covtarget&>(value));
    bool ok = covtarget_XrefMaybe(*row); // this may return false
    if (!ok) {
        covtarget_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.covtarget.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::covtarget_AllocMem() {
    u64 new_nelems     = _db.covtarget_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FCovtarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.covtarget_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FCovtarget*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovtarget) * (u64(1)<<bsr));
            _db.covtarget_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.covtarget_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.covtarget.RemoveAll
// Remove all elements from Lary
void atf_cov::covtarget_RemoveAll() {
    for (u64 n = _db.covtarget_n; n>0; ) {
        n--;
        covtarget_qFind(u64(n)).~FCovtarget(); // destroy last element
        _db.covtarget_n = i32(n);
    }
}

// --- atf_cov.FDb.covtarget.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::covtarget_RemoveLast() {
    u64 n = _db.covtarget_n;
    if (n > 0) {
        n -= 1;
        covtarget_qFind(u64(n)).~FCovtarget();
        _db.covtarget_n = i32(n);
    }
}

// --- atf_cov.FDb.covtarget.InputMaybe
static bool atf_cov::covtarget_InputMaybe(dev::Covtarget &elem) {
    bool retval = true;
    retval = covtarget_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.covtarget.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::covtarget_XrefMaybe(atf_cov::FCovtarget &row) {
    bool retval = true;
    (void)row;
    atf_cov::FTarget* p_covtarget = atf_cov::ind_target_Find(row.covtarget);
    if (UNLIKELY(!p_covtarget)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_target" << Keyval("key", row.covtarget);
        return false;
    }
    // insert covtarget into index c_covtarget
    if (true) { // user-defined insert condition
        bool success = c_covtarget_InsertMaybe(*p_covtarget, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FTarget.c_covtarget"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.covfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FCovfile& atf_cov::covfile_Alloc() {
    atf_cov::FCovfile* row = covfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.covfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.covfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FCovfile* atf_cov::covfile_AllocMaybe() {
    atf_cov::FCovfile *row = (atf_cov::FCovfile*)covfile_AllocMem();
    if (row) {
        new (row) atf_cov::FCovfile; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.covfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FCovfile* atf_cov::covfile_InsertMaybe(const dev::Covfile &value) {
    atf_cov::FCovfile *row = &covfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    covfile_CopyIn(*row,const_cast<dev::Covfile&>(value));
    bool ok = covfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        covfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.covfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::covfile_AllocMem() {
    u64 new_nelems     = _db.covfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FCovfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.covfile_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FCovfile*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovfile) * (u64(1)<<bsr));
            _db.covfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.covfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.covfile.RemoveAll
// Remove all elements from Lary
void atf_cov::covfile_RemoveAll() {
    for (u64 n = _db.covfile_n; n>0; ) {
        n--;
        covfile_qFind(u64(n)).~FCovfile(); // destroy last element
        _db.covfile_n = i32(n);
    }
}

// --- atf_cov.FDb.covfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::covfile_RemoveLast() {
    u64 n = _db.covfile_n;
    if (n > 0) {
        n -= 1;
        covfile_qFind(u64(n)).~FCovfile();
        _db.covfile_n = i32(n);
    }
}

// --- atf_cov.FDb.covfile.InputMaybe
static bool atf_cov::covfile_InputMaybe(dev::Covfile &elem) {
    bool retval = true;
    retval = covfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.covfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::covfile_XrefMaybe(atf_cov::FCovfile &row) {
    bool retval = true;
    (void)row;
    atf_cov::FGitfile* p_covfile = atf_cov::ind_gitfile_Find(row.covfile);
    if (UNLIKELY(!p_covfile)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_gitfile" << Keyval("key", row.covfile);
        return false;
    }
    // insert covfile into index c_covfile
    if (true) { // user-defined insert condition
        bool success = c_covfile_InsertMaybe(*p_covfile, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FGitfile.c_covfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.tgtcov.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_cov::FTgtcov& atf_cov::tgtcov_Alloc() {
    atf_cov::FTgtcov* row = tgtcov_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_cov.out_of_mem  field:atf_cov.FDb.tgtcov  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_cov.FDb.tgtcov.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_cov::FTgtcov* atf_cov::tgtcov_AllocMaybe() {
    atf_cov::FTgtcov *row = (atf_cov::FTgtcov*)tgtcov_AllocMem();
    if (row) {
        new (row) atf_cov::FTgtcov; // call constructor
    }
    return row;
}

// --- atf_cov.FDb.tgtcov.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_cov::FTgtcov* atf_cov::tgtcov_InsertMaybe(const dev::Tgtcov &value) {
    atf_cov::FTgtcov *row = &tgtcov_Alloc(); // if out of memory, process dies. if input error, return NULL.
    tgtcov_CopyIn(*row,const_cast<dev::Tgtcov&>(value));
    bool ok = tgtcov_XrefMaybe(*row); // this may return false
    if (!ok) {
        tgtcov_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_cov.FDb.tgtcov.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_cov::tgtcov_AllocMem() {
    u64 new_nelems     = _db.tgtcov_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_cov::FTgtcov*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.tgtcov_lary[bsr];
        if (!lev) {
            lev=(atf_cov::FTgtcov*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTgtcov) * (u64(1)<<bsr));
            _db.tgtcov_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.tgtcov_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_cov.FDb.tgtcov.RemoveAll
// Remove all elements from Lary
void atf_cov::tgtcov_RemoveAll() {
    for (u64 n = _db.tgtcov_n; n>0; ) {
        n--;
        tgtcov_qFind(u64(n)).~FTgtcov(); // destroy last element
        _db.tgtcov_n = i32(n);
    }
}

// --- atf_cov.FDb.tgtcov.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_cov::tgtcov_RemoveLast() {
    u64 n = _db.tgtcov_n;
    if (n > 0) {
        n -= 1;
        tgtcov_qFind(u64(n)).~FTgtcov();
        _db.tgtcov_n = i32(n);
    }
}

// --- atf_cov.FDb.tgtcov.InputMaybe
static bool atf_cov::tgtcov_InputMaybe(dev::Tgtcov &elem) {
    bool retval = true;
    retval = tgtcov_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_cov.FDb.tgtcov.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_cov::tgtcov_XrefMaybe(atf_cov::FTgtcov &row) {
    bool retval = true;
    (void)row;
    // insert tgtcov into index ind_tgtcov
    if (true) { // user-defined insert condition
        bool success = ind_tgtcov_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FDb.ind_tgtcov"; // check for duplicate key
            return false;
        }
    }
    atf_cov::FTarget* p_target = atf_cov::ind_target_Find(row.target);
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "atf_cov.bad_xref  index:atf_cov.FDb.ind_target" << Keyval("key", row.target);
        return false;
    }
    // insert tgtcov into index c_tgtcov
    if (true) { // user-defined insert condition
        bool success = c_tgtcov_InsertMaybe(*p_target, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_cov.duplicate_key  xref:atf_cov.FTarget.c_tgtcov"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_tgtcov.Find
// Find row by key. Return NULL if not found.
atf_cov::FTgtcov* atf_cov::ind_tgtcov_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_tgtcov_buckets_n - 1);
    atf_cov::FTgtcov* *e = &_db.ind_tgtcov_buckets_elems[index];
    atf_cov::FTgtcov* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_tgtcov_next;
    } while (true);
    return ret;
}

// --- atf_cov.FDb.ind_tgtcov.FindX
// Look up row by key and return reference. Throw exception if not found
atf_cov::FTgtcov& atf_cov::ind_tgtcov_FindX(const algo::strptr& key) {
    atf_cov::FTgtcov* ret = ind_tgtcov_Find(key);
    vrfy(ret, tempstr() << "atf_cov.key_error  table:ind_tgtcov  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_cov.FDb.ind_tgtcov.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_cov::ind_tgtcov_InsertMaybe(atf_cov::FTgtcov& row) {
    ind_tgtcov_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_tgtcov_next == (atf_cov::FTgtcov*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_tgtcov_buckets_n - 1);
        atf_cov::FTgtcov* *prev = &_db.ind_tgtcov_buckets_elems[index];
        do {
            atf_cov::FTgtcov* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_tgtcov_next;
        } while (true);
        if (retval) {
            row.ind_tgtcov_next = *prev;
            _db.ind_tgtcov_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_cov.FDb.ind_tgtcov.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_cov::ind_tgtcov_Remove(atf_cov::FTgtcov& row) {
    if (LIKELY(row.ind_tgtcov_next != (atf_cov::FTgtcov*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_tgtcov_buckets_n - 1);
        atf_cov::FTgtcov* *prev = &_db.ind_tgtcov_buckets_elems[index]; // addr of pointer to current element
        while (atf_cov::FTgtcov *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_tgtcov_next; // unlink (singly linked list)
                _db.ind_tgtcov_n--;
                row.ind_tgtcov_next = (atf_cov::FTgtcov*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_tgtcov_next;
        }
    }
}

// --- atf_cov.FDb.ind_tgtcov.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_cov::ind_tgtcov_Reserve(int n) {
    u32 old_nbuckets = _db.ind_tgtcov_buckets_n;
    u32 new_nelems   = _db.ind_tgtcov_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_cov::FTgtcov*);
        u32 new_size = new_nbuckets * sizeof(atf_cov::FTgtcov*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_cov::FTgtcov* *new_buckets = (atf_cov::FTgtcov**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FDb.ind_tgtcov");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_tgtcov_buckets_n; i++) {
            atf_cov::FTgtcov* elem = _db.ind_tgtcov_buckets_elems[i];
            while (elem) {
                atf_cov::FTgtcov &row        = *elem;
                atf_cov::FTgtcov* next       = row.ind_tgtcov_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_tgtcov_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_tgtcov_buckets_elems, old_size);
        _db.ind_tgtcov_buckets_elems = new_buckets;
        _db.ind_tgtcov_buckets_n = new_nbuckets;
    }
}

// --- atf_cov.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr atf_cov::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- atf_cov.FDb.trace.N
// Function return 1
inline static i32 atf_cov::trace_N() {
    return 1;
}

// --- atf_cov.FDb..Init
// Set all fields to initial values.
void atf_cov::FDb_Init() {
    // initialize LAry covline (atf_cov.FDb.covline)
    _db.covline_n = 0;
    memset(_db.covline_lary, 0, sizeof(_db.covline_lary)); // zero out all level pointers
    atf_cov::FCovline* covline_first = (atf_cov::FCovline*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovline) * (u64(1)<<4));
    if (!covline_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.covline_lary[i]  = covline_first;
        covline_first    += 1ULL<<i;
    }
    // initialize hash table for atf_cov::FCovline;
    _db.ind_covline_n             	= 0; // (atf_cov.FDb.ind_covline)
    _db.ind_covline_buckets_n     	= 4; // (atf_cov.FDb.ind_covline)
    _db.ind_covline_buckets_elems 	= (atf_cov::FCovline**)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovline*)*_db.ind_covline_buckets_n); // initial buckets (atf_cov.FDb.ind_covline)
    if (!_db.ind_covline_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_cov.FDb.ind_covline)
    }
    memset(_db.ind_covline_buckets_elems, 0, sizeof(atf_cov::FCovline*)*_db.ind_covline_buckets_n); // (atf_cov.FDb.ind_covline)
    // initialize LAry target (atf_cov.FDb.target)
    _db.target_n = 0;
    memset(_db.target_lary, 0, sizeof(_db.target_lary)); // zero out all level pointers
    atf_cov::FTarget* target_first = (atf_cov::FTarget*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTarget) * (u64(1)<<4));
    if (!target_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.target_lary[i]  = target_first;
        target_first    += 1ULL<<i;
    }
    // initialize hash table for atf_cov::FTarget;
    _db.ind_target_n             	= 0; // (atf_cov.FDb.ind_target)
    _db.ind_target_buckets_n     	= 4; // (atf_cov.FDb.ind_target)
    _db.ind_target_buckets_elems 	= (atf_cov::FTarget**)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTarget*)*_db.ind_target_buckets_n); // initial buckets (atf_cov.FDb.ind_target)
    if (!_db.ind_target_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_cov.FDb.ind_target)
    }
    memset(_db.ind_target_buckets_elems, 0, sizeof(atf_cov::FTarget*)*_db.ind_target_buckets_n); // (atf_cov.FDb.ind_target)
    // initialize LAry targsrc (atf_cov.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    atf_cov::FTargsrc* targsrc_first = (atf_cov::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }
    // initialize hash table for atf_cov::FTargsrc;
    _db.ind_targsrc_n             	= 0; // (atf_cov.FDb.ind_targsrc)
    _db.ind_targsrc_buckets_n     	= 4; // (atf_cov.FDb.ind_targsrc)
    _db.ind_targsrc_buckets_elems 	= (atf_cov::FTargsrc**)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTargsrc*)*_db.ind_targsrc_buckets_n); // initial buckets (atf_cov.FDb.ind_targsrc)
    if (!_db.ind_targsrc_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_cov.FDb.ind_targsrc)
    }
    memset(_db.ind_targsrc_buckets_elems, 0, sizeof(atf_cov::FTargsrc*)*_db.ind_targsrc_buckets_n); // (atf_cov.FDb.ind_targsrc)
    // initialize LAry gitfile (atf_cov.FDb.gitfile)
    _db.gitfile_n = 0;
    memset(_db.gitfile_lary, 0, sizeof(_db.gitfile_lary)); // zero out all level pointers
    atf_cov::FGitfile* gitfile_first = (atf_cov::FGitfile*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FGitfile) * (u64(1)<<4));
    if (!gitfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gitfile_lary[i]  = gitfile_first;
        gitfile_first    += 1ULL<<i;
    }
    // initialize hash table for atf_cov::FGitfile;
    _db.ind_gitfile_n             	= 0; // (atf_cov.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_n     	= 4; // (atf_cov.FDb.ind_gitfile)
    _db.ind_gitfile_buckets_elems 	= (atf_cov::FGitfile**)algo_lib::malloc_AllocMem(sizeof(atf_cov::FGitfile*)*_db.ind_gitfile_buckets_n); // initial buckets (atf_cov.FDb.ind_gitfile)
    if (!_db.ind_gitfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_cov.FDb.ind_gitfile)
    }
    memset(_db.ind_gitfile_buckets_elems, 0, sizeof(atf_cov::FGitfile*)*_db.ind_gitfile_buckets_n); // (atf_cov.FDb.ind_gitfile)
    // initialize LAry covtarget (atf_cov.FDb.covtarget)
    _db.covtarget_n = 0;
    memset(_db.covtarget_lary, 0, sizeof(_db.covtarget_lary)); // zero out all level pointers
    atf_cov::FCovtarget* covtarget_first = (atf_cov::FCovtarget*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovtarget) * (u64(1)<<4));
    if (!covtarget_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.covtarget_lary[i]  = covtarget_first;
        covtarget_first    += 1ULL<<i;
    }
    // initialize LAry covfile (atf_cov.FDb.covfile)
    _db.covfile_n = 0;
    memset(_db.covfile_lary, 0, sizeof(_db.covfile_lary)); // zero out all level pointers
    atf_cov::FCovfile* covfile_first = (atf_cov::FCovfile*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FCovfile) * (u64(1)<<4));
    if (!covfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.covfile_lary[i]  = covfile_first;
        covfile_first    += 1ULL<<i;
    }
    // initialize LAry tgtcov (atf_cov.FDb.tgtcov)
    _db.tgtcov_n = 0;
    memset(_db.tgtcov_lary, 0, sizeof(_db.tgtcov_lary)); // zero out all level pointers
    atf_cov::FTgtcov* tgtcov_first = (atf_cov::FTgtcov*)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTgtcov) * (u64(1)<<4));
    if (!tgtcov_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.tgtcov_lary[i]  = tgtcov_first;
        tgtcov_first    += 1ULL<<i;
    }
    // initialize hash table for atf_cov::FTgtcov;
    _db.ind_tgtcov_n             	= 0; // (atf_cov.FDb.ind_tgtcov)
    _db.ind_tgtcov_buckets_n     	= 4; // (atf_cov.FDb.ind_tgtcov)
    _db.ind_tgtcov_buckets_elems 	= (atf_cov::FTgtcov**)algo_lib::malloc_AllocMem(sizeof(atf_cov::FTgtcov*)*_db.ind_tgtcov_buckets_n); // initial buckets (atf_cov.FDb.ind_tgtcov)
    if (!_db.ind_tgtcov_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_cov.FDb.ind_tgtcov)
    }
    memset(_db.ind_tgtcov_buckets_elems, 0, sizeof(atf_cov::FTgtcov*)*_db.ind_tgtcov_buckets_n); // (atf_cov.FDb.ind_tgtcov)

    atf_cov::InitReflection();
}

// --- atf_cov.FDb..Uninit
void atf_cov::FDb_Uninit() {
    atf_cov::FDb &row = _db; (void)row;

    // atf_cov.FDb.ind_tgtcov.Uninit (Thash)  //
    // skip destruction of ind_tgtcov in global scope

    // atf_cov.FDb.tgtcov.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.covfile.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.covtarget.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.ind_gitfile.Uninit (Thash)  //
    // skip destruction of ind_gitfile in global scope

    // atf_cov.FDb.gitfile.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.ind_targsrc.Uninit (Thash)  //
    // skip destruction of ind_targsrc in global scope

    // atf_cov.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.ind_target.Uninit (Thash)  //
    // skip destruction of ind_target in global scope

    // atf_cov.FDb.target.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_cov.FDb.ind_covline.Uninit (Thash)  //
    // skip destruction of ind_covline in global scope

    // atf_cov.FDb.covline.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- atf_cov.FGitfile.base.CopyOut
// Copy fields out of row
void atf_cov::gitfile_CopyOut(atf_cov::FGitfile &row, dev::Gitfile &out) {
    out.gitfile = row.gitfile;
}

// --- atf_cov.FGitfile.base.CopyIn
// Copy fields in to row
void atf_cov::gitfile_CopyIn(atf_cov::FGitfile &row, dev::Gitfile &in) {
    row.gitfile = in.gitfile;
}

// --- atf_cov.FGitfile.ext.Get
algo::Smallstr50 atf_cov::ext_Get(atf_cov::FGitfile& gitfile) {
    algo::Smallstr50 ret(algo::Pathcomp(gitfile.gitfile, "/RR.LR.RR"));
    return ret;
}

// --- atf_cov.FGitfile.c_covline.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void atf_cov::c_covline_Insert(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) {
    if (bool_Update(row.gitfile_c_covline_in_ary,true)) {
        // reserve space
        c_covline_Reserve(gitfile, 1);
        u32 n  = gitfile.c_covline_n;
        u32 at = n;
        atf_cov::FCovline* *elems = gitfile.c_covline_elems;
        elems[at] = &row;
        gitfile.c_covline_n = n+1;

    }
}

// --- atf_cov.FGitfile.c_covline.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool atf_cov::c_covline_InsertMaybe(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) {
    bool retval = !row.gitfile_c_covline_in_ary;
    c_covline_Insert(gitfile,row); // check is performed in _Insert again
    return retval;
}

// --- atf_cov.FGitfile.c_covline.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void atf_cov::c_covline_Remove(atf_cov::FGitfile& gitfile, atf_cov::FCovline& row) {
    if (bool_Update(row.gitfile_c_covline_in_ary,false)) {
        int lim = gitfile.c_covline_n;
        atf_cov::FCovline* *elems = gitfile.c_covline_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            atf_cov::FCovline* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(atf_cov::FCovline*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                gitfile.c_covline_n = lim - 1;
                break;
            }
        }
    }
}

// --- atf_cov.FGitfile.c_covline.Reserve
// Reserve space in index for N more elements;
void atf_cov::c_covline_Reserve(atf_cov::FGitfile& gitfile, u32 n) {
    u32 old_max = gitfile.c_covline_max;
    if (UNLIKELY(gitfile.c_covline_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(atf_cov::FCovline*);
        u32 new_size = new_max * sizeof(atf_cov::FCovline*);
        void *new_mem = algo_lib::malloc_ReallocMem(gitfile.c_covline_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FGitfile.c_covline");
        }
        gitfile.c_covline_elems = (atf_cov::FCovline**)new_mem;
        gitfile.c_covline_max = new_max;
    }
}

// --- atf_cov.FGitfile..Uninit
void atf_cov::FGitfile_Uninit(atf_cov::FGitfile& gitfile) {
    atf_cov::FGitfile &row = gitfile; (void)row;
    ind_gitfile_Remove(row); // remove gitfile from index ind_gitfile

    // atf_cov.FGitfile.c_covline.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(gitfile.c_covline_elems, sizeof(atf_cov::FCovline*)*gitfile.c_covline_max); // (atf_cov.FGitfile.c_covline)
}

// --- atf_cov.FTarget.base.CopyOut
// Copy fields out of row
void atf_cov::target_CopyOut(atf_cov::FTarget &row, dev::Target &out) {
    out.target = row.target;
    out.compat = row.compat;
}

// --- atf_cov.FTarget.base.CopyIn
// Copy fields in to row
void atf_cov::target_CopyIn(atf_cov::FTarget &row, dev::Target &in) {
    row.target = in.target;
    row.compat = in.compat;
}

// --- atf_cov.FTarget.c_targsrc.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void atf_cov::c_targsrc_Insert(atf_cov::FTarget& target, atf_cov::FTargsrc& row) {
    if (bool_Update(row.target_c_targsrc_in_ary,true)) {
        // reserve space
        c_targsrc_Reserve(target, 1);
        u32 n  = target.c_targsrc_n;
        u32 at = n;
        atf_cov::FTargsrc* *elems = target.c_targsrc_elems;
        elems[at] = &row;
        target.c_targsrc_n = n+1;

    }
}

// --- atf_cov.FTarget.c_targsrc.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool atf_cov::c_targsrc_InsertMaybe(atf_cov::FTarget& target, atf_cov::FTargsrc& row) {
    bool retval = !row.target_c_targsrc_in_ary;
    c_targsrc_Insert(target,row); // check is performed in _Insert again
    return retval;
}

// --- atf_cov.FTarget.c_targsrc.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void atf_cov::c_targsrc_Remove(atf_cov::FTarget& target, atf_cov::FTargsrc& row) {
    if (bool_Update(row.target_c_targsrc_in_ary,false)) {
        int lim = target.c_targsrc_n;
        atf_cov::FTargsrc* *elems = target.c_targsrc_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            atf_cov::FTargsrc* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(atf_cov::FTargsrc*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                target.c_targsrc_n = lim - 1;
                break;
            }
        }
    }
}

// --- atf_cov.FTarget.c_targsrc.Reserve
// Reserve space in index for N more elements;
void atf_cov::c_targsrc_Reserve(atf_cov::FTarget& target, u32 n) {
    u32 old_max = target.c_targsrc_max;
    if (UNLIKELY(target.c_targsrc_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(atf_cov::FTargsrc*);
        u32 new_size = new_max * sizeof(atf_cov::FTargsrc*);
        void *new_mem = algo_lib::malloc_ReallocMem(target.c_targsrc_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("atf_cov.out_of_memory  field:atf_cov.FTarget.c_targsrc");
        }
        target.c_targsrc_elems = (atf_cov::FTargsrc**)new_mem;
        target.c_targsrc_max = new_max;
    }
}

// --- atf_cov.FTarget..Uninit
void atf_cov::FTarget_Uninit(atf_cov::FTarget& target) {
    atf_cov::FTarget &row = target; (void)row;
    ind_target_Remove(row); // remove target from index ind_target

    // atf_cov.FTarget.c_targsrc.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(target.c_targsrc_elems, sizeof(atf_cov::FTargsrc*)*target.c_targsrc_max); // (atf_cov.FTarget.c_targsrc)
}

// --- atf_cov.FTargsrc.base.CopyOut
// Copy fields out of row
void atf_cov::targsrc_CopyOut(atf_cov::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- atf_cov.FTargsrc.base.CopyIn
// Copy fields in to row
void atf_cov::targsrc_CopyIn(atf_cov::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- atf_cov.FTargsrc.target.Get
algo::Smallstr16 atf_cov::target_Get(atf_cov::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- atf_cov.FTargsrc.src.Get
algo::Smallstr200 atf_cov::src_Get(atf_cov::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- atf_cov.FTargsrc.ext.Get
algo::Smallstr10 atf_cov::ext_Get(atf_cov::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- atf_cov.FTargsrc..Uninit
void atf_cov::FTargsrc_Uninit(atf_cov::FTargsrc& targsrc) {
    atf_cov::FTargsrc &row = targsrc; (void)row;
    ind_targsrc_Remove(row); // remove targsrc from index ind_targsrc
    atf_cov::FTarget* p_target = atf_cov::ind_target_Find(target_Get(row));
    if (p_target)  {
        c_targsrc_Remove(*p_target, row);// remove targsrc from index c_targsrc
    }
    atf_cov::FGitfile* p_src = atf_cov::ind_gitfile_Find(src_Get(row));
    if (p_src)  {
        c_targsrc_Remove(*p_src, row);// remove targsrc from index c_targsrc
    }
}

// --- atf_cov.FTgtcov.base.CopyOut
// Copy fields out of row
void atf_cov::tgtcov_CopyOut(atf_cov::FTgtcov &row, dev::Tgtcov &out) {
    out.target = row.target;
    out.cov_min = row.cov_min;
    out.maxerr = row.maxerr;
    out.comment = row.comment;
}

// --- atf_cov.FTgtcov.base.CopyIn
// Copy fields in to row
void atf_cov::tgtcov_CopyIn(atf_cov::FTgtcov &row, dev::Tgtcov &in) {
    row.target = in.target;
    row.cov_min = in.cov_min;
    row.maxerr = in.maxerr;
    row.comment = in.comment;
}

// --- atf_cov.FTgtcov..Uninit
void atf_cov::FTgtcov_Uninit(atf_cov::FTgtcov& tgtcov) {
    atf_cov::FTgtcov &row = tgtcov; (void)row;
    ind_tgtcov_Remove(row); // remove tgtcov from index ind_tgtcov
    atf_cov::FTarget* p_target = atf_cov::ind_target_Find(row.target);
    if (p_target)  {
        c_tgtcov_Remove(*p_target, row);// remove tgtcov from index c_tgtcov
    }
}

// --- atf_cov.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_cov::value_ToCstr(const atf_cov::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_cov_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- atf_cov.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_cov::value_Print(const atf_cov::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_cov.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_cov::value_SetStrptrMaybe(atf_cov::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,atf_cov_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_cov.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_cov::value_SetStrptr(atf_cov::FieldId& parent, algo::strptr rhs, atf_cov_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_cov.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_cov::value_ReadStrptrMaybe(atf_cov::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_cov.FieldId..ReadStrptrMaybe
// Read fields of atf_cov::FieldId from an ascii string.
// The format of the string is the format of the atf_cov::FieldId's only field
bool atf_cov::FieldId_ReadStrptrMaybe(atf_cov::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_cov.FieldId..Print
// print string representation of atf_cov::FieldId to string LHS, no header -- cprint:atf_cov.FieldId.String
void atf_cov::FieldId_Print(atf_cov::FieldId & row, algo::cstring &str) {
    atf_cov::value_Print(row, str);
}

// --- atf_cov.Phase.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_cov::value_ToCstr(const atf_cov::Phase& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_cov_Phase_value_runcmd    : ret = "runcmd";  break;
        case atf_cov_Phase_value_gcov      : ret = "gcov";  break;
        case atf_cov_Phase_value_ssim      : ret = "ssim";  break;
        case atf_cov_Phase_value_report    : ret = "report";  break;
    }
    return ret;
}

// --- atf_cov.Phase.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_cov::value_Print(const atf_cov::Phase& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_cov.Phase.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_cov::value_SetStrptrMaybe(atf_cov::Phase& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('g','c','o','v'): {
                    value_SetEnum(parent,atf_cov_Phase_value_gcov); ret = true; break;
                }
                case LE_STR4('s','s','i','m'): {
                    value_SetEnum(parent,atf_cov_Phase_value_ssim); ret = true; break;
                }
            }
            break;
        }
        case 6: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)) {
                case LE_STR6('r','e','p','o','r','t'): {
                    value_SetEnum(parent,atf_cov_Phase_value_report); ret = true; break;
                }
                case LE_STR6('r','u','n','c','m','d'): {
                    value_SetEnum(parent,atf_cov_Phase_value_runcmd); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_cov.Phase.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_cov::value_SetStrptr(atf_cov::Phase& parent, algo::strptr rhs, atf_cov_Phase_value_Enum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_cov.Phase.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_cov::value_ReadStrptrMaybe(atf_cov::Phase& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u8_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_cov.Phase..ReadStrptrMaybe
// Read fields of atf_cov::Phase from an ascii string.
// The format of the string is the format of the atf_cov::Phase's only field
bool atf_cov::Phase_ReadStrptrMaybe(atf_cov::Phase &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_cov.Phase..Print
// print string representation of atf_cov::Phase to string LHS, no header -- cprint:atf_cov.Phase.String
void atf_cov::Phase_Print(atf_cov::Phase row, algo::cstring &str) {
    atf_cov::value_Print(row, str);
}

// --- atf_cov.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_cov::value_ToCstr(const atf_cov::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_cov_TableId_dev_Covfile   : ret = "dev.Covfile";  break;
        case atf_cov_TableId_dev_Covline   : ret = "dev.Covline";  break;
        case atf_cov_TableId_dev_Covtarget : ret = "dev.Covtarget";  break;
        case atf_cov_TableId_dev_Gitfile   : ret = "dev.Gitfile";  break;
        case atf_cov_TableId_dev_Target    : ret = "dev.Target";  break;
        case atf_cov_TableId_dev_Targsrc   : ret = "dev.Targsrc";  break;
        case atf_cov_TableId_dev_Tgtcov    : ret = "dev.Tgtcov";  break;
    }
    return ret;
}

// --- atf_cov.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_cov::value_Print(const atf_cov::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_cov.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_cov::value_SetStrptrMaybe(atf_cov::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','g','t','c'): {
                    if (memcmp(rhs.elems+8,"ov",2)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Tgtcov); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,atf_cov_TableId_dev_target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','g','t','c'): {
                    if (memcmp(rhs.elems+8,"ov",2)==0) { value_SetEnum(parent,atf_cov_TableId_dev_tgtcov); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','C','o','v','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Covfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','C','o','v','l'): {
                    if (memcmp(rhs.elems+8,"ine",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Covline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','G','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','c','o','v','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_covfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','c','o','v','l'): {
                    if (memcmp(rhs.elems+8,"ine",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_covline); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','g','i','t','f'): {
                    if (memcmp(rhs.elems+8,"ile",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_gitfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,atf_cov_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 13: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','C','o','v','t'): {
                    if (memcmp(rhs.elems+8,"arget",5)==0) { value_SetEnum(parent,atf_cov_TableId_dev_Covtarget); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','c','o','v','t'): {
                    if (memcmp(rhs.elems+8,"arget",5)==0) { value_SetEnum(parent,atf_cov_TableId_dev_covtarget); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_cov.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_cov::value_SetStrptr(atf_cov::TableId& parent, algo::strptr rhs, atf_cov_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_cov.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_cov::value_ReadStrptrMaybe(atf_cov::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_cov.TableId..ReadStrptrMaybe
// Read fields of atf_cov::TableId from an ascii string.
// The format of the string is the format of the atf_cov::TableId's only field
bool atf_cov::TableId_ReadStrptrMaybe(atf_cov::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_cov.TableId..Print
// print string representation of atf_cov::TableId to string LHS, no header -- cprint:atf_cov.TableId.String
void atf_cov::TableId_Print(atf_cov::TableId & row, algo::cstring &str) {
    atf_cov::value_Print(row, str);
}

// --- atf_cov...SizeCheck
inline static void atf_cov::SizeCheck() {
}

// --- atf_cov...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        atf_cov::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        atf_cov::ReadArgv(); // dmmeta.main:atf_cov
        atf_cov::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("atf_cov.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        atf_cov::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- atf_cov...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
