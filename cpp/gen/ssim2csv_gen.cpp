//
// cpp/gen/ssim2csv_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/ssim2csv_gen.h"
#include "include/gen/ssim2csv_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
ssim2csv::FDb   ssim2csv::_db;    // dependency found via dev.targdep

namespace ssim2csv {
const char *ssim2csv_help =
"ssim2csv: Ssim -> csv conversion tool\n"
"Usage: ssim2csv [options]\n"
"    OPTION        TYPE    DFLT  COMMENT\n"
"    -expand       string  \"\"\n"
"    -ignoreQuote\n"
"    -verbose      int           Verbosity level (0..255); alias -v; cumulative\n"
"    -debug        int           Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help an exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace ssim2csv
namespace ssim2csv { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- ssim2csv.trace..Print
// print string representation of ssim2csv::trace to string LHS, no header -- cprint:ssim2csv.trace.String
void ssim2csv::trace_Print(ssim2csv::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "ssim2csv.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- ssim2csv.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     ssim2csv.FDb.cmdline
//     algo_lib.FDb.cmdline
void ssim2csv::ReadArgv() {
    command::ssim2csv &cmd = ssim2csv::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::ssim2csv_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"ssim2csv: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "ssim2csv: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::ssim2csv_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"ssim2csv: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(ssim2csv_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- ssim2csv.FDb._db.MainLoop
// Main loop.
void ssim2csv::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        ssim2csv::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- ssim2csv.FDb._db.Step
// Main step
void ssim2csv::Step() {
}

// --- ssim2csv.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void ssim2csv::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("ssim2csv", NULL, NULL, ssim2csv::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "ssim2csv.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(ssim2csv::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)ssim2csv::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- ssim2csv.FDb._db.StaticCheck
void ssim2csv::StaticCheck() {
    algo_assert(_offset_of(ssim2csv::FieldId, value) + sizeof(((ssim2csv::FieldId*)0)->value) == sizeof(ssim2csv::FieldId));
}

// --- ssim2csv.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool ssim2csv::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- ssim2csv.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool ssim2csv::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    (void)root;//only to avoid -Wunused-parameter
    return retval;
}

// --- ssim2csv.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool ssim2csv::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, ssim2csv::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- ssim2csv.FDb._db.Steps
// Calls Step function of dependencies
void ssim2csv::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- ssim2csv.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool ssim2csv::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- ssim2csv.FDb.expand.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2csv::FExpand& ssim2csv::expand_Alloc() {
    ssim2csv::FExpand* row = expand_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("ssim2csv.out_of_mem  field:ssim2csv.FDb.expand  comment:'Alloc failed'");
    }
    return *row;
}

// --- ssim2csv.FDb.expand.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
ssim2csv::FExpand* ssim2csv::expand_AllocMaybe() {
    ssim2csv::FExpand *row = (ssim2csv::FExpand*)expand_AllocMem();
    if (row) {
        new (row) ssim2csv::FExpand; // call constructor
    }
    return row;
}

// --- ssim2csv.FDb.expand.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* ssim2csv::expand_AllocMem() {
    u64 new_nelems     = _db.expand_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    ssim2csv::FExpand*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.expand_lary[bsr];
        if (!lev) {
            lev=(ssim2csv::FExpand*)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FExpand) * (u64(1)<<bsr));
            _db.expand_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.expand_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- ssim2csv.FDb.expand.RemoveAll
// Remove all elements from Lary
void ssim2csv::expand_RemoveAll() {
    for (u64 n = _db.expand_n; n>0; ) {
        n--;
        expand_qFind(u64(n)).~FExpand(); // destroy last element
        _db.expand_n = i32(n);
    }
}

// --- ssim2csv.FDb.expand.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void ssim2csv::expand_RemoveLast() {
    u64 n = _db.expand_n;
    if (n > 0) {
        n -= 1;
        expand_qFind(u64(n)).~FExpand();
        _db.expand_n = i32(n);
    }
}

// --- ssim2csv.FDb.expand.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool ssim2csv::expand_XrefMaybe(ssim2csv::FExpand &row) {
    bool retval = true;
    (void)row;
    // insert expand into index ind_expand
    if (true) { // user-defined insert condition
        bool success = ind_expand_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "ssim2csv.duplicate_key  xref:ssim2csv.FDb.ind_expand"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- ssim2csv.FDb.ind_expand.Find
// Find row by key. Return NULL if not found.
ssim2csv::FExpand* ssim2csv::ind_expand_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_expand_buckets_n - 1);
    ssim2csv::FExpand* *e = &_db.ind_expand_buckets_elems[index];
    ssim2csv::FExpand* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).expand == key;
        if (done) break;
        e         = &ret->ind_expand_next;
    } while (true);
    return ret;
}

// --- ssim2csv.FDb.ind_expand.FindX
// Look up row by key and return reference. Throw exception if not found
ssim2csv::FExpand& ssim2csv::ind_expand_FindX(const algo::strptr& key) {
    ssim2csv::FExpand* ret = ind_expand_Find(key);
    vrfy(ret, tempstr() << "ssim2csv.key_error  table:ind_expand  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- ssim2csv.FDb.ind_expand.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2csv::FExpand& ssim2csv::ind_expand_GetOrCreate(const algo::strptr& key) {
    ssim2csv::FExpand* ret = ind_expand_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &expand_Alloc();
        (*ret).expand = key;
        bool good = expand_XrefMaybe(*ret);
        if (!good) {
            expand_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "ssim2csv.create_error  table:ind_expand  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- ssim2csv.FDb.ind_expand.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool ssim2csv::ind_expand_InsertMaybe(ssim2csv::FExpand& row) {
    ind_expand_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_expand_next == (ssim2csv::FExpand*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.expand) & (_db.ind_expand_buckets_n - 1);
        ssim2csv::FExpand* *prev = &_db.ind_expand_buckets_elems[index];
        do {
            ssim2csv::FExpand* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).expand == row.expand) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_expand_next;
        } while (true);
        if (retval) {
            row.ind_expand_next = *prev;
            _db.ind_expand_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- ssim2csv.FDb.ind_expand.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void ssim2csv::ind_expand_Remove(ssim2csv::FExpand& row) {
    if (LIKELY(row.ind_expand_next != (ssim2csv::FExpand*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.expand) & (_db.ind_expand_buckets_n - 1);
        ssim2csv::FExpand* *prev = &_db.ind_expand_buckets_elems[index]; // addr of pointer to current element
        while (ssim2csv::FExpand *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_expand_next; // unlink (singly linked list)
                _db.ind_expand_n--;
                row.ind_expand_next = (ssim2csv::FExpand*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_expand_next;
        }
    }
}

// --- ssim2csv.FDb.ind_expand.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void ssim2csv::ind_expand_Reserve(int n) {
    u32 old_nbuckets = _db.ind_expand_buckets_n;
    u32 new_nelems   = _db.ind_expand_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(ssim2csv::FExpand*);
        u32 new_size = new_nbuckets * sizeof(ssim2csv::FExpand*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        ssim2csv::FExpand* *new_buckets = (ssim2csv::FExpand**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("ssim2csv.out_of_memory  field:ssim2csv.FDb.ind_expand");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_expand_buckets_n; i++) {
            ssim2csv::FExpand* elem = _db.ind_expand_buckets_elems[i];
            while (elem) {
                ssim2csv::FExpand &row        = *elem;
                ssim2csv::FExpand* next       = row.ind_expand_next;
                u32 index          = algo::cstring_Hash(0, row.expand) & (new_nbuckets-1);
                row.ind_expand_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_expand_buckets_elems, old_size);
        _db.ind_expand_buckets_elems = new_buckets;
        _db.ind_expand_buckets_n = new_nbuckets;
    }
}

// --- ssim2csv.FDb.outfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
ssim2csv::FOutfile& ssim2csv::outfile_Alloc() {
    ssim2csv::FOutfile* row = outfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("ssim2csv.out_of_mem  field:ssim2csv.FDb.outfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- ssim2csv.FDb.outfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
ssim2csv::FOutfile* ssim2csv::outfile_AllocMaybe() {
    ssim2csv::FOutfile *row = (ssim2csv::FOutfile*)outfile_AllocMem();
    if (row) {
        new (row) ssim2csv::FOutfile; // call constructor
    }
    return row;
}

// --- ssim2csv.FDb.outfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* ssim2csv::outfile_AllocMem() {
    u64 new_nelems     = _db.outfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    ssim2csv::FOutfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.outfile_lary[bsr];
        if (!lev) {
            lev=(ssim2csv::FOutfile*)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FOutfile) * (u64(1)<<bsr));
            _db.outfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.outfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- ssim2csv.FDb.outfile.RemoveAll
// Remove all elements from Lary
void ssim2csv::outfile_RemoveAll() {
    for (u64 n = _db.outfile_n; n>0; ) {
        n--;
        outfile_qFind(u64(n)).~FOutfile(); // destroy last element
        _db.outfile_n = i32(n);
    }
}

// --- ssim2csv.FDb.outfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void ssim2csv::outfile_RemoveLast() {
    u64 n = _db.outfile_n;
    if (n > 0) {
        n -= 1;
        outfile_qFind(u64(n)).~FOutfile();
        _db.outfile_n = i32(n);
    }
}

// --- ssim2csv.FDb.outfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool ssim2csv::outfile_XrefMaybe(ssim2csv::FOutfile &row) {
    bool retval = true;
    (void)row;
    // insert outfile into index ind_outfile
    if (true) { // user-defined insert condition
        bool success = ind_outfile_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "ssim2csv.duplicate_key  xref:ssim2csv.FDb.ind_outfile"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- ssim2csv.FDb.ind_outfile.Find
// Find row by key. Return NULL if not found.
ssim2csv::FOutfile* ssim2csv::ind_outfile_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_outfile_buckets_n - 1);
    ssim2csv::FOutfile* *e = &_db.ind_outfile_buckets_elems[index];
    ssim2csv::FOutfile* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).outfile == key;
        if (done) break;
        e         = &ret->ind_outfile_next;
    } while (true);
    return ret;
}

// --- ssim2csv.FDb.ind_outfile.FindX
// Look up row by key and return reference. Throw exception if not found
ssim2csv::FOutfile& ssim2csv::ind_outfile_FindX(const algo::strptr& key) {
    ssim2csv::FOutfile* ret = ind_outfile_Find(key);
    vrfy(ret, tempstr() << "ssim2csv.key_error  table:ind_outfile  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- ssim2csv.FDb.ind_outfile.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
ssim2csv::FOutfile& ssim2csv::ind_outfile_GetOrCreate(const algo::strptr& key) {
    ssim2csv::FOutfile* ret = ind_outfile_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &outfile_Alloc();
        (*ret).outfile = key;
        bool good = outfile_XrefMaybe(*ret);
        if (!good) {
            outfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "ssim2csv.create_error  table:ind_outfile  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- ssim2csv.FDb.ind_outfile.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool ssim2csv::ind_outfile_InsertMaybe(ssim2csv::FOutfile& row) {
    ind_outfile_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_outfile_next == (ssim2csv::FOutfile*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.outfile) & (_db.ind_outfile_buckets_n - 1);
        ssim2csv::FOutfile* *prev = &_db.ind_outfile_buckets_elems[index];
        do {
            ssim2csv::FOutfile* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).outfile == row.outfile) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_outfile_next;
        } while (true);
        if (retval) {
            row.ind_outfile_next = *prev;
            _db.ind_outfile_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- ssim2csv.FDb.ind_outfile.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void ssim2csv::ind_outfile_Remove(ssim2csv::FOutfile& row) {
    if (LIKELY(row.ind_outfile_next != (ssim2csv::FOutfile*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.outfile) & (_db.ind_outfile_buckets_n - 1);
        ssim2csv::FOutfile* *prev = &_db.ind_outfile_buckets_elems[index]; // addr of pointer to current element
        while (ssim2csv::FOutfile *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_outfile_next; // unlink (singly linked list)
                _db.ind_outfile_n--;
                row.ind_outfile_next = (ssim2csv::FOutfile*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_outfile_next;
        }
    }
}

// --- ssim2csv.FDb.ind_outfile.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void ssim2csv::ind_outfile_Reserve(int n) {
    u32 old_nbuckets = _db.ind_outfile_buckets_n;
    u32 new_nelems   = _db.ind_outfile_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(ssim2csv::FOutfile*);
        u32 new_size = new_nbuckets * sizeof(ssim2csv::FOutfile*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        ssim2csv::FOutfile* *new_buckets = (ssim2csv::FOutfile**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("ssim2csv.out_of_memory  field:ssim2csv.FDb.ind_outfile");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_outfile_buckets_n; i++) {
            ssim2csv::FOutfile* elem = _db.ind_outfile_buckets_elems[i];
            while (elem) {
                ssim2csv::FOutfile &row        = *elem;
                ssim2csv::FOutfile* next       = row.ind_outfile_next;
                u32 index          = algo::cstring_Hash(0, row.outfile) & (new_nbuckets-1);
                row.ind_outfile_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_outfile_buckets_elems, old_size);
        _db.ind_outfile_buckets_elems = new_buckets;
        _db.ind_outfile_buckets_n = new_nbuckets;
    }
}

// --- ssim2csv.FDb.name.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
algo::cstring& ssim2csv::name_Alloc() {
    name_Reserve(1);
    int n  = _db.name_n;
    int at = n;
    algo::cstring *elems = _db.name_elems;
    new (elems + at) algo::cstring(); // construct new element, default initializer
    _db.name_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.name.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
algo::cstring& ssim2csv::name_AllocAt(int at) {
    name_Reserve(1);
    int n  = _db.name_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("ssim2csv.bad_alloc_at  field:ssim2csv.FDb.name  comment:'index out of range'");
    }
    algo::cstring *elems = _db.name_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(algo::cstring));
    new (elems + at) algo::cstring(); // construct element, default initializer
    _db.name_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.name.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> ssim2csv::name_AllocN(int n_elems) {
    name_Reserve(n_elems);
    int old_n  = _db.name_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.name_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(); // construct new element, default initialize
    }
    _db.name_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.name.Remove
// Remove item by index. If index outside of range, do nothing.
void ssim2csv::name_Remove(u32 i) {
    u32 lim = _db.name_n;
    algo::cstring *elems = _db.name_elems;
    if (i < lim) {
        elems[i].~cstring(); // destroy element
        memmove(elems + i, elems + (i + 1), sizeof(algo::cstring) * (lim - (i + 1)));
        _db.name_n = lim - 1;
    }
}

// --- ssim2csv.FDb.name.RemoveAll
void ssim2csv::name_RemoveAll() {
    u32 n = _db.name_n;
    while (n > 0) {
        n -= 1;
        _db.name_elems[n].~cstring();
        _db.name_n = n;
    }
}

// --- ssim2csv.FDb.name.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void ssim2csv::name_RemoveLast() {
    u64 n = _db.name_n;
    if (n > 0) {
        n -= 1;
        name_qFind(u64(n)).~cstring();
        _db.name_n = n;
    }
}

// --- ssim2csv.FDb.name.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void ssim2csv::name_AbsReserve(int n) {
    u32 old_max  = _db.name_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.name_elems, old_max * sizeof(algo::cstring), new_max * sizeof(algo::cstring));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("ssim2csv.tary_nomem  field:ssim2csv.FDb.name  comment:'out of memory'");
        }
        _db.name_elems = (algo::cstring*)new_mem;
        _db.name_max = new_max;
    }
}

// --- ssim2csv.FDb.name.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> ssim2csv::name_AllocNVal(int n_elems, const algo::cstring& val) {
    name_Reserve(n_elems);
    int old_n  = _db.name_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.name_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(val);
    }
    _db.name_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.value.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
algo::cstring& ssim2csv::value_Alloc() {
    value_Reserve(1);
    int n  = _db.value_n;
    int at = n;
    algo::cstring *elems = _db.value_elems;
    new (elems + at) algo::cstring(); // construct new element, default initializer
    _db.value_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.value.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
algo::cstring& ssim2csv::value_AllocAt(int at) {
    value_Reserve(1);
    int n  = _db.value_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("ssim2csv.bad_alloc_at  field:ssim2csv.FDb.value  comment:'index out of range'");
    }
    algo::cstring *elems = _db.value_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(algo::cstring));
    new (elems + at) algo::cstring(); // construct element, default initializer
    _db.value_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.value.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> ssim2csv::value_AllocN(int n_elems) {
    value_Reserve(n_elems);
    int old_n  = _db.value_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.value_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(); // construct new element, default initialize
    }
    _db.value_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.value.Remove
// Remove item by index. If index outside of range, do nothing.
void ssim2csv::value_Remove(u32 i) {
    u32 lim = _db.value_n;
    algo::cstring *elems = _db.value_elems;
    if (i < lim) {
        elems[i].~cstring(); // destroy element
        memmove(elems + i, elems + (i + 1), sizeof(algo::cstring) * (lim - (i + 1)));
        _db.value_n = lim - 1;
    }
}

// --- ssim2csv.FDb.value.RemoveAll
void ssim2csv::value_RemoveAll() {
    u32 n = _db.value_n;
    while (n > 0) {
        n -= 1;
        _db.value_elems[n].~cstring();
        _db.value_n = n;
    }
}

// --- ssim2csv.FDb.value.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void ssim2csv::value_RemoveLast() {
    u64 n = _db.value_n;
    if (n > 0) {
        n -= 1;
        value_qFind(u64(n)).~cstring();
        _db.value_n = n;
    }
}

// --- ssim2csv.FDb.value.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void ssim2csv::value_AbsReserve(int n) {
    u32 old_max  = _db.value_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.value_elems, old_max * sizeof(algo::cstring), new_max * sizeof(algo::cstring));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("ssim2csv.tary_nomem  field:ssim2csv.FDb.value  comment:'out of memory'");
        }
        _db.value_elems = (algo::cstring*)new_mem;
        _db.value_max = new_max;
    }
}

// --- ssim2csv.FDb.value.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<algo::cstring> ssim2csv::value_AllocNVal(int n_elems, const algo::cstring& val) {
    value_Reserve(n_elems);
    int old_n  = _db.value_n;
    int new_n = old_n + n_elems;
    algo::cstring *elems = _db.value_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) algo::cstring(val);
    }
    _db.value_n = new_n;
    return algo::aryptr<algo::cstring>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.flatten.Alloc
// Reserve space. Insert element at the end
// The new element is initialized to a default value
ssim2csv::FFlatten& ssim2csv::flatten_Alloc() {
    flatten_Reserve(1);
    int n  = _db.flatten_n;
    int at = n;
    ssim2csv::FFlatten *elems = _db.flatten_elems;
    new (elems + at) ssim2csv::FFlatten(); // construct new element, default initializer
    _db.flatten_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.flatten.AllocAt
// Reserve space for new element, reallocating the array if necessary
// Insert new element at specified index. Index must be in range or a fatal error occurs.
ssim2csv::FFlatten& ssim2csv::flatten_AllocAt(int at) {
    flatten_Reserve(1);
    int n  = _db.flatten_n;
    if (UNLIKELY(u64(at) >= u64(n+1))) {
        FatalErrorExit("ssim2csv.bad_alloc_at  field:ssim2csv.FDb.flatten  comment:'index out of range'");
    }
    ssim2csv::FFlatten *elems = _db.flatten_elems;
    memmove(elems + at + 1, elems + at, (n - at) * sizeof(ssim2csv::FFlatten));
    new (elems + at) ssim2csv::FFlatten(); // construct element, default initializer
    _db.flatten_n = n+1;
    return elems[at];
}

// --- ssim2csv.FDb.flatten.AllocN
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<ssim2csv::FFlatten> ssim2csv::flatten_AllocN(int n_elems) {
    flatten_Reserve(n_elems);
    int old_n  = _db.flatten_n;
    int new_n = old_n + n_elems;
    ssim2csv::FFlatten *elems = _db.flatten_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) ssim2csv::FFlatten(); // construct new element, default initialize
    }
    _db.flatten_n = new_n;
    return algo::aryptr<ssim2csv::FFlatten>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.flatten.Remove
// Remove item by index. If index outside of range, do nothing.
void ssim2csv::flatten_Remove(u32 i) {
    u32 lim = _db.flatten_n;
    ssim2csv::FFlatten *elems = _db.flatten_elems;
    if (i < lim) {
        elems[i].~FFlatten(); // destroy element
        memmove(elems + i, elems + (i + 1), sizeof(ssim2csv::FFlatten) * (lim - (i + 1)));
        _db.flatten_n = lim - 1;
    }
}

// --- ssim2csv.FDb.flatten.RemoveAll
void ssim2csv::flatten_RemoveAll() {
    u32 n = _db.flatten_n;
    while (n > 0) {
        n -= 1;
        _db.flatten_elems[n].~FFlatten();
        _db.flatten_n = n;
    }
}

// --- ssim2csv.FDb.flatten.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void ssim2csv::flatten_RemoveLast() {
    u64 n = _db.flatten_n;
    if (n > 0) {
        n -= 1;
        flatten_qFind(u64(n)).~FFlatten();
        _db.flatten_n = n;
    }
}

// --- ssim2csv.FDb.flatten.AbsReserve
// Make sure N elements fit in array. Process dies if out of memory
void ssim2csv::flatten_AbsReserve(int n) {
    u32 old_max  = _db.flatten_max;
    if (n > i32(old_max)) {
        u32 new_max  = i32_Max(i32_Max(old_max * 2, n), 4);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.flatten_elems, old_max * sizeof(ssim2csv::FFlatten), new_max * sizeof(ssim2csv::FFlatten));
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("ssim2csv.tary_nomem  field:ssim2csv.FDb.flatten  comment:'out of memory'");
        }
        _db.flatten_elems = (ssim2csv::FFlatten*)new_mem;
        _db.flatten_max = new_max;
    }
}

// --- ssim2csv.FDb.flatten.AllocNVal
// Reserve space. Insert N elements at the end of the array, return pointer to array
algo::aryptr<ssim2csv::FFlatten> ssim2csv::flatten_AllocNVal(int n_elems, const ssim2csv::FFlatten& val) {
    flatten_Reserve(n_elems);
    int old_n  = _db.flatten_n;
    int new_n = old_n + n_elems;
    ssim2csv::FFlatten *elems = _db.flatten_elems;
    for (int i = old_n; i < new_n; i++) {
        new (elems + i) ssim2csv::FFlatten(val);
    }
    _db.flatten_n = new_n;
    return algo::aryptr<ssim2csv::FFlatten>(elems + old_n, n_elems);
}

// --- ssim2csv.FDb.flatten.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool ssim2csv::flatten_XrefMaybe(ssim2csv::FFlatten &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- ssim2csv.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr ssim2csv::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- ssim2csv.FDb.trace.N
// Function return 1
inline static i32 ssim2csv::trace_N() {
    return 1;
}

// --- ssim2csv.FDb..Init
// Set all fields to initial values.
void ssim2csv::FDb_Init() {
    // initialize LAry expand (ssim2csv.FDb.expand)
    _db.expand_n = 0;
    memset(_db.expand_lary, 0, sizeof(_db.expand_lary)); // zero out all level pointers
    ssim2csv::FExpand* expand_first = (ssim2csv::FExpand*)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FExpand) * (u64(1)<<4));
    if (!expand_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.expand_lary[i]  = expand_first;
        expand_first    += 1ULL<<i;
    }
    // initialize hash table for ssim2csv::FExpand;
    _db.ind_expand_n             	= 0; // (ssim2csv.FDb.ind_expand)
    _db.ind_expand_buckets_n     	= 4; // (ssim2csv.FDb.ind_expand)
    _db.ind_expand_buckets_elems 	= (ssim2csv::FExpand**)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FExpand*)*_db.ind_expand_buckets_n); // initial buckets (ssim2csv.FDb.ind_expand)
    if (!_db.ind_expand_buckets_elems) {
        FatalErrorExit("out of memory"); // (ssim2csv.FDb.ind_expand)
    }
    memset(_db.ind_expand_buckets_elems, 0, sizeof(ssim2csv::FExpand*)*_db.ind_expand_buckets_n); // (ssim2csv.FDb.ind_expand)
    // initialize LAry outfile (ssim2csv.FDb.outfile)
    _db.outfile_n = 0;
    memset(_db.outfile_lary, 0, sizeof(_db.outfile_lary)); // zero out all level pointers
    ssim2csv::FOutfile* outfile_first = (ssim2csv::FOutfile*)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FOutfile) * (u64(1)<<4));
    if (!outfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.outfile_lary[i]  = outfile_first;
        outfile_first    += 1ULL<<i;
    }
    // initialize hash table for ssim2csv::FOutfile;
    _db.ind_outfile_n             	= 0; // (ssim2csv.FDb.ind_outfile)
    _db.ind_outfile_buckets_n     	= 4; // (ssim2csv.FDb.ind_outfile)
    _db.ind_outfile_buckets_elems 	= (ssim2csv::FOutfile**)algo_lib::malloc_AllocMem(sizeof(ssim2csv::FOutfile*)*_db.ind_outfile_buckets_n); // initial buckets (ssim2csv.FDb.ind_outfile)
    if (!_db.ind_outfile_buckets_elems) {
        FatalErrorExit("out of memory"); // (ssim2csv.FDb.ind_outfile)
    }
    memset(_db.ind_outfile_buckets_elems, 0, sizeof(ssim2csv::FOutfile*)*_db.ind_outfile_buckets_n); // (ssim2csv.FDb.ind_outfile)
    _db.name_elems 	= 0; // (ssim2csv.FDb.name)
    _db.name_n     	= 0; // (ssim2csv.FDb.name)
    _db.name_max   	= 0; // (ssim2csv.FDb.name)
    _db.value_elems 	= 0; // (ssim2csv.FDb.value)
    _db.value_n     	= 0; // (ssim2csv.FDb.value)
    _db.value_max   	= 0; // (ssim2csv.FDb.value)
    _db.flatten_elems 	= 0; // (ssim2csv.FDb.flatten)
    _db.flatten_n     	= 0; // (ssim2csv.FDb.flatten)
    _db.flatten_max   	= 0; // (ssim2csv.FDb.flatten)

    ssim2csv::InitReflection();
}

// --- ssim2csv.FDb..Uninit
void ssim2csv::FDb_Uninit() {
    ssim2csv::FDb &row = _db; (void)row;

    // ssim2csv.FDb.flatten.Uninit (Tary)  //
    // remove all elements from ssim2csv.FDb.flatten
    flatten_RemoveAll();
    // free memory for Tary ssim2csv.FDb.flatten
    algo_lib::malloc_FreeMem(_db.flatten_elems, sizeof(ssim2csv::FFlatten)*_db.flatten_max); // (ssim2csv.FDb.flatten)

    // ssim2csv.FDb.value.Uninit (Tary)  //
    // remove all elements from ssim2csv.FDb.value
    value_RemoveAll();
    // free memory for Tary ssim2csv.FDb.value
    algo_lib::malloc_FreeMem(_db.value_elems, sizeof(algo::cstring)*_db.value_max); // (ssim2csv.FDb.value)

    // ssim2csv.FDb.name.Uninit (Tary)  //
    // remove all elements from ssim2csv.FDb.name
    name_RemoveAll();
    // free memory for Tary ssim2csv.FDb.name
    algo_lib::malloc_FreeMem(_db.name_elems, sizeof(algo::cstring)*_db.name_max); // (ssim2csv.FDb.name)

    // ssim2csv.FDb.ind_outfile.Uninit (Thash)  //
    // skip destruction of ind_outfile in global scope

    // ssim2csv.FDb.outfile.Uninit (Lary)  //
    // skip destruction in global scope

    // ssim2csv.FDb.ind_expand.Uninit (Thash)  //
    // skip destruction of ind_expand in global scope

    // ssim2csv.FDb.expand.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- ssim2csv.FExpand..Uninit
void ssim2csv::FExpand_Uninit(ssim2csv::FExpand& expand) {
    ssim2csv::FExpand &row = expand; (void)row;
    ind_expand_Remove(row); // remove expand from index ind_expand
}

// --- ssim2csv.FExpand..Print
// print string representation of ssim2csv::FExpand to string LHS, no header -- cprint:ssim2csv.FExpand.String
void ssim2csv::FExpand_Print(ssim2csv::FExpand & row, algo::cstring &str) {
    algo::cstring_Print(row.expand, str);
}

// --- ssim2csv.FFlatten..Print
// print string representation of ssim2csv::FFlatten to string LHS, no header -- cprint:ssim2csv.FFlatten.String
void ssim2csv::FFlatten_Print(ssim2csv::FFlatten & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "ssim2csv.FFlatten";

    algo::cstring_Print(row.in, temp);
    PrintAttrSpaceReset(str,"in", temp);

    algo::cstring_Print(row.prefix, temp);
    PrintAttrSpaceReset(str,"prefix", temp);
}

// --- ssim2csv.FOutfile..Uninit
void ssim2csv::FOutfile_Uninit(ssim2csv::FOutfile& outfile) {
    ssim2csv::FOutfile &row = outfile; (void)row;
    ind_outfile_Remove(row); // remove outfile from index ind_outfile
}

// --- ssim2csv.FOutfile..Print
// print string representation of ssim2csv::FOutfile to string LHS, no header -- cprint:ssim2csv.FOutfile.String
void ssim2csv::FOutfile_Print(ssim2csv::FOutfile & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "ssim2csv.FOutfile";

    algo_lib::FFildes_Print(row.fildes, temp);
    PrintAttrSpaceReset(str,"fildes", temp);

    algo::cstring_Print(row.header, temp);
    PrintAttrSpaceReset(str,"header", temp);

    algo::cstring_Print(row.outfile, temp);
    PrintAttrSpaceReset(str,"outfile", temp);
}

// --- ssim2csv.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* ssim2csv::value_ToCstr(const ssim2csv::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case ssim2csv_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- ssim2csv.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void ssim2csv::value_Print(const ssim2csv::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- ssim2csv.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool ssim2csv::value_SetStrptrMaybe(ssim2csv::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,ssim2csv_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- ssim2csv.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void ssim2csv::value_SetStrptr(ssim2csv::FieldId& parent, algo::strptr rhs, ssim2csv_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- ssim2csv.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool ssim2csv::value_ReadStrptrMaybe(ssim2csv::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- ssim2csv.FieldId..ReadStrptrMaybe
// Read fields of ssim2csv::FieldId from an ascii string.
// The format of the string is the format of the ssim2csv::FieldId's only field
bool ssim2csv::FieldId_ReadStrptrMaybe(ssim2csv::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- ssim2csv.FieldId..Print
// print string representation of ssim2csv::FieldId to string LHS, no header -- cprint:ssim2csv.FieldId.String
void ssim2csv::FieldId_Print(ssim2csv::FieldId & row, algo::cstring &str) {
    ssim2csv::value_Print(row, str);
}

// --- ssim2csv...SizeCheck
inline static void ssim2csv::SizeCheck() {
}

// --- ssim2csv...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        ssim2csv::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        ssim2csv::ReadArgv(); // dmmeta.main:ssim2csv
        ssim2csv::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("ssim2csv.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        ssim2csv::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- ssim2csv...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
