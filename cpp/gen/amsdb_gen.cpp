//
// cpp/gen/amsdb_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/amsdb_gen.h"
#include "include/gen/amsdb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/ams_gen.h"
#include "include/gen/ams_gen.inl.h"
//#pragma endinclude
namespace amsdb { // gen:ns_print_proto
    static void          SizeCheck();
} // gen:ns_print_proto

// --- amsdb.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* amsdb::value_ToCstr(const amsdb::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case amsdb_FieldId_proctype        : ret = "proctype";  break;
        case amsdb_FieldId_id              : ret = "id";  break;
        case amsdb_FieldId_comment         : ret = "comment";  break;
        case amsdb_FieldId_streamtype      : ret = "streamtype";  break;
        case amsdb_FieldId_value           : ret = "value";  break;
    }
    return ret;
}

// --- amsdb.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void amsdb::value_Print(const amsdb::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- amsdb.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool amsdb::value_SetStrptrMaybe(amsdb::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 2: {
            switch (u64(algo::ReadLE16(rhs.elems))) {
                case LE_STR2('i','d'): {
                    value_SetEnum(parent,amsdb_FieldId_id); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,amsdb_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 7: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)|(u64(rhs[6])<<48)) {
                case LE_STR7('c','o','m','m','e','n','t'): {
                    value_SetEnum(parent,amsdb_FieldId_comment); ret = true; break;
                }
            }
            break;
        }
        case 8: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('p','r','o','c','t','y','p','e'): {
                    value_SetEnum(parent,amsdb_FieldId_proctype); ret = true; break;
                }
            }
            break;
        }
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','t','r','e','a','m','t','y'): {
                    if (memcmp(rhs.elems+8,"pe",2)==0) { value_SetEnum(parent,amsdb_FieldId_streamtype); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- amsdb.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void amsdb::value_SetStrptr(amsdb::FieldId& parent, algo::strptr rhs, amsdb_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- amsdb.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool amsdb::value_ReadStrptrMaybe(amsdb::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- amsdb.FieldId..ReadStrptrMaybe
// Read fields of amsdb::FieldId from an ascii string.
// The format of the string is the format of the amsdb::FieldId's only field
bool amsdb::FieldId_ReadStrptrMaybe(amsdb::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && amsdb::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- amsdb.FieldId..Print
// print string representation of amsdb::FieldId to string LHS, no header -- cprint:amsdb.FieldId.String
void amsdb::FieldId_Print(amsdb::FieldId & row, algo::cstring &str) {
    amsdb::value_Print(row, str);
}

// --- amsdb.ProcType..ReadFieldMaybe
bool amsdb::ProcType_ReadFieldMaybe(amsdb::ProcType &parent, algo::strptr field, algo::strptr strval) {
    amsdb::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case amsdb_FieldId_proctype: retval = algo::Smallstr50_ReadStrptrMaybe(parent.proctype, strval); break;
        case amsdb_FieldId_id: retval = u32_ReadStrptrMaybe(parent.id, strval); break;
        case amsdb_FieldId_comment: retval = algo::Comment_ReadStrptrMaybe(parent.comment, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- amsdb.ProcType..ReadStrptrMaybe
// Read fields of amsdb::ProcType from an ascii string.
// The format of the string is an ssim Tuple
bool amsdb::ProcType_ReadStrptrMaybe(amsdb::ProcType &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "amsdb.proctype") || algo::StripTypeTag(in_str, "amsdb.ProcType");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && ProcType_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- amsdb.ProcType..Print
// print string representation of amsdb::ProcType to string LHS, no header -- cprint:amsdb.ProcType.String
void amsdb::ProcType_Print(amsdb::ProcType & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "amsdb.proctype";

    algo::Smallstr50_Print(row.proctype, temp);
    PrintAttrSpaceReset(str,"proctype", temp);

    u32_Print(row.id, temp);
    PrintAttrSpaceReset(str,"id", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);
}

// --- amsdb.StreamType..ReadFieldMaybe
bool amsdb::StreamType_ReadFieldMaybe(amsdb::StreamType &parent, algo::strptr field, algo::strptr strval) {
    amsdb::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    bool retval = true; // default is no error
    switch(field_id) {
        case amsdb_FieldId_streamtype: retval = algo::Smallstr50_ReadStrptrMaybe(parent.streamtype, strval); break;
        case amsdb_FieldId_id: retval = ams::StreamType_ReadStrptrMaybe(parent.id, strval); break;
        case amsdb_FieldId_comment: retval = algo::Comment_ReadStrptrMaybe(parent.comment, strval); break;
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- amsdb.StreamType..ReadStrptrMaybe
// Read fields of amsdb::StreamType from an ascii string.
// The format of the string is an ssim Tuple
bool amsdb::StreamType_ReadStrptrMaybe(amsdb::StreamType &parent, algo::strptr in_str) {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "amsdb.streamtype") || algo::StripTypeTag(in_str, "amsdb.StreamType");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && StreamType_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- amsdb.StreamType..Print
// print string representation of amsdb::StreamType to string LHS, no header -- cprint:amsdb.StreamType.String
void amsdb::StreamType_Print(amsdb::StreamType & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "amsdb.streamtype";

    algo::Smallstr50_Print(row.streamtype, temp);
    PrintAttrSpaceReset(str,"streamtype", temp);

    // printing funique, gconst id for pkey amsdb.StreamType.streamtype
    u8_Print(row.id.value, temp);
    PrintAttrSpaceReset(str,"id", temp);

    algo::Comment_Print(row.comment, temp);
    PrintAttrSpaceReset(str,"comment", temp);
}

// --- amsdb...SizeCheck
inline static void amsdb::SizeCheck() {
}
