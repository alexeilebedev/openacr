//
// cpp/gen/lib_iconv_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/lib_iconv_gen.h"
#include "include/gen/lib_iconv_gen.inl.h"
//#pragma endinclude
namespace lib_iconv { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- lib_iconv.trace..Print
// print string representation of lib_iconv::trace to string LHS, no header -- cprint:lib_iconv.trace.String
void lib_iconv::trace_Print(lib_iconv::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "lib_iconv.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- lib_iconv.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void lib_iconv::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("lib_iconv", NULL, NULL, NULL, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "lib_iconv.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(lib_iconv::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)lib_iconv::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
}

// --- lib_iconv.FDb._db.StaticCheck
void lib_iconv::StaticCheck() {
    algo_assert(_offset_of(lib_iconv::FieldId, value) + sizeof(((lib_iconv::FieldId*)0)->value) == sizeof(lib_iconv::FieldId));
}

// --- lib_iconv.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool lib_iconv::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- lib_iconv.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool lib_iconv::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    (void)root;//only to avoid -Wunused-parameter
    return retval;
}

// --- lib_iconv.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool lib_iconv::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, lib_iconv::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- lib_iconv.FDb._db.Steps
// Calls Step function of dependencies
void lib_iconv::Steps() {
}

// --- lib_iconv.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_iconv::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- lib_iconv.FDb.icd.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool lib_iconv::icd_XrefMaybe(lib_iconv::Icd &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- lib_iconv.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr lib_iconv::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- lib_iconv.FDb.trace.N
// Function return 1
inline static i32 lib_iconv::trace_N() {
    return 1;
}

// --- lib_iconv.FDb..Init
// Set all fields to initial values.
void lib_iconv::FDb_Init() {

    lib_iconv::InitReflection();
}

// --- lib_iconv.FDb..Uninit
void lib_iconv::FDb_Uninit() {
    lib_iconv::FDb &row = _db; (void)row;
}

// --- lib_iconv.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* lib_iconv::value_ToCstr(const lib_iconv::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case lib_iconv_FieldId_value       : ret = "value";  break;
    }
    return ret;
}

// --- lib_iconv.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void lib_iconv::value_Print(const lib_iconv::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- lib_iconv.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool lib_iconv::value_SetStrptrMaybe(lib_iconv::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,lib_iconv_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- lib_iconv.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void lib_iconv::value_SetStrptr(lib_iconv::FieldId& parent, algo::strptr rhs, lib_iconv_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- lib_iconv.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool lib_iconv::value_ReadStrptrMaybe(lib_iconv::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- lib_iconv.FieldId..ReadStrptrMaybe
// Read fields of lib_iconv::FieldId from an ascii string.
// The format of the string is the format of the lib_iconv::FieldId's only field
bool lib_iconv::FieldId_ReadStrptrMaybe(lib_iconv::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && lib_iconv::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- lib_iconv.FieldId..Print
// print string representation of lib_iconv::FieldId to string LHS, no header -- cprint:lib_iconv.FieldId.String
void lib_iconv::FieldId_Print(lib_iconv::FieldId & row, algo::cstring &str) {
    lib_iconv::value_Print(row, str);
}

// --- lib_iconv.Icd..Uninit
void lib_iconv::Icd_Uninit(lib_iconv::Icd& icd) {
    lib_iconv::Icd &row = icd; (void)row;
    icd_Cleanup(icd); // dmmeta.fcleanup:lib_iconv.Icd.icd
}

// --- lib_iconv.Icd..Print
// print string representation of lib_iconv::Icd to string LHS, no header -- cprint:lib_iconv.Icd.String
void lib_iconv::Icd_Print(lib_iconv::Icd & row, algo::cstring &str) {
    (void)row;//only to avoid -Wunused-parameter
    (void)str;//only to avoid -Wunused-parameter
}

// --- lib_iconv...SizeCheck
inline static void lib_iconv::SizeCheck() {
}
