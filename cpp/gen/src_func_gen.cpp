//
// cpp/gen/src_func_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/src_func_gen.h"
#include "include/gen/src_func_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/report_gen.h"
#include "include/gen/report_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
src_func::FDb   src_func::_db;    // dependency found via dev.targdep

namespace src_func {
const char *src_func_help =
"src_func: Access / edit functions\n"
"Usage: src_func [[-target:]<regx>] [[-name:]<regx>] [[-body:]<regx>] [options]\n"
"    OPTION        TYPE    DFLT    COMMENT\n"
"    -in           string  \"data\"  Input directory or filename, - for stdin\n"
"    [target]      regx    \"%\"     Visit these targets\n"
"    [name]        regx    \"%\"     Match function name\n"
"    [body]        regx    \"%\"     Match function body\n"
"    -targsrc      regx    \"\"      Visit these sources (optional)\n"
"    -func         regx    \"%\"     (with -listfunc) Match function prototype\n"
"    -comment      regx    \"%\"     (with -listfunc) Match function comment\n"
"    -nextfile     string  \"\"      Print name of next srcfile in targsrc list\n"
"    -other                        (with -nextfile), name of previous file\n"
"    -updateproto                  Update prototypes in headers\n"
"    -listfunc                     Show functions in target\n"
"    -iffy                         Select functions that may contain errors\n"
"    -proto                        (with -listfunc) List prototypes only\n"
"    -gen                          (with -listfunc) Visit generated files\n"
"    -showloc              Y       (with -listfunc) Show file location\n"
"    -showstatic           Y       (with -listfunc) Show static functions\n"
"    -showsortkey                  (with -listfunc) Display function sortkey\n"
"    -sortname                     (with -listfunc) Sort functions by name\n"
"    -e                            (with -listfunc) Edit found functions\n"
"    -baddecl                      Report and fail on bad declarations\n"
"    -report\n"
"    -verbose      int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug        int             Debug level (0..255); alias -d; cumulative\n"
"    -help                         Print help and exit; alias -h\n"
"    -version                      Print version and exit\n"
"    -signature                    Show signatures and exit; alias -sig\n"
;


} // namespace src_func
src_func::_db_bh_func_curs::~_db_bh_func_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace src_func { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:src_func.FDb._db.InitReflection
    static void          InitReflection();
    // func:src_func.FDb.targsrc.InputMaybe
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    // func:src_func.FDb.target.InputMaybe
    static bool          target_InputMaybe(dev::Target &elem) __attribute__((nothrow));
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    // func:src_func.FDb.bh_func.Downheap
    static int           bh_func_Downheap(src_func::FFunc& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    // func:src_func.FDb.bh_func.Upheap
    static int           bh_func_Upheap(src_func::FFunc& row, int idx) __attribute__((nothrow));
    // func:src_func.FDb.bh_func.ElemLt
    static bool          bh_func_ElemLt(src_func::FFunc &a, src_func::FFunc &b) __attribute__((nothrow));
    // func:src_func.FDb.bh_func_curs.Add
    static void          _db_bh_func_curs_Add(_db_bh_func_curs &curs, src_func::FFunc& row);
    // func:src_func.FDb.dispatch.InputMaybe
    static bool          dispatch_InputMaybe(dmmeta::Dispatch &elem) __attribute__((nothrow));
    // func:src_func.FDb.fstep.InputMaybe
    static bool          fstep_InputMaybe(dmmeta::Fstep &elem) __attribute__((nothrow));
    // func:src_func.FDb.gstatic.InputMaybe
    static bool          gstatic_InputMaybe(dmmeta::Gstatic &elem) __attribute__((nothrow));
    // func:src_func.FDb.ctypelen.InputMaybe
    static bool          ctypelen_InputMaybe(dmmeta::Ctypelen &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:src_func.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:src_func.FDb.trace.N
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // Extract next character from STR and advance IDX
    // func:src_func.FFunc.sortkey.Nextchar
    static u64           sortkey_Nextchar(const src_func::FFunc& func, algo::strptr &str, int &idx) __attribute__((nothrow));
    // func:src_func...SizeCheck
    static void          SizeCheck();
} // gen:ns_print_proto

// --- src_func.FCtypelen.base.CopyOut
// Copy fields out of row
void src_func::ctypelen_CopyOut(src_func::FCtypelen &row, dmmeta::Ctypelen &out) {
    out.ctype = row.ctype;
    out.len = row.len;
    out.alignment = row.alignment;
    out.padbytes = row.padbytes;
}

// --- src_func.FCtypelen.base.CopyIn
// Copy fields in to row
void src_func::ctypelen_CopyIn(src_func::FCtypelen &row, dmmeta::Ctypelen &in) {
    row.ctype = in.ctype;
    row.len = in.len;
    row.alignment = in.alignment;
    row.padbytes = in.padbytes;
}

// --- src_func.FCtypelen..Uninit
void src_func::FCtypelen_Uninit(src_func::FCtypelen& ctypelen) {
    src_func::FCtypelen &row = ctypelen; (void)row;
    ind_ctypelen_Remove(row); // remove ctypelen from index ind_ctypelen
}

// --- src_func.trace..Print
// print string representation of ROW to string STR
// cfmt:src_func.trace.String  printfmt:Tuple
void src_func::trace_Print(src_func::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "src_func.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- src_func.FDb.genprefix.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FGenprefix& src_func::genprefix_Alloc() {
    src_func::FGenprefix* row = genprefix_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.genprefix  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.genprefix.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FGenprefix* src_func::genprefix_AllocMaybe() {
    src_func::FGenprefix *row = (src_func::FGenprefix*)genprefix_AllocMem();
    if (row) {
        new (row) src_func::FGenprefix; // call constructor
    }
    return row;
}

// --- src_func.FDb.genprefix.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::genprefix_AllocMem() {
    u64 new_nelems     = _db.genprefix_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FGenprefix*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.genprefix_lary[bsr];
        if (!lev) {
            lev=(src_func::FGenprefix*)algo_lib::malloc_AllocMem(sizeof(src_func::FGenprefix) * (u64(1)<<bsr));
            _db.genprefix_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.genprefix_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.genprefix.RemoveAll
// Remove all elements from Lary
void src_func::genprefix_RemoveAll() {
    for (u64 n = _db.genprefix_n; n>0; ) {
        n--;
        genprefix_qFind(u64(n)).~FGenprefix(); // destroy last element
        _db.genprefix_n = i32(n);
    }
}

// --- src_func.FDb.genprefix.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::genprefix_RemoveLast() {
    u64 n = _db.genprefix_n;
    if (n > 0) {
        n -= 1;
        genprefix_qFind(u64(n)).~FGenprefix();
        _db.genprefix_n = i32(n);
    }
}

// --- src_func.FDb.genprefix.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::genprefix_XrefMaybe(src_func::FGenprefix &row) {
    bool retval = true;
    (void)row;
    // insert genprefix into index ind_genprefix
    if (true) { // user-defined insert condition
        bool success = ind_genprefix_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_func.duplicate_key  xref:src_func.FDb.ind_genprefix"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_func.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     src_func.FDb.cmdline
//     algo_lib.FDb.cmdline
void src_func::ReadArgv() {
    command::src_func &cmd = src_func::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    int anonidx=0;
    algo::strptr nextanon = command::src_func_GetAnon(cmd, anonidx);
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::src_func_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"src_func: unknown option "<<Keyval("value",arg)<<eol;
            } else {
                if (isanon) {
                    if (attrname == nextanon) { // treat named anon (positional) argument as unnamed
                        attrname = ""; // treat it as unnamed
                    } else if (nextanon != "") { // disallow out-of-order anon (positional) args
                        err<<"src_func: error at "<<algo::strptr_ToSsim(arg)<<": must be preceded by [-"<<nextanon<<"]"<<eol;
                    }
                }
            }
        }
        // look up anon field name based on index
        // anon fields are only allowed in the leaf ns, never base
        if (ch_N(attrname) == 0) {
            attrname = nextanon;
            nextanon = command::src_func_GetAnon(cmd, ++anonidx);
            command::FieldId_ReadStrptrMaybe(attrid,attrname);
            whichns=1;
        }
        if (ch_N(attrname) == 0) {
            err << "src_func: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::src_func_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"src_func: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:src_func.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!src_func::LoadTuplesMaybe(cmd.in,true)) {
            err << "src_func.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(src_func_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- src_func.FDb._db.MainLoop
// Main loop.
void src_func::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        src_func::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- src_func.FDb._db.Step
// Main step
void src_func::Step() {
}

// --- src_func.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void src_func::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("src_func", src_func::InsertStrptrMaybe, NULL, src_func::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "src_func.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(src_func::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)src_func::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'src_func.Input'  signature:'fcceb1600247efc0d7b15d2ae7a9429c3b809332'");
}

// --- src_func.FDb._db.StaticCheck
void src_func::StaticCheck() {
    algo_assert(_offset_of(src_func::FieldId, value) + sizeof(((src_func::FieldId*)0)->value) == sizeof(src_func::FieldId));
}

// --- src_func.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool src_func::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    src_func::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case src_func_TableId_dev_Targsrc: { // finput:src_func.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            break;
        }
        case src_func_TableId_dev_Target: { // finput:src_func.FDb.target
            dev::Target elem;
            retval = dev::Target_ReadStrptrMaybe(elem, str);
            retval = retval && target_InputMaybe(elem);
            break;
        }
        case src_func_TableId_dmmeta_Dispatch: { // finput:src_func.FDb.dispatch
            dmmeta::Dispatch elem;
            retval = dmmeta::Dispatch_ReadStrptrMaybe(elem, str);
            retval = retval && dispatch_InputMaybe(elem);
            break;
        }
        case src_func_TableId_dmmeta_Fstep: { // finput:src_func.FDb.fstep
            dmmeta::Fstep elem;
            retval = dmmeta::Fstep_ReadStrptrMaybe(elem, str);
            retval = retval && fstep_InputMaybe(elem);
            break;
        }
        case src_func_TableId_dmmeta_Gstatic: { // finput:src_func.FDb.gstatic
            dmmeta::Gstatic elem;
            retval = dmmeta::Gstatic_ReadStrptrMaybe(elem, str);
            retval = retval && gstatic_InputMaybe(elem);
            break;
        }
        case src_func_TableId_dmmeta_Ctypelen: { // finput:src_func.FDb.ctypelen
            dmmeta::Ctypelen elem;
            retval = dmmeta::Ctypelen_ReadStrptrMaybe(elem, str);
            retval = retval && ctypelen_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- src_func.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool src_func::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = src_func::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = src_func::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dmmeta.gstatic"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dmmeta.fstep"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispatch"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ctypelen"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dev.target"),recursive);
        retval = retval && src_func::LoadTuplesFile(algo::SsimFname(root,"dev.targsrc"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- src_func.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool src_func::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- src_func.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool src_func::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && src_func::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- src_func.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool src_func::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = src_func::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- src_func.FDb._db.Steps
// Calls Step function of dependencies
void src_func::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- src_func.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- src_func.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FTargsrc& src_func::targsrc_Alloc() {
    src_func::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FTargsrc* src_func::targsrc_AllocMaybe() {
    src_func::FTargsrc *row = (src_func::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) src_func::FTargsrc; // call constructor
    }
    return row;
}

// --- src_func.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FTargsrc* src_func::targsrc_InsertMaybe(const dev::Targsrc &value) {
    src_func::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(src_func::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_func::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = i32(n);
    }
}

// --- src_func.FDb.targsrc.InputMaybe
static bool src_func::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::targsrc_XrefMaybe(src_func::FTargsrc &row) {
    bool retval = true;
    (void)row;
    src_func::FTarget* p_target = src_func::ind_target_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "src_func.bad_xref  index:src_func.FDb.ind_target" << Keyval("key", target_Get(row));
        return false;
    }
    // targsrc: save pointer to target
    if (true) { // user-defined insert condition
        row.p_target = p_target;
    }
    // insert targsrc into index cd_targsrc
    if (true) { // user-defined insert condition
        cd_targsrc_Insert(*p_target, row);
    }
    return retval;
}

// --- src_func.FDb.target.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FTarget& src_func::target_Alloc() {
    src_func::FTarget* row = target_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.target  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.target.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FTarget* src_func::target_AllocMaybe() {
    src_func::FTarget *row = (src_func::FTarget*)target_AllocMem();
    if (row) {
        new (row) src_func::FTarget; // call constructor
    }
    return row;
}

// --- src_func.FDb.target.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FTarget* src_func::target_InsertMaybe(const dev::Target &value) {
    src_func::FTarget *row = &target_Alloc(); // if out of memory, process dies. if input error, return NULL.
    target_CopyIn(*row,const_cast<dev::Target&>(value));
    bool ok = target_XrefMaybe(*row); // this may return false
    if (!ok) {
        target_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.target.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::target_AllocMem() {
    u64 new_nelems     = _db.target_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FTarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.target_lary[bsr];
        if (!lev) {
            lev=(src_func::FTarget*)algo_lib::malloc_AllocMem(sizeof(src_func::FTarget) * (u64(1)<<bsr));
            _db.target_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.target_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.target.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::target_RemoveLast() {
    u64 n = _db.target_n;
    if (n > 0) {
        n -= 1;
        target_qFind(u64(n)).~FTarget();
        _db.target_n = i32(n);
    }
}

// --- src_func.FDb.target.InputMaybe
static bool src_func::target_InputMaybe(dev::Target &elem) {
    bool retval = true;
    retval = target_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.target.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::target_XrefMaybe(src_func::FTarget &row) {
    bool retval = true;
    (void)row;
    // insert target into index ind_target
    if (true) { // user-defined insert condition
        bool success = ind_target_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_func.duplicate_key  xref:src_func.FDb.ind_target"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_target.Find
// Find row by key. Return NULL if not found.
src_func::FTarget* src_func::ind_target_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_target_buckets_n - 1);
    src_func::FTarget* *e = &_db.ind_target_buckets_elems[index];
    src_func::FTarget* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_target_next;
    } while (true);
    return ret;
}

// --- src_func.FDb.ind_target.FindX
// Look up row by key and return reference. Throw exception if not found
src_func::FTarget& src_func::ind_target_FindX(const algo::strptr& key) {
    src_func::FTarget* ret = ind_target_Find(key);
    vrfy(ret, tempstr() << "src_func.key_error  table:ind_target  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_func.FDb.ind_target.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FTarget& src_func::ind_target_GetOrCreate(const algo::strptr& key) {
    src_func::FTarget* ret = ind_target_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &target_Alloc();
        (*ret).target = key;
        bool good = target_XrefMaybe(*ret);
        if (!good) {
            target_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_func.create_error  table:ind_target  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_func.FDb.ind_target.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_func::ind_target_InsertMaybe(src_func::FTarget& row) {
    ind_target_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_target_next == (src_func::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        src_func::FTarget* *prev = &_db.ind_target_buckets_elems[index];
        do {
            src_func::FTarget* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_target_next;
        } while (true);
        if (retval) {
            row.ind_target_next = *prev;
            _db.ind_target_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_target.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_func::ind_target_Remove(src_func::FTarget& row) {
    if (LIKELY(row.ind_target_next != (src_func::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        src_func::FTarget* *prev = &_db.ind_target_buckets_elems[index]; // addr of pointer to current element
        while (src_func::FTarget *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_target_next; // unlink (singly linked list)
                _db.ind_target_n--;
                row.ind_target_next = (src_func::FTarget*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_target_next;
        }
    }
}

// --- src_func.FDb.ind_target.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_func::ind_target_Reserve(int n) {
    u32 old_nbuckets = _db.ind_target_buckets_n;
    u32 new_nelems   = _db.ind_target_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_func::FTarget*);
        u32 new_size = new_nbuckets * sizeof(src_func::FTarget*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_func::FTarget* *new_buckets = (src_func::FTarget**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_func.out_of_memory  field:src_func.FDb.ind_target");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_target_buckets_n; i++) {
            src_func::FTarget* elem = _db.ind_target_buckets_elems[i];
            while (elem) {
                src_func::FTarget &row        = *elem;
                src_func::FTarget* next       = row.ind_target_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_target_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_target_buckets_elems, old_size);
        _db.ind_target_buckets_elems = new_buckets;
        _db.ind_target_buckets_n = new_nbuckets;
    }
}

// --- src_func.FDb.func.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FFunc& src_func::func_Alloc() {
    src_func::FFunc* row = func_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.func  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.func.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FFunc* src_func::func_AllocMaybe() {
    src_func::FFunc *row = (src_func::FFunc*)func_AllocMem();
    if (row) {
        new (row) src_func::FFunc; // call constructor
    }
    return row;
}

// --- src_func.FDb.func.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::func_AllocMem() {
    u64 new_nelems     = _db.func_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FFunc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.func_lary[bsr];
        if (!lev) {
            lev=(src_func::FFunc*)algo_lib::malloc_AllocMem(sizeof(src_func::FFunc) * (u64(1)<<bsr));
            _db.func_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.func_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.func.RemoveAll
// Remove all elements from Lary
void src_func::func_RemoveAll() {
    for (u64 n = _db.func_n; n>0; ) {
        n--;
        func_qFind(u64(n)).~FFunc(); // destroy last element
        _db.func_n = i32(n);
    }
}

// --- src_func.FDb.func.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::func_RemoveLast() {
    u64 n = _db.func_n;
    if (n > 0) {
        n -= 1;
        func_qFind(u64(n)).~FFunc();
        _db.func_n = i32(n);
    }
}

// --- src_func.FDb.func.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::func_XrefMaybe(src_func::FFunc &row) {
    bool retval = true;
    (void)row;
    // insert func into index bh_func
    if (true) { // user-defined insert condition
        bh_func_Insert(row);
    }
    // insert func into index ind_func
    if (true) { // user-defined insert condition
        bool success = ind_func_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_func.duplicate_key  xref:src_func.FDb.ind_func"; // check for duplicate key
            return false;
        }
    }
    src_func::FTargsrc* p_p_targsrc = row.p_targsrc;
    if (UNLIKELY(!p_p_targsrc)) {
        algo_lib::ResetErrtext() << "src_func.null_ref  xref:src_func.FTargsrc.zd_func";
        return false;
    }
    // insert func into index zd_func
    if (true) { // user-defined insert condition
        zd_func_Insert(*p_p_targsrc, row);
    }
    return retval;
}

// --- src_func.FDb.ind_func.Find
// Find row by key. Return NULL if not found.
src_func::FFunc* src_func::ind_func_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_func_buckets_n - 1);
    src_func::FFunc* *e = &_db.ind_func_buckets_elems[index];
    src_func::FFunc* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).func == key;
        if (done) break;
        e         = &ret->ind_func_next;
    } while (true);
    return ret;
}

// --- src_func.FDb.ind_func.FindX
// Look up row by key and return reference. Throw exception if not found
src_func::FFunc& src_func::ind_func_FindX(const algo::strptr& key) {
    src_func::FFunc* ret = ind_func_Find(key);
    vrfy(ret, tempstr() << "src_func.key_error  table:ind_func  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_func.FDb.ind_func.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_func::ind_func_InsertMaybe(src_func::FFunc& row) {
    ind_func_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_func_next == (src_func::FFunc*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.func) & (_db.ind_func_buckets_n - 1);
        src_func::FFunc* *prev = &_db.ind_func_buckets_elems[index];
        do {
            src_func::FFunc* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).func == row.func) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_func_next;
        } while (true);
        if (retval) {
            row.ind_func_next = *prev;
            _db.ind_func_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_func.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_func::ind_func_Remove(src_func::FFunc& row) {
    if (LIKELY(row.ind_func_next != (src_func::FFunc*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.func) & (_db.ind_func_buckets_n - 1);
        src_func::FFunc* *prev = &_db.ind_func_buckets_elems[index]; // addr of pointer to current element
        while (src_func::FFunc *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_func_next; // unlink (singly linked list)
                _db.ind_func_n--;
                row.ind_func_next = (src_func::FFunc*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_func_next;
        }
    }
}

// --- src_func.FDb.ind_func.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_func::ind_func_Reserve(int n) {
    u32 old_nbuckets = _db.ind_func_buckets_n;
    u32 new_nelems   = _db.ind_func_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_func::FFunc*);
        u32 new_size = new_nbuckets * sizeof(src_func::FFunc*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_func::FFunc* *new_buckets = (src_func::FFunc**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_func.out_of_memory  field:src_func.FDb.ind_func");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_func_buckets_n; i++) {
            src_func::FFunc* elem = _db.ind_func_buckets_elems[i];
            while (elem) {
                src_func::FFunc &row        = *elem;
                src_func::FFunc* next       = row.ind_func_next;
                u32 index          = algo::cstring_Hash(0, row.func) & (new_nbuckets-1);
                row.ind_func_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_func_buckets_elems, old_size);
        _db.ind_func_buckets_elems = new_buckets;
        _db.ind_func_buckets_n = new_nbuckets;
    }
}

// --- src_func.FDb.bh_func.Dealloc
// Remove all elements from heap and free memory used by the array.
void src_func::bh_func_Dealloc() {
    bh_func_RemoveAll();
    algo_lib::malloc_FreeMem(_db.bh_func_elems, sizeof(src_func::FFunc*)*_db.bh_func_max);
    _db.bh_func_max   = 0;
    _db.bh_func_elems = NULL;
}

// --- src_func.FDb.bh_func.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int src_func::bh_func_Downheap(src_func::FFunc& row, int idx) {
    src_func::FFunc* *elems = _db.bh_func_elems;
    int n = _db.bh_func_n;
    int child = idx*2+1;
    while (child < n) {
        src_func::FFunc* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            src_func::FFunc* q = elems[rchild]; // right child
            if (bh_func_ElemLt(*q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_func_ElemLt(*p,row)) {
            break;
        }
        p->bh_func_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- src_func.FDb.bh_func.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void src_func::bh_func_Insert(src_func::FFunc& row) {
    if (LIKELY(row.bh_func_idx == -1)) {
        bh_func_Reserve(1);
        int n = _db.bh_func_n;
        _db.bh_func_n = n + 1;
        int new_idx = bh_func_Upheap(row, n);
        row.bh_func_idx = new_idx;
        _db.bh_func_elems[new_idx] = &row;
    }
}

// --- src_func.FDb.bh_func.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 src_func::bh_func_Reheap(src_func::FFunc& row) {
    int old_idx = row.bh_func_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_func_Reserve(1);
        old_idx = _db.bh_func_n++;
    }
    int new_idx = bh_func_Upheap(row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_func_Downheap(row, old_idx);
    }
    row.bh_func_idx = new_idx;
    _db.bh_func_elems[new_idx] = &row;
    return new_idx;
}

// --- src_func.FDb.bh_func.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 src_func::bh_func_ReheapFirst() {
    src_func::FFunc &row = *_db.bh_func_elems[0];
    i32 new_idx = bh_func_Downheap(row, 0);
    row.bh_func_idx = new_idx;
    _db.bh_func_elems[new_idx] = &row;
    return new_idx;
}

// --- src_func.FDb.bh_func.Remove
// Remove element from index. If element is not in index, do nothing.
void src_func::bh_func_Remove(src_func::FFunc& row) {
    if (bh_func_InBheapQ(row)) {
        int old_idx = row.bh_func_idx;
        if (_db.bh_func_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_func_idx = -1;           // mark not in heap
            i32 n = _db.bh_func_n - 1; // index of last element in heap
            _db.bh_func_n = n;         // decrease count
            if (old_idx != n) {
                src_func::FFunc *elem = _db.bh_func_elems[n];
                int new_idx = bh_func_Upheap(*elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_func_Downheap(*elem, old_idx);
                }
                elem->bh_func_idx = new_idx;
                _db.bh_func_elems[new_idx] = elem;
            }
        }
    }
}

// --- src_func.FDb.bh_func.RemoveAll
// Remove all elements from binary heap
void src_func::bh_func_RemoveAll() {
    int n = _db.bh_func_n;
    for (int i = n - 1; i>=0; i--) {
        _db.bh_func_elems[i]->bh_func_idx = -1; // mark not-in-heap
    }
    _db.bh_func_n = 0;
}

// --- src_func.FDb.bh_func.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
src_func::FFunc* src_func::bh_func_RemoveFirst() {
    src_func::FFunc *row = NULL;
    if (_db.bh_func_n > 0) {
        row = _db.bh_func_elems[0];
        row->bh_func_idx = -1;           // mark not in heap
        i32 n = _db.bh_func_n - 1; // index of last element in heap
        _db.bh_func_n = n;         // decrease count
        if (n) {
            src_func::FFunc &elem = *_db.bh_func_elems[n];
            int new_idx = bh_func_Downheap(elem, 0);
            elem.bh_func_idx = new_idx;
            _db.bh_func_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- src_func.FDb.bh_func.Reserve
// Reserve space in index for N more elements
void src_func::bh_func_Reserve(int n) {
    i32 old_max = _db.bh_func_max;
    if (UNLIKELY(_db.bh_func_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(src_func::FFunc*);
        u32 new_size = new_max * sizeof(src_func::FFunc*);
        void *new_mem = algo_lib::malloc_ReallocMem(_db.bh_func_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("src_func.out_of_memory  field:src_func.FDb.bh_func");
        }
        _db.bh_func_elems = (src_func::FFunc**)new_mem;
        _db.bh_func_max = new_max;
    }
}

// --- src_func.FDb.bh_func.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int src_func::bh_func_Upheap(src_func::FFunc& row, int idx) {
    src_func::FFunc* *elems = _db.bh_func_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        src_func::FFunc* p = elems[j];
        if (!bh_func_ElemLt(row, *p)) {
            break;
        }
        p->bh_func_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- src_func.FDb.bh_func.ElemLt
inline static bool src_func::bh_func_ElemLt(src_func::FFunc &a, src_func::FFunc &b) {
    (void)_db;
    return sortkey_Lt(a, b);
}

// --- src_func.FDb.dispatch.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FDispatch& src_func::dispatch_Alloc() {
    src_func::FDispatch* row = dispatch_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.dispatch  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.dispatch.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FDispatch* src_func::dispatch_AllocMaybe() {
    src_func::FDispatch *row = (src_func::FDispatch*)dispatch_AllocMem();
    if (row) {
        new (row) src_func::FDispatch; // call constructor
    }
    return row;
}

// --- src_func.FDb.dispatch.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FDispatch* src_func::dispatch_InsertMaybe(const dmmeta::Dispatch &value) {
    src_func::FDispatch *row = &dispatch_Alloc(); // if out of memory, process dies. if input error, return NULL.
    dispatch_CopyIn(*row,const_cast<dmmeta::Dispatch&>(value));
    bool ok = dispatch_XrefMaybe(*row); // this may return false
    if (!ok) {
        dispatch_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.dispatch.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::dispatch_AllocMem() {
    u64 new_nelems     = _db.dispatch_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FDispatch*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.dispatch_lary[bsr];
        if (!lev) {
            lev=(src_func::FDispatch*)algo_lib::malloc_AllocMem(sizeof(src_func::FDispatch) * (u64(1)<<bsr));
            _db.dispatch_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.dispatch_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.dispatch.RemoveAll
// Remove all elements from Lary
void src_func::dispatch_RemoveAll() {
    for (u64 n = _db.dispatch_n; n>0; ) {
        n--;
        dispatch_qFind(u64(n)).~FDispatch(); // destroy last element
        _db.dispatch_n = i32(n);
    }
}

// --- src_func.FDb.dispatch.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::dispatch_RemoveLast() {
    u64 n = _db.dispatch_n;
    if (n > 0) {
        n -= 1;
        dispatch_qFind(u64(n)).~FDispatch();
        _db.dispatch_n = i32(n);
    }
}

// --- src_func.FDb.dispatch.InputMaybe
static bool src_func::dispatch_InputMaybe(dmmeta::Dispatch &elem) {
    bool retval = true;
    retval = dispatch_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.dispatch.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::dispatch_XrefMaybe(src_func::FDispatch &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- src_func.FDb.fstep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FFstep& src_func::fstep_Alloc() {
    src_func::FFstep* row = fstep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.fstep  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.fstep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FFstep* src_func::fstep_AllocMaybe() {
    src_func::FFstep *row = (src_func::FFstep*)fstep_AllocMem();
    if (row) {
        new (row) src_func::FFstep; // call constructor
    }
    return row;
}

// --- src_func.FDb.fstep.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FFstep* src_func::fstep_InsertMaybe(const dmmeta::Fstep &value) {
    src_func::FFstep *row = &fstep_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fstep_CopyIn(*row,const_cast<dmmeta::Fstep&>(value));
    bool ok = fstep_XrefMaybe(*row); // this may return false
    if (!ok) {
        fstep_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.fstep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::fstep_AllocMem() {
    u64 new_nelems     = _db.fstep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FFstep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fstep_lary[bsr];
        if (!lev) {
            lev=(src_func::FFstep*)algo_lib::malloc_AllocMem(sizeof(src_func::FFstep) * (u64(1)<<bsr));
            _db.fstep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fstep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.fstep.RemoveAll
// Remove all elements from Lary
void src_func::fstep_RemoveAll() {
    for (u64 n = _db.fstep_n; n>0; ) {
        n--;
        fstep_qFind(u64(n)).~FFstep(); // destroy last element
        _db.fstep_n = i32(n);
    }
}

// --- src_func.FDb.fstep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::fstep_RemoveLast() {
    u64 n = _db.fstep_n;
    if (n > 0) {
        n -= 1;
        fstep_qFind(u64(n)).~FFstep();
        _db.fstep_n = i32(n);
    }
}

// --- src_func.FDb.fstep.InputMaybe
static bool src_func::fstep_InputMaybe(dmmeta::Fstep &elem) {
    bool retval = true;
    retval = fstep_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.fstep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::fstep_XrefMaybe(src_func::FFstep &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- src_func.FDb.gstatic.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FGstatic& src_func::gstatic_Alloc() {
    src_func::FGstatic* row = gstatic_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.gstatic  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.gstatic.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FGstatic* src_func::gstatic_AllocMaybe() {
    src_func::FGstatic *row = (src_func::FGstatic*)gstatic_AllocMem();
    if (row) {
        new (row) src_func::FGstatic; // call constructor
    }
    return row;
}

// --- src_func.FDb.gstatic.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FGstatic* src_func::gstatic_InsertMaybe(const dmmeta::Gstatic &value) {
    src_func::FGstatic *row = &gstatic_Alloc(); // if out of memory, process dies. if input error, return NULL.
    gstatic_CopyIn(*row,const_cast<dmmeta::Gstatic&>(value));
    bool ok = gstatic_XrefMaybe(*row); // this may return false
    if (!ok) {
        gstatic_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.gstatic.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::gstatic_AllocMem() {
    u64 new_nelems     = _db.gstatic_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FGstatic*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.gstatic_lary[bsr];
        if (!lev) {
            lev=(src_func::FGstatic*)algo_lib::malloc_AllocMem(sizeof(src_func::FGstatic) * (u64(1)<<bsr));
            _db.gstatic_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.gstatic_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.gstatic.RemoveAll
// Remove all elements from Lary
void src_func::gstatic_RemoveAll() {
    for (u64 n = _db.gstatic_n; n>0; ) {
        n--;
        gstatic_qFind(u64(n)).~FGstatic(); // destroy last element
        _db.gstatic_n = i32(n);
    }
}

// --- src_func.FDb.gstatic.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::gstatic_RemoveLast() {
    u64 n = _db.gstatic_n;
    if (n > 0) {
        n -= 1;
        gstatic_qFind(u64(n)).~FGstatic();
        _db.gstatic_n = i32(n);
    }
}

// --- src_func.FDb.gstatic.InputMaybe
static bool src_func::gstatic_InputMaybe(dmmeta::Gstatic &elem) {
    bool retval = true;
    retval = gstatic_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.gstatic.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::gstatic_XrefMaybe(src_func::FGstatic &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- src_func.FDb.ind_genprefix.Find
// Find row by key. Return NULL if not found.
src_func::FGenprefix* src_func::ind_genprefix_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_genprefix_buckets_n - 1);
    src_func::FGenprefix* *e = &_db.ind_genprefix_buckets_elems[index];
    src_func::FGenprefix* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).genprefix == key;
        if (done) break;
        e         = &ret->ind_genprefix_next;
    } while (true);
    return ret;
}

// --- src_func.FDb.ind_genprefix.FindX
// Look up row by key and return reference. Throw exception if not found
src_func::FGenprefix& src_func::ind_genprefix_FindX(const algo::strptr& key) {
    src_func::FGenprefix* ret = ind_genprefix_Find(key);
    vrfy(ret, tempstr() << "src_func.key_error  table:ind_genprefix  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_func.FDb.ind_genprefix.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FGenprefix& src_func::ind_genprefix_GetOrCreate(const algo::strptr& key) {
    src_func::FGenprefix* ret = ind_genprefix_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &genprefix_Alloc();
        (*ret).genprefix = key;
        bool good = genprefix_XrefMaybe(*ret);
        if (!good) {
            genprefix_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_func.create_error  table:ind_genprefix  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_func.FDb.ind_genprefix.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_func::ind_genprefix_InsertMaybe(src_func::FGenprefix& row) {
    ind_genprefix_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_genprefix_next == (src_func::FGenprefix*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.genprefix) & (_db.ind_genprefix_buckets_n - 1);
        src_func::FGenprefix* *prev = &_db.ind_genprefix_buckets_elems[index];
        do {
            src_func::FGenprefix* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).genprefix == row.genprefix) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_genprefix_next;
        } while (true);
        if (retval) {
            row.ind_genprefix_next = *prev;
            _db.ind_genprefix_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_genprefix.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_func::ind_genprefix_Remove(src_func::FGenprefix& row) {
    if (LIKELY(row.ind_genprefix_next != (src_func::FGenprefix*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.genprefix) & (_db.ind_genprefix_buckets_n - 1);
        src_func::FGenprefix* *prev = &_db.ind_genprefix_buckets_elems[index]; // addr of pointer to current element
        while (src_func::FGenprefix *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_genprefix_next; // unlink (singly linked list)
                _db.ind_genprefix_n--;
                row.ind_genprefix_next = (src_func::FGenprefix*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_genprefix_next;
        }
    }
}

// --- src_func.FDb.ind_genprefix.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_func::ind_genprefix_Reserve(int n) {
    u32 old_nbuckets = _db.ind_genprefix_buckets_n;
    u32 new_nelems   = _db.ind_genprefix_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_func::FGenprefix*);
        u32 new_size = new_nbuckets * sizeof(src_func::FGenprefix*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_func::FGenprefix* *new_buckets = (src_func::FGenprefix**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_func.out_of_memory  field:src_func.FDb.ind_genprefix");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_genprefix_buckets_n; i++) {
            src_func::FGenprefix* elem = _db.ind_genprefix_buckets_elems[i];
            while (elem) {
                src_func::FGenprefix &row        = *elem;
                src_func::FGenprefix* next       = row.ind_genprefix_next;
                u32 index          = algo::Smallstr100_Hash(0, row.genprefix) & (new_nbuckets-1);
                row.ind_genprefix_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_genprefix_buckets_elems, old_size);
        _db.ind_genprefix_buckets_elems = new_buckets;
        _db.ind_genprefix_buckets_n = new_nbuckets;
    }
}

// --- src_func.FDb.ctypelen.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_func::FCtypelen& src_func::ctypelen_Alloc() {
    src_func::FCtypelen* row = ctypelen_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_func.out_of_mem  field:src_func.FDb.ctypelen  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_func.FDb.ctypelen.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_func::FCtypelen* src_func::ctypelen_AllocMaybe() {
    src_func::FCtypelen *row = (src_func::FCtypelen*)ctypelen_AllocMem();
    if (row) {
        new (row) src_func::FCtypelen; // call constructor
    }
    return row;
}

// --- src_func.FDb.ctypelen.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_func::FCtypelen* src_func::ctypelen_InsertMaybe(const dmmeta::Ctypelen &value) {
    src_func::FCtypelen *row = &ctypelen_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ctypelen_CopyIn(*row,const_cast<dmmeta::Ctypelen&>(value));
    bool ok = ctypelen_XrefMaybe(*row); // this may return false
    if (!ok) {
        ctypelen_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_func.FDb.ctypelen.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_func::ctypelen_AllocMem() {
    u64 new_nelems     = _db.ctypelen_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_func::FCtypelen*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ctypelen_lary[bsr];
        if (!lev) {
            lev=(src_func::FCtypelen*)algo_lib::malloc_AllocMem(sizeof(src_func::FCtypelen) * (u64(1)<<bsr));
            _db.ctypelen_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ctypelen_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_func.FDb.ctypelen.RemoveAll
// Remove all elements from Lary
void src_func::ctypelen_RemoveAll() {
    for (u64 n = _db.ctypelen_n; n>0; ) {
        n--;
        ctypelen_qFind(u64(n)).~FCtypelen(); // destroy last element
        _db.ctypelen_n = i32(n);
    }
}

// --- src_func.FDb.ctypelen.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_func::ctypelen_RemoveLast() {
    u64 n = _db.ctypelen_n;
    if (n > 0) {
        n -= 1;
        ctypelen_qFind(u64(n)).~FCtypelen();
        _db.ctypelen_n = i32(n);
    }
}

// --- src_func.FDb.ctypelen.InputMaybe
static bool src_func::ctypelen_InputMaybe(dmmeta::Ctypelen &elem) {
    bool retval = true;
    retval = ctypelen_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_func.FDb.ctypelen.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_func::ctypelen_XrefMaybe(src_func::FCtypelen &row) {
    bool retval = true;
    (void)row;
    // insert ctypelen into index ind_ctypelen
    if (true) { // user-defined insert condition
        bool success = ind_ctypelen_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_func.duplicate_key  xref:src_func.FDb.ind_ctypelen"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_ctypelen.Find
// Find row by key. Return NULL if not found.
src_func::FCtypelen* src_func::ind_ctypelen_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr100_Hash(0, key) & (_db.ind_ctypelen_buckets_n - 1);
    src_func::FCtypelen* *e = &_db.ind_ctypelen_buckets_elems[index];
    src_func::FCtypelen* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ctype == key;
        if (done) break;
        e         = &ret->ind_ctypelen_next;
    } while (true);
    return ret;
}

// --- src_func.FDb.ind_ctypelen.FindX
// Look up row by key and return reference. Throw exception if not found
src_func::FCtypelen& src_func::ind_ctypelen_FindX(const algo::strptr& key) {
    src_func::FCtypelen* ret = ind_ctypelen_Find(key);
    vrfy(ret, tempstr() << "src_func.key_error  table:ind_ctypelen  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_func.FDb.ind_ctypelen.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_func::FCtypelen& src_func::ind_ctypelen_GetOrCreate(const algo::strptr& key) {
    src_func::FCtypelen* ret = ind_ctypelen_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ctypelen_Alloc();
        (*ret).ctype = key;
        bool good = ctypelen_XrefMaybe(*ret);
        if (!good) {
            ctypelen_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_func.create_error  table:ind_ctypelen  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_func.FDb.ind_ctypelen.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_func::ind_ctypelen_InsertMaybe(src_func::FCtypelen& row) {
    ind_ctypelen_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ctypelen_next == (src_func::FCtypelen*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.ctype) & (_db.ind_ctypelen_buckets_n - 1);
        src_func::FCtypelen* *prev = &_db.ind_ctypelen_buckets_elems[index];
        do {
            src_func::FCtypelen* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ctype == row.ctype) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ctypelen_next;
        } while (true);
        if (retval) {
            row.ind_ctypelen_next = *prev;
            _db.ind_ctypelen_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_func.FDb.ind_ctypelen.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_func::ind_ctypelen_Remove(src_func::FCtypelen& row) {
    if (LIKELY(row.ind_ctypelen_next != (src_func::FCtypelen*)-1)) {// check if in hash already
        u32 index = algo::Smallstr100_Hash(0, row.ctype) & (_db.ind_ctypelen_buckets_n - 1);
        src_func::FCtypelen* *prev = &_db.ind_ctypelen_buckets_elems[index]; // addr of pointer to current element
        while (src_func::FCtypelen *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ctypelen_next; // unlink (singly linked list)
                _db.ind_ctypelen_n--;
                row.ind_ctypelen_next = (src_func::FCtypelen*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ctypelen_next;
        }
    }
}

// --- src_func.FDb.ind_ctypelen.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_func::ind_ctypelen_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ctypelen_buckets_n;
    u32 new_nelems   = _db.ind_ctypelen_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_func::FCtypelen*);
        u32 new_size = new_nbuckets * sizeof(src_func::FCtypelen*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_func::FCtypelen* *new_buckets = (src_func::FCtypelen**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_func.out_of_memory  field:src_func.FDb.ind_ctypelen");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ctypelen_buckets_n; i++) {
            src_func::FCtypelen* elem = _db.ind_ctypelen_buckets_elems[i];
            while (elem) {
                src_func::FCtypelen &row        = *elem;
                src_func::FCtypelen* next       = row.ind_ctypelen_next;
                u32 index          = algo::Smallstr100_Hash(0, row.ctype) & (new_nbuckets-1);
                row.ind_ctypelen_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ctypelen_buckets_elems, old_size);
        _db.ind_ctypelen_buckets_elems = new_buckets;
        _db.ind_ctypelen_buckets_n = new_nbuckets;
    }
}

// --- src_func.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr src_func::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- src_func.FDb.trace.N
// Function return 1
inline static i32 src_func::trace_N() {
    return 1;
}

// --- src_func.FDb.bh_func_curs.Add
static void src_func::_db_bh_func_curs_Add(_db_bh_func_curs &curs, src_func::FFunc& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    src_func::FFunc* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        src_func::FFunc* p = elems[j];
        if (!bh_func_ElemLt(row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- src_func.FDb.bh_func_curs.Reserve
void src_func::_db_bh_func_curs_Reserve(_db_bh_func_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_func_N();
        curs.temp_elems   = (src_func::FFunc**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("src_func.cursor_out_of_memory  func:src_func.FDb.bh_func_curs.Reserve");
        }
        curs.temp_max       = bh_func_N();
    }
}

// --- src_func.FDb.bh_func_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void src_func::_db_bh_func_curs_Reset(_db_bh_func_curs &curs, src_func::FDb &parent) {
    curs.parent       = &parent;
    _db_bh_func_curs_Reserve(curs, bh_func_N());
    curs.temp_n = 0;
    if (parent.bh_func_n > 0) {
        src_func::FFunc &first = *parent.bh_func_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- src_func.FDb.bh_func_curs.Next
// Advance cursor.
void src_func::_db_bh_func_curs_Next(_db_bh_func_curs &curs) {
    src_func::FFunc* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        src_func::FFunc* dead = elems[0];
        int i       = 0;
        src_func::FFunc* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            src_func::FFunc* choose = last;
            int l         = i*2+1;
            if (l<n) {
                src_func::FFunc* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                src_func::FFunc* er = elems[r];
                if (bh_func_ElemLt(*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_func_ElemLt(*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_func_idx;
        i = (index*2+1);
        if (i < bh_func_N()) {
            src_func::FFunc &elem = *curs.parent->bh_func_elems[i];
            _db_bh_func_curs_Add(curs, elem);
        }
        if (i+1 < bh_func_N()) {
            src_func::FFunc &elem = *curs.parent->bh_func_elems[i + 1];
            _db_bh_func_curs_Add(curs, elem);
        }
    }
}

// --- src_func.FDb..Init
// Set all fields to initial values.
void src_func::FDb_Init() {
    // initialize LAry genprefix (src_func.FDb.genprefix)
    _db.genprefix_n = 0;
    memset(_db.genprefix_lary, 0, sizeof(_db.genprefix_lary)); // zero out all level pointers
    src_func::FGenprefix* genprefix_first = (src_func::FGenprefix*)algo_lib::malloc_AllocMem(sizeof(src_func::FGenprefix) * (u64(1)<<4));
    if (!genprefix_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.genprefix_lary[i]  = genprefix_first;
        genprefix_first    += 1ULL<<i;
    }
    // initialize LAry targsrc (src_func.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    src_func::FTargsrc* targsrc_first = (src_func::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_func::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }
    // initialize LAry target (src_func.FDb.target)
    _db.target_n = 0;
    memset(_db.target_lary, 0, sizeof(_db.target_lary)); // zero out all level pointers
    src_func::FTarget* target_first = (src_func::FTarget*)algo_lib::malloc_AllocMem(sizeof(src_func::FTarget) * (u64(1)<<4));
    if (!target_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.target_lary[i]  = target_first;
        target_first    += 1ULL<<i;
    }
    // initialize hash table for src_func::FTarget;
    _db.ind_target_n             	= 0; // (src_func.FDb.ind_target)
    _db.ind_target_buckets_n     	= 4; // (src_func.FDb.ind_target)
    _db.ind_target_buckets_elems 	= (src_func::FTarget**)algo_lib::malloc_AllocMem(sizeof(src_func::FTarget*)*_db.ind_target_buckets_n); // initial buckets (src_func.FDb.ind_target)
    if (!_db.ind_target_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_func.FDb.ind_target)
    }
    memset(_db.ind_target_buckets_elems, 0, sizeof(src_func::FTarget*)*_db.ind_target_buckets_n); // (src_func.FDb.ind_target)
    // initialize LAry func (src_func.FDb.func)
    _db.func_n = 0;
    memset(_db.func_lary, 0, sizeof(_db.func_lary)); // zero out all level pointers
    src_func::FFunc* func_first = (src_func::FFunc*)algo_lib::malloc_AllocMem(sizeof(src_func::FFunc) * (u64(1)<<4));
    if (!func_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.func_lary[i]  = func_first;
        func_first    += 1ULL<<i;
    }
    // initialize hash table for src_func::FFunc;
    _db.ind_func_n             	= 0; // (src_func.FDb.ind_func)
    _db.ind_func_buckets_n     	= 4; // (src_func.FDb.ind_func)
    _db.ind_func_buckets_elems 	= (src_func::FFunc**)algo_lib::malloc_AllocMem(sizeof(src_func::FFunc*)*_db.ind_func_buckets_n); // initial buckets (src_func.FDb.ind_func)
    if (!_db.ind_func_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_func.FDb.ind_func)
    }
    memset(_db.ind_func_buckets_elems, 0, sizeof(src_func::FFunc*)*_db.ind_func_buckets_n); // (src_func.FDb.ind_func)
    _db.bh_func_max   	= 0; // (src_func.FDb.bh_func)
    _db.bh_func_n     	= 0; // (src_func.FDb.bh_func)
    _db.bh_func_elems 	= NULL; // (src_func.FDb.bh_func)
    // initialize LAry dispatch (src_func.FDb.dispatch)
    _db.dispatch_n = 0;
    memset(_db.dispatch_lary, 0, sizeof(_db.dispatch_lary)); // zero out all level pointers
    src_func::FDispatch* dispatch_first = (src_func::FDispatch*)algo_lib::malloc_AllocMem(sizeof(src_func::FDispatch) * (u64(1)<<4));
    if (!dispatch_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.dispatch_lary[i]  = dispatch_first;
        dispatch_first    += 1ULL<<i;
    }
    _db.c_cur_targsrc = NULL;
    _db.cur_line = i32(0);
    // initialize LAry fstep (src_func.FDb.fstep)
    _db.fstep_n = 0;
    memset(_db.fstep_lary, 0, sizeof(_db.fstep_lary)); // zero out all level pointers
    src_func::FFstep* fstep_first = (src_func::FFstep*)algo_lib::malloc_AllocMem(sizeof(src_func::FFstep) * (u64(1)<<4));
    if (!fstep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fstep_lary[i]  = fstep_first;
        fstep_first    += 1ULL<<i;
    }
    // initialize LAry gstatic (src_func.FDb.gstatic)
    _db.gstatic_n = 0;
    memset(_db.gstatic_lary, 0, sizeof(_db.gstatic_lary)); // zero out all level pointers
    src_func::FGstatic* gstatic_first = (src_func::FGstatic*)algo_lib::malloc_AllocMem(sizeof(src_func::FGstatic) * (u64(1)<<4));
    if (!gstatic_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.gstatic_lary[i]  = gstatic_first;
        gstatic_first    += 1ULL<<i;
    }
    // initialize hash table for src_func::FGenprefix;
    _db.ind_genprefix_n             	= 0; // (src_func.FDb.ind_genprefix)
    _db.ind_genprefix_buckets_n     	= 4; // (src_func.FDb.ind_genprefix)
    _db.ind_genprefix_buckets_elems 	= (src_func::FGenprefix**)algo_lib::malloc_AllocMem(sizeof(src_func::FGenprefix*)*_db.ind_genprefix_buckets_n); // initial buckets (src_func.FDb.ind_genprefix)
    if (!_db.ind_genprefix_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_func.FDb.ind_genprefix)
    }
    memset(_db.ind_genprefix_buckets_elems, 0, sizeof(src_func::FGenprefix*)*_db.ind_genprefix_buckets_n); // (src_func.FDb.ind_genprefix)
    // initialize LAry ctypelen (src_func.FDb.ctypelen)
    _db.ctypelen_n = 0;
    memset(_db.ctypelen_lary, 0, sizeof(_db.ctypelen_lary)); // zero out all level pointers
    src_func::FCtypelen* ctypelen_first = (src_func::FCtypelen*)algo_lib::malloc_AllocMem(sizeof(src_func::FCtypelen) * (u64(1)<<4));
    if (!ctypelen_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ctypelen_lary[i]  = ctypelen_first;
        ctypelen_first    += 1ULL<<i;
    }
    // initialize hash table for src_func::FCtypelen;
    _db.ind_ctypelen_n             	= 0; // (src_func.FDb.ind_ctypelen)
    _db.ind_ctypelen_buckets_n     	= 4; // (src_func.FDb.ind_ctypelen)
    _db.ind_ctypelen_buckets_elems 	= (src_func::FCtypelen**)algo_lib::malloc_AllocMem(sizeof(src_func::FCtypelen*)*_db.ind_ctypelen_buckets_n); // initial buckets (src_func.FDb.ind_ctypelen)
    if (!_db.ind_ctypelen_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_func.FDb.ind_ctypelen)
    }
    memset(_db.ind_ctypelen_buckets_elems, 0, sizeof(src_func::FCtypelen*)*_db.ind_ctypelen_buckets_n); // (src_func.FDb.ind_ctypelen)
    _db.printed_user_impl_notice = bool(false);

    src_func::InitReflection();
}

// --- src_func.FDb..Uninit
void src_func::FDb_Uninit() {
    src_func::FDb &row = _db; (void)row;

    // src_func.FDb.ind_ctypelen.Uninit (Thash)  //
    // skip destruction of ind_ctypelen in global scope

    // src_func.FDb.ctypelen.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.ind_genprefix.Uninit (Thash)  //
    // skip destruction of ind_genprefix in global scope

    // src_func.FDb.gstatic.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.fstep.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.dispatch.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.bh_func.Uninit (Bheap)  //
    // skip destruction in global scope

    // src_func.FDb.ind_func.Uninit (Thash)  //
    // skip destruction of ind_func in global scope

    // src_func.FDb.func.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.ind_target.Uninit (Thash)  //
    // skip destruction of ind_target in global scope

    // src_func.FDb.target.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope

    // src_func.FDb.genprefix.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- src_func.FDispatch.base.CopyOut
// Copy fields out of row
void src_func::dispatch_CopyOut(src_func::FDispatch &row, dmmeta::Dispatch &out) {
    out.dispatch = row.dispatch;
    out.unk = row.unk;
    out.read = row.read;
    out.print = row.print;
    out.haslen = row.haslen;
    out.call = row.call;
    out.strict = row.strict;
    out.comment = row.comment;
}

// --- src_func.FDispatch.base.CopyIn
// Copy fields in to row
void src_func::dispatch_CopyIn(src_func::FDispatch &row, dmmeta::Dispatch &in) {
    row.dispatch = in.dispatch;
    row.unk = in.unk;
    row.read = in.read;
    row.print = in.print;
    row.haslen = in.haslen;
    row.call = in.call;
    row.strict = in.strict;
    row.comment = in.comment;
}

// --- src_func.FDispatch.ns.Get
algo::Smallstr16 src_func::ns_Get(src_func::FDispatch& dispatch) {
    algo::Smallstr16 ret(algo::Pathcomp(dispatch.dispatch, ".RL"));
    return ret;
}

// --- src_func.FDispatch.name.Get
algo::Smallstr50 src_func::name_Get(src_func::FDispatch& dispatch) {
    algo::Smallstr50 ret(algo::Pathcomp(dispatch.dispatch, ".RR"));
    return ret;
}

// --- src_func.FDispatch..Init
// Set all fields to initial values.
void src_func::FDispatch_Init(src_func::FDispatch& dispatch) {
    dispatch.unk = bool(false);
    dispatch.read = bool(false);
    dispatch.print = bool(false);
    dispatch.haslen = bool(false);
    dispatch.call = bool(false);
    dispatch.strict = bool(false);
}

// --- src_func.FFstep.base.CopyOut
// Copy fields out of row
void src_func::fstep_CopyOut(src_func::FFstep &row, dmmeta::Fstep &out) {
    out.fstep = row.fstep;
    out.steptype = row.steptype;
    out.comment = row.comment;
}

// --- src_func.FFstep.base.CopyIn
// Copy fields in to row
void src_func::fstep_CopyIn(src_func::FFstep &row, dmmeta::Fstep &in) {
    row.fstep = in.fstep;
    row.steptype = in.steptype;
    row.comment = in.comment;
}

// --- src_func.FFstep.field.Get
algo::Smallstr100 src_func::field_Get(src_func::FFstep& fstep) {
    algo::Smallstr100 ret(algo::Pathcomp(fstep.fstep, ""));
    return ret;
}

// --- src_func.FFstep.ns.Get
algo::Smallstr16 src_func::ns_Get(src_func::FFstep& fstep) {
    algo::Smallstr16 ret(algo::Pathcomp(fstep.fstep, ".LL"));
    return ret;
}

// --- src_func.FFstep.name.Get
algo::Smallstr50 src_func::name_Get(src_func::FFstep& fstep) {
    algo::Smallstr50 ret(algo::Pathcomp(fstep.fstep, ".RR"));
    return ret;
}

// --- src_func.FFunc.sortkey.Nextchar
// Extract next character from STR and advance IDX
inline static u64 src_func::sortkey_Nextchar(const src_func::FFunc& func, algo::strptr &str, int &idx) {
    (void)func;
    int i = idx;
    u64 ch = str.elems[i];
    i++;
    // detect number in string and eat it up into CH.
    // (this only works for base-10 numbers
    // Digits are sorted before chars
    if (unsigned(ch - '0') < 10) {
        while(i < str.n_elems) { // resulting char sorts before ascii 47
            unsigned dig = str.elems[i] - '0';
            if (dig >= 10) break;
            ch = ch * 10 + dig;
            i++;
        }
    } else if (ch > '9') {
        // create space between '0'..'9' for 15-digit numbers
        ch += 1000000000000000LL;
    }
    idx = i;
    return ch;
}

// --- src_func.FFunc.sortkey.Cmp
// Compare two fields.
// Comparison uses version sort (detect embedded integers).
// Comparison is case-insensitive.
i32 src_func::sortkey_Cmp(src_func::FFunc& func, src_func::FFunc &rhs) {
    i32 retval = 0;
    int idx_a = 0;
    int idx_b = 0;
    algo::strptr str_a = ch_Getary(func.sortkey);
    algo::strptr str_b = ch_Getary(rhs.sortkey);
    int n_a   = elems_N(str_a);
    int n_b   = elems_N(str_b);
    retval    = i32_Cmp(n_a,n_b);
    while (idx_a < n_a && idx_b < n_b) {
        u64 ch_a = sortkey_Nextchar(func, str_a, idx_a);
        u64 ch_b = sortkey_Nextchar(rhs, str_b, idx_b);
        if (ch_a != ch_b) {
            retval = (ch_a > ch_b)*2-1;
            break;
        }
    }
    return retval;
}

// --- src_func.FFunc..Init
// Set all fields to initial values.
void src_func::FFunc_Init(src_func::FFunc& func) {
    func.p_targsrc = NULL;
    func.line = i32(0);
    func.isstatic = bool(false);
    func.isinline = bool(false);
    func.amcprot = bool(false);
    func.select = bool(false);
    func.iffy = bool(false);
    func.mystery = bool(false);
    func.p_written_to = NULL;
    func.ind_func_next = (src_func::FFunc*)-1; // (src_func.FDb.ind_func) not-in-hash
    func.bh_func_idx = -1; // (src_func.FDb.bh_func) not-in-heap
    func.zd_func_next = (src_func::FFunc*)-1; // (src_func.FTargsrc.zd_func) not-in-list
    func.zd_func_prev = NULL; // (src_func.FTargsrc.zd_func)
}

// --- src_func.FFunc..Uninit
void src_func::FFunc_Uninit(src_func::FFunc& func) {
    src_func::FFunc &row = func; (void)row;
    bh_func_Remove(row); // remove func from index bh_func
    ind_func_Remove(row); // remove func from index ind_func
    src_func::FTargsrc* p_p_targsrc = row.p_targsrc;
    if (p_p_targsrc)  {
        zd_func_Remove(*p_p_targsrc, row);// remove func from index zd_func
    }
}

// --- src_func.FGenprefix..Uninit
void src_func::FGenprefix_Uninit(src_func::FGenprefix& genprefix) {
    src_func::FGenprefix &row = genprefix; (void)row;
    ind_genprefix_Remove(row); // remove genprefix from index ind_genprefix
}

// --- src_func.FGstatic.base.CopyOut
// Copy fields out of row
void src_func::gstatic_CopyOut(src_func::FGstatic &row, dmmeta::Gstatic &out) {
    out.field = row.field;
    out.comment = row.comment;
}

// --- src_func.FGstatic.base.CopyIn
// Copy fields in to row
void src_func::gstatic_CopyIn(src_func::FGstatic &row, dmmeta::Gstatic &in) {
    row.field = in.field;
    row.comment = in.comment;
}

// --- src_func.FGstatic.ns.Get
algo::Smallstr16 src_func::ns_Get(src_func::FGstatic& gstatic) {
    algo::Smallstr16 ret(algo::Pathcomp(gstatic.field, ".LL"));
    return ret;
}

// --- src_func.FTarget.base.CopyOut
// Copy fields out of row
void src_func::target_CopyOut(src_func::FTarget &row, dev::Target &out) {
    out.target = row.target;
}

// --- src_func.FTarget.base.CopyIn
// Copy fields in to row
void src_func::target_CopyIn(src_func::FTarget &row, dev::Target &in) {
    row.target = in.target;
}

// --- src_func.FTarget.cd_targsrc.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void src_func::cd_targsrc_Insert(src_func::FTarget& target, src_func::FTargsrc& row) {
    if (!cd_targsrc_InLlistQ(row)) {
        if (target.cd_targsrc_head) {
            row.cd_targsrc_next = target.cd_targsrc_head;
            row.cd_targsrc_prev = target.cd_targsrc_head->cd_targsrc_prev;
            row.cd_targsrc_prev->cd_targsrc_next = &row;
            row.cd_targsrc_next->cd_targsrc_prev = &row;
        } else {
            row.cd_targsrc_next = &row;
            row.cd_targsrc_prev = &row;
            target.cd_targsrc_head = &row;
        }
        target.cd_targsrc_n++;
    }
}

// --- src_func.FTarget.cd_targsrc.Remove
// Remove element from index. If element is not in index, do nothing.
void src_func::cd_targsrc_Remove(src_func::FTarget& target, src_func::FTargsrc& row) {
    if (cd_targsrc_InLlistQ(row)) {
        src_func::FTargsrc* old_head       = target.cd_targsrc_head;
        (void)old_head; // in case it's not used
        src_func::FTargsrc *oldnext = row.cd_targsrc_next;
        src_func::FTargsrc *oldprev = row.cd_targsrc_prev;
        oldnext->cd_targsrc_prev = oldprev; // remove element from list
        oldprev->cd_targsrc_next = oldnext;
        target.cd_targsrc_n--;  // adjust count
        if (&row == target.cd_targsrc_head) {
            target.cd_targsrc_head = oldnext==&row ? NULL : oldnext; // adjust list head
        }
        row.cd_targsrc_next = (src_func::FTargsrc*)-1; // mark element as not-in-list);
        row.cd_targsrc_prev = NULL; // clear back-pointer
    }
}

// --- src_func.FTarget.cd_targsrc.RemoveAll
// Empty the index. (The rows are not deleted)
void src_func::cd_targsrc_RemoveAll(src_func::FTarget& target) {
    src_func::FTargsrc* row = target.cd_targsrc_head;
    src_func::FTargsrc* head = target.cd_targsrc_head;
    target.cd_targsrc_head = NULL;
    target.cd_targsrc_n = 0;
    while (row) {
        src_func::FTargsrc* row_next = row->cd_targsrc_next;
        row->cd_targsrc_next  = (src_func::FTargsrc*)-1;
        row->cd_targsrc_prev  = NULL;
        row = row_next != head  ? row_next : NULL;
    }
}

// --- src_func.FTarget.cd_targsrc.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
src_func::FTargsrc* src_func::cd_targsrc_RemoveFirst(src_func::FTarget& target) {
    src_func::FTargsrc *row = NULL;
    row = target.cd_targsrc_head;
    if (row) {
        bool hasmore = row!=row->cd_targsrc_next;
        target.cd_targsrc_head = hasmore ? row->cd_targsrc_next : NULL;
        row->cd_targsrc_next->cd_targsrc_prev = row->cd_targsrc_prev;
        row->cd_targsrc_prev->cd_targsrc_next = row->cd_targsrc_next;
        row->cd_targsrc_prev = NULL;
        target.cd_targsrc_n--;
        row->cd_targsrc_next = (src_func::FTargsrc*)-1; // mark as not-in-list
    }
    return row;
}

// --- src_func.FTarget.cd_targsrc.RotateFirst
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
src_func::FTargsrc* src_func::cd_targsrc_RotateFirst(src_func::FTarget& target) {
    src_func::FTargsrc *row = NULL;
    row = target.cd_targsrc_head;
    if (row) {
        target.cd_targsrc_head = row->cd_targsrc_next;
    }
    return row;
}

// --- src_func.FTarget..Uninit
void src_func::FTarget_Uninit(src_func::FTarget& target) {
    src_func::FTarget &row = target; (void)row;
    ind_target_Remove(row); // remove target from index ind_target
}

// --- src_func.FTargsrc.base.CopyOut
// Copy fields out of row
void src_func::targsrc_CopyOut(src_func::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- src_func.FTargsrc.base.CopyIn
// Copy fields in to row
void src_func::targsrc_CopyIn(src_func::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- src_func.FTargsrc.target.Get
algo::Smallstr16 src_func::target_Get(src_func::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- src_func.FTargsrc.src.Get
algo::Smallstr200 src_func::src_Get(src_func::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- src_func.FTargsrc.ext.Get
algo::Smallstr10 src_func::ext_Get(src_func::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- src_func.FTargsrc.zd_func.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void src_func::zd_func_Insert(src_func::FTargsrc& targsrc, src_func::FFunc& row) {
    if (!zd_func_InLlistQ(row)) {
        src_func::FFunc* old_tail = targsrc.zd_func_tail;
        row.zd_func_next = NULL;
        row.zd_func_prev = old_tail;
        targsrc.zd_func_tail = &row;
        src_func::FFunc **new_row_a = &old_tail->zd_func_next;
        src_func::FFunc **new_row_b = &targsrc.zd_func_head;
        src_func::FFunc **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        targsrc.zd_func_n++;
    }
}

// --- src_func.FTargsrc.zd_func.Remove
// Remove element from index. If element is not in index, do nothing.
void src_func::zd_func_Remove(src_func::FTargsrc& targsrc, src_func::FFunc& row) {
    if (zd_func_InLlistQ(row)) {
        src_func::FFunc* old_head       = targsrc.zd_func_head;
        (void)old_head; // in case it's not used
        src_func::FFunc* prev = row.zd_func_prev;
        src_func::FFunc* next = row.zd_func_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        src_func::FFunc **new_next_a = &prev->zd_func_next;
        src_func::FFunc **new_next_b = &targsrc.zd_func_head;
        src_func::FFunc **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        src_func::FFunc **new_prev_a = &next->zd_func_prev;
        src_func::FFunc **new_prev_b = &targsrc.zd_func_tail;
        src_func::FFunc **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        targsrc.zd_func_n--;
        row.zd_func_next=(src_func::FFunc*)-1; // not-in-list
    }
}

// --- src_func.FTargsrc.zd_func.RemoveAll
// Empty the index. (The rows are not deleted)
void src_func::zd_func_RemoveAll(src_func::FTargsrc& targsrc) {
    src_func::FFunc* row = targsrc.zd_func_head;
    targsrc.zd_func_head = NULL;
    targsrc.zd_func_tail = NULL;
    targsrc.zd_func_n = 0;
    while (row) {
        src_func::FFunc* row_next = row->zd_func_next;
        row->zd_func_next  = (src_func::FFunc*)-1;
        row->zd_func_prev  = NULL;
        row = row_next;
    }
}

// --- src_func.FTargsrc.zd_func.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
src_func::FFunc* src_func::zd_func_RemoveFirst(src_func::FTargsrc& targsrc) {
    src_func::FFunc *row = NULL;
    row = targsrc.zd_func_head;
    if (row) {
        src_func::FFunc *next = row->zd_func_next;
        targsrc.zd_func_head = next;
        src_func::FFunc **new_end_a = &next->zd_func_prev;
        src_func::FFunc **new_end_b = &targsrc.zd_func_tail;
        src_func::FFunc **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        targsrc.zd_func_n--;
        row->zd_func_next = (src_func::FFunc*)-1; // mark as not-in-list
    }
    return row;
}

// --- src_func.FTargsrc..Uninit
void src_func::FTargsrc_Uninit(src_func::FTargsrc& targsrc) {
    src_func::FTargsrc &row = targsrc; (void)row;
    src_func::FTarget* p_target = src_func::ind_target_Find(target_Get(row));
    if (p_target)  {
        cd_targsrc_Remove(*p_target, row);// remove targsrc from index cd_targsrc
    }
}

// --- src_func.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_func::value_ToCstr(const src_func::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_func_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- src_func.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_func::value_Print(const src_func::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_func.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_func::value_SetStrptrMaybe(src_func::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,src_func_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_func.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_func::value_SetStrptr(src_func::FieldId& parent, algo::strptr rhs, src_func_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_func.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_func::value_ReadStrptrMaybe(src_func::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_func.FieldId..ReadStrptrMaybe
// Read fields of src_func::FieldId from an ascii string.
// The format of the string is the format of the src_func::FieldId's only field
bool src_func::FieldId_ReadStrptrMaybe(src_func::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_func.FieldId..Print
// print string representation of ROW to string STR
// cfmt:src_func.FieldId.String  printfmt:Raw
void src_func::FieldId_Print(src_func::FieldId& row, algo::cstring& str) {
    src_func::value_Print(row, str);
}

// --- src_func.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_func::value_ToCstr(const src_func::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_func_TableId_dmmeta_Ctypelen: ret = "dmmeta.Ctypelen";  break;
        case src_func_TableId_dmmeta_Dispatch: ret = "dmmeta.Dispatch";  break;
        case src_func_TableId_dmmeta_Fstep : ret = "dmmeta.Fstep";  break;
        case src_func_TableId_dmmeta_Gstatic: ret = "dmmeta.Gstatic";  break;
        case src_func_TableId_dev_Target   : ret = "dev.Target";  break;
        case src_func_TableId_dev_Targsrc  : ret = "dev.Targsrc";  break;
    }
    return ret;
}

// --- src_func.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_func::value_Print(const src_func::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_func.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_func::value_SetStrptrMaybe(src_func::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,src_func_TableId_dev_Target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,src_func_TableId_dev_target); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_func_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_func_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','F'): {
                    if (memcmp(rhs.elems+8,"step",4)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_Fstep); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','f'): {
                    if (memcmp(rhs.elems+8,"step",4)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_fstep); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','G'): {
                    if (memcmp(rhs.elems+8,"static",6)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_Gstatic); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','g'): {
                    if (memcmp(rhs.elems+8,"static",6)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_gstatic); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 15: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','C'): {
                    if (memcmp(rhs.elems+8,"typelen",7)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_Ctypelen); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','D'): {
                    if (memcmp(rhs.elems+8,"ispatch",7)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_Dispatch); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','c'): {
                    if (memcmp(rhs.elems+8,"typelen",7)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_ctypelen); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','d'): {
                    if (memcmp(rhs.elems+8,"ispatch",7)==0) { value_SetEnum(parent,src_func_TableId_dmmeta_dispatch); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_func.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_func::value_SetStrptr(src_func::TableId& parent, algo::strptr rhs, src_func_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_func.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_func::value_ReadStrptrMaybe(src_func::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_func.TableId..ReadStrptrMaybe
// Read fields of src_func::TableId from an ascii string.
// The format of the string is the format of the src_func::TableId's only field
bool src_func::TableId_ReadStrptrMaybe(src_func::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_func.TableId..Print
// print string representation of ROW to string STR
// cfmt:src_func.TableId.String  printfmt:Raw
void src_func::TableId_Print(src_func::TableId& row, algo::cstring& str) {
    src_func::value_Print(row, str);
}

// --- src_func...SizeCheck
inline static void src_func::SizeCheck() {
}

// --- src_func...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        src_func::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        src_func::ReadArgv(); // dmmeta.main:src_func
        src_func::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("src_func.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        src_func::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- src_func...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
