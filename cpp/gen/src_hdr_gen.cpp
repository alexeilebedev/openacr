//
// cpp/gen/src_hdr_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/src_hdr_gen.h"
#include "include/gen/src_hdr_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_git_gen.h"
#include "include/gen/lib_git_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
lib_git::FDb    lib_git::_db;     // dependency found via dev.targdep
src_hdr::FDb    src_hdr::_db;     // dependency found via dev.targdep

namespace src_hdr {
const char *src_hdr_help =
"src_hdr: Update source file / copyright header\n"
"Usage: src_hdr [options]\n"
"    OPTION             TYPE    DFLT    COMMENT\n"
"    -in                string  \"data\"  Input directory or filename, - for stdin\n"
"    -targsrc           regx    \"\"      Regx of targsrc to update\n"
"    -write                             Update files in-place\n"
"    -indent                            Indent source files\n"
"    -update_copyright  string  \"\"      Update copyright notice for specified company with current year\n"
"    -scriptfile        regx    \"\"      Regx of scripts to update header\n"
"    -verbose           int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug             int             Debug level (0..255); alias -d; cumulative\n"
"    -help                              Print help and exit; alias -h\n"
"    -version                           Print version and exit\n"
"    -signature                         Show signatures and exit; alias -sig\n"
;


} // namespace src_hdr
namespace src_hdr { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    static bool          ns_InputMaybe(dmmeta::Ns &elem) __attribute__((nothrow));
    static bool          nsx_InputMaybe(dmmeta::Nsx &elem) __attribute__((nothrow));
    static bool          license_InputMaybe(dev::License &elem) __attribute__((nothrow));
    static bool          target_InputMaybe(dev::Target &elem) __attribute__((nothrow));
    static bool          scriptfile_InputMaybe(dev::Scriptfile &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- src_hdr.FCopyline..Uninit
void src_hdr::FCopyline_Uninit(src_hdr::FCopyline& fcopyline) {
    src_hdr::FCopyline &row = fcopyline; (void)row;
    ind_fcopyline_Remove(row); // remove fcopyline from index ind_fcopyline
}

// --- src_hdr.trace..Print
// print string representation of src_hdr::trace to string LHS, no header -- cprint:src_hdr.trace.String
void src_hdr::trace_Print(src_hdr::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "src_hdr.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- src_hdr.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     src_hdr.FDb.cmdline
//     algo_lib.FDb.cmdline
void src_hdr::ReadArgv() {
    command::src_hdr &cmd = src_hdr::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::src_hdr_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"src_hdr: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "src_hdr: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::src_hdr_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"src_hdr: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(src_hdr_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
    vrfy(src_hdr::LoadTuplesMaybe(cmd.in,true)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
}

// --- src_hdr.FDb._db.MainLoop
// Main loop.
void src_hdr::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        src_hdr::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- src_hdr.FDb._db.Step
// Main step
void src_hdr::Step() {
}

// --- src_hdr.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void src_hdr::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("src_hdr", src_hdr::InsertStrptrMaybe, NULL, src_hdr::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "src_hdr.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(src_hdr::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)src_hdr::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'src_hdr.Input'  signature:'ba646a29d87bb2b4e55e5f7cf38f30fc92d02f6e'");
}

// --- src_hdr.FDb._db.StaticCheck
void src_hdr::StaticCheck() {
    algo_assert(_offset_of(src_hdr::FieldId, value) + sizeof(((src_hdr::FieldId*)0)->value) == sizeof(src_hdr::FieldId));
}

// --- src_hdr.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool src_hdr::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    src_hdr::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case src_hdr_TableId_dev_Targsrc: { // finput:src_hdr.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            break;
        }
        case src_hdr_TableId_dmmeta_Ns: { // finput:src_hdr.FDb.ns
            dmmeta::Ns elem;
            retval = dmmeta::Ns_ReadStrptrMaybe(elem, str);
            retval = retval && ns_InputMaybe(elem);
            break;
        }
        case src_hdr_TableId_dmmeta_Nsx: { // finput:src_hdr.FDb.nsx
            dmmeta::Nsx elem;
            retval = dmmeta::Nsx_ReadStrptrMaybe(elem, str);
            retval = retval && nsx_InputMaybe(elem);
            break;
        }
        case src_hdr_TableId_dev_License: { // finput:src_hdr.FDb.license
            dev::License elem;
            retval = dev::License_ReadStrptrMaybe(elem, str);
            retval = retval && license_InputMaybe(elem);
            break;
        }
        case src_hdr_TableId_dev_Target: { // finput:src_hdr.FDb.target
            dev::Target elem;
            retval = dev::Target_ReadStrptrMaybe(elem, str);
            retval = retval && target_InputMaybe(elem);
            break;
        }
        case src_hdr_TableId_dev_Scriptfile: { // finput:src_hdr.FDb.scriptfile
            dev::Scriptfile elem;
            retval = dev::Scriptfile_ReadStrptrMaybe(elem, str);
            retval = retval && scriptfile_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- src_hdr.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool src_hdr::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = src_hdr::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = src_hdr::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dev.license"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ns"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dmmeta.nsx"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dev.scriptfile"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dev.target"),recursive);
        retval = retval && src_hdr::LoadTuplesFile(algo::SsimFname(root,"dev.targsrc"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- src_hdr.FDb._db.LoadTuplesFile
// Load all finputs from given file.
bool src_hdr::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    fildes.fd = OpenRead(fname,algo_FileFlags__throw);
    retval = LoadTuplesFd(fildes.fd, fname, recursive);
    return retval;
}

// --- src_hdr.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool src_hdr::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && src_hdr::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- src_hdr.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool src_hdr::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = src_hdr::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- src_hdr.FDb._db.Steps
// Calls Step function of dependencies
void src_hdr::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- src_hdr.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- src_hdr.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FTargsrc& src_hdr::targsrc_Alloc() {
    src_hdr::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FTargsrc* src_hdr::targsrc_AllocMaybe() {
    src_hdr::FTargsrc *row = (src_hdr::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) src_hdr::FTargsrc; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FTargsrc* src_hdr::targsrc_InsertMaybe(const dev::Targsrc &value) {
    src_hdr::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = i32(n);
    }
}

// --- src_hdr.FDb.targsrc.InputMaybe
static bool src_hdr::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::targsrc_XrefMaybe(src_hdr::FTargsrc &row) {
    bool retval = true;
    (void)row;
    src_hdr::FTarget* p_target = src_hdr::ind_target_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "src_hdr.bad_xref  index:src_hdr.FDb.ind_target" << Keyval("key", target_Get(row));
        return false;
    }
    // targsrc: save pointer to target
    if (true) { // user-defined insert condition
        row.p_target = p_target;
    }
    // insert targsrc into index c_targsrc
    if (true) { // user-defined insert condition
        c_targsrc_Insert(*p_target, row);
    }
    return retval;
}

// --- src_hdr.FDb.ns.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FNs& src_hdr::ns_Alloc() {
    src_hdr::FNs* row = ns_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.ns  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.ns.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FNs* src_hdr::ns_AllocMaybe() {
    src_hdr::FNs *row = (src_hdr::FNs*)ns_AllocMem();
    if (row) {
        new (row) src_hdr::FNs; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.ns.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FNs* src_hdr::ns_InsertMaybe(const dmmeta::Ns &value) {
    src_hdr::FNs *row = &ns_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ns_CopyIn(*row,const_cast<dmmeta::Ns&>(value));
    bool ok = ns_XrefMaybe(*row); // this may return false
    if (!ok) {
        ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.ns.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::ns_AllocMem() {
    u64 new_nelems     = _db.ns_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FNs*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ns_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FNs*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FNs) * (u64(1)<<bsr));
            _db.ns_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ns_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.ns.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::ns_RemoveLast() {
    u64 n = _db.ns_n;
    if (n > 0) {
        n -= 1;
        ns_qFind(u64(n)).~FNs();
        _db.ns_n = i32(n);
    }
}

// --- src_hdr.FDb.ns.InputMaybe
static bool src_hdr::ns_InputMaybe(dmmeta::Ns &elem) {
    bool retval = true;
    retval = ns_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.ns.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::ns_XrefMaybe(src_hdr::FNs &row) {
    bool retval = true;
    (void)row;
    src_hdr::FLicense* p_license = src_hdr::ind_license_Find(row.license);
    if (UNLIKELY(!p_license)) {
        algo_lib::ResetErrtext() << "src_hdr.bad_xref  index:src_hdr.FDb.ind_license" << Keyval("key", row.license);
        return false;
    }
    // ns: save pointer to license
    if (true) { // user-defined insert condition
        row.p_license = p_license;
    }
    // insert ns into index ind_ns
    if (true) { // user-defined insert condition
        bool success = ind_ns_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_hdr.duplicate_key  xref:src_hdr.FDb.ind_ns"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_ns.Find
// Find row by key. Return NULL if not found.
src_hdr::FNs* src_hdr::ind_ns_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_ns_buckets_n - 1);
    src_hdr::FNs* *e = &_db.ind_ns_buckets_elems[index];
    src_hdr::FNs* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ns == key;
        if (done) break;
        e         = &ret->ind_ns_next;
    } while (true);
    return ret;
}

// --- src_hdr.FDb.ind_ns.FindX
// Look up row by key and return reference. Throw exception if not found
src_hdr::FNs& src_hdr::ind_ns_FindX(const algo::strptr& key) {
    src_hdr::FNs* ret = ind_ns_Find(key);
    vrfy(ret, tempstr() << "src_hdr.key_error  table:ind_ns  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_hdr.FDb.ind_ns.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_hdr::ind_ns_InsertMaybe(src_hdr::FNs& row) {
    ind_ns_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ns_next == (src_hdr::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        src_hdr::FNs* *prev = &_db.ind_ns_buckets_elems[index];
        do {
            src_hdr::FNs* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ns == row.ns) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ns_next;
        } while (true);
        if (retval) {
            row.ind_ns_next = *prev;
            _db.ind_ns_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_ns.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_hdr::ind_ns_Remove(src_hdr::FNs& row) {
    if (LIKELY(row.ind_ns_next != (src_hdr::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        src_hdr::FNs* *prev = &_db.ind_ns_buckets_elems[index]; // addr of pointer to current element
        while (src_hdr::FNs *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ns_next; // unlink (singly linked list)
                _db.ind_ns_n--;
                row.ind_ns_next = (src_hdr::FNs*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ns_next;
        }
    }
}

// --- src_hdr.FDb.ind_ns.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_hdr::ind_ns_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ns_buckets_n;
    u32 new_nelems   = _db.ind_ns_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_hdr::FNs*);
        u32 new_size = new_nbuckets * sizeof(src_hdr::FNs*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_hdr::FNs* *new_buckets = (src_hdr::FNs**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_hdr.out_of_memory  field:src_hdr.FDb.ind_ns");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ns_buckets_n; i++) {
            src_hdr::FNs* elem = _db.ind_ns_buckets_elems[i];
            while (elem) {
                src_hdr::FNs &row        = *elem;
                src_hdr::FNs* next       = row.ind_ns_next;
                u32 index          = algo::Smallstr16_Hash(0, row.ns) & (new_nbuckets-1);
                row.ind_ns_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ns_buckets_elems, old_size);
        _db.ind_ns_buckets_elems = new_buckets;
        _db.ind_ns_buckets_n = new_nbuckets;
    }
}

// --- src_hdr.FDb.nsx.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FNsx& src_hdr::nsx_Alloc() {
    src_hdr::FNsx* row = nsx_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.nsx  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.nsx.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FNsx* src_hdr::nsx_AllocMaybe() {
    src_hdr::FNsx *row = (src_hdr::FNsx*)nsx_AllocMem();
    if (row) {
        new (row) src_hdr::FNsx; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.nsx.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FNsx* src_hdr::nsx_InsertMaybe(const dmmeta::Nsx &value) {
    src_hdr::FNsx *row = &nsx_Alloc(); // if out of memory, process dies. if input error, return NULL.
    nsx_CopyIn(*row,const_cast<dmmeta::Nsx&>(value));
    bool ok = nsx_XrefMaybe(*row); // this may return false
    if (!ok) {
        nsx_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.nsx.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::nsx_AllocMem() {
    u64 new_nelems     = _db.nsx_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FNsx*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.nsx_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FNsx*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FNsx) * (u64(1)<<bsr));
            _db.nsx_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.nsx_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.nsx.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::nsx_RemoveLast() {
    u64 n = _db.nsx_n;
    if (n > 0) {
        n -= 1;
        nsx_qFind(u64(n)).~FNsx();
        _db.nsx_n = i32(n);
    }
}

// --- src_hdr.FDb.nsx.InputMaybe
static bool src_hdr::nsx_InputMaybe(dmmeta::Nsx &elem) {
    bool retval = true;
    retval = nsx_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.nsx.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::nsx_XrefMaybe(src_hdr::FNsx &row) {
    bool retval = true;
    (void)row;
    src_hdr::FNs* p_ns = src_hdr::ind_ns_Find(row.ns);
    if (UNLIKELY(!p_ns)) {
        algo_lib::ResetErrtext() << "src_hdr.bad_xref  index:src_hdr.FDb.ind_ns" << Keyval("key", row.ns);
        return false;
    }
    // insert nsx into index c_nsx
    if (true) { // user-defined insert condition
        bool success = c_nsx_InsertMaybe(*p_ns, row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_hdr.duplicate_key  xref:src_hdr.FNs.c_nsx"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_hdr.FDb.license.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FLicense& src_hdr::license_Alloc() {
    src_hdr::FLicense* row = license_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.license  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.license.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FLicense* src_hdr::license_AllocMaybe() {
    src_hdr::FLicense *row = (src_hdr::FLicense*)license_AllocMem();
    if (row) {
        new (row) src_hdr::FLicense; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.license.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FLicense* src_hdr::license_InsertMaybe(const dev::License &value) {
    src_hdr::FLicense *row = &license_Alloc(); // if out of memory, process dies. if input error, return NULL.
    license_CopyIn(*row,const_cast<dev::License&>(value));
    bool ok = license_XrefMaybe(*row); // this may return false
    if (!ok) {
        license_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.license.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::license_AllocMem() {
    u64 new_nelems     = _db.license_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FLicense*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.license_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FLicense*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FLicense) * (u64(1)<<bsr));
            _db.license_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.license_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.license.RemoveAll
// Remove all elements from Lary
void src_hdr::license_RemoveAll() {
    for (u64 n = _db.license_n; n>0; ) {
        n--;
        license_qFind(u64(n)).~FLicense(); // destroy last element
        _db.license_n = i32(n);
    }
}

// --- src_hdr.FDb.license.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::license_RemoveLast() {
    u64 n = _db.license_n;
    if (n > 0) {
        n -= 1;
        license_qFind(u64(n)).~FLicense();
        _db.license_n = i32(n);
    }
}

// --- src_hdr.FDb.license.InputMaybe
static bool src_hdr::license_InputMaybe(dev::License &elem) {
    bool retval = true;
    retval = license_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.license.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::license_XrefMaybe(src_hdr::FLicense &row) {
    bool retval = true;
    (void)row;
    // insert license into index ind_license
    if (true) { // user-defined insert condition
        bool success = ind_license_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_hdr.duplicate_key  xref:src_hdr.FDb.ind_license"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_license.Find
// Find row by key. Return NULL if not found.
src_hdr::FLicense* src_hdr::ind_license_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr50_Hash(0, key) & (_db.ind_license_buckets_n - 1);
    src_hdr::FLicense* *e = &_db.ind_license_buckets_elems[index];
    src_hdr::FLicense* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).license == key;
        if (done) break;
        e         = &ret->ind_license_next;
    } while (true);
    return ret;
}

// --- src_hdr.FDb.ind_license.FindX
// Look up row by key and return reference. Throw exception if not found
src_hdr::FLicense& src_hdr::ind_license_FindX(const algo::strptr& key) {
    src_hdr::FLicense* ret = ind_license_Find(key);
    vrfy(ret, tempstr() << "src_hdr.key_error  table:ind_license  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_hdr.FDb.ind_license.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_hdr::FLicense& src_hdr::ind_license_GetOrCreate(const algo::strptr& key) {
    src_hdr::FLicense* ret = ind_license_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &license_Alloc();
        (*ret).license = key;
        bool good = license_XrefMaybe(*ret);
        if (!good) {
            license_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_hdr.create_error  table:ind_license  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_hdr.FDb.ind_license.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_hdr::ind_license_InsertMaybe(src_hdr::FLicense& row) {
    ind_license_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_license_next == (src_hdr::FLicense*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.license) & (_db.ind_license_buckets_n - 1);
        src_hdr::FLicense* *prev = &_db.ind_license_buckets_elems[index];
        do {
            src_hdr::FLicense* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).license == row.license) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_license_next;
        } while (true);
        if (retval) {
            row.ind_license_next = *prev;
            _db.ind_license_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_license.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_hdr::ind_license_Remove(src_hdr::FLicense& row) {
    if (LIKELY(row.ind_license_next != (src_hdr::FLicense*)-1)) {// check if in hash already
        u32 index = algo::Smallstr50_Hash(0, row.license) & (_db.ind_license_buckets_n - 1);
        src_hdr::FLicense* *prev = &_db.ind_license_buckets_elems[index]; // addr of pointer to current element
        while (src_hdr::FLicense *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_license_next; // unlink (singly linked list)
                _db.ind_license_n--;
                row.ind_license_next = (src_hdr::FLicense*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_license_next;
        }
    }
}

// --- src_hdr.FDb.ind_license.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_hdr::ind_license_Reserve(int n) {
    u32 old_nbuckets = _db.ind_license_buckets_n;
    u32 new_nelems   = _db.ind_license_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_hdr::FLicense*);
        u32 new_size = new_nbuckets * sizeof(src_hdr::FLicense*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_hdr::FLicense* *new_buckets = (src_hdr::FLicense**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_hdr.out_of_memory  field:src_hdr.FDb.ind_license");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_license_buckets_n; i++) {
            src_hdr::FLicense* elem = _db.ind_license_buckets_elems[i];
            while (elem) {
                src_hdr::FLicense &row        = *elem;
                src_hdr::FLicense* next       = row.ind_license_next;
                u32 index          = algo::Smallstr50_Hash(0, row.license) & (new_nbuckets-1);
                row.ind_license_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_license_buckets_elems, old_size);
        _db.ind_license_buckets_elems = new_buckets;
        _db.ind_license_buckets_n = new_nbuckets;
    }
}

// --- src_hdr.FDb.target.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FTarget& src_hdr::target_Alloc() {
    src_hdr::FTarget* row = target_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.target  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.target.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FTarget* src_hdr::target_AllocMaybe() {
    src_hdr::FTarget *row = (src_hdr::FTarget*)target_AllocMem();
    if (row) {
        new (row) src_hdr::FTarget; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.target.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FTarget* src_hdr::target_InsertMaybe(const dev::Target &value) {
    src_hdr::FTarget *row = &target_Alloc(); // if out of memory, process dies. if input error, return NULL.
    target_CopyIn(*row,const_cast<dev::Target&>(value));
    bool ok = target_XrefMaybe(*row); // this may return false
    if (!ok) {
        target_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.target.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::target_AllocMem() {
    u64 new_nelems     = _db.target_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FTarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.target_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FTarget*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FTarget) * (u64(1)<<bsr));
            _db.target_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.target_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.target.RemoveAll
// Remove all elements from Lary
void src_hdr::target_RemoveAll() {
    for (u64 n = _db.target_n; n>0; ) {
        n--;
        target_qFind(u64(n)).~FTarget(); // destroy last element
        _db.target_n = i32(n);
    }
}

// --- src_hdr.FDb.target.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::target_RemoveLast() {
    u64 n = _db.target_n;
    if (n > 0) {
        n -= 1;
        target_qFind(u64(n)).~FTarget();
        _db.target_n = i32(n);
    }
}

// --- src_hdr.FDb.target.InputMaybe
static bool src_hdr::target_InputMaybe(dev::Target &elem) {
    bool retval = true;
    retval = target_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.target.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::target_XrefMaybe(src_hdr::FTarget &row) {
    bool retval = true;
    (void)row;
    src_hdr::FNs* p_target = src_hdr::ind_ns_Find(row.target);
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "src_hdr.bad_xref  index:src_hdr.FDb.ind_ns" << Keyval("key", row.target);
        return false;
    }
    // target: save pointer to target
    if (true) { // user-defined insert condition
        row.p_ns = p_target;
    }
    // insert target into index ind_target
    if (true) { // user-defined insert condition
        bool success = ind_target_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_hdr.duplicate_key  xref:src_hdr.FDb.ind_target"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_target.Find
// Find row by key. Return NULL if not found.
src_hdr::FTarget* src_hdr::ind_target_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_target_buckets_n - 1);
    src_hdr::FTarget* *e = &_db.ind_target_buckets_elems[index];
    src_hdr::FTarget* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_target_next;
    } while (true);
    return ret;
}

// --- src_hdr.FDb.ind_target.FindX
// Look up row by key and return reference. Throw exception if not found
src_hdr::FTarget& src_hdr::ind_target_FindX(const algo::strptr& key) {
    src_hdr::FTarget* ret = ind_target_Find(key);
    vrfy(ret, tempstr() << "src_hdr.key_error  table:ind_target  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_hdr.FDb.ind_target.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_hdr::ind_target_InsertMaybe(src_hdr::FTarget& row) {
    ind_target_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_target_next == (src_hdr::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        src_hdr::FTarget* *prev = &_db.ind_target_buckets_elems[index];
        do {
            src_hdr::FTarget* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_target_next;
        } while (true);
        if (retval) {
            row.ind_target_next = *prev;
            _db.ind_target_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_target.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_hdr::ind_target_Remove(src_hdr::FTarget& row) {
    if (LIKELY(row.ind_target_next != (src_hdr::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        src_hdr::FTarget* *prev = &_db.ind_target_buckets_elems[index]; // addr of pointer to current element
        while (src_hdr::FTarget *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_target_next; // unlink (singly linked list)
                _db.ind_target_n--;
                row.ind_target_next = (src_hdr::FTarget*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_target_next;
        }
    }
}

// --- src_hdr.FDb.ind_target.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_hdr::ind_target_Reserve(int n) {
    u32 old_nbuckets = _db.ind_target_buckets_n;
    u32 new_nelems   = _db.ind_target_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_hdr::FTarget*);
        u32 new_size = new_nbuckets * sizeof(src_hdr::FTarget*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_hdr::FTarget* *new_buckets = (src_hdr::FTarget**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_hdr.out_of_memory  field:src_hdr.FDb.ind_target");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_target_buckets_n; i++) {
            src_hdr::FTarget* elem = _db.ind_target_buckets_elems[i];
            while (elem) {
                src_hdr::FTarget &row        = *elem;
                src_hdr::FTarget* next       = row.ind_target_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_target_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_target_buckets_elems, old_size);
        _db.ind_target_buckets_elems = new_buckets;
        _db.ind_target_buckets_n = new_nbuckets;
    }
}

// --- src_hdr.FDb.scriptfile.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FScriptfile& src_hdr::scriptfile_Alloc() {
    src_hdr::FScriptfile* row = scriptfile_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.scriptfile  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.scriptfile.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FScriptfile* src_hdr::scriptfile_AllocMaybe() {
    src_hdr::FScriptfile *row = (src_hdr::FScriptfile*)scriptfile_AllocMem();
    if (row) {
        new (row) src_hdr::FScriptfile; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.scriptfile.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
src_hdr::FScriptfile* src_hdr::scriptfile_InsertMaybe(const dev::Scriptfile &value) {
    src_hdr::FScriptfile *row = &scriptfile_Alloc(); // if out of memory, process dies. if input error, return NULL.
    scriptfile_CopyIn(*row,const_cast<dev::Scriptfile&>(value));
    bool ok = scriptfile_XrefMaybe(*row); // this may return false
    if (!ok) {
        scriptfile_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- src_hdr.FDb.scriptfile.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* src_hdr::scriptfile_AllocMem() {
    u64 new_nelems     = _db.scriptfile_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    src_hdr::FScriptfile*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.scriptfile_lary[bsr];
        if (!lev) {
            lev=(src_hdr::FScriptfile*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FScriptfile) * (u64(1)<<bsr));
            _db.scriptfile_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.scriptfile_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- src_hdr.FDb.scriptfile.RemoveAll
// Remove all elements from Lary
void src_hdr::scriptfile_RemoveAll() {
    for (u64 n = _db.scriptfile_n; n>0; ) {
        n--;
        scriptfile_qFind(u64(n)).~FScriptfile(); // destroy last element
        _db.scriptfile_n = i32(n);
    }
}

// --- src_hdr.FDb.scriptfile.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void src_hdr::scriptfile_RemoveLast() {
    u64 n = _db.scriptfile_n;
    if (n > 0) {
        n -= 1;
        scriptfile_qFind(u64(n)).~FScriptfile();
        _db.scriptfile_n = i32(n);
    }
}

// --- src_hdr.FDb.scriptfile.InputMaybe
static bool src_hdr::scriptfile_InputMaybe(dev::Scriptfile &elem) {
    bool retval = true;
    retval = scriptfile_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- src_hdr.FDb.scriptfile.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::scriptfile_XrefMaybe(src_hdr::FScriptfile &row) {
    bool retval = true;
    (void)row;
    src_hdr::FLicense* p_license = src_hdr::ind_license_Find(row.license);
    if (UNLIKELY(!p_license)) {
        algo_lib::ResetErrtext() << "src_hdr.bad_xref  index:src_hdr.FDb.ind_license" << Keyval("key", row.license);
        return false;
    }
    // scriptfile: save pointer to license
    if (true) { // user-defined insert condition
        row.p_license = p_license;
    }
    return retval;
}

// --- src_hdr.FDb.fcopyline.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
src_hdr::FCopyline& src_hdr::fcopyline_Alloc() {
    src_hdr::FCopyline* row = fcopyline_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("src_hdr.out_of_mem  field:src_hdr.FDb.fcopyline  comment:'Alloc failed'");
    }
    return *row;
}

// --- src_hdr.FDb.fcopyline.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
src_hdr::FCopyline* src_hdr::fcopyline_AllocMaybe() {
    src_hdr::FCopyline *row = (src_hdr::FCopyline*)fcopyline_AllocMem();
    if (row) {
        new (row) src_hdr::FCopyline; // call constructor
    }
    return row;
}

// --- src_hdr.FDb.fcopyline.Delete
// Remove row from all global and cross indices, then deallocate row
void src_hdr::fcopyline_Delete(src_hdr::FCopyline &row) {
    row.~FCopyline();
    fcopyline_FreeMem(row);
}

// --- src_hdr.FDb.fcopyline.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* src_hdr::fcopyline_AllocMem() {
    src_hdr::FCopyline *row = _db.fcopyline_free;
    if (UNLIKELY(!row)) {
        fcopyline_Reserve(1);
        row = _db.fcopyline_free;
    }
    if (row) {
        _db.fcopyline_free = row->fcopyline_next;
    }
    return row;
}

// --- src_hdr.FDb.fcopyline.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void src_hdr::fcopyline_FreeMem(src_hdr::FCopyline &row) {
    if (UNLIKELY(row.fcopyline_next != (src_hdr::FCopyline*)-1)) {
        FatalErrorExit("src_hdr.tpool_double_delete  pool:src_hdr.FDb.fcopyline  comment:'double deletion caught'");
    }
    row.fcopyline_next = _db.fcopyline_free; // insert into free list
    _db.fcopyline_free  = &row;
}

// --- src_hdr.FDb.fcopyline.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 src_hdr::fcopyline_Reserve(u64 n_elems) {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.fcopyline_blocksize; // underlying allocator is probably Lpool
        u64 reserved = fcopyline_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- src_hdr.FDb.fcopyline.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 src_hdr::fcopyline_ReserveMem(u64 size) {
    u64 ret = 0;
    if (size >= sizeof(src_hdr::FCopyline)) {
        src_hdr::FCopyline *mem = (src_hdr::FCopyline*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(src_hdr::FCopyline) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].fcopyline_next = _db.fcopyline_free;
            _db.fcopyline_free = mem+i;
        }
    }
    return ret;
}

// --- src_hdr.FDb.fcopyline.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool src_hdr::fcopyline_XrefMaybe(src_hdr::FCopyline &row) {
    bool retval = true;
    (void)row;
    // insert fcopyline into index ind_fcopyline
    if (true) { // user-defined insert condition
        bool success = ind_fcopyline_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "src_hdr.duplicate_key  xref:src_hdr.FDb.ind_fcopyline"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_fcopyline.Find
// Find row by key. Return NULL if not found.
src_hdr::FCopyline* src_hdr::ind_fcopyline_Find(const algo::strptr& key) {
    u32 index = algo::cstring_Hash(0, key) & (_db.ind_fcopyline_buckets_n - 1);
    src_hdr::FCopyline* *e = &_db.ind_fcopyline_buckets_elems[index];
    src_hdr::FCopyline* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).fcopyline == key;
        if (done) break;
        e         = &ret->ind_fcopyline_next;
    } while (true);
    return ret;
}

// --- src_hdr.FDb.ind_fcopyline.FindX
// Look up row by key and return reference. Throw exception if not found
src_hdr::FCopyline& src_hdr::ind_fcopyline_FindX(const algo::strptr& key) {
    src_hdr::FCopyline* ret = ind_fcopyline_Find(key);
    vrfy(ret, tempstr() << "src_hdr.key_error  table:ind_fcopyline  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- src_hdr.FDb.ind_fcopyline.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
src_hdr::FCopyline& src_hdr::ind_fcopyline_GetOrCreate(const algo::strptr& key) {
    src_hdr::FCopyline* ret = ind_fcopyline_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &fcopyline_Alloc();
        (*ret).fcopyline = key;
        bool good = fcopyline_XrefMaybe(*ret);
        if (!good) {
            fcopyline_Delete(*ret); // delete offending row, any existin xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "src_hdr.create_error  table:ind_fcopyline  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- src_hdr.FDb.ind_fcopyline.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool src_hdr::ind_fcopyline_InsertMaybe(src_hdr::FCopyline& row) {
    ind_fcopyline_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_fcopyline_next == (src_hdr::FCopyline*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.fcopyline) & (_db.ind_fcopyline_buckets_n - 1);
        src_hdr::FCopyline* *prev = &_db.ind_fcopyline_buckets_elems[index];
        do {
            src_hdr::FCopyline* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).fcopyline == row.fcopyline) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_fcopyline_next;
        } while (true);
        if (retval) {
            row.ind_fcopyline_next = *prev;
            _db.ind_fcopyline_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- src_hdr.FDb.ind_fcopyline.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void src_hdr::ind_fcopyline_Remove(src_hdr::FCopyline& row) {
    if (LIKELY(row.ind_fcopyline_next != (src_hdr::FCopyline*)-1)) {// check if in hash already
        u32 index = algo::cstring_Hash(0, row.fcopyline) & (_db.ind_fcopyline_buckets_n - 1);
        src_hdr::FCopyline* *prev = &_db.ind_fcopyline_buckets_elems[index]; // addr of pointer to current element
        while (src_hdr::FCopyline *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_fcopyline_next; // unlink (singly linked list)
                _db.ind_fcopyline_n--;
                row.ind_fcopyline_next = (src_hdr::FCopyline*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_fcopyline_next;
        }
    }
}

// --- src_hdr.FDb.ind_fcopyline.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void src_hdr::ind_fcopyline_Reserve(int n) {
    u32 old_nbuckets = _db.ind_fcopyline_buckets_n;
    u32 new_nelems   = _db.ind_fcopyline_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(src_hdr::FCopyline*);
        u32 new_size = new_nbuckets * sizeof(src_hdr::FCopyline*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        src_hdr::FCopyline* *new_buckets = (src_hdr::FCopyline**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("src_hdr.out_of_memory  field:src_hdr.FDb.ind_fcopyline");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_fcopyline_buckets_n; i++) {
            src_hdr::FCopyline* elem = _db.ind_fcopyline_buckets_elems[i];
            while (elem) {
                src_hdr::FCopyline &row        = *elem;
                src_hdr::FCopyline* next       = row.ind_fcopyline_next;
                u32 index          = algo::cstring_Hash(0, row.fcopyline) & (new_nbuckets-1);
                row.ind_fcopyline_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_fcopyline_buckets_elems, old_size);
        _db.ind_fcopyline_buckets_elems = new_buckets;
        _db.ind_fcopyline_buckets_n = new_nbuckets;
    }
}

// --- src_hdr.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr src_hdr::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- src_hdr.FDb.trace.N
// Function return 1
inline static i32 src_hdr::trace_N() {
    return 1;
}

// --- src_hdr.FDb..Init
// Set all fields to initial values.
void src_hdr::FDb_Init() {
    // initialize LAry targsrc (src_hdr.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    src_hdr::FTargsrc* targsrc_first = (src_hdr::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }
    // initialize LAry ns (src_hdr.FDb.ns)
    _db.ns_n = 0;
    memset(_db.ns_lary, 0, sizeof(_db.ns_lary)); // zero out all level pointers
    src_hdr::FNs* ns_first = (src_hdr::FNs*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FNs) * (u64(1)<<4));
    if (!ns_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ns_lary[i]  = ns_first;
        ns_first    += 1ULL<<i;
    }
    // initialize hash table for src_hdr::FNs;
    _db.ind_ns_n             	= 0; // (src_hdr.FDb.ind_ns)
    _db.ind_ns_buckets_n     	= 4; // (src_hdr.FDb.ind_ns)
    _db.ind_ns_buckets_elems 	= (src_hdr::FNs**)algo_lib::malloc_AllocMem(sizeof(src_hdr::FNs*)*_db.ind_ns_buckets_n); // initial buckets (src_hdr.FDb.ind_ns)
    if (!_db.ind_ns_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_hdr.FDb.ind_ns)
    }
    memset(_db.ind_ns_buckets_elems, 0, sizeof(src_hdr::FNs*)*_db.ind_ns_buckets_n); // (src_hdr.FDb.ind_ns)
    // initialize LAry nsx (src_hdr.FDb.nsx)
    _db.nsx_n = 0;
    memset(_db.nsx_lary, 0, sizeof(_db.nsx_lary)); // zero out all level pointers
    src_hdr::FNsx* nsx_first = (src_hdr::FNsx*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FNsx) * (u64(1)<<4));
    if (!nsx_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.nsx_lary[i]  = nsx_first;
        nsx_first    += 1ULL<<i;
    }
    // initialize LAry license (src_hdr.FDb.license)
    _db.license_n = 0;
    memset(_db.license_lary, 0, sizeof(_db.license_lary)); // zero out all level pointers
    src_hdr::FLicense* license_first = (src_hdr::FLicense*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FLicense) * (u64(1)<<4));
    if (!license_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.license_lary[i]  = license_first;
        license_first    += 1ULL<<i;
    }
    // initialize hash table for src_hdr::FLicense;
    _db.ind_license_n             	= 0; // (src_hdr.FDb.ind_license)
    _db.ind_license_buckets_n     	= 4; // (src_hdr.FDb.ind_license)
    _db.ind_license_buckets_elems 	= (src_hdr::FLicense**)algo_lib::malloc_AllocMem(sizeof(src_hdr::FLicense*)*_db.ind_license_buckets_n); // initial buckets (src_hdr.FDb.ind_license)
    if (!_db.ind_license_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_hdr.FDb.ind_license)
    }
    memset(_db.ind_license_buckets_elems, 0, sizeof(src_hdr::FLicense*)*_db.ind_license_buckets_n); // (src_hdr.FDb.ind_license)
    // initialize LAry target (src_hdr.FDb.target)
    _db.target_n = 0;
    memset(_db.target_lary, 0, sizeof(_db.target_lary)); // zero out all level pointers
    src_hdr::FTarget* target_first = (src_hdr::FTarget*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FTarget) * (u64(1)<<4));
    if (!target_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.target_lary[i]  = target_first;
        target_first    += 1ULL<<i;
    }
    // initialize hash table for src_hdr::FTarget;
    _db.ind_target_n             	= 0; // (src_hdr.FDb.ind_target)
    _db.ind_target_buckets_n     	= 4; // (src_hdr.FDb.ind_target)
    _db.ind_target_buckets_elems 	= (src_hdr::FTarget**)algo_lib::malloc_AllocMem(sizeof(src_hdr::FTarget*)*_db.ind_target_buckets_n); // initial buckets (src_hdr.FDb.ind_target)
    if (!_db.ind_target_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_hdr.FDb.ind_target)
    }
    memset(_db.ind_target_buckets_elems, 0, sizeof(src_hdr::FTarget*)*_db.ind_target_buckets_n); // (src_hdr.FDb.ind_target)
    // initialize LAry scriptfile (src_hdr.FDb.scriptfile)
    _db.scriptfile_n = 0;
    memset(_db.scriptfile_lary, 0, sizeof(_db.scriptfile_lary)); // zero out all level pointers
    src_hdr::FScriptfile* scriptfile_first = (src_hdr::FScriptfile*)algo_lib::malloc_AllocMem(sizeof(src_hdr::FScriptfile) * (u64(1)<<4));
    if (!scriptfile_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.scriptfile_lary[i]  = scriptfile_first;
        scriptfile_first    += 1ULL<<i;
    }
    // fcopyline: initialize Tpool
    _db.fcopyline_free      = NULL;
    _db.fcopyline_blocksize = algo::BumpToPow2(64 * sizeof(src_hdr::FCopyline)); // allocate 64-127 elements at a time
    // initialize hash table for src_hdr::FCopyline;
    _db.ind_fcopyline_n             	= 0; // (src_hdr.FDb.ind_fcopyline)
    _db.ind_fcopyline_buckets_n     	= 4; // (src_hdr.FDb.ind_fcopyline)
    _db.ind_fcopyline_buckets_elems 	= (src_hdr::FCopyline**)algo_lib::malloc_AllocMem(sizeof(src_hdr::FCopyline*)*_db.ind_fcopyline_buckets_n); // initial buckets (src_hdr.FDb.ind_fcopyline)
    if (!_db.ind_fcopyline_buckets_elems) {
        FatalErrorExit("out of memory"); // (src_hdr.FDb.ind_fcopyline)
    }
    memset(_db.ind_fcopyline_buckets_elems, 0, sizeof(src_hdr::FCopyline*)*_db.ind_fcopyline_buckets_n); // (src_hdr.FDb.ind_fcopyline)

    src_hdr::InitReflection();
}

// --- src_hdr.FDb..Uninit
void src_hdr::FDb_Uninit() {
    src_hdr::FDb &row = _db; (void)row;

    // src_hdr.FDb.ind_fcopyline.Uninit (Thash)  //
    // skip destruction of ind_fcopyline in global scope

    // src_hdr.FDb.scriptfile.Uninit (Lary)  //
    // skip destruction in global scope

    // src_hdr.FDb.ind_target.Uninit (Thash)  //
    // skip destruction of ind_target in global scope

    // src_hdr.FDb.target.Uninit (Lary)  //
    // skip destruction in global scope

    // src_hdr.FDb.ind_license.Uninit (Thash)  //
    // skip destruction of ind_license in global scope

    // src_hdr.FDb.license.Uninit (Lary)  //
    // skip destruction in global scope

    // src_hdr.FDb.nsx.Uninit (Lary)  //
    // skip destruction in global scope

    // src_hdr.FDb.ind_ns.Uninit (Thash)  //
    // skip destruction of ind_ns in global scope

    // src_hdr.FDb.ns.Uninit (Lary)  //
    // skip destruction in global scope

    // src_hdr.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- src_hdr.FLicense.base.CopyOut
// Copy fields out of row
void src_hdr::license_CopyOut(src_hdr::FLicense &row, dev::License &out) {
    out.license = row.license;
    out.comment = row.comment;
}

// --- src_hdr.FLicense.base.CopyIn
// Copy fields in to row
void src_hdr::license_CopyIn(src_hdr::FLicense &row, dev::License &in) {
    row.license = in.license;
    row.comment = in.comment;
}

// --- src_hdr.FLicense..Uninit
void src_hdr::FLicense_Uninit(src_hdr::FLicense& license) {
    src_hdr::FLicense &row = license; (void)row;
    ind_license_Remove(row); // remove license from index ind_license
}

// --- src_hdr.FNs.base.CopyOut
// Copy fields out of row
void src_hdr::ns_CopyOut(src_hdr::FNs &row, dmmeta::Ns &out) {
    out.ns = row.ns;
    out.nstype = row.nstype;
    out.license = row.license;
    out.comment = row.comment;
}

// --- src_hdr.FNs.base.CopyIn
// Copy fields in to row
void src_hdr::ns_CopyIn(src_hdr::FNs &row, dmmeta::Ns &in) {
    row.ns = in.ns;
    row.nstype = in.nstype;
    row.license = in.license;
    row.comment = in.comment;
}

// --- src_hdr.FNs..Uninit
void src_hdr::FNs_Uninit(src_hdr::FNs& ns) {
    src_hdr::FNs &row = ns; (void)row;
    ind_ns_Remove(row); // remove ns from index ind_ns
}

// --- src_hdr.FNsx.base.CopyOut
// Copy fields out of row
void src_hdr::nsx_CopyOut(src_hdr::FNsx &row, dmmeta::Nsx &out) {
    out.ns = row.ns;
    out.genthrow = row.genthrow;
    out.correct_getorcreate = row.correct_getorcreate;
    out.pool = row.pool;
    out.sortxref = row.sortxref;
    out.pack = row.pack;
    out.comment = row.comment;
}

// --- src_hdr.FNsx.base.CopyIn
// Copy fields in to row
void src_hdr::nsx_CopyIn(src_hdr::FNsx &row, dmmeta::Nsx &in) {
    row.ns = in.ns;
    row.genthrow = in.genthrow;
    row.correct_getorcreate = in.correct_getorcreate;
    row.pool = in.pool;
    row.sortxref = in.sortxref;
    row.pack = in.pack;
    row.comment = in.comment;
}

// --- src_hdr.FNsx..Uninit
void src_hdr::FNsx_Uninit(src_hdr::FNsx& nsx) {
    src_hdr::FNsx &row = nsx; (void)row;
    src_hdr::FNs* p_ns = src_hdr::ind_ns_Find(row.ns);
    if (p_ns)  {
        c_nsx_Remove(*p_ns, row);// remove nsx from index c_nsx
    }
}

// --- src_hdr.FScriptfile.base.CopyOut
// Copy fields out of row
void src_hdr::scriptfile_CopyOut(src_hdr::FScriptfile &row, dev::Scriptfile &out) {
    out.gitfile = row.gitfile;
    out.license = row.license;
    out.comment = row.comment;
}

// --- src_hdr.FScriptfile.base.CopyIn
// Copy fields in to row
void src_hdr::scriptfile_CopyIn(src_hdr::FScriptfile &row, dev::Scriptfile &in) {
    row.gitfile = in.gitfile;
    row.license = in.license;
    row.comment = in.comment;
}

// --- src_hdr.FSrc..Init
// Set all fields to initial values.
void src_hdr::FSrc_Init(src_hdr::FSrc& parent) {
    parent.p_license = NULL;
    parent.p_targsrc = NULL;
    parent.saw_target = bool(false);
}

// --- src_hdr.FTarget.base.CopyOut
// Copy fields out of row
void src_hdr::target_CopyOut(src_hdr::FTarget &row, dev::Target &out) {
    out.target = row.target;
    out.compat = row.compat;
}

// --- src_hdr.FTarget.base.CopyIn
// Copy fields in to row
void src_hdr::target_CopyIn(src_hdr::FTarget &row, dev::Target &in) {
    row.target = in.target;
    row.compat = in.compat;
}

// --- src_hdr.FTarget.c_targsrc.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void src_hdr::c_targsrc_Insert(src_hdr::FTarget& target, src_hdr::FTargsrc& row) {
    if (bool_Update(row.target_c_targsrc_in_ary,true)) {
        // reserve space
        c_targsrc_Reserve(target, 1);
        u32 n  = target.c_targsrc_n;
        u32 at = n;
        src_hdr::FTargsrc* *elems = target.c_targsrc_elems;
        elems[at] = &row;
        target.c_targsrc_n = n+1;

    }
}

// --- src_hdr.FTarget.c_targsrc.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool src_hdr::c_targsrc_InsertMaybe(src_hdr::FTarget& target, src_hdr::FTargsrc& row) {
    bool retval = !row.target_c_targsrc_in_ary;
    c_targsrc_Insert(target,row); // check is performed in _Insert again
    return retval;
}

// --- src_hdr.FTarget.c_targsrc.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void src_hdr::c_targsrc_Remove(src_hdr::FTarget& target, src_hdr::FTargsrc& row) {
    if (bool_Update(row.target_c_targsrc_in_ary,false)) {
        int lim = target.c_targsrc_n;
        src_hdr::FTargsrc* *elems = target.c_targsrc_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            src_hdr::FTargsrc* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(src_hdr::FTargsrc*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                target.c_targsrc_n = lim - 1;
                break;
            }
        }
    }
}

// --- src_hdr.FTarget.c_targsrc.Reserve
// Reserve space in index for N more elements;
void src_hdr::c_targsrc_Reserve(src_hdr::FTarget& target, u32 n) {
    u32 old_max = target.c_targsrc_max;
    if (UNLIKELY(target.c_targsrc_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(src_hdr::FTargsrc*);
        u32 new_size = new_max * sizeof(src_hdr::FTargsrc*);
        void *new_mem = algo_lib::malloc_ReallocMem(target.c_targsrc_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("src_hdr.out_of_memory  field:src_hdr.FTarget.c_targsrc");
        }
        target.c_targsrc_elems = (src_hdr::FTargsrc**)new_mem;
        target.c_targsrc_max = new_max;
    }
}

// --- src_hdr.FTarget..Uninit
void src_hdr::FTarget_Uninit(src_hdr::FTarget& target) {
    src_hdr::FTarget &row = target; (void)row;
    ind_target_Remove(row); // remove target from index ind_target

    // src_hdr.FTarget.c_targsrc.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(target.c_targsrc_elems, sizeof(src_hdr::FTargsrc*)*target.c_targsrc_max); // (src_hdr.FTarget.c_targsrc)
}

// --- src_hdr.FTargsrc.base.CopyOut
// Copy fields out of row
void src_hdr::targsrc_CopyOut(src_hdr::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- src_hdr.FTargsrc.base.CopyIn
// Copy fields in to row
void src_hdr::targsrc_CopyIn(src_hdr::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- src_hdr.FTargsrc.target.Get
algo::Smallstr16 src_hdr::target_Get(src_hdr::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- src_hdr.FTargsrc.src.Get
algo::Smallstr200 src_hdr::src_Get(src_hdr::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- src_hdr.FTargsrc.ext.Get
algo::Smallstr10 src_hdr::ext_Get(src_hdr::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- src_hdr.FTargsrc..Uninit
void src_hdr::FTargsrc_Uninit(src_hdr::FTargsrc& targsrc) {
    src_hdr::FTargsrc &row = targsrc; (void)row;
    src_hdr::FTarget* p_target = src_hdr::ind_target_Find(target_Get(row));
    if (p_target)  {
        c_targsrc_Remove(*p_target, row);// remove targsrc from index c_targsrc
    }
}

// --- src_hdr.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_hdr::value_ToCstr(const src_hdr::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_hdr_FieldId_value         : ret = "value";  break;
    }
    return ret;
}

// --- src_hdr.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_hdr::value_Print(const src_hdr::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_hdr.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_hdr::value_SetStrptrMaybe(src_hdr::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,src_hdr_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_hdr.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_hdr::value_SetStrptr(src_hdr::FieldId& parent, algo::strptr rhs, src_hdr_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_hdr.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_hdr::value_ReadStrptrMaybe(src_hdr::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_hdr.FieldId..ReadStrptrMaybe
// Read fields of src_hdr::FieldId from an ascii string.
// The format of the string is the format of the src_hdr::FieldId's only field
bool src_hdr::FieldId_ReadStrptrMaybe(src_hdr::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_hdr.FieldId..Print
// print string representation of src_hdr::FieldId to string LHS, no header -- cprint:src_hdr.FieldId.String
void src_hdr::FieldId_Print(src_hdr::FieldId & row, algo::cstring &str) {
    src_hdr::value_Print(row, str);
}

// --- src_hdr.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* src_hdr::value_ToCstr(const src_hdr::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case src_hdr_TableId_dev_License   : ret = "dev.License";  break;
        case src_hdr_TableId_dmmeta_Ns     : ret = "dmmeta.Ns";  break;
        case src_hdr_TableId_dmmeta_Nsx    : ret = "dmmeta.Nsx";  break;
        case src_hdr_TableId_dev_Scriptfile: ret = "dev.Scriptfile";  break;
        case src_hdr_TableId_dev_Target    : ret = "dev.Target";  break;
        case src_hdr_TableId_dev_Targsrc   : ret = "dev.Targsrc";  break;
    }
    return ret;
}

// --- src_hdr.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void src_hdr::value_Print(const src_hdr::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- src_hdr.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool src_hdr::value_SetStrptrMaybe(src_hdr::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,src_hdr_TableId_dmmeta_Ns); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,src_hdr_TableId_dmmeta_ns); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,src_hdr_TableId_dev_Target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,src_hdr_TableId_dev_target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"sx",2)==0) { value_SetEnum(parent,src_hdr_TableId_dmmeta_Nsx); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"sx",2)==0) { value_SetEnum(parent,src_hdr_TableId_dmmeta_nsx); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','L','i','c','e'): {
                    if (memcmp(rhs.elems+8,"nse",3)==0) { value_SetEnum(parent,src_hdr_TableId_dev_License); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_hdr_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','l','i','c','e'): {
                    if (memcmp(rhs.elems+8,"nse",3)==0) { value_SetEnum(parent,src_hdr_TableId_dev_license); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,src_hdr_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','S','c','r','i'): {
                    if (memcmp(rhs.elems+8,"ptfile",6)==0) { value_SetEnum(parent,src_hdr_TableId_dev_Scriptfile); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','s','c','r','i'): {
                    if (memcmp(rhs.elems+8,"ptfile",6)==0) { value_SetEnum(parent,src_hdr_TableId_dev_scriptfile); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- src_hdr.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void src_hdr::value_SetStrptr(src_hdr::TableId& parent, algo::strptr rhs, src_hdr_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- src_hdr.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool src_hdr::value_ReadStrptrMaybe(src_hdr::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- src_hdr.TableId..ReadStrptrMaybe
// Read fields of src_hdr::TableId from an ascii string.
// The format of the string is the format of the src_hdr::TableId's only field
bool src_hdr::TableId_ReadStrptrMaybe(src_hdr::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- src_hdr.TableId..Print
// print string representation of src_hdr::TableId to string LHS, no header -- cprint:src_hdr.TableId.String
void src_hdr::TableId_Print(src_hdr::TableId & row, algo::cstring &str) {
    src_hdr::value_Print(row, str);
}

// --- src_hdr...SizeCheck
inline static void src_hdr::SizeCheck() {
}

// --- src_hdr...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        lib_git::FDb_Init();
        src_hdr::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        src_hdr::ReadArgv(); // dmmeta.main:src_hdr
        src_hdr::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("src_hdr.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        src_hdr::FDb_Uninit();
        lib_git::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- src_hdr...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
