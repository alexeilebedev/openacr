//
// cpp/gen/samp_meng_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/samp_meng_gen.h"
#include "include/gen/samp_meng_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
algo_lib::FDb    algo_lib::_db;     // dependency found via dev.targdep
lib_json::FDb    lib_json::_db;     // dependency found via dev.targdep
samp_meng::FDb   samp_meng::_db;    // dependency found via dev.targdep

namespace samp_meng {
const char *samp_meng_help =
"Usage: samp_meng [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace samp_meng
samp_meng::ordq_bh_order_curs::~ordq_bh_order_curs() {
    algo_lib::malloc_FreeMem(temp_elems, sizeof(void*) * temp_max);

}

namespace samp_meng { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:samp_meng.FDb._db.InitReflection
    static void          InitReflection();
    // First element of index changed.
    // func:samp_meng.FDb.cd_fdin_eof.FirstChanged
    static void          cd_fdin_eof_FirstChanged() __attribute__((nothrow));
    // Update cycles count from previous clock capture
    // func:samp_meng.FDb.cd_fdin_eof.UpdateCycles
    inline static void   cd_fdin_eof_UpdateCycles() __attribute__((nothrow));
    // func:samp_meng.FDb.cd_fdin_eof.Call
    inline static void   cd_fdin_eof_Call() __attribute__((nothrow));
    // First element of index changed.
    // func:samp_meng.FDb.cd_fdin_read.FirstChanged
    static void          cd_fdin_read_FirstChanged() __attribute__((nothrow));
    // Update cycles count from previous clock capture
    // func:samp_meng.FDb.cd_fdin_read.UpdateCycles
    inline static void   cd_fdin_read_UpdateCycles() __attribute__((nothrow));
    // func:samp_meng.FDb.cd_fdin_read.Call
    inline static void   cd_fdin_read_Call() __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:samp_meng.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:samp_meng.FDb.trace.N
    inline static i32    trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // Internal function to scan for a message
    //
    // func:samp_meng.FFdin.in.ScanMsg
    static void          in_ScanMsg(samp_meng::FFdin& fdin) __attribute__((nothrow));
    // Internal function to shift data left
    // Shift existing bytes over to the beginning of the buffer
    // func:samp_meng.FFdin.in.Shift
    static void          in_Shift(samp_meng::FFdin& fdin) __attribute__((nothrow));
    // Find new location for ROW starting at IDX
    // NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
    // func:samp_meng.FOrdq.bh_order.Downheap
    static int           bh_order_Downheap(samp_meng::FOrdq& ordq, samp_meng::FOrder& row, int idx) __attribute__((nothrow));
    // Find and return index of new location for element ROW in the heap, starting at index IDX.
    // Move any elements along the way but do not modify ROW.
    // func:samp_meng.FOrdq.bh_order.Upheap
    static int           bh_order_Upheap(samp_meng::FOrdq& ordq, samp_meng::FOrder& row, int idx) __attribute__((nothrow));
    // func:samp_meng.FOrdq.bh_order.ElemLt
    inline static bool   bh_order_ElemLt(samp_meng::FOrdq& ordq, samp_meng::FOrder &a, samp_meng::FOrder &b) __attribute__((nothrow));
    // func:samp_meng.FOrdq.bh_order_curs.Add
    static void          ordq_bh_order_curs_Add(ordq_bh_order_curs &curs, samp_meng::FOrder& row);
    // func:samp_meng...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- samp_meng.CancelOrderMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::CancelOrderMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.CancelOrderMsg..ReadFieldMaybe
bool samp_meng::CancelOrderMsg_ReadFieldMaybe(samp_meng::CancelOrderMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_order: {
            retval = u64_ReadStrptrMaybe(parent.order, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.CancelOrderMsg..ReadStrptrMaybe
// Read fields of samp_meng::CancelOrderMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::CancelOrderMsg_ReadStrptrMaybe(samp_meng::CancelOrderMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.CancelOrderMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && CancelOrderMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.CancelOrderMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.CancelOrderMsg.String  printfmt:Tuple
void samp_meng::CancelOrderMsg_Print(samp_meng::CancelOrderMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.CancelOrderMsg";

    u64_Print(row.order, temp);
    PrintAttrSpaceReset(str,"order", temp);
}

// --- samp_meng.CancelReqMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::CancelReqMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.CancelReqMsg..ReadFieldMaybe
bool samp_meng::CancelReqMsg_ReadFieldMaybe(samp_meng::CancelReqMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_order: {
            retval = u64_ReadStrptrMaybe(parent.order, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.CancelReqMsg..ReadStrptrMaybe
// Read fields of samp_meng::CancelReqMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::CancelReqMsg_ReadStrptrMaybe(samp_meng::CancelReqMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.CancelReqMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && CancelReqMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.CancelReqMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.CancelReqMsg.String  printfmt:Tuple
void samp_meng::CancelReqMsg_Print(samp_meng::CancelReqMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.CancelReqMsg";

    u64_Print(row.order, temp);
    PrintAttrSpaceReset(str,"order", temp);
}

// --- samp_meng.trace..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.trace.String  printfmt:Tuple
void samp_meng::trace_Print(samp_meng::trace& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- samp_meng.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     samp_meng.FDb.cmdline
//     algo_lib.FDb.cmdline
void samp_meng::ReadArgv() throw() {
    command::samp_meng &cmd = samp_meng::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::samp_meng_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"samp_meng: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "samp_meng: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::samp_meng_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"samp_meng: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:samp_meng.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!samp_meng::LoadTuplesMaybe(cmd.in,true)) {
            err << "samp_meng.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(samp_meng_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- samp_meng.FDb._db.MainLoop
// Main loop.
void samp_meng::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        samp_meng::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- samp_meng.FDb._db.Step
// Main step
void samp_meng::Step() {
    cd_fdin_eof_Call();
    cd_fdin_read_Call();
}

// --- samp_meng.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void samp_meng::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("samp_meng", NULL, samp_meng::Step, samp_meng::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "samp_meng.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(samp_meng::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)samp_meng::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'samp_meng.In'  signature:'8ccb978398f8888f2ca1f6a371e62ad802b54032'");
}

// --- samp_meng.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool samp_meng::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    (void)str;//only to avoid -Wunused-parameter
    return retval;
}

// --- samp_meng.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool samp_meng::LoadTuplesMaybe(algo::strptr root, bool recursive) throw() {
    bool retval = true;
    if (FileQ(root)) {
        retval = samp_meng::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = samp_meng::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && samp_meng::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- samp_meng.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool samp_meng::LoadTuplesFile(algo::strptr fname, bool recursive) throw() {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- samp_meng.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool samp_meng::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) throw() {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- samp_meng.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool samp_meng::LoadSsimfileMaybe(algo::strptr fname, bool recursive) throw() {
    bool retval = true;
    if (FileQ(fname)) {
        retval = samp_meng::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- samp_meng.FDb._db.Steps
// Calls Step function of dependencies
void samp_meng::Steps() {
    samp_meng::Step(); // dependent namespace specified via (dev.targdep)
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- samp_meng.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- samp_meng.FDb.fdin.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_meng::FFdin& samp_meng::fdin_Alloc() throw() {
    samp_meng::FFdin* row = fdin_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_meng.out_of_mem  field:samp_meng.FDb.fdin  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_meng.FDb.fdin.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_meng::FFdin* samp_meng::fdin_AllocMaybe() throw() {
    samp_meng::FFdin *row = (samp_meng::FFdin*)fdin_AllocMem();
    if (row) {
        new (row) samp_meng::FFdin; // call constructor
    }
    return row;
}

// --- samp_meng.FDb.fdin.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* samp_meng::fdin_AllocMem() throw() {
    u64 new_nelems     = _db.fdin_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    samp_meng::FFdin*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fdin_lary[bsr];
        if (!lev) {
            lev=(samp_meng::FFdin*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FFdin) * (u64(1)<<bsr));
            _db.fdin_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fdin_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- samp_meng.FDb.fdin.RemoveAll
// Remove all elements from Lary
void samp_meng::fdin_RemoveAll() throw() {
    for (u64 n = _db.fdin_n; n>0; ) {
        n--;
        fdin_qFind(u64(n)).~FFdin(); // destroy last element
        _db.fdin_n = i32(n);
    }
}

// --- samp_meng.FDb.fdin.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void samp_meng::fdin_RemoveLast() throw() {
    u64 n = _db.fdin_n;
    if (n > 0) {
        n -= 1;
        fdin_qFind(u64(n)).~FFdin();
        _db.fdin_n = i32(n);
    }
}

// --- samp_meng.FDb.fdin.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::fdin_XrefMaybe(samp_meng::FFdin &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- samp_meng.FDb.cd_fdin_eof.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void samp_meng::cd_fdin_eof_Insert(samp_meng::FFdin& row) throw() {
    if (!cd_fdin_eof_InLlistQ(row)) {
        if (_db.cd_fdin_eof_head) {
            row.cd_fdin_eof_next = _db.cd_fdin_eof_head;
            row.cd_fdin_eof_prev = _db.cd_fdin_eof_head->cd_fdin_eof_prev;
            row.cd_fdin_eof_prev->cd_fdin_eof_next = &row;
            row.cd_fdin_eof_next->cd_fdin_eof_prev = &row;
        } else {
            row.cd_fdin_eof_next = &row;
            row.cd_fdin_eof_prev = &row;
            _db.cd_fdin_eof_head = &row;
        }
        _db.cd_fdin_eof_n++;
        if (_db.cd_fdin_eof_head == &row) {
            cd_fdin_eof_FirstChanged();
        }
    }
}

// --- samp_meng.FDb.cd_fdin_eof.Remove
// Remove element from index. If element is not in index, do nothing.
void samp_meng::cd_fdin_eof_Remove(samp_meng::FFdin& row) throw() {
    if (cd_fdin_eof_InLlistQ(row)) {
        samp_meng::FFdin* old_head       = _db.cd_fdin_eof_head;
        (void)old_head; // in case it's not used
        samp_meng::FFdin *oldnext = row.cd_fdin_eof_next;
        samp_meng::FFdin *oldprev = row.cd_fdin_eof_prev;
        oldnext->cd_fdin_eof_prev = oldprev; // remove element from list
        oldprev->cd_fdin_eof_next = oldnext;
        _db.cd_fdin_eof_n--;  // adjust count
        if (&row == _db.cd_fdin_eof_head) {
            _db.cd_fdin_eof_head = oldnext==&row ? NULL : oldnext; // adjust list head
        }
        row.cd_fdin_eof_next = (samp_meng::FFdin*)-1; // mark element as not-in-list);
        row.cd_fdin_eof_prev = NULL; // clear back-pointer
        if (old_head != _db.cd_fdin_eof_head) {
            cd_fdin_eof_FirstChanged();
        }
    }
}

// --- samp_meng.FDb.cd_fdin_eof.RemoveAll
// Empty the index. (The rows are not deleted)
void samp_meng::cd_fdin_eof_RemoveAll() throw() {
    samp_meng::FFdin* row = _db.cd_fdin_eof_head;
    samp_meng::FFdin* head = _db.cd_fdin_eof_head;
    _db.cd_fdin_eof_head = NULL;
    _db.cd_fdin_eof_n = 0;
    bool do_fire = (NULL != row);
    while (row) {
        samp_meng::FFdin* row_next = row->cd_fdin_eof_next;
        row->cd_fdin_eof_next  = (samp_meng::FFdin*)-1;
        row->cd_fdin_eof_prev  = NULL;
        row = row_next != head  ? row_next : NULL;
    }
    if (do_fire) {
        cd_fdin_eof_FirstChanged();
    }
}

// --- samp_meng.FDb.cd_fdin_eof.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
samp_meng::FFdin* samp_meng::cd_fdin_eof_RemoveFirst() throw() {
    samp_meng::FFdin *row = NULL;
    row = _db.cd_fdin_eof_head;
    if (row) {
        bool hasmore = row!=row->cd_fdin_eof_next;
        _db.cd_fdin_eof_head = hasmore ? row->cd_fdin_eof_next : NULL;
        row->cd_fdin_eof_next->cd_fdin_eof_prev = row->cd_fdin_eof_prev;
        row->cd_fdin_eof_prev->cd_fdin_eof_next = row->cd_fdin_eof_next;
        row->cd_fdin_eof_prev = NULL;
        _db.cd_fdin_eof_n--;
        row->cd_fdin_eof_next = (samp_meng::FFdin*)-1; // mark as not-in-list
        cd_fdin_eof_FirstChanged();
    }
    return row;
}

// --- samp_meng.FDb.cd_fdin_eof.RotateFirst
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
samp_meng::FFdin* samp_meng::cd_fdin_eof_RotateFirst() throw() {
    samp_meng::FFdin *row = NULL;
    row = _db.cd_fdin_eof_head;
    if (row) {
        _db.cd_fdin_eof_head = row->cd_fdin_eof_next;
    }
    return row;
}

// --- samp_meng.FDb.cd_fdin_eof.FirstChanged
// First element of index changed.
static void samp_meng::cd_fdin_eof_FirstChanged() throw() {
}

// --- samp_meng.FDb.cd_fdin_eof.UpdateCycles
// Update cycles count from previous clock capture
inline static void samp_meng::cd_fdin_eof_UpdateCycles() throw() {
    u64 cur_cycles                      = algo::get_cycles();
    algo_lib::_db.clock                 = algo::SchedTime(cur_cycles);
}

// --- samp_meng.FDb.cd_fdin_eof.Call
inline static void samp_meng::cd_fdin_eof_Call() throw() {
    if (!samp_meng::cd_fdin_eof_EmptyQ()) { // fstep:samp_meng.FDb.cd_fdin_eof
        samp_meng::cd_fdin_eof_Step(); // steptype:Inline: call function on every step
        cd_fdin_eof_UpdateCycles();
        algo_lib::_db.next_loop = algo_lib::_db.clock;
    }
}

// --- samp_meng.FDb.symbol.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_meng::FSymbol& samp_meng::symbol_Alloc() throw() {
    samp_meng::FSymbol* row = symbol_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_meng.out_of_mem  field:samp_meng.FDb.symbol  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_meng.FDb.symbol.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_meng::FSymbol* samp_meng::symbol_AllocMaybe() throw() {
    samp_meng::FSymbol *row = (samp_meng::FSymbol*)symbol_AllocMem();
    if (row) {
        new (row) samp_meng::FSymbol; // call constructor
    }
    return row;
}

// --- samp_meng.FDb.symbol.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* samp_meng::symbol_AllocMem() throw() {
    u64 new_nelems     = _db.symbol_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    samp_meng::FSymbol*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.symbol_lary[bsr];
        if (!lev) {
            lev=(samp_meng::FSymbol*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FSymbol) * (u64(1)<<bsr));
            _db.symbol_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.symbol_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- samp_meng.FDb.symbol.RemoveAll
// Remove all elements from Lary
void samp_meng::symbol_RemoveAll() throw() {
    for (u64 n = _db.symbol_n; n>0; ) {
        n--;
        symbol_qFind(u64(n)).~FSymbol(); // destroy last element
        _db.symbol_n = i32(n);
    }
}

// --- samp_meng.FDb.symbol.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void samp_meng::symbol_RemoveLast() throw() {
    u64 n = _db.symbol_n;
    if (n > 0) {
        n -= 1;
        symbol_qFind(u64(n)).~FSymbol();
        _db.symbol_n = i32(n);
    }
}

// --- samp_meng.FDb.symbol.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::symbol_XrefMaybe(samp_meng::FSymbol &row) {
    bool retval = true;
    (void)row;
    // insert symbol into index ind_symbol
    if (true) { // user-defined insert condition
        bool success = ind_symbol_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "samp_meng.duplicate_key  xref:samp_meng.FDb.ind_symbol"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- samp_meng.FDb.cd_fdin_read.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void samp_meng::cd_fdin_read_Insert(samp_meng::FFdin& row) throw() {
    if (!cd_fdin_read_InLlistQ(row)) {
        if (_db.cd_fdin_read_head) {
            row.cd_fdin_read_next = _db.cd_fdin_read_head;
            row.cd_fdin_read_prev = _db.cd_fdin_read_head->cd_fdin_read_prev;
            row.cd_fdin_read_prev->cd_fdin_read_next = &row;
            row.cd_fdin_read_next->cd_fdin_read_prev = &row;
        } else {
            row.cd_fdin_read_next = &row;
            row.cd_fdin_read_prev = &row;
            _db.cd_fdin_read_head = &row;
        }
        _db.cd_fdin_read_n++;
        if (_db.cd_fdin_read_head == &row) {
            cd_fdin_read_FirstChanged();
        }
    }
}

// --- samp_meng.FDb.cd_fdin_read.Remove
// Remove element from index. If element is not in index, do nothing.
void samp_meng::cd_fdin_read_Remove(samp_meng::FFdin& row) throw() {
    if (cd_fdin_read_InLlistQ(row)) {
        samp_meng::FFdin* old_head       = _db.cd_fdin_read_head;
        (void)old_head; // in case it's not used
        samp_meng::FFdin *oldnext = row.cd_fdin_read_next;
        samp_meng::FFdin *oldprev = row.cd_fdin_read_prev;
        oldnext->cd_fdin_read_prev = oldprev; // remove element from list
        oldprev->cd_fdin_read_next = oldnext;
        _db.cd_fdin_read_n--;  // adjust count
        if (&row == _db.cd_fdin_read_head) {
            _db.cd_fdin_read_head = oldnext==&row ? NULL : oldnext; // adjust list head
        }
        row.cd_fdin_read_next = (samp_meng::FFdin*)-1; // mark element as not-in-list);
        row.cd_fdin_read_prev = NULL; // clear back-pointer
        if (old_head != _db.cd_fdin_read_head) {
            cd_fdin_read_FirstChanged();
        }
    }
}

// --- samp_meng.FDb.cd_fdin_read.RemoveAll
// Empty the index. (The rows are not deleted)
void samp_meng::cd_fdin_read_RemoveAll() throw() {
    samp_meng::FFdin* row = _db.cd_fdin_read_head;
    samp_meng::FFdin* head = _db.cd_fdin_read_head;
    _db.cd_fdin_read_head = NULL;
    _db.cd_fdin_read_n = 0;
    bool do_fire = (NULL != row);
    while (row) {
        samp_meng::FFdin* row_next = row->cd_fdin_read_next;
        row->cd_fdin_read_next  = (samp_meng::FFdin*)-1;
        row->cd_fdin_read_prev  = NULL;
        row = row_next != head  ? row_next : NULL;
    }
    if (do_fire) {
        cd_fdin_read_FirstChanged();
    }
}

// --- samp_meng.FDb.cd_fdin_read.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// Call FirstChanged trigger.
samp_meng::FFdin* samp_meng::cd_fdin_read_RemoveFirst() throw() {
    samp_meng::FFdin *row = NULL;
    row = _db.cd_fdin_read_head;
    if (row) {
        bool hasmore = row!=row->cd_fdin_read_next;
        _db.cd_fdin_read_head = hasmore ? row->cd_fdin_read_next : NULL;
        row->cd_fdin_read_next->cd_fdin_read_prev = row->cd_fdin_read_prev;
        row->cd_fdin_read_prev->cd_fdin_read_next = row->cd_fdin_read_next;
        row->cd_fdin_read_prev = NULL;
        _db.cd_fdin_read_n--;
        row->cd_fdin_read_next = (samp_meng::FFdin*)-1; // mark as not-in-list
        cd_fdin_read_FirstChanged();
    }
    return row;
}

// --- samp_meng.FDb.cd_fdin_read.RotateFirst
// If linked list is empty, return NULL.
// Otherwise return head item and advance head to the next item.
samp_meng::FFdin* samp_meng::cd_fdin_read_RotateFirst() throw() {
    samp_meng::FFdin *row = NULL;
    row = _db.cd_fdin_read_head;
    if (row) {
        _db.cd_fdin_read_head = row->cd_fdin_read_next;
    }
    return row;
}

// --- samp_meng.FDb.cd_fdin_read.FirstChanged
// First element of index changed.
static void samp_meng::cd_fdin_read_FirstChanged() throw() {
}

// --- samp_meng.FDb.cd_fdin_read.UpdateCycles
// Update cycles count from previous clock capture
inline static void samp_meng::cd_fdin_read_UpdateCycles() throw() {
    u64 cur_cycles                      = algo::get_cycles();
    algo_lib::_db.clock                 = algo::SchedTime(cur_cycles);
}

// --- samp_meng.FDb.cd_fdin_read.Call
inline static void samp_meng::cd_fdin_read_Call() throw() {
    if (!samp_meng::cd_fdin_read_EmptyQ()) { // fstep:samp_meng.FDb.cd_fdin_read
        samp_meng::cd_fdin_read_Step(); // steptype:Inline: call function on every step
        cd_fdin_read_UpdateCycles();
        algo_lib::_db.next_loop = algo_lib::_db.clock;
    }
}

// --- samp_meng.FDb.ind_symbol.Find
// Find row by key. Return NULL if not found.
samp_meng::FSymbol* samp_meng::ind_symbol_Find(const samp_meng::Symbol& key) throw() {
    u32 index = samp_meng::Symbol_Hash(0, key) & (_db.ind_symbol_buckets_n - 1);
    samp_meng::FSymbol* *e = &_db.ind_symbol_buckets_elems[index];
    samp_meng::FSymbol* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).symbol == key;
        if (done) break;
        e         = &ret->ind_symbol_next;
    } while (true);
    return ret;
}

// --- samp_meng.FDb.ind_symbol.FindX
// Look up row by key and return reference. Throw exception if not found
samp_meng::FSymbol& samp_meng::ind_symbol_FindX(const samp_meng::Symbol& key) {
    samp_meng::FSymbol* ret = ind_symbol_Find(key);
    vrfy(ret, tempstr() << "samp_meng.key_error  table:ind_symbol  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- samp_meng.FDb.ind_symbol.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
samp_meng::FSymbol& samp_meng::ind_symbol_GetOrCreate(const samp_meng::Symbol& key) throw() {
    samp_meng::FSymbol* ret = ind_symbol_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &symbol_Alloc();
        (*ret).symbol = key;
        bool good = symbol_XrefMaybe(*ret);
        if (!good) {
            symbol_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "samp_meng.create_error  table:ind_symbol  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- samp_meng.FDb.ind_symbol.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool samp_meng::ind_symbol_InsertMaybe(samp_meng::FSymbol& row) throw() {
    ind_symbol_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_symbol_next == (samp_meng::FSymbol*)-1)) {// check if in hash already
        u32 index = samp_meng::Symbol_Hash(0, row.symbol) & (_db.ind_symbol_buckets_n - 1);
        samp_meng::FSymbol* *prev = &_db.ind_symbol_buckets_elems[index];
        do {
            samp_meng::FSymbol* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).symbol == row.symbol) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_symbol_next;
        } while (true);
        if (retval) {
            row.ind_symbol_next = *prev;
            _db.ind_symbol_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- samp_meng.FDb.ind_symbol.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void samp_meng::ind_symbol_Remove(samp_meng::FSymbol& row) throw() {
    if (LIKELY(row.ind_symbol_next != (samp_meng::FSymbol*)-1)) {// check if in hash already
        u32 index = samp_meng::Symbol_Hash(0, row.symbol) & (_db.ind_symbol_buckets_n - 1);
        samp_meng::FSymbol* *prev = &_db.ind_symbol_buckets_elems[index]; // addr of pointer to current element
        while (samp_meng::FSymbol *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_symbol_next; // unlink (singly linked list)
                _db.ind_symbol_n--;
                row.ind_symbol_next = (samp_meng::FSymbol*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_symbol_next;
        }
    }
}

// --- samp_meng.FDb.ind_symbol.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void samp_meng::ind_symbol_Reserve(int n) throw() {
    u32 old_nbuckets = _db.ind_symbol_buckets_n;
    u32 new_nelems   = _db.ind_symbol_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(samp_meng::FSymbol*);
        u32 new_size = new_nbuckets * sizeof(samp_meng::FSymbol*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        samp_meng::FSymbol* *new_buckets = (samp_meng::FSymbol**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("samp_meng.out_of_memory  field:samp_meng.FDb.ind_symbol");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_symbol_buckets_n; i++) {
            samp_meng::FSymbol* elem = _db.ind_symbol_buckets_elems[i];
            while (elem) {
                samp_meng::FSymbol &row        = *elem;
                samp_meng::FSymbol* next       = row.ind_symbol_next;
                u32 index          = samp_meng::Symbol_Hash(0, row.symbol) & (new_nbuckets-1);
                row.ind_symbol_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_symbol_buckets_elems, old_size);
        _db.ind_symbol_buckets_elems = new_buckets;
        _db.ind_symbol_buckets_n = new_nbuckets;
    }
}

// --- samp_meng.FDb.order.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_meng::FOrder& samp_meng::order_Alloc() throw() {
    samp_meng::FOrder* row = order_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_meng.out_of_mem  field:samp_meng.FDb.order  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_meng.FDb.order.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_meng::FOrder* samp_meng::order_AllocMaybe() throw() {
    samp_meng::FOrder *row = (samp_meng::FOrder*)order_AllocMem();
    if (row) {
        new (row) samp_meng::FOrder; // call constructor
    }
    return row;
}

// --- samp_meng.FDb.order.Delete
// Remove row from all global and cross indices, then deallocate row
void samp_meng::order_Delete(samp_meng::FOrder &row) throw() {
    row.~FOrder();
    order_FreeMem(row);
}

// --- samp_meng.FDb.order.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* samp_meng::order_AllocMem() throw() {
    samp_meng::FOrder *row = _db.order_free;
    if (UNLIKELY(!row)) {
        order_Reserve(1);
        row = _db.order_free;
    }
    if (row) {
        _db.order_free = row->order_next;
    }
    return row;
}

// --- samp_meng.FDb.order.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void samp_meng::order_FreeMem(samp_meng::FOrder &row) throw() {
    if (UNLIKELY(row.order_next != (samp_meng::FOrder*)-1)) {
        FatalErrorExit("samp_meng.tpool_double_delete  pool:samp_meng.FDb.order  comment:'double deletion caught'");
    }
    row.order_next = _db.order_free; // insert into free list
    _db.order_free  = &row;
}

// --- samp_meng.FDb.order.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 samp_meng::order_Reserve(u64 n_elems) throw() {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.order_blocksize; // underlying allocator is probably Lpool
        u64 reserved = order_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- samp_meng.FDb.order.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 samp_meng::order_ReserveMem(u64 size) throw() {
    u64 ret = 0;
    if (size >= sizeof(samp_meng::FOrder)) {
        samp_meng::FOrder *mem = (samp_meng::FOrder*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(samp_meng::FOrder) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].order_next = _db.order_free;
            _db.order_free = mem+i;
        }
    }
    return ret;
}

// --- samp_meng.FDb.order.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::order_XrefMaybe(samp_meng::FOrder &row) {
    bool retval = true;
    (void)row;
    // insert order into index ind_order
    if (true) { // user-defined insert condition
        bool success = ind_order_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "samp_meng.duplicate_key  xref:samp_meng.FDb.ind_order"; // check for duplicate key
            return false;
        }
    }
    samp_meng::FOrdq* p_p_ordq = row.p_ordq;
    if (UNLIKELY(!p_p_ordq)) {
        algo_lib::ResetErrtext() << "samp_meng.null_ref  xref:samp_meng.FOrdq.bh_order";
        return false;
    }
    // insert order into index bh_order
    if (true) { // user-defined insert condition
        bh_order_Insert(*p_p_ordq, row);
    }
    samp_meng::FUser* p_p_user = row.p_user;
    if (UNLIKELY(!p_p_user)) {
        algo_lib::ResetErrtext() << "samp_meng.null_ref  xref:samp_meng.FUser.zd_order";
        return false;
    }
    // insert order into index zd_order
    if (true) { // user-defined insert condition
        zd_order_Insert(*p_p_user, row);
    }
    return retval;
}

// --- samp_meng.FDb.ind_order.Find
// Find row by key. Return NULL if not found.
samp_meng::FOrder* samp_meng::ind_order_Find(i64 key) throw() {
    u32 index = ::i64_Hash(0, key) & (_db.ind_order_buckets_n - 1);
    samp_meng::FOrder* *e = &_db.ind_order_buckets_elems[index];
    samp_meng::FOrder* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).order == key;
        if (done) break;
        e         = &ret->ind_order_next;
    } while (true);
    return ret;
}

// --- samp_meng.FDb.ind_order.FindX
// Look up row by key and return reference. Throw exception if not found
samp_meng::FOrder& samp_meng::ind_order_FindX(i64 key) {
    samp_meng::FOrder* ret = ind_order_Find(key);
    vrfy(ret, tempstr() << "samp_meng.key_error  table:ind_order  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- samp_meng.FDb.ind_order.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool samp_meng::ind_order_InsertMaybe(samp_meng::FOrder& row) throw() {
    ind_order_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_order_next == (samp_meng::FOrder*)-1)) {// check if in hash already
        u32 index = ::i64_Hash(0, row.order) & (_db.ind_order_buckets_n - 1);
        samp_meng::FOrder* *prev = &_db.ind_order_buckets_elems[index];
        do {
            samp_meng::FOrder* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).order == row.order) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_order_next;
        } while (true);
        if (retval) {
            row.ind_order_next = *prev;
            _db.ind_order_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- samp_meng.FDb.ind_order.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void samp_meng::ind_order_Remove(samp_meng::FOrder& row) throw() {
    if (LIKELY(row.ind_order_next != (samp_meng::FOrder*)-1)) {// check if in hash already
        u32 index = ::i64_Hash(0, row.order) & (_db.ind_order_buckets_n - 1);
        samp_meng::FOrder* *prev = &_db.ind_order_buckets_elems[index]; // addr of pointer to current element
        while (samp_meng::FOrder *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_order_next; // unlink (singly linked list)
                _db.ind_order_n--;
                row.ind_order_next = (samp_meng::FOrder*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_order_next;
        }
    }
}

// --- samp_meng.FDb.ind_order.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void samp_meng::ind_order_Reserve(int n) throw() {
    u32 old_nbuckets = _db.ind_order_buckets_n;
    u32 new_nelems   = _db.ind_order_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(samp_meng::FOrder*);
        u32 new_size = new_nbuckets * sizeof(samp_meng::FOrder*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        samp_meng::FOrder* *new_buckets = (samp_meng::FOrder**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("samp_meng.out_of_memory  field:samp_meng.FDb.ind_order");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_order_buckets_n; i++) {
            samp_meng::FOrder* elem = _db.ind_order_buckets_elems[i];
            while (elem) {
                samp_meng::FOrder &row        = *elem;
                samp_meng::FOrder* next       = row.ind_order_next;
                u32 index          = ::i64_Hash(0, row.order) & (new_nbuckets-1);
                row.ind_order_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_order_buckets_elems, old_size);
        _db.ind_order_buckets_elems = new_buckets;
        _db.ind_order_buckets_n = new_nbuckets;
    }
}

// --- samp_meng.FDb.ordq.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_meng::FOrdq& samp_meng::ordq_Alloc() throw() {
    samp_meng::FOrdq* row = ordq_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_meng.out_of_mem  field:samp_meng.FDb.ordq  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_meng.FDb.ordq.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_meng::FOrdq* samp_meng::ordq_AllocMaybe() throw() {
    samp_meng::FOrdq *row = (samp_meng::FOrdq*)ordq_AllocMem();
    if (row) {
        new (row) samp_meng::FOrdq; // call constructor
    }
    return row;
}

// --- samp_meng.FDb.ordq.Delete
// Remove row from all global and cross indices, then deallocate row
void samp_meng::ordq_Delete(samp_meng::FOrdq &row) throw() {
    row.~FOrdq();
    ordq_FreeMem(row);
}

// --- samp_meng.FDb.ordq.AllocMem
// Allocate space for one element
// If no memory available, return NULL.
void* samp_meng::ordq_AllocMem() throw() {
    samp_meng::FOrdq *row = _db.ordq_free;
    if (UNLIKELY(!row)) {
        ordq_Reserve(1);
        row = _db.ordq_free;
    }
    if (row) {
        _db.ordq_free = row->ordq_next;
    }
    return row;
}

// --- samp_meng.FDb.ordq.FreeMem
// Remove mem from all global and cross indices, then deallocate mem
void samp_meng::ordq_FreeMem(samp_meng::FOrdq &row) throw() {
    if (UNLIKELY(row.ordq_next != (samp_meng::FOrdq*)-1)) {
        FatalErrorExit("samp_meng.tpool_double_delete  pool:samp_meng.FDb.ordq  comment:'double deletion caught'");
    }
    row.ordq_next = _db.ordq_free; // insert into free list
    _db.ordq_free  = &row;
}

// --- samp_meng.FDb.ordq.Reserve
// Preallocate memory for N more elements
// Return number of elements actually reserved.
u64 samp_meng::ordq_Reserve(u64 n_elems) throw() {
    u64 ret = 0;
    while (ret < n_elems) {
        u64 size = _db.ordq_blocksize; // underlying allocator is probably Lpool
        u64 reserved = ordq_ReserveMem(size);
        ret += reserved;
        if (reserved == 0) {
            break;
        }
    }
    return ret;
}

// --- samp_meng.FDb.ordq.ReserveMem
// Allocate block of given size, break up into small elements and append to free list.
// Return number of elements reserved.
u64 samp_meng::ordq_ReserveMem(u64 size) throw() {
    u64 ret = 0;
    if (size >= sizeof(samp_meng::FOrdq)) {
        samp_meng::FOrdq *mem = (samp_meng::FOrdq*)algo_lib::malloc_AllocMem(size);
        ret = mem ? size / sizeof(samp_meng::FOrdq) : 0;
        // add newly allocated elements to the free list;
        for (u64 i=0; i < ret; i++) {
            mem[i].ordq_next = _db.ordq_free;
            _db.ordq_free = mem+i;
        }
    }
    return ret;
}

// --- samp_meng.FDb.ordq.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::ordq_XrefMaybe(samp_meng::FOrdq &row) {
    bool retval = true;
    (void)row;
    samp_meng::FSymbol* p_p_symbol = row.p_symbol;
    if (UNLIKELY(!p_p_symbol)) {
        algo_lib::ResetErrtext() << "samp_meng.null_ref  xref:samp_meng.FSymbol.c_ordq";
        return false;
    }
    // insert ordq into index c_ordq
    if (true) { // user-defined insert condition
        c_ordq_Insert(*p_p_symbol, row);
    }
    return retval;
}

// --- samp_meng.FDb.user.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
samp_meng::FUser& samp_meng::user_Alloc() throw() {
    samp_meng::FUser* row = user_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("samp_meng.out_of_mem  field:samp_meng.FDb.user  comment:'Alloc failed'");
    }
    return *row;
}

// --- samp_meng.FDb.user.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
samp_meng::FUser* samp_meng::user_AllocMaybe() throw() {
    samp_meng::FUser *row = (samp_meng::FUser*)user_AllocMem();
    if (row) {
        new (row) samp_meng::FUser; // call constructor
    }
    return row;
}

// --- samp_meng.FDb.user.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* samp_meng::user_AllocMem() throw() {
    u64 new_nelems     = _db.user_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    samp_meng::FUser*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.user_lary[bsr];
        if (!lev) {
            lev=(samp_meng::FUser*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FUser) * (u64(1)<<bsr));
            _db.user_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.user_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- samp_meng.FDb.user.RemoveAll
// Remove all elements from Lary
void samp_meng::user_RemoveAll() throw() {
    for (u64 n = _db.user_n; n>0; ) {
        n--;
        user_qFind(u64(n)).~FUser(); // destroy last element
        _db.user_n = i32(n);
    }
}

// --- samp_meng.FDb.user.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void samp_meng::user_RemoveLast() throw() {
    u64 n = _db.user_n;
    if (n > 0) {
        n -= 1;
        user_qFind(u64(n)).~FUser();
        _db.user_n = i32(n);
    }
}

// --- samp_meng.FDb.user.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool samp_meng::user_XrefMaybe(samp_meng::FUser &row) {
    bool retval = true;
    (void)row;
    // insert user into index ind_user
    if (true) { // user-defined insert condition
        bool success = ind_user_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "samp_meng.duplicate_key  xref:samp_meng.FDb.ind_user"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- samp_meng.FDb.ind_user.Find
// Find row by key. Return NULL if not found.
samp_meng::FUser* samp_meng::ind_user_Find(i32 key) throw() {
    u32 index = ::i32_Hash(0, key) & (_db.ind_user_buckets_n - 1);
    samp_meng::FUser* *e = &_db.ind_user_buckets_elems[index];
    samp_meng::FUser* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).user == key;
        if (done) break;
        e         = &ret->ind_user_next;
    } while (true);
    return ret;
}

// --- samp_meng.FDb.ind_user.FindX
// Look up row by key and return reference. Throw exception if not found
samp_meng::FUser& samp_meng::ind_user_FindX(i32 key) {
    samp_meng::FUser* ret = ind_user_Find(key);
    vrfy(ret, tempstr() << "samp_meng.key_error  table:ind_user  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- samp_meng.FDb.ind_user.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
samp_meng::FUser& samp_meng::ind_user_GetOrCreate(i32 key) throw() {
    samp_meng::FUser* ret = ind_user_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &user_Alloc();
        (*ret).user = key;
        bool good = user_XrefMaybe(*ret);
        if (!good) {
            user_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "samp_meng.create_error  table:ind_user  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- samp_meng.FDb.ind_user.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool samp_meng::ind_user_InsertMaybe(samp_meng::FUser& row) throw() {
    ind_user_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_user_next == (samp_meng::FUser*)-1)) {// check if in hash already
        u32 index = ::i32_Hash(0, row.user) & (_db.ind_user_buckets_n - 1);
        samp_meng::FUser* *prev = &_db.ind_user_buckets_elems[index];
        do {
            samp_meng::FUser* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).user == row.user) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_user_next;
        } while (true);
        if (retval) {
            row.ind_user_next = *prev;
            _db.ind_user_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- samp_meng.FDb.ind_user.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void samp_meng::ind_user_Remove(samp_meng::FUser& row) throw() {
    if (LIKELY(row.ind_user_next != (samp_meng::FUser*)-1)) {// check if in hash already
        u32 index = ::i32_Hash(0, row.user) & (_db.ind_user_buckets_n - 1);
        samp_meng::FUser* *prev = &_db.ind_user_buckets_elems[index]; // addr of pointer to current element
        while (samp_meng::FUser *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_user_next; // unlink (singly linked list)
                _db.ind_user_n--;
                row.ind_user_next = (samp_meng::FUser*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_user_next;
        }
    }
}

// --- samp_meng.FDb.ind_user.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void samp_meng::ind_user_Reserve(int n) throw() {
    u32 old_nbuckets = _db.ind_user_buckets_n;
    u32 new_nelems   = _db.ind_user_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(samp_meng::FUser*);
        u32 new_size = new_nbuckets * sizeof(samp_meng::FUser*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        samp_meng::FUser* *new_buckets = (samp_meng::FUser**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("samp_meng.out_of_memory  field:samp_meng.FDb.ind_user");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_user_buckets_n; i++) {
            samp_meng::FUser* elem = _db.ind_user_buckets_elems[i];
            while (elem) {
                samp_meng::FUser &row        = *elem;
                samp_meng::FUser* next       = row.ind_user_next;
                u32 index          = ::i32_Hash(0, row.user) & (new_nbuckets-1);
                row.ind_user_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_user_buckets_elems, old_size);
        _db.ind_user_buckets_elems = new_buckets;
        _db.ind_user_buckets_n = new_nbuckets;
    }
}

// --- samp_meng.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr samp_meng::trace_RowidFind(int t) throw() {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- samp_meng.FDb.trace.N
// Function return 1
inline static i32 samp_meng::trace_N() throw() {
    return 1;
}

// --- samp_meng.FDb..Init
// Set all fields to initial values.
void samp_meng::FDb_Init() {
    // initialize LAry fdin (samp_meng.FDb.fdin)
    _db.fdin_n = 0;
    memset(_db.fdin_lary, 0, sizeof(_db.fdin_lary)); // zero out all level pointers
    samp_meng::FFdin* fdin_first = (samp_meng::FFdin*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FFdin) * (u64(1)<<4));
    if (!fdin_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fdin_lary[i]  = fdin_first;
        fdin_first    += 1ULL<<i;
    }
    _db.cd_fdin_eof_head = NULL; // (samp_meng.FDb.cd_fdin_eof)
    _db.cd_fdin_eof_n = 0; // (samp_meng.FDb.cd_fdin_eof)
    // initialize LAry symbol (samp_meng.FDb.symbol)
    _db.symbol_n = 0;
    memset(_db.symbol_lary, 0, sizeof(_db.symbol_lary)); // zero out all level pointers
    samp_meng::FSymbol* symbol_first = (samp_meng::FSymbol*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FSymbol) * (u64(1)<<4));
    if (!symbol_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.symbol_lary[i]  = symbol_first;
        symbol_first    += 1ULL<<i;
    }
    _db.cd_fdin_read_head = NULL; // (samp_meng.FDb.cd_fdin_read)
    _db.cd_fdin_read_n = 0; // (samp_meng.FDb.cd_fdin_read)
    // initialize hash table for samp_meng::FSymbol;
    _db.ind_symbol_n             	= 0; // (samp_meng.FDb.ind_symbol)
    _db.ind_symbol_buckets_n     	= 4; // (samp_meng.FDb.ind_symbol)
    _db.ind_symbol_buckets_elems 	= (samp_meng::FSymbol**)algo_lib::malloc_AllocMem(sizeof(samp_meng::FSymbol*)*_db.ind_symbol_buckets_n); // initial buckets (samp_meng.FDb.ind_symbol)
    if (!_db.ind_symbol_buckets_elems) {
        FatalErrorExit("out of memory"); // (samp_meng.FDb.ind_symbol)
    }
    memset(_db.ind_symbol_buckets_elems, 0, sizeof(samp_meng::FSymbol*)*_db.ind_symbol_buckets_n); // (samp_meng.FDb.ind_symbol)
    // order: initialize Tpool
    _db.order_free      = NULL;
    _db.order_blocksize = algo::BumpToPow2(64 * sizeof(samp_meng::FOrder)); // allocate 64-127 elements at a time
    // initialize hash table for samp_meng::FOrder;
    _db.ind_order_n             	= 0; // (samp_meng.FDb.ind_order)
    _db.ind_order_buckets_n     	= 4; // (samp_meng.FDb.ind_order)
    _db.ind_order_buckets_elems 	= (samp_meng::FOrder**)algo_lib::malloc_AllocMem(sizeof(samp_meng::FOrder*)*_db.ind_order_buckets_n); // initial buckets (samp_meng.FDb.ind_order)
    if (!_db.ind_order_buckets_elems) {
        FatalErrorExit("out of memory"); // (samp_meng.FDb.ind_order)
    }
    memset(_db.ind_order_buckets_elems, 0, sizeof(samp_meng::FOrder*)*_db.ind_order_buckets_n); // (samp_meng.FDb.ind_order)
    // ordq: initialize Tpool
    _db.ordq_free      = NULL;
    _db.ordq_blocksize = algo::BumpToPow2(64 * sizeof(samp_meng::FOrdq)); // allocate 64-127 elements at a time
    // initialize LAry user (samp_meng.FDb.user)
    _db.user_n = 0;
    memset(_db.user_lary, 0, sizeof(_db.user_lary)); // zero out all level pointers
    samp_meng::FUser* user_first = (samp_meng::FUser*)algo_lib::malloc_AllocMem(sizeof(samp_meng::FUser) * (u64(1)<<4));
    if (!user_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.user_lary[i]  = user_first;
        user_first    += 1ULL<<i;
    }
    // initialize hash table for samp_meng::FUser;
    _db.ind_user_n             	= 0; // (samp_meng.FDb.ind_user)
    _db.ind_user_buckets_n     	= 4; // (samp_meng.FDb.ind_user)
    _db.ind_user_buckets_elems 	= (samp_meng::FUser**)algo_lib::malloc_AllocMem(sizeof(samp_meng::FUser*)*_db.ind_user_buckets_n); // initial buckets (samp_meng.FDb.ind_user)
    if (!_db.ind_user_buckets_elems) {
        FatalErrorExit("out of memory"); // (samp_meng.FDb.ind_user)
    }
    memset(_db.ind_user_buckets_elems, 0, sizeof(samp_meng::FUser*)*_db.ind_user_buckets_n); // (samp_meng.FDb.ind_user)
    _db.next_order_id = u64(1);

    samp_meng::InitReflection();
}

// --- samp_meng.FDb..Uninit
void samp_meng::FDb_Uninit() throw() {
    samp_meng::FDb &row = _db; (void)row;

    // samp_meng.FDb.ind_user.Uninit (Thash)  //
    // skip destruction of ind_user in global scope

    // samp_meng.FDb.user.Uninit (Lary)  //
    // skip destruction in global scope

    // samp_meng.FDb.ind_order.Uninit (Thash)  //
    // skip destruction of ind_order in global scope

    // samp_meng.FDb.ind_symbol.Uninit (Thash)  //
    // skip destruction of ind_symbol in global scope

    // samp_meng.FDb.symbol.Uninit (Lary)  //
    // skip destruction in global scope

    // samp_meng.FDb.fdin.Uninit (Lary)  //ams control messages on stdin
    // skip destruction in global scope
}

// --- samp_meng.FFdin.in.BeginRead
// Attach fbuf to Iohook for reading
// Attach file descriptor and begin reading using edge-triggered epoll.
// File descriptor becomes owned by samp_meng::FFdin.in via FIohook field.
// Whenever the file descriptor becomes readable, insert fdin into cd_fdin_read.
void samp_meng::in_BeginRead(samp_meng::FFdin& fdin, algo::Fildes fd) throw() {
    callback_Set1(fdin.in_iohook, fdin, samp_meng::cd_fdin_read_Insert);
    fdin.in_iohook.fildes = fd;
    IOEvtFlags flags;
    read_Set(flags, true);
    if (fdin.in_epoll_enable) {
        algo_lib::IohookAdd(fdin.in_iohook, flags);
    } else {
        samp_meng::cd_fdin_read_Insert(fdin);
    }
}

// --- samp_meng.FFdin.in.EndRead
// Set EOF flag
void samp_meng::in_EndRead(samp_meng::FFdin& fdin) throw() {
    if (ValidQ(fdin.in_iohook.fildes)) {
        fdin.in_eof = true;
        samp_meng::cd_fdin_read_Insert(fdin);
    }
}

// --- samp_meng.FFdin.in.GetMsg
// Detect incoming message in buffer and return it
// Look for valid message at current position in the buffer.
// If message is already there, return a pointer to it. Do not skip message (call SkipMsg to do that).
// If there is no message, read once from underlying file descriptor and try again.
// The message is found by looking for delimiter '\n'.
// The return value is an aryptr. If ret.elems is non-NULL, the message is valid (possibly empty).
// If ret.elems is NULL, no message can be extracted from buffer.
// The returned aryptr excludes the trailing deliminter.
// SkipMsg will skip both the line and the deliminter.
// A partial line at the end of input is NOT returned (TODO?)
// 
algo::aryptr<char> samp_meng::in_GetMsg(samp_meng::FFdin& fdin) throw() {
    algo::aryptr<char> ret;
    if (!fdin.in_msgvalid) {
        in_ScanMsg(fdin);
        if (!fdin.in_msgvalid) {
            bool readable = in_Refill(fdin);
            if (readable) {
                in_ScanMsg(fdin);
            }
        }
    }
    char *hdr = (char*)(fdin.in_elems + fdin.in_start);
    if (fdin.in_msgvalid) {
        ret.elems = hdr;
        ret.n_elems = fdin.in_msglen;
    }
    if (!fdin.in_msgvalid && fdin.in_eof) { // all messages processed
        samp_meng::cd_fdin_eof_Insert(fdin);
    }
    return ret;
}

// --- samp_meng.FFdin.in.Refill
// Refill buffer. Return false if no further refill possible (input buffer exhausted)
bool samp_meng::in_Refill(samp_meng::FFdin& fdin) throw() {
    bool readable = ValidQ(fdin.in_iohook.fildes);
    if (readable) {
        int fd     = fdin.in_iohook.fildes.value;
        i32 max    = in_Max(fdin);
        i32 end    = fdin.in_end;
        i32 nbytes = end - fdin.in_start; // # bytes currently in buffer
        i32 nfree  = max - end; // bytes available at the end of buffer
        if (nbytes == 0 || nfree == 0) { // make more room for reading (or take advantage of free shift)
            in_Shift(fdin);
            end = fdin.in_end;
            nfree = max - end;
        }
        ssize_t ret         = read(fd, fdin.in_elems + end, nfree);
        readable            = !(ret < 0 && errno == EAGAIN);
        bool error          = ret < 0 && errno != EAGAIN; // detect permanent error on this fd
        bool eof            = error || (ret == 0 && nfree > 0);
        fdin.in_end += i32_Max(ret,0); // new end of bytes
        if (error) {
            fdin.in_err = algo::FromErrno(errno); // fetch errno
        }
        fdin.in_eof |= eof;
    }
    if (!readable && fdin.in_epoll_enable) {
        samp_meng::cd_fdin_read_Remove(fdin);
    }
    return readable;
}

// --- samp_meng.FFdin.in.RemoveAll
// Empty bfufer
// Discard contents of the buffer.
void samp_meng::in_RemoveAll(samp_meng::FFdin& fdin) throw() {
    fdin.in_start    = 0;
    fdin.in_end      = 0;
    fdin.in_msgvalid = false;
}

// --- samp_meng.FFdin.in.ScanMsg
// Internal function to scan for a message
// 
static void samp_meng::in_ScanMsg(samp_meng::FFdin& fdin) throw() {
    char *hdr = (char*)(fdin.in_elems + fdin.in_start);
    i32 avail = in_N(fdin);
    i32 msglen;
    bool found = false;
    // scan for delimiter starting from the previous place where we left off.
    // at the end, save offset back to fdin so we don't have to re-scan.
    // returned message length **does not include delimiter**.
    // a line that exceeds buffer length is not returned.
    for (msglen = fdin.in_msglen; msglen < avail; msglen += sizeof(char)) {
        if (hdr[msglen] == '\n') { // delimiter?
            found = true;
            break;
        }
    }
    if (!found && msglen >= in_Max(fdin)) {
        fdin.in_eof = true; // cause user to detect eof
        fdin.in_err = algo::FromErrno(E2BIG); // argument list too big -- closest error code
    }
    fdin.in_msglen = msglen;
    fdin.in_msgvalid = found;
}

// --- samp_meng.FFdin.in.Shift
// Internal function to shift data left
// Shift existing bytes over to the beginning of the buffer
static void samp_meng::in_Shift(samp_meng::FFdin& fdin) throw() {
    i32 start = fdin.in_start;
    i32 bytes_n = fdin.in_end - start;
    if (bytes_n > 0) {
        memmove(fdin.in_elems, fdin.in_elems + start, bytes_n);
    }
    fdin.in_end = bytes_n;
    fdin.in_start = 0;
}

// --- samp_meng.FFdin.in.SkipBytes
// Skip N bytes when reading
// Mark some buffer contents as read.
// 
void samp_meng::in_SkipBytes(samp_meng::FFdin& fdin, int n) throw() {
    int avail = fdin.in_end - fdin.in_start;
    n = i32_Min(n,avail);
    fdin.in_start += n;
    fdin.in_msgvalid = false;
}

// --- samp_meng.FFdin.in.SkipMsg
// Skip current message, if any
// Skip current message, if any.
void samp_meng::in_SkipMsg(samp_meng::FFdin& fdin) throw() {
    if (fdin.in_msgvalid) {
        int skip = fdin.in_msglen;
        skip += ssizeof(char); // delimiter
        i32 start = fdin.in_start;
        start += skip;
        fdin.in_start = start;
        fdin.in_msgvalid = false;
        fdin.in_msglen   = 0; // reset message length -- important for delimited streams
    }
}

// --- samp_meng.FFdin.in.WriteAll
// Attempt to write buffer contents to fd
// Write bytes to the buffer. If the entire block is written, return true,
// Otherwise return false.
// Bytes in the buffer are potentially shifted left to make room for the message.
// 
bool samp_meng::in_WriteAll(samp_meng::FFdin& fdin, u8 *in, i32 in_n) throw() {
    int max = in_Max(fdin);
    // check if message doesn't fit. if so, shift bytes over.
    if (fdin.in_end + in_n > max) {
        in_Shift(fdin);
    }
    // now try to write the message.
    i32 end = fdin.in_end;
    bool fits = end + in_n <= max;
    if (fits && in_n > 0) {
        memcpy(fdin.in_elems + end, in, in_n);
        fdin.in_end = end + in_n;
    }
    return fits;
}

// --- samp_meng.FFdin..Init
// Set all fields to initial values.
void samp_meng::FFdin_Init(samp_meng::FFdin& fdin) {
    fdin.in_end = 0; // in: initialize
    fdin.in_start = 0; // in: initialize
    fdin.in_eof = false; // in: initialize
    fdin.in_msgvalid = false; // in: initialize
    fdin.in_msglen = 0; // in: initialize
    fdin.in_epoll_enable = true; // in: initialize
    fdin.cd_fdin_eof_next = (samp_meng::FFdin*)-1; // (samp_meng.FDb.cd_fdin_eof) not-in-list
    fdin.cd_fdin_eof_prev = NULL; // (samp_meng.FDb.cd_fdin_eof)
    fdin.cd_fdin_read_next = (samp_meng::FFdin*)-1; // (samp_meng.FDb.cd_fdin_read) not-in-list
    fdin.cd_fdin_read_prev = NULL; // (samp_meng.FDb.cd_fdin_read)
}

// --- samp_meng.FFdin..Uninit
void samp_meng::FFdin_Uninit(samp_meng::FFdin& fdin) throw() {
    samp_meng::FFdin &row = fdin; (void)row;
    cd_fdin_eof_Remove(row); // remove fdin from index cd_fdin_eof
    cd_fdin_read_Remove(row); // remove fdin from index cd_fdin_read
}

// --- samp_meng.I64Price8.value.SetDoubleMaybe
// Set value of field value, using rounding.
// If value is out of range for the target type, return false.
bool samp_meng::value_SetDoubleMaybe(samp_meng::I64Price8& parent, double val) throw() {
    double intval = val * 100000000;
    i64 minval = i64(-9223372036854775807LL);
    i64 maxval = i64(9223372036854775807LL);
    bool retval = intval >= minval;
    retval &= intval < maxval;
    if (retval) {
        intval = intval + (val > 0 ? 0.5 : -0.5);
        parent.value = intval; // set underlying field.
    }
    return retval;
}

// --- samp_meng.I64Price8.value.ReadStrptrMaybe
bool samp_meng::value_ReadStrptrMaybe(samp_meng::I64Price8& parent, algo::strptr in) throw() {
    int index = 0;
    int neg = false;
    // skip leading sign
    if (index < in.n_elems && (in.elems[index] == '+' || in.elems[index] == '-')) {
        neg = in.elems[index]=='-';
        index++;
    };
    // parse digits
    u64 val = 0;
    int ndot = 0; // number of . encountered
    int nfrac = 0; // read up to NFRAC digits after .; if not found, fill in
    bool ok = true;// overflow or bad char
    for (; index < in.n_elems; index++) {
        char c = in.elems[index];
        if (c == '.') {
            ok &= ndot == 0; // max 1 dot
            ndot++;
        } else if (algo_lib::DigitCharQ(c)) {
            if (nfrac < 8) { // ignore digits after 8'th
                u64 newval = val*10 + (c-'0');
                ok &= newval >= val;
                val = newval;
                nfrac += ndot>0;
            }
        } else {
            ok = false; // unknown char
        }
    }
    while (nfrac < 8) {// insert missing
        u64 newval = val*10;
        ok &= newval >= val;
        val = newval;
        nfrac++;
    }
    i64 final_val = val;
    ok &= val <= 9223372036854775807LL; // u->i coversion, check limits
    if (neg) {
        final_val = -final_val;
        ok &= final_val >= -9223372036854775807LL;
    }
    if (ok) {
        parent.value = final_val;// store value
    }
    return ok;
}

// --- samp_meng.I64Price8.value.Print
void samp_meng::value_Print(samp_meng::I64Price8& parent, cstring &outstr) throw() {
    i64 value = parent.value;
    ch_Reserve(outstr, 64);
    if (value < 0) {
        ch_Alloc(outstr) = '-';
        value = -value;
    }
    u8 *value_start = (u8*)(outstr.ch_elems + outstr.ch_n);
    outstr.ch_n += algo::u64_FmtBufDec(value, 8, value_start, false);
}

// --- samp_meng.I64Price8..ReadStrptrMaybe
// Read fields of samp_meng::I64Price8 from an ascii string.
// The format of the string is the format of the samp_meng::I64Price8's only field
bool samp_meng::I64Price8_ReadStrptrMaybe(samp_meng::I64Price8 &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- samp_meng.I64Price8..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.I64Price8.String  printfmt:Raw
void samp_meng::I64Price8_Print(samp_meng::I64Price8 row, algo::cstring& str) throw() {
    samp_meng::value_Print(row, str);
}

// --- samp_meng.FOrder..Uninit
void samp_meng::FOrder_Uninit(samp_meng::FOrder& order) throw() {
    samp_meng::FOrder &row = order; (void)row;
    ind_order_Remove(row); // remove order from index ind_order
    samp_meng::FOrdq* p_p_ordq = row.p_ordq;
    if (p_p_ordq)  {
        bh_order_Remove(*p_p_ordq, row);// remove order from index bh_order
    }
    samp_meng::FUser* p_p_user = row.p_user;
    if (p_p_user)  {
        zd_order_Remove(*p_p_user, row);// remove order from index zd_order
    }
}

// --- samp_meng.FOrdq.bh_order.Cascdel
// Delete referred-to items.
// Delete all elements referenced by the heap.
void samp_meng::bh_order_Cascdel(samp_meng::FOrdq& ordq) throw() {
    i32 n = ordq.bh_order_n;
    while (n > 0) {
        n--;
        samp_meng::FOrder &elem = *ordq.bh_order_elems[n]; // pick cheapest element to remove
        elem.bh_order_idx = -1; // mark not-in-heap
        ordq.bh_order_n = n;
        order_Delete(elem);
    }
}

// --- samp_meng.FOrdq.bh_order.Dealloc
// Remove all elements from heap and free memory used by the array.
void samp_meng::bh_order_Dealloc(samp_meng::FOrdq& ordq) throw() {
    bh_order_RemoveAll(ordq);
    algo_lib::malloc_FreeMem(ordq.bh_order_elems, sizeof(samp_meng::FOrder*)*ordq.bh_order_max);
    ordq.bh_order_max   = 0;
    ordq.bh_order_elems = NULL;
}

// --- samp_meng.FOrdq.bh_order.Downheap
// Find new location for ROW starting at IDX
// NOTE: Rest of heap is rearranged, but pointer to ROW is NOT stored in array.
static int samp_meng::bh_order_Downheap(samp_meng::FOrdq& ordq, samp_meng::FOrder& row, int idx) throw() {
    samp_meng::FOrder* *elems = ordq.bh_order_elems;
    int n = ordq.bh_order_n;
    int child = idx*2+1;
    while (child < n) {
        samp_meng::FOrder* p = elems[child]; // left child
        int rchild = child+1;
        if (rchild < n) {
            samp_meng::FOrder* q = elems[rchild]; // right child
            if (bh_order_ElemLt(ordq, *q,*p)) {
                child = rchild;
                p     = q;
            }
        }
        if (!bh_order_ElemLt(ordq, *p,row)) {
            break;
        }
        p->bh_order_idx   = idx;
        elems[idx]     = p;
        idx            = child;
        child          = idx*2+1;
    }
    return idx;
}

// --- samp_meng.FOrdq.bh_order.Insert
// Insert row. Row must not already be in index. If row is already in index, do nothing.
void samp_meng::bh_order_Insert(samp_meng::FOrdq& ordq, samp_meng::FOrder& row) throw() {
    if (LIKELY(row.bh_order_idx == -1)) {
        bh_order_Reserve(ordq, 1);
        int n = ordq.bh_order_n;
        ordq.bh_order_n = n + 1;
        int new_idx = bh_order_Upheap(ordq, row, n);
        row.bh_order_idx = new_idx;
        ordq.bh_order_elems[new_idx] = &row;
    }
}

// --- samp_meng.FOrdq.bh_order.Reheap
// If row is in heap, update its position. If row is not in heap, insert it.
// Return new position of item in the heap (0=top)
i32 samp_meng::bh_order_Reheap(samp_meng::FOrdq& ordq, samp_meng::FOrder& row) throw() {
    int old_idx = row.bh_order_idx;
    bool isnew = old_idx == -1;
    if (isnew) {
        bh_order_Reserve(ordq, 1);
        old_idx = ordq.bh_order_n++;
    }
    int new_idx = bh_order_Upheap(ordq, row, old_idx);
    if (!isnew && new_idx == old_idx) {
        new_idx = bh_order_Downheap(ordq, row, old_idx);
    }
    row.bh_order_idx = new_idx;
    ordq.bh_order_elems[new_idx] = &row;
    return new_idx;
}

// --- samp_meng.FOrdq.bh_order.ReheapFirst
// Key of first element in the heap changed. Move it.
// This function does not check the insert condition.
// Return new position of item in the heap (0=top).
// Heap must be non-empty or behavior is undefined.
i32 samp_meng::bh_order_ReheapFirst(samp_meng::FOrdq& ordq) throw() {
    samp_meng::FOrder &row = *ordq.bh_order_elems[0];
    i32 new_idx = bh_order_Downheap(ordq, row, 0);
    row.bh_order_idx = new_idx;
    ordq.bh_order_elems[new_idx] = &row;
    return new_idx;
}

// --- samp_meng.FOrdq.bh_order.Remove
// Remove element from index. If element is not in index, do nothing.
void samp_meng::bh_order_Remove(samp_meng::FOrdq& ordq, samp_meng::FOrder& row) throw() {
    if (bh_order_InBheapQ(row)) {
        int old_idx = row.bh_order_idx;
        if (ordq.bh_order_elems[old_idx] == &row) { // sanity check: heap points back to row
            row.bh_order_idx = -1;           // mark not in heap
            i32 n = ordq.bh_order_n - 1; // index of last element in heap
            ordq.bh_order_n = n;         // decrease count
            if (old_idx != n) {
                samp_meng::FOrder *elem = ordq.bh_order_elems[n];
                int new_idx = bh_order_Upheap(ordq, *elem, old_idx);
                if (new_idx == old_idx) {
                    new_idx = bh_order_Downheap(ordq, *elem, old_idx);
                }
                elem->bh_order_idx = new_idx;
                ordq.bh_order_elems[new_idx] = elem;
            }
        }
    }
}

// --- samp_meng.FOrdq.bh_order.RemoveAll
// Remove all elements from binary heap
void samp_meng::bh_order_RemoveAll(samp_meng::FOrdq& ordq) throw() {
    int n = ordq.bh_order_n;
    for (int i = n - 1; i>=0; i--) {
        ordq.bh_order_elems[i]->bh_order_idx = -1; // mark not-in-heap
    }
    ordq.bh_order_n = 0;
}

// --- samp_meng.FOrdq.bh_order.RemoveFirst
// If index is empty, return NULL. Otherwise remove and return first key in index.
//  Call 'head changed' trigger.
samp_meng::FOrder* samp_meng::bh_order_RemoveFirst(samp_meng::FOrdq& ordq) throw() {
    samp_meng::FOrder *row = NULL;
    if (ordq.bh_order_n > 0) {
        row = ordq.bh_order_elems[0];
        row->bh_order_idx = -1;           // mark not in heap
        i32 n = ordq.bh_order_n - 1; // index of last element in heap
        ordq.bh_order_n = n;         // decrease count
        if (n) {
            samp_meng::FOrder &elem = *ordq.bh_order_elems[n];
            int new_idx = bh_order_Downheap(ordq, elem, 0);
            elem.bh_order_idx = new_idx;
            ordq.bh_order_elems[new_idx] = &elem;
        }
    }
    return row;
}

// --- samp_meng.FOrdq.bh_order.Reserve
// Reserve space in index for N more elements
void samp_meng::bh_order_Reserve(samp_meng::FOrdq& ordq, int n) throw() {
    i32 old_max = ordq.bh_order_max;
    if (UNLIKELY(ordq.bh_order_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(samp_meng::FOrder*);
        u32 new_size = new_max * sizeof(samp_meng::FOrder*);
        void *new_mem = algo_lib::malloc_ReallocMem(ordq.bh_order_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("samp_meng.out_of_memory  field:samp_meng.FOrdq.bh_order");
        }
        ordq.bh_order_elems = (samp_meng::FOrder**)new_mem;
        ordq.bh_order_max = new_max;
    }
}

// --- samp_meng.FOrdq.bh_order.Upheap
// Find and return index of new location for element ROW in the heap, starting at index IDX.
// Move any elements along the way but do not modify ROW.
static int samp_meng::bh_order_Upheap(samp_meng::FOrdq& ordq, samp_meng::FOrder& row, int idx) throw() {
    samp_meng::FOrder* *elems = ordq.bh_order_elems;
    while (idx>0) {
        int j = (idx-1)/2;
        samp_meng::FOrder* p = elems[j];
        if (!bh_order_ElemLt(ordq, row, *p)) {
            break;
        }
        p->bh_order_idx = idx;
        elems[idx] = p;
        idx = j;
    }
    return idx;
}

// --- samp_meng.FOrdq.bh_order.ElemLt
inline static bool samp_meng::bh_order_ElemLt(samp_meng::FOrdq& ordq, samp_meng::FOrder &a, samp_meng::FOrder &b) throw() {
    (void)ordq;
    return ordkey_Lt(a, b);
}

// --- samp_meng.FOrdq.bh_order_curs.Add
static void samp_meng::ordq_bh_order_curs_Add(ordq_bh_order_curs &curs, samp_meng::FOrder& row) {
    u32 n = curs.temp_n;
    int i = n;
    curs.temp_n = n+1;
    samp_meng::FOrder* *elems = curs.temp_elems;
    while (i>0) {
        int j = (i-1)/2;
        samp_meng::FOrder* p = elems[j];
        if (!bh_order_ElemLt((*curs.parent), row,*p)) {
            break;
        }
        elems[i]=p;
        i=j;
    }
    elems[i]=&row;
}

// --- samp_meng.FOrdq.bh_order_curs.Reserve
void samp_meng::ordq_bh_order_curs_Reserve(ordq_bh_order_curs &curs, int n) {
    if (n > curs.temp_max) {
        size_t old_size   = sizeof(void*) * curs.temp_max;
        size_t new_size   = sizeof(void*) * bh_order_N((*curs.parent));
        curs.temp_elems   = (samp_meng::FOrder**)algo_lib::malloc_ReallocMem(curs.temp_elems, old_size, new_size);
        if (!curs.temp_elems) {
            algo::FatalErrorExit("samp_meng.cursor_out_of_memory  func:samp_meng.FOrdq.bh_order_curs.Reserve");
        }
        curs.temp_max       = bh_order_N((*curs.parent));
    }
}

// --- samp_meng.FOrdq.bh_order_curs.Reset
// Reset cursor. If HEAP is non-empty, add its top element to CURS.
void samp_meng::ordq_bh_order_curs_Reset(ordq_bh_order_curs &curs, samp_meng::FOrdq &parent) {
    curs.parent       = &parent;
    ordq_bh_order_curs_Reserve(curs, bh_order_N((*curs.parent)));
    curs.temp_n = 0;
    if (parent.bh_order_n > 0) {
        samp_meng::FOrder &first = *parent.bh_order_elems[0];
        curs.temp_elems[0] = &first; // insert first element in heap
        curs.temp_n = 1;
    }
}

// --- samp_meng.FOrdq.bh_order_curs.Next
// Advance cursor.
void samp_meng::ordq_bh_order_curs_Next(ordq_bh_order_curs &curs) {
    samp_meng::FOrder* *elems = curs.temp_elems;
    int n = curs.temp_n;
    if (n > 0) {
        // remove top element from heap
        samp_meng::FOrder* dead = elems[0];
        int i       = 0;
        samp_meng::FOrder* last = curs.temp_elems[n-1];
        // downheap last elem
        do {
            samp_meng::FOrder* choose = last;
            int l         = i*2+1;
            if (l<n) {
                samp_meng::FOrder* el = elems[l];
                int r     = l+1;
                r        -= r==n;
                samp_meng::FOrder* er = elems[r];
                if (bh_order_ElemLt((*curs.parent),*er,*el)) {
                    el  = er;
                    l   = r;
                }
                bool b = bh_order_ElemLt((*curs.parent),*el,*last);
                if (b) choose = el;
                if (!b) l = n;
            }
            elems[i] = choose;
            i = l;
        } while (i < n);
        curs.temp_n = n-1;
        int index = dead->bh_order_idx;
        i = (index*2+1);
        if (i < bh_order_N((*curs.parent))) {
            samp_meng::FOrder &elem = *curs.parent->bh_order_elems[i];
            ordq_bh_order_curs_Add(curs, elem);
        }
        if (i+1 < bh_order_N((*curs.parent))) {
            samp_meng::FOrder &elem = *curs.parent->bh_order_elems[i + 1];
            ordq_bh_order_curs_Add(curs, elem);
        }
    }
}

// --- samp_meng.FOrdq..Uninit
void samp_meng::FOrdq_Uninit(samp_meng::FOrdq& ordq) throw() {
    samp_meng::FOrdq &row = ordq; (void)row;
    bh_order_Cascdel(ordq); // dmmeta.cascdel:samp_meng.FOrdq.bh_order
    samp_meng::FSymbol* p_p_symbol = row.p_symbol;
    if (p_p_symbol)  {
        c_ordq_Remove(*p_p_symbol, row);// remove ordq from index c_ordq
    }

    // samp_meng.FOrdq.bh_order.Uninit (Bheap)  //
    algo_lib::malloc_FreeMem((u8*)ordq.bh_order_elems, sizeof(samp_meng::FOrder*)*ordq.bh_order_max); // (samp_meng.FOrdq.bh_order)
}

// --- samp_meng.Symbol..ReadStrptrMaybe
// Read fields of samp_meng::Symbol from an ascii string.
// The format of the string is the format of the samp_meng::Symbol's only field
bool samp_meng::Symbol_ReadStrptrMaybe(samp_meng::Symbol &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = retval && algo::RnullStr8_ReadStrptrMaybe(parent.symbol, in_str);
    return retval;
}

// --- samp_meng.Symbol..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.Symbol.String  printfmt:Raw
void samp_meng::Symbol_Print(samp_meng::Symbol& row, algo::cstring& str) throw() {
    algo::RnullStr8_Print(row.symbol, str);
}

// --- samp_meng.FSymbol.c_ordq.Insert
// Insert pointer to row into array. Row must not already be in array.
// If pointer is already in the array, it may be inserted twice.
void samp_meng::c_ordq_Insert(samp_meng::FSymbol& symbol, samp_meng::FOrdq& row) throw() {
    if (bool_Update(row.symbol_c_ordq_in_ary,true)) {
        // reserve space
        c_ordq_Reserve(symbol, 1);
        u32 n  = symbol.c_ordq_n;
        u32 at = n;
        samp_meng::FOrdq* *elems = symbol.c_ordq_elems;
        elems[at] = &row;
        symbol.c_ordq_n = n+1;

    }
}

// --- samp_meng.FSymbol.c_ordq.InsertMaybe
// Insert pointer to row in array.
// If row is already in the array, do nothing.
// Return value: whether element was inserted into array.
bool samp_meng::c_ordq_InsertMaybe(samp_meng::FSymbol& symbol, samp_meng::FOrdq& row) throw() {
    bool retval = !row.symbol_c_ordq_in_ary;
    c_ordq_Insert(symbol,row); // check is performed in _Insert again
    return retval;
}

// --- samp_meng.FSymbol.c_ordq.Remove
// Find element using linear scan. If element is in array, remove, otherwise do nothing
void samp_meng::c_ordq_Remove(samp_meng::FSymbol& symbol, samp_meng::FOrdq& row) throw() {
    if (bool_Update(row.symbol_c_ordq_in_ary,false)) {
        int lim = symbol.c_ordq_n;
        samp_meng::FOrdq* *elems = symbol.c_ordq_elems;
        // search backward, so that most recently added element is found first.
        // if found, shift array.
        for (int i = lim-1; i>=0; i--) {
            samp_meng::FOrdq* elem = elems[i]; // fetch element
            if (elem == &row) {
                int j = i + 1;
                size_t nbytes = sizeof(samp_meng::FOrdq*) * (lim - j);
                memmove(elems + i, elems + j, nbytes);
                symbol.c_ordq_n = lim - 1;
                break;
            }
        }
    }
}

// --- samp_meng.FSymbol.c_ordq.Reserve
// Reserve space in index for N more elements;
void samp_meng::c_ordq_Reserve(samp_meng::FSymbol& symbol, u32 n) throw() {
    u32 old_max = symbol.c_ordq_max;
    if (UNLIKELY(symbol.c_ordq_n + n > old_max)) {
        u32 new_max  = u32_Max(4, old_max * 2);
        u32 old_size = old_max * sizeof(samp_meng::FOrdq*);
        u32 new_size = new_max * sizeof(samp_meng::FOrdq*);
        void *new_mem = algo_lib::malloc_ReallocMem(symbol.c_ordq_elems, old_size, new_size);
        if (UNLIKELY(!new_mem)) {
            FatalErrorExit("samp_meng.out_of_memory  field:samp_meng.FSymbol.c_ordq");
        }
        symbol.c_ordq_elems = (samp_meng::FOrdq**)new_mem;
        symbol.c_ordq_max = new_max;
    }
}

// --- samp_meng.FSymbol..Uninit
void samp_meng::FSymbol_Uninit(samp_meng::FSymbol& symbol) throw() {
    samp_meng::FSymbol &row = symbol; (void)row;
    ind_symbol_Remove(row); // remove symbol from index ind_symbol

    // samp_meng.FSymbol.c_ordq.Uninit (Ptrary)  //
    algo_lib::malloc_FreeMem(symbol.c_ordq_elems, sizeof(samp_meng::FOrdq*)*symbol.c_ordq_max); // (samp_meng.FSymbol.c_ordq)
}

// --- samp_meng.FUser.zd_order.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void samp_meng::zd_order_Insert(samp_meng::FUser& user, samp_meng::FOrder& row) throw() {
    if (!zd_order_InLlistQ(row)) {
        samp_meng::FOrder* old_tail = user.zd_order_tail;
        row.zd_order_next = NULL;
        row.zd_order_prev = old_tail;
        user.zd_order_tail = &row;
        samp_meng::FOrder **new_row_a = &old_tail->zd_order_next;
        samp_meng::FOrder **new_row_b = &user.zd_order_head;
        samp_meng::FOrder **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        user.zd_order_n++;
    }
}

// --- samp_meng.FUser.zd_order.Remove
// Remove element from index. If element is not in index, do nothing.
void samp_meng::zd_order_Remove(samp_meng::FUser& user, samp_meng::FOrder& row) throw() {
    if (zd_order_InLlistQ(row)) {
        samp_meng::FOrder* old_head       = user.zd_order_head;
        (void)old_head; // in case it's not used
        samp_meng::FOrder* prev = row.zd_order_prev;
        samp_meng::FOrder* next = row.zd_order_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        samp_meng::FOrder **new_next_a = &prev->zd_order_next;
        samp_meng::FOrder **new_next_b = &user.zd_order_head;
        samp_meng::FOrder **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        samp_meng::FOrder **new_prev_a = &next->zd_order_prev;
        samp_meng::FOrder **new_prev_b = &user.zd_order_tail;
        samp_meng::FOrder **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        user.zd_order_n--;
        row.zd_order_next=(samp_meng::FOrder*)-1; // not-in-list
    }
}

// --- samp_meng.FUser.zd_order.RemoveAll
// Empty the index. (The rows are not deleted)
void samp_meng::zd_order_RemoveAll(samp_meng::FUser& user) throw() {
    samp_meng::FOrder* row = user.zd_order_head;
    user.zd_order_head = NULL;
    user.zd_order_tail = NULL;
    user.zd_order_n = 0;
    while (row) {
        samp_meng::FOrder* row_next = row->zd_order_next;
        row->zd_order_next  = (samp_meng::FOrder*)-1;
        row->zd_order_prev  = NULL;
        row = row_next;
    }
}

// --- samp_meng.FUser.zd_order.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
samp_meng::FOrder* samp_meng::zd_order_RemoveFirst(samp_meng::FUser& user) throw() {
    samp_meng::FOrder *row = NULL;
    row = user.zd_order_head;
    if (row) {
        samp_meng::FOrder *next = row->zd_order_next;
        user.zd_order_head = next;
        samp_meng::FOrder **new_end_a = &next->zd_order_prev;
        samp_meng::FOrder **new_end_b = &user.zd_order_tail;
        samp_meng::FOrder **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        user.zd_order_n--;
        row->zd_order_next = (samp_meng::FOrder*)-1; // mark as not-in-list
    }
    return row;
}

// --- samp_meng.FUser..Uninit
void samp_meng::FUser_Uninit(samp_meng::FUser& user) throw() {
    samp_meng::FUser &row = user; (void)row;
    ind_user_Remove(row); // remove user from index ind_user
}

// --- samp_meng.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* samp_meng::value_ToCstr(const samp_meng::FieldId& parent) throw() {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case samp_meng_FieldId_base        : ret = "base";  break;
        case samp_meng_FieldId_type        : ret = "type";  break;
        case samp_meng_FieldId_length      : ret = "length";  break;
        case samp_meng_FieldId_order       : ret = "order";  break;
        case samp_meng_FieldId_value       : ret = "value";  break;
        case samp_meng_FieldId_user        : ret = "user";  break;
        case samp_meng_FieldId_time        : ret = "time";  break;
        case samp_meng_FieldId_price       : ret = "price";  break;
        case samp_meng_FieldId_symbol      : ret = "symbol";  break;
        case samp_meng_FieldId_qty         : ret = "qty";  break;
        case samp_meng_FieldId_ioc         : ret = "ioc";  break;
        case samp_meng_FieldId_text        : ret = "text";  break;
    }
    return ret;
}

// --- samp_meng.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void samp_meng::value_Print(const samp_meng::FieldId& parent, algo::cstring &lhs) throw() {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- samp_meng.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool samp_meng::value_SetStrptrMaybe(samp_meng::FieldId& parent, algo::strptr rhs) throw() {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 3: {
            switch (u64(algo::ReadLE16(rhs.elems))|(u64(rhs[2])<<16)) {
                case LE_STR3('i','o','c'): {
                    value_SetEnum(parent,samp_meng_FieldId_ioc); ret = true; break;
                }
                case LE_STR3('q','t','y'): {
                    value_SetEnum(parent,samp_meng_FieldId_qty); ret = true; break;
                }
            }
            break;
        }
        case 4: {
            switch (u64(algo::ReadLE32(rhs.elems))) {
                case LE_STR4('b','a','s','e'): {
                    value_SetEnum(parent,samp_meng_FieldId_base); ret = true; break;
                }
                case LE_STR4('t','e','x','t'): {
                    value_SetEnum(parent,samp_meng_FieldId_text); ret = true; break;
                }
                case LE_STR4('t','i','m','e'): {
                    value_SetEnum(parent,samp_meng_FieldId_time); ret = true; break;
                }
                case LE_STR4('t','y','p','e'): {
                    value_SetEnum(parent,samp_meng_FieldId_type); ret = true; break;
                }
                case LE_STR4('u','s','e','r'): {
                    value_SetEnum(parent,samp_meng_FieldId_user); ret = true; break;
                }
            }
            break;
        }
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('o','r','d','e','r'): {
                    value_SetEnum(parent,samp_meng_FieldId_order); ret = true; break;
                }
                case LE_STR5('p','r','i','c','e'): {
                    value_SetEnum(parent,samp_meng_FieldId_price); ret = true; break;
                }
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,samp_meng_FieldId_value); ret = true; break;
                }
            }
            break;
        }
        case 6: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(algo::ReadLE16(rhs.elems+4))<<32)) {
                case LE_STR6('l','e','n','g','t','h'): {
                    value_SetEnum(parent,samp_meng_FieldId_length); ret = true; break;
                }
                case LE_STR6('s','y','m','b','o','l'): {
                    value_SetEnum(parent,samp_meng_FieldId_symbol); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- samp_meng.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void samp_meng::value_SetStrptr(samp_meng::FieldId& parent, algo::strptr rhs, samp_meng_FieldIdEnum dflt) throw() {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- samp_meng.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_meng::value_ReadStrptrMaybe(samp_meng::FieldId& parent, algo::strptr rhs) throw() {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- samp_meng.FieldId..ReadStrptrMaybe
// Read fields of samp_meng::FieldId from an ascii string.
// The format of the string is the format of the samp_meng::FieldId's only field
bool samp_meng::FieldId_ReadStrptrMaybe(samp_meng::FieldId &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- samp_meng.FieldId..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.FieldId.String  printfmt:Raw
void samp_meng::FieldId_Print(samp_meng::FieldId& row, algo::cstring& str) throw() {
    samp_meng::value_Print(row, str);
}

// --- samp_meng.InCase.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* samp_meng::value_ToCstr(const samp_meng::InCase& parent) throw() {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case samp_meng_InCase_samp_meng_CancelReqMsg: ret = "samp_meng.CancelReqMsg";  break;
        case samp_meng_InCase_samp_meng_MassCancelReqMsg: ret = "samp_meng.MassCancelReqMsg";  break;
        case samp_meng_InCase_samp_meng_NewOrderReqMsg: ret = "samp_meng.NewOrderReqMsg";  break;
        case samp_meng_InCase_samp_meng_NewSymbolReqMsg: ret = "samp_meng.NewSymbolReqMsg";  break;
        case samp_meng_InCase_samp_meng_NewUserReqMsg: ret = "samp_meng.NewUserReqMsg";  break;
        case samp_meng_InCase_samp_meng_TextMsg: ret = "samp_meng.TextMsg";  break;
    }
    return ret;
}

// --- samp_meng.InCase.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void samp_meng::value_Print(const samp_meng::InCase& parent, algo::cstring &lhs) throw() {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- samp_meng.InCase.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool samp_meng::value_SetStrptrMaybe(samp_meng::InCase& parent, algo::strptr rhs) throw() {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 17: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.TextMsg",9)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_TextMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 22: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.CancelReqMsg",14)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_CancelReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 23: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewUserReqMsg",15)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_NewUserReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 24: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewOrderReqMsg",16)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_NewOrderReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 25: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewSymbolReqMsg",17)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_NewSymbolReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 26: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.MassCancelReqMsg",18)==0) { value_SetEnum(parent,samp_meng_InCase_samp_meng_MassCancelReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- samp_meng.InCase.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void samp_meng::value_SetStrptr(samp_meng::InCase& parent, algo::strptr rhs, samp_meng_InCaseEnum dflt) throw() {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- samp_meng.InCase.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_meng::value_ReadStrptrMaybe(samp_meng::InCase& parent, algo::strptr rhs) throw() {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- samp_meng.InCase..ReadStrptrMaybe
// Read fields of samp_meng::InCase from an ascii string.
// The format of the string is the format of the samp_meng::InCase's only field
bool samp_meng::InCase_ReadStrptrMaybe(samp_meng::InCase &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- samp_meng.MassCancelReqMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::MassCancelReqMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.MassCancelReqMsg..ReadFieldMaybe
bool samp_meng::MassCancelReqMsg_ReadFieldMaybe(samp_meng::MassCancelReqMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_user: {
            retval = u32_ReadStrptrMaybe(parent.user, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.MassCancelReqMsg..ReadStrptrMaybe
// Read fields of samp_meng::MassCancelReqMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::MassCancelReqMsg_ReadStrptrMaybe(samp_meng::MassCancelReqMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.MassCancelReqMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && MassCancelReqMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.MassCancelReqMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.MassCancelReqMsg.String  printfmt:Tuple
void samp_meng::MassCancelReqMsg_Print(samp_meng::MassCancelReqMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.MassCancelReqMsg";

    u32_Print(row.user, temp);
    PrintAttrSpaceReset(str,"user", temp);
}

// --- samp_meng.MsgHeader.type.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* samp_meng::type_ToCstr(const samp_meng::MsgHeader& parent) throw() {
    const char *ret = NULL;
    switch(type_GetEnum(parent)) {
        case samp_meng_MsgHeader_type_samp_meng_CancelOrderMsg: ret = "samp_meng.CancelOrderMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_CancelReqMsg: ret = "samp_meng.CancelReqMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_MassCancelReqMsg: ret = "samp_meng.MassCancelReqMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewOrderMsg: ret = "samp_meng.NewOrderMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewOrderReqMsg: ret = "samp_meng.NewOrderReqMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewSymbolMsg: ret = "samp_meng.NewSymbolMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewSymbolReqMsg: ret = "samp_meng.NewSymbolReqMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewUserMsg: ret = "samp_meng.NewUserMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_NewUserReqMsg: ret = "samp_meng.NewUserReqMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_OrderTradeMsg: ret = "samp_meng.OrderTradeMsg";  break;
        case samp_meng_MsgHeader_type_samp_meng_TextMsg: ret = "samp_meng.TextMsg";  break;
    }
    return ret;
}

// --- samp_meng.MsgHeader.type.Print
// Convert type to a string. First, attempt conversion to a known string.
// If no string matches, print type as a numeric value.
void samp_meng::type_Print(const samp_meng::MsgHeader& parent, algo::cstring &lhs) throw() {
    const char *strval = type_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.type;
    }
}

// --- samp_meng.MsgHeader.type.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool samp_meng::type_SetStrptrMaybe(samp_meng::MsgHeader& parent, algo::strptr rhs) throw() {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 17: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.TextMsg",9)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_TextMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 20: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewUserMsg",12)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewUserMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 21: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewOrderMsg",13)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewOrderMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 22: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.CancelReqMsg",14)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_CancelReqMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.NewSymbolMsg",14)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewSymbolMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 23: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewUserReqMsg",15)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewUserReqMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.OrderTradeMsg",15)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_OrderTradeMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 24: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.CancelOrderMsg",16)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_CancelOrderMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.NewOrderReqMsg",16)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewOrderReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 25: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewSymbolReqMsg",17)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_NewSymbolReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 26: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.MassCancelReqMsg",18)==0) { type_SetEnum(parent,samp_meng_MsgHeader_type_samp_meng_MassCancelReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- samp_meng.MsgHeader.type.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void samp_meng::type_SetStrptr(samp_meng::MsgHeader& parent, algo::strptr rhs, samp_meng_MsgHeader_type_Enum dflt) throw() {
    if (!type_SetStrptrMaybe(parent,rhs)) type_SetEnum(parent,dflt);
}

// --- samp_meng.MsgHeader.type.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_meng::type_ReadStrptrMaybe(samp_meng::MsgHeader& parent, algo::strptr rhs) throw() {
    bool retval = false;
    retval = type_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u8_ReadStrptrMaybe(parent.type,rhs);
    }
    return retval;
}

// --- samp_meng.MsgHeader..ReadFieldMaybe
bool samp_meng::MsgHeader_ReadFieldMaybe(samp_meng::MsgHeader& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_type: {
            retval = type_ReadStrptrMaybe(parent, strval);
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.MsgHeader..ReadStrptrMaybe
// Read fields of samp_meng::MsgHeader from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::MsgHeader_ReadStrptrMaybe(samp_meng::MsgHeader &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.MsgHeader");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && MsgHeader_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.MsgHeader..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.MsgHeader.String  printfmt:Tuple
void samp_meng::MsgHeader_Print(samp_meng::MsgHeader& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.MsgHeader";
    (void)row;//only to avoid -Wunused-parameter
}

// --- samp_meng.MsgHeaderMsgsCase.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* samp_meng::value_ToCstr(const samp_meng::MsgHeaderMsgsCase& parent) throw() {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case samp_meng_MsgHeaderMsgsCase_samp_meng_CancelOrderMsg: ret = "samp_meng.CancelOrderMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_CancelReqMsg: ret = "samp_meng.CancelReqMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_MassCancelReqMsg: ret = "samp_meng.MassCancelReqMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderMsg: ret = "samp_meng.NewOrderMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderReqMsg: ret = "samp_meng.NewOrderReqMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolMsg: ret = "samp_meng.NewSymbolMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolReqMsg: ret = "samp_meng.NewSymbolReqMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserMsg: ret = "samp_meng.NewUserMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserReqMsg: ret = "samp_meng.NewUserReqMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_OrderTradeMsg: ret = "samp_meng.OrderTradeMsg";  break;
        case samp_meng_MsgHeaderMsgsCase_samp_meng_TextMsg: ret = "samp_meng.TextMsg";  break;
    }
    return ret;
}

// --- samp_meng.MsgHeaderMsgsCase.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void samp_meng::value_Print(const samp_meng::MsgHeaderMsgsCase& parent, algo::cstring &lhs) throw() {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- samp_meng.MsgHeaderMsgsCase.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool samp_meng::value_SetStrptrMaybe(samp_meng::MsgHeaderMsgsCase& parent, algo::strptr rhs) throw() {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 17: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.TextMsg",9)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_TextMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 20: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewUserMsg",12)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 21: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewOrderMsg",13)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 22: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.CancelReqMsg",14)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_CancelReqMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.NewSymbolMsg",14)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 23: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewUserReqMsg",15)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserReqMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.OrderTradeMsg",15)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_OrderTradeMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 24: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.CancelOrderMsg",16)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_CancelOrderMsg); ret = true; break; }
                    if (memcmp(rhs.elems+8,"g.NewOrderReqMsg",16)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 25: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.NewSymbolReqMsg",17)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 26: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('s','a','m','p','_','m','e','n'): {
                    if (memcmp(rhs.elems+8,"g.MassCancelReqMsg",18)==0) { value_SetEnum(parent,samp_meng_MsgHeaderMsgsCase_samp_meng_MassCancelReqMsg); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- samp_meng.MsgHeaderMsgsCase.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void samp_meng::value_SetStrptr(samp_meng::MsgHeaderMsgsCase& parent, algo::strptr rhs, samp_meng_MsgHeaderMsgsCaseEnum dflt) throw() {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- samp_meng.MsgHeaderMsgsCase.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_meng::value_ReadStrptrMaybe(samp_meng::MsgHeaderMsgsCase& parent, algo::strptr rhs) throw() {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = u32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- samp_meng.MsgHeaderMsgsCase..ReadStrptrMaybe
// Read fields of samp_meng::MsgHeaderMsgsCase from an ascii string.
// The format of the string is the format of the samp_meng::MsgHeaderMsgsCase's only field
bool samp_meng::MsgHeaderMsgsCase_ReadStrptrMaybe(samp_meng::MsgHeaderMsgsCase &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- samp_meng.NewOrderMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewOrderMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewOrderMsg..ReadFieldMaybe
bool samp_meng::NewOrderMsg_ReadFieldMaybe(samp_meng::NewOrderMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_time: {
            retval = algo::UnTime_ReadStrptrMaybe(parent.time, strval);
            break;
        }
        case samp_meng_FieldId_price: {
            retval = samp_meng::I64Price8_ReadStrptrMaybe(parent.price, strval);
            break;
        }
        case samp_meng_FieldId_order: {
            retval = u64_ReadStrptrMaybe(parent.order, strval);
            break;
        }
        case samp_meng_FieldId_symbol: {
            retval = samp_meng::Symbol_ReadStrptrMaybe(parent.symbol, strval);
            break;
        }
        case samp_meng_FieldId_qty: {
            retval = u32_ReadStrptrMaybe(parent.qty, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewOrderMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewOrderMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewOrderMsg_ReadStrptrMaybe(samp_meng::NewOrderMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewOrderMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewOrderMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewOrderMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewOrderMsg.String  printfmt:Tuple
void samp_meng::NewOrderMsg_Print(samp_meng::NewOrderMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewOrderMsg";

    algo::UnTime_Print(row.time, temp);
    PrintAttrSpaceReset(str,"time", temp);

    samp_meng::I64Price8_Print(row.price, temp);
    PrintAttrSpaceReset(str,"price", temp);

    u64_Print(row.order, temp);
    PrintAttrSpaceReset(str,"order", temp);

    samp_meng::Symbol_Print(row.symbol, temp);
    PrintAttrSpaceReset(str,"symbol", temp);

    u32_Print(row.qty, temp);
    PrintAttrSpaceReset(str,"qty", temp);
}

// --- samp_meng.NewOrderReqMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewOrderReqMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewOrderReqMsg..ReadFieldMaybe
bool samp_meng::NewOrderReqMsg_ReadFieldMaybe(samp_meng::NewOrderReqMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_ioc: {
            retval = bool_ReadStrptrMaybe(parent.ioc, strval);
            break;
        }
        case samp_meng_FieldId_qty: {
            retval = i32_ReadStrptrMaybe(parent.qty, strval);
            break;
        }
        case samp_meng_FieldId_price: {
            retval = samp_meng::I64Price8_ReadStrptrMaybe(parent.price, strval);
            break;
        }
        case samp_meng_FieldId_symbol: {
            retval = samp_meng::Symbol_ReadStrptrMaybe(parent.symbol, strval);
            break;
        }
        case samp_meng_FieldId_user: {
            retval = u32_ReadStrptrMaybe(parent.user, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewOrderReqMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewOrderReqMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewOrderReqMsg_ReadStrptrMaybe(samp_meng::NewOrderReqMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewOrderReqMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewOrderReqMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewOrderReqMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewOrderReqMsg.String  printfmt:Tuple
void samp_meng::NewOrderReqMsg_Print(samp_meng::NewOrderReqMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewOrderReqMsg";

    bool_Print(row.ioc, temp);
    PrintAttrSpaceReset(str,"ioc", temp);

    i32_Print(row.qty, temp);
    PrintAttrSpaceReset(str,"qty", temp);

    samp_meng::I64Price8_Print(row.price, temp);
    PrintAttrSpaceReset(str,"price", temp);

    samp_meng::Symbol_Print(row.symbol, temp);
    PrintAttrSpaceReset(str,"symbol", temp);

    u32_Print(row.user, temp);
    PrintAttrSpaceReset(str,"user", temp);
}

// --- samp_meng.NewSymbolMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewSymbolMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewSymbolMsg..ReadFieldMaybe
bool samp_meng::NewSymbolMsg_ReadFieldMaybe(samp_meng::NewSymbolMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_symbol: {
            retval = samp_meng::Symbol_ReadStrptrMaybe(parent.symbol, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewSymbolMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewSymbolMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewSymbolMsg_ReadStrptrMaybe(samp_meng::NewSymbolMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewSymbolMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewSymbolMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewSymbolMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewSymbolMsg.String  printfmt:Tuple
void samp_meng::NewSymbolMsg_Print(samp_meng::NewSymbolMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewSymbolMsg";

    samp_meng::Symbol_Print(row.symbol, temp);
    PrintAttrSpaceReset(str,"symbol", temp);
}

// --- samp_meng.NewSymbolReqMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewSymbolReqMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewSymbolReqMsg..ReadFieldMaybe
bool samp_meng::NewSymbolReqMsg_ReadFieldMaybe(samp_meng::NewSymbolReqMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_symbol: {
            retval = samp_meng::Symbol_ReadStrptrMaybe(parent.symbol, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewSymbolReqMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewSymbolReqMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewSymbolReqMsg_ReadStrptrMaybe(samp_meng::NewSymbolReqMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewSymbolReqMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewSymbolReqMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewSymbolReqMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewSymbolReqMsg.String  printfmt:Tuple
void samp_meng::NewSymbolReqMsg_Print(samp_meng::NewSymbolReqMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewSymbolReqMsg";

    samp_meng::Symbol_Print(row.symbol, temp);
    PrintAttrSpaceReset(str,"symbol", temp);
}

// --- samp_meng.NewUserMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewUserMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewUserMsg..ReadFieldMaybe
bool samp_meng::NewUserMsg_ReadFieldMaybe(samp_meng::NewUserMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_user: {
            retval = u32_ReadStrptrMaybe(parent.user, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewUserMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewUserMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewUserMsg_ReadStrptrMaybe(samp_meng::NewUserMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewUserMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewUserMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewUserMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewUserMsg.String  printfmt:Tuple
void samp_meng::NewUserMsg_Print(samp_meng::NewUserMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewUserMsg";

    u32_Print(row.user, temp);
    PrintAttrSpaceReset(str,"user", temp);
}

// --- samp_meng.NewUserReqMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::NewUserReqMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.NewUserReqMsg..ReadFieldMaybe
bool samp_meng::NewUserReqMsg_ReadFieldMaybe(samp_meng::NewUserReqMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_user: {
            retval = u32_ReadStrptrMaybe(parent.user, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.NewUserReqMsg..ReadStrptrMaybe
// Read fields of samp_meng::NewUserReqMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::NewUserReqMsg_ReadStrptrMaybe(samp_meng::NewUserReqMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.NewUserReqMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && NewUserReqMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.NewUserReqMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.NewUserReqMsg.String  printfmt:Tuple
void samp_meng::NewUserReqMsg_Print(samp_meng::NewUserReqMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.NewUserReqMsg";

    u32_Print(row.user, temp);
    PrintAttrSpaceReset(str,"user", temp);
}

// --- samp_meng.OrderTradeMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::OrderTradeMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.OrderTradeMsg..ReadFieldMaybe
bool samp_meng::OrderTradeMsg_ReadFieldMaybe(samp_meng::OrderTradeMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,field);
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_order: {
            retval = u64_ReadStrptrMaybe(parent.order, strval);
            break;
        }
        case samp_meng_FieldId_qty: {
            retval = u32_ReadStrptrMaybe(parent.qty, strval);
            break;
        }
        case samp_meng_FieldId_price: {
            retval = samp_meng::I64Price8_ReadStrptrMaybe(parent.price, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.OrderTradeMsg..ReadStrptrMaybe
// Read fields of samp_meng::OrderTradeMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::OrderTradeMsg_ReadStrptrMaybe(samp_meng::OrderTradeMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.OrderTradeMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && OrderTradeMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.OrderTradeMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.OrderTradeMsg.String  printfmt:Tuple
void samp_meng::OrderTradeMsg_Print(samp_meng::OrderTradeMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.OrderTradeMsg";

    u64_Print(row.order, temp);
    PrintAttrSpaceReset(str,"order", temp);

    u32_Print(row.qty, temp);
    PrintAttrSpaceReset(str,"qty", temp);

    samp_meng::I64Price8_Print(row.price, temp);
    PrintAttrSpaceReset(str,"price", temp);
}

// --- samp_meng.TextMsg.base.CopyOut
// Copy fields out of row
void samp_meng::parent_CopyOut(samp_meng::TextMsg &row, samp_meng::MsgHeader &out) throw() {
    // type: field value is computed
    // length: field value is computed
    (void)row;//only to avoid -Wunused-parameter
    (void)out;//only to avoid -Wunused-parameter
}

// --- samp_meng.TextMsg.text.Getary
// Access var-length portion as an aryptr. Length is determined from one of the fields.
algo::aryptr<char> samp_meng::text_Getary(samp_meng::TextMsg& parent) throw() {
    return algo::aryptr<char>(text_Addr(parent), text_N(parent));
}

// --- samp_meng.TextMsg.text.Addr
char* samp_meng::text_Addr(samp_meng::TextMsg& parent) {
    return (char*)((u8*)&parent + sizeof(samp_meng::TextMsg)); // address of varlen portion
}

// --- samp_meng.TextMsg.text.ReadStrptrMaybe
// Convert string to field. Return success value
bool samp_meng::text_ReadStrptrMaybe(samp_meng::TextMsg& parent, algo::strptr in_str) throw() {
    bool retval = true;
    if (algo_lib::_db.varlenbuf) {
        ary_Addary(*algo_lib::_db.varlenbuf, strptr_ToMemptr(in_str));
    }
    (void)parent;//only to avoid -Wunused-parameter
    return retval;
}

// --- samp_meng.TextMsg.text.Print
// Convert text to a string.
// Array is printed as a regular string.
void samp_meng::text_Print(samp_meng::TextMsg& parent, algo::cstring &rhs) throw() {
    rhs << text_Getary(parent);
}

// --- samp_meng.TextMsg..ReadFieldMaybe
bool samp_meng::TextMsg_ReadFieldMaybe(samp_meng::TextMsg& parent, algo::strptr field, algo::strptr strval) throw() {
    bool retval = true;
    samp_meng::FieldId field_id;
    (void)value_SetStrptrMaybe(field_id,algo::Pathcomp(field, ".LL"));
    switch(field_id) {
        case samp_meng_FieldId_base: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_type: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_length: {
            retval = false;
            break;
        }
        case samp_meng_FieldId_text: {
            retval = text_ReadStrptrMaybe(parent, strval);
            break;
        }
        default: break;
    }
    if (!retval) {
        algo_lib::AppendErrtext("attr",field);
    }
    return retval;
}

// --- samp_meng.TextMsg..ReadStrptrMaybe
// Any varlen fields are returned in algo_lib::_db.varlenbuf if set
// Read fields of samp_meng::TextMsg from an ascii string.
// The format of the string is an ssim Tuple
bool samp_meng::TextMsg_ReadStrptrMaybe(samp_meng::TextMsg &parent, algo::strptr in_str) throw() {
    bool retval = true;
    retval = algo::StripTypeTag(in_str, "samp_meng.TextMsg");
    ind_beg(algo::Attr_curs, attr, in_str) {
        retval = retval && TextMsg_ReadFieldMaybe(parent, attr.name, attr.value);
    }ind_end;
    return retval;
}

// --- samp_meng.TextMsg..Print
// print string representation of ROW to string STR
// cfmt:samp_meng.TextMsg.String  printfmt:Tuple
void samp_meng::TextMsg_Print(samp_meng::TextMsg& row, algo::cstring& str) throw() {
    algo::tempstr temp;
    str << "samp_meng.TextMsg";

    samp_meng::text_Print(row, temp);
    PrintAttrSpaceReset(str,"text", temp);
}

// --- samp_meng...SizeCheck
inline static void samp_meng::SizeCheck() {
}

// --- samp_meng...StaticCheck
void samp_meng::StaticCheck() {
    algo_assert(_offset_of(samp_meng::CancelOrderMsg, order) + sizeof(((samp_meng::CancelOrderMsg*)0)->order) == sizeof(samp_meng::CancelOrderMsg));
    algo_assert(_offset_of(samp_meng::CancelReqMsg, order) + sizeof(((samp_meng::CancelReqMsg*)0)->order) == sizeof(samp_meng::CancelReqMsg));
    algo_assert(_offset_of(samp_meng::I64Price8, value) + sizeof(((samp_meng::I64Price8*)0)->value) == sizeof(samp_meng::I64Price8));
    algo_assert(_offset_of(samp_meng::Symbol, symbol) + sizeof(((samp_meng::Symbol*)0)->symbol) == sizeof(samp_meng::Symbol));
    algo_assert(_offset_of(samp_meng::FieldId, value) + sizeof(((samp_meng::FieldId*)0)->value) == sizeof(samp_meng::FieldId));
    algo_assert(_offset_of(samp_meng::InCase, value) + sizeof(((samp_meng::InCase*)0)->value) == sizeof(samp_meng::InCase));
    algo_assert(_offset_of(samp_meng::MassCancelReqMsg, user) + sizeof(((samp_meng::MassCancelReqMsg*)0)->user) == sizeof(samp_meng::MassCancelReqMsg));
    algo_assert(_offset_of(samp_meng::MsgHeader, length) + sizeof(((samp_meng::MsgHeader*)0)->length) == sizeof(samp_meng::MsgHeader));
    algo_assert(_offset_of(samp_meng::MsgHeaderMsgsCase, value) + sizeof(((samp_meng::MsgHeaderMsgsCase*)0)->value) == sizeof(samp_meng::MsgHeaderMsgsCase));
    algo_assert(_offset_of(samp_meng::MsgHeader_curs, msglen) + sizeof(((samp_meng::MsgHeader_curs*)0)->msglen) == sizeof(samp_meng::MsgHeader_curs));
    algo_assert(_offset_of(samp_meng::NewOrderMsg, qty) + sizeof(((samp_meng::NewOrderMsg*)0)->qty) == sizeof(samp_meng::NewOrderMsg));
    algo_assert(_offset_of(samp_meng::NewOrderReqMsg, user) + sizeof(((samp_meng::NewOrderReqMsg*)0)->user) == sizeof(samp_meng::NewOrderReqMsg));
    algo_assert(_offset_of(samp_meng::NewSymbolMsg, symbol) + sizeof(((samp_meng::NewSymbolMsg*)0)->symbol) == sizeof(samp_meng::NewSymbolMsg));
    algo_assert(_offset_of(samp_meng::NewSymbolReqMsg, symbol) + sizeof(((samp_meng::NewSymbolReqMsg*)0)->symbol) == sizeof(samp_meng::NewSymbolReqMsg));
    algo_assert(_offset_of(samp_meng::NewUserMsg, user) + sizeof(((samp_meng::NewUserMsg*)0)->user) == sizeof(samp_meng::NewUserMsg));
    algo_assert(_offset_of(samp_meng::NewUserReqMsg, user) + sizeof(((samp_meng::NewUserReqMsg*)0)->user) == sizeof(samp_meng::NewUserReqMsg));
    algo_assert(_offset_of(samp_meng::OrderTradeMsg, price) + sizeof(((samp_meng::OrderTradeMsg*)0)->price) == sizeof(samp_meng::OrderTradeMsg));
}

// --- samp_meng.In..DispatchRaw
int samp_meng::InDispatchRaw(samp_meng::InCase type, u8 *msg, u32 len) {
    int ret = 0;
    switch(type) {
        case 11: if (sizeof(samp_meng::CancelReqMsg) <= len) {
            samp_meng::In_CancelReqMsg((samp_meng::CancelReqMsg&)*msg);
            ret = (int)sizeof(samp_meng::CancelReqMsg);
        } break;
        case 12: if (sizeof(samp_meng::MassCancelReqMsg) <= len) {
            samp_meng::In_MassCancelReqMsg((samp_meng::MassCancelReqMsg&)*msg);
            ret = (int)sizeof(samp_meng::MassCancelReqMsg);
        } break;
        case 10: if (sizeof(samp_meng::NewOrderReqMsg) <= len) {
            samp_meng::In_NewOrderReqMsg((samp_meng::NewOrderReqMsg&)*msg);
            ret = (int)sizeof(samp_meng::NewOrderReqMsg);
        } break;
        case 13: if (sizeof(samp_meng::NewSymbolReqMsg) <= len) {
            samp_meng::In_NewSymbolReqMsg((samp_meng::NewSymbolReqMsg&)*msg);
            ret = (int)sizeof(samp_meng::NewSymbolReqMsg);
        } break;
        case 14: if (sizeof(samp_meng::NewUserReqMsg) <= len) {
            samp_meng::In_NewUserReqMsg((samp_meng::NewUserReqMsg&)*msg);
            ret = (int)sizeof(samp_meng::NewUserReqMsg);
        } break;
        case 7: if (sizeof(samp_meng::TextMsg) <= len) {
            samp_meng::In_TextMsg((samp_meng::TextMsg&)*msg);
            ret = (int)sizeof(samp_meng::TextMsg);
        } break;
        default:
        break;
    }
    return ret;
}

// --- samp_meng.In..Dispatch
int samp_meng::InDispatch(samp_meng::MsgHeader& msg) {
    return InDispatchRaw(samp_meng::InCase(msg.type), (u8*)&msg, i32(msg.length));
}

// --- samp_meng.In..Dispatch2
// void rettype useful for hooks
void samp_meng::vInDispatch(samp_meng::MsgHeader& msg) {
    InDispatch(msg);
}

// --- samp_meng.In..Print
// Print message to STR. If message is too short for MSG_LEN, print nothing.
// MSG.LENGTH must have already been validated against msg_len.
// This function will additionally validate that sizeof(Msg) <= msg_len
bool samp_meng::In_Print(algo::cstring &str, samp_meng::MsgHeader &msg, u32 msg_len) {
    switch(msg.type) {
        case 11: {
            if (sizeof(samp_meng::CancelReqMsg) > msg_len) { return false; }
            CancelReqMsg_Print((samp_meng::CancelReqMsg&)(msg), str);
            return true;
        }
        case 12: {
            if (sizeof(samp_meng::MassCancelReqMsg) > msg_len) { return false; }
            MassCancelReqMsg_Print((samp_meng::MassCancelReqMsg&)(msg), str);
            return true;
        }
        case 10: {
            if (sizeof(samp_meng::NewOrderReqMsg) > msg_len) { return false; }
            NewOrderReqMsg_Print((samp_meng::NewOrderReqMsg&)(msg), str);
            return true;
        }
        case 13: {
            if (sizeof(samp_meng::NewSymbolReqMsg) > msg_len) { return false; }
            NewSymbolReqMsg_Print((samp_meng::NewSymbolReqMsg&)(msg), str);
            return true;
        }
        case 14: {
            if (sizeof(samp_meng::NewUserReqMsg) > msg_len) { return false; }
            NewUserReqMsg_Print((samp_meng::NewUserReqMsg&)(msg), str);
            return true;
        }
        case 7: {
            if (sizeof(samp_meng::TextMsg) > msg_len) { return false; }
            TextMsg_Print((samp_meng::TextMsg&)(msg), str);
            return true;
        }
        default:

        return false;
    }
}

// --- samp_meng.MsgHeaderMsgs..Print
// Print message to STR. If message is too short for MSG_LEN, print nothing.
// MSG.LENGTH must have already been validated against msg_len.
// This function will additionally validate that sizeof(Msg) <= msg_len
bool samp_meng::MsgHeaderMsgs_Print(algo::cstring &str, samp_meng::MsgHeader &msg, u32 msg_len) {
    switch(msg.type) {
        case 3: {
            if (sizeof(samp_meng::CancelOrderMsg) > msg_len) { return false; }
            CancelOrderMsg_Print((samp_meng::CancelOrderMsg&)(msg), str);
            return true;
        }
        case 11: {
            if (sizeof(samp_meng::CancelReqMsg) > msg_len) { return false; }
            CancelReqMsg_Print((samp_meng::CancelReqMsg&)(msg), str);
            return true;
        }
        case 12: {
            if (sizeof(samp_meng::MassCancelReqMsg) > msg_len) { return false; }
            MassCancelReqMsg_Print((samp_meng::MassCancelReqMsg&)(msg), str);
            return true;
        }
        case 2: {
            if (sizeof(samp_meng::NewOrderMsg) > msg_len) { return false; }
            NewOrderMsg_Print((samp_meng::NewOrderMsg&)(msg), str);
            return true;
        }
        case 10: {
            if (sizeof(samp_meng::NewOrderReqMsg) > msg_len) { return false; }
            NewOrderReqMsg_Print((samp_meng::NewOrderReqMsg&)(msg), str);
            return true;
        }
        case 5: {
            if (sizeof(samp_meng::NewSymbolMsg) > msg_len) { return false; }
            NewSymbolMsg_Print((samp_meng::NewSymbolMsg&)(msg), str);
            return true;
        }
        case 13: {
            if (sizeof(samp_meng::NewSymbolReqMsg) > msg_len) { return false; }
            NewSymbolReqMsg_Print((samp_meng::NewSymbolReqMsg&)(msg), str);
            return true;
        }
        case 6: {
            if (sizeof(samp_meng::NewUserMsg) > msg_len) { return false; }
            NewUserMsg_Print((samp_meng::NewUserMsg&)(msg), str);
            return true;
        }
        case 14: {
            if (sizeof(samp_meng::NewUserReqMsg) > msg_len) { return false; }
            NewUserReqMsg_Print((samp_meng::NewUserReqMsg&)(msg), str);
            return true;
        }
        case 4: {
            if (sizeof(samp_meng::OrderTradeMsg) > msg_len) { return false; }
            OrderTradeMsg_Print((samp_meng::OrderTradeMsg&)(msg), str);
            return true;
        }
        case 7: {
            if (sizeof(samp_meng::TextMsg) > msg_len) { return false; }
            TextMsg_Print((samp_meng::TextMsg&)(msg), str);
            return true;
        }
        default:

        return false;
    }
}

// --- samp_meng.In..ReadStrptr
// Parse ascii representation of message into binary, appending new data to BUF.
samp_meng::InCase samp_meng::In_ReadStrptr(algo::strptr str, algo::ByteAry &buf) {
    bool ok = false;
    tempstr msgtype_str;
    algo::StringIter iter(str);
    cstring_ReadCmdarg(msgtype_str, iter, false); // read first word
    samp_meng::InCase msgtype;
    value_SetStrptrMaybe(msgtype, msgtype_str); // map string -> enum
    switch (value_GetEnum(msgtype)) { // what message is it?
        case samp_meng_InCase_samp_meng_CancelReqMsg: {
            int len = sizeof(samp_meng::CancelReqMsg);
            samp_meng::CancelReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::CancelReqMsg; // default values
            ok = CancelReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::CancelReqMsg case

        case samp_meng_InCase_samp_meng_MassCancelReqMsg: {
            int len = sizeof(samp_meng::MassCancelReqMsg);
            samp_meng::MassCancelReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::MassCancelReqMsg; // default values
            ok = MassCancelReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::MassCancelReqMsg case

        case samp_meng_InCase_samp_meng_NewOrderReqMsg: {
            int len = sizeof(samp_meng::NewOrderReqMsg);
            samp_meng::NewOrderReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewOrderReqMsg; // default values
            ok = NewOrderReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewOrderReqMsg case

        case samp_meng_InCase_samp_meng_NewSymbolReqMsg: {
            int len = sizeof(samp_meng::NewSymbolReqMsg);
            samp_meng::NewSymbolReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewSymbolReqMsg; // default values
            ok = NewSymbolReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewSymbolReqMsg case

        case samp_meng_InCase_samp_meng_NewUserReqMsg: {
            int len = sizeof(samp_meng::NewUserReqMsg);
            samp_meng::NewUserReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewUserReqMsg; // default values
            ok = NewUserReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewUserReqMsg case

        case samp_meng_InCase_samp_meng_TextMsg: {
            int len = sizeof(samp_meng::TextMsg);
            samp_meng::TextMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::TextMsg; // default values
            algo::ByteAry varlenbuf;
            algo::ByteAry *varlenbuf_save = algo_lib::_db.varlenbuf;
            algo_lib::_db.varlenbuf = &varlenbuf;
            ok = TextMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
            len += ary_N(varlenbuf);
            ctype->length = u8(len);
            ary_Addary(buf, ary_Getary(varlenbuf));
            algo_lib::_db.varlenbuf = varlenbuf_save;
        } break; // samp_meng::TextMsg case

        default: break;
    }
    return ok ? msgtype : samp_meng::InCase();
}

// --- samp_meng.In..ReadStrptrMaybe
// Parse ascii representation of message into binary, appending new data to BUF.
bool samp_meng::In_ReadStrptrMaybe(algo::strptr str, algo::ByteAry &buf) {
    samp_meng::InCase msgtype = In_ReadStrptr(str,buf);
    return !(msgtype == samp_meng::InCase());
}

// --- samp_meng.MsgHeaderMsgs..ReadStrptr
// Parse ascii representation of message into binary, appending new data to BUF.
samp_meng::MsgHeaderMsgsCase samp_meng::MsgHeaderMsgs_ReadStrptr(algo::strptr str, algo::ByteAry &buf) {
    bool ok = false;
    tempstr msgtype_str;
    algo::StringIter iter(str);
    cstring_ReadCmdarg(msgtype_str, iter, false); // read first word
    samp_meng::MsgHeaderMsgsCase msgtype;
    value_SetStrptrMaybe(msgtype, msgtype_str); // map string -> enum
    switch (value_GetEnum(msgtype)) { // what message is it?
        case samp_meng_MsgHeaderMsgsCase_samp_meng_CancelOrderMsg: {
            int len = sizeof(samp_meng::CancelOrderMsg);
            samp_meng::CancelOrderMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::CancelOrderMsg; // default values
            ok = CancelOrderMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::CancelOrderMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_CancelReqMsg: {
            int len = sizeof(samp_meng::CancelReqMsg);
            samp_meng::CancelReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::CancelReqMsg; // default values
            ok = CancelReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::CancelReqMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_MassCancelReqMsg: {
            int len = sizeof(samp_meng::MassCancelReqMsg);
            samp_meng::MassCancelReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::MassCancelReqMsg; // default values
            ok = MassCancelReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::MassCancelReqMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderMsg: {
            int len = sizeof(samp_meng::NewOrderMsg);
            samp_meng::NewOrderMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewOrderMsg; // default values
            ok = NewOrderMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewOrderMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewOrderReqMsg: {
            int len = sizeof(samp_meng::NewOrderReqMsg);
            samp_meng::NewOrderReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewOrderReqMsg; // default values
            ok = NewOrderReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewOrderReqMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolMsg: {
            int len = sizeof(samp_meng::NewSymbolMsg);
            samp_meng::NewSymbolMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewSymbolMsg; // default values
            ok = NewSymbolMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewSymbolMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewSymbolReqMsg: {
            int len = sizeof(samp_meng::NewSymbolReqMsg);
            samp_meng::NewSymbolReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewSymbolReqMsg; // default values
            ok = NewSymbolReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewSymbolReqMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserMsg: {
            int len = sizeof(samp_meng::NewUserMsg);
            samp_meng::NewUserMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewUserMsg; // default values
            ok = NewUserMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewUserMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_NewUserReqMsg: {
            int len = sizeof(samp_meng::NewUserReqMsg);
            samp_meng::NewUserReqMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::NewUserReqMsg; // default values
            ok = NewUserReqMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::NewUserReqMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_OrderTradeMsg: {
            int len = sizeof(samp_meng::OrderTradeMsg);
            samp_meng::OrderTradeMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::OrderTradeMsg; // default values
            ok = OrderTradeMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
        } break; // samp_meng::OrderTradeMsg case

        case samp_meng_MsgHeaderMsgsCase_samp_meng_TextMsg: {
            int len = sizeof(samp_meng::TextMsg);
            samp_meng::TextMsg *ctype = new(ary_AllocN(buf, len).elems) samp_meng::TextMsg; // default values
            algo::ByteAry varlenbuf;
            algo::ByteAry *varlenbuf_save = algo_lib::_db.varlenbuf;
            algo_lib::_db.varlenbuf = &varlenbuf;
            ok = TextMsg_ReadStrptrMaybe(*ctype, str); // now read attributes
            len += ary_N(varlenbuf);
            ctype->length = u8(len);
            ary_Addary(buf, ary_Getary(varlenbuf));
            algo_lib::_db.varlenbuf = varlenbuf_save;
        } break; // samp_meng::TextMsg case

        default: break;
    }
    return ok ? msgtype : samp_meng::MsgHeaderMsgsCase();
}

// --- samp_meng.MsgHeaderMsgs..ReadStrptrMaybe
// Parse ascii representation of message into binary, appending new data to BUF.
bool samp_meng::MsgHeaderMsgs_ReadStrptrMaybe(algo::strptr str, algo::ByteAry &buf) {
    samp_meng::MsgHeaderMsgsCase msgtype = MsgHeaderMsgs_ReadStrptr(str,buf);
    return !(msgtype == samp_meng::MsgHeaderMsgsCase());
}

// --- samp_meng...main
int main(int argc, char **argv) {
    try {
        algo_lib::FDb_Init();
        lib_json::FDb_Init();
        samp_meng::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        samp_meng::ReadArgv(); // dmmeta.main:samp_meng
        samp_meng::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("samp_meng.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        samp_meng::FDb_Uninit();
        lib_json::FDb_Uninit();
        algo_lib::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- samp_meng...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
