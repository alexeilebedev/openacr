//
// cpp/gen/atf_fuzz_gen.cpp
// Generated by AMC
//
// (C) AlgoEngineering LLC 2008-2013
// (C) NYSE | Intercontinental Exchange 2013-2016
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/atf_fuzz_gen.h"
#include "include/gen/atf_fuzz_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/atfdb_gen.h"
#include "include/gen/atfdb_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
atf_fuzz::FDb   atf_fuzz::_db;    // dependency found via dev.targdep

namespace atf_fuzz {
const char *atf_fuzz_help =
"Usage: atf_fuzz [options]\n"
"    -reprofile  string  File where repros are stored. default: \"temp/atf_fuzz.repro\"\n"
"    [target]    string  Target to fuzz\n"
"    [args]      string  Additional arguments to target\n"
"    -inputfile  string  File with input tuples.\n"
"    -fuzzstrat  string  Strategy to choose. default: \"%\"\n"
"    -in         string  Input directory or filename, - for stdin. default: \"data\"\n"
"    -seed       int     Random seed. default: 0\n"
"    -testprob   double  Run each case with this probability. default: 1\n"
"    -verbose            Enable verbose mode\n"
"    -debug              Enable debug mode\n"
"    -version            Show version information\n"
"    -sig                Print SHA1 signatures for dispatches\n"
"    -help               Print this screen and exit\n"
;


const char *atf_fuzz_syntax =
"-reprofile:string=\"temp/atf_fuzz.repro\"\n"
" [target]:string=\n"
" [args]:string=\n"
" -inputfile:string=\n"
" -fuzzstrat:string=\"%\"\n"
" -in:string=\"data\"\n"
" -seed:int=0\n"
" -testprob:double=1\n"
;
} // namespace atf_fuzz
namespace atf_fuzz { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    static void          InitReflection();
    static void          fuzzstrat_LoadStatic() __attribute__((nothrow));
    static bool          target_InputMaybe(dev::Target &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    static i32           trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    static void          SizeCheck();
} // gen:ns_print_proto

// --- atf_fuzz.trace..Print
// print string representation of atf_fuzz::trace to string LHS, no header -- cprint:atf_fuzz.trace.String
void atf_fuzz::trace_Print(atf_fuzz::trace & row, algo::cstring &str) {
    algo::tempstr temp;
    str << "atf_fuzz.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- atf_fuzz.FDb._db.MainArgs
// Main function
void atf_fuzz::MainArgs(int argc, char **argv) {
    Argtuple argtuple;
    Argtuple_ReadArgv(argtuple, argc,argv,atf_fuzz_syntax, atf_fuzz_help);
    vrfy(atf_fuzz_ReadTupleMaybe(atf_fuzz::_db.cmdline, argtuple.tuple),"where:read_cmdline");
    vrfy(atf_fuzz::LoadTuplesMaybe(atf_fuzz::_db.cmdline.in)
    ,tempstr()<<"where:load_input  "<<algo_lib::DetachBadTags());
    atf_fuzz::Main(); // call through to user-defined main
}

// --- atf_fuzz.FDb._db.MainLoop
// Main loop.
void atf_fuzz::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        atf_fuzz::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- atf_fuzz.FDb._db.Step
// Main step
void atf_fuzz::Step() {
}

// --- atf_fuzz.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void atf_fuzz::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("atf_fuzz", atf_fuzz::InsertStrptrMaybe, NULL, atf_fuzz::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "atf_fuzz.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(atf_fuzz::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)atf_fuzz::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'atf_fuzz.Input'  signature:'faac859591b12f666637e0c9994a824aebdc5df0'");
}

// --- atf_fuzz.FDb._db.StaticCheck
void atf_fuzz::StaticCheck() {
    algo_assert(sizeof(atf_fuzz::fuzzstrat_step_hook) == 8); // csize:atf_fuzz.fuzzstrat_step_hook
    algo_assert(_offset_of(atf_fuzz::FieldId, value) + sizeof(((atf_fuzz::FieldId*)0)->value) == sizeof(atf_fuzz::FieldId));
}

// --- atf_fuzz.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool atf_fuzz::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    atf_fuzz::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case atf_fuzz_TableId_dev_Target: { // finput:atf_fuzz.FDb.target
            dev::Target elem;
            retval = dev::Target_ReadStrptrMaybe(elem, str);
            retval = retval && target_InputMaybe(elem);
            break;
        }
        default:
        retval = algo_lib::InsertStrptrMaybe(str);
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- atf_fuzz.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool atf_fuzz::LoadTuplesMaybe(algo::strptr root) {
    bool retval = true;
    static const char *ssimfiles[] = {
        "dev.target"
        , NULL};
        retval = algo_lib::DoLoadTuples(root, atf_fuzz::InsertStrptrMaybe, ssimfiles, true);
        return retval;
}

// --- atf_fuzz.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool atf_fuzz::LoadSsimfileMaybe(algo::strptr fname) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = algo_lib::LoadTuplesFile(fname, atf_fuzz::InsertStrptrMaybe, true);
    }
    return retval;
}

// --- atf_fuzz.FDb._db.Steps
// Calls Step function of dependencies
void atf_fuzz::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- atf_fuzz.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_fuzz::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- atf_fuzz.FDb.fuzzstrat.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_fuzz::FFuzzstrat& atf_fuzz::fuzzstrat_Alloc() {
    atf_fuzz::FFuzzstrat* row = fuzzstrat_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_fuzz.out_of_mem  field:atf_fuzz.FDb.fuzzstrat  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_fuzz.FDb.fuzzstrat.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_fuzz::FFuzzstrat* atf_fuzz::fuzzstrat_AllocMaybe() {
    atf_fuzz::FFuzzstrat *row = (atf_fuzz::FFuzzstrat*)fuzzstrat_AllocMem();
    if (row) {
        new (row) atf_fuzz::FFuzzstrat; // call constructor
    }
    return row;
}

// --- atf_fuzz.FDb.fuzzstrat.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_fuzz::FFuzzstrat* atf_fuzz::fuzzstrat_InsertMaybe(const atfdb::Fuzzstrat &value) {
    atf_fuzz::FFuzzstrat *row = &fuzzstrat_Alloc(); // if out of memory, process dies. if input error, return NULL.
    fuzzstrat_CopyIn(*row,const_cast<atfdb::Fuzzstrat&>(value));
    bool ok = fuzzstrat_XrefMaybe(*row); // this may return false
    if (!ok) {
        fuzzstrat_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_fuzz.FDb.fuzzstrat.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_fuzz::fuzzstrat_AllocMem() {
    u64 new_nelems     = _db.fuzzstrat_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_fuzz::FFuzzstrat*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.fuzzstrat_lary[bsr];
        if (!lev) {
            lev=(atf_fuzz::FFuzzstrat*)algo_lib::malloc_AllocMem(sizeof(atf_fuzz::FFuzzstrat) * (u64(1)<<bsr));
            _db.fuzzstrat_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.fuzzstrat_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_fuzz.FDb.fuzzstrat.RemoveAll
// Remove all elements from Lary
void atf_fuzz::fuzzstrat_RemoveAll() {
    for (u64 n = _db.fuzzstrat_n; n>0; ) {
        n--;
        fuzzstrat_qFind(u64(n)).~FFuzzstrat(); // destroy last element
        _db.fuzzstrat_n = i32(n);
    }
}

// --- atf_fuzz.FDb.fuzzstrat.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_fuzz::fuzzstrat_RemoveLast() {
    u64 n = _db.fuzzstrat_n;
    if (n > 0) {
        n -= 1;
        fuzzstrat_qFind(u64(n)).~FFuzzstrat();
        _db.fuzzstrat_n = i32(n);
    }
}

// --- atf_fuzz.FDb.fuzzstrat.LoadStatic
static void atf_fuzz::fuzzstrat_LoadStatic() {
    static struct _t {
        const char *s;
        void (*step)();
    } data[] = {
        { "atfdb.fuzzstrat  fuzzstrat:skip_inputs  comment:\"Run target in sandbox with various missing inputs\"", atf_fuzz::fuzzstrat_skip_inputs }
        ,{NULL, NULL}
    };
    (void)data;
    atfdb::Fuzzstrat fuzzstrat;
    for (int i=0; data[i].s; i++) {
        (void)atfdb::Fuzzstrat_ReadStrptrMaybe(fuzzstrat, algo::strptr(data[i].s));
        atf_fuzz::FFuzzstrat *elem = fuzzstrat_InsertMaybe(fuzzstrat);
        vrfy(elem, tempstr("atf_fuzz.static_insert_fatal_error")
        << Keyval("tuple",algo::strptr(data[i].s))
        << Keyval("comment",algo_lib::DetachBadTags()));
        elem->step = data[i].step;
    }
}

// --- atf_fuzz.FDb.fuzzstrat.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_fuzz::fuzzstrat_XrefMaybe(atf_fuzz::FFuzzstrat &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- atf_fuzz.FDb.target.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
atf_fuzz::FTarget& atf_fuzz::target_Alloc() {
    atf_fuzz::FTarget* row = target_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("atf_fuzz.out_of_mem  field:atf_fuzz.FDb.target  comment:'Alloc failed'");
    }
    return *row;
}

// --- atf_fuzz.FDb.target.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
atf_fuzz::FTarget* atf_fuzz::target_AllocMaybe() {
    atf_fuzz::FTarget *row = (atf_fuzz::FTarget*)target_AllocMem();
    if (row) {
        new (row) atf_fuzz::FTarget; // call constructor
    }
    return row;
}

// --- atf_fuzz.FDb.target.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
atf_fuzz::FTarget* atf_fuzz::target_InsertMaybe(const dev::Target &value) {
    atf_fuzz::FTarget *row = &target_Alloc(); // if out of memory, process dies. if input error, return NULL.
    target_CopyIn(*row,const_cast<dev::Target&>(value));
    bool ok = target_XrefMaybe(*row); // this may return false
    if (!ok) {
        target_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- atf_fuzz.FDb.target.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* atf_fuzz::target_AllocMem() {
    u64 new_nelems     = _db.target_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    atf_fuzz::FTarget*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.target_lary[bsr];
        if (!lev) {
            lev=(atf_fuzz::FTarget*)algo_lib::malloc_AllocMem(sizeof(atf_fuzz::FTarget) * (u64(1)<<bsr));
            _db.target_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.target_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- atf_fuzz.FDb.target.RemoveAll
// Remove all elements from Lary
void atf_fuzz::target_RemoveAll() {
    for (u64 n = _db.target_n; n>0; ) {
        n--;
        target_qFind(u64(n)).~FTarget(); // destroy last element
        _db.target_n = i32(n);
    }
}

// --- atf_fuzz.FDb.target.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void atf_fuzz::target_RemoveLast() {
    u64 n = _db.target_n;
    if (n > 0) {
        n -= 1;
        target_qFind(u64(n)).~FTarget();
        _db.target_n = i32(n);
    }
}

// --- atf_fuzz.FDb.target.InputMaybe
static bool atf_fuzz::target_InputMaybe(dev::Target &elem) {
    bool retval = true;
    retval = target_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- atf_fuzz.FDb.target.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool atf_fuzz::target_XrefMaybe(atf_fuzz::FTarget &row) {
    bool retval = true;
    (void)row;
    // insert target into index ind_target
    if (true) { // user-defined insert condition
        bool success = ind_target_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "atf_fuzz.duplicate_key  xref:atf_fuzz.FDb.ind_target"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- atf_fuzz.FDb.ind_target.Find
// Find row by key. Return NULL if not found.
atf_fuzz::FTarget* atf_fuzz::ind_target_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_target_buckets_n - 1);
    atf_fuzz::FTarget* *e = &_db.ind_target_buckets_elems[index];
    atf_fuzz::FTarget* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).target == key;
        if (done) break;
        e         = &ret->ind_target_next;
    } while (true);
    return ret;
}

// --- atf_fuzz.FDb.ind_target.FindX
// Look up row by key and return reference. Throw exception if not found
atf_fuzz::FTarget& atf_fuzz::ind_target_FindX(const algo::strptr& key) {
    atf_fuzz::FTarget* ret = ind_target_Find(key);
    vrfy(ret, tempstr() << "atf_fuzz.key_error  table:ind_target  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- atf_fuzz.FDb.ind_target.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
atf_fuzz::FTarget& atf_fuzz::ind_target_GetOrCreate(const algo::strptr& key) {
    atf_fuzz::FTarget* ret = ind_target_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &target_Alloc();
        (*ret).target = key;
        bool good = target_XrefMaybe(*ret);
        if (!good) {
            target_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "atf_fuzz.create_error  table:ind_target  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- atf_fuzz.FDb.ind_target.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool atf_fuzz::ind_target_InsertMaybe(atf_fuzz::FTarget& row) {
    ind_target_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_target_next == (atf_fuzz::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        atf_fuzz::FTarget* *prev = &_db.ind_target_buckets_elems[index];
        do {
            atf_fuzz::FTarget* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).target == row.target) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_target_next;
        } while (true);
        if (retval) {
            row.ind_target_next = *prev;
            _db.ind_target_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- atf_fuzz.FDb.ind_target.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void atf_fuzz::ind_target_Remove(atf_fuzz::FTarget& row) {
    if (LIKELY(row.ind_target_next != (atf_fuzz::FTarget*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.target) & (_db.ind_target_buckets_n - 1);
        atf_fuzz::FTarget* *prev = &_db.ind_target_buckets_elems[index]; // addr of pointer to current element
        while (atf_fuzz::FTarget *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_target_next; // unlink (singly linked list)
                _db.ind_target_n--;
                row.ind_target_next = (atf_fuzz::FTarget*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_target_next;
        }
    }
}

// --- atf_fuzz.FDb.ind_target.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void atf_fuzz::ind_target_Reserve(int n) {
    u32 old_nbuckets = _db.ind_target_buckets_n;
    u32 new_nelems   = _db.ind_target_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(atf_fuzz::FTarget*);
        u32 new_size = new_nbuckets * sizeof(atf_fuzz::FTarget*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        atf_fuzz::FTarget* *new_buckets = (atf_fuzz::FTarget**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("atf_fuzz.out_of_memory  field:atf_fuzz.FDb.ind_target");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_target_buckets_n; i++) {
            atf_fuzz::FTarget* elem = _db.ind_target_buckets_elems[i];
            while (elem) {
                atf_fuzz::FTarget &row        = *elem;
                atf_fuzz::FTarget* next       = row.ind_target_next;
                u32 index          = algo::Smallstr16_Hash(0, row.target) & (new_nbuckets-1);
                row.ind_target_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_target_buckets_elems, old_size);
        _db.ind_target_buckets_elems = new_buckets;
        _db.ind_target_buckets_n = new_nbuckets;
    }
}

// --- atf_fuzz.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr atf_fuzz::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- atf_fuzz.FDb.trace.N
// Function return 1
inline static i32 atf_fuzz::trace_N() {
    return 1;
}

// --- atf_fuzz.FDb..Init
// Set all fields to initial values.
void atf_fuzz::FDb_Init() {
    // initialize LAry fuzzstrat (atf_fuzz.FDb.fuzzstrat)
    _db.fuzzstrat_n = 0;
    memset(_db.fuzzstrat_lary, 0, sizeof(_db.fuzzstrat_lary)); // zero out all level pointers
    atf_fuzz::FFuzzstrat* fuzzstrat_first = (atf_fuzz::FFuzzstrat*)algo_lib::malloc_AllocMem(sizeof(atf_fuzz::FFuzzstrat) * (u64(1)<<4));
    if (!fuzzstrat_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.fuzzstrat_lary[i]  = fuzzstrat_first;
        fuzzstrat_first    += 1ULL<<i;
    }
    // initialize LAry target (atf_fuzz.FDb.target)
    _db.target_n = 0;
    memset(_db.target_lary, 0, sizeof(_db.target_lary)); // zero out all level pointers
    atf_fuzz::FTarget* target_first = (atf_fuzz::FTarget*)algo_lib::malloc_AllocMem(sizeof(atf_fuzz::FTarget) * (u64(1)<<4));
    if (!target_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.target_lary[i]  = target_first;
        target_first    += 1ULL<<i;
    }
    // initialize hash table for atf_fuzz::FTarget;
    _db.ind_target_n             	= 0; // (atf_fuzz.FDb.ind_target)
    _db.ind_target_buckets_n     	= 4; // (atf_fuzz.FDb.ind_target)
    _db.ind_target_buckets_elems 	= (atf_fuzz::FTarget**)algo_lib::malloc_AllocMem(sizeof(atf_fuzz::FTarget*)*_db.ind_target_buckets_n); // initial buckets (atf_fuzz.FDb.ind_target)
    if (!_db.ind_target_buckets_elems) {
        FatalErrorExit("out of memory"); // (atf_fuzz.FDb.ind_target)
    }
    memset(_db.ind_target_buckets_elems, 0, sizeof(atf_fuzz::FTarget*)*_db.ind_target_buckets_n); // (atf_fuzz.FDb.ind_target)
    _db.c_target = NULL;

    atf_fuzz::InitReflection();
    fuzzstrat_LoadStatic(); // gen:ns_gstatic  gstatic:atf_fuzz.FDb.fuzzstrat  load atf_fuzz.FFuzzstrat records
}

// --- atf_fuzz.FDb..Uninit
void atf_fuzz::FDb_Uninit() {
    atf_fuzz::FDb &row = _db; (void)row;

    // atf_fuzz.FDb.ind_target.Uninit (Thash)  //
    // skip destruction of ind_target in global scope

    // atf_fuzz.FDb.target.Uninit (Lary)  //
    // skip destruction in global scope

    // atf_fuzz.FDb.fuzzstrat.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- atf_fuzz.FFuzzstrat.base.CopyOut
// Copy fields out of row
void atf_fuzz::fuzzstrat_CopyOut(atf_fuzz::FFuzzstrat &row, atfdb::Fuzzstrat &out) {
    out.fuzzstrat = row.fuzzstrat;
    out.comment = row.comment;
}

// --- atf_fuzz.FFuzzstrat.base.CopyIn
// Copy fields in to row
void atf_fuzz::fuzzstrat_CopyIn(atf_fuzz::FFuzzstrat &row, atfdb::Fuzzstrat &in) {
    row.fuzzstrat = in.fuzzstrat;
    row.comment = in.comment;
}

// --- atf_fuzz.FTarget.base.CopyOut
// Copy fields out of row
void atf_fuzz::target_CopyOut(atf_fuzz::FTarget &row, dev::Target &out) {
    out.target = row.target;
    out.license = row.license;
    out.compat = row.compat;
}

// --- atf_fuzz.FTarget.base.CopyIn
// Copy fields in to row
void atf_fuzz::target_CopyIn(atf_fuzz::FTarget &row, dev::Target &in) {
    row.target = in.target;
    row.license = in.license;
    row.compat = in.compat;
}

// --- atf_fuzz.FTarget..Uninit
void atf_fuzz::FTarget_Uninit(atf_fuzz::FTarget& target) {
    atf_fuzz::FTarget &row = target; (void)row;
    ind_target_Remove(row); // remove target from index ind_target
}

// --- atf_fuzz.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_fuzz::value_ToCstr(const atf_fuzz::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_fuzz_FieldId_value        : ret = "value";  break;
    }
    return ret;
}

// --- atf_fuzz.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_fuzz::value_Print(const atf_fuzz::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_fuzz.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_fuzz::value_SetStrptrMaybe(atf_fuzz::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,atf_fuzz_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_fuzz.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_fuzz::value_SetStrptr(atf_fuzz::FieldId& parent, algo::strptr rhs, atf_fuzz_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_fuzz.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_fuzz::value_ReadStrptrMaybe(atf_fuzz::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_fuzz.FieldId..ReadStrptrMaybe
// Read fields of atf_fuzz::FieldId from an ascii string.
// The format of the string is the format of the atf_fuzz::FieldId's only field
bool atf_fuzz::FieldId_ReadStrptrMaybe(atf_fuzz::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && atf_fuzz::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_fuzz.FieldId..Print
// print string representation of atf_fuzz::FieldId to string LHS, no header -- cprint:atf_fuzz.FieldId.String
void atf_fuzz::FieldId_Print(atf_fuzz::FieldId & row, algo::cstring &str) {
    atf_fuzz::value_Print(row, str);
}

// --- atf_fuzz.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* atf_fuzz::value_ToCstr(const atf_fuzz::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case atf_fuzz_TableId_dev_Target   : ret = "dev.Target";  break;
    }
    return ret;
}

// --- atf_fuzz.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void atf_fuzz::value_Print(const atf_fuzz::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- atf_fuzz.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool atf_fuzz::value_SetStrptrMaybe(atf_fuzz::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 10: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,atf_fuzz_TableId_dev_Target); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"et",2)==0) { value_SetEnum(parent,atf_fuzz_TableId_dev_target); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- atf_fuzz.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void atf_fuzz::value_SetStrptr(atf_fuzz::TableId& parent, algo::strptr rhs, atf_fuzz_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- atf_fuzz.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool atf_fuzz::value_ReadStrptrMaybe(atf_fuzz::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- atf_fuzz.TableId..ReadStrptrMaybe
// Read fields of atf_fuzz::TableId from an ascii string.
// The format of the string is the format of the atf_fuzz::TableId's only field
bool atf_fuzz::TableId_ReadStrptrMaybe(atf_fuzz::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && atf_fuzz::value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- atf_fuzz.TableId..Print
// print string representation of atf_fuzz::TableId to string LHS, no header -- cprint:atf_fuzz.TableId.String
void atf_fuzz::TableId_Print(atf_fuzz::TableId & row, algo::cstring &str) {
    atf_fuzz::value_Print(row, str);
}

// --- atf_fuzz...SizeCheck
inline static void atf_fuzz::SizeCheck() {
}

// --- atf_fuzz...main
int main(int argc, char **argv) {
    try {
        lib_json::FDb_Init();
        algo_lib::FDb_Init();
        atf_fuzz::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        atf_fuzz::MainArgs(algo_lib::_db.argc,algo_lib::_db.argv); // dmmeta.main:atf_fuzz
    } catch(algo_lib::ErrorX &x) {
        prerr("atf_fuzz.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        atf_fuzz::FDb_Uninit();
        algo_lib::FDb_Uninit();
        lib_json::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- atf_fuzz...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
