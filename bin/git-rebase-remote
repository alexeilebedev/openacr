#!/usr/bin/env bash
# use git-rebase-remote <remote> [<default_branch>]
ORIGIN=("${@:1}")
BRANCH=master
if (( $# >= 2 )); then
    BRANCH=("${@:2}")
fi
# if no params are specified, get it from git
if (( $# == 0 )); then
    OB=$(git status -b --porcelain | head -1 | cut -d'.' -f5 | cut -d' ' -f1)
    ORIGIN=$(echo $OB | cut -d'/' -f1)
    BRANCH=$(echo $OB | cut -d'/' -f2)
fi
echo "rebasing to remote:"$ORIGIN "branch:"$BRANCH

git fetch $ORIGIN
# do this as a single command so that if reset fails, there is no commit attempt.
git reset --soft $(git merge-base HEAD $ORIGIN/$BRANCH) && (
    git commit -m "$(git log --format=%B --reverse HEAD..HEAD@{1})"
    git commit --amend # allow editing comment
)
# keep-empty is needed so that base commit gets integrated
git rebase --keep-empty --strategy=recursive  $ORIGIN/$BRANCH
