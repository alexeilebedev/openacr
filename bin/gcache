#!/usr/bin/env perl
# Copyright (C) 2008-2013 AlgoEngineering LLC
# Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
# Copyright (C) 2022 Astra
# Copyright (C) 2023 AlgoRND
#
# License: GPL
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Contacting ICE: <https://www.theice.com/contact>
# first line of defense:
# get rid of trivial conflicts and commit if no further changes...

use English;
use strict;
use File::Copy;

# example of command line we want to speed up
# /usr/bin/time -v g++  -x g++ -Wno-invalid-offsetof -g -D_DEBUG=1 -ffunction-sections -fdata-sections -Wsequence-point -Wno-multichar -Wall -Wshadow -pipe -Wextra -Winit-self -Wmissing-include-dirs -Wmissing-declarations -iquote . -msse4.2 -D AOS_SSE42 -Wno-vla -Wno-unused-local-typedefs -Wno-long-long -Wno-strict-aliasing -fpch-preprocess -iquote dflt.debug-x86_64/   -c a.cpp -o   a.o

# strategy:
# 1. check if command line is optimizable -- needs a -c and -o options
# 2. run the same command, in preprocessor mode, replacing -o with -E, save result to preproc file
# 3. compute checksum of preproc file
# 4. check if preproc file exists in the cache directory.
# 5. if not, invoke original command line. if it succeeds, copy object file to cache
# 6. if file exists, safely copy cached file back
my $verbose = $ENV{GCACHE_VERBOSE};
my @tempfiles;
my $preprocfile; #
my $compiler="g++";
my $objfile; # intended output
my $cachedobjfile; # intended output
my $cachedir=".gcache";
my $retry_original=0;# if set, fallback to original command

my $trace_hash=0;
my $trace_copyerr=0;
my $trace_srcerr=0;
my $trace_compile=0;
my $trace_hit=0;
my $trace_unoptimizable_cmd=0;
my $trace_miss=0;
my $trace_fallback=0;

# -----------------------------------------------------------------------------

sub RegisterTempFile($) {
    push(@tempfiles,$_[0]);
}

# -----------------------------------------------------------------------------

sub RemoveTempFiles() {
    foreach my $f (@tempfiles) {
        unlink($f);
    }
}

# -----------------------------------------------------------------------------

sub OptimizableCmdQ() {
    my @cmd;
    my $n_c=0;
    my $n_o=0;
    my $n_E;
    foreach my $x (@ARGV) {
        $n_c++ if ($x eq "-c");
        $n_o++ if ($x eq "-o");
        $n_E++ if ($x eq "-E");
    }
    my $ret = $n_c==1 && $n_o==1 && $n_E==0;
    if (!$ret) {
        $trace_unoptimizable_cmd++;
    }
    return $ret;
}

# -----------------------------------------------------------------------------

# find value of command line arg $_[0] in list $_[1]
sub FindArg($$) {
    my $ret="";
    my $found=0;
    my $list=$_[1];
    foreach my $x(@$list) {
        if ($x eq $_[0]) {
            $found=1;
        } elsif ($found) {
            $ret=$x;
            last;
        }
    }
    return $ret;
}

# -----------------------------------------------------------------------------

# set value of command line arg $_[0] to $_[1] in list $_[2]
sub SetArg($$$) {
    my $found=0;
    my $list=$_[2];
    foreach my $x(@$list) {
        if ($x eq $_[0]) {
            $found=1;
        } elsif ($found) {
            # update value
            $x=$_[1];
            last;
        }
    }
}

# -----------------------------------------------------------------------------

sub PreprocCmd() {
    my @preproccmd=CompileCmd();
    SetArg("-o",$preprocfile,\@preproccmd);
    push(@preproccmd, "-E");
    return @preproccmd;
}

# -----------------------------------------------------------------------------

sub SysCmd(@) {
    if ($verbose>1) {
        print STDERR "gcache.cmd  pid:$PID  @_\n";
    }
    my $rc= system(@_);
    return $rc;
}

# -----------------------------------------------------------------------------

# if hash doesn't succeed...
sub HashFile($) {
    my @result=split(/\s+/,`md5sum $_[0]`);
    my $hash=$result[0];
    return $hash;
}

# -----------------------------------------------------------------------------

sub Mtime($) {
    my $modtime = (stat($_[0]))[9];
    return $modtime;
}

# -----------------------------------------------------------------------------

sub StringToFile($$) {
    if (open(my $W,">","$_[1].$PID")) {
        print $W $_[0];
        close $W;
        move("$_[1].$PID",$_[1]);
    }
}

# -----------------------------------------------------------------------------

sub WeakHashFile($) {
    my $cached = "$_[0].md5";
    my $hash="";
    if (!-f $cached || Mtime($_[0]) > Mtime($cached)) {
        $trace_hash++;
        my @result=split(/\s+/,`md5sum $_[0]`);
        $hash=$result[0];
        StringToFile($hash,$cached);
    } else {
        if (open(my $R,"<",$cached)) {
            $hash=<$R>;
            close $R;
        }
    }
    return $hash;
}

# -----------------------------------------------------------------------------

sub CompileCmd() {
    return @ARGV;
}

# -----------------------------------------------------------------------------

# append $_[0] to $_[1]. Return unix success code
sub AppendStringToFile($$) {
    my $rc=-1;
    if (open(my $w, ">>", $_[1])) {
        print $w $_[0];
        $rc=0;
        close $w;
    }
    return $rc;
}

# -----------------------------------------------------------------------------

# search first 100 lines  of $_[0] for reference to a precompiled header
# return filename for that header, if applicable
# Example of preprocess file:
# #pragma GCC pch_preprocess "<builddir>/include.algo_pch.h.gch"
sub FindPchFile($) {
    my $ret="";
    my $nline=0;
    if (open(my $R,"<",$_[0])) {
        while (<$R>) {
            if ($_ =~ /#pragma GCC pch_preprocess "(.*)"$/) {
                $ret=$1;
                last;
            }
            last if $nline>100;
        }
    }
    return $ret;
}

# -----------------------------------------------------------------------------

# compute content-dependent name for object file
sub SourceChecksum() {
    my @preproccmd = PreprocCmd();
    my $rc=SysCmd(@preproccmd);
    my $ret="";
    my $pchfile=FindPchFile($preprocfile);
    # append hash of precompiled header to the preprocessed file
    my $extras="";
    if ($pchfile && -f $pchfile) {
        my $pchhash=WeakHashFile($pchfile);
        $extras="const char *_gcache_pch_hash=\"$pchhash\";\n";
    }
    # append compile command line to file
    my @newcmd = @ARGV;
    SetArg("-c","SRCFILE",\@newcmd);
    SetArg("-o","OBJFILE",\@newcmd);
    $extras .= "const char *_gcache_cmdline=\"@newcmd\";\n";
    $rc=AppendStringToFile($extras, $preprocfile);
    if ($rc==0) {
        my $hash=HashFile($preprocfile);
        if ($hash ne "") {
            $ret=$hash;
        }
    }
    return $ret;
}

# -----------------------------------------------------------------------------

sub CachedObjFilename($) {
    my $subdir1=substr($_[0],0,2);# first 2 chars
    my $subdir2=substr($_[0],2,2);# next 2 chars
    mkdir("$cachedir/$subdir1");
    mkdir("$cachedir/$subdir1/$subdir2");
    return "$cachedir/$subdir1/$subdir2/$_[0]";
}

# -----------------------------------------------------------------------------

# Safely copy $_[0] to $_[1]
# Return unix error code
sub SafeCopy($$) {
    my ($from,$to)=@_;
    my $pid=$PID;
    my $retval=0;
    if (copy($from, "$to.$pid")) {
        # atomically move into place
        $retval=move("$to.$pid",$to);
    }
    return $retval ? 0 : $!;
}

# -----------------------------------------------------------------------------

sub AnalyzeCmdline() {
    my @list=@ARGV;
    while (@list) {
        my $arg=shift @list;
        if ($arg eq "-o") {
            $objfile=shift @list;
        }
    }
}

# -----------------------------------------------------------------------------

my $rc=0;
my $fallback=0;
my $checksum;
AnalyzeCmdline();
my $usecache = -d $cachedir && OptimizableCmdQ();
if ($usecache) {
    $preprocfile="$objfile.E";
    mkdir($cachedir);
    RegisterTempFile($preprocfile);
    $checksum=SourceChecksum();
}
if (!$checksum) {
    $fallback=1;
    if ($verbose>0) {
        $trace_srcerr++;
    }
}
if ($checksum) {
    $cachedobjfile=CachedObjFilename($checksum);
    if (-f $cachedobjfile) {
        $trace_hit++;
        $rc = SafeCopy($cachedobjfile,$objfile);
        if ($rc) {
            if ($verbose>0) {
                $trace_copyerr++;
            }
        }
    } else {
        $trace_miss++;
        $trace_compile++;
        my @compilecmd=CompileCmd();
        $rc=SysCmd(@compilecmd);
        if ($rc==0) {
            # error ok
            SafeCopy($objfile,$cachedobjfile);
        }
    }
}

# execute provided command
if ($rc==0 && $fallback) {
    $trace_compile++;
    $trace_fallback++;
    $rc=SysCmd(CompileCmd());
}
if ($verbose > 0) {
    print STDERR "gcache  objfile:$objfile  hit:$trace_hit"
        ."  miss:$trace_miss  compile:$trace_compile  hash:$trace_hash"
        ."  fallback:$trace_fallback  srcerr:$trace_srcerr"
        ."  copyerr:$trace_copyerr  unoptimizable_cmd:$trace_unoptimizable_cmd\n";
}
RemoveTempFiles();
exit $rc > 128 ? 128 : $rc;
